From 0e7182ea9c377d7ef7283bc682be560c94621336 Mon Sep 17 00:00:00 2001
From: bilalliberty <dominosliberty@gmail.com>
Date: Fri, 27 Dec 2013 02:00:32 +0300
Subject: [PATCH] Delete so called jellybean drivers

---
 drivers/media/video/msm/Kconfig                    |   418 -
 drivers/media/video/msm/Makefile                   |    59 -
 drivers/media/video/msm/actuators/Makefile         |    15 -
 drivers/media/video/msm/actuators/msm_actuator.c   |   363 -
 drivers/media/video/msm/actuators/msm_actuator.h   |   121 -
 drivers/media/video/msm/actuators/s5k3h1gx_act.c   |   433 -
 drivers/media/video/msm/actuators/s5k3h2yx_act.c   |   439 -
 drivers/media/video/msm/csi/Makefile               |     5 -
 drivers/media/video/msm/csi/msm_csic.c             |   474 -
 drivers/media/video/msm/csi/msm_csic.h             |    48 -
 drivers/media/video/msm/csi/msm_csid.h             |    48 -
 drivers/media/video/msm/csi/msm_csiphy.h           |    46 -
 drivers/media/video/msm/csi/msm_ispif.c            |   686 -
 drivers/media/video/msm/csi/msm_ispif.h            |    68 -
 drivers/media/video/msm/flash.c                    |   735 -
 drivers/media/video/msm/gemini/Makefile            |     3 -
 drivers/media/video/msm/gemini/msm_gemini_common.h |    39 -
 drivers/media/video/msm/gemini/msm_gemini_core.c   |   248 -
 drivers/media/video/msm/gemini/msm_gemini_core.h   |    35 -
 drivers/media/video/msm/gemini/msm_gemini_dev.c    |   266 -
 drivers/media/video/msm/gemini/msm_gemini_hw.c     |   519 -
 drivers/media/video/msm/gemini/msm_gemini_hw.h     |   104 -
 drivers/media/video/msm/gemini/msm_gemini_hw_reg.h |   176 -
 .../media/video/msm/gemini/msm_gemini_platform.c   |   256 -
 .../media/video/msm/gemini/msm_gemini_platform.h   |    38 -
 drivers/media/video/msm/gemini/msm_gemini_sync.c   |   855 -
 drivers/media/video/msm/gemini/msm_gemini_sync.h   |    78 -
 drivers/media/video/msm/io/Makefile                |     4 -
 drivers/media/video/msm/io/msm_camera_eeprom.c     |    96 -
 drivers/media/video/msm/io/msm_camera_eeprom.h     |    66 -
 drivers/media/video/msm/io/msm_camera_i2c.c        |   630 -
 drivers/media/video/msm/io/msm_camera_i2c.h        |   131 -
 drivers/media/video/msm/io/msm_camera_i2c_mux.c    |   187 -
 drivers/media/video/msm/io/msm_camera_i2c_mux.h    |    46 -
 drivers/media/video/msm/io/msm_io_util.c           |   301 -
 drivers/media/video/msm/msm.c                      |  4034 --
 drivers/media/video/msm/msm.h                      |   594 -
 drivers/media/video/msm/msm_axi_qos.c              |    50 -
 drivers/media/video/msm/msm_gesture.c              |   502 -
 drivers/media/video/msm/msm_io_8x60_v4l2.c         |   540 -
 drivers/media/video/msm/msm_isp.c                  |  1010 -
 drivers/media/video/msm/msm_mctl.c                 |  1825 -
 drivers/media/video/msm/msm_mctl_buf.c             |   937 -
 drivers/media/video/msm/msm_mctl_pp.c              |  1012 -
 drivers/media/video/msm/msm_mem.c                  |   423 -
 drivers/media/video/msm/msm_vfe31_v4l2.c           |  3808 --
 drivers/media/video/msm/msm_vfe31_v4l2.h           |   889 -
 drivers/media/video/msm/msm_vfe32.h                |   987 -
 drivers/media/video/msm/msm_vpe.c                  |   776 -
 drivers/media/video/msm/msm_vpe.h                  |   184 -
 drivers/media/video/msm/rawchip/DxODOP_regMap.h    |   395 -
 drivers/media/video/msm/rawchip/DxODPP_regMap.h    |   156 -
 drivers/media/video/msm/rawchip/DxOPDP_regMap.h    |   149 -
 drivers/media/video/msm/rawchip/Makefile           |     3 -
 drivers/media/video/msm/rawchip/Yushan_API.c       |  2647 --
 drivers/media/video/msm/rawchip/Yushan_API.h       |   619 -
 .../media/video/msm/rawchip/Yushan_HTC_Functions.c |  2094 -
 .../media/video/msm/rawchip/Yushan_HTC_Functions.h |   210 -
 .../video/msm/rawchip/Yushan_Platform_Specific.c   |   905 -
 .../video/msm/rawchip/Yushan_Platform_Specific.h   |    30 -
 drivers/media/video/msm/rawchip/rawchip.c          |  1005 -
 drivers/media/video/msm/rawchip/rawchip.h          |   107 -
 drivers/media/video/msm/rawchip/rawchip_spi.c      |   498 -
 drivers/media/video/msm/rawchip/rawchip_spi.h      |    42 -
 drivers/media/video/msm/rawchip/yushan_reg.c       | 37984 -------------------
 .../media/video/msm/rawchip/yushan_reg_ar0260.c    |  2157 --
 .../media/video/msm/rawchip/yushan_reg_imx175.c    |  3238 --
 .../media/video/msm/rawchip/yushan_reg_ov2722.c    |  2157 --
 .../media/video/msm/rawchip/yushan_reg_ov5693.c    |  3236 --
 .../media/video/msm/rawchip/yushan_reg_ov8838.c    |  3236 --
 .../media/video/msm/rawchip/yushan_reg_s5k3h2yx.c  |  3238 --
 .../media/video/msm/rawchip/yushan_reg_s5k6a2ya.c  |  2150 --
 .../media/video/msm/rawchip/yushan_registermap.h   |   405 -
 drivers/media/video/msm/rawchip/yushan_u_code_r2.c | 35855 -----------------
 drivers/media/video/msm/rawchip/yushan_u_code_r3.c | 36251 ------------------
 drivers/media/video/msm/sensors/Makefile           |    29 -
 drivers/media/video/msm/sensors/msm_sensor.c       |  1911 -
 drivers/media/video/msm/sensors/msm_sensor.h       |   307 -
 drivers/media/video/msm/sensors/mt9v113.h          |    85 -
 .../video/msm/sensors/mt9v113_reg_lens_9251.c      |  1046 -
 drivers/media/video/msm/sensors/mt9v113_v4l2.c     |  2670 --
 drivers/media/video/msm/sensors/s5k3h1gx_v4l2.c    |  1023 -
 drivers/media/video/msm/sensors/s5k3h2yx_v4l2.c    |  1617 -
 drivers/media/video/msm/wfd/Makefile               |     5 -
 84 files changed, 173067 deletions(-)
 delete mode 100644 drivers/media/video/msm/Kconfig
 delete mode 100644 drivers/media/video/msm/Makefile
 delete mode 100644 drivers/media/video/msm/actuators/Makefile
 delete mode 100644 drivers/media/video/msm/actuators/msm_actuator.c
 delete mode 100644 drivers/media/video/msm/actuators/msm_actuator.h
 delete mode 100644 drivers/media/video/msm/actuators/s5k3h1gx_act.c
 delete mode 100644 drivers/media/video/msm/actuators/s5k3h2yx_act.c
 delete mode 100644 drivers/media/video/msm/csi/Makefile
 delete mode 100644 drivers/media/video/msm/csi/msm_csic.c
 delete mode 100644 drivers/media/video/msm/csi/msm_csic.h
 delete mode 100644 drivers/media/video/msm/csi/msm_csid.h
 delete mode 100644 drivers/media/video/msm/csi/msm_csiphy.h
 delete mode 100644 drivers/media/video/msm/csi/msm_ispif.c
 delete mode 100644 drivers/media/video/msm/csi/msm_ispif.h
 delete mode 100644 drivers/media/video/msm/flash.c
 delete mode 100644 drivers/media/video/msm/gemini/Makefile
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_common.h
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_core.c
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_core.h
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_dev.c
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_hw.c
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_hw.h
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_hw_reg.h
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_platform.c
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_platform.h
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_sync.c
 delete mode 100644 drivers/media/video/msm/gemini/msm_gemini_sync.h
 delete mode 100644 drivers/media/video/msm/io/Makefile
 delete mode 100644 drivers/media/video/msm/io/msm_camera_eeprom.c
 delete mode 100644 drivers/media/video/msm/io/msm_camera_eeprom.h
 delete mode 100644 drivers/media/video/msm/io/msm_camera_i2c.c
 delete mode 100644 drivers/media/video/msm/io/msm_camera_i2c.h
 delete mode 100644 drivers/media/video/msm/io/msm_camera_i2c_mux.c
 delete mode 100644 drivers/media/video/msm/io/msm_camera_i2c_mux.h
 delete mode 100644 drivers/media/video/msm/io/msm_io_util.c
 delete mode 100644 drivers/media/video/msm/msm.c
 delete mode 100644 drivers/media/video/msm/msm.h
 delete mode 100644 drivers/media/video/msm/msm_axi_qos.c
 delete mode 100644 drivers/media/video/msm/msm_gesture.c
 delete mode 100644 drivers/media/video/msm/msm_io_8x60_v4l2.c
 delete mode 100644 drivers/media/video/msm/msm_isp.c
 delete mode 100644 drivers/media/video/msm/msm_mctl.c
 delete mode 100644 drivers/media/video/msm/msm_mctl_buf.c
 delete mode 100644 drivers/media/video/msm/msm_mctl_pp.c
 delete mode 100644 drivers/media/video/msm/msm_mem.c
 delete mode 100644 drivers/media/video/msm/msm_vfe31_v4l2.c
 delete mode 100644 drivers/media/video/msm/msm_vfe31_v4l2.h
 delete mode 100644 drivers/media/video/msm/msm_vfe32.h
 delete mode 100644 drivers/media/video/msm/msm_vpe.c
 delete mode 100644 drivers/media/video/msm/msm_vpe.h
 delete mode 100644 drivers/media/video/msm/rawchip/DxODOP_regMap.h
 delete mode 100644 drivers/media/video/msm/rawchip/DxODPP_regMap.h
 delete mode 100644 drivers/media/video/msm/rawchip/DxOPDP_regMap.h
 delete mode 100644 drivers/media/video/msm/rawchip/Makefile
 delete mode 100644 drivers/media/video/msm/rawchip/Yushan_API.c
 delete mode 100644 drivers/media/video/msm/rawchip/Yushan_API.h
 delete mode 100644 drivers/media/video/msm/rawchip/Yushan_HTC_Functions.c
 delete mode 100644 drivers/media/video/msm/rawchip/Yushan_HTC_Functions.h
 delete mode 100644 drivers/media/video/msm/rawchip/Yushan_Platform_Specific.c
 delete mode 100644 drivers/media/video/msm/rawchip/Yushan_Platform_Specific.h
 delete mode 100644 drivers/media/video/msm/rawchip/rawchip.c
 delete mode 100644 drivers/media/video/msm/rawchip/rawchip.h
 delete mode 100644 drivers/media/video/msm/rawchip/rawchip_spi.c
 delete mode 100644 drivers/media/video/msm/rawchip/rawchip_spi.h
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg_ar0260.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg_imx175.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg_ov2722.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg_ov5693.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg_ov8838.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg_s5k3h2yx.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_reg_s5k6a2ya.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_registermap.h
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_u_code_r2.c
 delete mode 100644 drivers/media/video/msm/rawchip/yushan_u_code_r3.c
 delete mode 100644 drivers/media/video/msm/sensors/Makefile
 delete mode 100644 drivers/media/video/msm/sensors/msm_sensor.c
 delete mode 100644 drivers/media/video/msm/sensors/msm_sensor.h
 delete mode 100644 drivers/media/video/msm/sensors/mt9v113.h
 delete mode 100644 drivers/media/video/msm/sensors/mt9v113_reg_lens_9251.c
 delete mode 100644 drivers/media/video/msm/sensors/mt9v113_v4l2.c
 delete mode 100644 drivers/media/video/msm/sensors/s5k3h1gx_v4l2.c
 delete mode 100644 drivers/media/video/msm/sensors/s5k3h2yx_v4l2.c
 delete mode 100644 drivers/media/video/msm/wfd/Makefile

diff --git a/drivers/media/video/msm/Kconfig b/drivers/media/video/msm/Kconfig
deleted file mode 100644
index 0c968a1..0000000
--- a/drivers/media/video/msm/Kconfig
+++ /dev/null
@@ -1,418 +0,0 @@
-config MSM_CAMERA_V4L2
-        bool "MSM Camera V4L2 Interface"
-        depends on MSM_CAMERA
-        default n
-        ---help---
-          This flag enables V4L2 interface of MSM
-          camera driver. If enabled, application interacts
-          with /dev/video0 through V4L2 APIs. Otherwise,
-          native APIs are used through /dev/config0, /dev/frame0,
-          and /dev/control0.
-
-comment "Camera Sensor Selection"
-config MT9T013
-	bool "Sensor mt9t013 (BAYER 3M)"
-	depends on MSM_CAMERA && !ARCH_MSM8X60 && !ARCH_MSM8960 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  MICRON 3M Bayer Sensor with AutoFocus
-config MT9D113
-	bool "Sensor mt9d113 (YUV 2M)"
-	depends on MSM_CAMERA && ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  MICRON 2M YUV Sensor
-	  This sensor is the front camera on QT8660.
-	  This uses csi mipi interface.
-	  This sensor is used only on QT device.
-config MT9D112
-	bool "Sensor mt9d112 (YUV 2M)"
-	depends on MSM_CAMERA && !ARCH_MSM8X60 && !ARCH_MSM8960 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  MICRON 2M YUV Sensor
-config IMX074
-	bool "Sensor IMX074 (BAYER 13.5M)"
-	depends on MSM_CAMERA
-	---help---
-	SONY 13.5 MP Bayer Sensor
-
-config S5K3H2YX
-	bool "Sensor s5k3h2yx (Samsung 8M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for S5K3H2YX samsung sensor driver.
-	  It is a Bayer 8MP sensor with auto focus and it supports
-	  two mipi lanes.
-
-config S5K6A1GX
-	bool "Sensor s5k6a1gx (Samsung 1.3M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for S5K6A1GX samsung sensor driver.
-	  It is a Bayer 1.3MP sensor it supports one mipi lanes.
-
-config AR0260
-	bool "Sensor ar0260"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for AR0260 sensor driver.
-
-config OV2722
-	bool "Sensor ov2722"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for OV2722 sensor driver.
-
-config OV5640
-	bool "Sensor OV5640 (YUV 5M)"
-	depends on MSM_CAMERA && !MSM_CAMERA_V4L2
-	default n
-	---help---
-	Omni 5M YUV Sensor
-
-config OV5647
-	bool "Sensor ov5647 (BAYER 5M)"
-	depends on MSM_CAMERA
-	---help---
-	  OV 5M Bayer Sensor with AutoFocus
-
-config AD5046_ACT
-	bool "Lens actuator ad5046"
-	depends on MSM_CAMERA && OV5647
-	---help---
-	  ad5046 lens actuator driver for ov5647.
-	  Say Y here if this is msm7627A variant platform.
-config WEBCAM_OV7692_QRD
-	bool "Sensor OV7692 QRD(VGA YUV)"
-	depends on MSM_CAMERA && ARCH_MSM7X27A
-	default n
-	---help---
-	  Omni Vision VGA YUV Sensor for QRD Devices
-config MT9M114
-        bool "Sensor MT9M114 (YUV 1.26M)"
-        depends on MSM_CAMERA
-        ---help---
-        APTINA 1.26 MP yuv Sensor
-config WEBCAM_OV7692
-	bool "Sensor OV7692 (VGA YUV)"
-	depends on MSM_CAMERA && ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  Omni Vision VGA YUV Sensor.
-config WEBCAM_OV9726
-	bool "Sensor OV9726 (VGA Bayer)"
-	depends on MSM_CAMERA && (ARCH_MSM8X60 || ARCH_MSM7X30 || ARCH_MSM7X27A)
-	default n
-	---help---
-	  Omni Vision VGA Bayer Sensor.
-#	This Senosr is used as a webcam.
-#	This uses the CSI interface.
-config VX6953
-	bool "Sensor VX6953 (BAYER 5M)"
-	depends on MSM_CAMERA && (ARCH_MSM7X30 || ARCH_MSM8X60)
-	default n
-	---help---
-	STM 5M Bayer Sensor with EDOF
-config SN12M0PZ
-	bool "Sensor sn12m0pz (Bayer 12 MP)"
-	depends on MSM_CAMERA && ARCH_MSM7X30 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  Sony 12 MP Bayer Sensor
-config MT9P012
-	bool "Sensor mt9p012 (BAYER 5M)"
-	depends on MSM_CAMERA && !ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  MICRON 5M Bayer Sensor with Autofocus
-
-choice
-	prompt "AF module"
-	depends on MT9P012 && !ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	default MSM_CAMERA_AF_FOXCONN
-
-config MSM_CAMERA_AF_FOXCONN
-	bool "FOXCONN Module"
-	help
-	  This driver supports FOXCONN AF module for 5M Bayer sensor
-
-config MSM_CAMERA_AF_BAM
-	bool "BAM Module"
-	help
-	  This driver supports BAM AF module for 5M Bayer sensor
-
-endchoice
-
-config MT9P012_KM
-	bool "Sensor mt9p012 KM module (BAYER 5M)"
-	depends on MSM_CAMERA && !ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  MICRON 5M Bayer Sensor KM modules with Autofocus
-
-config MT9E013
-	bool "Sensor mt9e013 module (BAYER 8M)"
-	depends on MSM_CAMERA && (ARCH_MSM7X30 || ARCH_MSM8X60 || ARCH_MSM7X27A)
-	default n
-	---help---
-	  Aptina 8M Bayer Sensor modules with Autofocus
-
-config IMX074_ACT
-	bool "Actuator IMX074 (BAYER 13.5M)"
-	depends on MSM_CAMERA
-	---help---
-	Actuator for SONY 13.5 MP Bayer Sensor
-
-config S5K3H2YX_ACT
-	bool "Sensor s5k3h2yx actuator"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Autofocus of s5k3h2yx actuator
-
-config S5K3E2FX
-	bool "Sensor s5k3e2fx (Samsung 5M)"
-	depends on MSM_CAMERA && !ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  Samsung 5M with Autofocus
-
-config QS_S5K4E1
-	bool "Sensor qs_s5k4e1 (Samsung 5M)"
-	depends on MSM_CAMERA && ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	default y
-	---help---
-	  Samsung 5M with Autofocus
-
-config S5K4E1
-	bool "Sensor Sensor s5k4e1 (Samsung 5M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for S5k4E1 samsung sensor driver.
-	  It is a Bayer 5MP sensor with auto focus and it supports
-	  two mipi lanes, required for msm7x2xA platform.
-	  Say Y here if this is msm7x2xA variant platform.
-
-config DW9712_ACT
-	bool "Lens actuator dw9721"
-	depends on MSM_CAMERA && S5K4E1
-	---help---
-	  dw9721 lens actuator driver for S5K4E1.
-	  Say Y here if this is msm7627A variant platform.
-
-config MSM_CAMERA_FLASH_SC628A
-	bool "Qualcomm MSM camera sc628a flash support"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Enable support for LED flash for msm camera.
-	  It is a samtech charge pump flash driver and it
-	  supports spotlight and flash light modes with
-	  differrent current levels.
-
-config IMX072
-	bool "Sensor imx072 (Sony 5M)"
-	default n
-	---help---
-	  Support for IMX072 sony sensor driver.
-	  It is a Bayer 5MP sensor with auto focus and it supports
-	  two mipi lanes, required for msm7x2xA platform.
-	  Say Y here if this is msm7x2xA variant platform.
-
-config OV2720
-	bool "Sensor ov2720 (Omnivision 2MP)"
-	depends on MSM_CAMERA
-
-config VB6801
-	bool "Sensor vb6801"
-	depends on MSM_CAMERA && !ARCH_MSM8X60 && !MSM_CAMERA_V4L2
-	---help---
-	  5M with flash
-
-config MSM_CAMERA_FLASH
-	bool "Qualcomm MSM camera flash support"
-	depends on MSM_CAMERA
-	default y
-	---help---
-	  Enable support for LED flash for msm camera
-
-config MSM_CAMERA_SENSOR
-	bool "Qualcomm MSM camera sensor support"
-	depends on MSM_CAMERA
-
-config MSM_ACTUATOR
-	bool "Qualcomm MSM actuator support"
-	depends on MSM_CAMERA
-
-config MSM_GEMINI
-	tristate "Qualcomm MSM Gemini Jpeg Engine support"
-	depends on MSM_CAMERA && (ARCH_MSM7X30 || ARCH_MSM8X60 || ARCH_MSM8960)
-	default n
-	---help---
-	  Enable support for Gemini Jpeg Engine
-
-config MSM_VPE
-	tristate "Qualcomm MSM Video Pre-processing Engine support"
-	depends on MSM_CAMERA && (ARCH_MSM7X30 || ARCH_MSM8X60)
-	default y
-	---help---
-	  Enable support for Video Pre-processing Engine
-
-config RAWCHIP
-	bool "Rawchip"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  ST Yushan rawchip
-
-config QUP_EXCLUSIVE_TO_CAMERA
-	bool "QUP exclusive to camera"
-	depends on MSM_CAMERA
-	default y
-	---help---
-	  This flag enabled states that QUP
-	  is exclusive to camera. In case this
-	  is disabled, the lvs1 voltage is enabled
-	  by QUP in the board file as QUP is used by
-	  applications other than camera.
-
-config S5K3L1YX
-	bool "Sensor S5K3L1YX (BAYER 12M)"
-	depends on MSM_CAMERA
-	---help---
-		Samsung 12 MP Bayer Sensor with auto focus, uses
-		4 mipi lanes, preview config = 1984 * 1508 at 30 fps,
-		snapshot config = 4000 * 3000 at 20 fps,
-		hfr video at 60, 90 and 120 fps.
-
-config IMX091
-	bool "Sensor IMX091 (BAYER 13M)"
-	depends on MSM_CAMERA
-	---help---
-	SONY 13 MP Bayer Sensor
-
-config IMX175
-	bool "Sensor IMX175 (BAYER 8M)"
-	depends on MSM_CAMERA
-	---help---
-	SONY 8 MP Bayer Sensor
-
-config IMX135
-	bool "Sensor IMX135 (BAYER 13M)"
-	depends on MSM_CAMERA
-	---help---
-	SONY 13 MP Bayer Sensor
-
-config OV8838
-	bool "Sensor OV8838 (OmniVision 8M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for OV8838 OmniVision sensor driver.
-	  It is a Bayer 8MP sensor with auto focus and it supports
-	  four mipi lanes and BSI.
-
-config IMX175_ACT
-	bool "Sensor imx175 actuator"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Autofocus of imx175 actuator
-
-config RUMBAS_ACT
-	bool "RUMBA-S actuator"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Autofocus of RUMBA-S actuator
-
-config AD5823_ACT
-       bool "Lens actuator ad5823"
-       depends on MSM_CAMERA
-       ---help---
-         ad5823 lens actuator driver for SONY IMX175 and IMX091.
-
-config AD5816_ACT
-       bool "Lens actuator ad5816"
-       depends on MSM_CAMERA
-       ---help---
-         ad5816 lens actuator driver for SONY IMX175 and IMX091.
-
-config TI201_ACT
-       bool "Lens actuator ti201"
-       depends on MSM_CAMERA
-       ---help---
-         ti201 lens actuator driver for SONY IMX175 and IMX091.
-
-config MT9V113
-	bool "Sensor mt9v113 (VGA YUV)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for MT9V113 Micron sensor driver.
-	  It is a Bayer 0.3MP sensor it supports two mipi lanes.
-
-config IMX175_2LANE
-	bool "Sensor IMX175 2-Lane(BAYER 8M)"
-	depends on MSM_CAMERA
-	---help---
-	SONY 8 MP Bayer Sensor for 2-lane hardware
-
-config OV5693_ACT
-	bool "Sensor OV5693 actuator"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Autofocus of ov5693 actuator
-
-config OV5693
-	bool "Sensor ov5693 (BAYER 5M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  OV 5M Bayer Sensor with AutoFocus
-
-config RAWCHIP_MCLK
-	bool "Rawchip MCLK"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  ST Yushan rawchip MCLK
-
-config S5K6A2YA
-	bool "Sensor s5k6a2ya (Samsung 1.6M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for S5K6A2YA samsung sensor driver.
-	  It is a Bayer 1.6MP sensor it supports one mipi lanes.
-
-config VD6869
-	bool "Sensor VD6869 (BAYER 4M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	ST 4MP Bayer Sensor
-
-config S5K3H1GX
-	bool "Sensor s5k3h1gx (Samsung 8M)"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Support for S5K3H1GX samsung sensor driver.
-	  It is a Bayer 8MP sensor with auto focus and it supports
-	  two mipi lanes.
-
-config S5K3H1GX_ACT
-	bool "Sensor s5k3h1gx actuator"
-	depends on MSM_CAMERA
-	default n
-	---help---
-	  Autofocus of s5k3h1gx actuator
-
diff --git a/drivers/media/video/msm/Makefile b/drivers/media/video/msm/Makefile
deleted file mode 100644
index bfe4ce3..0000000
--- a/drivers/media/video/msm/Makefile
+++ /dev/null
@@ -1,59 +0,0 @@
-GCC_VERSION      := $(shell $(CONFIG_SHELL) $(PWD)/scripts/gcc-version.sh $(CROSS_COMPILE)gcc)
-ifeq ($(GCC_VERSION),0404)
-CFLAGS_REMOVE_msm_vfe8x.o = -Wframe-larger-than=1024
-endif
-
-ifeq ($(CONFIG_MSM_CAMERA_V4L2),y)
-  EXTRA_CFLAGS += -Idrivers/media/video/msm/csi
-  EXTRA_CFLAGS += -Idrivers/media/video/msm/io
-  EXTRA_CFLAGS += -Idrivers/media/video/msm/sensors
-  obj-$(CONFIG_MSM_CAMERA) += msm_isp.o msm.o msm_mem.o msm_mctl.o msm_mctl_buf.o msm_mctl_pp.o
-  obj-$(CONFIG_MSM_CAMERA) += rawchip/ io/ sensors/ actuators/ csi/
-  obj-$(CONFIG_MSM_CAMERA) += msm_gesture.o
-else
-  obj-$(CONFIG_MSM_CAMERA) += msm_camera.o
-endif
-obj-$(CONFIG_MSM_CAMERA) += msm_axi_qos.o gemini/
-obj-$(CONFIG_MSM_CAMERA_FLASH) += flash.o
-obj-$(CONFIG_ARCH_MSM_ARM11) += msm_vfe7x.o msm_io7x.o
-ifeq ($(CONFIG_MSM_CAMERA_V4L2),y)
-  obj-$(CONFIG_ARCH_MSM7X27A) += msm_vfe7x27a_v4l2.o msm_io_7x27a_v4l2.o
-else
-  obj-$(CONFIG_ARCH_MSM7X27A) += msm_vfe7x27a.o msm_io_7x27a.o
-endif
-obj-$(CONFIG_ARCH_MSM7X30) += msm_vfe31.o msm_io_vfe31.o msm_vpe1.o
-obj-$(CONFIG_ARCH_QSD8X50) += msm_vfe8x.o msm_vfe8x_proc.o msm_io8x.o
-ifeq ($(CONFIG_MSM_CAMERA_V4L2),y)
-  obj-$(CONFIG_ARCH_MSM8X60) += msm_io_8x60_v4l2.o msm_vfe31_v4l2.o msm_vpe.o
-else
-obj-$(CONFIG_ARCH_MSM8X60) += msm_vfe31.o msm_io_8x60.o msm_vpe1.o
-endif
-obj-$(CONFIG_ARCH_MSM8960) += msm_io_8960.o msm_vfe32.o msm_vpe.o
-obj-$(CONFIG_MT9T013) += mt9t013.o mt9t013_reg.o
-obj-$(CONFIG_SN12M0PZ) += sn12m0pz.o sn12m0pz_reg.o
-obj-$(CONFIG_MT9P012) += mt9p012_reg.o
-obj-$(CONFIG_MSM_CAMERA_AF_FOXCONN) += mt9p012_fox.o
-obj-$(CONFIG_MSM_CAMERA_AF_BAM) += mt9p012_bam.o
-obj-$(CONFIG_MT9P012_KM) += mt9p012_km.o mt9p012_km_reg.o
-obj-$(CONFIG_S5K3E2FX) += s5k3e2fx.o
-#FIXME: Merge the two ifeq causes VX6953 preview not coming up.
-ifeq ($(CONFIG_MSM_CAMERA_V4L2),y)
-  obj-$(CONFIG_VX6953) += vx6953_v4l2.o vx6953_reg_v4l2.o
-else
-  obj-$(CONFIG_VX6953) += vx6953.o vx6953_reg.o
-  obj-$(CONFIG_IMX074) += imx074.o imx074_reg.o
-  obj-$(CONFIG_MT9E013) += mt9e013.o mt9e013_reg.o
-  obj-$(CONFIG_WEBCAM_OV9726) += ov9726.o ov9726_reg.o
-  obj-$(CONFIG_OV5647) += ov5647.o ov5647_reg.o
-  obj-$(CONFIG_S5K4E1) += s5k4e1.o s5k4e1_reg.o
-  obj-$(CONFIG_WEBCAM_OV7692) += ov7692.o
-  obj-$(CONFIG_WEBCAM_OV7692_QRD) += ov7692_qrd.o
-endif
-obj-$(CONFIG_QS_S5K4E1) += qs_s5k4e1.o qs_s5k4e1_reg.o
-obj-$(CONFIG_VB6801) += vb6801.o
-obj-$(CONFIG_IMX072) += imx072.o imx072_reg.o
-obj-$(CONFIG_OV5640) += ov5640.o
-obj-$(CONFIG_MT9D112) += mt9d112.o mt9d112_reg.o
-
-obj-$(CONFIG_MT9D113) += mt9d113.o mt9d113_reg.o
-obj-$(CONFIG_FB_MSM_WRITEBACK_MSM_PANEL) += wfd/
diff --git a/drivers/media/video/msm/actuators/Makefile b/drivers/media/video/msm/actuators/Makefile
deleted file mode 100644
index ecc2726..0000000
--- a/drivers/media/video/msm/actuators/Makefile
+++ /dev/null
@@ -1,15 +0,0 @@
-GCC_VERSION      := $(shell $(CONFIG_SHELL) $(PWD)/scripts/gcc-version.sh $(CROSS_COMPILE)gcc)
-EXTRA_CFLAGS += -Idrivers/media/video/msm
-EXTRA_CFLAGS += -Idrivers/media/video/msm/io
-obj-$(CONFIG_MSM_ACTUATOR) += msm_actuator.o
-obj-$(CONFIG_IMX074_ACT) += imx074_act.o
-obj-$(CONFIG_AD5823_ACT) += ad5823_act.o
-obj-$(CONFIG_AD5816_ACT) += ad5816_act.o
-obj-$(CONFIG_TI201_ACT) += ti201_act.o
-obj-$(CONFIG_S5K3H2YX_ACT) += s5k3h2yx_act.o
-obj-$(CONFIG_DW9712_ACT) += dw9712_act.o
-obj-$(CONFIG_AD5046_ACT) += ad5046_act.o
-obj-$(CONFIG_IMX175_ACT) += imx175_act.o
-obj-$(CONFIG_OV5693_ACT) += ov5693_act.o
-obj-$(CONFIG_RUMBAS_ACT) += rumbas_act.o
-obj-$(CONFIG_S5K3H1GX_ACT) += s5k3h1gx_act.o
diff --git a/drivers/media/video/msm/actuators/msm_actuator.c b/drivers/media/video/msm/actuators/msm_actuator.c
deleted file mode 100644
index 4270f48..0000000
--- a/drivers/media/video/msm/actuators/msm_actuator.c
+++ /dev/null
@@ -1,363 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include "msm_actuator.h"
-
-int32_t msm_actuator_write_focus(
-	struct msm_actuator_ctrl_t *a_ctrl,
-	uint16_t curr_lens_pos,
-	struct damping_params_t *damping_params,
-	int8_t sign_direction,
-	int16_t code_boundary)
-{
-	int32_t rc = 0;
-	int16_t next_lens_pos = 0;
-	uint16_t damping_code_step = 0;
-	uint16_t wait_time = 0;
-
-	damping_code_step = damping_params->damping_step;
-	wait_time = damping_params->damping_delay;
-
-	
-	for (next_lens_pos =
-		curr_lens_pos + (sign_direction * damping_code_step);
-		(sign_direction * next_lens_pos) <=
-			(sign_direction * code_boundary);
-		next_lens_pos =
-			(next_lens_pos +
-				(sign_direction * damping_code_step))) {
-		rc = a_ctrl->func_tbl.
-			actuator_i2c_write(a_ctrl, next_lens_pos,
-				(void *) damping_params->hw_params);
-		curr_lens_pos = next_lens_pos;
-		usleep(wait_time);
-	}
-
-	if (curr_lens_pos != code_boundary) {
-		rc = a_ctrl->func_tbl.
-			actuator_i2c_write(a_ctrl, code_boundary,
-				(void *) damping_params->hw_params);
-		usleep(wait_time);
-	}
-	return rc;
-}
-
-
-int32_t msm_actuator_move_focus(
-	struct msm_actuator_ctrl_t *a_ctrl,
-	int dir,
-	int32_t num_steps)
-{
-	int32_t rc = 0;
-	int8_t sign_dir = 0;
-	uint16_t curr_scene = 0;
-	uint16_t scenario_size = 0;
-	uint16_t index = 0;
-	uint16_t step_boundary = 0;
-	uint16_t target_step_pos = 0;
-	uint16_t target_lens_pos = 0;
-	int16_t dest_step_pos = 0;
-	uint16_t curr_lens_pos = 0;
-	LINFO("%s called, dir %d, num_steps %d\n",
-		__func__,
-		dir,
-		num_steps);
-
-	
-	if (dir == MOVE_NEAR)
-		sign_dir = 1;
-	else if (dir == MOVE_FAR)
-		sign_dir = -1;
-	else {
-		pr_err("Illegal focus direction\n");
-		rc = -EINVAL;
-		return rc;
-	}
-
-	
-	dest_step_pos = a_ctrl->curr_step_pos +
-		(sign_dir * num_steps);
-
-	if (dest_step_pos < 0)
-		dest_step_pos = 0;
-	else if (dest_step_pos > a_ctrl->set_info.total_steps)
-		dest_step_pos = a_ctrl->set_info.total_steps;
-
-	if (dest_step_pos == a_ctrl->curr_step_pos)
-		return rc;
-
-	
-	scenario_size = a_ctrl->scenario_size[dir];
-	for (index = 0; index < scenario_size; index++) {
-		if (num_steps <= a_ctrl->ringing_scenario[dir][index]) {
-			curr_scene = index;
-			break;
-		}
-	}
-
-	curr_lens_pos = a_ctrl->step_position_table[a_ctrl->curr_step_pos];
-	CDBG("curr_step_pos =%d dest_step_pos =%d curr_lens_pos=%d\n",
-		a_ctrl->curr_step_pos, dest_step_pos, curr_lens_pos);
-
-	while (a_ctrl->curr_step_pos != dest_step_pos) {
-		step_boundary =
-			a_ctrl->region_params[a_ctrl->curr_region_index].
-			step_bound[dir];
-		if ((dest_step_pos * sign_dir) <=
-			(step_boundary * sign_dir)) {
-
-			target_step_pos = dest_step_pos;
-			target_lens_pos =
-				a_ctrl->step_position_table[target_step_pos];
-			curr_lens_pos = a_ctrl->func_tbl.
-				actuator_write_focus(
-					a_ctrl,
-					curr_lens_pos,
-					&(a_ctrl->damping[dir]\
-						[a_ctrl->curr_region_index].
-						ringing_params[curr_scene]),
-					sign_dir,
-					target_lens_pos);
-
-		} else {
-			target_step_pos = step_boundary;
-			target_lens_pos =
-				a_ctrl->step_position_table[target_step_pos];
-			curr_lens_pos = a_ctrl->func_tbl.
-				actuator_write_focus(
-					a_ctrl,
-					curr_lens_pos,
-					&(a_ctrl->damping[dir]\
-						[a_ctrl->curr_region_index].
-						ringing_params[curr_scene]),
-					sign_dir,
-					target_lens_pos);
-
-			a_ctrl->curr_region_index += sign_dir;
-		}
-		a_ctrl->curr_step_pos = target_step_pos;
-	}
-
-	return rc;
-}
-
-int32_t msm_actuator_init_table(
-	struct msm_actuator_ctrl_t *a_ctrl)
-{
-	int16_t code_per_step = 0;
-	int32_t rc = 0;
-	int16_t cur_code = 0;
-	int16_t step_index = 0, region_index = 0;
-	uint16_t step_boundary = 0;
-	LINFO("%s called\n", __func__);
-
-	if (a_ctrl->func_tbl.actuator_set_params)
-		a_ctrl->func_tbl.actuator_set_params(a_ctrl);
-
-	
-	a_ctrl->step_position_table =
-		kmalloc(sizeof(uint16_t) * (a_ctrl->set_info.total_steps + 1),
-			GFP_KERNEL);
-	cur_code = a_ctrl->initial_code;
-	a_ctrl->step_position_table[step_index++] = cur_code;
-	for (region_index = 0;
-		region_index < a_ctrl->region_size;
-		region_index++) {
-		code_per_step =
-			a_ctrl->region_params[region_index].code_per_step;
-		step_boundary =
-			a_ctrl->region_params[region_index].
-			step_bound[MOVE_NEAR];
-		for (; step_index <= step_boundary;
-			step_index++) {
-			cur_code += code_per_step;
-			a_ctrl->step_position_table[step_index] = cur_code;
-		}
-	}
-	for (step_index = 0;
-		step_index < a_ctrl->set_info.total_steps;
-		step_index++) {
-		CDBG("step_position_table[%d]= %d\n",
-			step_index,
-			a_ctrl->step_position_table[step_index]);
-	}
-
-	a_ctrl->curr_step_pos = 0;
-	a_ctrl->curr_region_index = 0;
-
-	return rc;
-}
-
-int32_t msm_actuator_set_default_focus(
-	struct msm_actuator_ctrl_t *a_ctrl)
-{
-	int32_t rc = 0;
-	LINFO("%s called\n", __func__);
-
-	if (!a_ctrl->step_position_table)
-		a_ctrl->func_tbl.actuator_init_table(a_ctrl);
-
-	if (a_ctrl->curr_step_pos != 0)
-		rc = a_ctrl->func_tbl.actuator_move_focus(a_ctrl, MOVE_FAR,
-			a_ctrl->curr_step_pos);
-	else if (a_ctrl->func_tbl.actuator_init_focus)
-		rc = a_ctrl->func_tbl.actuator_init_focus(a_ctrl);
-	return rc;
-}
-
-int32_t msm_actuator_af_power_down(struct msm_actuator_ctrl_t *a_ctrl)
-{
-	int32_t rc = 0;
-	LINFO("%s called\n", __func__);
-
-	if (a_ctrl->step_position_table[a_ctrl->curr_step_pos] !=
-		a_ctrl->initial_code) {
-		rc = a_ctrl->func_tbl.actuator_set_default_focus(a_ctrl);
-		LINFO("%s after msm_actuator_set_default_focus\n", __func__);
-	}
-	kfree(a_ctrl->step_position_table);
-	return rc;
-}
-
-int32_t msm_actuator_config(
-	struct msm_actuator_ctrl_t *a_ctrl,
-	struct msm_actuator_info *board_info,
-	void __user *argp) 
-{
-	struct msm_actuator_cfg_data cdata;
-	int32_t rc = 0;
-	if (copy_from_user(&cdata,
-		(void *)argp,
-		sizeof(struct msm_actuator_cfg_data)))
-		return -EFAULT;
-	mutex_lock(a_ctrl->actuator_mutex);
-	LINFO("%s called, type %d\n", __func__, cdata.cfgtype);
-	switch (cdata.cfgtype) {
-	case CFG_GET_ACTUATOR_INFO:
-		cdata.is_af_supported = 1;
-		cdata.is_ois_supported = a_ctrl->actuator_ext_ctrl.is_ois_supported;
-		cdata.cfg.get_info = a_ctrl->get_info;
-		if (copy_to_user((void *)argp,
-				 &cdata,
-				 sizeof(struct msm_actuator_cfg_data)))
-			rc = -EFAULT;
-		break;
-	case CFG_SET_ACTUATOR_INFO:
-		a_ctrl->set_info = cdata.cfg.set_info;
-		rc = a_ctrl->func_tbl.actuator_init_table(a_ctrl);
-		if (rc < 0)
-			LERROR("%s init table failed %d\n", __func__, rc);
-		break;
-
-	case CFG_SET_DEFAULT_FOCUS:
-		rc = a_ctrl->func_tbl.actuator_set_default_focus(a_ctrl);
-		if (rc < 0)
-			LERROR("%s move focus failed %d\n", __func__, rc);
-		break;
-
-	case CFG_MOVE_FOCUS:
-		rc = a_ctrl->func_tbl.actuator_move_focus(a_ctrl,
-			cdata.cfg.move.dir,
-			cdata.cfg.move.num_steps);
-		if (rc < 0)
-			LERROR("%s move focus failed %d\n", __func__, rc);
-		break;
-
-	case CFG_GET_ACTUATOR_CURR_STEP_POS:
-		LINFO("%s current step: %d\n", __func__, a_ctrl->curr_step_pos);
-		cdata.cfg.curr_step_pos = a_ctrl->curr_step_pos;
-		if (copy_to_user((void *)argp,
-				 &cdata,
-				 sizeof(struct msm_actuator_cfg_data)))
-			rc = -EFAULT;
-		break;
-	case CFG_SET_ACTUATOR_AF_ALGO:
-		a_ctrl->af_algo = cdata.cfg.af_algo;
-		rc = a_ctrl->func_tbl.actuator_init_table(a_ctrl);
-		if (rc < 0)
-			LERROR("%s init table failed %d\n", __func__, rc);
-		break;
-
-	case CFG_SET_OIS_MODE:
-		if (a_ctrl->actuator_ext_ctrl.is_ois_supported) {
-			if (a_ctrl->func_tbl.actuator_set_ois_mode != NULL) {
-				rc = a_ctrl->func_tbl.actuator_set_ois_mode(a_ctrl, cdata.cfg.ois_mode);
-				if (rc < 0)
-					LERROR("%s set ois mode failed %d\n", __func__, rc);
-			} else {
-				LERROR("%s a_ctrl->func_tbl.actuator_set_ois_mode is NULL\n", __func__);
-			}
-		} else {
-			LINFO("%s ois is not supported\n", __func__);
-		}
-		break;
-	default:
-		break;
-	}
-	mutex_unlock(a_ctrl->actuator_mutex);
-	return rc;
-}
-
-int32_t msm_actuator_i2c_probe(
-	struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	int rc = 0;
-	struct msm_actuator_ctrl_t *act_ctrl_t = NULL;
-	LINFO("%s called\n", __func__);
-
-	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
-		pr_err("i2c_check_functionality failed\n");
-		goto probe_failure;
-	}
-
-	act_ctrl_t = (struct msm_actuator_ctrl_t *)(id->driver_data);
-	i2c_set_clientdata(client, (void *)&act_ctrl_t->actuator_ext_ctrl);
-	LINFO("%s client = %x act ctrl t = %x\n",
-		__func__,
-		(unsigned int) client,
-		(unsigned int)&act_ctrl_t->actuator_ext_ctrl);
-	act_ctrl_t->i2c_client.client = client;
-	if (act_ctrl_t->i2c_addr != 0)
-		act_ctrl_t->i2c_client.client->addr =
-			act_ctrl_t->i2c_addr;
-
-	
-	LINFO("%s succeeded\n", __func__);
-	return rc;
-
-probe_failure:
-	pr_err("%s failed! rc = %d\n", __func__, rc);
-	return rc;
-}
-
-int32_t msm_actuator_create_subdevice(struct msm_actuator_ctrl_t *a_ctrl,
-	struct i2c_board_info const *board_info,
-	struct v4l2_subdev *sdev)
-{
-	int32_t rc = 0;
-
-	LINFO("%s called\n", __func__);
-
-	
-	a_ctrl->sdev = sdev;
-
-	
-	snprintf(sdev->name, sizeof(sdev->name), "%s", board_info->type);
-
-	
-	v4l2_i2c_subdev_init(sdev,
-		a_ctrl->i2c_client.client,
-		a_ctrl->act_v4l2_subdev_ops);
-
-	return rc;
-}
diff --git a/drivers/media/video/msm/actuators/msm_actuator.h b/drivers/media/video/msm/actuators/msm_actuator.h
deleted file mode 100644
index 6e86d4b..0000000
--- a/drivers/media/video/msm/actuators/msm_actuator.h
+++ /dev/null
@@ -1,121 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-#ifndef MSM_ACTUATOR_H
-#define MSM_ACTUATOR_H
-
-#include <linux/module.h>
-#include <linux/i2c.h>
-#include <mach/camera.h>
-#include <mach/gpio.h>
-#include <media/v4l2-subdev.h>
-#include <media/msm_camera.h>
-#include "msm_camera_i2c.h"
-
-#ifdef LERROR
-#undef LERROR
-#endif
-
-#ifdef LINFO
-#undef LINFO
-#endif
-
-#define LERROR(fmt, args...) pr_err(fmt, ##args)
-
-#define CONFIG_MSM_CAMERA_ACT_DBG 0
-
-#if CONFIG_MSM_CAMERA_ACT_DBG
-#define LINFO(fmt, args...) printk(fmt, ##args)
-#else
-#define LINFO(fmt, args...) CDBG(fmt, ##args)
-#endif
-
-
-struct msm_actuator_ctrl_t;
-
-struct damping_t {
-	struct damping_params_t *ringing_params;
-};
-
-struct msm_actuator_func_tbl {
-	int32_t (*actuator_i2c_write_b_af)(struct msm_actuator_ctrl_t *,
-			uint8_t,
-			uint8_t);
-	int32_t (*actuator_init_table)(struct msm_actuator_ctrl_t *);
-	int32_t (*actuator_init_focus)(struct msm_actuator_ctrl_t *);
-	int32_t (*actuator_set_default_focus) (struct msm_actuator_ctrl_t *);
-	int32_t (*actuator_set_params)(struct msm_actuator_ctrl_t *);
-	int32_t (*actuator_move_focus) (struct msm_actuator_ctrl_t *,
-			int,
-			int32_t);
-	int (*actuator_power_down) (struct msm_actuator_ctrl_t *);
-	int32_t (*actuator_config)(void __user *);
-	int32_t (*actuator_i2c_write)(struct msm_actuator_ctrl_t *,
-			int16_t, void *);
-	int32_t (*actuator_write_focus)(struct msm_actuator_ctrl_t *,
-			uint16_t,
-			struct damping_params_t *,
-			int8_t,
-			int16_t);
-	int32_t (*actuator_set_ois_mode) (struct msm_actuator_ctrl_t *, int);
-};
-
-struct msm_actuator_ctrl_t {
-	uint32_t i2c_addr;
-	struct i2c_driver *i2c_driver;
-	struct msm_camera_i2c_client i2c_client;
-	struct mutex *actuator_mutex;
-	struct msm_actuator_ctrl actuator_ext_ctrl;
-	struct msm_actuator_func_tbl func_tbl;
-	struct v4l2_subdev *sdev;
-	struct v4l2_subdev_ops *act_v4l2_subdev_ops;
-	struct msm_actuator_set_info_t set_info;
-	struct msm_actuator_get_info_t get_info;
-
-	int16_t initial_code;
-	int16_t curr_step_pos;
-	uint16_t curr_region_index;
-	uint16_t *step_position_table;
-	uint16_t *ringing_scenario[2];
-	uint16_t scenario_size[2];
-	struct region_params_t *region_params;
-	uint16_t region_size;
-	struct damping_t *damping[2];
-	void *user_data;
-	uint32_t vcm_pwd;
-	uint32_t vcm_enable;
-	af_algo_t af_algo; 
-};
-
-int32_t msm_actuator_i2c_write_b_af(struct msm_actuator_ctrl_t *a_ctrl,
-		uint8_t msb,
-		uint8_t lsb);
-int32_t msm_actuator_config(struct msm_actuator_ctrl_t *a_ctrl,
-		struct msm_actuator_info *board_info,
-		void __user *cfg_data); 
-int32_t msm_actuator_move_focus(struct msm_actuator_ctrl_t *a_ctrl,
-		int direction,
-		int32_t num_steps);
-int32_t msm_actuator_init_table(struct msm_actuator_ctrl_t *a_ctrl);
-int32_t msm_actuator_set_default_focus(struct msm_actuator_ctrl_t *a_ctrl);
-int32_t msm_actuator_af_power_down(struct msm_actuator_ctrl_t *a_ctrl);
-int32_t msm_actuator_i2c_probe(struct i2c_client *client,
-		const struct i2c_device_id *id);
-int32_t msm_actuator_write_focus(struct msm_actuator_ctrl_t *a_ctrl,
-		uint16_t curr_lens_pos,
-		struct damping_params_t *damping_params,
-		int8_t sign_direction,
-		int16_t code_boundary);
-int32_t msm_actuator_create_subdevice(struct msm_actuator_ctrl_t *a_ctrl,
-		struct i2c_board_info const *board_info,
-		struct v4l2_subdev *sdev);
-
-#endif
diff --git a/drivers/media/video/msm/actuators/s5k3h1gx_act.c b/drivers/media/video/msm/actuators/s5k3h1gx_act.c
deleted file mode 100644
index b63d494..0000000
--- a/drivers/media/video/msm/actuators/s5k3h1gx_act.c
+++ /dev/null
@@ -1,433 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- * Copyright (c) 2013 Sebastian Sobczyk <sebastiansobczyk@wp.pl>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include "msm_actuator.h"
-#include "msm_camera_i2c.h"
-#include <mach/gpio.h>
-
-#define	S5K3H1GX_TOTAL_STEPS_NEAR_TO_FAR 42
-#define REG_VCM_I2C_ADDR 0x18
-
-DEFINE_MUTEX(s5k3h1gx_act_mutex);
-static struct msm_actuator_ctrl_t s5k3h1gx_act_t;
-
-static struct msm_actuator_info *s5k3h1gx_msm_actuator_info;
-
-static int32_t s5k3h1gx_poweron_af(void)
-{
-	int32_t rc = 0;
-	pr_info("%s enable AF actuator, gpio = %d\n", __func__,
-			s5k3h1gx_msm_actuator_info->vcm_pwd);
-	mdelay(1);
-	rc = gpio_request(s5k3h1gx_msm_actuator_info->vcm_pwd, "s5k3h1gx");
-	if (!rc)
-		gpio_direction_output(s5k3h1gx_msm_actuator_info->vcm_pwd, 1);
-	else
-		pr_err("%s: AF PowerON gpio_request failed %d\n", __func__, rc);
-	gpio_free(s5k3h1gx_msm_actuator_info->vcm_pwd);
-	mdelay(1);
-	return rc;
-}
-
-static void s5k3h1gx_poweroff_af(void)
-{
-	int32_t rc = 0;
-
-	pr_info("%s disable AF actuator, gpio = %d\n", __func__,
-			s5k3h1gx_msm_actuator_info->vcm_pwd);
-
-	msleep(1);
-	rc = gpio_request(s5k3h1gx_msm_actuator_info->vcm_pwd, "s5k3h1gx");
-	if (!rc)
-		gpio_direction_output(s5k3h1gx_msm_actuator_info->vcm_pwd, 0);
-	else
-		pr_err("%s: AF PowerOFF gpio_request failed %d\n", __func__, rc);
-	gpio_free(s5k3h1gx_msm_actuator_info->vcm_pwd);
-	msleep(1);
-}
-
-int32_t s5k3h1gx_msm_actuator_init_table(
-	struct msm_actuator_ctrl_t *a_ctrl)
-{
-	int32_t rc = 0;
-
-	LINFO("%s called\n", __func__);
-
-	if (a_ctrl->func_tbl.actuator_set_params)
-		a_ctrl->func_tbl.actuator_set_params(a_ctrl);
-
-	a_ctrl->set_info.total_steps = S5K3H1GX_TOTAL_STEPS_NEAR_TO_FAR;
-
-	if (a_ctrl->step_position_table != NULL) {
-		kfree(a_ctrl->step_position_table);
-		a_ctrl->step_position_table = NULL;
-	}
-	a_ctrl->step_position_table =
-		kmalloc(sizeof(uint16_t) * (a_ctrl->set_info.total_steps + 1),
-			GFP_KERNEL);
-
-	if (a_ctrl->step_position_table != NULL) {
-		uint16_t i = 0;
-		uint16_t s5k3h1gx_nl_region_boundary1 = 3;
-		uint16_t s5k3h1gx_nl_region_boundary2 = 5;
-		uint16_t s5k3h1gx_nl_region_code_per_step1 = 40;
-		uint16_t s5k3h1gx_nl_region_code_per_step2 = 20;
-		uint16_t s5k3h1gx_l_region_code_per_step = 16;
-		uint16_t s5k3h1gx_max_value = 1023;
-
-		a_ctrl->step_position_table[0] = a_ctrl->initial_code;
-		for (i = 1; i <= a_ctrl->set_info.total_steps; i++) {
-			if (i <= s5k3h1gx_nl_region_boundary1) {
-				a_ctrl->step_position_table[i] =
-					a_ctrl->step_position_table[i-1]
-					+ s5k3h1gx_nl_region_code_per_step1;
-			} else if (i <= s5k3h1gx_nl_region_boundary2) {
-				a_ctrl->step_position_table[i] =
-					a_ctrl->step_position_table[i-1]
-					+ s5k3h1gx_nl_region_code_per_step2;
-			} else {
-				a_ctrl->step_position_table[i] =
-					a_ctrl->step_position_table[i-1]
-					+ s5k3h1gx_l_region_code_per_step;
-			}
-
-			if (a_ctrl->step_position_table[i] > s5k3h1gx_max_value)
-				a_ctrl->step_position_table[i] = s5k3h1gx_max_value;
-		}
-		a_ctrl->curr_step_pos = 0;
-		a_ctrl->curr_region_index = 0;
-	} else {
-		pr_err("%s table init failed\n", __func__);
-		rc = -EFAULT;
-	}
-
-	return rc;
-}
-
-int32_t s5k3h1gx_msm_actuator_move_focus(
-	struct msm_actuator_ctrl_t *a_ctrl,
-	int dir,
-	int32_t num_steps)
-{
-	int32_t rc = 0;
-	int8_t sign_dir = 0;
-	int16_t dest_step_pos = 0;
-
-	int16_t curr_lens_pos;
-	int16_t next_lens_pos;
-	int16_t dest_lens_pos;
-	int16_t target_dist;
-	uint16_t sw_damping_time_wait;
-	int32_t sw_damping_step_dynamic;
-	int16_t time_wait_per_step;
-	uint32_t time_wait;
-	uint16_t small_step;
-	uint8_t mode_mask;
-
-	LINFO("%s called, dir %d, num_steps %d\n",
-		__func__,
-		dir,
-		num_steps);
-
-	if (dir == MOVE_NEAR)
-		sign_dir = 1;
-	else if (dir == MOVE_FAR)
-		sign_dir = -1;
-	else {
-		pr_err("Illegal focus direction\n");
-		rc = -EINVAL;
-		return rc;
-	}
-	
-	dest_step_pos = a_ctrl->curr_step_pos +
-		(sign_dir * num_steps);
-
-	if (dest_step_pos < 0)
-		dest_step_pos = 0;
-	else if (dest_step_pos > a_ctrl->set_info.total_steps)
-		dest_step_pos = a_ctrl->set_info.total_steps;
-
-	if (dest_step_pos == a_ctrl->curr_step_pos)
-		return rc;
-
-	curr_lens_pos = a_ctrl->step_position_table[a_ctrl->curr_step_pos];
-	dest_lens_pos = a_ctrl->step_position_table[dest_step_pos];
-
-	target_dist = sign_dir * (dest_lens_pos - curr_lens_pos);
-
-	if (sign_dir < 0 && target_dist >= a_ctrl->step_position_table[5]) {
-		sw_damping_step_dynamic = 10;
-		sw_damping_time_wait = 1;
-		time_wait = 1000000 / 30 - 10000;
-	}
-	else {
-		if (num_steps > 2) {
-			sw_damping_step_dynamic = 4;
-			sw_damping_time_wait = 4;
-		} else {
-			sw_damping_step_dynamic = 2;
-			sw_damping_time_wait = 2;
-		}
-		time_wait = 1000000 / 30;
-	}
-	time_wait_per_step = (int16_t)(time_wait / target_dist);
-
-	if (time_wait_per_step >= 800)
-		mode_mask = 0x5;
-	else if (time_wait_per_step >= 400)
-		mode_mask = 0x4;
-	else if (time_wait_per_step >= 200)
-		mode_mask = 0x3;
-	else if (time_wait_per_step >= 100)
-		mode_mask = 0x2;
-	else if (time_wait_per_step >= 50)
-		mode_mask = 0x1;
-	else {
-		if (time_wait >= 17600)
-			mode_mask = 0x0D;
-		else if (time_wait >= 8800)
-			mode_mask = 0x0C;
-		else if (time_wait >= 4400)
-			mode_mask = 0x0B;
-		else if (time_wait >= 2200)
-			mode_mask = 0x0A;
-		else
-			mode_mask = 0x09;
-	}
-
-	small_step = (uint16_t)(target_dist / sw_damping_step_dynamic);
-	if ((target_dist % sw_damping_step_dynamic) != 0) {
-		small_step++;
-	}
-
-	for (next_lens_pos = curr_lens_pos + (sign_dir * small_step);
-		(sign_dir * next_lens_pos) <= (sign_dir * dest_lens_pos);
-		next_lens_pos += sign_dir * small_step) {
-
-		rc = a_ctrl->func_tbl.actuator_i2c_write(a_ctrl, next_lens_pos, &mode_mask);
-		if (rc < 0) {
-			pr_err("%s: focus move failed\n", __func__);
-			return rc;
-		}
-		mdelay(sw_damping_time_wait);
-		curr_lens_pos = next_lens_pos;
-	}
-
-	if(curr_lens_pos != dest_lens_pos) {
-		rc = a_ctrl->func_tbl.actuator_i2c_write(a_ctrl, dest_lens_pos, &mode_mask);
-		if (rc < 0) {
-			pr_err("%s: focus move failed\n", __func__);
-			return rc;
-		}
-		mdelay(sw_damping_time_wait);
-	}
-
-	a_ctrl->curr_step_pos = dest_step_pos;
-	return rc;
-}
-
-int s5k3h1gx_actuator_af_power_down(void *params)
-{
-	int rc = 0;
-	LINFO("%s called\n", __func__);
-
-	rc = (int) msm_actuator_af_power_down(&s5k3h1gx_act_t);
-	s5k3h1gx_poweroff_af();
-	return rc;
-}
-
-static int32_t s5k3h1gx_wrapper_i2c_write(struct msm_actuator_ctrl_t *a_ctrl,
-	int16_t next_lens_position, void *params)
-{
-	int32_t rc = 0;
-	unsigned char buf[2];
-	uint8_t mode_mask = 0;
-	if(params) {
-		mode_mask = *((uint8_t*)params);
-	}
-
-	buf[0] = next_lens_position >> 4;
-	buf[1] = ((next_lens_position & 0x000F) << 4) | mode_mask;
-	rc = msm_camera_i2c_txdata(&a_ctrl->i2c_client, buf, 2);
-	if (rc < 0) {
-		pr_err("%s: write failed (%d)\n", __func__, rc);
-	}
-
-	return rc;
-}
-
-int32_t s5k3h1gx_act_write_focus(
-	struct msm_actuator_ctrl_t *a_ctrl,
-	uint16_t curr_lens_pos,
-	struct damping_params_t *damping_params,
-	int8_t sign_direction,
-	int16_t code_boundary)
-{
-	int32_t rc = 0;
-	uint16_t dac_value = 0;
-
-	LINFO("%s called, curr lens pos = %d, code_boundary = %d\n",
-		  __func__,
-		  curr_lens_pos,
-		  code_boundary);
-
-	if (sign_direction == 1)
-		dac_value = (code_boundary - curr_lens_pos);
-	else
-		dac_value = (curr_lens_pos - code_boundary);
-
-	LINFO("%s dac_value = %d\n",
-		  __func__,
-		  dac_value);
-
-	rc = a_ctrl->func_tbl.actuator_i2c_write(a_ctrl, dac_value, NULL);
-
-	return rc;
-}
-
-static int32_t s5k3h1gx_act_init_focus(struct msm_actuator_ctrl_t *a_ctrl)
-{
-	int32_t rc = 0;
-
-	rc = a_ctrl->func_tbl.actuator_i2c_write(a_ctrl, a_ctrl->initial_code,
-		NULL);
-	if (rc < 0)
-		pr_err("%s i2c write failed\n", __func__);
-	else
-		a_ctrl->curr_step_pos = 0;
-
-	return rc;
-}
-
-static const struct i2c_device_id s5k3h1gx_act_i2c_id[] = {
-	{"s5k3h1gx_act", (kernel_ulong_t)&s5k3h1gx_act_t},
-	{ }
-};
-
-static int s5k3h1gx_act_config(
-	void __user *argp)
-{
-	LINFO("%s called\n", __func__);
-	return (int) msm_actuator_config(&s5k3h1gx_act_t,
-		s5k3h1gx_msm_actuator_info, argp); 
-}
-
-static int s5k3h1gx_i2c_add_driver_table(
-	void)
-{
-	int32_t rc = 0;
-
-	LINFO("%s called\n", __func__);
-
-	rc = s5k3h1gx_poweron_af();
-	if (rc < 0) {
-		pr_err("%s power on failed\n", __func__);
-		return (int) rc;
-	}
-
-	s5k3h1gx_act_t.step_position_table = NULL;
-	rc = s5k3h1gx_act_t.func_tbl.actuator_init_table(&s5k3h1gx_act_t);
-	if (rc < 0) {
-		pr_err("%s init table failed\n", __func__);
-		return (int) rc;
-	}
-
-	rc = msm_camera_i2c_write(&(s5k3h1gx_act_t.i2c_client),
-		0x0001, 0x01,
-		MSM_CAMERA_I2C_BYTE_DATA);
-	if (rc < 0) {
-		pr_err("%s i2c write failed\n", __func__);
-		return (int) rc;
-	}
-
-	return (int) rc;
-}
-
-static struct i2c_driver s5k3h1gx_act_i2c_driver = {
-	.id_table = s5k3h1gx_act_i2c_id,
-	.probe  = msm_actuator_i2c_probe,
-	.remove = __exit_p(s5k3h1gx_act_i2c_remove),
-	.driver = {
-		.name = "s5k3h1gx_act",
-	},
-};
-
-static int __init s5k3h1gx_i2c_add_driver(void)
-{
-	LINFO("%s called\n", __func__);
-	return i2c_add_driver(s5k3h1gx_act_t.i2c_driver);
-}
-
-static struct v4l2_subdev_core_ops s5k3h1gx_act_subdev_core_ops;
-
-static struct v4l2_subdev_ops s5k3h1gx_act_subdev_ops = {
-	.core = &s5k3h1gx_act_subdev_core_ops,
-};
-
-static int32_t s5k3h1gx_act_create_subdevice(void *act_info, void *sdev)
-{
-	LINFO("%s called\n", __func__);
-
-	s5k3h1gx_msm_actuator_info = (struct msm_actuator_info *)act_info;
-
-	return (int) msm_actuator_create_subdevice(&s5k3h1gx_act_t,
-		s5k3h1gx_msm_actuator_info->board_info,
-		(struct v4l2_subdev *)sdev);
-}
-
-static struct msm_actuator_ctrl_t s5k3h1gx_act_t = {
-	.i2c_driver = &s5k3h1gx_act_i2c_driver,
-	.i2c_addr = REG_VCM_I2C_ADDR,
-	.act_v4l2_subdev_ops = &s5k3h1gx_act_subdev_ops,
-	.actuator_ext_ctrl = {
-		.a_init_table = s5k3h1gx_i2c_add_driver_table,
-		.a_power_down = s5k3h1gx_actuator_af_power_down,
-		.a_create_subdevice = s5k3h1gx_act_create_subdevice,
-		.a_config = s5k3h1gx_act_config,
-	},
-	.i2c_client = {
-		.addr_type = MSM_CAMERA_I2C_BYTE_ADDR,
-	},
-	.set_info = {
-		.total_steps = S5K3H1GX_TOTAL_STEPS_NEAR_TO_FAR,
-		.gross_steps = 3,	
-		.fine_steps = 1,	
-	},
-	.curr_step_pos = 0,
-	.curr_region_index = 0,
-	.initial_code = 0,	
-	.actuator_mutex = &s5k3h1gx_act_mutex,
-	.func_tbl = {
-		.actuator_init_table = s5k3h1gx_msm_actuator_init_table,
-		.actuator_move_focus = s5k3h1gx_msm_actuator_move_focus,
-		.actuator_write_focus = s5k3h1gx_act_write_focus,
-		.actuator_set_default_focus = msm_actuator_set_default_focus,
-		.actuator_init_focus = s5k3h1gx_act_init_focus,
-		.actuator_i2c_write = s5k3h1gx_wrapper_i2c_write,
-	},
-	.get_info = {	
-		.focal_length_num = 46,
-		.focal_length_den = 10,
-		.f_number_num = 265,
-		.f_number_den = 100,
-		.f_pix_num = 14,
-		.f_pix_den = 10,
-		.total_f_dist_num = 197681,
-		.total_f_dist_den = 1000,
-	},
-};
-
-subsys_initcall(s5k3h1gx_i2c_add_driver);
-MODULE_DESCRIPTION("S5K3H1GX actuator");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/actuators/s5k3h2yx_act.c b/drivers/media/video/msm/actuators/s5k3h2yx_act.c
deleted file mode 100644
index 56e354c..0000000
--- a/drivers/media/video/msm/actuators/s5k3h2yx_act.c
+++ /dev/null
@@ -1,439 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include "msm_actuator.h"
-#include "msm_camera_i2c.h"
-#include <mach/gpio.h>
-
-#define	S5K3H2YX_TOTAL_STEPS_NEAR_TO_FAR			52
-#define S5K3H2YX_TOTAL_STEPS_NEAR_TO_FAR_RAWCHIP_AF                        256 
-
-#define REG_VCM_NEW_CODE			0x30F2
-#define REG_VCM_I2C_ADDR			0x18
-#define REG_VCM_CODE_MSB			0x04
-#define REG_VCM_CODE_LSB			0x05
-#define REG_VCM_THRES_MSB			0x06
-#define REG_VCM_THRES_LSB			0x07
-#define REG_VCM_RING_CTRL			0x400
-
-#define DIV_CEIL(x, y) (x/y + (x%y) ? 1 : 0)
-
-DEFINE_MUTEX(s5k3h2yx_act_mutex);
-static struct msm_actuator_ctrl_t s5k3h2yx_act_t;
-
-static struct region_params_t g_regions[] = {
-	
-	{
-		.step_bound = {S5K3H2YX_TOTAL_STEPS_NEAR_TO_FAR, 0},
-		.code_per_step = 2,
-	},
-};
-
-static uint16_t g_scenario[] = {
-	
-	S5K3H2YX_TOTAL_STEPS_NEAR_TO_FAR,
-};
-
-static struct damping_params_t g_damping[] = {
-	
-	
-	{
-		.damping_step = 2,
-		.damping_delay = 0,
-	},
-};
-
-static struct damping_t g_damping_params[] = {
-	
-	
-	{
-		.ringing_params = g_damping,
-	},
-};
-
-static struct msm_actuator_info *s5k3h2yx_msm_actuator_info;
-
-static int32_t s5k3h2yx_poweron_af(void)
-{
-	int32_t rc = 0;
-	pr_info("%s enable AF actuator, gpio = %d\n", __func__,
-			s5k3h2yx_msm_actuator_info->vcm_pwd);
-	mdelay(1);
-	rc = gpio_request(s5k3h2yx_msm_actuator_info->vcm_pwd, "s5k3h2yx");
-	if (!rc)
-		gpio_direction_output(s5k3h2yx_msm_actuator_info->vcm_pwd, 1);
-	else
-		pr_err("%s: AF PowerON gpio_request failed %d\n", __func__, rc);
-	gpio_free(s5k3h2yx_msm_actuator_info->vcm_pwd);
-	mdelay(1);
-	return rc;
-}
-
-static void s5k3h2yx_poweroff_af(void)
-{
-	int32_t rc = 0;
-
-	pr_info("%s disable AF actuator, gpio = %d\n", __func__,
-			s5k3h2yx_msm_actuator_info->vcm_pwd);
-
-	msleep(1);
-	rc = gpio_request(s5k3h2yx_msm_actuator_info->vcm_pwd, "s5k3h2yx");
-	if (!rc)
-		gpio_direction_output(s5k3h2yx_msm_actuator_info->vcm_pwd, 0);
-	else
-		pr_err("%s: AF PowerOFF gpio_request failed %d\n", __func__, rc);
-	gpio_free(s5k3h2yx_msm_actuator_info->vcm_pwd);
-	msleep(1);
-}
-
-int32_t s5k3h2yx_msm_actuator_init_table(
-	struct msm_actuator_ctrl_t *a_ctrl)
-{
-	int32_t rc = 0;
-
-	LINFO("%s called\n", __func__);
-
-	if (a_ctrl->func_tbl.actuator_set_params)
-		a_ctrl->func_tbl.actuator_set_params(a_ctrl);
-#if 0
-	if (s5k3h2yx_act_t.step_position_table) {
-		LINFO("%s table inited\n", __func__);
-		return rc;
-	}
-#endif
-
-	if (s5k3h2yx_msm_actuator_info->use_rawchip_af && a_ctrl->af_algo == AF_ALGO_RAWCHIP)
-		a_ctrl->set_info.total_steps = S5K3H2YX_TOTAL_STEPS_NEAR_TO_FAR_RAWCHIP_AF;
-	else
-		a_ctrl->set_info.total_steps = S5K3H2YX_TOTAL_STEPS_NEAR_TO_FAR;
-
-	
-	if (a_ctrl->step_position_table != NULL) {
-		kfree(a_ctrl->step_position_table);
-		a_ctrl->step_position_table = NULL;
-	}
-	a_ctrl->step_position_table =
-		kmalloc(sizeof(uint16_t) * (a_ctrl->set_info.total_steps + 1),
-			GFP_KERNEL);
-
-	if (a_ctrl->step_position_table != NULL) {
-		uint16_t i = 0;
-		uint16_t s5k3h2yx_nl_region_boundary1 = 2;
-		uint16_t s5k3h2yx_nl_region_code_per_step1 = 32;
-		uint16_t s5k3h2yx_l_region_code_per_step = 16;
-		uint16_t s5k3h2yx_max_value = 1023;
-
-		a_ctrl->step_position_table[0] = a_ctrl->initial_code;
-		for (i = 1; i <= a_ctrl->set_info.total_steps; i++) {
-			if (s5k3h2yx_msm_actuator_info->use_rawchip_af && a_ctrl->af_algo == AF_ALGO_RAWCHIP) 
-				a_ctrl->step_position_table[i] =
-					a_ctrl->step_position_table[i-1] + 4;
-			else
-			{
-			if (i <= s5k3h2yx_nl_region_boundary1) {
-				a_ctrl->step_position_table[i] =
-					a_ctrl->step_position_table[i-1]
-					+ s5k3h2yx_nl_region_code_per_step1;
-			} else {
-				a_ctrl->step_position_table[i] =
-					a_ctrl->step_position_table[i-1]
-					+ s5k3h2yx_l_region_code_per_step;
-			}
-
-			if (a_ctrl->step_position_table[i] > s5k3h2yx_max_value)
-				a_ctrl->step_position_table[i] = s5k3h2yx_max_value;
-			}
-		}
-		a_ctrl->curr_step_pos = 0;
-		a_ctrl->curr_region_index = 0;
-	} else {
-		pr_err("%s table init failed\n", __func__);
-		rc = -EFAULT;
-	}
-
-	return rc;
-}
-
-int32_t s5k3h2yx_msm_actuator_move_focus(
-	struct msm_actuator_ctrl_t *a_ctrl,
-	int dir,
-	int32_t num_steps)
-{
-	int32_t rc = 0;
-	int8_t sign_dir = 0;
-	int16_t dest_step_pos = 0;
-
-	LINFO("%s called, dir %d, num_steps %d\n",
-		__func__,
-		dir,
-		num_steps);
-
-	
-	if (dir == MOVE_NEAR)
-		sign_dir = 1;
-	else if (dir == MOVE_FAR)
-		sign_dir = -1;
-	else {
-		pr_err("Illegal focus direction\n");
-		rc = -EINVAL;
-		return rc;
-	}
-
-	
-	dest_step_pos = a_ctrl->curr_step_pos +
-		(sign_dir * num_steps);
-
-	if (dest_step_pos < 0)
-		dest_step_pos = 0;
-	else if (dest_step_pos > a_ctrl->set_info.total_steps)
-		dest_step_pos = a_ctrl->set_info.total_steps;
-
-	if (dest_step_pos == a_ctrl->curr_step_pos)
-		return rc;
-
-	rc = a_ctrl->func_tbl.actuator_i2c_write(a_ctrl,
-		a_ctrl->step_position_table[dest_step_pos], NULL);
-	if (rc < 0) {
-		pr_err("%s focus move failed\n", __func__);
-		return rc;
-	} else {
-		a_ctrl->curr_step_pos = dest_step_pos;
-		LINFO("%s current step: %d\n", __func__, a_ctrl->curr_step_pos);
-	}
-
-	return rc;
-}
-
-int s5k3h2yx_actuator_af_power_down(void *params)
-{
-	int rc = 0;
-	LINFO("%s called\n", __func__);
-
-	rc = (int) msm_actuator_af_power_down(&s5k3h2yx_act_t);
-	s5k3h2yx_poweroff_af();
-	return rc;
-}
-
-static int32_t s5k3h2yx_wrapper_i2c_write(struct msm_actuator_ctrl_t *a_ctrl,
-	int16_t next_lens_position, void *params)
-{
-	int32_t rc = 0;
-
-	rc = msm_camera_i2c_write(&a_ctrl->i2c_client,
-		REG_VCM_CODE_MSB,
-		((next_lens_position & 0x0300) >> 8),
-		MSM_CAMERA_I2C_BYTE_DATA);
-	if (rc < 0) {
-		pr_err("%s VCM_CODE_MSB i2c write failed (%d)\n", __func__, rc);
-		return rc;
-	}
-
-	rc = msm_camera_i2c_write(&a_ctrl->i2c_client,
-		REG_VCM_CODE_LSB,
-		(next_lens_position & 0x00FF),
-		MSM_CAMERA_I2C_BYTE_DATA);
-	if (rc < 0) {
-		pr_err("%s VCM_CODE_LSB i2c write failed (%d)\n", __func__, rc);
-		return rc;
-	}
-
-	return rc;
-}
-
-int32_t s5k3h2yx_act_write_focus(
-	struct msm_actuator_ctrl_t *a_ctrl,
-	uint16_t curr_lens_pos,
-	struct damping_params_t *damping_params,
-	int8_t sign_direction,
-	int16_t code_boundary)
-{
-	int32_t rc = 0;
-	uint16_t dac_value = 0;
-
-	LINFO("%s called, curr lens pos = %d, code_boundary = %d\n",
-		  __func__,
-		  curr_lens_pos,
-		  code_boundary);
-
-	if (sign_direction == 1)
-		dac_value = (code_boundary - curr_lens_pos);
-	else
-		dac_value = (curr_lens_pos - code_boundary);
-
-	LINFO("%s dac_value = %d\n",
-		  __func__,
-		  dac_value);
-
-	rc = a_ctrl->func_tbl.actuator_i2c_write(a_ctrl, dac_value, NULL);
-
-	return rc;
-}
-
-static int32_t s5k3h2yx_act_init_focus(struct msm_actuator_ctrl_t *a_ctrl)
-{
-	int32_t rc = 0;
-
-	rc = a_ctrl->func_tbl.actuator_i2c_write(a_ctrl, a_ctrl->initial_code,
-		NULL);
-	if (rc < 0)
-		pr_err("%s i2c write failed\n", __func__);
-	else
-		a_ctrl->curr_step_pos = 0;
-
-	return rc;
-}
-
-static const struct i2c_device_id s5k3h2yx_act_i2c_id[] = {
-	{"s5k3h2yx_act", (kernel_ulong_t)&s5k3h2yx_act_t},
-	{ }
-};
-
-static int s5k3h2yx_act_config(
-	void __user *argp)
-{
-	LINFO("%s called\n", __func__);
-	return (int) msm_actuator_config(&s5k3h2yx_act_t,
-		s5k3h2yx_msm_actuator_info, argp); 
-}
-
-static int s5k3h2yx_i2c_add_driver_table(
-	void)
-{
-	int32_t rc = 0;
-
-	LINFO("%s called\n", __func__);
-
-	rc = s5k3h2yx_poweron_af();
-	if (rc < 0) {
-		pr_err("%s power on failed\n", __func__);
-		return (int) rc;
-	}
-
-	s5k3h2yx_act_t.step_position_table = NULL;
-	rc = s5k3h2yx_act_t.func_tbl.actuator_init_table(&s5k3h2yx_act_t);
-	if (rc < 0) {
-		pr_err("%s init table failed\n", __func__);
-		return (int) rc;
-	}
-
-	rc = msm_camera_i2c_write(&(s5k3h2yx_act_t.i2c_client),
-		0x0001, 0x01,
-		MSM_CAMERA_I2C_BYTE_DATA);
-	if (rc < 0) {
-		pr_err("%s i2c write failed\n", __func__);
-		return (int) rc;
-	}
-
-	return (int) rc;
-}
-
-static struct i2c_driver s5k3h2yx_act_i2c_driver = {
-	.id_table = s5k3h2yx_act_i2c_id,
-	.probe  = msm_actuator_i2c_probe,
-	.remove = __exit_p(s5k3h2yx_act_i2c_remove),
-	.driver = {
-		.name = "s5k3h2yx_act",
-	},
-};
-
-static int __init s5k3h2yx_i2c_add_driver(
-	void)
-{
-	LINFO("%s called\n", __func__);
-	return i2c_add_driver(s5k3h2yx_act_t.i2c_driver);
-}
-
-static struct v4l2_subdev_core_ops s5k3h2yx_act_subdev_core_ops;
-
-static struct v4l2_subdev_ops s5k3h2yx_act_subdev_ops = {
-	.core = &s5k3h2yx_act_subdev_core_ops,
-};
-
-static int32_t s5k3h2yx_act_create_subdevice(
-	void *act_info,
-	void *sdev)
-{
-	LINFO("%s called\n", __func__);
-
-	s5k3h2yx_msm_actuator_info = (struct msm_actuator_info *)act_info;
-
-	return (int) msm_actuator_create_subdevice(&s5k3h2yx_act_t,
-		s5k3h2yx_msm_actuator_info->board_info,
-		(struct v4l2_subdev *)sdev);
-}
-
-static struct msm_actuator_ctrl_t s5k3h2yx_act_t = {
-	.i2c_driver = &s5k3h2yx_act_i2c_driver,
-	.i2c_addr = REG_VCM_I2C_ADDR,
-	.act_v4l2_subdev_ops = &s5k3h2yx_act_subdev_ops,
-	.actuator_ext_ctrl = {
-		.a_init_table = s5k3h2yx_i2c_add_driver_table,
-		.a_power_down = s5k3h2yx_actuator_af_power_down,
-		.a_create_subdevice = s5k3h2yx_act_create_subdevice,
-		.a_config = s5k3h2yx_act_config,
-	},
-
-	.i2c_client = {
-		.addr_type = MSM_CAMERA_I2C_BYTE_ADDR,
-	},
-
-	.set_info = {
-		.total_steps = S5K3H2YX_TOTAL_STEPS_NEAR_TO_FAR_RAWCHIP_AF, 
-		.gross_steps = 3,	
-		.fine_steps = 1,	
-	},
-
-	.curr_step_pos = 0,
-	.curr_region_index = 0,
-	.initial_code = 0,	
-	.actuator_mutex = &s5k3h2yx_act_mutex,
-	.af_algo = AF_ALGO_RAWCHIP, 
-
-	.func_tbl = {
-		.actuator_init_table = s5k3h2yx_msm_actuator_init_table,
-		.actuator_move_focus = s5k3h2yx_msm_actuator_move_focus,
-		.actuator_write_focus = s5k3h2yx_act_write_focus,
-		.actuator_set_default_focus = msm_actuator_set_default_focus,
-		.actuator_init_focus = s5k3h2yx_act_init_focus,
-		.actuator_i2c_write = s5k3h2yx_wrapper_i2c_write,
-	},
-
-	.get_info = {	
-		.focal_length_num = 46,
-		.focal_length_den = 10,
-		.f_number_num = 265,
-		.f_number_den = 100,
-		.f_pix_num = 14,
-		.f_pix_den = 10,
-		.total_f_dist_num = 197681,
-		.total_f_dist_den = 1000,
-	},
-
-	
-	.ringing_scenario[MOVE_NEAR] = g_scenario,
-	.scenario_size[MOVE_NEAR] = ARRAY_SIZE(g_scenario),
-	.ringing_scenario[MOVE_FAR] = g_scenario,
-	.scenario_size[MOVE_FAR] = ARRAY_SIZE(g_scenario),
-
-	
-	.region_params = g_regions,
-	.region_size = ARRAY_SIZE(g_regions),
-
-	
-	.damping[MOVE_NEAR] = g_damping_params,
-	.damping[MOVE_FAR] = g_damping_params,
-};
-
-subsys_initcall(s5k3h2yx_i2c_add_driver);
-MODULE_DESCRIPTION("S5K3H2YX actuator");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/csi/Makefile b/drivers/media/video/msm/csi/Makefile
deleted file mode 100644
index 92c8280..0000000
--- a/drivers/media/video/msm/csi/Makefile
+++ /dev/null
@@ -1,5 +0,0 @@
-GCC_VERSION      := $(shell $(CONFIG_SHELL) $(PWD)/scripts/gcc-version.sh $(CROSS_COMPILE)gcc)
-EXTRA_CFLAGS += -Idrivers/media/video/msm
-obj-$(CONFIG_ARCH_MSM8960) += msm_csiphy.o msm_csid.o msm_ispif.o
-obj-$(CONFIG_ARCH_MSM7X27A) += msm_csic.o
-obj-$(CONFIG_ARCH_MSM8X60) += msm_csic.o msm_ispif.o
diff --git a/drivers/media/video/msm/csi/msm_csic.c b/drivers/media/video/msm/csi/msm_csic.c
deleted file mode 100644
index bcc360d..0000000
--- a/drivers/media/video/msm/csi/msm_csic.c
+++ /dev/null
@@ -1,474 +0,0 @@
-/* Copyright (c) 2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/delay.h>
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <mach/clk.h>
-#include <mach/board.h>
-#include <mach/camera.h>
-#include <media/msm_isp.h>
-#include "msm_csic.h"
-#include "msm.h"
-
-#define DBG_CSIC 0
-
-#define V4L2_IDENT_CSIC			50004
-#define	MIPI_PHY_CONTROL		0x00000000
-#define	MIPI_PROTOCOL_CONTROL		0x00000004
-#define	MIPI_INTERRUPT_STATUS		0x00000008
-#define	MIPI_INTERRUPT_MASK		0x0000000C
-#define	MIPI_CAMERA_CNTL		0x00000024
-#define	MIPI_CALIBRATION_CONTROL	0x00000018
-#define	MIPI_PHY_D0_CONTROL2		0x00000038
-#define	MIPI_PHY_D1_CONTROL2		0x0000003C
-#define	MIPI_PHY_D2_CONTROL2		0x00000040
-#define	MIPI_PHY_D3_CONTROL2		0x00000044
-#define	MIPI_PHY_CL_CONTROL		0x00000048
-#define	MIPI_PHY_D0_CONTROL		0x00000034
-#define	MIPI_PHY_D1_CONTROL		0x00000020
-#define	MIPI_PHY_D2_CONTROL		0x0000002C
-#define	MIPI_PHY_D3_CONTROL		0x00000030
-#define	MIPI_PWR_CNTL			0x00000054
-
-
-#define	MIPI_PROTOCOL_CONTROL_DPCM_SCHEME_SHFT			0x1e
-#define	MIPI_PROTOCOL_CONTROL_SW_RST_BMSK			0x8000000
-#define	MIPI_PROTOCOL_CONTROL_LONG_PACKET_HEADER_CAPTURE_BMSK	0x200000
-#define	MIPI_PROTOCOL_CONTROL_DATA_FORMAT_SHFT			0x13
-#define	MIPI_PROTOCOL_CONTROL_DECODE_ID_BMSK			0x40000
-#define	MIPI_PROTOCOL_CONTROL_ECC_EN_BMSK			0x20000
-
-
-#define	MIPI_CALIBRATION_CONTROL_SWCAL_CAL_EN_SHFT		0x16
-#define	MIPI_CALIBRATION_CONTROL_SWCAL_STRENGTH_OVERRIDE_EN_SHFT	0x15
-#define	MIPI_CALIBRATION_CONTROL_CAL_SW_HW_MODE_SHFT		0x14
-#define	MIPI_CALIBRATION_CONTROL_MANUAL_OVERRIDE_EN_SHFT	0x7
-
-#define	MIPI_PHY_D0_CONTROL2_SETTLE_COUNT_SHFT			0x18
-#define	MIPI_PHY_D0_CONTROL2_HS_TERM_IMP_SHFT			0x10
-#define	MIPI_PHY_D0_CONTROL2_LP_REC_EN_SHFT			0x4
-#define	MIPI_PHY_D0_CONTROL2_ERR_SOT_HS_EN_SHFT			0x3
-
-#define	MIPI_PHY_D1_CONTROL2_SETTLE_COUNT_SHFT			0x18
-#define	MIPI_PHY_D1_CONTROL2_HS_TERM_IMP_SHFT			0x10
-#define	MIPI_PHY_D1_CONTROL2_LP_REC_EN_SHFT			0x4
-#define	MIPI_PHY_D1_CONTROL2_ERR_SOT_HS_EN_SHFT			0x3
-
-#define	MIPI_PHY_D2_CONTROL2_SETTLE_COUNT_SHFT			0x18
-#define	MIPI_PHY_D2_CONTROL2_HS_TERM_IMP_SHFT			0x10
-#define	MIPI_PHY_D2_CONTROL2_LP_REC_EN_SHFT			0x4
-#define	MIPI_PHY_D2_CONTROL2_ERR_SOT_HS_EN_SHFT			0x3
-
-#define	MIPI_PHY_D3_CONTROL2_SETTLE_COUNT_SHFT			0x18
-#define	MIPI_PHY_D3_CONTROL2_HS_TERM_IMP_SHFT			0x10
-#define	MIPI_PHY_D3_CONTROL2_LP_REC_EN_SHFT			0x4
-#define	MIPI_PHY_D3_CONTROL2_ERR_SOT_HS_EN_SHFT			0x3
-
-#define	MIPI_PHY_CL_CONTROL_HS_TERM_IMP_SHFT			0x18
-#define	MIPI_PHY_CL_CONTROL_LP_REC_EN_SHFT			0x2
-
-#define	MIPI_PHY_D0_CONTROL_HS_REC_EQ_SHFT			0x1c
-#define	MIPI_PHY_D1_CONTROL_MIPI_CLK_PHY_SHUTDOWNB_SHFT		0x9
-#define	MIPI_PHY_D1_CONTROL_MIPI_DATA_PHY_SHUTDOWNB_SHFT	0x8
-
-#define MSM_AXI_QOS_PREVIEW 200000
-#define MSM_AXI_QOS_SNAPSHOT 200000
-#define MSM_AXI_QOS_RECORDING 200000
-
-#define MIPI_PWR_CNTL_ENA	0x07
-#define MIPI_PWR_CNTL_DIS	0x0
-
-static int msm_csic_config(struct csic_cfg_params *cfg_params)
-{
-	int rc = 0, count, i;
-	uint32_t val = 0;
-	struct csic_device *csic_dev;
-	struct msm_camera_csi_params *csic_params;
-	void __iomem *csicbase;
-
-	csic_dev = v4l2_get_subdevdata(cfg_params->subdev);
-	csicbase = csic_dev->base;
-	csic_params = cfg_params->parms;
-
-	
-	msm_io_w(0x4, csicbase + MIPI_PHY_CONTROL);
-
-	msm_io_w(MIPI_PROTOCOL_CONTROL_SW_RST_BMSK,
-		csicbase + MIPI_PROTOCOL_CONTROL);
-
-	val = MIPI_PROTOCOL_CONTROL_LONG_PACKET_HEADER_CAPTURE_BMSK |
-		MIPI_PROTOCOL_CONTROL_DECODE_ID_BMSK |
-		MIPI_PROTOCOL_CONTROL_ECC_EN_BMSK;
-	val |= (uint32_t)(csic_params->data_format) <<
-		MIPI_PROTOCOL_CONTROL_DATA_FORMAT_SHFT;
-	val |= csic_params->dpcm_scheme <<
-		MIPI_PROTOCOL_CONTROL_DPCM_SCHEME_SHFT;
-	CDBG("%s MIPI_PROTOCOL_CONTROL val=0x%x\n", __func__, val);
-	
-	for (count = 1; count <= 10; count++) {
-		rc = msm_io_r(csicbase + MIPI_PROTOCOL_CONTROL) & MIPI_PROTOCOL_CONTROL_SW_RST_BMSK;
-		if (rc == 0)
-			break;
-		if (count == 10) {
-			pr_err("[CAM] csic SW RESET failed\n");
-			return -EINVAL;
-		}
-		pr_info("[CAM] polling for csic SW RESET status, cnt %d\n", count);
-		mdelay(1);
-	}
-	msm_io_w(val, csicbase + MIPI_PROTOCOL_CONTROL);
-
-	
-
-	val = (csic_params->settle_cnt <<
-		MIPI_PHY_D0_CONTROL2_SETTLE_COUNT_SHFT) |
-		(0x0F << MIPI_PHY_D0_CONTROL2_HS_TERM_IMP_SHFT) |
-		(0x1 << MIPI_PHY_D0_CONTROL2_LP_REC_EN_SHFT) |
-		(0x1 << MIPI_PHY_D0_CONTROL2_ERR_SOT_HS_EN_SHFT);
-	CDBG("%s MIPI_PHY_D0_CONTROL2 val=0x%x\n", __func__, val);
-
-	
-	for(i=0;i < csic_params->lane_cnt;i++)
-		msm_io_w(val, csicbase + MIPI_PHY_D0_CONTROL2 + i*4);
-
-
-	val = (0x0F << MIPI_PHY_CL_CONTROL_HS_TERM_IMP_SHFT) |
-		(0x1 << MIPI_PHY_CL_CONTROL_LP_REC_EN_SHFT);
-	CDBG("%s MIPI_PHY_CL_CONTROL val=0x%x\n", __func__, val);
-	msm_io_w(val, csicbase + MIPI_PHY_CL_CONTROL);
-
-	val = 0 << MIPI_PHY_D0_CONTROL_HS_REC_EQ_SHFT;
-	msm_io_w(val, csicbase + MIPI_PHY_D0_CONTROL);
-
-	val = (0x1 << MIPI_PHY_D1_CONTROL_MIPI_CLK_PHY_SHUTDOWNB_SHFT) |
-		(0x1 << MIPI_PHY_D1_CONTROL_MIPI_DATA_PHY_SHUTDOWNB_SHFT);
-	CDBG("%s MIPI_PHY_D1_CONTROL val=0x%x\n", __func__, val);
-	msm_io_w(val, csicbase + MIPI_PHY_D1_CONTROL);
-
-	msm_io_w(0x00000000, csicbase + MIPI_PHY_D2_CONTROL);
-	msm_io_w(0x00000000, csicbase + MIPI_PHY_D3_CONTROL);
-
-	
-	switch (csic_params->lane_cnt) {
-	case 1:
-		msm_io_w(csic_params->lane_assign << 8 | 0x4,
-			csicbase + MIPI_CAMERA_CNTL);
-		break;
-	case 2:
-		msm_io_w(csic_params->lane_assign << 8 | 0x5,
-			csicbase + MIPI_CAMERA_CNTL);
-		break;
-	case 3:
-		msm_io_w(csic_params->lane_assign << 8 | 0x6,
-			csicbase + MIPI_CAMERA_CNTL);
-		break;
-	case 4:
-		msm_io_w(csic_params->lane_assign << 8 | 0x7,
-			csicbase + MIPI_CAMERA_CNTL);
-		break;
-	}
-
-	msm_io_w(0xF077F3C0, csicbase + MIPI_INTERRUPT_MASK);
-	
-	msm_io_w(0xF077F3C0, csicbase + MIPI_INTERRUPT_STATUS);
-
-	return rc;
-}
-
-static irqreturn_t msm_csic_irq(int irq_num, void *data)
-{
-	uint32_t irq;
-	struct csic_device *csic_dev = data;
-
-	pr_info("msm_csic_irq: %x\n", (unsigned int)csic_dev->base);
-	irq = msm_io_r(csic_dev->base + MIPI_INTERRUPT_STATUS);
-	pr_info("%s MIPI_INTERRUPT_STATUS = 0x%x\n", __func__, irq);
-	msm_io_w(irq, csic_dev->base + MIPI_INTERRUPT_STATUS);
-
-	
-	if ((irq >> 19) & 0x1)
-		pr_info("Unsupported packet format is received\n");
-	return IRQ_HANDLED;
-}
-
-static int msm_csic_subdev_g_chip_ident(struct v4l2_subdev *sd,
-			struct v4l2_dbg_chip_ident *chip)
-{
-	BUG_ON(!chip);
-	chip->ident = V4L2_IDENT_CSIC;
-	chip->revision = 0;
-	return 0;
-}
-
-static struct msm_cam_clk_info csic_clk_info[] = {
-	{"csi_src_clk", 384000000},
-	{"csi_clk", -1},
-	{"csi_pclk", -1},
-};
-
-static int msm_csic_init(struct v4l2_subdev *sd, uint32_t *csic_version)
-{
-	int rc = 0;
-	struct csic_device *csic_dev;
-	struct clk *clk1;
-	csic_dev = v4l2_get_subdevdata(sd);
-	if (csic_dev == NULL) {
-		rc = -ENOMEM;
-		return rc;
-	}
-
-	csic_dev->base = ioremap(csic_dev->mem->start,
-		resource_size(csic_dev->mem));
-	if (!csic_dev->base) {
-		rc = -ENOMEM;
-		return rc;
-	}
-
-	clk1 = clk_get(&csic_dev->pdev->dev, "csi_clk");
-	if (IS_ERR(clk1)) {
-		pr_err("%s: did not get csi_clk\n", __func__);
-		return PTR_ERR(clk1);
-	}
-	rc = clk_reset(clk1, CLK_RESET_ASSERT);
-	if (rc) {
-		pr_err("%s:csi_clk assert failed\n", __func__);
-		clk_put(clk1);
-		return rc;
-	}
-	usleep_range(1000, 1200);
-	rc = clk_reset(clk1, CLK_RESET_DEASSERT);
-	if (rc) {
-		pr_err("%s:csi_clk deassert failed\n", __func__);
-		clk_put(clk1);
-		return rc;
-	}
-	clk_put(clk1);
-
-	clk1 = clk_get(&csic_dev->pdev->dev, "csi_pclk");
-	if (IS_ERR(clk1)) {
-		pr_err("%s: did not get csi_pclk\n", __func__);
-		return PTR_ERR(clk1);
-	}
-	rc = clk_reset(clk1, CLK_RESET_ASSERT);
-	if (rc) {
-		pr_err("%s:csi_pclk assert failed\n", __func__);
-		clk_put(clk1);
-		return rc;
-	}
-	usleep_range(1000, 1200);
-	rc = clk_reset(clk1, CLK_RESET_DEASSERT);
-	if (rc) {
-		pr_err("%s:csi_pclk deassert failed\n", __func__);
-		clk_put(clk1);
-		return rc;
-	}
-	clk_put(clk1);
-
-	rc = msm_cam_clk_enable(&csic_dev->pdev->dev, csic_clk_info,
-		csic_dev->csic_clk, ARRAY_SIZE(csic_clk_info), 1);
-	if (rc < 0) {
-		csic_dev->hw_version = 0;
-		iounmap(csic_dev->base);
-		csic_dev->base = NULL;
-		return rc;
-	}
-
-#if DBG_CSIC
-	enable_irq(csic_dev->irq->start);
-#endif
-
-	return 0;
-}
-
-static void msm_csic_disable(struct csic_device *csic_dev)
-{
-	uint32_t val;
-
-	val = 0x0;
-	if (csic_dev->base != NULL) {
-		CDBG("%s MIPI_PHY_D0_CONTROL2 val=0x%x\n", __func__, val);
-		msm_io_w(val, csic_dev->base + MIPI_PHY_D0_CONTROL2);
-		msm_io_w(val, csic_dev->base + MIPI_PHY_D1_CONTROL2);
-		msm_io_w(val, csic_dev->base + MIPI_PHY_D2_CONTROL2);
-		msm_io_w(val, csic_dev->base + MIPI_PHY_D3_CONTROL2);
-		CDBG("%s MIPI_PHY_CL_CONTROL val=0x%x\n", __func__, val);
-		msm_io_w(val, csic_dev->base + MIPI_PHY_CL_CONTROL);
-		msleep(20);
-		val = msm_io_r(csic_dev->base + MIPI_PHY_D1_CONTROL);
-		val &=
-		~((0x1 << MIPI_PHY_D1_CONTROL_MIPI_CLK_PHY_SHUTDOWNB_SHFT)
-		|(0x1 << MIPI_PHY_D1_CONTROL_MIPI_DATA_PHY_SHUTDOWNB_SHFT));
-		CDBG("%s MIPI_PHY_D1_CONTROL val=0x%x\n", __func__, val);
-		msm_io_w(val, csic_dev->base + MIPI_PHY_D1_CONTROL);
-		usleep_range(5000, 6000);
-		msm_io_w(0x0, csic_dev->base + MIPI_INTERRUPT_MASK);
-		msm_io_w(0x0, csic_dev->base + MIPI_INTERRUPT_STATUS);
-		msm_io_w(MIPI_PROTOCOL_CONTROL_SW_RST_BMSK,
-			csic_dev->base + MIPI_PROTOCOL_CONTROL);
-
-		msm_io_w(0xE400, csic_dev->base + MIPI_CAMERA_CNTL);
-	}
-}
-
-static int msm_csic_release(struct v4l2_subdev *sd)
-{
-	struct csic_device *csic_dev;
-	csic_dev = v4l2_get_subdevdata(sd);
-
-	msm_csic_disable(csic_dev);
-#if DBG_CSIC
-	disable_irq(csic_dev->irq->start);
-#endif
-
-	msm_cam_clk_enable(&csic_dev->pdev->dev, csic_clk_info,
-		csic_dev->csic_clk, ARRAY_SIZE(csic_clk_info), 0);
-
-	iounmap(csic_dev->base);
-	csic_dev->base = NULL;
-	return 0;
-}
-
-static long msm_csic_subdev_ioctl(struct v4l2_subdev *sd,
-			unsigned int cmd, void *arg)
-{
-	struct csic_cfg_params cfg_params;
-	switch (cmd) {
-	case VIDIOC_MSM_CSIC_CFG:
-		cfg_params.subdev = sd;
-		cfg_params.parms = arg;
-		return msm_csic_config((struct csic_cfg_params *)&cfg_params);
-	case VIDIOC_MSM_CSIC_INIT:
-		return msm_csic_init(sd, (uint32_t *)arg);
-	case VIDIOC_MSM_CSIC_RELEASE:
-		return msm_csic_release(sd);
-	default:
-		return -ENOIOCTLCMD;
-	}
-}
-
-static struct v4l2_subdev_core_ops msm_csic_subdev_core_ops = {
-	.g_chip_ident = &msm_csic_subdev_g_chip_ident,
-	.ioctl = &msm_csic_subdev_ioctl,
-};
-
-static const struct v4l2_subdev_ops msm_csic_subdev_ops = {
-	.core = &msm_csic_subdev_core_ops,
-};
-
-static const struct v4l2_subdev_internal_ops msm_csic_internal_ops;
-
-static int __devinit csic_probe(struct platform_device *pdev)
-{
-	struct csic_device *new_csic_dev;
-	int rc = 0;
-	CDBG("%s: device id = %d\n", __func__, pdev->id);
-	new_csic_dev = kzalloc(sizeof(struct csic_device), GFP_KERNEL);
-	if (!new_csic_dev) {
-		pr_err("%s: no enough memory\n", __func__);
-		return -ENOMEM;
-	}
-
-	v4l2_subdev_init(&new_csic_dev->subdev, &msm_csic_subdev_ops);
-	new_csic_dev->subdev.internal_ops = &msm_csic_internal_ops;
-	new_csic_dev->subdev.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-	snprintf(new_csic_dev->subdev.name,
-			ARRAY_SIZE(new_csic_dev->subdev.name), "msm_csic");
-
-	v4l2_set_subdevdata(&new_csic_dev->subdev, new_csic_dev);
-	platform_set_drvdata(pdev, &new_csic_dev->subdev);
-	mutex_init(&new_csic_dev->mutex);
-
-	new_csic_dev->mem = platform_get_resource_byname(pdev,
-					IORESOURCE_MEM, "csic");
-	if (!new_csic_dev->mem) {
-		pr_err("%s: no mem resource?\n", __func__);
-		rc = -ENODEV;
-		goto csic_no_resource;
-	}
-	new_csic_dev->irq = platform_get_resource_byname(pdev,
-					IORESOURCE_IRQ, "csic");
-	if (!new_csic_dev->irq) {
-		pr_err("%s: no irq resource?\n", __func__);
-		rc = -ENODEV;
-		goto csic_no_resource;
-	}
-	new_csic_dev->io = request_mem_region(new_csic_dev->mem->start,
-		resource_size(new_csic_dev->mem), pdev->name);
-	if (!new_csic_dev->io) {
-		pr_err("%s: no valid mem region\n", __func__);
-		rc = -EBUSY;
-		goto csic_no_resource;
-	}
-
-	rc = request_irq(new_csic_dev->irq->start, msm_csic_irq,
-		IRQF_TRIGGER_HIGH, "csic", new_csic_dev);
-	if (rc < 0) {
-		release_mem_region(new_csic_dev->mem->start,
-			resource_size(new_csic_dev->mem));
-		pr_err("%s: irq request fail\n", __func__);
-		rc = -EBUSY;
-		goto csic_no_resource;
-	}
-	disable_irq(new_csic_dev->irq->start);
-
-	new_csic_dev->pdev = pdev;
-
-	msm_cam_clk_enable(&pdev->dev, csic_clk_info,
-		new_csic_dev->csic_clk, ARRAY_SIZE(csic_clk_info), 1);
-	new_csic_dev->base = ioremap(new_csic_dev->mem->start,
-		resource_size(new_csic_dev->mem));
-	if (!new_csic_dev->base) {
-		rc = -ENOMEM;
-		goto csic_no_resource;
-	}
-
-	msm_io_w(MIPI_PWR_CNTL_DIS, new_csic_dev->base + MIPI_PWR_CNTL);
-	msm_cam_clk_enable(&pdev->dev, csic_clk_info,
-		new_csic_dev->csic_clk, ARRAY_SIZE(csic_clk_info), 0);
-	iounmap(new_csic_dev->base);
-
-	new_csic_dev->base = NULL;
-	msm_cam_register_subdev_node(
-		&new_csic_dev->subdev, CSIC_DEV, pdev->id);
-
-	return 0;
-
-csic_no_resource:
-	mutex_destroy(&new_csic_dev->mutex);
-	kfree(new_csic_dev);
-	return 0;
-}
-
-static struct platform_driver csic_driver = {
-	.probe = csic_probe,
-	.driver = {
-		.name = MSM_CSIC_DRV_NAME,
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init msm_csic_init_module(void)
-{
-	return platform_driver_register(&csic_driver);
-}
-
-static void __exit msm_csic_exit_module(void)
-{
-	platform_driver_unregister(&csic_driver);
-}
-
-module_init(msm_csic_init_module);
-module_exit(msm_csic_exit_module);
-MODULE_DESCRIPTION("MSM csic driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/csi/msm_csic.h b/drivers/media/video/msm/csi/msm_csic.h
deleted file mode 100644
index 08dde52..0000000
--- a/drivers/media/video/msm/csi/msm_csic.h
+++ /dev/null
@@ -1,48 +0,0 @@
-/* Copyright (c) 2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_CSIC_H
-#define MSM_CSIC_H
-
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <media/v4l2-subdev.h>
-
-struct csic_device {
-	struct platform_device *pdev;
-	struct v4l2_subdev subdev;
-	struct resource *mem;
-	struct resource *irq;
-	struct resource *io;
-	void __iomem *base;
-	struct mutex mutex;
-	uint32_t hw_version;
-
-	struct clk *csic_clk[5];
-};
-
-struct csic_cfg_params {
-	struct v4l2_subdev *subdev;
-	void *parms;
-};
-
-#define VIDIOC_MSM_CSIC_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 4, struct csic_cfg_params)
-
-#define VIDIOC_MSM_CSIC_INIT \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 5, struct v4l2_subdev*)
-
-#define VIDIOC_MSM_CSIC_RELEASE \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 6, struct v4l2_subdev*)
-
-#endif
-
diff --git a/drivers/media/video/msm/csi/msm_csid.h b/drivers/media/video/msm/csi/msm_csid.h
deleted file mode 100644
index f90abf2..0000000
--- a/drivers/media/video/msm/csi/msm_csid.h
+++ /dev/null
@@ -1,48 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_CSID_H
-#define MSM_CSID_H
-
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <media/v4l2-subdev.h>
-
-struct csid_device {
-	struct platform_device *pdev;
-	struct v4l2_subdev subdev;
-	struct resource *mem;
-	struct resource *irq;
-	struct resource *io;
-	void __iomem *base;
-	struct mutex mutex;
-	uint32_t hw_version;
-
-	struct clk *csid_clk[5];
-};
-
-struct csid_cfg_params {
-	struct v4l2_subdev *subdev;
-	void *parms;
-};
-
-#define VIDIOC_MSM_CSID_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 4, struct csid_cfg_params)
-
-#define VIDIOC_MSM_CSID_INIT \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 5, struct v4l2_subdev*)
-
-#define VIDIOC_MSM_CSID_RELEASE \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 6, struct v4l2_subdev*)
-
-#endif
-
diff --git a/drivers/media/video/msm/csi/msm_csiphy.h b/drivers/media/video/msm/csi/msm_csiphy.h
deleted file mode 100644
index 522a1c1..0000000
--- a/drivers/media/video/msm/csi/msm_csiphy.h
+++ /dev/null
@@ -1,46 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_CSIPHY_H
-#define MSM_CSIPHY_H
-
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <media/v4l2-subdev.h>
-
-struct csiphy_device {
-	struct platform_device *pdev;
-	struct v4l2_subdev subdev;
-	struct resource *mem;
-	struct resource *irq;
-	struct resource *io;
-	void __iomem *base;
-	struct mutex mutex;
-
-	struct clk *csiphy_clk[2];
-};
-
-struct csiphy_cfg_params {
-	struct v4l2_subdev *subdev;
-	void *parms;
-};
-
-#define VIDIOC_MSM_CSIPHY_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 7, struct csiphy_cfg_params)
-
-#define VIDIOC_MSM_CSIPHY_INIT \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 8, struct v4l2_subdev*)
-
-#define VIDIOC_MSM_CSIPHY_RELEASE \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 9, struct v4l2_subdev*)
-
-#endif
diff --git a/drivers/media/video/msm/csi/msm_ispif.c b/drivers/media/video/msm/csi/msm_ispif.c
deleted file mode 100644
index b736ce7..0000000
--- a/drivers/media/video/msm/csi/msm_ispif.c
+++ /dev/null
@@ -1,686 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/delay.h>
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <mach/gpio.h>
-#include <mach/camera.h>
-#include "msm_ispif.h"
-#include "msm.h"
-
-#define V4L2_IDENT_ISPIF			50001
-#define CSID_VERSION_V2                      0x2000011
-
-
-#define ISPIF_RST_CMD_ADDR                        0X00
-#define ISPIF_INTF_CMD_ADDR                       0X04
-#define ISPIF_CTRL_ADDR                           0X08
-#define ISPIF_INPUT_SEL_ADDR                      0X0C
-#define ISPIF_PIX_INTF_CID_MASK_ADDR              0X10
-#define ISPIF_RDI_INTF_CID_MASK_ADDR              0X14
-#define ISPIF_PIX_1_INTF_CID_MASK_ADDR            0X38
-#define ISPIF_RDI_1_INTF_CID_MASK_ADDR            0X3C
-#define ISPIF_PIX_STATUS_ADDR                     0X24
-#define ISPIF_RDI_STATUS_ADDR                     0X28
-#define ISPIF_RDI_1_STATUS_ADDR                   0X64
-#define ISPIF_IRQ_MASK_ADDR                     0X0100
-#define ISPIF_IRQ_CLEAR_ADDR                    0X0104
-#define ISPIF_IRQ_STATUS_ADDR                   0X0108
-#define ISPIF_IRQ_MASK_1_ADDR                   0X010C
-#define ISPIF_IRQ_CLEAR_1_ADDR                  0X0110
-#define ISPIF_IRQ_STATUS_1_ADDR                 0X0114
-#define ISPIF_IRQ_GLOBAL_CLEAR_CMD_ADDR         0x0124
-
-
-#define VFE_CLK_DOMAIN_RST           31
-#define RDI_CLK_DOMAIN_RST           30
-#define PIX_CLK_DOMAIN_RST           29
-#define AHB_CLK_DOMAIN_RST           28
-#define RDI_1_CLK_DOMAIN_RST         27
-#define RDI_1_VFE_RST_STB            13
-#define RDI_1_CSID_RST_STB           12
-#define RDI_VFE_RST_STB              7
-#define RDI_CSID_RST_STB             6
-#define PIX_VFE_RST_STB              4
-#define PIX_CSID_RST_STB             3
-#define SW_REG_RST_STB               2
-#define MISC_LOGIC_RST_STB           1
-#define STROBED_RST_EN               0
-
-#define PIX_INTF_0_OVERFLOW_IRQ      12
-#define RAW_INTF_0_OVERFLOW_IRQ      25
-#define RAW_INTF_1_OVERFLOW_IRQ      25
-#define RESET_DONE_IRQ               27
-
-#define ISPIF_IRQ_STATUS_MASK        0xA493000
-#define ISPIF_IRQ_1_STATUS_MASK      0xA493000
-#define ISPIF_IRQ_STATUS_RDI_SOF_MASK	0x492000
-#define ISPIF_IRQ_GLOBAL_CLEAR_CMD     0x1
-
-#define MAX_CID 15
-
-
-static struct ispif_device *ispif;
-atomic_t ispif_irq_cnt;
-spinlock_t  ispif_tasklet_lock;
-struct list_head ispif_tasklet_q;
-
-static uint32_t global_intf_cmd_mask = 0xFFFFFFFF;
-
-
-static int msm_ispif_intf_reset(uint8_t intfmask)
-{
-	int rc = 0;
-	uint32_t data = 0x1;
-	uint8_t intfnum = 0, mask = intfmask;
-	while (mask != 0) {
-		if (!(intfmask & (0x1 << intfnum))) {
-			mask >>= 1;
-			intfnum++;
-			continue;
-		}
-		switch (intfnum) {
-		case PIX0:
-			data = (0x1 << STROBED_RST_EN) +
-				(0x1 << PIX_VFE_RST_STB) +
-				(0x1 << PIX_CSID_RST_STB);
-			break;
-
-		case RDI0:
-			data = (0x1 << STROBED_RST_EN) +
-				(0x1 << RDI_VFE_RST_STB)  +
-				(0x1 << RDI_CSID_RST_STB);
-			break;
-
-		case RDI1:
-			data = (0x1 << STROBED_RST_EN) +
-				(0x1 << RDI_1_VFE_RST_STB) +
-				(0x1 << RDI_1_CSID_RST_STB);
-			break;
-
-		default:
-			rc = -EINVAL;
-			break;
-		}
-		mask >>= 1;
-		intfnum++;
-	}	
-	if (rc >= 0) {
-		msm_io_w(data, ispif->base + ISPIF_RST_CMD_ADDR);
-		rc = wait_for_completion_interruptible(&ispif->reset_complete);
-	}
-
-	return rc;
-}
-
-static int msm_ispif_reset(void)
-{
-	uint32_t data = (0x1 << STROBED_RST_EN) +
-		(0x1 << SW_REG_RST_STB) +
-		(0x1 << MISC_LOGIC_RST_STB) +
-		(0x1 << PIX_VFE_RST_STB) +
-		(0x1 << PIX_CSID_RST_STB) +
-		(0x1 << RDI_VFE_RST_STB) +
-		(0x1 << RDI_CSID_RST_STB) +
-		(0x1 << RDI_1_VFE_RST_STB) +
-		(0x1 << RDI_1_CSID_RST_STB);
-	msm_io_w(data, ispif->base + ISPIF_RST_CMD_ADDR);
-	return wait_for_completion_interruptible(&ispif->reset_complete);
-}
-
-static int msm_ispif_subdev_g_chip_ident(struct v4l2_subdev *sd,
-			struct v4l2_dbg_chip_ident *chip)
-{
-	BUG_ON(!chip);
-	chip->ident = V4L2_IDENT_ISPIF;
-	chip->revision = 0;
-	return 0;
-}
-
-static void msm_ispif_sel_csid_core(uint8_t intftype, uint8_t csid)
-{
-	int rc = 0;
-	uint32_t data;
-	if (ispif->ispif_clk[intftype] == NULL) {
-		pr_err("%s: ispif NULL clk\n", __func__);
-		return;
-	}
-
-	rc = clk_set_rate(ispif->ispif_clk[intftype], csid);
-	if (rc < 0)
-		pr_err("%s: clk_set_rate failed %d\n", __func__, rc);
-
-	data = msm_io_r(ispif->base + ISPIF_INPUT_SEL_ADDR);
-	data |= csid<<(intftype*4);
-	msm_io_w(data, ispif->base + ISPIF_INPUT_SEL_ADDR);
-}
-
-static void msm_ispif_enable_intf_cids(uint8_t intftype, uint16_t cid_mask)
-{
-	uint32_t data;
-	mutex_lock(&ispif->mutex);
-	switch (intftype) {
-	case PIX0:
-		data = msm_io_r(ispif->base +
-				ISPIF_PIX_INTF_CID_MASK_ADDR);
-		data |= cid_mask;
-		msm_io_w(data, ispif->base +
-				ISPIF_PIX_INTF_CID_MASK_ADDR);
-		break;
-
-	case RDI0:
-		data = msm_io_r(ispif->base +
-				ISPIF_RDI_INTF_CID_MASK_ADDR);
-		data |= cid_mask;
-		msm_io_w(data, ispif->base +
-				ISPIF_RDI_INTF_CID_MASK_ADDR);
-		break;
-
-	case RDI1:
-		data = msm_io_r(ispif->base +
-				ISPIF_RDI_1_INTF_CID_MASK_ADDR);
-		data |= cid_mask;
-		msm_io_w(data, ispif->base +
-				ISPIF_RDI_1_INTF_CID_MASK_ADDR);
-		break;
-	}
-	mutex_unlock(&ispif->mutex);
-}
-
-static int msm_ispif_config(struct msm_ispif_params_list *params_list)
-{
-	uint32_t params_len;
-	struct msm_ispif_params *ispif_params;
-	uint32_t data, data1;
-	int rc = 0, i = 0;
-	params_len = params_list->len;
-	ispif_params = params_list->params;
-	CDBG("Enable interface\n");
-	data = msm_io_r(ispif->base + ISPIF_PIX_STATUS_ADDR);
-	data1 = msm_io_r(ispif->base + ISPIF_RDI_STATUS_ADDR);
-	if (((data & 0xf) != 0xf) || ((data1 & 0xf) != 0xf))
-		return -EBUSY;
-	msm_io_w(0x00000000, ispif->base + ISPIF_IRQ_MASK_ADDR);
-	for (i = 0; i < params_len; i++) {
-		msm_ispif_sel_csid_core(ispif_params[i].intftype,
-			ispif_params[i].csid);
-		msm_ispif_enable_intf_cids(ispif_params[i].intftype,
-			ispif_params[i].cid_mask);
-	}
-
-	msm_io_w(ISPIF_IRQ_STATUS_MASK, ispif->base +
-					ISPIF_IRQ_MASK_ADDR);
-	msm_io_w(ISPIF_IRQ_STATUS_MASK, ispif->base +
-					ISPIF_IRQ_CLEAR_ADDR);
-	msm_io_w(ISPIF_IRQ_GLOBAL_CLEAR_CMD, ispif->base +
-		 ISPIF_IRQ_GLOBAL_CLEAR_CMD_ADDR);
-	return rc;
-}
-
-static uint32_t msm_ispif_get_cid_mask(uint8_t intftype)
-{
-	uint32_t mask = 0;
-	switch (intftype) {
-	case PIX0:
-		mask = msm_io_r(ispif->base +
-			ISPIF_PIX_INTF_CID_MASK_ADDR);
-		break;
-
-	case RDI0:
-		mask = msm_io_r(ispif->base +
-			ISPIF_RDI_INTF_CID_MASK_ADDR);
-		break;
-
-	case RDI1:
-		mask = msm_io_r(ispif->base +
-			ISPIF_RDI_1_INTF_CID_MASK_ADDR);
-		break;
-
-	default:
-		break;
-	}
-	return mask;
-}
-
-static void
-msm_ispif_intf_cmd(uint8_t intfmask, uint8_t intf_cmd_mask)
-{
-	uint8_t vc = 0, val = 0;
-	uint8_t mask = intfmask, intfnum = 0;
-	uint32_t cid_mask = 0;
-	while (mask != 0) {
-		if (!(intfmask & (0x1 << intfnum))) {
-			mask >>= 1;
-			intfnum++;
-			continue;
-		}
-
-		cid_mask = msm_ispif_get_cid_mask(intfnum);
-		vc = 0;
-
-		while (cid_mask != 0) {
-			if ((cid_mask & 0xf) != 0x0) {
-				val = (intf_cmd_mask>>(vc*2)) & 0x3;
-				global_intf_cmd_mask |=
-					(0x3 << ((vc * 2) + (intfnum * 8)));
-				global_intf_cmd_mask &= ~((0x3 & ~val)
-					<< ((vc * 2) +
-					(intfnum * 8)));
-			}
-			vc++;
-			cid_mask >>= 4;
-		}
-		mask >>= 1;
-		intfnum++;
-	}
-	msm_io_w(global_intf_cmd_mask, ispif->base + ISPIF_INTF_CMD_ADDR);
-}
-
-static int msm_ispif_abort_intf_transfer(uint8_t intfmask)
-{
-	int rc = 0;
-	uint8_t intf_cmd_mask = 0xAA;
-	uint8_t intfnum = 0, mask = intfmask;
-	mutex_lock(&ispif->mutex);
-	msm_ispif_intf_cmd(intfmask, intf_cmd_mask);
-	while (mask != 0) {
-		if (intfmask & (0x1 << intfnum))
-			global_intf_cmd_mask |= (0xFF << (intfnum * 8));
-		mask >>= 1;
-		intfnum++;
-	}
-	mutex_unlock(&ispif->mutex);
-	return rc;
-}
-
-static int msm_ispif_start_intf_transfer(uint8_t intfmask)
-{
-	uint8_t intf_cmd_mask = 0x55;
-	int rc = 0;
-	mutex_lock(&ispif->mutex);
-	rc = msm_ispif_intf_reset(intfmask);
-	msm_ispif_intf_cmd(intfmask, intf_cmd_mask);
-	mutex_unlock(&ispif->mutex);
-	return rc;
-}
-
-static int msm_ispif_stop_intf_transfer(uint8_t intfmask)
-{
-	int rc = 0;
-	uint8_t intf_cmd_mask = 0x00;
-	uint8_t intfnum = 0, mask = intfmask;
-	mutex_lock(&ispif->mutex);
-	msm_ispif_intf_cmd(intfmask, intf_cmd_mask);
-	while (mask != 0) {
-		if (intfmask & (0x1 << intfnum)) {
-			switch (intfnum) {
-			case PIX0:
-				while ((msm_io_r(ispif->base +
-					ISPIF_PIX_STATUS_ADDR)
-					& 0xf) != 0xf) {
-					CDBG("Wait for pix0 Idle\n");
-				}
-				break;
-
-			case RDI0:
-				while ((msm_io_r(ispif->base +
-					ISPIF_RDI_STATUS_ADDR)
-					& 0xf) != 0xf) {
-					CDBG("Wait for rdi0 Idle\n");
-				}
-				break;
-
-			case RDI1:
-				while ((msm_io_r(ispif->base +
-					ISPIF_RDI_1_STATUS_ADDR)
-					& 0xf) != 0xf) {
-					CDBG("Wait for rdi1 Idle\n");
-				}
-				break;
-
-			default:
-				break;
-			}
-			global_intf_cmd_mask |= (0xFF << (intfnum * 8));
-		}
-		mask >>= 1;
-		intfnum++;
-	}
-	mutex_unlock(&ispif->mutex);
-	return rc;
-}
-
-static int msm_ispif_subdev_video_s_stream(struct v4l2_subdev *sd, int enable)
-{
-	struct ispif_device *ispif =
-			(struct ispif_device *)v4l2_get_subdevdata(sd);
-	int32_t cmd = enable & ((1<<ISPIF_S_STREAM_SHIFT)-1);
-	enum msm_ispif_intftype intf = enable >> ISPIF_S_STREAM_SHIFT;
-	int rc = -EINVAL;
-
-	BUG_ON(!ispif);
-	switch (cmd) {
-	case ISPIF_ON_FRAME_BOUNDARY:
-		rc = msm_ispif_start_intf_transfer(intf);
-		break;
-	case ISPIF_OFF_FRAME_BOUNDARY:
-		rc = msm_ispif_stop_intf_transfer(intf);
-		break;
-	case ISPIF_OFF_IMMEDIATELY:
-		rc = msm_ispif_abort_intf_transfer(intf);
-		break;
-	default:
-		break;
-	}
-	return rc;
-}
-
-static void ispif_do_tasklet(unsigned long data)
-{
-	unsigned long flags;
-
-	struct ispif_isr_queue_cmd *qcmd = NULL;
-	CDBG("=== ispif_do_tasklet start ===\n");
-
-	while (atomic_read(&ispif_irq_cnt)) {
-		spin_lock_irqsave(&ispif_tasklet_lock, flags);
-		qcmd = list_first_entry(&ispif_tasklet_q,
-			struct ispif_isr_queue_cmd, list);
-		atomic_sub(1, &ispif_irq_cnt);
-
-		if (!qcmd) {
-			spin_unlock_irqrestore(&ispif_tasklet_lock,
-				flags);
-			return;
-		}
-		list_del(&qcmd->list);
-		spin_unlock_irqrestore(&ispif_tasklet_lock,
-			flags);
-		if (qcmd->ispifInterruptStatus0 &
-			ISPIF_IRQ_STATUS_RDI_SOF_MASK) {
-			CDBG("ispif rdi irq status\n");
-		}
-		if (qcmd->ispifInterruptStatus1 &
-			ISPIF_IRQ_STATUS_RDI_SOF_MASK) {
-			CDBG("ispif rdi1 irq status\n");
-		}
-		kfree(qcmd);
-	}
-	CDBG("=== ispif_do_tasklet end ===\n");
-}
-
-DECLARE_TASKLET(ispif_tasklet, ispif_do_tasklet, 0);
-
-static void ispif_process_irq(struct ispif_irq_status *out)
-{
-	unsigned long flags;
-	struct ispif_isr_queue_cmd *qcmd;
-
-	CDBG("ispif_process_irq\n");
-	qcmd = kzalloc(sizeof(struct ispif_isr_queue_cmd),
-		GFP_ATOMIC);
-	if (!qcmd) {
-		pr_err("ispif_process_irq: qcmd malloc failed!\n");
-		return;
-	}
-	qcmd->ispifInterruptStatus0 = out->ispifIrqStatus0;
-	qcmd->ispifInterruptStatus1 = out->ispifIrqStatus1;
-
-	spin_lock_irqsave(&ispif_tasklet_lock, flags);
-	list_add_tail(&qcmd->list, &ispif_tasklet_q);
-
-	atomic_add(1, &ispif_irq_cnt);
-	spin_unlock_irqrestore(&ispif_tasklet_lock, flags);
-	tasklet_schedule(&ispif_tasklet);
-	return;
-}
-
-static inline void msm_ispif_read_irq_status(struct ispif_irq_status *out)
-{
-	out->ispifIrqStatus0 = msm_io_r(ispif->base +
-		ISPIF_IRQ_STATUS_ADDR);
-	out->ispifIrqStatus1 = msm_io_r(ispif->base +
-		ISPIF_IRQ_STATUS_1_ADDR);
-	msm_io_w(out->ispifIrqStatus0,
-		ispif->base + ISPIF_IRQ_CLEAR_ADDR);
-	msm_io_w(out->ispifIrqStatus1,
-		ispif->base + ISPIF_IRQ_CLEAR_1_ADDR);
-
-	CDBG("ispif->irq: Irq_status0 = 0x%x\n",
-		out->ispifIrqStatus0);
-	if (out->ispifIrqStatus0 & ISPIF_IRQ_STATUS_MASK) {
-		if (out->ispifIrqStatus0 & (0x1 << RESET_DONE_IRQ))
-			complete(&ispif->reset_complete);
-		if (out->ispifIrqStatus0 & (0x1 << PIX_INTF_0_OVERFLOW_IRQ))
-			pr_err("%s: pix intf 0 overflow.\n", __func__);
-		if (out->ispifIrqStatus0 & (0x1 << RAW_INTF_0_OVERFLOW_IRQ))
-			pr_err("%s: rdi intf 0 overflow.\n", __func__);
-		if ((out->ispifIrqStatus0 & ISPIF_IRQ_STATUS_RDI_SOF_MASK) ||
-			(out->ispifIrqStatus1 &
-				ISPIF_IRQ_STATUS_RDI_SOF_MASK)) {
-			ispif_process_irq(out);
-		}
-	}
-	msm_io_w(ISPIF_IRQ_GLOBAL_CLEAR_CMD, ispif->base +
-		ISPIF_IRQ_GLOBAL_CLEAR_CMD_ADDR);
-}
-
-static irqreturn_t msm_io_ispif_irq(int irq_num, void *data)
-{
-	struct ispif_irq_status irq;
-	msm_ispif_read_irq_status(&irq);
-	return IRQ_HANDLED;
-}
-
-static struct msm_cam_clk_info ispif_clk_info[] = {
-	{"csi_pix_clk", 0},
-	{"csi_rdi_clk", 0},
-	{"csi_pix1_clk", 0},
-	{"csi_rdi1_clk", 0},
-	{"csi_rdi2_clk", 0},
-};
-
-static int msm_ispif_init(const uint32_t *csid_version)
-{
-	int rc = 0;
-	spin_lock_init(&ispif_tasklet_lock);
-	INIT_LIST_HEAD(&ispif_tasklet_q);
-	rc = request_irq(ispif->irq->start, msm_io_ispif_irq,
-		IRQF_TRIGGER_RISING, "ispif", 0);
-
-	global_intf_cmd_mask = 0xFFFFFFFF;
-	init_completion(&ispif->reset_complete);
-
-	ispif->csid_version = *csid_version;
-	if (ispif->csid_version == CSID_VERSION_V2) {
-		rc = msm_cam_clk_enable(&ispif->pdev->dev, ispif_clk_info,
-			ispif->ispif_clk, ARRAY_SIZE(ispif_clk_info), 1);
-		if (rc < 0)
-			return rc;
-	} else {
-		rc = msm_cam_clk_enable(&ispif->pdev->dev, ispif_clk_info,
-			ispif->ispif_clk, 2, 1);
-		if (rc < 0)
-			return rc;
-	}
-
-	rc = msm_ispif_reset();
-	return rc;
-}
-
-static void msm_ispif_release(struct v4l2_subdev *sd)
-{
-	struct ispif_device *ispif =
-			(struct ispif_device *)v4l2_get_subdevdata(sd);
-
-	if (ispif->csid_version == CSID_VERSION_V2)
-		msm_cam_clk_enable(&ispif->pdev->dev, ispif_clk_info,
-			ispif->ispif_clk, ARRAY_SIZE(ispif_clk_info), 0);
-	else
-		msm_cam_clk_enable(&ispif->pdev->dev, ispif_clk_info,
-			ispif->ispif_clk, 2, 0);
-
-	CDBG("%s, free_irq\n", __func__);
-	free_irq(ispif->irq->start, 0);
-	tasklet_kill(&ispif_tasklet);
-}
-
-void msm_ispif_vfe_get_cid(uint8_t intftype, char *cids, int *num)
-{
-	uint32_t data = 0;
-	int i = 0, j = 0;
-	switch (intftype) {
-	case PIX0:
-		data = msm_io_r(ispif->base +
-			ISPIF_PIX_INTF_CID_MASK_ADDR);
-		break;
-
-	case RDI0:
-		data = msm_io_r(ispif->base +
-			ISPIF_RDI_INTF_CID_MASK_ADDR);
-		break;
-
-	case RDI1:
-		data = msm_io_r(ispif->base +
-			ISPIF_RDI_1_INTF_CID_MASK_ADDR);
-		break;
-
-	default:
-		break;
-	}
-	for (i = 0; i <= MAX_CID; i++) {
-		if ((data & 0x1) == 0x1) {
-			cids[j++] = i;
-			(*num)++;
-		}
-		data >>= 1;
-	}
-}
-
-static long msm_ispif_subdev_ioctl(struct v4l2_subdev *sd, unsigned int cmd,
-								void *arg)
-{
-	switch (cmd) {
-	case VIDIOC_MSM_ISPIF_CFG:
-		return msm_ispif_config((struct msm_ispif_params_list *)arg);
-	case VIDIOC_MSM_ISPIF_INIT:
-		return msm_ispif_init((uint32_t *)arg);
-	case VIDIOC_MSM_ISPIF_RELEASE:
-		msm_ispif_release(sd);
-	default:
-		return -ENOIOCTLCMD;
-	}
-}
-
-static struct v4l2_subdev_core_ops msm_ispif_subdev_core_ops = {
-	.g_chip_ident = &msm_ispif_subdev_g_chip_ident,
-	.ioctl = &msm_ispif_subdev_ioctl,
-};
-
-static struct v4l2_subdev_video_ops msm_ispif_subdev_video_ops = {
-	.s_stream = &msm_ispif_subdev_video_s_stream,
-};
-
-static const struct v4l2_subdev_ops msm_ispif_subdev_ops = {
-	.core = &msm_ispif_subdev_core_ops,
-	.video = &msm_ispif_subdev_video_ops,
-};
-static const struct v4l2_subdev_internal_ops msm_ispif_internal_ops;
-
-static int __devinit ispif_probe(struct platform_device *pdev)
-{
-	int rc = 0;
-	CDBG("%s\n", __func__);
-	ispif = kzalloc(sizeof(struct ispif_device), GFP_KERNEL);
-	if (!ispif) {
-		pr_err("%s: no enough memory\n", __func__);
-		return -ENOMEM;
-	}
-
-	v4l2_subdev_init(&ispif->subdev, &msm_ispif_subdev_ops);
-	ispif->subdev.internal_ops = &msm_ispif_internal_ops;
-	ispif->subdev.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-	snprintf(ispif->subdev.name,
-			ARRAY_SIZE(ispif->subdev.name), "msm_ispif");
-	
-	v4l2_set_subdevdata(&ispif->subdev, ispif);
-	platform_set_drvdata(pdev, &ispif->subdev);
-	snprintf(ispif->subdev.name, sizeof(ispif->subdev.name),
-								"ispif");
-	mutex_init(&ispif->mutex);
-
-	ispif->mem = platform_get_resource_byname(pdev,
-					IORESOURCE_MEM, "ispif");
-	if (!ispif->mem) {
-		pr_err("%s: no mem resource?\n", __func__);
-		rc = -ENODEV;
-		goto ispif_no_resource;
-	}
-	ispif->irq = platform_get_resource_byname(pdev,
-					IORESOURCE_IRQ, "ispif");
-	if (!ispif->irq) {
-		pr_err("%s: no irq resource?\n", __func__);
-		rc = -ENODEV;
-		goto ispif_no_resource;
-	}
-	ispif->io = request_mem_region(ispif->mem->start,
-		resource_size(ispif->mem), pdev->name);
-	if (!ispif->io) {
-		pr_err("%s: no valid mem region\n", __func__);
-		rc = -EBUSY;
-		goto ispif_no_resource;
-	}
-	ispif->base = ioremap(ispif->mem->start,
-		resource_size(ispif->mem));
-	if (!ispif->base) {
-		rc = -ENOMEM;
-		goto ispif_no_mem;
-	}
-
-	ispif->pdev = pdev;
-	
-	msm_cam_register_subdev_node(&ispif->subdev, ISPIF_DEV, pdev->id);
-	return 0;
-
-ispif_no_mem:
-	release_mem_region(ispif->mem->start,
-		resource_size(ispif->mem));
-ispif_no_resource:
-	mutex_destroy(&ispif->mutex);
-	kfree(ispif);
-	return rc;
-}
-
-static struct platform_driver ispif_driver = {
-	.probe = ispif_probe,
-	.driver = {
-		.name = MSM_ISPIF_DRV_NAME,
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init msm_ispif_init_module(void)
-{
-	return platform_driver_register(&ispif_driver);
-}
-
-static void __exit msm_ispif_exit_module(void)
-{
-	platform_driver_unregister(&ispif_driver);
-}
-
-module_init(msm_ispif_init_module);
-module_exit(msm_ispif_exit_module);
-MODULE_DESCRIPTION("MSM ISP Interface driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/csi/msm_ispif.h b/drivers/media/video/msm/csi/msm_ispif.h
deleted file mode 100644
index 8f1dd12..0000000
--- a/drivers/media/video/msm/csi/msm_ispif.h
+++ /dev/null
@@ -1,68 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_ISPIF_H
-#define MSM_ISPIF_H
-
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <media/v4l2-subdev.h>
-
-struct ispif_irq_status {
-	uint32_t ispifIrqStatus0;
-	uint32_t ispifIrqStatus1;
-};
-
-struct ispif_device {
-	struct platform_device *pdev;
-	struct v4l2_subdev subdev;
-	struct resource *mem;
-	struct resource *irq;
-	struct resource *io;
-	void __iomem *base;
-	struct mutex mutex;
-	uint8_t start_ack_pending;
-	struct completion reset_complete;
-	uint32_t csid_version;
-	struct clk *ispif_clk[5];
-};
-
-struct ispif_isr_queue_cmd {
-	struct list_head list;
-	uint32_t    ispifInterruptStatus0;
-	uint32_t    ispifInterruptStatus1;
-};
-
-#define VIDIOC_MSM_ISPIF_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 1, struct msm_ispif_params)
-
-#define VIDIOC_MSM_ISPIF_INIT \
-	_IO('V', BASE_VIDIOC_PRIVATE + 2)
-
-#define VIDIOC_MSM_ISPIF_RELEASE \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 3, struct v4l2_subdev*)
-
-#define ISPIF_STREAM(intf, action) (((intf)<<ISPIF_S_STREAM_SHIFT)+(action))
-#define ISPIF_ON_FRAME_BOUNDARY	(0x01 << 0)
-#define ISPIF_OFF_FRAME_BOUNDARY    (0x01 << 1)
-#define ISPIF_OFF_IMMEDIATELY       (0x01 << 2)
-#define ISPIF_S_STREAM_SHIFT	4
-
-
-#define PIX_0 (0x01 << 0)
-#define RDI_0 (0x01 << 1)
-#define PIX_1 (0x01 << 2)
-#define RDI_1 (0x01 << 3)
-
-void msm_ispif_vfe_get_cid(uint8_t intftype, char *cids, int *num);
-
-#endif
diff --git a/drivers/media/video/msm/flash.c b/drivers/media/video/msm/flash.c
deleted file mode 100644
index 835cb7e..0000000
--- a/drivers/media/video/msm/flash.c
+++ /dev/null
@@ -1,735 +0,0 @@
-
-/* Copyright (c) 2009-2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/module.h>
-#include <linux/kernel.h>
-#include <linux/errno.h>
-#include <linux/leds-pmic8058.h>
-#include <linux/pwm.h>
-#include <linux/pmic8058-pwm.h>
-#include <linux/hrtimer.h>
-#include <linux/i2c.h>
-#include <mach/pmic.h>
-#include <mach/camera.h>
-#include <mach/gpio.h>
-#include <linux/htc_flashlight.h>
-
-struct i2c_client *sx150x_client;
-struct timer_list timer_flash;
-static struct msm_camera_sensor_info *sensor_data;
-enum msm_cam_flash_stat{
-	MSM_CAM_FLASH_OFF,
-	MSM_CAM_FLASH_ON,
-};
-
-#if defined CONFIG_MSM_CAMERA_FLASH_SC628A
-static struct i2c_client *sc628a_client;
-
-static const struct i2c_device_id sc628a_i2c_id[] = {
-	{"sc628a", 0},
-	{ }
-};
-
-static int32_t sc628a_i2c_txdata(unsigned short saddr,
-		unsigned char *txdata, int length)
-{
-	struct i2c_msg msg[] = {
-		{
-			.addr = saddr,
-			.flags = 0,
-			.len = length,
-			.buf = txdata,
-		},
-	};
-	if (i2c_transfer(sc628a_client->adapter, msg, 1) < 0) {
-		CDBG("sc628a_i2c_txdata faild 0x%x\n", saddr);
-		return -EIO;
-	}
-
-	return 0;
-}
-
-static int32_t sc628a_i2c_write_b_flash(uint8_t waddr, uint8_t bdata)
-{
-	int32_t rc = -EFAULT;
-	unsigned char buf[2];
-	if (!sc628a_client)
-		return  -ENOTSUPP;
-
-	memset(buf, 0, sizeof(buf));
-	buf[0] = waddr;
-	buf[1] = bdata;
-
-	rc = sc628a_i2c_txdata(sc628a_client->addr>>1, buf, 2);
-	if (rc < 0) {
-		CDBG("i2c_write_b failed, addr = 0x%x, val = 0x%x!\n",
-				waddr, bdata);
-	}
-	usleep_range(4000, 5000);
-
-	return rc;
-}
-
-static int sc628a_i2c_probe(struct i2c_client *client,
-		const struct i2c_device_id *id)
-{
-	int rc = 0;
-	CDBG("sc628a_probe called!\n");
-
-	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
-		pr_err("i2c_check_functionality failed\n");
-		goto probe_failure;
-	}
-
-	sc628a_client = client;
-
-	CDBG("sc628a_probe successed! rc = %d\n", rc);
-	return 0;
-
-probe_failure:
-	pr_err("sc628a_probe failed! rc = %d\n", rc);
-	return rc;
-}
-
-static struct i2c_driver sc628a_i2c_driver = {
-	.id_table = sc628a_i2c_id,
-	.probe  = sc628a_i2c_probe,
-	.remove = __exit_p(sc628a_i2c_remove),
-	.driver = {
-		.name = "sc628a",
-	},
-};
-#endif
-
-static int config_flash_gpio_table(enum msm_cam_flash_stat stat,
-			struct msm_camera_sensor_strobe_flash_data *sfdata)
-{
-	int rc = 0, i = 0;
-	int msm_cam_flash_gpio_tbl[][2] = {
-		{sfdata->flash_trigger, 1},
-		{sfdata->flash_charge, 1},
-		{sfdata->flash_charge_done, 0}
-	};
-
-	if (stat == MSM_CAM_FLASH_ON) {
-		for (i = 0; i < ARRAY_SIZE(msm_cam_flash_gpio_tbl); i++) {
-			rc = gpio_request(msm_cam_flash_gpio_tbl[i][0],
-							  "CAM_FLASH_GPIO");
-			if (unlikely(rc < 0)) {
-				pr_err("%s not able to get gpio\n", __func__);
-				for (i--; i >= 0; i--)
-					gpio_free(msm_cam_flash_gpio_tbl[i][0]);
-				break;
-			}
-			if (msm_cam_flash_gpio_tbl[i][1])
-				gpio_direction_output(
-					msm_cam_flash_gpio_tbl[i][0], 0);
-			else
-				gpio_direction_input(
-					msm_cam_flash_gpio_tbl[i][0]);
-		}
-	} else {
-		for (i = 0; i < ARRAY_SIZE(msm_cam_flash_gpio_tbl); i++) {
-			gpio_direction_input(msm_cam_flash_gpio_tbl[i][0]);
-			gpio_free(msm_cam_flash_gpio_tbl[i][0]);
-		}
-	}
-	return rc;
-}
-
-int msm_camera_flash(
-	struct msm_camera_sensor_flash_src *flash_src,
-	unsigned led_state)
-{
-	int flash_level = 0;
-	pr_info("[FLT] %s state %d\n", __func__, led_state);
-
-	if (!flash_src->camera_flash)  return 0;
-
-		switch (led_state) {
-		case MSM_CAMERA_LED_HIGH:
-			flash_level = FL_MODE_FLASH;
-			break;
-		case MSM_CAMERA_LED_LOW:
-			flash_level = FL_MODE_PRE_FLASH;
-			break;
-		case MSM_CAMERA_LED_OFF:
-		case MSM_CAMERA_LED_INIT:
-		case MSM_CAMERA_LED_RELEASE:
-			flash_level = FL_MODE_OFF;
-			break;
-		case FL_MODE_TORCH_LEVEL_1:
-		case FL_MODE_TORCH_LEVEL_2:
-		case FL_MODE_FLASH_LEVEL1:
-		case FL_MODE_FLASH_LEVEL2:
-		case FL_MODE_FLASH_LEVEL3:
-		case FL_MODE_FLASH_LEVEL4:
-		case FL_MODE_FLASH_LEVEL5:
-		case FL_MODE_FLASH_LEVEL6:
-		case FL_MODE_FLASH_LEVEL7:
-
-			flash_level = led_state;
-			break;
-		default:
-			pr_err("[FLT] %s: invalid flash level %d.\n", __func__, led_state);
-			return -EINVAL;
-		}
-
-	return flash_src->camera_flash(flash_level);
-}
-
-
-int msm_camera_flash_current_driver(
-	struct msm_camera_sensor_flash_current_driver *current_driver,
-	unsigned led_state)
-{
-	int rc = 0;
-#if defined CONFIG_LEDS_PMIC8058
-	int idx;
-	const struct pmic8058_leds_platform_data *driver_channel =
-		current_driver->driver_channel;
-	int num_leds = driver_channel->num_leds;
-
-	CDBG("%s: led_state = %d\n", __func__, led_state);
-
-	
-	switch (led_state) {
-	case MSM_CAMERA_LED_OFF:
-		for (idx = 0; idx < num_leds; ++idx) {
-			rc = pm8058_set_led_current(
-				driver_channel->leds[idx].id, 0);
-			if (rc < 0)
-				pr_err(
-					"%s: FAIL name = %s, rc = %d\n",
-					__func__,
-					driver_channel->leds[idx].name,
-					rc);
-		}
-		break;
-
-	case MSM_CAMERA_LED_LOW:
-		for (idx = 0; idx < num_leds; ++idx) {
-			rc = pm8058_set_led_current(
-				driver_channel->leds[idx].id,
-				current_driver->low_current/num_leds);
-			if (rc < 0)
-				pr_err(
-					"%s: FAIL name = %s, rc = %d\n",
-					__func__,
-					driver_channel->leds[idx].name,
-					rc);
-		}
-		break;
-
-	case MSM_CAMERA_LED_HIGH:
-		for (idx = 0; idx < num_leds; ++idx) {
-			rc = pm8058_set_led_current(
-				driver_channel->leds[idx].id,
-				current_driver->high_current/num_leds);
-			if (rc < 0)
-				pr_err(
-					"%s: FAIL name = %s, rc = %d\n",
-					__func__,
-					driver_channel->leds[idx].name,
-					rc);
-		}
-		break;
-	case MSM_CAMERA_LED_INIT:
-	case MSM_CAMERA_LED_RELEASE:
-		break;
-
-	default:
-		rc = -EFAULT;
-		break;
-	}
-	CDBG("msm_camera_flash_led_pmic8058: return %d\n", rc);
-#endif 
-	return rc;
-}
-
-int msm_camera_flash_led(
-		struct msm_camera_sensor_flash_external *external,
-		unsigned led_state)
-{
-	int rc = 0;
-
-	CDBG("msm_camera_flash_led: %d\n", led_state);
-	switch (led_state) {
-	case MSM_CAMERA_LED_INIT:
-		rc = gpio_request(external->led_en, "sgm3141");
-		CDBG("MSM_CAMERA_LED_INIT: gpio_req: %d %d\n",
-				external->led_en, rc);
-		if (!rc)
-			gpio_direction_output(external->led_en, 0);
-		else
-			return 0;
-
-		rc = gpio_request(external->led_flash_en, "sgm3141");
-		CDBG("MSM_CAMERA_LED_INIT: gpio_req: %d %d\n",
-				external->led_flash_en, rc);
-		if (!rc)
-			gpio_direction_output(external->led_flash_en, 0);
-
-			break;
-
-	case MSM_CAMERA_LED_RELEASE:
-		CDBG("MSM_CAMERA_LED_RELEASE\n");
-		gpio_set_value_cansleep(external->led_en, 0);
-		gpio_free(external->led_en);
-		gpio_set_value_cansleep(external->led_flash_en, 0);
-		gpio_free(external->led_flash_en);
-		break;
-
-	case MSM_CAMERA_LED_OFF:
-		CDBG("MSM_CAMERA_LED_OFF\n");
-		gpio_set_value_cansleep(external->led_en, 0);
-		gpio_set_value_cansleep(external->led_flash_en, 0);
-		break;
-
-	case MSM_CAMERA_LED_LOW:
-		CDBG("MSM_CAMERA_LED_LOW\n");
-		gpio_set_value_cansleep(external->led_en, 1);
-		gpio_set_value_cansleep(external->led_flash_en, 1);
-		break;
-
-	case MSM_CAMERA_LED_HIGH:
-		CDBG("MSM_CAMERA_LED_HIGH\n");
-		gpio_set_value_cansleep(external->led_en, 1);
-		gpio_set_value_cansleep(external->led_flash_en, 1);
-		break;
-
-	default:
-		rc = -EFAULT;
-		break;
-	}
-
-	return rc;
-}
-
-int msm_camera_flash_external(
-	struct msm_camera_sensor_flash_external *external,
-	unsigned led_state)
-{
-	int rc = 0;
-
-#if defined CONFIG_MSM_CAMERA_FLASH_SC628A
-	switch (led_state) {
-
-	case MSM_CAMERA_LED_INIT:
-		if (!sc628a_client) {
-			rc = i2c_add_driver(&sc628a_i2c_driver);
-			if (rc < 0 || sc628a_client == NULL) {
-				rc = -ENOTSUPP;
-				CDBG("I2C add driver failed");
-				return rc;
-			}
-		}
-#if defined(CONFIG_GPIO_SX150X) || defined(CONFIG_GPIO_SX150X_MODULE)
-		if (external->expander_info && !sx150x_client) {
-			struct i2c_adapter *adapter =
-			i2c_get_adapter(external->expander_info->bus_id);
-			if (adapter)
-				sx150x_client = i2c_new_device(adapter,
-					external->expander_info->board_info);
-			if (!sx150x_client || !adapter) {
-				rc = -ENOTSUPP;
-				i2c_del_driver(&sc628a_i2c_driver);
-				sc628a_client = NULL;
-				return rc;
-			}
-		}
-#endif
-		rc = gpio_request(external->led_en, "sc628a");
-		if (!rc) {
-			gpio_direction_output(external->led_en, 0);
-		} else {
-			goto err1;
-		}
-		rc = gpio_request(external->led_flash_en, "sc628a");
-		if (!rc) {
-			gpio_direction_output(external->led_flash_en, 0);
-			break;
-		}
-
-		gpio_set_value_cansleep(external->led_en, 0);
-		gpio_free(external->led_en);
-
-err1:
-		i2c_del_driver(&sc628a_i2c_driver);
-		sc628a_client = NULL;
-
-		break;
-
-	case MSM_CAMERA_LED_RELEASE:
-		if (sc628a_client) {
-			gpio_set_value_cansleep(external->led_en, 0);
-			gpio_free(external->led_en);
-			gpio_set_value_cansleep(external->led_flash_en, 0);
-			gpio_free(external->led_flash_en);
-		}
-#if defined(CONFIG_GPIO_SX150X) || defined(CONFIG_GPIO_SX150X_MODULE)
-		if (external->expander_info && sx150x_client) {
-			i2c_unregister_device(sx150x_client);
-			sx150x_client = NULL;
-		}
-#endif
-		break;
-
-	case MSM_CAMERA_LED_OFF:
-		rc = sc628a_i2c_write_b_flash(0x02, 0x0);
-		if (sc628a_client) {
-			gpio_set_value_cansleep(external->led_en, 0);
-			gpio_set_value_cansleep(external->led_flash_en, 0);
-		}
-		break;
-
-	case MSM_CAMERA_LED_LOW:
-		if (sc628a_client) {
-			gpio_set_value_cansleep(external->led_en, 1);
-			gpio_set_value_cansleep(external->led_flash_en, 1);
-			usleep_range(2000, 3000);
-		}
-		rc = sc628a_i2c_write_b_flash(0x02, 0x06);
-		break;
-
-	case MSM_CAMERA_LED_HIGH:
-		if (sc628a_client) {
-			gpio_set_value_cansleep(external->led_en, 1);
-			gpio_set_value_cansleep(external->led_flash_en, 1);
-			usleep_range(2000, 3000);
-		}
-		rc = sc628a_i2c_write_b_flash(0x02, 0x49);
-		break;
-
-	default:
-		rc = -EFAULT;
-		break;
-	}
-#endif
-
-	return rc;
-}
-
-static int msm_camera_flash_pwm(
-	struct msm_camera_sensor_flash_pwm *pwm,
-	unsigned led_state)
-{
-	int rc = 0;
-	int PWM_PERIOD = USEC_PER_SEC / pwm->freq;
-
-	static struct pwm_device *flash_pwm;
-
-	if (!flash_pwm) {
-		flash_pwm = pwm_request(pwm->channel, "camera-flash");
-		if (flash_pwm == NULL || IS_ERR(flash_pwm)) {
-			pr_err("%s: FAIL pwm_request(): flash_pwm=%p\n",
-			       __func__, flash_pwm);
-			flash_pwm = NULL;
-			return -ENXIO;
-		}
-	}
-
-	switch (led_state) {
-	case MSM_CAMERA_LED_LOW:
-		rc = pwm_config(flash_pwm,
-			(PWM_PERIOD/pwm->max_load)*pwm->low_load,
-			PWM_PERIOD);
-		if (rc >= 0)
-			rc = pwm_enable(flash_pwm);
-		break;
-
-	case MSM_CAMERA_LED_HIGH:
-		rc = pwm_config(flash_pwm,
-			(PWM_PERIOD/pwm->max_load)*pwm->high_load,
-			PWM_PERIOD);
-		if (rc >= 0)
-			rc = pwm_enable(flash_pwm);
-		break;
-
-	case MSM_CAMERA_LED_OFF:
-		pwm_disable(flash_pwm);
-		break;
-	case MSM_CAMERA_LED_INIT:
-	case MSM_CAMERA_LED_RELEASE:
-		break;
-
-	default:
-		rc = -EFAULT;
-		break;
-	}
-	return rc;
-}
-
-int msm_camera_flash_pmic(
-	struct msm_camera_sensor_flash_pmic *pmic,
-	unsigned led_state)
-{
-	int rc = 0;
-
-	switch (led_state) {
-	case MSM_CAMERA_LED_OFF:
-		rc = pmic->pmic_set_current(pmic->led_src_1, 0);
-		if (pmic->num_of_src > 1)
-			rc = pmic->pmic_set_current(pmic->led_src_2, 0);
-		break;
-
-	case MSM_CAMERA_LED_LOW:
-		rc = pmic->pmic_set_current(pmic->led_src_1,
-				pmic->low_current);
-		if (pmic->num_of_src > 1)
-			rc = pmic->pmic_set_current(pmic->led_src_2, 0);
-		break;
-
-	case MSM_CAMERA_LED_HIGH:
-		rc = pmic->pmic_set_current(pmic->led_src_1,
-			pmic->high_current);
-		if (pmic->num_of_src > 1)
-			rc = pmic->pmic_set_current(pmic->led_src_2,
-				pmic->high_current);
-		break;
-
-	case MSM_CAMERA_LED_INIT:
-	case MSM_CAMERA_LED_RELEASE:
-		 break;
-
-	default:
-		rc = -EFAULT;
-		break;
-	}
-	CDBG("flash_set_led_state: return %d\n", rc);
-
-	return rc;
-}
-
-int32_t msm_camera_flash_set_led_state(
-	struct msm_camera_sensor_flash_data *fdata, unsigned led_state)
-{
-	int32_t rc;
-
-	if (fdata->flash_type != MSM_CAMERA_FLASH_LED ||
-		fdata->flash_src == NULL)
-		return -ENODEV;
-
-	switch (fdata->flash_src->flash_sr_type) {
-	case MSM_CAMERA_FLASH_SRC_PMIC:
-		rc = msm_camera_flash_pmic(&fdata->flash_src->_fsrc.pmic_src,
-			led_state);
-		break;
-
-	case MSM_CAMERA_FLASH_SRC_PWM:
-		rc = msm_camera_flash_pwm(&fdata->flash_src->_fsrc.pwm_src,
-			led_state);
-		break;
-
-	case MSM_CAMERA_FLASH_SRC_CURRENT_DRIVER:
-		if (fdata->flash_src->camera_flash)
-			rc = msm_camera_flash(fdata->flash_src, led_state);
-		else
-			rc = msm_camera_flash_current_driver(
-				&fdata->flash_src->_fsrc.current_driver_src,
-				led_state);
-		break;
-
-	case MSM_CAMERA_FLASH_SRC_EXT:
-		rc = msm_camera_flash_external(
-			&fdata->flash_src->_fsrc.ext_driver_src,
-			led_state);
-		break;
-
-	case MSM_CAMERA_FLASH_SRC_LED1:
-		rc = msm_camera_flash_led(
-				&fdata->flash_src->_fsrc.ext_driver_src,
-				led_state);
-		break;
-
-	default:
-		rc = -ENODEV;
-		break;
-	}
-
-	return rc;
-}
-
-static int msm_strobe_flash_xenon_charge(int32_t flash_charge,
-		int32_t charge_enable, uint32_t flash_recharge_duration)
-{
-	gpio_set_value_cansleep(flash_charge, charge_enable);
-	if (charge_enable) {
-		timer_flash.expires = jiffies +
-			msecs_to_jiffies(flash_recharge_duration);
-		
-		if (!timer_pending(&timer_flash))
-			add_timer(&timer_flash);
-	} else
-		del_timer_sync(&timer_flash);
-	return 0;
-}
-
-static void strobe_flash_xenon_recharge_handler(unsigned long data)
-{
-	unsigned long flags;
-	struct msm_camera_sensor_strobe_flash_data *sfdata =
-		(struct msm_camera_sensor_strobe_flash_data *)data;
-
-	spin_lock_irqsave(&sfdata->timer_lock, flags);
-	msm_strobe_flash_xenon_charge(sfdata->flash_charge, 1,
-		sfdata->flash_recharge_duration);
-	spin_unlock_irqrestore(&sfdata->timer_lock, flags);
-
-	return;
-}
-
-static irqreturn_t strobe_flash_charge_ready_irq(int irq_num, void *data)
-{
-	struct msm_camera_sensor_strobe_flash_data *sfdata =
-		(struct msm_camera_sensor_strobe_flash_data *)data;
-
-	
-	gpio_set_value_cansleep(sfdata->flash_charge, 0);
-
-	return IRQ_HANDLED;
-}
-
-static int msm_strobe_flash_xenon_init(
-	struct msm_camera_sensor_strobe_flash_data *sfdata)
-{
-	unsigned long flags;
-	int rc = 0;
-
-	spin_lock_irqsave(&sfdata->spin_lock, flags);
-	if (!sfdata->state) {
-
-		rc = config_flash_gpio_table(MSM_CAM_FLASH_ON, sfdata);
-		if (rc < 0) {
-			pr_err("%s: gpio_request failed\n", __func__);
-			goto go_out;
-		}
-		rc = request_irq(sfdata->irq, strobe_flash_charge_ready_irq,
-			IRQF_TRIGGER_RISING, "charge_ready", sfdata);
-		if (rc < 0) {
-			pr_err("%s: request_irq failed %d\n", __func__, rc);
-			goto go_out;
-		}
-
-		spin_lock_init(&sfdata->timer_lock);
-		
-		init_timer(&timer_flash);
-		timer_flash.function = strobe_flash_xenon_recharge_handler;
-		timer_flash.data = (unsigned long)sfdata;
-	}
-	sfdata->state++;
-go_out:
-	spin_unlock_irqrestore(&sfdata->spin_lock, flags);
-
-	return rc;
-}
-
-static int msm_strobe_flash_xenon_release
-(struct msm_camera_sensor_strobe_flash_data *sfdata, int32_t final_release)
-{
-	unsigned long flags;
-
-	spin_lock_irqsave(&sfdata->spin_lock, flags);
-	if (sfdata->state > 0) {
-		if (final_release)
-			sfdata->state = 0;
-		else
-			sfdata->state--;
-
-		if (!sfdata->state) {
-			free_irq(sfdata->irq, sfdata);
-			config_flash_gpio_table(MSM_CAM_FLASH_OFF, sfdata);
-			if (timer_pending(&timer_flash))
-				del_timer_sync(&timer_flash);
-		}
-	}
-	spin_unlock_irqrestore(&sfdata->spin_lock, flags);
-	return 0;
-}
-
-static void msm_strobe_flash_xenon_fn_init
-	(struct msm_strobe_flash_ctrl *strobe_flash_ptr)
-{
-	strobe_flash_ptr->strobe_flash_init =
-				msm_strobe_flash_xenon_init;
-	strobe_flash_ptr->strobe_flash_charge =
-				msm_strobe_flash_xenon_charge;
-	strobe_flash_ptr->strobe_flash_release =
-				msm_strobe_flash_xenon_release;
-}
-
-int msm_strobe_flash_init(struct msm_sync *sync, uint32_t sftype)
-{
-	int rc = 0;
-	switch (sftype) {
-	case MSM_CAMERA_STROBE_FLASH_XENON:
-		if (sync->sdata->strobe_flash_data) {
-			msm_strobe_flash_xenon_fn_init(&sync->sfctrl);
-			rc = sync->sfctrl.strobe_flash_init(
-			sync->sdata->strobe_flash_data);
-		} else
-			return -ENODEV;
-		break;
-	default:
-		rc = -ENODEV;
-	}
-	return rc;
-}
-
-int msm_strobe_flash_ctrl(struct msm_camera_sensor_strobe_flash_data *sfdata,
-	struct strobe_flash_ctrl_data *strobe_ctrl)
-{
-	int rc = 0;
-	switch (strobe_ctrl->type) {
-	case STROBE_FLASH_CTRL_INIT:
-		if (!sfdata)
-			return -ENODEV;
-		rc = msm_strobe_flash_xenon_init(sfdata);
-		break;
-	case STROBE_FLASH_CTRL_CHARGE:
-		rc = msm_strobe_flash_xenon_charge(sfdata->flash_charge,
-			strobe_ctrl->charge_en,
-			sfdata->flash_recharge_duration);
-		break;
-	case STROBE_FLASH_CTRL_RELEASE:
-		if (sfdata)
-			rc = msm_strobe_flash_xenon_release(sfdata, 0);
-		break;
-	default:
-		pr_err("Invalid Strobe Flash State\n");
-		rc = -EINVAL;
-	}
-	return rc;
-}
-
-int msm_flash_ctrl(struct msm_camera_sensor_info *sdata,
-	struct flash_ctrl_data *flash_info)
-{
-	int rc = 0;
-	sensor_data = sdata;
-	switch (flash_info->flashtype) {
-	case LED_FLASH:
-		rc = msm_camera_flash_set_led_state(sdata->flash_data,
-			flash_info->ctrl_data.led_state);
-			break;
-	case STROBE_FLASH:
-		rc = msm_strobe_flash_ctrl(sdata->strobe_flash_data,
-			&(flash_info->ctrl_data.strobe_ctrl));
-		break;
-	default:
-		pr_err("Invalid Flash MODE\n");
-		rc = -EINVAL;
-	}
-	return rc;
-}
diff --git a/drivers/media/video/msm/gemini/Makefile b/drivers/media/video/msm/gemini/Makefile
deleted file mode 100644
index 8a7cd93..0000000
--- a/drivers/media/video/msm/gemini/Makefile
+++ /dev/null
@@ -1,3 +0,0 @@
-GCC_VERSION      := $(shell $(CONFIG_SHELL) $(PWD)/scripts/gcc-version.sh $(CROSS_COMPILE)gcc)
-EXTRA_CFLAGS += -Idrivers/media/video/msm
-obj-$(CONFIG_MSM_GEMINI) += msm_gemini_dev.o msm_gemini_sync.o msm_gemini_core.o msm_gemini_hw.o msm_gemini_platform.o
diff --git a/drivers/media/video/msm/gemini/msm_gemini_common.h b/drivers/media/video/msm/gemini/msm_gemini_common.h
deleted file mode 100644
index 68ed162..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_common.h
+++ /dev/null
@@ -1,39 +0,0 @@
-/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_GEMINI_COMMON_H
-#define MSM_GEMINI_COMMON_H
-
-#define MSM_GEMINI_DEBUG
-#ifdef MSM_GEMINI_DEBUG
-#define GMN_DBG(fmt, args...) pr_debug(fmt, ##args)
-#else
-#define GMN_DBG(fmt, args...) do { } while (0)
-#endif
-
-#define GMN_PR_ERR   pr_err
-
-enum GEMINI_MODE {
-	GEMINI_MODE_DISABLE,
-	GEMINI_MODE_OFFLINE,
-	GEMINI_MODE_REALTIME,
-	GEMINI_MODE_REALTIME_ROTATION
-};
-
-enum GEMINI_ROTATION {
-	GEMINI_ROTATION_0,
-	GEMINI_ROTATION_90,
-	GEMINI_ROTATION_180,
-	GEMINI_ROTATION_270
-};
-
-#endif 
diff --git a/drivers/media/video/msm/gemini/msm_gemini_core.c b/drivers/media/video/msm/gemini/msm_gemini_core.c
deleted file mode 100644
index 4f856dd..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_core.c
+++ /dev/null
@@ -1,248 +0,0 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/sched.h>
-#include "msm_gemini_hw.h"
-#include "msm_gemini_core.h"
-#include "msm_gemini_platform.h"
-#include "msm_gemini_common.h"
-
-static struct msm_gemini_hw_pingpong fe_pingpong_buf;
-static struct msm_gemini_hw_pingpong we_pingpong_buf;
-static int we_pingpong_index;
-static int reset_done_ack;
-static spinlock_t reset_lock;
-static wait_queue_head_t reset_wait;
-
-int msm_gemini_core_reset(uint8_t op_mode, void *base, int size)
-{
-	unsigned long flags;
-	int rc = 0;
-	int tm = 500; 
-	memset(&fe_pingpong_buf, 0, sizeof(fe_pingpong_buf));
-	fe_pingpong_buf.is_fe = 1;
-	we_pingpong_index = 0;
-	memset(&we_pingpong_buf, 0, sizeof(we_pingpong_buf));
-	spin_lock_irqsave(&reset_lock, flags);
-	reset_done_ack = 0;
-	msm_gemini_hw_reset(base, size);
-	spin_unlock_irqrestore(&reset_lock, flags);
-	rc = wait_event_interruptible_timeout(
-			reset_wait,
-			reset_done_ack,
-			msecs_to_jiffies(tm));
-
-	if (!reset_done_ack) {
-		GMN_DBG("%s: reset ACK failed %d", __func__, rc);
-		return -EBUSY;
-	}
-
-	GMN_DBG("%s: reset_done_ack rc %d", __func__, rc);
-	spin_lock_irqsave(&reset_lock, flags);
-	reset_done_ack = 0;
-	spin_unlock_irqrestore(&reset_lock, flags);
-
-	if (op_mode == MSM_GEMINI_MODE_REALTIME_ENCODE) {
-		
-		msm_gemini_hw_we_buffer_cfg(1);
-	} else {
-		
-		msm_gemini_hw_we_buffer_cfg(0);
-	}
-
-	
-
-	return 0;
-}
-
-void msm_gemini_core_release(int release_buf)
-{
-	int i = 0;
-	for (i = 0; i < 2; i++) {
-		if (we_pingpong_buf.buf_status[i] && release_buf)
-			msm_gemini_platform_p2v(we_pingpong_buf.buf[i].file,
-					&we_pingpong_buf.buf[i].handle);
-		we_pingpong_buf.buf_status[i] = 0;
-	}
-}
-
-void msm_gemini_core_init(void)
-{
-	init_waitqueue_head(&reset_wait);
-	spin_lock_init(&reset_lock);
-}
-
-int msm_gemini_core_fe_start(void)
-{
-	msm_gemini_hw_fe_start();
-	return 0;
-}
-
-int msm_gemini_core_fe_buf_update(struct msm_gemini_core_buf *buf)
-{
-	GMN_DBG("%s:%d] 0x%08x %d 0x%08x %d\n", __func__, __LINE__,
-		(int) buf->y_buffer_addr, buf->y_len,
-		(int) buf->cbcr_buffer_addr, buf->cbcr_len);
-	return msm_gemini_hw_pingpong_update(&fe_pingpong_buf, buf);
-}
-
-void *msm_gemini_core_fe_pingpong_irq(int gemini_irq_status, void *context)
-{
-	return msm_gemini_hw_pingpong_irq(&fe_pingpong_buf);
-}
-
-int msm_gemini_core_we_buf_update(struct msm_gemini_core_buf *buf)
-{
-	int rc;
-	GMN_DBG("%s:%d] 0x%08x 0x%08x %d\n", __func__, __LINE__,
-		(int) buf->y_buffer_addr, (int) buf->cbcr_buffer_addr,
-		buf->y_len);
-	we_pingpong_buf.buf_status[we_pingpong_index] = 0;
-	we_pingpong_index = (we_pingpong_index + 1)%2;
-	rc = msm_gemini_hw_pingpong_update(&we_pingpong_buf, buf);
-	return 0;
-}
-
-int msm_gemini_core_we_buf_reset(struct msm_gemini_hw_buf *buf)
-{
-	int i = 0;
-	for (i = 0; i < 2; i++) {
-		if (we_pingpong_buf.buf[i].y_buffer_addr
-					== buf->y_buffer_addr)
-			we_pingpong_buf.buf_status[i] = 0;
-	}
-	return 0;
-}
-
-void *msm_gemini_core_we_pingpong_irq(int gemini_irq_status, void *context)
-{
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-
-	return msm_gemini_hw_pingpong_irq(&we_pingpong_buf);
-}
-
-void *msm_gemini_core_framedone_irq(int gemini_irq_status, void *context)
-{
-	struct msm_gemini_hw_buf *buf_p;
-
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-
-	buf_p = msm_gemini_hw_pingpong_active_buffer(&we_pingpong_buf);
-	if (buf_p) {
-		buf_p->framedone_len = msm_gemini_hw_encode_output_size();
-		GMN_DBG("%s:%d] framedone_len %d\n", __func__, __LINE__,
-			buf_p->framedone_len);
-	}
-
-	return buf_p;
-}
-
-void *msm_gemini_core_reset_ack_irq(int gemini_irq_status, void *context)
-{
-	
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-	return NULL;
-}
-
-void *msm_gemini_core_err_irq(int gemini_irq_status, void *context)
-{
-	GMN_PR_ERR("%s:%d]\n", __func__, gemini_irq_status);
-	return NULL;
-}
-
-static int (*msm_gemini_irq_handler) (int, void *, void *);
-
-irqreturn_t msm_gemini_core_irq(int irq_num, void *context)
-{
-	void *data = NULL;
-	unsigned long flags;
-	int gemini_irq_status;
-
-	GMN_DBG("%s:%d] irq_num = %d\n", __func__, __LINE__, irq_num);
-
-	spin_lock_irqsave(&reset_lock, flags);
-	reset_done_ack = 1;
-	spin_unlock_irqrestore(&reset_lock, flags);
-	gemini_irq_status = msm_gemini_hw_irq_get_status();
-
-	GMN_DBG("%s:%d] gemini_irq_status = %0x\n", __func__, __LINE__,
-		gemini_irq_status);
-
-	
-	if (gemini_irq_status & 0x400) {
-		wake_up(&reset_wait);
-		msm_gemini_hw_irq_clear(HWIO_JPEG_IRQ_CLEAR_RMSK,
-			JPEG_IRQ_CLEAR_ALL);
-	} else if (gemini_irq_status & 0x1) {
-		msm_gemini_hw_irq_clear(HWIO_JPEG_IRQ_CLEAR_RMSK,
-			JPEG_IRQ_CLEAR_ALL);
-	} else {
-		msm_gemini_hw_irq_clear(HWIO_JPEG_IRQ_CLEAR_RMSK,
-			gemini_irq_status);
-	}
-
-	if (msm_gemini_hw_irq_is_frame_done(gemini_irq_status)) {
-		data = msm_gemini_core_framedone_irq(gemini_irq_status,
-			context);
-		if (msm_gemini_irq_handler)
-			msm_gemini_irq_handler(
-				MSM_GEMINI_HW_MASK_COMP_FRAMEDONE,
-				context, data);
-	}
-
-	if (msm_gemini_hw_irq_is_fe_pingpong(gemini_irq_status)) {
-		data = msm_gemini_core_fe_pingpong_irq(gemini_irq_status,
-			context);
-		if (msm_gemini_irq_handler)
-			msm_gemini_irq_handler(MSM_GEMINI_HW_MASK_COMP_FE,
-				context, data);
-	}
-
-	if (msm_gemini_hw_irq_is_we_pingpong(gemini_irq_status) &&
-	    !msm_gemini_hw_irq_is_frame_done(gemini_irq_status)) {
-		data = msm_gemini_core_we_pingpong_irq(gemini_irq_status,
-			context);
-		if (msm_gemini_irq_handler)
-			msm_gemini_irq_handler(MSM_GEMINI_HW_MASK_COMP_WE,
-				context, data);
-	}
-
-	if (msm_gemini_hw_irq_is_reset_ack(gemini_irq_status)) {
-		data = msm_gemini_core_reset_ack_irq(gemini_irq_status,
-			context);
-		if (msm_gemini_irq_handler)
-			msm_gemini_irq_handler(
-				MSM_GEMINI_HW_MASK_COMP_RESET_ACK,
-				context, data);
-	}
-
-	
-	if (msm_gemini_hw_irq_is_err(gemini_irq_status)) {
-		data = msm_gemini_core_err_irq(gemini_irq_status, context);
-		if (msm_gemini_irq_handler)
-			msm_gemini_irq_handler(MSM_GEMINI_HW_MASK_COMP_ERR,
-				context, data);
-	}
-
-	return IRQ_HANDLED;
-}
-
-void msm_gemini_core_irq_install(int (*irq_handler) (int, void *, void *))
-{
-	msm_gemini_irq_handler = irq_handler;
-}
-
-void msm_gemini_core_irq_remove(void)
-{
-	msm_gemini_irq_handler = NULL;
-}
diff --git a/drivers/media/video/msm/gemini/msm_gemini_core.h b/drivers/media/video/msm/gemini/msm_gemini_core.h
deleted file mode 100644
index d702bd6..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_core.h
+++ /dev/null
@@ -1,35 +0,0 @@
-/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_GEMINI_CORE_H
-#define MSM_GEMINI_CORE_H
-
-#include <linux/interrupt.h>
-#include "msm_gemini_hw.h"
-
-#define msm_gemini_core_buf msm_gemini_hw_buf
-
-irqreturn_t msm_gemini_core_irq(int irq_num, void *context);
-
-void msm_gemini_core_irq_install(int (*irq_handler) (int, void *, void *));
-void msm_gemini_core_irq_remove(void);
-
-int msm_gemini_core_fe_buf_update(struct msm_gemini_core_buf *buf);
-int msm_gemini_core_we_buf_update(struct msm_gemini_core_buf *buf);
-int msm_gemini_core_we_buf_reset(struct msm_gemini_hw_buf *buf);
-
-int msm_gemini_core_reset(uint8_t op_mode, void *base, int size);
-int msm_gemini_core_fe_start(void);
-
-void msm_gemini_core_release(int);
-void msm_gemini_core_init(void);
-#endif 
diff --git a/drivers/media/video/msm/gemini/msm_gemini_dev.c b/drivers/media/video/msm/gemini/msm_gemini_dev.c
deleted file mode 100644
index 01d45ed..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_dev.c
+++ /dev/null
@@ -1,266 +0,0 @@
-/* Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/kernel.h>
-#include <linux/platform_device.h>
-#include <mach/board.h>
-
-#include <linux/fs.h>
-#include <linux/slab.h>
-#include <linux/device.h>
-#include <linux/uaccess.h>
-#include <media/msm_gemini.h>
-#include <media/v4l2-device.h>
-#include <media/v4l2-subdev.h>
-
-#include "msm.h"
-#include "msm_gemini_sync.h"
-#include "msm_gemini_common.h"
-
-#define MSM_GEMINI_NAME "gemini"
-
-static int msm_gemini_open(struct inode *inode, struct file *filp)
-{
-	int rc;
-
-	struct msm_gemini_device *pgmn_dev = container_of(inode->i_cdev,
-		struct msm_gemini_device, cdev);
-	filp->private_data = pgmn_dev;
-
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-
-	rc = __msm_gemini_open(pgmn_dev);
-
-	GMN_DBG(KERN_INFO "%s:%d] %s open_count = %d\n", __func__, __LINE__,
-		filp->f_path.dentry->d_name.name, pgmn_dev->open_count);
-
-	return rc;
-}
-
-static int msm_gemini_release(struct inode *inode, struct file *filp)
-{
-	int rc;
-
-	struct msm_gemini_device *pgmn_dev = filp->private_data;
-
-	GMN_DBG(KERN_INFO "%s:%d]\n", __func__, __LINE__);
-
-	rc = __msm_gemini_release(pgmn_dev);
-
-	GMN_DBG(KERN_INFO "%s:%d] %s open_count = %d\n", __func__, __LINE__,
-		filp->f_path.dentry->d_name.name, pgmn_dev->open_count);
-	return rc;
-}
-
-static long msm_gemini_ioctl(struct file *filp, unsigned int cmd,
-	unsigned long arg)
-{
-	int rc;
-	struct msm_gemini_device *pgmn_dev = filp->private_data;
-
-	GMN_DBG("%s:%d] cmd=%d pgmn_dev=0x%x arg=0x%x\n", __func__,
-		__LINE__, _IOC_NR(cmd), (uint32_t)pgmn_dev, (uint32_t)arg);
-
-	rc = __msm_gemini_ioctl(pgmn_dev, cmd, arg);
-
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-	return rc;
-}
-
-static const struct file_operations msm_gemini_fops = {
-	.owner	  = THIS_MODULE,
-	.open	   = msm_gemini_open,
-	.release	= msm_gemini_release,
-	.unlocked_ioctl = msm_gemini_ioctl,
-};
-
-static struct class *msm_gemini_class;
-static dev_t msm_gemini_devno;
-struct msm_gemini_device *msm_gemini_device_p;
-
-int msm_gemini_subdev_init(struct v4l2_subdev *gemini_sd)
-{
-	int rc;
-	struct msm_gemini_device *pgmn_dev =
-		(struct msm_gemini_device *)gemini_sd->host_priv;
-
-	GMN_DBG("%s:%d: gemini_sd=0x%x pgmn_dev=0x%x\n",
-		__func__, __LINE__, (uint32_t)gemini_sd, (uint32_t)pgmn_dev);
-	rc = __msm_gemini_open(pgmn_dev);
-	GMN_DBG("%s:%d: rc=%d\n",
-		__func__, __LINE__, rc);
-	return rc;
-}
-
-static long msm_gemini_subdev_ioctl(struct v4l2_subdev *sd,
-	unsigned int cmd, void *arg)
-{
-	long rc;
-	struct msm_gemini_device *pgmn_dev =
-		(struct msm_gemini_device *)sd->host_priv;
-
-	GMN_DBG("%s: cmd=%d\n", __func__, cmd);
-
-	GMN_DBG("%s: pgmn_dev 0x%x", __func__, (uint32_t)pgmn_dev);
-
-	GMN_DBG("%s: Calling __msm_gemini_ioctl\n", __func__);
-
-	rc = __msm_gemini_ioctl(pgmn_dev, cmd, (unsigned long)arg);
-	pr_debug("%s: X\n", __func__);
-	return rc;
-}
-
-void msm_gemini_subdev_release(struct v4l2_subdev *gemini_sd)
-{
-	int rc;
-	struct msm_gemini_device *pgmn_dev =
-		(struct msm_gemini_device *)gemini_sd->host_priv;
-	GMN_DBG("%s:pgmn_dev=0x%x", __func__, (uint32_t)pgmn_dev);
-	rc = __msm_gemini_release(pgmn_dev);
-	GMN_DBG("%s:rc=%d", __func__, rc);
-}
-
-static const struct v4l2_subdev_core_ops msm_gemini_subdev_core_ops = {
-	.ioctl = msm_gemini_subdev_ioctl,
-};
-
-static const struct v4l2_subdev_ops msm_gemini_subdev_ops = {
-	.core = &msm_gemini_subdev_core_ops,
-};
-
-static int msm_gemini_init(struct platform_device *pdev)
-{
-	int rc = -1;
-	struct device *dev;
-
-	GMN_DBG("%s:\n", __func__);
-	msm_gemini_device_p = __msm_gemini_init(pdev);
-	if (msm_gemini_device_p == NULL) {
-		GMN_PR_ERR("%s: initialization failed\n", __func__);
-		goto fail;
-	}
-
-	v4l2_subdev_init(&msm_gemini_device_p->subdev, &msm_gemini_subdev_ops);
-	v4l2_set_subdev_hostdata(&msm_gemini_device_p->subdev,
-		msm_gemini_device_p);
-	pr_debug("%s: msm_gemini_device_p 0x%x", __func__,
-			(uint32_t)msm_gemini_device_p);
-	GMN_DBG("%s:gemini: platform_set_drvdata\n", __func__);
-	platform_set_drvdata(pdev, &msm_gemini_device_p->subdev);
-
-	rc = alloc_chrdev_region(&msm_gemini_devno, 0, 1, MSM_GEMINI_NAME);
-	if (rc < 0) {
-		GMN_PR_ERR("%s: failed to allocate chrdev\n", __func__);
-		goto fail_1;
-	}
-
-	if (!msm_gemini_class) {
-		msm_gemini_class = class_create(THIS_MODULE, MSM_GEMINI_NAME);
-		if (IS_ERR(msm_gemini_class)) {
-			rc = PTR_ERR(msm_gemini_class);
-			GMN_PR_ERR("%s: create device class failed\n",
-				__func__);
-			goto fail_2;
-		}
-	}
-
-	dev = device_create(msm_gemini_class, NULL,
-		MKDEV(MAJOR(msm_gemini_devno), MINOR(msm_gemini_devno)), NULL,
-		"%s%d", MSM_GEMINI_NAME, 0);
-
-	if (IS_ERR(dev)) {
-		GMN_PR_ERR("%s: error creating device\n", __func__);
-		rc = -ENODEV;
-		goto fail_3;
-	}
-
-	cdev_init(&msm_gemini_device_p->cdev, &msm_gemini_fops);
-	msm_gemini_device_p->cdev.owner = THIS_MODULE;
-	msm_gemini_device_p->cdev.ops   =
-		(const struct file_operations *) &msm_gemini_fops;
-	rc = cdev_add(&msm_gemini_device_p->cdev, msm_gemini_devno, 1);
-	if (rc < 0) {
-		GMN_PR_ERR("%s: error adding cdev\n", __func__);
-		rc = -ENODEV;
-		goto fail_4;
-	}
-
-	GMN_DBG("%s %s: success\n", __func__, MSM_GEMINI_NAME);
-
-	return rc;
-
-fail_4:
-	device_destroy(msm_gemini_class, msm_gemini_devno);
-
-fail_3:
-	class_destroy(msm_gemini_class);
-
-fail_2:
-	unregister_chrdev_region(msm_gemini_devno, 1);
-
-fail_1:
-	__msm_gemini_exit(msm_gemini_device_p);
-
-fail:
-	return rc;
-}
-
-static void msm_gemini_exit(void)
-{
-	cdev_del(&msm_gemini_device_p->cdev);
-	device_destroy(msm_gemini_class, msm_gemini_devno);
-	class_destroy(msm_gemini_class);
-	unregister_chrdev_region(msm_gemini_devno, 1);
-
-	__msm_gemini_exit(msm_gemini_device_p);
-}
-
-static int __msm_gemini_probe(struct platform_device *pdev)
-{
-	return msm_gemini_init(pdev);
-}
-
-static int __msm_gemini_remove(struct platform_device *pdev)
-{
-	msm_gemini_exit();
-	return 0;
-}
-
-static struct platform_driver msm_gemini_driver = {
-	.probe  = __msm_gemini_probe,
-	.remove = __msm_gemini_remove,
-	.driver = {
-		.name = MSM_GEMINI_DRV_NAME,
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init msm_gemini_driver_init(void)
-{
-	int rc;
-	rc = platform_driver_register(&msm_gemini_driver);
-	return rc;
-}
-
-static void __exit msm_gemini_driver_exit(void)
-{
-	platform_driver_unregister(&msm_gemini_driver);
-}
-
-MODULE_DESCRIPTION("msm gemini jpeg driver");
-MODULE_VERSION("msm gemini 0.1");
-
-module_init(msm_gemini_driver_init);
-module_exit(msm_gemini_driver_exit);
-
diff --git a/drivers/media/video/msm/gemini/msm_gemini_hw.c b/drivers/media/video/msm/gemini/msm_gemini_hw.c
deleted file mode 100644
index c238439..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_hw.c
+++ /dev/null
@@ -1,519 +0,0 @@
-/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/delay.h>
-#include "msm_gemini_hw.h"
-#include "msm_gemini_common.h"
-
-#include <linux/io.h>
-
-static void *gemini_region_base;
-static uint32_t gemini_region_size;
-
-int msm_gemini_hw_pingpong_update(struct msm_gemini_hw_pingpong *pingpong_hw,
-	struct msm_gemini_hw_buf *buf)
-{
-	int buf_free_index = -1;
-
-	if (!pingpong_hw->buf_status[0]) {
-		buf_free_index = 0;
-	} else if (!pingpong_hw->buf_status[1]) {
-		buf_free_index = 1;
-	} else {
-		GMN_PR_ERR("%s:%d: pingpong buffer busy\n", __func__, __LINE__);
-		return -1;
-	}
-
-	pingpong_hw->buf[buf_free_index] = *buf;
-	pingpong_hw->buf_status[buf_free_index] = 1;
-
-	if (pingpong_hw->is_fe) {
-		
-		msm_gemini_hw_fe_buffer_update(
-			&pingpong_hw->buf[buf_free_index], buf_free_index);
-	} else {
-		
-		msm_gemini_hw_we_buffer_update(
-			&pingpong_hw->buf[buf_free_index], buf_free_index);
-	}
-	return 0;
-}
-
-void *msm_gemini_hw_pingpong_irq(struct msm_gemini_hw_pingpong *pingpong_hw)
-{
-	struct msm_gemini_hw_buf *buf_p = NULL;
-
-	if (pingpong_hw->buf_status[pingpong_hw->buf_active_index]) {
-		buf_p = &pingpong_hw->buf[pingpong_hw->buf_active_index];
-		pingpong_hw->buf_status[pingpong_hw->buf_active_index] = 0;
-	}
-
-	pingpong_hw->buf_active_index = !pingpong_hw->buf_active_index;
-
-	return (void *) buf_p;
-}
-
-void *msm_gemini_hw_pingpong_active_buffer(
-	struct msm_gemini_hw_pingpong *pingpong_hw)
-{
-	struct msm_gemini_hw_buf *buf_p = NULL;
-
-	if (pingpong_hw->buf_status[pingpong_hw->buf_active_index])
-		buf_p = &pingpong_hw->buf[pingpong_hw->buf_active_index];
-
-	return (void *) buf_p;
-}
-
-struct msm_gemini_hw_cmd hw_cmd_irq_get_status[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_READ, 1, HWIO_JPEG_IRQ_STATUS_ADDR,
-		HWIO_JPEG_IRQ_STATUS_RMSK, {0} },
-};
-
-int msm_gemini_hw_irq_get_status(void)
-{
-	uint32_t n_irq_status = 0;
-	rmb();
-	n_irq_status = msm_gemini_hw_read(&hw_cmd_irq_get_status[0]);
-	rmb();
-	return n_irq_status;
-}
-
-struct msm_gemini_hw_cmd hw_cmd_encode_output_size[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_READ, 1,
-		HWIO_JPEG_STATUS_ENCODE_OUTPUT_SIZE_ADDR,
-		HWIO_JPEG_STATUS_ENCODE_OUTPUT_SIZE_RMSK, {0} },
-};
-
-long msm_gemini_hw_encode_output_size(void)
-{
-	uint32_t encode_output_size = 0;
-
-	encode_output_size = msm_gemini_hw_read(&hw_cmd_encode_output_size[0]);
-
-	return encode_output_size;
-}
-
-struct msm_gemini_hw_cmd hw_cmd_irq_clear[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_IRQ_CLEAR_ADDR,
-		HWIO_JPEG_IRQ_CLEAR_RMSK, {JPEG_IRQ_CLEAR_ALL} },
-};
-
-void msm_gemini_hw_irq_clear(uint32_t mask, uint32_t data)
-{
-	GMN_DBG("%s:%d] mask %0x data %0x", __func__, __LINE__, mask, data);
-	hw_cmd_irq_clear[0].mask = mask;
-	hw_cmd_irq_clear[0].data = data;
-	msm_gemini_hw_write(&hw_cmd_irq_clear[0]);
-}
-
-struct msm_gemini_hw_cmd hw_cmd_fe_ping_update[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_BUFFER_CFG_ADDR,
-		HWIO_JPEG_FE_BUFFER_CFG_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_Y_PING_ADDR_ADDR,
-		HWIO_JPEG_FE_Y_PING_ADDR_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_CBCR_PING_ADDR_ADDR,
-		HWIO_JPEG_FE_CBCR_PING_ADDR_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_CMD_ADDR,
-		HWIO_JPEG_FE_CMD_RMSK, {JPEG_FE_CMD_BUFFERRELOAD} },
-};
-
-struct msm_gemini_hw_cmd hw_cmd_fe_pong_update[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_BUFFER_CFG_ADDR,
-		HWIO_JPEG_FE_BUFFER_CFG_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_Y_PONG_ADDR_ADDR,
-		HWIO_JPEG_FE_Y_PONG_ADDR_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_CBCR_PONG_ADDR_ADDR,
-		HWIO_JPEG_FE_CBCR_PONG_ADDR_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_CMD_ADDR,
-		HWIO_JPEG_FE_CMD_RMSK, {JPEG_FE_CMD_BUFFERRELOAD} },
-};
-
-void msm_gemini_hw_fe_buffer_update(struct msm_gemini_hw_buf *p_input,
-	uint8_t pingpong_index)
-{
-	uint32_t n_reg_val = 0;
-
-	struct msm_gemini_hw_cmd *hw_cmd_p;
-
-	if (pingpong_index == 0) {
-		hw_cmd_p = &hw_cmd_fe_ping_update[0];
-		n_reg_val = ((((p_input->num_of_mcu_rows - 1) <<
-			HWIO_JPEG_FE_BUFFER_CFG_CBCR_MCU_ROWS_SHFT) &
-			HWIO_JPEG_FE_BUFFER_CFG_CBCR_MCU_ROWS_BMSK) |
-			(((p_input->num_of_mcu_rows - 1) <<
-			HWIO_JPEG_FE_BUFFER_CFG_Y_MCU_ROWS_SHFT) &
-			HWIO_JPEG_FE_BUFFER_CFG_Y_MCU_ROWS_BMSK));
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		n_reg_val = ((p_input->y_buffer_addr <<
-			HWIO_JPEG_FE_Y_PING_ADDR_FE_Y_PING_START_ADDR_SHFT) &
-			HWIO_JPEG_FE_Y_PING_ADDR_FE_Y_PING_START_ADDR_BMSK);
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		n_reg_val = ((p_input->cbcr_buffer_addr<<
-		HWIO_JPEG_FE_CBCR_PING_ADDR_FE_CBCR_PING_START_ADDR_SHFT) &
-		HWIO_JPEG_FE_CBCR_PING_ADDR_FE_CBCR_PING_START_ADDR_BMSK);
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		msm_gemini_hw_write(hw_cmd_p);
-	} else if (pingpong_index == 1) {
-		hw_cmd_p = &hw_cmd_fe_pong_update[0];
-		n_reg_val = ((((p_input->num_of_mcu_rows - 1) <<
-			HWIO_JPEG_FE_BUFFER_CFG_CBCR_MCU_ROWS_SHFT) &
-			HWIO_JPEG_FE_BUFFER_CFG_CBCR_MCU_ROWS_BMSK) |
-			(((p_input->num_of_mcu_rows - 1) <<
-			HWIO_JPEG_FE_BUFFER_CFG_Y_MCU_ROWS_SHFT) &
-			HWIO_JPEG_FE_BUFFER_CFG_Y_MCU_ROWS_BMSK));
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		n_reg_val = ((p_input->y_buffer_addr <<
-			HWIO_JPEG_FE_Y_PONG_ADDR_FE_Y_PONG_START_ADDR_SHFT) &
-			HWIO_JPEG_FE_Y_PONG_ADDR_FE_Y_PONG_START_ADDR_BMSK);
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		n_reg_val = ((p_input->cbcr_buffer_addr<<
-		HWIO_JPEG_FE_CBCR_PONG_ADDR_FE_CBCR_PONG_START_ADDR_SHFT) &
-		HWIO_JPEG_FE_CBCR_PONG_ADDR_FE_CBCR_PONG_START_ADDR_BMSK);
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		msm_gemini_hw_write(hw_cmd_p);
-	} else {
-		
-	}
-
-	return;
-}
-
-struct msm_gemini_hw_cmd hw_cmd_fe_start[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_FE_CMD_ADDR,
-		HWIO_JPEG_FE_CMD_RMSK, {JPEG_OFFLINE_CMD_START} },
-};
-
-void msm_gemini_hw_fe_start(void)
-{
-	msm_gemini_hw_write(&hw_cmd_fe_start[0]);
-
-	return;
-}
-
-struct msm_gemini_hw_cmd hw_cmd_we_buffer_cfg[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_WE_Y_THRESHOLD_ADDR,
-		HWIO_JPEG_WE_Y_THRESHOLD_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_WE_Y_UB_CFG_ADDR,
-		HWIO_JPEG_WE_Y_UB_CFG_RMSK, {JPEG_WE_YUB_ENCODE} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_WE_CBCR_THRESHOLD_ADDR,
-		HWIO_JPEG_WE_CBCR_THRESHOLD_RMSK, {0} },
-};
-
-static const uint32_t GEMINI_WE_Y_THRESHOLD[2][2] = {
-	{ 0x00000190, 0x000001ff },
-	{ 0x0000016a, 0x000001ff }
-};
-
-static const uint32_t GEMINI_WE_CBCR_THRESHOLD[2][2] = {
-	{ 0x00000190, 0x000001ff },
-	{ 0x0000016a, 0x000001ff }
-};
-
-void msm_gemini_hw_we_buffer_cfg(uint8_t is_realtime)
-{
-	uint32_t              n_reg_val = 0;
-
-	struct msm_gemini_hw_cmd *hw_cmd_p = &hw_cmd_we_buffer_cfg[0];
-
-	n_reg_val = (((GEMINI_WE_Y_THRESHOLD[1][is_realtime] <<
-		HWIO_JPEG_WE_Y_THRESHOLD_WE_DEASSERT_STALL_TH_SHFT) &
-		HWIO_JPEG_WE_Y_THRESHOLD_WE_DEASSERT_STALL_TH_BMSK) |
-		((GEMINI_WE_Y_THRESHOLD[0][is_realtime] <<
-		HWIO_JPEG_WE_Y_THRESHOLD_WE_ASSERT_STALL_TH_SHFT) &
-		HWIO_JPEG_WE_Y_THRESHOLD_WE_ASSERT_STALL_TH_BMSK));
-	hw_cmd_p->data = n_reg_val;
-	msm_gemini_hw_write(hw_cmd_p++);
-
-	msm_gemini_hw_write(hw_cmd_p++);
-
-	
-	n_reg_val = (((GEMINI_WE_CBCR_THRESHOLD[1][is_realtime] <<
-		HWIO_JPEG_WE_CBCR_THRESHOLD_WE_DEASSERT_STALL_TH_SHFT) &
-		HWIO_JPEG_WE_CBCR_THRESHOLD_WE_DEASSERT_STALL_TH_BMSK) |
-		((GEMINI_WE_CBCR_THRESHOLD[0][is_realtime] <<
-		HWIO_JPEG_WE_CBCR_THRESHOLD_WE_ASSERT_STALL_TH_SHFT) &
-		HWIO_JPEG_WE_CBCR_THRESHOLD_WE_ASSERT_STALL_TH_BMSK));
-	hw_cmd_p->data = n_reg_val;
-	msm_gemini_hw_write(hw_cmd_p);
-
-	return;
-}
-
-struct msm_gemini_hw_cmd hw_cmd_we_ping_update[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_WE_Y_PING_BUFFER_CFG_ADDR,
-		HWIO_JPEG_WE_Y_PING_BUFFER_CFG_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_WE_Y_PING_ADDR_ADDR,
-		HWIO_JPEG_WE_Y_PING_ADDR_RMSK, {0} },
-};
-
-struct msm_gemini_hw_cmd hw_cmd_we_pong_update[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_ADDR,
-		HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_RMSK, {0} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_WE_Y_PONG_ADDR_ADDR,
-		HWIO_JPEG_WE_Y_PONG_ADDR_RMSK, {0} },
-};
-
-void msm_gemini_hw_we_buffer_update(struct msm_gemini_hw_buf *p_input,
-	uint8_t pingpong_index)
-{
-	uint32_t n_reg_val = 0;
-
-	struct msm_gemini_hw_cmd *hw_cmd_p;
-
-	if (pingpong_index == 0) {
-		hw_cmd_p = &hw_cmd_we_ping_update[0];
-
-		n_reg_val = ((p_input->y_len <<
-			HWIO_JPEG_WE_Y_PING_BUFFER_CFG_WE_BUFFER_LENGTH_SHFT) &
-			HWIO_JPEG_WE_Y_PING_BUFFER_CFG_WE_BUFFER_LENGTH_BMSK);
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		n_reg_val = p_input->y_buffer_addr;
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-	} else if (pingpong_index == 1) {
-		hw_cmd_p = &hw_cmd_we_pong_update[0];
-
-		n_reg_val = ((p_input->y_len <<
-			HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_WE_BUFFER_LENGTH_SHFT) &
-			HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_WE_BUFFER_LENGTH_BMSK);
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-
-		n_reg_val = p_input->y_buffer_addr;
-		hw_cmd_p->data = n_reg_val;
-		msm_gemini_hw_write(hw_cmd_p++);
-	} else {
-		
-	}
-
-	return;
-}
-
-struct msm_gemini_hw_cmd hw_cmd_reset[] = {
-	
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_IRQ_MASK_ADDR,
-		HWIO_JPEG_IRQ_MASK_RMSK, {JPEG_IRQ_DISABLE_ALL} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_IRQ_CLEAR_ADDR,
-		HWIO_JPEG_IRQ_MASK_RMSK, {JPEG_IRQ_CLEAR_ALL} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_IRQ_MASK_ADDR,
-		HWIO_JPEG_IRQ_MASK_RMSK, {JPEG_IRQ_ALLSOURCES_ENABLE} },
-	{MSM_GEMINI_HW_CMD_TYPE_WRITE, 1, HWIO_JPEG_RESET_CMD_ADDR,
-		HWIO_JPEG_RESET_CMD_RMSK, {JPEG_RESET_DEFAULT} },
-};
-
-void msm_gemini_hw_init(void *base, int size)
-{
-	gemini_region_base = base;
-	gemini_region_size = size;
-}
-
-void msm_gemini_hw_reset(void *base, int size)
-{
-	struct msm_gemini_hw_cmd *hw_cmd_p;
-
-	hw_cmd_p = &hw_cmd_reset[0];
-
-	wmb();
-	msm_gemini_hw_write(hw_cmd_p++);
-	msm_gemini_hw_write(hw_cmd_p++);
-	msm_gemini_hw_write(hw_cmd_p++);
-	msm_gemini_hw_write(hw_cmd_p);
-	wmb();
-
-	return;
-}
-
-uint32_t msm_gemini_hw_read(struct msm_gemini_hw_cmd *hw_cmd_p)
-{
-	uint32_t *paddr;
-	uint32_t data;
-
-	paddr = gemini_region_base + hw_cmd_p->offset;
-
-	data = readl(paddr);
-	data &= hw_cmd_p->mask;
-
-	GMN_DBG("%s:%d] type-%d n-%d offset-0x%4x mask-0x%8x data-0x%8x\n",
-		__func__, __LINE__, hw_cmd_p->type, hw_cmd_p->n,
-		hw_cmd_p->offset, hw_cmd_p->mask, data);
-	return data;
-}
-
-void msm_gemini_hw_write(struct msm_gemini_hw_cmd *hw_cmd_p)
-{
-	uint32_t *paddr;
-	uint32_t old_data, new_data;
-
-	
-	GMN_DBG("%s:%d] type-%d n-%d offset-0x%4x mask-0x%8x data-0x%8x\n",
-		__func__, __LINE__, hw_cmd_p->type, hw_cmd_p->n,
-		hw_cmd_p->offset, hw_cmd_p->mask, hw_cmd_p->data);
-
-	paddr = gemini_region_base + hw_cmd_p->offset;
-
-	if (hw_cmd_p->mask == 0xffffffff) {
-		old_data = 0;
-	} else {
-		old_data = readl(paddr);
-		old_data &= ~hw_cmd_p->mask;
-	}
-
-	new_data = hw_cmd_p->data & hw_cmd_p->mask;
-	new_data |= old_data;
-	writel(new_data, paddr);
-}
-
-int msm_gemini_hw_wait(struct msm_gemini_hw_cmd *hw_cmd_p, int m_us)
-{
-	int tm = hw_cmd_p->n;
-	uint32_t data;
-	uint32_t wait_data = hw_cmd_p->data & hw_cmd_p->mask;
-
-	data = msm_gemini_hw_read(hw_cmd_p);
-	if (data != wait_data) {
-		while (tm) {
-			udelay(m_us);
-			data = msm_gemini_hw_read(hw_cmd_p);
-			if (data == wait_data)
-				break;
-			tm--;
-		}
-	}
-	hw_cmd_p->data = data;
-	return tm;
-}
-
-void msm_gemini_hw_delay(struct msm_gemini_hw_cmd *hw_cmd_p, int m_us)
-{
-	int tm = hw_cmd_p->n;
-	while (tm) {
-		udelay(m_us);
-		tm--;
-	}
-}
-
-int msm_gemini_hw_exec_cmds(struct msm_gemini_hw_cmd *hw_cmd_p, int m_cmds)
-{
-	int is_copy_to_user = -1;
-	uint32_t data;
-
-	while (m_cmds--) {
-		if (hw_cmd_p->offset > gemini_region_size) {
-			GMN_PR_ERR("%s:%d] %d exceed hw region %d\n", __func__,
-				__LINE__, hw_cmd_p->offset, gemini_region_size);
-			return -EFAULT;
-		}
-
-		switch (hw_cmd_p->type) {
-		case MSM_GEMINI_HW_CMD_TYPE_READ:
-			hw_cmd_p->data = msm_gemini_hw_read(hw_cmd_p);
-			is_copy_to_user = 1;
-			break;
-
-		case MSM_GEMINI_HW_CMD_TYPE_WRITE:
-			msm_gemini_hw_write(hw_cmd_p);
-			break;
-
-		case MSM_GEMINI_HW_CMD_TYPE_WRITE_OR:
-			data = msm_gemini_hw_read(hw_cmd_p);
-			hw_cmd_p->data = (hw_cmd_p->data & hw_cmd_p->mask) |
-				data;
-			msm_gemini_hw_write(hw_cmd_p);
-			break;
-
-		case MSM_GEMINI_HW_CMD_TYPE_UWAIT:
-			msm_gemini_hw_wait(hw_cmd_p, 1);
-			break;
-
-		case MSM_GEMINI_HW_CMD_TYPE_MWAIT:
-			msm_gemini_hw_wait(hw_cmd_p, 1000);
-			break;
-
-		case MSM_GEMINI_HW_CMD_TYPE_UDELAY:
-			msm_gemini_hw_delay(hw_cmd_p, 1);
-			break;
-
-		case MSM_GEMINI_HW_CMD_TYPE_MDELAY:
-			msm_gemini_hw_delay(hw_cmd_p, 1000);
-			break;
-
-		default:
-			GMN_PR_ERR("wrong hw command type\n");
-			break;
-		}
-
-		hw_cmd_p++;
-	}
-	return is_copy_to_user;
-}
-
-void msm_gemini_hw_region_dump(int size)
-{
-	uint32_t *p;
-	uint8_t *p8;
-
-	if (size > gemini_region_size)
-		GMN_PR_ERR("%s:%d] wrong region dump size\n",
-			__func__, __LINE__);
-
-	p = (uint32_t *) gemini_region_base;
-	while (size >= 16) {
-		GMN_DBG("0x%08X] %08X %08X %08X %08X\n",
-			gemini_region_size - size,
-			readl(p), readl(p+1), readl(p+2), readl(p+3));
-		p += 4;
-		size -= 16;
-	}
-
-	if (size > 0) {
-		uint32_t d;
-		GMN_DBG("0x%08X] ", gemini_region_size - size);
-		while (size >= 4) {
-			GMN_DBG("%08X ", readl(p++));
-			size -= 4;
-		}
-
-		d = readl(p);
-		p8 = (uint8_t *) &d;
-		while (size) {
-			GMN_DBG("%02X", *p8++);
-			size--;
-		}
-
-		GMN_DBG("\n");
-	}
-}
-
diff --git a/drivers/media/video/msm/gemini/msm_gemini_hw.h b/drivers/media/video/msm/gemini/msm_gemini_hw.h
deleted file mode 100644
index d9eb90f..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_hw.h
+++ /dev/null
@@ -1,104 +0,0 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_GEMINI_HW_H
-#define MSM_GEMINI_HW_H
-
-#include <media/msm_gemini.h>
-#include "msm_gemini_hw_reg.h"
-#include <mach/msm_subsystem_map.h>
-#include <linux/ion.h>
-
-struct msm_gemini_hw_buf {
-	struct msm_gemini_buf vbuf;
-	struct file  *file;
-	uint32_t framedone_len;
-	uint32_t y_buffer_addr;
-	uint32_t y_len;
-	uint32_t cbcr_buffer_addr;
-	uint32_t cbcr_len;
-	uint32_t num_of_mcu_rows;
-	struct ion_handle *handle;
-};
-
-struct msm_gemini_hw_pingpong {
-	uint8_t is_fe; 
-	struct  msm_gemini_hw_buf buf[2];
-	int     buf_status[2];
-	int     buf_active_index;
-};
-
-int msm_gemini_hw_pingpong_update(struct msm_gemini_hw_pingpong *pingpong_hw,
-	struct msm_gemini_hw_buf *buf);
-void *msm_gemini_hw_pingpong_irq(struct msm_gemini_hw_pingpong *pingpong_hw);
-void *msm_gemini_hw_pingpong_active_buffer(struct msm_gemini_hw_pingpong
-	*pingpong_hw);
-
-void msm_gemini_hw_irq_clear(uint32_t, uint32_t);
-int msm_gemini_hw_irq_get_status(void);
-long msm_gemini_hw_encode_output_size(void);
-#define MSM_GEMINI_HW_MASK_COMP_FRAMEDONE \
-		MSM_GEMINI_HW_IRQ_STATUS_FRAMEDONE_MASK
-#define MSM_GEMINI_HW_MASK_COMP_FE \
-		MSM_GEMINI_HW_IRQ_STATUS_FE_RD_DONE_MASK
-#define MSM_GEMINI_HW_MASK_COMP_WE \
-		(MSM_GEMINI_HW_IRQ_STATUS_WE_Y_PINGPONG_MASK | \
-		 MSM_GEMINI_HW_IRQ_STATUS_WE_CBCR_PINGPONG_MASK)
-#define MSM_GEMINI_HW_MASK_COMP_RESET_ACK \
-		MSM_GEMINI_HW_IRQ_STATUS_RESET_ACK_MASK
-#define MSM_GEMINI_HW_MASK_COMP_ERR \
-		(MSM_GEMINI_HW_IRQ_STATUS_FE_RTOVF_MASK | \
-		MSM_GEMINI_HW_IRQ_STATUS_FE_VFE_OVERFLOW_MASK | \
-		MSM_GEMINI_HW_IRQ_STATUS_WE_Y_BUFFER_OVERFLOW_MASK | \
-		MSM_GEMINI_HW_IRQ_STATUS_WE_CBCR_BUFFER_OVERFLOW_MASK | \
-		MSM_GEMINI_HW_IRQ_STATUS_WE_CH0_DATAFIFO_OVERFLOW_MASK | \
-		MSM_GEMINI_HW_IRQ_STATUS_WE_CH1_DATAFIFO_OVERFLOW_MASK | \
-		MSM_GEMINI_HW_IRQ_STATUS_BUS_ERROR_MASK | \
-		MSM_GEMINI_HW_IRQ_STATUS_VIOLATION_MASK)
-
-#define msm_gemini_hw_irq_is_frame_done(gemini_irq_status) \
-	(gemini_irq_status & MSM_GEMINI_HW_MASK_COMP_FRAMEDONE)
-#define msm_gemini_hw_irq_is_fe_pingpong(gemini_irq_status) \
-	(gemini_irq_status & MSM_GEMINI_HW_MASK_COMP_FE)
-#define msm_gemini_hw_irq_is_we_pingpong(gemini_irq_status) \
-	(gemini_irq_status & MSM_GEMINI_HW_MASK_COMP_WE)
-#define msm_gemini_hw_irq_is_reset_ack(gemini_irq_status) \
-	(gemini_irq_status & MSM_GEMINI_HW_MASK_COMP_RESET_ACK)
-#define msm_gemini_hw_irq_is_err(gemini_irq_status) \
-	(gemini_irq_status & MSM_GEMINI_HW_MASK_COMP_ERR)
-
-void msm_gemini_hw_fe_buffer_update(struct msm_gemini_hw_buf *p_input,
-	uint8_t pingpong_index);
-void msm_gemini_hw_we_buffer_update(struct msm_gemini_hw_buf *p_input,
-	uint8_t pingpong_index);
-
-void msm_gemini_hw_we_buffer_cfg(uint8_t is_realtime);
-
-void msm_gemini_hw_fe_start(void);
-void msm_gemini_hw_clk_cfg(void);
-
-void msm_gemini_hw_reset(void *base, int size);
-void msm_gemini_hw_irq_cfg(void);
-void msm_gemini_hw_init(void *base, int size);
-
-uint32_t msm_gemini_hw_read(struct msm_gemini_hw_cmd *hw_cmd_p);
-void msm_gemini_hw_write(struct msm_gemini_hw_cmd *hw_cmd_p);
-int msm_gemini_hw_wait(struct msm_gemini_hw_cmd *hw_cmd_p, int m_us);
-void msm_gemini_hw_delay(struct msm_gemini_hw_cmd *hw_cmd_p, int m_us);
-int msm_gemini_hw_exec_cmds(struct msm_gemini_hw_cmd *hw_cmd_p, int m_cmds);
-void msm_gemini_hw_region_dump(int size);
-
-#define MSM_GEMINI_PIPELINE_CLK_128MHZ 128 
-#define MSM_GEMINI_PIPELINE_CLK_140MHZ 140 
-#define MSM_GEMINI_PIPELINE_CLK_200MHZ 153 
-
-#endif 
diff --git a/drivers/media/video/msm/gemini/msm_gemini_hw_reg.h b/drivers/media/video/msm/gemini/msm_gemini_hw_reg.h
deleted file mode 100644
index 231f06e..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_hw_reg.h
+++ /dev/null
@@ -1,176 +0,0 @@
-/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_GEMINI_HW_REG_H
-#define MSM_GEMINI_HW_REG_H
-
-#define GEMINI_REG_BASE 0
-
-#define MSM_GEMINI_HW_IRQ_MASK_ADDR 0x00000014
-#define MSM_GEMINI_HW_IRQ_MASK_RMSK 0xffffffff
-#define MSM_GEMINI_HW_IRQ_MASK_SHFT 0
-#define MSM_GEMINI_HW_IRQ_DISABLE 0
-#define MSM_GEMINI_HW_IRQ_ENABLE 0xffffffff
-
-#define MSM_GEMINI_HW_IRQ_CLEAR_ADDR 0x00000018
-#define MSM_GEMINI_HW_IRQ_CLEAR_RMSK 0xffffffff
-#define MSM_GEMINI_HW_IRQ_CLEAR_SHFT 0
-#define MSM_GEMINI_HW_IRQ_CLEAR  0xffffffff
-
-#define MSM_GEMINI_HW_IRQ_STATUS_FRAMEDONE_MASK 0x00000001
-#define MSM_GEMINI_HW_IRQ_STATUS_FRAMEDONE_SHIFT 0x00000000
-
-#define MSM_GEMINI_HW_IRQ_STATUS_FE_RD_DONE_MASK 0x00000002
-#define MSM_GEMINI_HW_IRQ_STATUS_FE_RD_DONE_SHIFT 0x00000001
-
-#define MSM_GEMINI_HW_IRQ_STATUS_FE_RTOVF_MASK 0x00000004
-#define MSM_GEMINI_HW_IRQ_STATUS_FE_RTOVF_SHIFT 0x00000002
-
-#define MSM_GEMINI_HW_IRQ_STATUS_FE_VFE_OVERFLOW_MASK 0x00000008
-#define MSM_GEMINI_HW_IRQ_STATUS_FE_VFE_OVERFLOW_SHIFT 0x00000003
-
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_Y_PINGPONG_MASK 0x00000010
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_Y_PINGPONG_SHIFT 0x00000004
-
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CBCR_PINGPONG_MASK 0x00000020
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CBCR_PINGPONG_SHIFT 0x00000005
-
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_Y_BUFFER_OVERFLOW_MASK 0x00000040
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_Y_BUFFER_OVERFLOW_SHIFT 0x00000006
-
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CBCR_BUFFER_OVERFLOW_MASK 0x00000080
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CBCR_BUFFER_OVERFLOW_SHIFT 0x00000007
-
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CH0_DATAFIFO_OVERFLOW_MASK 0x00000100
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CH0_DATAFIFO_OVERFLOW_SHIFT 0x00000008
-
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CH1_DATAFIFO_OVERFLOW_MASK 0x00000200
-#define MSM_GEMINI_HW_IRQ_STATUS_WE_CH1_DATAFIFO_OVERFLOW_SHIFT 0x00000009
-
-#define MSM_GEMINI_HW_IRQ_STATUS_RESET_ACK_MASK 0x00000400
-#define MSM_GEMINI_HW_IRQ_STATUS_RESET_ACK_SHIFT 0x0000000a
-
-#define MSM_GEMINI_HW_IRQ_STATUS_BUS_ERROR_MASK 0x00000800
-#define MSM_GEMINI_HW_IRQ_STATUS_BUS_ERROR_SHIFT 0x0000000b
-
-#define MSM_GEMINI_HW_IRQ_STATUS_VIOLATION_MASK 0x00001000
-#define MSM_GEMINI_HW_IRQ_STATUS_VIOLATION_SHIFT 0x0000000c
-
-#define JPEG_BUS_CMD_HALT_REQ 0x00000001
-
-#define JPEG_REALTIME_CMD_STOP_FB 0x00000000
-#define JPEG_REALTIME_CMD_STOP_IM 0x00000003
-#define JPEG_REALTIME_CMD_START 0x00000001
-
-#define JPEG_OFFLINE_CMD_START 0x00000003
-
-#define JPEG_DMI_CFG_DISABLE 0x00000000
-#define JPEG_DMI_ADDR_START 0x00000000
-
-#define JPEG_FE_CMD_BUFFERRELOAD 0x00000001
-
-#define JPEG_WE_YUB_ENCODE 0x01ff0000
-
-#define JPEG_RESET_DEFAULT 0x0004ffff 
-
-#define JPEG_IRQ_DISABLE_ALL 0x00000000
-#define JPEG_IRQ_CLEAR_ALL 0xffffffff
-#define JPEG_IRQ_ALLSOURCES_ENABLE 0xffffffff
-
-#define HWIO_JPEG_FE_BUFFER_CFG_ADDR (GEMINI_REG_BASE + 0x00000080)
-#define HWIO_JPEG_FE_BUFFER_CFG_RMSK 0x1fff1fff
-
-#define HWIO_JPEG_FE_Y_PING_ADDR_ADDR (GEMINI_REG_BASE + 0x00000084)
-#define HWIO_JPEG_FE_Y_PING_ADDR_RMSK 0xffffffff
-
-#define HWIO_JPEG_FE_Y_PONG_ADDR_ADDR (GEMINI_REG_BASE + 0x00000088)
-#define HWIO_JPEG_FE_Y_PONG_ADDR_RMSK 0xffffffff
-
-#define HWIO_JPEG_FE_CBCR_PING_ADDR_ADDR (GEMINI_REG_BASE + 0x0000008c)
-#define HWIO_JPEG_FE_CBCR_PING_ADDR_RMSK 0xffffffff
-
-#define HWIO_JPEG_FE_CBCR_PONG_ADDR_ADDR (GEMINI_REG_BASE + 0x00000090)
-#define HWIO_JPEG_FE_CBCR_PONG_ADDR_RMSK 0xffffffff
-
-#define HWIO_JPEG_FE_CMD_ADDR (GEMINI_REG_BASE + 0x00000094)
-#define HWIO_JPEG_FE_CMD_RMSK 0x3
-
-#define HWIO_JPEG_FE_BUFFER_CFG_CBCR_MCU_ROWS_BMSK 0x1fff0000
-#define HWIO_JPEG_FE_BUFFER_CFG_CBCR_MCU_ROWS_SHFT 0x10
-#define HWIO_JPEG_FE_BUFFER_CFG_Y_MCU_ROWS_BMSK 0x1fff
-#define HWIO_JPEG_FE_BUFFER_CFG_Y_MCU_ROWS_SHFT 0
-
-#define HWIO_JPEG_FE_Y_PING_ADDR_FE_Y_PING_START_ADDR_BMSK 0xffffffff
-#define HWIO_JPEG_FE_Y_PING_ADDR_FE_Y_PING_START_ADDR_SHFT 0
-
-#define HWIO_JPEG_FE_CBCR_PING_ADDR_FE_CBCR_PING_START_ADDR_BMSK 0xffffffff
-#define HWIO_JPEG_FE_CBCR_PING_ADDR_FE_CBCR_PING_START_ADDR_SHFT 0
-
-#define HWIO_JPEG_FE_Y_PONG_ADDR_FE_Y_PONG_START_ADDR_BMSK 0xffffffff
-#define HWIO_JPEG_FE_Y_PONG_ADDR_FE_Y_PONG_START_ADDR_SHFT 0
-
-#define HWIO_JPEG_FE_CBCR_PONG_ADDR_FE_CBCR_PONG_START_ADDR_BMSK 0xffffffff
-#define HWIO_JPEG_FE_CBCR_PONG_ADDR_FE_CBCR_PONG_START_ADDR_SHFT 0
-
-#define HWIO_JPEG_WE_Y_THRESHOLD_ADDR (GEMINI_REG_BASE + 0x000000c0)
-#define HWIO_JPEG_WE_Y_THRESHOLD_RMSK 0x1ff01ff
-
-#define HWIO_JPEG_WE_CBCR_THRESHOLD_ADDR (GEMINI_REG_BASE      + 0x000000c4)
-#define HWIO_JPEG_WE_CBCR_THRESHOLD_RMSK 0x1ff01ff
-
-#define HWIO_JPEG_WE_Y_UB_CFG_ADDR (GEMINI_REG_BASE + 0x000000e8)
-#define HWIO_JPEG_WE_Y_UB_CFG_RMSK 0x1ff01ff
-
-#define HWIO_JPEG_WE_Y_THRESHOLD_WE_DEASSERT_STALL_TH_BMSK 0x1ff0000
-#define HWIO_JPEG_WE_Y_THRESHOLD_WE_DEASSERT_STALL_TH_SHFT 0x10
-#define HWIO_JPEG_WE_Y_THRESHOLD_WE_ASSERT_STALL_TH_BMSK 0x1ff
-#define HWIO_JPEG_WE_Y_THRESHOLD_WE_ASSERT_STALL_TH_SHFT 0
-
-#define HWIO_JPEG_WE_CBCR_THRESHOLD_WE_DEASSERT_STALL_TH_BMSK 0x1ff0000
-#define HWIO_JPEG_WE_CBCR_THRESHOLD_WE_DEASSERT_STALL_TH_SHFT 0x10
-#define HWIO_JPEG_WE_CBCR_THRESHOLD_WE_ASSERT_STALL_TH_BMSK 0x1ff
-#define HWIO_JPEG_WE_CBCR_THRESHOLD_WE_ASSERT_STALL_TH_SHFT 0
-
-#define HWIO_JPEG_WE_Y_PING_BUFFER_CFG_ADDR (GEMINI_REG_BASE + 0x000000c8)
-#define HWIO_JPEG_WE_Y_PING_BUFFER_CFG_RMSK 0x7fffff
-
-#define HWIO_JPEG_WE_Y_PING_ADDR_ADDR (GEMINI_REG_BASE + 0x000000d8)
-#define HWIO_JPEG_WE_Y_PING_ADDR_RMSK 0xfffffff8
-
-#define HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_ADDR (GEMINI_REG_BASE + 0x000000cc)
-#define HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_RMSK 0x7fffff
-
-#define HWIO_JPEG_WE_Y_PONG_ADDR_ADDR (GEMINI_REG_BASE + 0x000000dc)
-#define HWIO_JPEG_WE_Y_PONG_ADDR_RMSK 0xfffffff8
-
-#define HWIO_JPEG_WE_Y_PING_BUFFER_CFG_WE_BUFFER_LENGTH_BMSK 0x7fffff
-#define HWIO_JPEG_WE_Y_PING_BUFFER_CFG_WE_BUFFER_LENGTH_SHFT 0
-
-#define HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_WE_BUFFER_LENGTH_BMSK 0x7fffff
-#define HWIO_JPEG_WE_Y_PONG_BUFFER_CFG_WE_BUFFER_LENGTH_SHFT 0
-
-#define HWIO_JPEG_IRQ_MASK_ADDR (GEMINI_REG_BASE + 0x00000014)
-#define HWIO_JPEG_IRQ_MASK_RMSK 0xffffffff
-
-#define HWIO_JPEG_IRQ_CLEAR_ADDR (GEMINI_REG_BASE + 0x00000018)
-#define HWIO_JPEG_IRQ_CLEAR_RMSK 0xffffffff
-
-#define HWIO_JPEG_RESET_CMD_ADDR (GEMINI_REG_BASE + 0x00000004)
-#define HWIO_JPEG_RESET_CMD_RMSK 0xe004ffff
-
-#define HWIO_JPEG_IRQ_STATUS_ADDR (GEMINI_REG_BASE + 0x0000001c)
-#define HWIO_JPEG_IRQ_STATUS_RMSK 0xffffffff
-
-#define HWIO_JPEG_STATUS_ENCODE_OUTPUT_SIZE_ADDR (GEMINI_REG_BASE + 0x00000034)
-#define HWIO_JPEG_STATUS_ENCODE_OUTPUT_SIZE_RMSK 0xffffff
-
-#endif 
diff --git a/drivers/media/video/msm/gemini/msm_gemini_platform.c b/drivers/media/video/msm/gemini/msm_gemini_platform.c
deleted file mode 100644
index 31fc5f9..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_platform.c
+++ /dev/null
@@ -1,256 +0,0 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/pm_qos.h>
-#include <linux/clk.h>
-#include <mach/clk.h>
-#include <linux/io.h>
-#include <linux/android_pmem.h>
-#include <mach/camera.h>
-#include <mach/msm_subsystem_map.h>
-
-#include "msm_gemini_platform.h"
-#include "msm_gemini_sync.h"
-#include "msm_gemini_common.h"
-#include "msm_gemini_hw.h"
-
-#define MSM_SYSTEM_BUS_RATE	160000
-struct ion_client *gemini_client;
-
-void msm_gemini_platform_p2v(struct file  *file,
-				struct ion_handle **ionhandle)
-{
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	ion_unmap_iommu(gemini_client, *ionhandle, CAMERA_DOMAIN, GEN_POOL);
-	ion_free(gemini_client, *ionhandle);
-	*ionhandle = NULL;
-#elif CONFIG_ANDROID_PMEM
-	put_pmem_file(file);
-#endif
-}
-
-uint32_t msm_gemini_platform_v2p(int fd, uint32_t len, struct file **file_p,
-				struct ion_handle **ionhandle)
-{
-	unsigned long paddr;
-	unsigned long size;
-	int rc;
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	*ionhandle = ion_import_dma_buf(gemini_client, fd);
-	if (IS_ERR_OR_NULL(*ionhandle))
-		return 0;
-
-	rc = ion_map_iommu(gemini_client, *ionhandle, CAMERA_DOMAIN, GEN_POOL,
-			SZ_4K, 0, &paddr, (unsigned long *)&size, UNCACHED, 0);
-#elif CONFIG_ANDROID_PMEM
-	unsigned long kvstart;
-	rc = get_pmem_file(fd, &paddr, &kvstart, &size, file_p);
-#else
-	rc = 0;
-	paddr = 0;
-	size = 0;
-#endif
-	if (rc < 0) {
-		GMN_PR_ERR("%s: get_pmem_file fd %d error %d\n", __func__, fd,
-			rc);
-		goto error1;
-	}
-
-	
-	if (len > size) {
-		GMN_PR_ERR("%s: invalid offset + len\n", __func__);
-		goto error1;
-	}
-
-	return paddr;
-error1:
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	ion_free(gemini_client, *ionhandle);
-#endif
-	return 0;
-}
-
-static struct msm_cam_clk_info gemini_8x_clk_info[] = {
-	{"core_clk", 228571000},
-	{"iface_clk", -1},
-};
-
-static struct msm_cam_clk_info gemini_7x_clk_info[] = {
-	{"core_clk", 153600000},
-	{"iface_clk", -1},
-};
-
-static struct msm_cam_clk_info gemini_imem_clk_info[] = {
-	{"mem_clk", -1},
-};
-
-int msm_gemini_platform_init(struct platform_device *pdev,
-	struct resource **mem,
-	void **base,
-	int *irq,
-	irqreturn_t (*handler) (int, void *),
-	void *context)
-{
-	int rc = -1;
-	int gemini_irq;
-	struct resource *gemini_mem, *gemini_io, *gemini_irq_res;
-	void *gemini_base;
-	struct msm_gemini_device *pgmn_dev =
-		(struct msm_gemini_device *) context;
-
-	gemini_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!gemini_mem) {
-		GMN_PR_ERR("%s: no mem resource?\n", __func__);
-		return -ENODEV;
-	}
-
-	gemini_irq_res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
-	if (!gemini_irq_res) {
-		GMN_PR_ERR("no irq resource?\n");
-		return -ENODEV;
-	}
-	gemini_irq = gemini_irq_res->start;
-
-	gemini_io = request_mem_region(gemini_mem->start,
-		resource_size(gemini_mem), pdev->name);
-	if (!gemini_io) {
-		GMN_PR_ERR("%s: region already claimed\n", __func__);
-		return -EBUSY;
-	}
-
-	gemini_base = ioremap(gemini_mem->start, resource_size(gemini_mem));
-	if (!gemini_base) {
-		rc = -ENOMEM;
-		GMN_PR_ERR("%s: ioremap failed\n", __func__);
-		goto fail1;
-	}
-
-	pgmn_dev->hw_version = GEMINI_8X60;
-	rc = msm_cam_clk_enable(&pgmn_dev->pdev->dev, gemini_8x_clk_info,
-	 pgmn_dev->gemini_clk, ARRAY_SIZE(gemini_8x_clk_info), 1);
-	if (rc < 0) {
-		pgmn_dev->hw_version = GEMINI_7X;
-		rc = msm_cam_clk_enable(&pgmn_dev->pdev->dev,
-			gemini_7x_clk_info, pgmn_dev->gemini_clk,
-			ARRAY_SIZE(gemini_7x_clk_info), 1);
-		if (rc < 0) {
-			GMN_PR_ERR("%s: clk failed rc = %d\n", __func__, rc);
-			goto fail2;
-		}
-	} else {
-#ifndef CONFIG_ARCH_MSM8X60
-		rc = msm_cam_clk_enable(&pgmn_dev->pdev->dev,
-				gemini_imem_clk_info, &pgmn_dev->gemini_clk[2],
-				ARRAY_SIZE(gemini_imem_clk_info), 1);
-		if (!rc)
-			pgmn_dev->hw_version = GEMINI_8960;
-#endif 
-	}
-
-	if (pgmn_dev->hw_version != GEMINI_7X) {
-		if (pgmn_dev->gemini_fs == NULL) {
-			pgmn_dev->gemini_fs =
-				regulator_get(&pgmn_dev->pdev->dev, "vdd");
-			if (IS_ERR(pgmn_dev->gemini_fs)) {
-				pr_err("%s: Regulator FS_ijpeg get failed %ld\n",
-					__func__, PTR_ERR(pgmn_dev->gemini_fs));
-				pgmn_dev->gemini_fs = NULL;
-				goto gemini_fs_failed;
-			} else if (regulator_enable(pgmn_dev->gemini_fs)) {
-				pr_err("%s: Regulator FS_ijpeg enable failed\n",
-								__func__);
-				regulator_put(pgmn_dev->gemini_fs);
-				pgmn_dev->gemini_fs = NULL;
-				goto gemini_fs_failed;
-			}
-		}
- 	}
-
-	msm_gemini_hw_init(gemini_base, resource_size(gemini_mem));
-	rc = request_irq(gemini_irq, handler, IRQF_TRIGGER_RISING, "gemini",
-		context);
-	if (rc) {
-		GMN_PR_ERR("%s: request_irq failed, %d\n", __func__,
-			gemini_irq);
-		goto fail3;
-	}
-
-	*mem  = gemini_mem;
-	*base = gemini_base;
-	*irq  = gemini_irq;
-
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	gemini_client = msm_ion_client_create(-1, "camera/gemini");
-#endif
-	GMN_DBG("%s:%d] success\n", __func__, __LINE__);
-
-	return rc;
-
-fail3:
-	if (pgmn_dev->hw_version != GEMINI_7X) {
-		regulator_disable(pgmn_dev->gemini_fs);
-		regulator_put(pgmn_dev->gemini_fs);
-		pgmn_dev->gemini_fs = NULL;
-	}
-gemini_fs_failed:
-	if (pgmn_dev->hw_version == GEMINI_8960)
-		msm_cam_clk_enable(&pgmn_dev->pdev->dev, gemini_imem_clk_info,
-		 &pgmn_dev->gemini_clk[2], ARRAY_SIZE(gemini_imem_clk_info), 0);
-	if (pgmn_dev->hw_version != GEMINI_7X)
-		msm_cam_clk_enable(&pgmn_dev->pdev->dev, gemini_8x_clk_info,
-		pgmn_dev->gemini_clk, ARRAY_SIZE(gemini_8x_clk_info), 0);
-	else
-		msm_cam_clk_enable(&pgmn_dev->pdev->dev, gemini_7x_clk_info,
-		pgmn_dev->gemini_clk, ARRAY_SIZE(gemini_7x_clk_info), 0);
-fail2:
-	iounmap(gemini_base);
-fail1:
-	release_mem_region(gemini_mem->start, resource_size(gemini_mem));
-	GMN_DBG("%s:%d] fail\n", __func__, __LINE__);
-	return rc;
-}
-
-int msm_gemini_platform_release(struct resource *mem, void *base, int irq,
-	void *context)
-{
-	int result = 0;
-	struct msm_gemini_device *pgmn_dev =
-		(struct msm_gemini_device *) context;
- 
- 	free_irq(irq, context);
-
-	if (pgmn_dev->hw_version != GEMINI_7X) {
-		regulator_disable(pgmn_dev->gemini_fs);
-		regulator_put(pgmn_dev->gemini_fs);
-		pgmn_dev->gemini_fs = NULL;
-	}
-
-	if (pgmn_dev->hw_version == GEMINI_8960)
-		msm_cam_clk_enable(&pgmn_dev->pdev->dev, gemini_imem_clk_info,
-		 &pgmn_dev->gemini_clk[2], ARRAY_SIZE(gemini_imem_clk_info), 0);
-	if (pgmn_dev->hw_version != GEMINI_7X)
-		msm_cam_clk_enable(&pgmn_dev->pdev->dev, gemini_8x_clk_info,
-		pgmn_dev->gemini_clk, ARRAY_SIZE(gemini_8x_clk_info), 0);
-	else
-		msm_cam_clk_enable(&pgmn_dev->pdev->dev, gemini_7x_clk_info,
-		pgmn_dev->gemini_clk, ARRAY_SIZE(gemini_7x_clk_info), 0);
-
-	iounmap(base);
-	release_mem_region(mem->start, resource_size(mem));
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	ion_client_destroy(gemini_client);
-#endif
-	GMN_DBG("%s:%d] success\n", __func__, __LINE__);
-	return result;
-}
-
diff --git a/drivers/media/video/msm/gemini/msm_gemini_platform.h b/drivers/media/video/msm/gemini/msm_gemini_platform.h
deleted file mode 100644
index d10ded1..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_platform.h
+++ /dev/null
@@ -1,38 +0,0 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_GEMINI_PLATFORM_H
-#define MSM_GEMINI_PLATFORM_H
-
-#include <linux/interrupt.h>
-#include <linux/platform_device.h>
-#include <linux/ion.h>
-#include <linux/iommu.h>
-
-void msm_gemini_platform_p2v(struct file  *file,
-				struct ion_handle **ionhandle);
-uint32_t msm_gemini_platform_v2p(int fd, uint32_t len, struct file **file,
-				struct ion_handle **ionhandle);
-
-int msm_gemini_platform_clk_enable(void);
-int msm_gemini_platform_clk_disable(void);
-
-int msm_gemini_platform_init(struct platform_device *pdev,
-	struct resource **mem,
-	void **base,
-	int *irq,
-	irqreturn_t (*handler) (int, void *),
-	void *context);
-int msm_gemini_platform_release(struct resource *mem, void *base, int irq,
-	void *context);
-
-#endif 
diff --git a/drivers/media/video/msm/gemini/msm_gemini_sync.c b/drivers/media/video/msm/gemini/msm_gemini_sync.c
deleted file mode 100644
index e1216cf..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_sync.c
+++ /dev/null
@@ -1,855 +0,0 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/sched.h>
-#include <linux/list.h>
-#include <linux/uaccess.h>
-#include <linux/slab.h>
-#include <media/msm_gemini.h>
-#include "msm_gemini_sync.h"
-#include "msm_gemini_core.h"
-#include "msm_gemini_platform.h"
-#include "msm_gemini_common.h"
-
-static int release_buf;
-
-inline void msm_gemini_q_init(char const *name, struct msm_gemini_q *q_p)
-{
-	GMN_DBG("%s:%d] %s\n", __func__, __LINE__, name);
-	q_p->name = name;
-	spin_lock_init(&q_p->lck);
-	INIT_LIST_HEAD(&q_p->q);
-	init_waitqueue_head(&q_p->wait);
-	q_p->unblck = 0;
-}
-
-inline void *msm_gemini_q_out(struct msm_gemini_q *q_p)
-{
-	unsigned long flags;
-	struct msm_gemini_q_entry *q_entry_p = NULL;
-	void *data = NULL;
-
-	GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-	spin_lock_irqsave(&q_p->lck, flags);
-	if (!list_empty(&q_p->q)) {
-		q_entry_p = list_first_entry(&q_p->q, struct msm_gemini_q_entry,
-			list);
-		list_del_init(&q_entry_p->list);
-	}
-	spin_unlock_irqrestore(&q_p->lck, flags);
-
-	if (q_entry_p) {
-		data = q_entry_p->data;
-		kfree(q_entry_p);
-	} else {
-		GMN_DBG("%s:%d] %s no entry\n", __func__, __LINE__,
-			q_p->name);
-	}
-
-	return data;
-}
-
-inline int msm_gemini_q_in(struct msm_gemini_q *q_p, void *data)
-{
-	unsigned long flags;
-
-	struct msm_gemini_q_entry *q_entry_p;
-
-	GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-
-	q_entry_p = kmalloc(sizeof(struct msm_gemini_q_entry), GFP_ATOMIC);
-	if (!q_entry_p) {
-		GMN_PR_ERR("%s: no mem\n", __func__);
-		return -1;
-	}
-	q_entry_p->data = data;
-
-	spin_lock_irqsave(&q_p->lck, flags);
-	list_add_tail(&q_entry_p->list, &q_p->q);
-	spin_unlock_irqrestore(&q_p->lck, flags);
-
-	return 0;
-}
-
-inline int msm_gemini_q_in_buf(struct msm_gemini_q *q_p,
-	struct msm_gemini_core_buf *buf)
-{
-	struct msm_gemini_core_buf *buf_p;
-
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-	buf_p = kmalloc(sizeof(struct msm_gemini_core_buf), GFP_ATOMIC);
-	if (!buf_p) {
-		GMN_PR_ERR("%s: no mem\n", __func__);
-		return -1;
-	}
-
-	memcpy(buf_p, buf, sizeof(struct msm_gemini_core_buf));
-
-	msm_gemini_q_in(q_p, buf_p);
-	return 0;
-}
-
-inline int msm_gemini_q_wait(struct msm_gemini_q *q_p)
-{
-	int tm = MAX_SCHEDULE_TIMEOUT; 
-	int rc;
-
-	GMN_DBG("%s:%d] %s wait\n", __func__, __LINE__, q_p->name);
-	rc = wait_event_interruptible_timeout(q_p->wait,
-		(!list_empty_careful(&q_p->q) || q_p->unblck),
-		msecs_to_jiffies(tm));
-	GMN_DBG("%s:%d] %s wait done\n", __func__, __LINE__, q_p->name);
-	if (list_empty_careful(&q_p->q)) {
-		if (rc == 0) {
-			rc = -ETIMEDOUT;
-			GMN_PR_ERR("%s:%d] %s timeout\n", __func__, __LINE__,
-				q_p->name);
-		} else if (q_p->unblck) {
-			GMN_DBG("%s:%d] %s unblock is true\n", __func__,
-				__LINE__, q_p->name);
-			q_p->unblck = 0;
-			rc = -ECANCELED;
-		} else if (rc < 0) {
-			GMN_PR_ERR("%s:%d] %s rc %d\n", __func__, __LINE__,
-				q_p->name, rc);
-		}
-	}
-	return rc;
-}
-
-inline int msm_gemini_q_wakeup(struct msm_gemini_q *q_p)
-{
-	GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-	wake_up(&q_p->wait);
-	return 0;
-}
-
-inline int msm_gemini_q_unblock(struct msm_gemini_q *q_p)
-{
-	GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-	q_p->unblck = 1;
-	wake_up(&q_p->wait);
-	return 0;
-}
-
-inline void msm_gemini_outbuf_q_cleanup(struct msm_gemini_q *q_p)
-{
-	struct msm_gemini_core_buf *buf_p;
-	GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-	do {
-		buf_p = msm_gemini_q_out(q_p);
-		if (buf_p) {
-			msm_gemini_platform_p2v(buf_p->file,
-				&buf_p->handle);
-			GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-			kfree(buf_p);
-		}
-	} while (buf_p);
-	q_p->unblck = 0;
-}
-
-inline void msm_gemini_q_cleanup(struct msm_gemini_q *q_p)
-{
-	void *data;
-	GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-	do {
-		data = msm_gemini_q_out(q_p);
-		if (data) {
-			GMN_DBG("%s:%d] %s\n", __func__, __LINE__, q_p->name);
-			kfree(data);
-		}
-	} while (data);
-	q_p->unblck = 0;
-}
-
-
-int msm_gemini_framedone_irq(struct msm_gemini_device *pgmn_dev,
-	struct msm_gemini_core_buf *buf_in)
-{
-	int rc = 0;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-
-	if (buf_in) {
-		buf_in->vbuf.framedone_len = buf_in->framedone_len;
-		buf_in->vbuf.type = MSM_GEMINI_EVT_FRAMEDONE;
-		GMN_DBG("%s:%d] 0x%08x %d framedone_len %d\n",
-			__func__, __LINE__,
-			(int) buf_in->y_buffer_addr, buf_in->y_len,
-			buf_in->vbuf.framedone_len);
-		rc = msm_gemini_q_in_buf(&pgmn_dev->evt_q, buf_in);
-	} else {
-		GMN_PR_ERR("%s:%d] no output return buffer\n",
-			__func__, __LINE__);
-		rc = -1;
-	}
-
-	if (buf_in)
-		rc = msm_gemini_q_wakeup(&pgmn_dev->evt_q);
-
-	return rc;
-}
-
-int msm_gemini_evt_get(struct msm_gemini_device *pgmn_dev,
-	void __user *to)
-{
-	struct msm_gemini_core_buf *buf_p;
-	struct msm_gemini_ctrl_cmd ctrl_cmd;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-
-	msm_gemini_q_wait(&pgmn_dev->evt_q);
-	buf_p = msm_gemini_q_out(&pgmn_dev->evt_q);
-
-	if (!buf_p) {
-		GMN_DBG("%s:%d] no buffer\n", __func__, __LINE__);
-		return -EAGAIN;
-	}
-
-	ctrl_cmd.type = buf_p->vbuf.type;
-	kfree(buf_p);
-
-	if (copy_to_user(to, &ctrl_cmd, sizeof(ctrl_cmd))) {
-		GMN_PR_ERR("%s:%d]\n", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	return 0;
-}
-
-int msm_gemini_evt_get_unblock(struct msm_gemini_device *pgmn_dev)
-{
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	msm_gemini_q_unblock(&pgmn_dev->evt_q);
-	return 0;
-}
-
-void msm_gemini_reset_ack_irq(struct msm_gemini_device *pgmn_dev)
-{
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-}
-
-void msm_gemini_err_irq(struct msm_gemini_device *pgmn_dev,
-	int event)
-{
-	int rc = 0;
-	struct msm_gemini_core_buf buf;
-
-	GMN_PR_ERR("%s:%d] error: %d\n", __func__, __LINE__, event);
-
-	buf.vbuf.type = MSM_GEMINI_EVT_ERR;
-	rc = msm_gemini_q_in_buf(&pgmn_dev->evt_q, &buf);
-	if (!rc)
-		rc = msm_gemini_q_wakeup(&pgmn_dev->evt_q);
-
-	if (!rc)
-		GMN_PR_ERR("%s:%d] err err\n", __func__, __LINE__);
-
-	return;
-}
-
-
-int msm_gemini_we_pingpong_irq(struct msm_gemini_device *pgmn_dev,
-	struct msm_gemini_core_buf *buf_in)
-{
-	int rc = 0;
-	struct msm_gemini_core_buf *buf_out;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	if (buf_in) {
-		GMN_DBG("%s:%d] 0x%08x %d\n", __func__, __LINE__,
-			(int) buf_in->y_buffer_addr, buf_in->y_len);
-		rc = msm_gemini_q_in_buf(&pgmn_dev->output_rtn_q, buf_in);
-	} else {
-		GMN_DBG("%s:%d] no output return buffer\n", __func__,
-			__LINE__);
-		rc = -1;
-	}
-
-	buf_out = msm_gemini_q_out(&pgmn_dev->output_buf_q);
-
-	if (buf_out) {
-		rc = msm_gemini_core_we_buf_update(buf_out);
-		kfree(buf_out);
-	} else {
-		if (buf_in)
-			msm_gemini_core_we_buf_reset(buf_in);
-		GMN_DBG("%s:%d] no output buffer\n", __func__, __LINE__);
-		rc = -2;
-	}
-
-	if (buf_in)
-		rc = msm_gemini_q_wakeup(&pgmn_dev->output_rtn_q);
-
-	return rc;
-}
-
-int msm_gemini_output_get(struct msm_gemini_device *pgmn_dev, void __user *to)
-{
-	struct msm_gemini_core_buf *buf_p;
-	struct msm_gemini_buf buf_cmd;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-
-	msm_gemini_q_wait(&pgmn_dev->output_rtn_q);
-	buf_p = msm_gemini_q_out(&pgmn_dev->output_rtn_q);
-
-	if (!buf_p) {
-		GMN_DBG("%s:%d] no output buffer return\n",
-			__func__, __LINE__);
-		return -EAGAIN;
-	}
-
-	buf_cmd = buf_p->vbuf;
-	msm_gemini_platform_p2v(buf_p->file, &buf_p->handle);
-	kfree(buf_p);
-
-	GMN_DBG("%s:%d] 0x%08x %d\n", __func__, __LINE__,
-		(int) buf_cmd.vaddr, buf_cmd.y_len);
-
-	if (copy_to_user(to, &buf_cmd, sizeof(buf_cmd))) {
-		GMN_PR_ERR("%s:%d]", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	return 0;
-}
-
-int msm_gemini_output_get_unblock(struct msm_gemini_device *pgmn_dev)
-{
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	msm_gemini_q_unblock(&pgmn_dev->output_rtn_q);
-	return 0;
-}
-
-int msm_gemini_output_buf_enqueue(struct msm_gemini_device *pgmn_dev,
-	void __user *arg)
-{
-	struct msm_gemini_buf buf_cmd;
-	struct msm_gemini_core_buf *buf_p;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	if (copy_from_user(&buf_cmd, arg, sizeof(struct msm_gemini_buf))) {
-		GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	buf_p = kmalloc(sizeof(struct msm_gemini_core_buf), GFP_ATOMIC);
-	if (!buf_p) {
-		GMN_PR_ERR("%s:%d] no mem\n", __func__, __LINE__);
-		return -1;
-	}
-
-	GMN_DBG("%s:%d] 0x%08x %d\n", __func__, __LINE__, (int) buf_cmd.vaddr,
-		buf_cmd.y_len);
-
-	buf_p->y_buffer_addr = msm_gemini_platform_v2p(buf_cmd.fd,
-		buf_cmd.y_len, &buf_p->file, &buf_p->handle);
-	if (!buf_p->y_buffer_addr) {
-		GMN_PR_ERR("%s:%d] v2p wrong\n", __func__, __LINE__);
-		kfree(buf_p);
-		return -1;
-	}
-	buf_p->y_len = buf_cmd.y_len;
-	buf_p->vbuf = buf_cmd;
-
-	msm_gemini_q_in(&pgmn_dev->output_buf_q, buf_p);
-	return 0;
-}
-
-
-int msm_gemini_fe_pingpong_irq(struct msm_gemini_device *pgmn_dev,
-	struct msm_gemini_core_buf *buf_in)
-{
-	struct msm_gemini_core_buf *buf_out;
-	int rc = 0;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	if (buf_in) {
-		GMN_DBG("%s:%d] 0x%08x %d\n", __func__, __LINE__,
-			(int) buf_in->y_buffer_addr, buf_in->y_len);
-		rc = msm_gemini_q_in_buf(&pgmn_dev->input_rtn_q, buf_in);
-	} else {
-		GMN_DBG("%s:%d] no input return buffer\n", __func__,
-			__LINE__);
-		rc = -1;
-	}
-
-	buf_out = msm_gemini_q_out(&pgmn_dev->input_buf_q);
-
-	if (buf_out) {
-		rc = msm_gemini_core_fe_buf_update(buf_out);
-		kfree(buf_out);
-		msm_gemini_core_fe_start();
-	} else {
-		GMN_DBG("%s:%d] no input buffer\n", __func__, __LINE__);
-		rc = -2;
-	}
-
-	if (buf_in)
-		rc = msm_gemini_q_wakeup(&pgmn_dev->input_rtn_q);
-
-	return rc;
-}
-
-int msm_gemini_input_get(struct msm_gemini_device *pgmn_dev, void __user * to)
-{
-	struct msm_gemini_core_buf *buf_p;
-	struct msm_gemini_buf buf_cmd;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	msm_gemini_q_wait(&pgmn_dev->input_rtn_q);
-	buf_p = msm_gemini_q_out(&pgmn_dev->input_rtn_q);
-
-	if (!buf_p) {
-		GMN_DBG("%s:%d] no input buffer return\n",
-			__func__, __LINE__);
-		return -EAGAIN;
-	}
-
-	buf_cmd = buf_p->vbuf;
-	if (pgmn_dev->op_mode == MSM_GEMINI_MODE_OFFLINE_ENCODE ||
-		pgmn_dev->op_mode == MSM_GEMINI_MODE_OFFLINE_ROTATION) {
-		msm_gemini_platform_p2v(buf_p->file, &buf_p->handle);
-	}
-	kfree(buf_p);
-
-	GMN_DBG("%s:%d] 0x%08x %d\n", __func__, __LINE__,
-		(int) buf_cmd.vaddr, buf_cmd.y_len);
-
-	if (copy_to_user(to, &buf_cmd, sizeof(buf_cmd))) {
-		GMN_PR_ERR("%s:%d]\n", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	return 0;
-}
-
-int msm_gemini_input_get_unblock(struct msm_gemini_device *pgmn_dev)
-{
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	msm_gemini_q_unblock(&pgmn_dev->input_rtn_q);
-	return 0;
-}
-
-int msm_gemini_input_buf_enqueue(struct msm_gemini_device *pgmn_dev,
-	void __user *arg)
-{
-	struct msm_gemini_core_buf *buf_p;
-	struct msm_gemini_buf buf_cmd;
-	int rc = 0;
-
-	if (copy_from_user(&buf_cmd, arg, sizeof(struct msm_gemini_buf))) {
-		GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	buf_p = kmalloc(sizeof(struct msm_gemini_core_buf), GFP_ATOMIC);
-	if (!buf_p) {
-		GMN_PR_ERR("%s:%d] no mem\n", __func__, __LINE__);
-		return -1;
-	}
-
-	GMN_DBG("%s:%d] 0x%08x %d\n", __func__, __LINE__,
-		(int) buf_cmd.vaddr, buf_cmd.y_len);
-
-	if (pgmn_dev->op_mode == MSM_GEMINI_MODE_REALTIME_ENCODE) {
-		rc = msm_iommu_map_contig_buffer(
-			(unsigned long)buf_cmd.y_off, CAMERA_DOMAIN, GEN_POOL,
-			((buf_cmd.y_len + buf_cmd.cbcr_len + 4095) & (~4095)),
-			SZ_4K, IOMMU_WRITE | IOMMU_READ,
-			(unsigned long *)&buf_p->y_buffer_addr);
-		if (rc < 0) {
-			pr_err("%s iommu mapping failed with error %d\n",
-				 __func__, rc);
-			kfree(buf_p);
-			return rc;
-		}
-	} else {
-	buf_p->y_buffer_addr    = msm_gemini_platform_v2p(buf_cmd.fd,
-		buf_cmd.y_len + buf_cmd.cbcr_len, &buf_p->file,
-		&buf_p->handle)	+ buf_cmd.offset;
-	}
-	buf_p->y_len          = buf_cmd.y_len;
-
-	buf_p->cbcr_buffer_addr = buf_p->y_buffer_addr + buf_cmd.y_len;
-	buf_p->cbcr_len       = buf_cmd.cbcr_len;
-
-	buf_p->num_of_mcu_rows = buf_cmd.num_of_mcu_rows;
-	GMN_DBG("%s: y_addr=%x,y_len=%x,cbcr_addr=%x,cbcr_len=%x\n", __func__,
-		buf_p->y_buffer_addr, buf_p->y_len, buf_p->cbcr_buffer_addr,
-		buf_p->cbcr_len);
-
-	if (!buf_p->y_buffer_addr || !buf_p->cbcr_buffer_addr) {
-		GMN_PR_ERR("%s:%d] v2p wrong\n", __func__, __LINE__);
-		kfree(buf_p);
-		return -1;
-	}
-	buf_p->vbuf           = buf_cmd;
-
-	msm_gemini_q_in(&pgmn_dev->input_buf_q, buf_p);
-
-	return 0;
-}
-
-int msm_gemini_irq(int event, void *context, void *data)
-{
-	struct msm_gemini_device *pgmn_dev =
-		(struct msm_gemini_device *) context;
-
-	switch (event) {
-	case MSM_GEMINI_HW_MASK_COMP_FRAMEDONE:
-		msm_gemini_framedone_irq(pgmn_dev, data);
-		msm_gemini_we_pingpong_irq(pgmn_dev, data);
-		break;
-
-	case MSM_GEMINI_HW_MASK_COMP_FE:
-		msm_gemini_fe_pingpong_irq(pgmn_dev, data);
-		break;
-
-	case MSM_GEMINI_HW_MASK_COMP_WE:
-		msm_gemini_we_pingpong_irq(pgmn_dev, data);
-		break;
-
-	case MSM_GEMINI_HW_MASK_COMP_RESET_ACK:
-		msm_gemini_reset_ack_irq(pgmn_dev);
-		break;
-
-	case MSM_GEMINI_HW_MASK_COMP_ERR:
-	default:
-		msm_gemini_err_irq(pgmn_dev, event);
-		break;
-	}
-
-	return 0;
-}
-
-int __msm_gemini_open(struct msm_gemini_device *pgmn_dev)
-{
-	int rc;
-
-	mutex_lock(&pgmn_dev->lock);
-	if (pgmn_dev->open_count) {
-		
-		GMN_PR_ERR("%s:%d] busy\n", __func__, __LINE__);
-		mutex_unlock(&pgmn_dev->lock);
-		return -EBUSY;
-	}
-	pgmn_dev->open_count++;
-	mutex_unlock(&pgmn_dev->lock);
-
-	msm_gemini_core_irq_install(msm_gemini_irq);
-	rc = msm_gemini_platform_init(pgmn_dev->pdev,
-		&pgmn_dev->mem, &pgmn_dev->base,
-		&pgmn_dev->irq, msm_gemini_core_irq, pgmn_dev);
-	if (rc) {
-		GMN_PR_ERR("%s:%d] platform_init fail %d\n", __func__,
-			__LINE__, rc);
-		return rc;
-	}
-
-	GMN_DBG("%s:%d] platform resources - mem %p, base %p, irq %d\n",
-		__func__, __LINE__,
-		pgmn_dev->mem, pgmn_dev->base, pgmn_dev->irq);
-
-	msm_gemini_q_cleanup(&pgmn_dev->evt_q);
-	msm_gemini_q_cleanup(&pgmn_dev->output_rtn_q);
-	msm_gemini_outbuf_q_cleanup(&pgmn_dev->output_buf_q);
-	msm_gemini_q_cleanup(&pgmn_dev->input_rtn_q);
-	msm_gemini_q_cleanup(&pgmn_dev->input_buf_q);
-	msm_gemini_core_init();
-
-	GMN_DBG("%s:%d] success\n", __func__, __LINE__);
-	return rc;
-}
-
-int __msm_gemini_release(struct msm_gemini_device *pgmn_dev)
-{
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	mutex_lock(&pgmn_dev->lock);
-	if (!pgmn_dev->open_count) {
-		GMN_PR_ERR(KERN_ERR "%s: not opened\n", __func__);
-		mutex_unlock(&pgmn_dev->lock);
-		return -EINVAL;
-	}
-	pgmn_dev->open_count--;
-	mutex_unlock(&pgmn_dev->lock);
-
-	msm_gemini_core_release(release_buf);
-	msm_gemini_q_cleanup(&pgmn_dev->evt_q);
-	msm_gemini_q_cleanup(&pgmn_dev->output_rtn_q);
-	msm_gemini_outbuf_q_cleanup(&pgmn_dev->output_buf_q);
-	msm_gemini_q_cleanup(&pgmn_dev->input_rtn_q);
-	msm_gemini_outbuf_q_cleanup(&pgmn_dev->input_buf_q);
-
-	if (pgmn_dev->open_count)
-		GMN_PR_ERR(KERN_ERR "%s: multiple opens\n", __func__);
-
-	msm_gemini_platform_release(pgmn_dev->mem, pgmn_dev->base,
-		pgmn_dev->irq, pgmn_dev);
-
-	return 0;
-}
-
-int msm_gemini_ioctl_hw_cmd(struct msm_gemini_device *pgmn_dev,
-	void * __user arg)
-{
-	struct msm_gemini_hw_cmd hw_cmd;
-	int is_copy_to_user;
-
-	if (copy_from_user(&hw_cmd, arg, sizeof(struct msm_gemini_hw_cmd))) {
-		GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	is_copy_to_user = msm_gemini_hw_exec_cmds(&hw_cmd, 1);
-	GMN_DBG("%s:%d] type %d, n %d, offset %d, mask %x, data %x, pdata %x\n",
-		__func__, __LINE__, hw_cmd.type, hw_cmd.n, hw_cmd.offset,
-		hw_cmd.mask, hw_cmd.data, (int) hw_cmd.pdata);
-
-	if (is_copy_to_user >= 0) {
-		if (copy_to_user(arg, &hw_cmd, sizeof(hw_cmd))) {
-			GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-			return -EFAULT;
-		}
-	}
-
-	return 0;
-}
-
-int msm_gemini_ioctl_hw_cmds(struct msm_gemini_device *pgmn_dev,
-	void * __user arg)
-{
-	int is_copy_to_user;
-	int len;
-	uint32_t m;
-	struct msm_gemini_hw_cmds *hw_cmds_p;
-	struct msm_gemini_hw_cmd *hw_cmd_p;
-
-	if (copy_from_user(&m, arg, sizeof(m))) {
-		GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	len = sizeof(struct msm_gemini_hw_cmds) +
-		sizeof(struct msm_gemini_hw_cmd) * (m - 1);
-	hw_cmds_p = kmalloc(len, GFP_KERNEL);
-	if (!hw_cmds_p) {
-		GMN_PR_ERR("%s:%d] no mem %d\n", __func__, __LINE__, len);
-		return -EFAULT;
-	}
-
-	if (copy_from_user(hw_cmds_p, arg, len)) {
-		GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-		kfree(hw_cmds_p);
-		return -EFAULT;
-	}
-
-	hw_cmd_p = (struct msm_gemini_hw_cmd *) &(hw_cmds_p->hw_cmd);
-
-	is_copy_to_user = msm_gemini_hw_exec_cmds(hw_cmd_p, m);
-
-	if (is_copy_to_user >= 0) {
-		if (copy_to_user(arg, hw_cmds_p, len)) {
-			GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-			kfree(hw_cmds_p);
-			return -EFAULT;
-		}
-	}
-	kfree(hw_cmds_p);
-	return 0;
-}
-
-int msm_gemini_start(struct msm_gemini_device *pgmn_dev, void * __user arg)
-{
-	struct msm_gemini_core_buf *buf_out;
-	struct msm_gemini_core_buf *buf_out_free[2] = {NULL, NULL};
-	int i, rc;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-
-	release_buf = 1;
-	for (i = 0; i < 2; i++) {
-		buf_out = msm_gemini_q_out(&pgmn_dev->input_buf_q);
-
-		if (buf_out) {
-			msm_gemini_core_fe_buf_update(buf_out);
-			kfree(buf_out);
-		} else {
-			GMN_DBG("%s:%d] no input buffer\n", __func__, __LINE__);
-			break;
-		}
-	}
-
-	for (i = 0; i < 2; i++) {
-		buf_out_free[i] = msm_gemini_q_out(&pgmn_dev->output_buf_q);
-
-		if (buf_out_free[i]) {
-			msm_gemini_core_we_buf_update(buf_out_free[i]);
-		} else if (i == 1) {
-			
-			buf_out_free[0]->y_len >>= 1;
-			buf_out_free[0]->y_buffer_addr +=
-				buf_out_free[0]->y_len;
-			msm_gemini_core_we_buf_update(buf_out_free[0]);
-			
-			release_buf = 0;
-		} else {
-			GMN_DBG("%s:%d] no output buffer\n",
-			__func__, __LINE__);
-			break;
-		}
-	}
-
-	for (i = 0; i < 2; i++)
-		kfree(buf_out_free[i]);
-
-	rc = msm_gemini_ioctl_hw_cmds(pgmn_dev, arg);
-	GMN_DBG("%s:%d]\n", __func__, __LINE__);
-	return rc;
-}
-
-int msm_gemini_ioctl_reset(struct msm_gemini_device *pgmn_dev,
-	void * __user arg)
-{
-	int rc;
-	struct msm_gemini_ctrl_cmd ctrl_cmd;
-
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	if (copy_from_user(&ctrl_cmd, arg, sizeof(ctrl_cmd))) {
-		GMN_PR_ERR("%s:%d] failed\n", __func__, __LINE__);
-		return -EFAULT;
-	}
-
-	pgmn_dev->op_mode = ctrl_cmd.type;
-
-	rc = msm_gemini_core_reset(pgmn_dev->op_mode, pgmn_dev->base,
-		resource_size(pgmn_dev->mem));
-	return rc;
-}
-
-int msm_gemini_ioctl_test_dump_region(struct msm_gemini_device *pgmn_dev,
-	unsigned long arg)
-{
-	GMN_DBG("%s:%d] Enter\n", __func__, __LINE__);
-	msm_gemini_hw_region_dump(arg);
-	return 0;
-}
-
-long __msm_gemini_ioctl(struct msm_gemini_device *pgmn_dev,
-	unsigned int cmd, unsigned long arg)
-{
-	int rc = 0;
-	switch (cmd) {
-	case MSM_GMN_IOCTL_GET_HW_VERSION:
-		GMN_DBG("%s:%d] VERSION 1\n", __func__, __LINE__);
-		rc = msm_gemini_ioctl_hw_cmd(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_RESET:
-		rc = msm_gemini_ioctl_reset(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_STOP:
-		rc = msm_gemini_ioctl_hw_cmds(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_START:
-		rc = msm_gemini_start(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_INPUT_BUF_ENQUEUE:
-		rc = msm_gemini_input_buf_enqueue(pgmn_dev,
-			(void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_INPUT_GET:
-		rc = msm_gemini_input_get(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_INPUT_GET_UNBLOCK:
-		rc = msm_gemini_input_get_unblock(pgmn_dev);
-		break;
-
-	case MSM_GMN_IOCTL_OUTPUT_BUF_ENQUEUE:
-		rc = msm_gemini_output_buf_enqueue(pgmn_dev,
-			(void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_OUTPUT_GET:
-		rc = msm_gemini_output_get(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_OUTPUT_GET_UNBLOCK:
-		rc = msm_gemini_output_get_unblock(pgmn_dev);
-		break;
-
-	case MSM_GMN_IOCTL_EVT_GET:
-		rc = msm_gemini_evt_get(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_EVT_GET_UNBLOCK:
-		rc = msm_gemini_evt_get_unblock(pgmn_dev);
-		break;
-
-	case MSM_GMN_IOCTL_HW_CMD:
-		rc = msm_gemini_ioctl_hw_cmd(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_HW_CMDS:
-		rc = msm_gemini_ioctl_hw_cmds(pgmn_dev, (void __user *) arg);
-		break;
-
-	case MSM_GMN_IOCTL_TEST_DUMP_REGION:
-		rc = msm_gemini_ioctl_test_dump_region(pgmn_dev, arg);
-		break;
-
-	default:
-		GMN_PR_ERR(KERN_INFO "%s:%d] cmd = %d not supported\n",
-			__func__, __LINE__, _IOC_NR(cmd));
-		rc = -EINVAL;
-		break;
-	}
-	return rc;
-}
-
-struct msm_gemini_device *__msm_gemini_init(struct platform_device *pdev)
-{
-	struct msm_gemini_device *pgmn_dev;
-
-	pgmn_dev = kzalloc(sizeof(struct msm_gemini_device), GFP_ATOMIC);
-	if (!pgmn_dev) {
-		GMN_PR_ERR("%s:%d]no mem\n", __func__, __LINE__);
-		return NULL;
-	}
-
-	mutex_init(&pgmn_dev->lock);
-
-	pgmn_dev->pdev = pdev;
-
-	msm_gemini_q_init("evt_q", &pgmn_dev->evt_q);
-	msm_gemini_q_init("output_rtn_q", &pgmn_dev->output_rtn_q);
-	msm_gemini_q_init("output_buf_q", &pgmn_dev->output_buf_q);
-	msm_gemini_q_init("input_rtn_q", &pgmn_dev->input_rtn_q);
-	msm_gemini_q_init("input_buf_q", &pgmn_dev->input_buf_q);
-
-	return pgmn_dev;
-}
-
-int __msm_gemini_exit(struct msm_gemini_device *pgmn_dev)
-{
-	mutex_destroy(&pgmn_dev->lock);
-	kfree(pgmn_dev);
-	return 0;
-}
-
diff --git a/drivers/media/video/msm/gemini/msm_gemini_sync.h b/drivers/media/video/msm/gemini/msm_gemini_sync.h
deleted file mode 100644
index a8d93c5..0000000
--- a/drivers/media/video/msm/gemini/msm_gemini_sync.h
+++ /dev/null
@@ -1,78 +0,0 @@
-/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_GEMINI_SYNC_H
-#define MSM_GEMINI_SYNC_H
-
-#include <linux/fs.h>
-#include <linux/list.h>
-#include <linux/cdev.h>
-#include <linux/platform_device.h>
-#include <media/v4l2-device.h>
-#include <media/v4l2-subdev.h>
-#include "msm_gemini_core.h"
-
-#define GEMINI_7X 0x1
-#define GEMINI_8X60 (0x1 << 1)
-#define GEMINI_8960 (0x1 << 2)
-
-struct msm_gemini_q {
-	char const	*name;
-	struct list_head  q;
-	spinlock_t	lck;
-	wait_queue_head_t wait;
-	int	       unblck;
-};
-
-struct msm_gemini_q_entry {
-	struct list_head list;
-	void   *data;
-};
-
-struct msm_gemini_device {
-	struct platform_device *pdev;
-	struct resource        *mem;
-	int                     irq;
-	void                   *base;
-	struct clk *gemini_clk[3];
-	struct regulator *gemini_fs;
-	uint32_t hw_version;
-
-	struct device *device;
-	struct cdev   cdev;
-	struct mutex  lock;
-	char	  open_count;
-	uint8_t       op_mode;
-
-	struct msm_gemini_q evt_q;
-
-	struct msm_gemini_q output_rtn_q;
-
-	struct msm_gemini_q output_buf_q;
-
-	struct msm_gemini_q input_rtn_q;
-
-	struct msm_gemini_q input_buf_q;
-
-	struct v4l2_subdev subdev;
-};
-
-int __msm_gemini_open(struct msm_gemini_device *pgmn_dev);
-int __msm_gemini_release(struct msm_gemini_device *pgmn_dev);
-
-long __msm_gemini_ioctl(struct msm_gemini_device *pgmn_dev,
-	unsigned int cmd, unsigned long arg);
-
-struct msm_gemini_device *__msm_gemini_init(struct platform_device *pdev);
-int __msm_gemini_exit(struct msm_gemini_device *pgmn_dev);
-
-#endif 
diff --git a/drivers/media/video/msm/io/Makefile b/drivers/media/video/msm/io/Makefile
deleted file mode 100644
index c567be2..0000000
--- a/drivers/media/video/msm/io/Makefile
+++ /dev/null
@@ -1,4 +0,0 @@
-GCC_VERSION      := $(shell $(CONFIG_SHELL) $(PWD)/scripts/gcc-version.sh $(CROSS_COMPILE)gcc)
-EXTRA_CFLAGS += -Idrivers/media/video/msm
-obj-$(CONFIG_MSM_CAMERA) += msm_camera_i2c.o msm_camera_eeprom.o msm_camera_i2c_mux.o
-obj-$(CONFIG_MSM_CAMERA) += msm_io_util.o
diff --git a/drivers/media/video/msm/io/msm_camera_eeprom.c b/drivers/media/video/msm/io/msm_camera_eeprom.c
deleted file mode 100644
index 34dba26..0000000
--- a/drivers/media/video/msm/io/msm_camera_eeprom.c
+++ /dev/null
@@ -1,96 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include "msm_camera_eeprom.h"
-
-int32_t msm_camera_eeprom_init(struct msm_camera_eeprom_client *ectrl,
-	struct i2c_adapter *adapter)
-{
-	CDBG("%s: open", __func__);
-	ectrl->i2c_client->client =
-		i2c_new_dummy(adapter, ectrl->i2c_addr >> 1);
-	if (ectrl->i2c_client->client == NULL) {
-		CDBG("%s: eeprom i2c get client failed\n", __func__);
-		return -EFAULT;
-	}
-	ectrl->i2c_client->client->addr = ectrl->i2c_addr;
-	CDBG("%s: done", __func__);
-	return 0;
-}
-
-int32_t msm_camera_eeprom_release(struct msm_camera_eeprom_client *ectrl)
-{
-	if (ectrl->i2c_client->client != NULL) {
-		i2c_unregister_device(ectrl->i2c_client->client);
-		ectrl->i2c_client->client = NULL;
-	}
-	return 0;
-}
-
-int32_t msm_camera_eeprom_read(struct msm_camera_eeprom_client *ectrl,
-	uint16_t reg_addr, void *data, uint32_t num_byte,
-	uint16_t convert_endian)
-{
-	int rc = 0;
-	if (ectrl->func_tbl.eeprom_set_dev_addr != NULL)
-		ectrl->func_tbl.eeprom_set_dev_addr(ectrl, &reg_addr);
-
-	if (!convert_endian) {
-		rc = msm_camera_i2c_read_seq(
-			ectrl->i2c_client, reg_addr, data, num_byte);
-	} else {
-		unsigned char buf[num_byte];
-		uint8_t *data_ptr = (uint8_t *) data;
-		int i;
-		rc = msm_camera_i2c_read_seq(
-			ectrl->i2c_client, reg_addr, buf, num_byte);
-		for (i = 0; i < num_byte; i++)
-			data_ptr[i] = buf[num_byte-i-1];
-	}
-	return rc;
-}
-
-int32_t msm_camera_eeprom_read_tbl(struct msm_camera_eeprom_client *ectrl,
-	struct msm_camera_eeprom_read_t *read_tbl, uint16_t tbl_size)
-{
-	int i, rc = 0;
-	CDBG("%s: open", __func__);
-	if (read_tbl == NULL)
-		return rc;
-
-	for (i = 0; i < tbl_size; i++) {
-		rc = msm_camera_eeprom_read
-			(ectrl, read_tbl[i].reg_addr,
-			read_tbl[i].dest_ptr, read_tbl[i].num_byte,
-			read_tbl[i].convert_endian);
-		if (rc < 0)	{
-			CDBG("%s: read failed\n", __func__);
-			return rc;
-		}
-	}
-	CDBG("%s: done", __func__);
-	return rc;
-}
-
-int32_t msm_camera_eeprom_get_data(struct msm_camera_eeprom_client *ectrl,
-	struct sensor_eeprom_data_t *edata)
-{
-	int rc = 0;
-	if (edata->index >= ectrl->data_tbl_size)
-		return -EFAULT;
-	if (copy_to_user(edata->eeprom_data,
-		ectrl->data_tbl[edata->index].data,
-		ectrl->data_tbl[edata->index].size))
-		rc = -EFAULT;
-	return rc;
-}
-
diff --git a/drivers/media/video/msm/io/msm_camera_eeprom.h b/drivers/media/video/msm/io/msm_camera_eeprom.h
deleted file mode 100644
index 9dd7b54..0000000
--- a/drivers/media/video/msm/io/msm_camera_eeprom.h
+++ /dev/null
@@ -1,66 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/delay.h>
-#include <mach/camera.h>
-#include "msm_camera_i2c.h"
-
-struct msm_camera_eeprom_client;
-
-struct msm_camera_eeprom_fn_t {
-	int32_t (*eeprom_init)
-		(struct msm_camera_eeprom_client *ectrl,
-		struct i2c_adapter *adapter);
-	int32_t (*eeprom_release)
-		(struct msm_camera_eeprom_client *ectrl);
-	int32_t (*eeprom_get_data)
-		(struct msm_camera_eeprom_client *ectrl,
-		 struct sensor_eeprom_data_t *edata);
-	void (*eeprom_set_dev_addr)
-		(struct msm_camera_eeprom_client*, uint16_t*);
-};
-
-struct msm_camera_eeprom_read_t {
-	uint16_t reg_addr;
-	void *dest_ptr;
-	uint32_t num_byte;
-	uint16_t convert_endian;
-};
-
-struct msm_camera_eeprom_data_t {
-	void *data;
-	uint16_t size;
-};
-
-struct msm_camera_eeprom_client {
-	struct msm_camera_i2c_client *i2c_client;
-	uint16_t i2c_addr;
-	struct msm_camera_eeprom_fn_t func_tbl;
-	struct msm_camera_eeprom_read_t *read_tbl;
-	uint16_t read_tbl_size;
-	struct msm_camera_eeprom_data_t *data_tbl;
-	uint16_t data_tbl_size;
-};
-
-int32_t msm_camera_eeprom_init(struct msm_camera_eeprom_client *ectrl,
-	struct i2c_adapter *adapter);
-int32_t msm_camera_eeprom_release(struct msm_camera_eeprom_client *ectrl);
-int32_t msm_camera_eeprom_read(struct msm_camera_eeprom_client *ectrl,
-	uint16_t reg_addr, void *data, uint32_t num_byte,
-	uint16_t convert_endian);
-int32_t msm_camera_eeprom_read_tbl(struct msm_camera_eeprom_client *ectrl,
-	struct msm_camera_eeprom_read_t *read_tbl, uint16_t tbl_size);
-int32_t msm_camera_eeprom_get_data(struct msm_camera_eeprom_client *ectrl,
-	struct sensor_eeprom_data_t *edata);
-
-
-
diff --git a/drivers/media/video/msm/io/msm_camera_i2c.c b/drivers/media/video/msm/io/msm_camera_i2c.c
deleted file mode 100644
index a28e0dd..0000000
--- a/drivers/media/video/msm/io/msm_camera_i2c.c
+++ /dev/null
@@ -1,630 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include "msm_camera_i2c.h"
-
-#if defined(CONFIG_MACH_MONARUDO) || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DELUXE_R) || defined(CONFIG_MACH_DUMMY)\
-			|| defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DUMMY)
-
-#define MAX_I2C_RETRIES 20
-
-static int i2c_transfer_retry(struct i2c_adapter *adap,
-			struct i2c_msg *msgs,
-			int len)
-{
-	int i2c_retry = 0;
-	int ns; 
-
-	while (i2c_retry++ < MAX_I2C_RETRIES) {
-		ns = i2c_transfer(adap, msgs, len);
-		if (ns == len)
-			break;
-		pr_err("[CAM]%s: try %d/%d: i2c_transfer sent: %d, len %d\n",
-			__func__,
-			i2c_retry, MAX_I2C_RETRIES, ns, len);
-		msleep(10);
-	}
-
-	return ns == len ? 0 : -EIO;
-}
-#endif
-
-int32_t msm_camera_i2c_rxdata(struct msm_camera_i2c_client *dev_client,
-	unsigned char *rxdata, int data_length)
-{
-	int32_t rc = 0;
-	uint16_t saddr = dev_client->client->addr >> 1;
-	struct i2c_msg msgs[] = {
-		{
-			.addr  = saddr,
-			.flags = 0,
-			.len   = dev_client->addr_type,
-			.buf   = rxdata,
-		},
-		{
-			.addr  = saddr,
-			.flags = I2C_M_RD,
-			.len   = data_length,
-			.buf   = rxdata,
-		},
-	};
-#if defined(CONFIG_MACH_MONARUDO) || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DELUXE_R) || defined(CONFIG_MACH_DUMMY)\
-		|| defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DUMMY)
-	rc = i2c_transfer_retry(dev_client->client->adapter, msgs, 2);
-#else
-	rc = i2c_transfer(dev_client->client->adapter, msgs, 2);
-#endif
-	if (rc < 0)
-		S_I2C_DBG("msm_camera_i2c_rxdata failed 0x%x\n", saddr);
-	return rc;
-}
-
-int32_t msm_camera_i2c_txdata(struct msm_camera_i2c_client *dev_client,
-				unsigned char *txdata, int length)
-{
-	int32_t rc = 0;
-	uint16_t saddr = dev_client->client->addr >> 1;
-	struct i2c_msg msg[] = {
-		{
-			.addr = saddr,
-			.flags = 0,
-			.len = length,
-			.buf = txdata,
-		 },
-	};
-#if defined(CONFIG_MACH_MONARUDO) || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DELUXE_R) || defined(CONFIG_MACH_DUMMY)\
-			|| defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DUMMY)
-	rc = i2c_transfer_retry(dev_client->client->adapter, msg, 1);
-#else
-	rc = i2c_transfer(dev_client->client->adapter, msg, 1);
-#endif
-
-	if (rc < 0)
-		S_I2C_DBG("msm_camera_i2c_txdata faild 0x%x\n", saddr);
-	return 0;
-}
-
-int32_t msm_camera_i2c_write_b(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data )
-{
-	int32_t rc = -EFAULT;
-	uint8_t len = 0;
-	enum msm_camera_i2c_data_type data_type = MSM_CAMERA_I2C_BYTE_DATA;
-	unsigned char buf[client->addr_type+data_type];
-	client->addr_type = MSM_CAMERA_I2C_WORD_ADDR;
-	S_I2C_DBG("%s reg addr = 0x%x data type: %d\n",
-			  __func__, addr, data_type);
-	if (client->addr_type == MSM_CAMERA_I2C_BYTE_ADDR) {
-		buf[0] = addr;
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len, buf[len]);
-		len = 1;
-	} else if (client->addr_type == MSM_CAMERA_I2C_WORD_ADDR) {
-		buf[0] = addr >> BITS_PER_BYTE;
-		buf[1] = addr;
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len, buf[len]);
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len+1, buf[len+1]);
-		len = 2;
-	}
-	S_I2C_DBG("Data: 0x%x\n", data);
-	if (data_type == MSM_CAMERA_I2C_BYTE_DATA) {
-		buf[len] = data;
-		S_I2C_DBG("Byte %d: 0x%x\n", len, buf[len]);
-		len += 1;
-	} else if (data_type == MSM_CAMERA_I2C_WORD_DATA) {
-		buf[len] = data >> BITS_PER_BYTE;
-		buf[len+1] = data;
-		S_I2C_DBG("Byte %d: 0x%x\n", len, buf[len]);
-		S_I2C_DBG("Byte %d: 0x%x\n", len+1, buf[len+1]);
-		len += 2;
-	}
-
-	rc = msm_camera_i2c_txdata(client, buf, len);
-	if (rc < 0)
-		S_I2C_DBG("%s fail\n", __func__);
-	return rc;
-}
-
-int32_t msm_camera_i2c_write(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data,
-	enum msm_camera_i2c_data_type data_type)
-{
-	int32_t rc = -EFAULT;
-	unsigned char buf[client->addr_type+data_type];
-	uint8_t len = 0;
-	if ((client->addr_type != MSM_CAMERA_I2C_BYTE_ADDR
-		&& client->addr_type != MSM_CAMERA_I2C_WORD_ADDR)
-		|| (data_type != MSM_CAMERA_I2C_BYTE_DATA
-		&& data_type != MSM_CAMERA_I2C_WORD_DATA))
-		return rc;
-
-	S_I2C_DBG("%s reg addr = 0x%x data type: %d\n",
-			  __func__, addr, data_type);
-	if (client->addr_type == MSM_CAMERA_I2C_BYTE_ADDR) {
-		buf[0] = addr;
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len, buf[len]);
-		len = 1;
-	} else if (client->addr_type == MSM_CAMERA_I2C_WORD_ADDR) {
-		buf[0] = addr >> BITS_PER_BYTE;
-		buf[1] = addr;
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len, buf[len]);
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len+1, buf[len+1]);
-		len = 2;
-	}
-	S_I2C_DBG("Data: 0x%x\n", data);
-	if (data_type == MSM_CAMERA_I2C_BYTE_DATA) {
-		buf[len] = data;
-		S_I2C_DBG("Byte %d: 0x%x\n", len, buf[len]);
-		len += 1;
-	} else if (data_type == MSM_CAMERA_I2C_WORD_DATA) {
-		buf[len] = data >> BITS_PER_BYTE;
-		buf[len+1] = data;
-		S_I2C_DBG("Byte %d: 0x%x\n", len, buf[len]);
-		S_I2C_DBG("Byte %d: 0x%x\n", len+1, buf[len+1]);
-		len += 2;
-	}
-
- if (addr==0xffff) {
-  msleep(data);
-  return 0;
- }
-  
-	rc = msm_camera_i2c_txdata(client, buf, len);
-	if (rc < 0)
-		S_I2C_DBG("%s fail\n", __func__);
-	return rc;
-}
-
-int32_t msm_camera_i2c_write_seq(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint8_t *data, uint16_t num_byte)
-{
-	int32_t rc = -EFAULT;
-	unsigned char buf[client->addr_type+num_byte];
-	uint8_t len = 0, i = 0;
-
-	if ((client->addr_type != MSM_CAMERA_I2C_BYTE_ADDR
-		&& client->addr_type != MSM_CAMERA_I2C_WORD_ADDR)
-		|| num_byte == 0)
-		return rc;
-
-	S_I2C_DBG("%s reg addr = 0x%x num bytes: %d\n",
-			  __func__, addr, num_byte);
-	if (client->addr_type == MSM_CAMERA_I2C_BYTE_ADDR) {
-		buf[0] = addr;
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len, buf[len]);
-		len = 1;
-	} else if (client->addr_type == MSM_CAMERA_I2C_WORD_ADDR) {
-		buf[0] = addr >> BITS_PER_BYTE;
-		buf[1] = addr;
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len, buf[len]);
-		S_I2C_DBG("%s byte %d: 0x%x\n", __func__, len+1, buf[len+1]);
-		len = 2;
-	}
-	for (i = 0; i < num_byte; i++) {
-		buf[i+len] = data[i];
-		S_I2C_DBG("Byte %d: 0x%x\n", i+len, buf[i+len]);
-		S_I2C_DBG("Data: 0x%x\n", data[i]);
-	}
-
-	rc = msm_camera_i2c_txdata(client, buf, len+num_byte);
-	if (rc < 0)
-		S_I2C_DBG("%s fail\n", __func__);
-	return rc;
-}
-
-int32_t msm_camera_i2c_set_mask(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t mask,
-	enum msm_camera_i2c_data_type data_type, uint16_t set_mask)
-{
-	int32_t rc;
-	uint16_t reg_data;
-
-	rc = msm_camera_i2c_read(client, addr, &reg_data, data_type);
-	if (rc < 0) {
-		S_I2C_DBG("%s read fail\n", __func__);
-		return rc;
-	}
-	S_I2C_DBG("%s addr: 0x%x data: 0x%x setmask: 0x%x\n",
-			__func__, addr, reg_data, mask);
-
-	if (set_mask)
-		reg_data |= mask;
-	else
-		reg_data &= ~mask;
-	S_I2C_DBG("%s write: 0x%x\n", __func__, reg_data);
-
-	rc = msm_camera_i2c_write(client, addr, reg_data, data_type);
-	if (rc < 0)
-		S_I2C_DBG("%s write fail\n", __func__);
-
-	return rc;
-}
-
-int32_t msm_camera_i2c_set_write_mask_data(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data, int16_t mask,
-	enum msm_camera_i2c_data_type data_type)
-{
-	int32_t rc;
-	uint16_t reg_data;
-	CDBG("%s\n", __func__);
-	if (mask == -1)
-		return 0;
-	if (mask == 0)
-		rc = msm_camera_i2c_write(client, addr, data, data_type);
-	else{
-		rc = msm_camera_i2c_read(client, addr, &reg_data, data_type);
-		if (rc < 0) {
-			CDBG("%s read fail\n", __func__);
-			return rc;
-		}
-		reg_data  = reg_data & mask;
-		reg_data  = (reg_data | (data & (~mask)));
-		rc = msm_camera_i2c_write(client, addr, reg_data, data_type);
-		if (rc < 0)
-			CDBG("%s write fail\n", __func__);
-	}
-	return rc;
-}
-
-
-int32_t msm_camera_i2c_compare(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data,
-	enum msm_camera_i2c_data_type data_type)
-{
-	int32_t rc = -EIO;
-	uint16_t reg_data = 0;
-	int data_len = 0;
-	switch (data_type) {
-	case MSM_CAMERA_I2C_BYTE_DATA:
-	case MSM_CAMERA_I2C_WORD_DATA:
-		data_len = data_type;
-		break;
-	case MSM_CAMERA_I2C_SET_BYTE_MASK:
-	case MSM_CAMERA_I2C_UNSET_BYTE_MASK:
-		data_len = MSM_CAMERA_I2C_BYTE_DATA;
-		break;
-	case MSM_CAMERA_I2C_SET_WORD_MASK:
-	case MSM_CAMERA_I2C_UNSET_WORD_MASK:
-		data_len = MSM_CAMERA_I2C_WORD_DATA;
-		break;
-	default:
-		pr_err("%s: Unsupport data type: %d\n", __func__, data_type);
-		break;
-	}
-
-	rc = msm_camera_i2c_read(client,
-		addr, &reg_data, data_len);
-	if (rc < 0)
-		return rc;
-
-	rc = 0;
-	switch (data_type) {
-	case MSM_CAMERA_I2C_BYTE_DATA:
-	case MSM_CAMERA_I2C_WORD_DATA:
-		if (data == reg_data)
-			return rc;
-		break;
-	case MSM_CAMERA_I2C_SET_BYTE_MASK:
-	case MSM_CAMERA_I2C_SET_WORD_MASK:
-		if ((reg_data & data) == data)
-			return rc;
-		break;
-	case MSM_CAMERA_I2C_UNSET_BYTE_MASK:
-	case MSM_CAMERA_I2C_UNSET_WORD_MASK:
-		if (!(reg_data & data))
-			return rc;
-		break;
-	default:
-		pr_err("%s: Unsupport data type: %d\n", __func__, data_type);
-		break;
-	}
-
-	S_I2C_DBG("%s: Register and data does not match\n", __func__);
-	rc = 1;
-	return rc;
-}
-
-int32_t msm_camera_i2c_poll(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data,
-	enum msm_camera_i2c_data_type data_type)
-{
-	int32_t rc = -EIO;
-	int i;
-	S_I2C_DBG("%s: addr: 0x%x data: 0x%x dt: %d\n",
-		__func__, addr, data, data_type);
-
-	for (i = 0; i < 20; i++) {
-		rc = msm_camera_i2c_compare(client,
-			addr, data, data_type);
-		if (rc == 0 || rc < 0)
-			break;
-		usleep_range(10000, 11000);
-	}
-	return rc;
-}
-
-int32_t msm_camera_i2c_poll2(struct msm_camera_i2c_client *client,
-	struct msm_camera_i2c_reg_conf *reg_conf_tbl)
-{
-	int32_t rc = -EIO;
-	int i,done=0;
-	uint16_t addr = reg_conf_tbl->reg_addr;
-	uint16_t value = reg_conf_tbl->reg_data;
-	uint16_t mask = reg_conf_tbl->mask;
-	uint16_t readValue=0;
-
-	
-	for (i=0;i<20 && !done ;++i)
-	{
-		rc = msm_camera_i2c_read (client, addr, &readValue, 2); 
-		if (rc < 0) {
-			printk("i2c read error\n");
-			
-			return rc;
-		}
-		
-		
-
-		switch (reg_conf_tbl->cmd_type)
-		{
-			case MSM_CAMERA_I2C_CMD_POLL_EQUAL:
-				done = !((readValue&mask) == value);
-				break;
-
-			case MSM_CAMERA_I2C_CMD_POLL_NOT_EQUAL:
-				done = !((readValue&mask) != value);
-				break;
-
-			case MSM_CAMERA_I2C_CMD_POLL_LESS:
-				done = !((readValue&mask) < value);
-				break;
-				
-			default:
-				break;
-		}
-
-		if (!done)
-			msleep(5);
-	}
-
-	return rc;
-}
-
-int32_t msm_camera_i2c_write_tbl(struct msm_camera_i2c_client *client,
-	struct msm_camera_i2c_reg_conf *reg_conf_tbl, uint16_t size,
-	enum msm_camera_i2c_data_type data_type)
-{
-	int i;
-	int32_t rc = -EFAULT;
-	for (i = 0; i < size; i++) {
-		enum msm_camera_i2c_data_type dt;
-		if (reg_conf_tbl->cmd_type == MSM_CAMERA_I2C_CMD_POLL) {
-			rc = msm_camera_i2c_poll(client, reg_conf_tbl->reg_addr,
-				reg_conf_tbl->reg_data, reg_conf_tbl->dt);
-		} 
-		else if (reg_conf_tbl->cmd_type == MSM_CAMERA_I2C_CMD_POLL_EQUAL ||
-				 reg_conf_tbl->cmd_type == MSM_CAMERA_I2C_CMD_POLL_NOT_EQUAL ||
-				 reg_conf_tbl->cmd_type == MSM_CAMERA_I2C_CMD_POLL_LESS) {
-		
-			rc = msm_camera_i2c_poll2(client, reg_conf_tbl);
-		
-		}
-
-		else {
-			if (reg_conf_tbl->dt == 0)
-				dt = data_type;
-			else
-				dt = reg_conf_tbl->dt;
-
-			switch (dt) {
-			case MSM_CAMERA_I2C_BYTE_DATA:
-			case MSM_CAMERA_I2C_WORD_DATA:
-				rc = msm_camera_i2c_write(
-					client,
-					reg_conf_tbl->reg_addr,
-					reg_conf_tbl->reg_data, dt);
-				break;
-			case MSM_CAMERA_I2C_SET_BYTE_MASK:
-				rc = msm_camera_i2c_set_mask(client,
-					reg_conf_tbl->reg_addr,
-					reg_conf_tbl->reg_data,
-					MSM_CAMERA_I2C_BYTE_DATA, 1);
-				break;
-			case MSM_CAMERA_I2C_UNSET_BYTE_MASK:
-				rc = msm_camera_i2c_set_mask(client,
-					reg_conf_tbl->reg_addr,
-					reg_conf_tbl->reg_data,
-					MSM_CAMERA_I2C_BYTE_DATA, 0);
-				break;
-			case MSM_CAMERA_I2C_SET_WORD_MASK:
-				rc = msm_camera_i2c_set_mask(client,
-					reg_conf_tbl->reg_addr,
-					reg_conf_tbl->reg_data,
-					MSM_CAMERA_I2C_WORD_DATA, 1);
-				break;
-			case MSM_CAMERA_I2C_UNSET_WORD_MASK:
-				rc = msm_camera_i2c_set_mask(client,
-					reg_conf_tbl->reg_addr,
-					reg_conf_tbl->reg_data,
-					MSM_CAMERA_I2C_WORD_DATA, 0);
-				break;
-			case MSM_CAMERA_I2C_SET_BYTE_WRITE_MASK_DATA:
-				rc = msm_camera_i2c_set_write_mask_data(client,
-					reg_conf_tbl->reg_addr,
-					reg_conf_tbl->reg_data,
-					reg_conf_tbl->mask,
-					MSM_CAMERA_I2C_BYTE_DATA);
-				break;
-			default:
-				pr_err("%s: Unsupport data type: %d\n",
-					__func__, dt);
-				break;
-			}
-		}
-		if (rc < 0)
-			break;
-		reg_conf_tbl++;
-	}
-	return rc;
-}
-
-int32_t msm_camera_i2c_read_b(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t *data)
-{
-	int32_t rc = -EFAULT;
-	enum msm_camera_i2c_data_type data_type = MSM_CAMERA_I2C_BYTE_DATA;
-	unsigned char buf[client->addr_type+data_type];
-
-	client->addr_type = MSM_CAMERA_I2C_WORD_ADDR;
-	if (client->addr_type == MSM_CAMERA_I2C_BYTE_ADDR) {
-		buf[0] = addr;
-	} else if (client->addr_type == MSM_CAMERA_I2C_WORD_ADDR) {
-		buf[0] = addr >> BITS_PER_BYTE;
-		buf[1] = addr;
-	}
-	rc = msm_camera_i2c_rxdata(client, buf, data_type);
-	if (rc < 0) {
-		S_I2C_DBG("%s fail\n", __func__);
-		return rc;
-	}
-	if (data_type == MSM_CAMERA_I2C_BYTE_DATA)
-		*data = buf[0];
-	else
-		*data = buf[0] << 8 | buf[1];
-
-	S_I2C_DBG("%s addr = 0x%x data: 0x%x", __func__, addr, *data);
-	return rc;
-}
-
-int32_t msm_camera_i2c_read(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t *data,
-	enum msm_camera_i2c_data_type data_type)
-{
-	int32_t rc = -EFAULT;
-	unsigned char buf[client->addr_type+data_type];
-
-	if ((client->addr_type != MSM_CAMERA_I2C_BYTE_ADDR
-		&& client->addr_type != MSM_CAMERA_I2C_WORD_ADDR)
-		|| (data_type != MSM_CAMERA_I2C_BYTE_DATA
-		&& data_type != MSM_CAMERA_I2C_WORD_DATA))
-		return rc;
-
-	if (client->addr_type == MSM_CAMERA_I2C_BYTE_ADDR) {
-		buf[0] = addr;
-	} else if (client->addr_type == MSM_CAMERA_I2C_WORD_ADDR) {
-		buf[0] = addr >> BITS_PER_BYTE;
-		buf[1] = addr;
-	}
-	rc = msm_camera_i2c_rxdata(client, buf, data_type);
-	if (rc < 0) {
-		S_I2C_DBG("%s fail\n", __func__);
-		return rc;
-	}
-	if (data_type == MSM_CAMERA_I2C_BYTE_DATA)
-		*data = buf[0];
-	else
-		*data = buf[0] << 8 | buf[1];
-
-	S_I2C_DBG("%s addr = 0x%x data: 0x%x\n", __func__, addr, *data);
-	return rc;
-}
-
-int32_t msm_camera_i2c_read_seq(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint8_t *data, uint16_t num_byte)
-{
-	int32_t rc = -EFAULT;
-	unsigned char buf[client->addr_type+num_byte];
-	int i;
-
-	memset(buf, 0, sizeof(buf));
-	if ((client->addr_type != MSM_CAMERA_I2C_BYTE_ADDR
-		&& client->addr_type != MSM_CAMERA_I2C_WORD_ADDR)
-		|| num_byte == 0)
-		return rc;
-
-	if (client->addr_type == MSM_CAMERA_I2C_BYTE_ADDR) {
-		buf[0] = addr;
-	} else if (client->addr_type == MSM_CAMERA_I2C_WORD_ADDR) {
-		buf[0] = addr >> BITS_PER_BYTE;
-		buf[1] = addr;
-	}
-	rc = msm_camera_i2c_rxdata(client, buf, num_byte);
-	if (rc < 0) {
-		S_I2C_DBG("%s fail\n", __func__);
-		return rc;
-	}
-
-	S_I2C_DBG("%s addr = 0x%x", __func__, addr);
-	for (i = 0; i < num_byte; i++) {
-		data[i] = buf[i];
-		S_I2C_DBG("Byte %d: 0x%x\n", i, buf[i]);
-		S_I2C_DBG("Data: 0x%x\n", data[i]);
-	}
-	return rc;
-}
-
-int32_t msm_sensor_write_conf_array(struct msm_camera_i2c_client *client,
-			struct msm_camera_i2c_conf_array *array, uint16_t index)
-{
-	int32_t rc;
-
-	rc = msm_camera_i2c_write_tbl(client,
-		(struct msm_camera_i2c_reg_conf *) array[index].conf,
-		array[index].size, array[index].data_type);
-	if (array[index].delay > 20)
-		msleep(array[index].delay);
-	else
-		usleep_range(array[index].delay*1000,
-					(array[index].delay+1)*1000);
-	return rc;
-}
-
-int32_t msm_sensor_write_enum_conf_array(struct msm_camera_i2c_client *client,
-			struct msm_camera_i2c_enum_conf_array *conf,
-			uint16_t enum_val)
-{
-	int32_t rc = -1, i;
-	for (i = 0; i < conf->num_enum; i++) {
-		if (conf->conf_enum[i] == enum_val)
-			break;
-		if (conf->conf_enum[i] > enum_val)
-			break;
-	}
-	if (i == conf->num_enum)
-		i = conf->num_enum - 1;
-
-	if (i >= conf->num_index)
-		return rc;
-
-	rc = msm_sensor_write_all_conf_array(client,
-		&conf->conf[i*conf->num_conf], conf->num_conf);
-
-	if (conf->delay > 20)
-		msleep(conf->delay);
-	else
-		usleep_range(conf->delay*1000,
-					(conf->delay+1)*1000);
-	return rc;
-}
-
-int32_t msm_sensor_write_all_conf_array(struct msm_camera_i2c_client *client,
-			struct msm_camera_i2c_conf_array *array, uint16_t size)
-{
-	int32_t rc = 0, i;
-	for (i = 0; i < size; i++) {
-		rc = msm_sensor_write_conf_array(client, array, i);
-		if (rc < 0)
-			break;
-	}
-	return rc;
-}
-
-
diff --git a/drivers/media/video/msm/io/msm_camera_i2c.h b/drivers/media/video/msm/io/msm_camera_i2c.h
deleted file mode 100644
index 75dd986..0000000
--- a/drivers/media/video/msm/io/msm_camera_i2c.h
+++ /dev/null
@@ -1,131 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_CAMERA_I2C_H
-#define MSM_CAMERA_I2C_H
-
-#include <linux/i2c.h>
-#include <linux/delay.h>
-#include <mach/camera.h>
-
-#define CONFIG_MSM_CAMERA_I2C_DBG 0
-
-#if CONFIG_MSM_CAMERA_I2C_DBG
-#define S_I2C_DBG(fmt, args...) printk(fmt, ##args)
-#else
-#define S_I2C_DBG(fmt, args...) CDBG(fmt, ##args)
-#endif
-
-enum msm_camera_i2c_reg_addr_type {
-	MSM_CAMERA_I2C_BYTE_ADDR = 1,
-	MSM_CAMERA_I2C_WORD_ADDR,
-};
-
-struct msm_camera_i2c_client {
-	struct i2c_client *client;
-	enum msm_camera_i2c_reg_addr_type addr_type;
-};
-
-enum msm_camera_i2c_data_type {
-	MSM_CAMERA_I2C_BYTE_DATA = 1,
-	MSM_CAMERA_I2C_WORD_DATA,
-	MSM_CAMERA_I2C_SET_BYTE_MASK,
-	MSM_CAMERA_I2C_UNSET_BYTE_MASK,
-	MSM_CAMERA_I2C_SET_WORD_MASK,
-	MSM_CAMERA_I2C_UNSET_WORD_MASK,
-	MSM_CAMERA_I2C_SET_BYTE_WRITE_MASK_DATA,
-};
-
-enum msm_camera_i2c_cmd_type {
-	MSM_CAMERA_I2C_CMD_WRITE,
-	MSM_CAMERA_I2C_CMD_POLL,
-	MSM_CAMERA_I2C_CMD_POLL_EQUAL,
-	MSM_CAMERA_I2C_CMD_POLL_NOT_EQUAL,
-	MSM_CAMERA_I2C_CMD_POLL_LESS,
-
-};
-
-struct msm_camera_i2c_reg_conf {
-	uint16_t reg_addr;
-	uint16_t reg_data;
-	enum msm_camera_i2c_data_type dt;
-	enum msm_camera_i2c_cmd_type cmd_type;
-	int16_t mask;
-};
-
-struct msm_camera_i2c_conf_array {
-	struct msm_camera_i2c_reg_conf *conf;
-	uint16_t size;
-	uint16_t delay;
-	enum msm_camera_i2c_data_type data_type;
-};
-
-struct msm_camera_i2c_enum_conf_array {
-	struct msm_camera_i2c_conf_array *conf;
-	int *conf_enum;
-	uint16_t num_enum;
-	uint16_t num_index;
-	uint16_t num_conf;
-	uint16_t delay;
-	enum msm_camera_i2c_data_type data_type;
-};
-
-int32_t msm_camera_i2c_rxdata(struct msm_camera_i2c_client *client,
-	unsigned char *rxdata, int data_length);
-
-int32_t msm_camera_i2c_txdata(struct msm_camera_i2c_client *client,
-	unsigned char *txdata, int length);
-int32_t msm_camera_i2c_read_b(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t *data);
-int32_t msm_camera_i2c_read(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t *data,
-	enum msm_camera_i2c_data_type data_type);
-
-int32_t msm_camera_i2c_read_seq(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint8_t *data, uint16_t num_byte);
-int32_t msm_camera_i2c_write_b(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data );
-int32_t msm_camera_i2c_write(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data,
-	enum msm_camera_i2c_data_type data_type);
-
-int32_t msm_camera_i2c_write_seq(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint8_t *data, uint16_t num_byte);
-
-int32_t msm_camera_i2c_set_mask(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t mask,
-	enum msm_camera_i2c_data_type data_type, uint16_t flag);
-
-int32_t msm_camera_i2c_compare(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data,
-	enum msm_camera_i2c_data_type data_type);
-
-int32_t msm_camera_i2c_poll(struct msm_camera_i2c_client *client,
-	uint16_t addr, uint16_t data,
-	enum msm_camera_i2c_data_type data_type);
-	
-int32_t msm_camera_i2c_poll2(struct msm_camera_i2c_client *client,
-	struct msm_camera_i2c_reg_conf *reg_conf_tbl);
-
-int32_t msm_camera_i2c_write_tbl(struct msm_camera_i2c_client *client,
-	struct msm_camera_i2c_reg_conf *reg_conf_tbl, uint16_t size,
-	enum msm_camera_i2c_data_type data_type);
-
-int32_t msm_sensor_write_conf_array(struct msm_camera_i2c_client *client,
-	struct msm_camera_i2c_conf_array *array, uint16_t index);
-
-int32_t msm_sensor_write_enum_conf_array(struct msm_camera_i2c_client *client,
-	struct msm_camera_i2c_enum_conf_array *conf, uint16_t enum_val);
-
-int32_t msm_sensor_write_all_conf_array(struct msm_camera_i2c_client *client,
-	struct msm_camera_i2c_conf_array *array, uint16_t size);
-#endif
diff --git a/drivers/media/video/msm/io/msm_camera_i2c_mux.c b/drivers/media/video/msm/io/msm_camera_i2c_mux.c
deleted file mode 100644
index 18724c3..0000000
--- a/drivers/media/video/msm/io/msm_camera_i2c_mux.c
+++ /dev/null
@@ -1,187 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/delay.h>
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <mach/board.h>
-#include <mach/camera.h>
-#include "msm.h"
-#include "msm_camera_i2c_mux.h"
-
-static int msm_i2c_mux_config(struct i2c_mux_device *mux_device, uint8_t *mode)
-{
-	uint32_t val;
-	val = msm_io_r(mux_device->ctl_base);
-	if (*mode == MODE_DUAL) {
-		msm_io_w(val | 0x3, mux_device->ctl_base);
-	} else if (*mode == MODE_L) {
-		msm_io_w(((val | 0x2) & ~(0x1)), mux_device->ctl_base);
-		val = msm_io_r(mux_device->ctl_base);
-		CDBG("the camio mode config left value is %d\n", val);
-	} else {
-		msm_io_w(((val | 0x1) & ~(0x2)), mux_device->ctl_base);
-		val = msm_io_r(mux_device->ctl_base);
-		CDBG("the camio mode config right value is %d\n", val);
-	}
-	return 0;
-}
-
-static int msm_i2c_mux_init(struct i2c_mux_device *mux_device)
-{
-	int rc = 0, val = 0;
-	if (mux_device->use_count == 0) {
-		mux_device->ctl_base = ioremap(mux_device->ctl_mem->start,
-			resource_size(mux_device->ctl_mem));
-		if (!mux_device->ctl_base) {
-			rc = -ENOMEM;
-			return rc;
-		}
-		mux_device->rw_base = ioremap(mux_device->rw_mem->start,
-			resource_size(mux_device->rw_mem));
-		if (!mux_device->rw_base) {
-			rc = -ENOMEM;
-			iounmap(mux_device->ctl_base);
-			return rc;
-		}
-		val = msm_io_r(mux_device->rw_base);
-		msm_io_w((val | 0x200), mux_device->rw_base);
-	}
-	mux_device->use_count++;
-	return 0;
-};
-
-static int msm_i2c_mux_release(struct i2c_mux_device *mux_device)
-{
-	int val = 0;
-	mux_device->use_count--;
-	if (mux_device->use_count == 0) {
-		val = msm_io_r(mux_device->rw_base);
-		msm_io_w((val & ~0x200), mux_device->rw_base);
-		iounmap(mux_device->rw_base);
-		iounmap(mux_device->ctl_base);
-	}
-	return 0;
-}
-
-static long msm_i2c_mux_subdev_ioctl(struct v4l2_subdev *sd,
-			unsigned int cmd, void *arg)
-{
-	struct i2c_mux_device *mux_device;
-	int rc = 0;
-	mux_device = v4l2_get_subdevdata(sd);
-	if (mux_device == NULL) {
-		rc = -ENOMEM;
-		return rc;
-	}
-	mutex_lock(&mux_device->mutex);
-	switch (cmd) {
-	case VIDIOC_MSM_I2C_MUX_CFG:
-		rc = msm_i2c_mux_config(mux_device, (uint8_t *) arg);
-		break;
-	case VIDIOC_MSM_I2C_MUX_INIT:
-		rc = msm_i2c_mux_init(mux_device);
-		break;
-	case VIDIOC_MSM_I2C_MUX_RELEASE:
-		rc = msm_i2c_mux_release(mux_device);
-		break;
-	default:
-		rc = -ENOIOCTLCMD;
-	}
-	mutex_unlock(&mux_device->mutex);
-	return rc;
-}
-
-static struct v4l2_subdev_core_ops msm_i2c_mux_subdev_core_ops = {
-	.ioctl = &msm_i2c_mux_subdev_ioctl,
-};
-
-static const struct v4l2_subdev_ops msm_i2c_mux_subdev_ops = {
-	.core = &msm_i2c_mux_subdev_core_ops,
-};
-
-static int __devinit i2c_mux_probe(struct platform_device *pdev)
-{
-	struct i2c_mux_device *mux_device;
-	int rc = 0;
-	CDBG("%s: device id = %d\n", __func__, pdev->id);
-	mux_device = kzalloc(sizeof(struct i2c_mux_device), GFP_KERNEL);
-	if (!mux_device) {
-		pr_err("%s: no enough memory\n", __func__);
-		return -ENOMEM;
-	}
-
-	v4l2_subdev_init(&mux_device->subdev, &msm_i2c_mux_subdev_ops);
-	v4l2_set_subdevdata(&mux_device->subdev, mux_device);
-	platform_set_drvdata(pdev, &mux_device->subdev);
-	mutex_init(&mux_device->mutex);
-
-	mux_device->ctl_mem = platform_get_resource_byname(pdev,
-					IORESOURCE_MEM, "i2c_mux_ctl");
-	if (!mux_device->ctl_mem) {
-		pr_err("%s: no mem resource?\n", __func__);
-		rc = -ENODEV;
-		goto i2c_mux_no_resource;
-	}
-	mux_device->ctl_io = request_mem_region(mux_device->ctl_mem->start,
-		resource_size(mux_device->ctl_mem), pdev->name);
-	if (!mux_device->ctl_io) {
-		pr_err("%s: no valid mem region\n", __func__);
-		rc = -EBUSY;
-		goto i2c_mux_no_resource;
-	}
-	mux_device->rw_mem = platform_get_resource_byname(pdev,
-					IORESOURCE_MEM, "i2c_mux_rw");
-	if (!mux_device->rw_mem) {
-		pr_err("%s: no mem resource?\n", __func__);
-		rc = -ENODEV;
-		goto i2c_mux_no_resource;
-	}
-	mux_device->rw_io = request_mem_region(mux_device->rw_mem->start,
-		resource_size(mux_device->rw_mem), pdev->name);
-	if (!mux_device->rw_io) {
-		pr_err("%s: no valid mem region\n", __func__);
-		rc = -EBUSY;
-		goto i2c_mux_no_resource;
-	}
-	mux_device->pdev = pdev;
-	return 0;
-
-i2c_mux_no_resource:
-	mutex_destroy(&mux_device->mutex);
-	kfree(mux_device);
-	return 0;
-}
-
-static struct platform_driver i2c_mux_driver = {
-	.probe = i2c_mux_probe,
-	.driver = {
-		.name = MSM_I2C_MUX_DRV_NAME,
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init msm_camera_i2c_mux_init_module(void)
-{
-	return platform_driver_register(&i2c_mux_driver);
-}
-
-static void __exit msm_camera_i2c_mux_exit_module(void)
-{
-	platform_driver_unregister(&i2c_mux_driver);
-}
-
-module_init(msm_camera_i2c_mux_init_module);
-module_exit(msm_camera_i2c_mux_exit_module);
-MODULE_DESCRIPTION("MSM Camera I2C mux driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/io/msm_camera_i2c_mux.h b/drivers/media/video/msm/io/msm_camera_i2c_mux.h
deleted file mode 100644
index 94394fc..0000000
--- a/drivers/media/video/msm/io/msm_camera_i2c_mux.h
+++ /dev/null
@@ -1,46 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_I2C_MUX_H
-#define MSM_I2C_MUX_H
-
-#include <linux/io.h>
-#include <media/v4l2-subdev.h>
-
-struct i2c_mux_device {
-	struct platform_device *pdev;
-	struct v4l2_subdev subdev;
-	struct resource *ctl_mem;
-	struct resource *ctl_io;
-	void __iomem *ctl_base;
-	struct resource *rw_mem;
-	struct resource *rw_io;
-	void __iomem *rw_base;
-	struct mutex mutex;
-	unsigned use_count;
-};
-
-struct i2c_mux_cfg_params {
-	struct v4l2_subdev *subdev;
-	void *parms;
-};
-
-#define VIDIOC_MSM_I2C_MUX_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 13, struct i2c_mux_cfg_params)
-
-#define VIDIOC_MSM_I2C_MUX_INIT \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 14, struct v4l2_subdev*)
-
-#define VIDIOC_MSM_I2C_MUX_RELEASE \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 15, struct v4l2_subdev*)
-
-#endif
diff --git a/drivers/media/video/msm/io/msm_io_util.c b/drivers/media/video/msm/io/msm_io_util.c
deleted file mode 100644
index dfa543f..0000000
--- a/drivers/media/video/msm/io/msm_io_util.c
+++ /dev/null
@@ -1,301 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/delay.h>
-#include <linux/clk.h>
-#include <linux/gpio.h>
-#include <linux/regulator/consumer.h>
-#include <mach/board.h>
-#include <mach/camera.h>
-#include <mach/gpiomux.h>
-
-int msm_cam_clk_enable(struct device *dev, struct msm_cam_clk_info *clk_info,
-		struct clk **clk_ptr, int num_clk, int enable)
-{
-	int i;
-	int rc = 0;
-	if (enable) {
-		for (i = 0; i < num_clk; i++) {
-			clk_ptr[i] = clk_get(dev, clk_info[i].clk_name);
-			if (IS_ERR(clk_ptr[i])) {
-				pr_err("%s get failed\n", clk_info[i].clk_name);
-				rc = PTR_ERR(clk_ptr[i]);
-				goto cam_clk_get_err;
-			}
-			if (clk_info[i].clk_rate >= 0) {
-				rc = clk_set_rate(clk_ptr[i],
-							clk_info[i].clk_rate);
-				if (rc < 0) {
-					pr_err("%s set failed rate %ld\n",
-						   clk_info[i].clk_name, clk_info[i].clk_rate);
-					goto cam_clk_set_err;
-				}
-			}
-			rc = clk_prepare(clk_ptr[i]);
-			if (rc < 0) {
-				pr_err("%s prepare failed\n",
-					   clk_info[i].clk_name);
-				goto cam_clk_prepare_err;
-			}
-
-			rc = clk_enable(clk_ptr[i]);
-			if (rc < 0) {
-				pr_err("%s enable failed\n",
-					   clk_info[i].clk_name);
-				goto cam_clk_enable_err;
-			}
-		}
-	} else {
-		for (i = num_clk - 1; i >= 0; i--) {
-			if (clk_ptr[i] != NULL) {
-				clk_disable(clk_ptr[i]);
-				clk_unprepare(clk_ptr[i]);
-				clk_put(clk_ptr[i]);
-			}
-		}
-	}
-	return rc;
-
-
-cam_clk_enable_err:
-	clk_unprepare(clk_ptr[i]);
-cam_clk_prepare_err:
-cam_clk_set_err:
-	clk_put(clk_ptr[i]);
-cam_clk_get_err:
-	for (i--; i >= 0; i--) {
-		if (clk_ptr[i] != NULL) {
-			clk_disable(clk_ptr[i]);
-			clk_unprepare(clk_ptr[i]);
-			clk_put(clk_ptr[i]);
-		}
-	}
-	return rc;
-}
-
-int msm_camera_config_vreg(struct device *dev, struct camera_vreg_t *cam_vreg,
-		int num_vreg, struct regulator **reg_ptr, int config)
-{
-	int i = 0;
-	int rc = 0;
-	struct camera_vreg_t *curr_vreg;
-	if (config) {
-		for (i = 0; i < num_vreg; i++) {
-			curr_vreg = &cam_vreg[i];
-			reg_ptr[i] = regulator_get(dev,
-				curr_vreg->reg_name);
-			if (IS_ERR(reg_ptr[i])) {
-				pr_err("%s: %s get failed\n",
-					 __func__,
-					 curr_vreg->reg_name);
-				reg_ptr[i] = NULL;
-				goto vreg_get_fail;
-			}
-			if (curr_vreg->type == REG_LDO) {
-				rc = regulator_set_voltage(
-					reg_ptr[i],
-					curr_vreg->min_voltage,
-					curr_vreg->max_voltage);
-				if (rc < 0) {
-					pr_err("%s: %s set voltage failed\n",
-						__func__,
-						curr_vreg->reg_name);
-					goto vreg_set_voltage_fail;
-				}
-				if (curr_vreg->op_mode) {
-					rc = regulator_set_optimum_mode(
-						reg_ptr[i],
-						curr_vreg->op_mode);
-					if (rc < 0) {
-						pr_err("%s: %s set optimum"
-							"mode failed\n",
-							__func__,
-							curr_vreg->reg_name);
-						goto vreg_set_opt_mode_fail;
-					}
-				}
-			}
-		}
-	} else {
-		for (i = num_vreg-1; i >= 0; i--) {
-			curr_vreg = &cam_vreg[i];
-			if (reg_ptr[i]) {
-				if (curr_vreg->type == REG_LDO) {
-					if (curr_vreg->op_mode)
-						regulator_set_optimum_mode(
-							reg_ptr[i], 0);
-					regulator_set_voltage(
-						reg_ptr[i], 0, curr_vreg->
-						max_voltage);
-				}
-				regulator_put(reg_ptr[i]);
-				reg_ptr[i] = NULL;
-			}
-		}
-	}
-	return 0;
-
-vreg_unconfig:
-if (curr_vreg->type == REG_LDO)
-	regulator_set_optimum_mode(reg_ptr[i], 0);
-
-vreg_set_opt_mode_fail:
-if (curr_vreg->type == REG_LDO)
-	regulator_set_voltage(reg_ptr[i], 0,
-		curr_vreg->max_voltage);
-
-vreg_set_voltage_fail:
-	regulator_put(reg_ptr[i]);
-	reg_ptr[i] = NULL;
-
-vreg_get_fail:
-	for (i--; i >= 0; i--) {
-		curr_vreg = &cam_vreg[i];
-		goto vreg_unconfig;
-	}
-	return -ENODEV;
-}
-
-int msm_camera_enable_vreg(struct device *dev, struct camera_vreg_t *cam_vreg,
-		int num_vreg, struct regulator **reg_ptr, int enable)
-{
-	int i = 0, rc = 0;
-	if (enable) {
-		for (i = 0; i < num_vreg; i++) {
-			if (IS_ERR(reg_ptr[i])) {
-				pr_err("%s: %s null regulator\n",
-					__func__, cam_vreg[i].reg_name);
-				goto disable_vreg;
-			}
-			rc = regulator_enable(reg_ptr[i]);
-			if (rc < 0) {
-				pr_err("%s: %s enable failed\n",
-					__func__, cam_vreg[i].reg_name);
-				goto disable_vreg;
-			}
-		}
-	} else {
-		for (i = num_vreg-1; i >= 0; i--)
-			regulator_disable(reg_ptr[i]);
-	}
-	return rc;
-disable_vreg:
-	for (i--; i >= 0; i--) {
-		regulator_disable(reg_ptr[i]);
-		goto disable_vreg;
-	}
-	return rc;
-}
-
-static int config_gpio_table(struct msm_camera_gpio_conf *gpio)
-{
-	int rc = 0, i = 0;
-	uint32_t *table_on;
-	uint32_t *table_off;
-	uint32_t len;
-
-	table_on = gpio->camera_on_table;
-	table_off = gpio->camera_off_table;
-	len = gpio->camera_on_table_size;
-
-	for (i = 0; i < len; i++) {
-		rc = gpio_tlmm_config(table_on[i], GPIO_CFG_ENABLE);
-		if (rc) {
-			pr_err("%s not able to get gpio\n", __func__);
-			for (i--; i >= 0; i--)
-				gpio_tlmm_config(table_off[i],
-					GPIO_CFG_ENABLE);
-			break;
-		}
-	}
-	return rc;
-}
-
-int msm_camera_request_gpio_table(struct msm_camera_sensor_info *sinfo,
-	int gpio_en)
-{
-	int rc = 0;
-	struct msm_camera_gpio_conf *gpio_conf =
-		sinfo->sensor_platform_info->gpio_conf;
-
-	if (!gpio_conf->gpio_no_mux) {
-		if (gpio_conf->cam_gpio_req_tbl == NULL ||
-			gpio_conf->cam_gpio_common_tbl == NULL) {
-			pr_err("%s: NULL camera gpio table\n", __func__);
-			return -EFAULT;
-		}
-	}
-	if (gpio_conf->gpio_no_mux)
-		config_gpio_table(gpio_conf);
-
-	if (gpio_en) {
-		if (!gpio_conf->gpio_no_mux) {
-			if (gpio_conf->cam_gpiomux_conf_tbl != NULL) {
-				msm_gpiomux_install(
-					(struct msm_gpiomux_config *)
-					gpio_conf->cam_gpiomux_conf_tbl,
-					gpio_conf->cam_gpiomux_conf_tbl_size);
-			}
-			rc = gpio_request_array(gpio_conf->cam_gpio_common_tbl,
-				gpio_conf->cam_gpio_common_tbl_size);
-			if (rc < 0) {
-				pr_err("%s common gpio request failed\n"
-						, __func__);
-				return rc;
-			}
-		}
-		if (gpio_conf->cam_gpio_req_tbl_size) {
-			rc = gpio_request_array(gpio_conf->cam_gpio_req_tbl,
-				gpio_conf->cam_gpio_req_tbl_size);
-			if (rc < 0) {
-				pr_err("%s camera gpio"
-					"request failed\n", __func__);
-				gpio_free_array(gpio_conf->cam_gpio_common_tbl,
-					gpio_conf->cam_gpio_common_tbl_size);
-				return rc;
-			}
-		}
-	} else {
-		gpio_free_array(gpio_conf->cam_gpio_req_tbl,
-				gpio_conf->cam_gpio_req_tbl_size);
-		if (!gpio_conf->gpio_no_mux)
-			gpio_free_array(gpio_conf->cam_gpio_common_tbl,
-				gpio_conf->cam_gpio_common_tbl_size);
-	}
-	return rc;
-}
-
-int msm_camera_config_gpio_table(struct msm_camera_sensor_info *sinfo,
-	int gpio_en)
-{
-	struct msm_camera_gpio_conf *gpio_conf =
-		sinfo->sensor_platform_info->gpio_conf;
-	int rc = 0, i;
-
-	if (gpio_en) {
-		for (i = 0; i < gpio_conf->cam_gpio_set_tbl_size; i++) {
-			gpio_set_value_cansleep(
-				gpio_conf->cam_gpio_set_tbl[i].gpio,
-				gpio_conf->cam_gpio_set_tbl[i].flags);
-			usleep_range(gpio_conf->cam_gpio_set_tbl[i].delay,
-				gpio_conf->cam_gpio_set_tbl[i].delay + 1000);
-		}
-	} else if (!gpio_conf->gpio_no_mux) {
-		for (i = gpio_conf->cam_gpio_set_tbl_size - 1; i >= 0; i--) {
-			if (gpio_conf->cam_gpio_set_tbl[i].flags)
-				gpio_set_value_cansleep(
-					gpio_conf->cam_gpio_set_tbl[i].gpio,
-					GPIOF_OUT_INIT_LOW);
-		}
-	}
-	return rc;
-}
diff --git a/drivers/media/video/msm/msm.c b/drivers/media/video/msm/msm.c
deleted file mode 100644
index 6624779..0000000
--- a/drivers/media/video/msm/msm.c
+++ /dev/null
@@ -1,4034 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/module.h>
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/list.h>
-#include <linux/ioctl.h>
-#include <linux/spinlock.h>
-#include <linux/proc_fs.h>
-#include "msm.h"
-#include "msm_csid.h"
-#include "msm_csic.h"
-#include "msm_csiphy.h"
-#include "msm_ispif.h"
-
-#include "msm_sensor.h"
-#include "msm_vfe32.h"
-
-#include <linux/switch.h>
-
-#ifdef CONFIG_RAWCHIP
-#include "rawchip/rawchip.h"
-#endif
-
-#define MSM_MAX_CAMERA_SENSORS 5
-
-#ifdef CONFIG_MSM_CAMERA_DEBUG
-#define D(fmt, args...) pr_debug("msm: " fmt, ##args)
-#else
-#define D(fmt, args...) do {} while (0)
-#endif
-
-static unsigned msm_camera_v4l2_nr = -1;
-static struct msm_cam_server_dev g_server_dev;
-static struct class *msm_class;
-static dev_t msm_devno;
-static int vnode_count;
-
-module_param(msm_camera_v4l2_nr, uint, 0644);
-MODULE_PARM_DESC(msm_camera_v4l2_nr, "videoX start number, -1 is autodetect");
-
-static long msm_server_send_v4l2_evt(void *evt);
-static void msm_cam_server_subdev_notify(struct v4l2_subdev *sd,
-	unsigned int notification, void *arg);
-
-static void msm_queue_init(struct msm_device_queue *queue, const char *name)
-{
-	D("%s\n", __func__);
-	spin_lock_init(&queue->lock);
-	queue->len = 0;
-	queue->max = 0;
-	queue->name = name;
-	INIT_LIST_HEAD(&queue->list);
-	init_waitqueue_head(&queue->wait);
-}
-
-static void msm_enqueue(struct msm_device_queue *queue,
-			struct list_head *entry)
-{
-	unsigned long flags;
-	spin_lock_irqsave(&queue->lock, flags);
-	queue->len++;
-	if (queue->len > queue->max) {
-		queue->max = queue->len;
-		pr_info("%s: queue %s new max is %d\n", __func__,
-			queue->name, queue->max);
-	}
-	list_add_tail(entry, &queue->list);
-	wake_up(&queue->wait);
-	D("%s: woke up %s\n", __func__, queue->name);
-	spin_unlock_irqrestore(&queue->lock, flags);
-}
-static void msm_drain_eventq(struct msm_device_queue *queue)
-{
-	unsigned long flags;
-	struct msm_queue_cmd *qcmd;
-	struct msm_isp_event_ctrl *isp_event;
-
-	spin_lock_irqsave(&queue->lock, flags);
-	while (!list_empty(&queue->list)) {
-		qcmd = list_first_entry(&queue->list,
-			struct msm_queue_cmd, list_eventdata);
-		list_del_init(&qcmd->list_eventdata);
-		isp_event =
-			(struct msm_isp_event_ctrl *)
-			qcmd->command;
-		if (isp_event->isp_data.ctrl.value != NULL)
-			kfree(isp_event->isp_data.ctrl.value);
-
-		kfree(qcmd->command);
-		free_qcmd(qcmd);
-	}
-	spin_unlock_irqrestore(&queue->lock, flags);
-}
-
-static int32_t msm_find_free_queue(void)
-{
-	int i;
-	for (i = 0; i < MAX_NUM_ACTIVE_CAMERA; i++) {
-		struct msm_cam_server_queue *queue;
-		queue = &g_server_dev.server_queue[i];
-		if (!queue->queue_active)
-			return i;
-	}
-	return -EINVAL;
-}
-
-uint32_t msm_camera_get_mctl_handle(void)
-{
-	uint32_t i;
-	if ((g_server_dev.mctl_handle_cnt << 8) == 0)
-		g_server_dev.mctl_handle_cnt++;
-	for (i = 0; i < MAX_NUM_ACTIVE_CAMERA; i++) {
-		if (g_server_dev.mctl[i].handle == 0) {
-			g_server_dev.mctl[i].handle =
-				(++g_server_dev.mctl_handle_cnt) << 8 | i;
-			memset(&g_server_dev.mctl[i].mctl,
-				   0, sizeof(g_server_dev.mctl[i].mctl));
-			return g_server_dev.mctl[i].handle;
-		}
-	}
-	return 0;
-}
-
-struct msm_cam_media_controller *msm_camera_get_mctl(uint32_t handle)
-{
-	uint32_t mctl_index;
-	mctl_index = handle & 0xff;
-	if ((mctl_index < MAX_NUM_ACTIVE_CAMERA) &&
-		(g_server_dev.mctl[mctl_index].handle == handle))
-		return &g_server_dev.mctl[mctl_index].mctl;
-	return NULL;
-}
-
-void msm_camera_free_mctl(uint32_t handle)
-{
-	uint32_t mctl_index;
-	mctl_index = handle & 0xff;
-	if ((mctl_index < MAX_NUM_ACTIVE_CAMERA) &&
-		(g_server_dev.mctl[mctl_index].handle == handle))
-		g_server_dev.mctl[mctl_index].handle = 0;
-	else
-		pr_err("%s: invalid free handle\n", __func__);
-}
-
-static void msm_cam_v4l2_subdev_notify(struct v4l2_subdev *sd,
-				unsigned int notification, void *arg)
-{
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_cam_media_controller *pmctl;
-
-	if (sd == NULL)
-		return;
-
-	pcam = to_pcam(sd->v4l2_dev);
-
-	if (pcam == NULL)
-		return;
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (pmctl == NULL)
-		return;
-
-}
-
-static int msm_ctrl_cmd_done(void *arg)
-{
-	void __user *uptr;
-	struct msm_queue_cmd *qcmd;
-	struct msm_camera_v4l2_ioctl_t *ioctl_ptr = arg;
-	struct msm_ctrl_cmd *command;
-	D("%s\n", __func__);
-
-	command = kzalloc(sizeof(struct msm_ctrl_cmd), GFP_KERNEL);
-
-	if (!command) {
-		pr_err("%s Insufficient memory. return", __func__);
-		goto command_alloc_fail;
-	}
- 
- 	 qcmd = kzalloc(sizeof(struct msm_queue_cmd), GFP_KERNEL);
- 	 if (!qcmd) {
- 		 pr_err("%s Insufficient memory. return", __func__);
- 		 goto qcmd_alloc_fail;
- 	 }
- 
- 	 mutex_lock(&g_server_dev.server_queue_lock);
-	if (copy_from_user(command, (void __user *)ioctl_ptr->ioctl_ptr,
-					   sizeof(struct msm_ctrl_cmd))) {
-		pr_err("%s: copy_from_user failed, size=%d\n",
-			   __func__, sizeof(struct msm_ctrl_cmd));
-		goto ctrl_cmd_done_error;
-	}
-
-	if (!g_server_dev.server_queue[command->queue_idx].queue_active) {
-		pr_err("%s: Invalid queue\n", __func__);
-		goto ctrl_cmd_done_error;
-	}
-	D("%s qid %d evtid %d %d\n", __func__, command->queue_idx,
-		command->evt_id,
-		g_server_dev.server_queue[command->queue_idx].evt_id);
-
-	if (command->evt_id !=
-		g_server_dev.server_queue[command->queue_idx].evt_id) {
-		pr_err("%s Invalid event id from userspace cmd id %d %d qid %d\n",
-			__func__, command->evt_id,
-			g_server_dev.server_queue[command->queue_idx].evt_id,
-			command->queue_idx);
-		goto ctrl_cmd_done_error;
-	}
-	atomic_set(&qcmd->on_heap, 1);
-	uptr = command->value;
-	qcmd->command = command;
-
-	if (command->length > 0) {
-		command->value =
-			g_server_dev.server_queue[command->queue_idx].ctrl_data;
-		if (command->length > max_control_command_size) {
-			pr_err("%s: user data %d is too big (max %d)\n",
-				__func__, command->length,
-				max_control_command_size);
-			goto ctrl_cmd_done_error;
-		}
-		if (copy_from_user(command->value, uptr, command->length)) {
-			pr_err("%s: copy_from_user failed, size=%d\n",
-			__func__, sizeof(struct msm_ctrl_cmd));
-			goto ctrl_cmd_done_error;
-		}
-	}
-
-	msm_enqueue(&g_server_dev.server_queue
-		[command->queue_idx].ctrl_q, &qcmd->list_control);
-	mutex_unlock(&g_server_dev.server_queue_lock);
-	return 0;
-
-ctrl_cmd_done_error:
-	mutex_unlock(&g_server_dev.server_queue_lock);
-	free_qcmd(qcmd);
-qcmd_alloc_fail:
-	kfree(command);
-command_alloc_fail:
-	return -EINVAL;	
-}
-
-
-static void msm_cam_stop_hardware(struct msm_cam_v4l2_device *pcam)
-{
-	struct msm_cam_media_controller *pmctl;
-	int rc = 0;
-	if (pcam == NULL)
-		return;
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (pmctl && pmctl->mctl_release) {
-		pr_err("%s: stopping hardware upon error\n", __func__);
-		
-		pmctl->mctl_cmd = NULL;
-	
-		rc = pmctl->mctl_release(pmctl);
-		if (rc < 0)
-			pr_err("mctl_release fails %d\n", rc);
-		pmctl->mctl_release = NULL;
-	}
-}
-
-
-static int msm_server_control(struct msm_cam_server_dev *server_dev,
-				struct msm_ctrl_cmd *out)
-{
-	int rc = 0;
-	void *value;
-	struct msm_queue_cmd *rcmd;
-	struct msm_queue_cmd *event_qcmd;	
-	struct msm_ctrl_cmd *ctrlcmd;
-	struct msm_device_queue *queue =
-		&server_dev->server_queue[out->queue_idx].ctrl_q;
-	struct msm_cam_v4l2_device *pcam = server_dev->pcam_active;
-	struct v4l2_event v4l2_evt;
-	struct msm_isp_event_ctrl *isp_event;
-	void *ctrlcmd_data;
-	int loop = 0; 
-
-	event_qcmd = kzalloc(sizeof(struct msm_queue_cmd), GFP_KERNEL);
-	if (!event_qcmd) {
-		pr_err("%s Insufficient memory. return", __func__);
-		rc = -ENOMEM;
-		goto event_qcmd_alloc_fail;
-	}
-
-	isp_event = kzalloc(sizeof(struct msm_isp_event_ctrl), GFP_KERNEL);
-	if (!isp_event) {
-		pr_err("%s Insufficient memory. return", __func__);
-		rc = -ENOMEM;
-		goto isp_event_alloc_fail;
-	}
-
-	D("%s\n", __func__);
-	mutex_lock(&server_dev->server_queue_lock);
-	if (++server_dev->server_evt_id == 0)
-		server_dev->server_evt_id++;
- 
-	 D("%s qid %d evtid %d\n", __func__, out->queue_idx,
-		 server_dev->server_evt_id);
-	server_dev->server_queue[out->queue_idx].evt_id =
-		 server_dev->server_evt_id;
-	v4l2_evt.type = V4L2_EVENT_PRIVATE_START + MSM_CAM_RESP_V4L2;
-	v4l2_evt.u.data[0] = out->queue_idx;
-	
-	isp_event->resptype = MSM_CAM_RESP_V4L2;
-	isp_event->isp_data.ctrl = *out;
-	isp_event->isp_data.ctrl.evt_id = server_dev->server_evt_id;
-	if (out->value != NULL && out->length != 0) {
-		ctrlcmd_data = kzalloc(out->length, GFP_KERNEL);
-		if (!ctrlcmd_data) {
-			rc = -ENOMEM;
-			goto ctrlcmd_alloc_fail;
-		}
-		memcpy(ctrlcmd_data, out->value, out->length);
-		isp_event->isp_data.ctrl.value = ctrlcmd_data;
-	}
-
-	atomic_set(&event_qcmd->on_heap, 1);
-	event_qcmd->command = isp_event;
-
-	msm_enqueue(&server_dev->server_queue[out->queue_idx].eventData_q,
-				&event_qcmd->list_eventdata);
-
-	v4l2_event_queue(server_dev->server_command_queue.pvdev,
-					  &v4l2_evt);
-
-	D("%s v4l2_event_queue: type = 0x%x\n", __func__, v4l2_evt.type);
-	mutex_unlock(&server_dev->server_queue_lock);
-	
-	D("Waiting for config status\n");
-
-wait_event:
-	rc = wait_event_interruptible_timeout(queue->wait,
-		!list_empty_careful(&queue->list),
-		msecs_to_jiffies(out->timeout_ms));
-	D("Waiting is over for config status\n");
-	if (list_empty_careful(&queue->list)) {
-		if (!rc)
-			rc = -ETIMEDOUT;
-		if (rc == -ERESTARTSYS && loop < 20) {
-			loop++;
-			msleep(5);
-			pr_info("%s: goto wait_event loop %d\n", __func__, loop);
-			goto wait_event;
-		}
-		else if (rc < 0) {
-			if (++server_dev->server_evt_id == 0)
-				server_dev->server_evt_id++;
-			pr_err("%s: wait_event error %d\n", __func__, rc);
-			
-			pr_info("%s: ctrlcmd.type = %d\n", __func__, out->type);
-			if (out->type == MSM_V4L2_SET_CTRL_CMD) {
-				if (out->value)
-					pr_info("%s: ctrl_cmd.type = %d\n", __func__, 
-						((struct msm_ctrl_cmd *)out->value)->type);
-			}
-			
-			msm_cam_stop_hardware(pcam);
-
-			return rc;
-		}
-	}
-
-	rcmd = msm_dequeue(queue, list_control);
-	BUG_ON(!rcmd);
-	if(!rcmd) return -EINVAL;
-	D("%s Finished servicing ioctl\n", __func__);
-
-	ctrlcmd = (struct msm_ctrl_cmd *)(rcmd->command);
-	value = out->value;
-	if (ctrlcmd->length > 0 && value != NULL &&
-		ctrlcmd->length <= out->length)
-		memcpy(value, ctrlcmd->value, ctrlcmd->length);
-
-	memcpy(out, ctrlcmd, sizeof(struct msm_ctrl_cmd));
-	out->value = value;
-	kfree(ctrlcmd);
-
-	free_qcmd(rcmd);
-	D("%s: rc %d\n", __func__, rc);
-	
-	if (rc >= 0) {
-		
-		if (out->status == 0)
-			rc = -1;
-		else if (out->status == 1 || out->status == 4)
-			rc = 0;
-		else
-			rc = -EINVAL;
-	}
-	return rc;
-
-ctrlcmd_alloc_fail:
-	kfree(isp_event);
-isp_event_alloc_fail:
-	kfree(event_qcmd);
-event_qcmd_alloc_fail:
-	return rc;	
-}
-
-static int msm_send_open_server(struct msm_cam_v4l2_device *pcam)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-	D("%s qid %d\n", __func__, pcam->server_queue_idx);
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd)); 
-	ctrlcmd.type	   = MSM_V4L2_OPEN;
-	ctrlcmd.timeout_ms = 10000;
-	ctrlcmd.length	 = strnlen(g_server_dev.config_info.config_dev_name[0],
-				MAX_DEV_NAME_LEN)+1;
-	ctrlcmd.value    = (char *)g_server_dev.config_info.config_dev_name[0];
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-
-	return rc;
-}
-
-static int msm_send_close_server(struct msm_cam_v4l2_device *pcam)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-	pr_info("%s qid %d\n", __func__, pcam->server_queue_idx);
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd)); 
-	ctrlcmd.type	   = MSM_V4L2_CLOSE;
-	ctrlcmd.timeout_ms = 10000;
-	ctrlcmd.length	 = strnlen(g_server_dev.config_info.config_dev_name[0],
-				MAX_DEV_NAME_LEN)+1;
-	ctrlcmd.value    = (char *)g_server_dev.config_info.config_dev_name[0];
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-
-	return rc;
-}
-
-static int msm_server_set_fmt(struct msm_cam_v4l2_device *pcam, int idx,
-				 struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	int i = 0;
-	struct v4l2_pix_format *pix = &pfmt->fmt.pix;
-	struct msm_ctrl_cmd ctrlcmd;
-	struct img_plane_info plane_info;
-
-	plane_info.width = pix->width;
-	plane_info.height = pix->height;
-	plane_info.pixelformat = pix->pixelformat;
-	plane_info.buffer_type = pfmt->type;
-	plane_info.ext_mode = pcam->dev_inst[idx]->image_mode;
-	plane_info.num_planes = 1;
-	D("%s: %d, %d, 0x%x\n", __func__,
-		pfmt->fmt.pix.width, pfmt->fmt.pix.height,
-		pfmt->fmt.pix.pixelformat);
-
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		D("%s, Attention! Wrong buf-type %d\n", __func__, pfmt->type);
-
-	for (i = 0; i < pcam->num_fmts; i++)
-		if (pcam->usr_fmts[i].fourcc == pix->pixelformat)
-			break;
-	if (i == pcam->num_fmts) {
-		pr_err("%s: User requested pixelformat %x not supported\n",
-						__func__, pix->pixelformat);
-		return -EINVAL;
-	}
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd)); 
-	ctrlcmd.type       = MSM_V4L2_VID_CAP_TYPE;
-	ctrlcmd.length     = sizeof(struct img_plane_info);
-	ctrlcmd.value      = (void *)&plane_info;
-	ctrlcmd.timeout_ms = 10000;
-	ctrlcmd.vnode_id   = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;	
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-
-	if (rc >= 0) {
-		pcam->dev_inst[idx]->vid_fmt = *pfmt;
-		pcam->dev_inst[idx]->sensor_pxlcode
-					= pcam->usr_fmts[i].pxlcode;
-		D("%s:inst=0x%x,idx=%d,width=%d,heigth=%d\n",
-			 __func__, (u32)pcam->dev_inst[idx], idx,
-			 pcam->dev_inst[idx]->vid_fmt.fmt.pix.width,
-			 pcam->dev_inst[idx]->vid_fmt.fmt.pix.height);
-		pcam->dev_inst[idx]->plane_info = plane_info;
-	}
-
-	return rc;
-}
-
-static int msm_server_set_fmt_mplane(struct msm_cam_v4l2_device *pcam, int idx,
-				 struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	int i = 0;
-	struct v4l2_pix_format_mplane *pix_mp = &pfmt->fmt.pix_mp;
-	struct msm_ctrl_cmd ctrlcmd;
-	struct img_plane_info plane_info;
-
-	plane_info.width = pix_mp->width;
-	plane_info.height = pix_mp->height;
-	plane_info.pixelformat = pix_mp->pixelformat;
-	plane_info.buffer_type = pfmt->type;
-	plane_info.ext_mode = pcam->dev_inst[idx]->image_mode;
-	plane_info.num_planes = pix_mp->num_planes;
-	if (plane_info.num_planes <= 0 ||
-		plane_info.num_planes > VIDEO_MAX_PLANES) {
-		pr_err("%s Invalid number of planes set %d", __func__,
-				plane_info.num_planes);
-		return -EINVAL;
-	}
-	D("%s: %d, %d, 0x%x\n", __func__,
-		pfmt->fmt.pix_mp.width, pfmt->fmt.pix_mp.height,
-		pfmt->fmt.pix_mp.pixelformat);
-
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
-		pr_err("%s, Attention! Wrong buf-type %d\n",
-			__func__, pfmt->type);
-		return -EINVAL;
-	}
-
-	for (i = 0; i < pcam->num_fmts; i++)
-		if (pcam->usr_fmts[i].fourcc == pix_mp->pixelformat)
-			break;
-	if (i == pcam->num_fmts) {
-		pr_err("%s: User requested pixelformat %x not supported\n",
-						__func__, pix_mp->pixelformat);
-		return -EINVAL;
-	}
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd)); 
-	ctrlcmd.type       = MSM_V4L2_VID_CAP_TYPE;
-	ctrlcmd.length     = sizeof(struct img_plane_info);
-	ctrlcmd.value      = (void *)&plane_info;
-	ctrlcmd.timeout_ms = 10000;
-	ctrlcmd.vnode_id   = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-	if (rc >= 0) {
-		pcam->dev_inst[idx]->vid_fmt = *pfmt;
-		pcam->dev_inst[idx]->sensor_pxlcode
-					= pcam->usr_fmts[i].pxlcode;
-		D("%s:inst=0x%x,idx=%d,width=%d,heigth=%d\n",
-			 __func__, (u32)pcam->dev_inst[idx], idx,
-			 pcam->dev_inst[idx]->vid_fmt.fmt.pix_mp.width,
-			 pcam->dev_inst[idx]->vid_fmt.fmt.pix_mp.height);
-		pcam->dev_inst[idx]->plane_info = plane_info;
-	}
-
-	return rc;
-}
-
-static int msm_server_streamon(struct msm_cam_v4l2_device *pcam, int idx)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-	D("%s\n", __func__);
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd)); 
-	ctrlcmd.type	   = MSM_V4L2_STREAM_ON;
-	ctrlcmd.timeout_ms = 10000;
-	ctrlcmd.length	 = 0;
-	ctrlcmd.value    = NULL;
-	ctrlcmd.stream_type = pcam->dev_inst[idx]->image_mode;
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-
-	return rc;
-}
-
-static int msm_server_streamoff(struct msm_cam_v4l2_device *pcam, int idx)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-
-	D("%s, pcam = 0x%x\n", __func__, (u32)pcam);
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd));  
-	ctrlcmd.type        = MSM_V4L2_STREAM_OFF;
-	ctrlcmd.timeout_ms  = 10000;
-	ctrlcmd.length      = 0;
-	ctrlcmd.value       = NULL;
-	ctrlcmd.stream_type = pcam->dev_inst[idx]->image_mode;
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-
-	return rc;
-}
-
-static int msm_server_proc_ctrl_cmd(struct msm_cam_v4l2_device *pcam,
-				 struct v4l2_control *ctrl, int is_set_cmd)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd, *tmp_cmd;
-	uint8_t *ctrl_data = NULL;
-	void __user *uptr_cmd;
-	void __user *uptr_value;
-	uint32_t cmd_len = sizeof(struct msm_ctrl_cmd);
-	uint32_t value_len;
-
-	tmp_cmd = (struct msm_ctrl_cmd *)ctrl->value;
-	uptr_cmd = (void __user *)ctrl->value;
-	uptr_value = (void __user *)tmp_cmd->value;
-	value_len = tmp_cmd->length;
-
-	D("%s: cmd type = %d, up1=0x%x, ulen1=%d, up2=0x%x, ulen2=%d\n",
-		__func__, tmp_cmd->type, (uint32_t)uptr_cmd, cmd_len,
-		(uint32_t)uptr_value, tmp_cmd->length);
-
-	ctrl_data = kzalloc(value_len+cmd_len, GFP_KERNEL);
-	if (ctrl_data == 0) {
-		pr_err("%s could not allocate memory\n", __func__);
-		rc = -ENOMEM;
-		goto end;
-	}
-	tmp_cmd = (struct msm_ctrl_cmd *)ctrl_data;
-	if (copy_from_user((void *)ctrl_data, uptr_cmd,
-					cmd_len)) {
-		pr_err("%s: copy_from_user failed.\n", __func__);
-		rc = -EINVAL;
-		goto end;
-	}
-	tmp_cmd->value = (void *)(ctrl_data+cmd_len);
-	if (uptr_value && tmp_cmd->length > 0) {
-		if (copy_from_user((void *)tmp_cmd->value, uptr_value,
-						value_len)) {
-			pr_err("%s: copy_from_user failed, size=%d\n",
-				__func__, value_len);
-			rc = -EINVAL;
-			goto end;
-		}
-	} else
-	tmp_cmd->value = NULL;
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd));  
-	ctrlcmd.type = MSM_V4L2_SET_CTRL_CMD;
-	ctrlcmd.length = cmd_len + value_len;
-	ctrlcmd.value = (void *)ctrl_data;
-	if (tmp_cmd->timeout_ms > 0)
-		ctrlcmd.timeout_ms = tmp_cmd->timeout_ms;
-	else
-		ctrlcmd.timeout_ms = 1000;
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-	D("%s: msm_server_control rc=%d\n", __func__, rc);
-	if (rc == 0) {
-		if (uptr_value && tmp_cmd->length > 0 &&
-			copy_to_user((void __user *)uptr_value,
-				(void *)(ctrl_data+cmd_len), tmp_cmd->length)) {
-			pr_err("%s: copy_to_user failed, size=%d\n",
-				__func__, tmp_cmd->length);
-			rc = -EINVAL;
-			goto end;
-		}
-		tmp_cmd->value = uptr_value;
-		if (copy_to_user((void __user *)uptr_cmd,
-			(void *)tmp_cmd, cmd_len)) {
-			pr_err("%s: copy_to_user failed in cpy, size=%d\n",
-				__func__, cmd_len);
-			rc = -EINVAL;
-			goto end;
-		}
-	}
-end:
-	D("%s: END, type = %d, vaddr = 0x%x, vlen = %d, status = %d, rc = %d\n",
-		__func__, tmp_cmd->type, (uint32_t)tmp_cmd->value,
-		tmp_cmd->length, tmp_cmd->status, rc);
-	kfree(ctrl_data);
-	ctrl_data = NULL;
-	return rc;
-}
-
-static int msm_server_s_ctrl(struct msm_cam_v4l2_device *pcam,
-				 struct v4l2_control *ctrl)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-	uint8_t ctrl_data[max_control_command_size];
-
-	WARN_ON(ctrl == NULL);
-	if (ctrl == NULL) {
-		pr_err("%s Invalid control\n", __func__);
-		return -EINVAL;
-	}
-	if (ctrl->id == MSM_V4L2_PID_CTRL_CMD)
-		return msm_server_proc_ctrl_cmd(pcam, ctrl, 1);
-
-	memset(ctrl_data, 0, sizeof(ctrl_data));
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd));  
-	ctrlcmd.type = MSM_V4L2_SET_CTRL;
-	ctrlcmd.length = sizeof(struct v4l2_control);
-	ctrlcmd.value = (void *)ctrl_data;
-	memcpy(ctrlcmd.value, ctrl, ctrlcmd.length);
-	ctrlcmd.timeout_ms = 1000;
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-
-	return rc;
-}
-
-static int msm_server_g_ctrl(struct msm_cam_v4l2_device *pcam,
-				 struct v4l2_control *ctrl)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-	uint8_t ctrl_data[max_control_command_size];
-
-	WARN_ON(ctrl == NULL);
-	if (ctrl == NULL) {
-		pr_err("%s Invalid control\n", __func__);
-		return -EINVAL;
-	}
-	if (ctrl->id == MSM_V4L2_PID_CTRL_CMD)
-		return msm_server_proc_ctrl_cmd(pcam, ctrl, 0);
-
-	memset(ctrl_data, 0, sizeof(ctrl_data));
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd));  
-	ctrlcmd.type = MSM_V4L2_GET_CTRL;
-	ctrlcmd.length = sizeof(struct v4l2_control);
-	ctrlcmd.value = (void *)ctrl_data;
-	memcpy(ctrlcmd.value, ctrl, ctrlcmd.length);
-	ctrlcmd.timeout_ms = 1000;
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-
-	ctrl->value = ((struct v4l2_control *)ctrlcmd.value)->value;
-
-	return rc;
-}
-
-static int msm_server_q_ctrl(struct msm_cam_v4l2_device *pcam,
-			struct v4l2_queryctrl *queryctrl)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-	uint8_t ctrl_data[max_control_command_size];
-
-	WARN_ON(queryctrl == NULL);
-	memset(ctrl_data, 0, sizeof(ctrl_data));
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd));  
-	ctrlcmd.type = MSM_V4L2_QUERY_CTRL;
-	ctrlcmd.length = sizeof(struct v4l2_queryctrl);
-	ctrlcmd.value = (void *)ctrl_data;
-	memcpy(ctrlcmd.value, queryctrl, ctrlcmd.length);
-	ctrlcmd.timeout_ms = 1000;
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-	D("%s: rc = %d\n", __func__, rc);
-
-	if (rc >= 0)
-		memcpy(queryctrl, ctrlcmd.value, sizeof(struct v4l2_queryctrl));
-
-	return rc;
-}
-
-static int msm_server_get_fmt(struct msm_cam_v4l2_device *pcam,
-		 int idx, struct v4l2_format *pfmt)
-{
-	struct v4l2_pix_format *pix = &pfmt->fmt.pix;
-
-	pix->width        = pcam->dev_inst[idx]->vid_fmt.fmt.pix.width;
-	pix->height       = pcam->dev_inst[idx]->vid_fmt.fmt.pix.height;
-	pix->field        = pcam->dev_inst[idx]->vid_fmt.fmt.pix.field;
-	pix->pixelformat  = pcam->dev_inst[idx]->vid_fmt.fmt.pix.pixelformat;
-	pix->bytesperline = pcam->dev_inst[idx]->vid_fmt.fmt.pix.bytesperline;
-	pix->colorspace   = pcam->dev_inst[idx]->vid_fmt.fmt.pix.colorspace;
-	pix->sizeimage    = pix->height * pix->bytesperline;
-
-	return 0;
-}
-
-static int msm_server_get_fmt_mplane(struct msm_cam_v4l2_device *pcam,
-		 int idx, struct v4l2_format *pfmt)
-{
-	*pfmt = pcam->dev_inst[idx]->vid_fmt;
-	return 0;
-}
-
-static int msm_server_try_fmt(struct msm_cam_v4l2_device *pcam,
-				 struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	int i = 0;
-	struct v4l2_pix_format *pix = &pfmt->fmt.pix;
-
-	D("%s: 0x%x\n", __func__, pix->pixelformat);
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE) {
-		pr_err("%s: pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE!\n",
-							__func__);
-		return -EINVAL;
-	}
-
-	
-	for (i = 0; i < pcam->num_fmts; i++) {
-		D("%s: usr_fmts.fourcc: 0x%x\n", __func__,
-			pcam->usr_fmts[i].fourcc);
-		if (pcam->usr_fmts[i].fourcc == pix->pixelformat)
-			break;
-	}
-
-	if (i == pcam->num_fmts) {
-		pr_err("%s: Format %x not found\n", __func__, pix->pixelformat);
-		return -EINVAL;
-	}
-	return rc;
-}
-
-static int msm_server_try_fmt_mplane(struct msm_cam_v4l2_device *pcam,
-				 struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	int i = 0;
-	struct v4l2_pix_format_mplane *pix_mp = &pfmt->fmt.pix_mp;
-
-	D("%s: 0x%x\n", __func__, pix_mp->pixelformat);
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
-		pr_err("%s: Incorrect format type %d ",
-			__func__, pfmt->type);
-		return -EINVAL;
-	}
-
-	
-	for (i = 0; i < pcam->num_fmts; i++) {
-		D("%s: usr_fmts.fourcc: 0x%x\n", __func__,
-			pcam->usr_fmts[i].fourcc);
-		if (pcam->usr_fmts[i].fourcc == pix_mp->pixelformat)
-			break;
-	}
-
-	if (i == pcam->num_fmts) {
-		pr_err("%s: Format %x not found\n",
-			__func__, pix_mp->pixelformat);
-		return -EINVAL;
-	}
-	return rc;
-}
-
-static int msm_camera_get_crop(struct msm_cam_v4l2_device *pcam,
-				int idx, struct v4l2_crop *crop)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-
-	BUG_ON(crop == NULL);
-
-	memset(&ctrlcmd, 0, sizeof(ctrlcmd));  
-	ctrlcmd.type = MSM_V4L2_GET_CROP;
-	ctrlcmd.length = sizeof(struct v4l2_crop);
-	ctrlcmd.value = (void *)crop;
-	ctrlcmd.timeout_ms = 1000;
-	ctrlcmd.vnode_id = pcam->vnode_id;
-	ctrlcmd.queue_idx = pcam->server_queue_idx;
-	ctrlcmd.stream_type = pcam->dev_inst[idx]->image_mode;
-	ctrlcmd.config_ident = g_server_dev.config_info.config_dev_id[0];
-
-	
-	rc = msm_server_control(&g_server_dev, &ctrlcmd);
-	D("%s: rc = %d\n", __func__, rc);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_querycap(struct file *f, void *pctx,
-				struct v4l2_capability *pcaps)
-{
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	
-	
-	pcaps->capabilities = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING;
-	return 0;
-}
-
-static int msm_camera_v4l2_queryctrl(struct file *f, void *pctx,
-				struct v4l2_queryctrl *pqctrl)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam->vid_lock);
-	rc = msm_server_q_ctrl(pcam, pqctrl);
-	mutex_unlock(&pcam->vid_lock);
-	return rc;
-}
-
-static int msm_camera_v4l2_g_ctrl(struct file *f, void *pctx,
-					struct v4l2_control *c)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam->vid_lock);
-	rc = msm_server_g_ctrl(pcam, c);
-	mutex_unlock(&pcam->vid_lock);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_s_ctrl(struct file *f, void *pctx,
-					struct v4l2_control *ctrl)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam->vid_lock);
-	switch (ctrl->id) {
-	case MSM_V4L2_PID_MMAP_INST:
-		D("%s: mmap_inst=(0x%p, %d)\n",
-			 __func__, pcam_inst, pcam_inst->my_index);
-		pcam_inst->is_mem_map_inst = 1;
-		break;
-	case MSM_V4L2_PID_MMAP_ENTRY:
-		if (copy_from_user(&pcam_inst->mem_map,
-			(void *)ctrl->value,
-			sizeof(struct msm_mem_map_info))) {
-			rc = -EFAULT;
-		} else
-			D("%s:mmap entry:cookie=0x%x,mem_type=%d,len=%d\n",
-				__func__, pcam_inst->mem_map.cookie,
-				pcam_inst->mem_map.mem_type,
-				pcam_inst->mem_map.length);
-		break;
-	default:
-		if (ctrl->id == MSM_V4L2_PID_CAM_MODE)
-			pcam->op_mode = ctrl->value;
-		rc = msm_server_s_ctrl(pcam, ctrl);
-		break;
-	}
-	mutex_unlock(&pcam->vid_lock);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_reqbufs(struct file *f, void *pctx,
-				struct v4l2_requestbuffers *pb)
-{
-	int rc = 0, i, j;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam_inst->inst_lock);
-
-	rc = vb2_reqbufs(&pcam_inst->vid_bufq, pb);
-	if (rc < 0) {
-		pr_err("%s reqbufs failed %d ", __func__, rc);
-		mutex_unlock(&pcam_inst->inst_lock);
-		return rc;
-	}
-	if (!pb->count) {
-		
-		pr_info("%s Inst %p freeing buffer offsets array",
-			__func__, pcam_inst);
-		for (j = 0 ; j < pcam_inst->buf_count ; j++) {
-			kfree(pcam_inst->buf_offset[j]);
-			pcam_inst->buf_offset[j] = NULL;
-		}
-		kfree(pcam_inst->buf_offset);
-		pcam_inst->buf_offset = NULL;
-		if (pcam_inst->vbqueue_initialized) {
-			vb2_queue_release(&pcam_inst->vid_bufq);
-			pcam_inst->vbqueue_initialized = 0;
-		}
-	} else {
-		pr_info("%s Inst %p Allocating buf_offset array",
-			__func__, pcam_inst);
-		
-		pcam_inst->buf_offset = (struct msm_cam_buf_offset **)
-			kzalloc(pb->count * sizeof(struct msm_cam_buf_offset *),
-							GFP_KERNEL);
-		if (!pcam_inst->buf_offset) {
-			pr_err("%s out of memory ", __func__);
-			mutex_unlock(&pcam_inst->inst_lock);
-			return -ENOMEM;
-		}
-		for (i = 0; i < pb->count; i++) {
-			pcam_inst->buf_offset[i] =
-				kzalloc(sizeof(struct msm_cam_buf_offset) *
-				pcam_inst->plane_info.num_planes, GFP_KERNEL);
-			if (!pcam_inst->buf_offset[i]) {
-				pr_err("%s out of memory ", __func__);
-				for (j = i-1 ; j >= 0; j--) {
-					kfree(pcam_inst->buf_offset[j]);
-					pcam_inst->buf_offset[j] = NULL;
-				}
-				kfree(pcam_inst->buf_offset);
-				pcam_inst->buf_offset = NULL;
-				mutex_unlock(&pcam_inst->inst_lock);
-				return -ENOMEM;
-			}
-		}
-	}
-	pcam_inst->buf_count = pb->count;
-	mutex_unlock(&pcam_inst->inst_lock);
-	return rc;
-}
-
-static int msm_camera_v4l2_querybuf(struct file *f, void *pctx,
-					struct v4l2_buffer *pb)
-{
-	
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	int rc = 0;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam_inst->inst_lock);
-	rc = vb2_querybuf(&pcam_inst->vid_bufq, pb);
-	mutex_unlock(&pcam_inst->inst_lock);
-	return rc;
-}
-
-static int msm_camera_v4l2_qbuf(struct file *f, void *pctx,
-					struct v4l2_buffer *pb)
-{
-	int rc = 0, i = 0;
-	
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst=%p, mode=%d, idx=%d\n", __func__, pcam_inst,
-		pcam_inst->image_mode, pb->index);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam_inst->inst_lock);
-
-	if (!pcam_inst->buf_offset) {
-		pr_err("%s Buffer is already released. Returning. ", __func__);
-		mutex_unlock(&pcam_inst->inst_lock);
-		return -EINVAL;
-	}
-
-	if (pb->type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
-		
-		if (pb->m.planes == NULL) {
-			pr_err("%s Planes array is null ", __func__);
-			mutex_unlock(&pcam_inst->inst_lock);
-			return -EINVAL;
-		}
-		for (i = 0; i < pcam_inst->plane_info.num_planes; i++) {
-			D("%s stored offsets for plane %d as"
-				"addr offset %d, data offset %d",
-				__func__, i, pb->m.planes[i].reserved[0],
-				pb->m.planes[i].data_offset);
-			pcam_inst->buf_offset[pb->index][i].data_offset =
-				pb->m.planes[i].data_offset;
-			pcam_inst->buf_offset[pb->index][i].addr_offset =
-				pb->m.planes[i].reserved[0];
-		}
-	} else {
-		D("%s stored reserved info %d", __func__, pb->reserved);
-		pcam_inst->buf_offset[pb->index][0].addr_offset = pb->reserved;
-	}
-
-	rc = vb2_qbuf(&pcam_inst->vid_bufq, pb);
-	D("%s, videobuf_qbuf mode %d and idx %d returns %d\n", __func__,
-		pcam_inst->image_mode, pb->index, rc);
-	mutex_unlock(&pcam_inst->inst_lock);
-	return rc;
-}
-
-static int msm_camera_v4l2_dqbuf(struct file *f, void *pctx,
-					struct v4l2_buffer *pb)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam_inst->inst_lock);
-	if (pcam_inst->streamon == 0) {
-		mutex_unlock(&pcam_inst->inst_lock);
-		return -EACCES;
-	}
-
-	rc = vb2_dqbuf(&pcam_inst->vid_bufq, pb,  f->f_flags & O_NONBLOCK);
-	D("%s, videobuf_dqbuf returns %d\n", __func__, rc);
-	mutex_unlock(&pcam_inst->inst_lock);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_streamon(struct file *f, void *pctx,
-					enum v4l2_buf_type buf_type)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst %p\n", __func__, pcam_inst);
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam->vid_lock);
-	mutex_lock(&pcam_inst->inst_lock);
-
-	if ((buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) &&
-		(buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE)) {
-		pr_err("%s Invalid buffer type ", __func__);
-		mutex_unlock(&pcam_inst->inst_lock);
-		mutex_unlock(&pcam->vid_lock);
-		return -EINVAL;
-	}
-
-	D("%s Calling videobuf_streamon", __func__);
-	
-	rc = vb2_streamon(&pcam_inst->vid_bufq, buf_type);
-	D("%s, videobuf_streamon returns %d\n", __func__, rc);
-
-	
-	pcam_inst->streamon = 1;
-	rc = msm_server_streamon(pcam, pcam_inst->my_index);
-	mutex_unlock(&pcam_inst->inst_lock);
-	mutex_unlock(&pcam->vid_lock);
-	D("%s rc = %d\n", __func__, rc);
-	return rc;
-}
-
-static int msm_camera_v4l2_streamoff(struct file *f, void *pctx,
-					enum v4l2_buf_type buf_type)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst %p\n", __func__, pcam_inst);
-	WARN_ON(pctx != f->private_data);
-
-	if ((buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) &&
-		(buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE)) {
-		pr_err("%s Invalid buffer type ", __func__);
-		return -EINVAL;
-	}
-
-	mutex_lock(&pcam->vid_lock);
-	mutex_lock(&pcam_inst->inst_lock);
-	pcam_inst->streamon = 0;
-	if (g_server_dev.use_count > 0)
-		rc = msm_server_streamoff(pcam, pcam_inst->my_index);
-	if (rc < 0)
-		pr_err("%s: hw failed to stop streaming\n", __func__);
-
-	
-	rc = vb2_streamoff(&pcam_inst->vid_bufq, buf_type);
-	D("%s, videobuf_streamoff returns %d\n", __func__, rc);
-	mutex_unlock(&pcam_inst->inst_lock);
-	mutex_unlock(&pcam->vid_lock);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_enum_fmt_cap(struct file *f, void *pctx,
-					struct v4l2_fmtdesc *pfmtdesc)
-{
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	const struct msm_isp_color_fmt *isp_fmt;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	if ((pfmtdesc->type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) &&
-		(pfmtdesc->type != V4L2_BUF_TYPE_VIDEO_CAPTURE))
-		return -EINVAL;
-
-	if (pfmtdesc->index >= pcam->num_fmts)
-		return -EINVAL;
-
-	isp_fmt = &pcam->usr_fmts[pfmtdesc->index];
-
-	if (isp_fmt->name)
-		strlcpy(pfmtdesc->description, isp_fmt->name,
-						sizeof(pfmtdesc->description));
-
-	pfmtdesc->pixelformat = isp_fmt->fourcc;
-
-	D("%s: [%d] 0x%x, %s\n", __func__, pfmtdesc->index,
-		isp_fmt->fourcc, isp_fmt->name);
-	return 0;
-}
-
-static int msm_camera_v4l2_g_fmt_cap(struct file *f,
-		void *pctx, struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return -EINVAL;
-
-	rc = msm_server_get_fmt(pcam, pcam_inst->my_index, pfmt);
-	D("%s: current_fmt->fourcc: 0x%08x, rc = %d\n", __func__,
-				pfmt->fmt.pix.pixelformat, rc);
-	return rc;
-}
-
-static int msm_camera_v4l2_g_fmt_cap_mplane(struct file *f,
-		void *pctx, struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE)
-		return -EINVAL;
-
-	rc = msm_server_get_fmt_mplane(pcam, pcam_inst->my_index, pfmt);
-	D("%s: current_fmt->fourcc: 0x%08x, rc = %d\n", __func__,
-					pfmt->fmt.pix_mp.pixelformat, rc);
-	return rc;
-}
-
-static int msm_camera_v4l2_try_fmt_cap(struct file *f, void *pctx,
-					struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam->vid_lock);
-
-	rc = msm_server_try_fmt(pcam, pfmt);
-	if (rc)
-		pr_err("Format %x not found, rc = %d\n",
-				pfmt->fmt.pix.pixelformat, rc);
-	mutex_unlock(&pcam->vid_lock);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_try_fmt_cap_mplane(struct file *f, void *pctx,
-					struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam->vid_lock);
-
-	rc = msm_server_try_fmt_mplane(pcam, pfmt);
-	if (rc)
-		pr_err("Format %x not found, rc = %d\n",
-				pfmt->fmt.pix_mp.pixelformat, rc);
-	mutex_unlock(&pcam->vid_lock);
-	return rc;
-}
-
-static int msm_camera_v4l2_s_fmt_cap(struct file *f, void *pctx,
-					struct v4l2_format *pfmt)
-{
-	int rc;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_media_controller *pmctl;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	D("%s, inst=0x%x,idx=%d,priv = 0x%p\n",
-		__func__, (u32)pcam_inst, pcam_inst->my_index,
-		(void *)pfmt->fmt.pix.priv);
-	WARN_ON(pctx != f->private_data);
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (pmctl == NULL)
-		return -EINVAL;
-
-	if (!pcam_inst->vbqueue_initialized) {
-		pmctl->mctl_vbqueue_init(pcam_inst, &pcam_inst->vid_bufq,
-					V4L2_BUF_TYPE_VIDEO_CAPTURE);
-		pcam_inst->vbqueue_initialized = 1;
-	}
-
-	mutex_lock(&pcam->vid_lock);
-
-	rc = msm_server_set_fmt(pcam, pcam_inst->my_index, pfmt);
-	if (rc < 0) {
-		pr_err("%s: msm_server_set_fmt Error: %d\n",
-				__func__, rc);
-	}
-	mutex_unlock(&pcam->vid_lock);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_s_fmt_cap_mplane(struct file *f, void *pctx,
-				struct v4l2_format *pfmt)
-{
-	int rc;
-	struct msm_cam_v4l2_device *pcam = video_drvdata(f);
-	struct msm_cam_media_controller *pmctl;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-			struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst %p\n", __func__, pcam_inst);
-	WARN_ON(pctx != f->private_data);
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (pmctl == NULL)
-		return -EINVAL;
-
-	if (!pcam_inst->vbqueue_initialized) {
-		pmctl->mctl_vbqueue_init(pcam_inst, &pcam_inst->vid_bufq,
-					V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE);
-		pcam_inst->vbqueue_initialized = 1;
-	}
-
-	mutex_lock(&pcam->vid_lock);
-	rc = msm_server_set_fmt_mplane(pcam, pcam_inst->my_index, pfmt);
-	mutex_unlock(&pcam->vid_lock);
-
-	return rc;
-}
-static int msm_camera_v4l2_g_jpegcomp(struct file *f, void *pctx,
-				struct v4l2_jpegcompression *pcomp)
-{
-	int rc = -EINVAL;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_s_jpegcomp(struct file *f, void *pctx,
-				struct v4l2_jpegcompression *pcomp)
-{
-	int rc = -EINVAL;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-
-static int msm_camera_v4l2_g_crop(struct file *f, void *pctx,
-					struct v4l2_crop *crop)
-{
-	int rc = -EINVAL;
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam->vid_lock);
-	rc = msm_camera_get_crop(pcam, pcam_inst->my_index, crop);
-	mutex_unlock(&pcam->vid_lock);
-	return rc;
-}
-
-static int msm_camera_v4l2_s_crop(struct file *f, void *pctx,
-					struct v4l2_crop *a)
-{
-	int rc = -EINVAL;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_camera_v4l2_g_parm(struct file *f, void *pctx,
-				struct v4l2_streamparm *a)
-{
-	int rc = -EINVAL;
-	return rc;
-}
-static int msm_vidbuf_get_path(u32 extendedmode)
-{
-	switch (extendedmode) {
-	case MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL:
-		return OUTPUT_TYPE_T;
-	case MSM_V4L2_EXT_CAPTURE_MODE_MAIN:
-		return OUTPUT_TYPE_S;
-	case MSM_V4L2_EXT_CAPTURE_MODE_VIDEO:
-		return OUTPUT_TYPE_V;
-	case MSM_V4L2_EXT_CAPTURE_MODE_DEFAULT:
-	case MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW:
-	default:
-		return OUTPUT_TYPE_P;
-	}
-}
-
-static int msm_camera_v4l2_s_parm(struct file *f, void *pctx,
-				struct v4l2_streamparm *a)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-	pcam_inst->image_mode = a->parm.capture.extendedmode;
-	pcam_inst->pcam->dev_inst_map[pcam_inst->image_mode] = pcam_inst;
-	pcam_inst->path = msm_vidbuf_get_path(pcam_inst->image_mode);
-	pr_info("%spath=%d,rc=%d\n", __func__,
-		pcam_inst->path, rc);
-	return rc;
-}
-
-static int msm_camera_v4l2_subscribe_event(struct v4l2_fh *fh,
-			struct v4l2_event_subscription *sub)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst =
-		(struct msm_cam_v4l2_dev_inst *)container_of(fh,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s:fh = 0x%x, type = 0x%x\n", __func__, (u32)fh, sub->type);
-	if (pcam_inst->my_index != 0)
-		return -EINVAL;
-	if (sub->type == V4L2_EVENT_ALL)
-		sub->type = V4L2_EVENT_PRIVATE_START+MSM_CAM_APP_NOTIFY_EVENT;
-	rc = v4l2_event_subscribe(fh, sub);
-	if (rc < 0)
-		D("%s: failed for evtType = 0x%x, rc = %d\n",
-						__func__, sub->type, rc);
-	return rc;
-}
-
-static int msm_camera_v4l2_unsubscribe_event(struct v4l2_fh *fh,
-			struct v4l2_event_subscription *sub)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst =
-		(struct msm_cam_v4l2_dev_inst *)container_of(fh,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s: fh = 0x%x\n", __func__, (u32)fh);
-	if (pcam_inst->my_index != 0)
-		return -EINVAL;
-
-	rc = v4l2_event_unsubscribe(fh, sub);
-	D("%s: rc = %d\n", __func__, rc);
-	return rc;
-}
-
-static int msm_server_v4l2_subscribe_event(struct v4l2_fh *fh,
-			struct v4l2_event_subscription *sub)
-{
-	int rc = 0;
-
-	D("%s: fh = 0x%x, type = 0x%x", __func__, (u32)fh, sub->type);
-	if (sub->type == V4L2_EVENT_ALL) {
-		
-		sub->type = V4L2_EVENT_PRIVATE_START + MSM_CAM_RESP_CTRL;
-		D("sub->type start = 0x%x\n", sub->type);
-		do {
-			rc = v4l2_event_subscribe(fh, sub);
-			if (rc < 0) {
-				D("%s: failed for evtType = 0x%x, rc = %d\n",
-						__func__, sub->type, rc);
-			
-			sub->type = V4L2_EVENT_ALL;
-			v4l2_event_unsubscribe(fh, sub);
-			return rc;
-			} else
-				D("%s: subscribed evtType = 0x%x, rc = %d\n",
-						__func__, sub->type, rc);
-			sub->type++;
-			D("sub->type while = 0x%x\n", sub->type);
-		} while (sub->type !=
-			V4L2_EVENT_PRIVATE_START + MSM_SVR_RESP_MAX);
-	} else {
-		D("sub->type not V4L2_EVENT_ALL = 0x%x\n", sub->type);
-		rc = v4l2_event_subscribe(fh, sub);
-		if (rc < 0)
-			D("%s: failed for evtType = 0x%x, rc = %d\n",
-						__func__, sub->type, rc);
-	}
-
-	D("%s: rc = %d\n", __func__, rc);
-	return rc;
-}
-
-static int msm_server_v4l2_unsubscribe_event(struct v4l2_fh *fh,
-			struct v4l2_event_subscription *sub)
-{
-	int rc = 0;
-
-	D("%s: fh = 0x%x\n", __func__, (u32)fh);
-	rc = v4l2_event_unsubscribe(fh, sub);
-	D("%s: rc = %d\n", __func__, rc);
-	return rc;
-}
-
-static const struct v4l2_ioctl_ops g_msm_ioctl_ops = {
-	.vidioc_querycap = msm_camera_v4l2_querycap,
-
-	.vidioc_s_crop = msm_camera_v4l2_s_crop,
-	.vidioc_g_crop = msm_camera_v4l2_g_crop,
-
-	.vidioc_queryctrl = msm_camera_v4l2_queryctrl,
-	.vidioc_g_ctrl = msm_camera_v4l2_g_ctrl,
-	.vidioc_s_ctrl = msm_camera_v4l2_s_ctrl,
-
-	.vidioc_reqbufs = msm_camera_v4l2_reqbufs,
-	.vidioc_querybuf = msm_camera_v4l2_querybuf,
-	.vidioc_qbuf = msm_camera_v4l2_qbuf,
-	.vidioc_dqbuf = msm_camera_v4l2_dqbuf,
-
-	.vidioc_streamon = msm_camera_v4l2_streamon,
-	.vidioc_streamoff = msm_camera_v4l2_streamoff,
-
-	
-	.vidioc_enum_fmt_vid_cap = msm_camera_v4l2_enum_fmt_cap,
-	.vidioc_enum_fmt_vid_cap_mplane = msm_camera_v4l2_enum_fmt_cap,
-	.vidioc_try_fmt_vid_cap = msm_camera_v4l2_try_fmt_cap,
-	.vidioc_try_fmt_vid_cap_mplane = msm_camera_v4l2_try_fmt_cap_mplane,
-	.vidioc_g_fmt_vid_cap = msm_camera_v4l2_g_fmt_cap,
-	.vidioc_g_fmt_vid_cap_mplane = msm_camera_v4l2_g_fmt_cap_mplane,
-	.vidioc_s_fmt_vid_cap = msm_camera_v4l2_s_fmt_cap,
-	.vidioc_s_fmt_vid_cap_mplane = msm_camera_v4l2_s_fmt_cap_mplane,
-
-	.vidioc_g_jpegcomp = msm_camera_v4l2_g_jpegcomp,
-	.vidioc_s_jpegcomp = msm_camera_v4l2_s_jpegcomp,
-
-	
-	.vidioc_g_parm =  msm_camera_v4l2_g_parm,
-	.vidioc_s_parm =  msm_camera_v4l2_s_parm,
-
-	
-	.vidioc_subscribe_event = msm_camera_v4l2_subscribe_event,
-	.vidioc_unsubscribe_event = msm_camera_v4l2_unsubscribe_event,
-};
-
-static int msm_cam_server_open_session(struct msm_cam_server_dev *ps,
-	struct msm_cam_v4l2_device *pcam)
-{
-	int rc = 0;
-	struct msm_cam_media_controller *pmctl;
-	D("%s\n", __func__);
-
-	if (!ps || !pcam) {
-		pr_err("%s NULL pointer passed in!\n", __func__);
-		return rc;
-	}
-
-	if (atomic_read(&ps->number_pcam_active) > 0) {
-		pr_err("%s Cannot have more than one active camera %d\n",
-			__func__, atomic_read(&ps->number_pcam_active));
-		return -EINVAL;
-	}
-	
-	ps->pcam_active = pcam;
-	atomic_inc(&ps->number_pcam_active);
-
-	D("config pcam = 0x%p\n", ps->pcam_active);
-
-	
-	msm_mctl_init(pcam);
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if(!pmctl) return -EINVAL;
-	pmctl->axi_sdev = ps->axi_device[0];
-	pmctl->isp_sdev = ps->isp_subdev[0];
-
-#ifdef CONFIG_PERFLOCK
-	pmctl->cam_perf_lock = &ps->cam_perf_lock;
-#endif
-
-	return rc;
-
-}
-
-static int msm_cam_server_close_session(struct msm_cam_server_dev *ps,
-	struct msm_cam_v4l2_device *pcam)
-{
-	int rc = 0;
-	D("%s\n", __func__);
-
-	if (!ps || !pcam) {
-		D("%s NULL pointer passed in!\n", __func__);
-		return rc;
-	}
-
-
-	atomic_dec(&ps->number_pcam_active);
-	ps->pcam_active = NULL;
-	msm_mctl_free(pcam);
-
-	return rc;
-}
-
-
-int msm_server_open_client(int *p_qidx)
-{
-	int rc = 0;
-	int server_q_idx = 0;
-	struct msm_cam_server_queue *queue = NULL;
-
-	mutex_lock(&g_server_dev.server_lock);
-	server_q_idx = msm_find_free_queue();
-	if (server_q_idx < 0) {
-		mutex_unlock(&g_server_dev.server_lock);
-		return server_q_idx;
-	}
-
-	*p_qidx = server_q_idx;
-	queue = &g_server_dev.server_queue[server_q_idx];
-	queue->ctrl_data = kzalloc(sizeof(uint8_t) *
-		max_control_command_size, GFP_KERNEL);
-	msm_queue_init(&queue->ctrl_q, "control");
-	msm_queue_init(&queue->eventData_q, "eventdata");
-	queue->queue_active = 1;
-	mutex_unlock(&g_server_dev.server_lock);
-	return rc;
-}
-
-int msm_server_send_ctrl(struct msm_ctrl_cmd *out,
-	int ctrl_id)
-{
-	int rc = 0;
-	void *value;
-	struct msm_queue_cmd *rcmd;
-	struct msm_queue_cmd *event_qcmd;
-	struct msm_ctrl_cmd *ctrlcmd;
-	struct msm_cam_server_dev *server_dev = &g_server_dev;
-	struct msm_device_queue *queue =
-		&server_dev->server_queue[out->queue_idx].ctrl_q;
-
-	struct v4l2_event v4l2_evt;
-	struct msm_isp_event_ctrl *isp_event;
-	isp_event = kzalloc(sizeof(struct msm_isp_event_ctrl), GFP_KERNEL);
-	if (!isp_event) {
-		pr_err("%s Insufficient memory. return", __func__);
-		return -ENOMEM;
-	}
-	event_qcmd = kzalloc(sizeof(struct msm_queue_cmd), GFP_KERNEL);
-	if (!event_qcmd) {
-		pr_err("%s Insufficient memory. return", __func__);
-		kfree(isp_event);
-		return -ENOMEM;
-	}
-
-	D("%s\n", __func__);
-	mutex_lock(&server_dev->server_queue_lock);
-	if (++server_dev->server_evt_id == 0)
-		server_dev->server_evt_id++;
-
-	D("%s qid %d evtid %d\n", __func__, out->queue_idx,
-		server_dev->server_evt_id);
-	server_dev->server_queue[out->queue_idx].evt_id =
-		server_dev->server_evt_id;
-	v4l2_evt.type = V4L2_EVENT_PRIVATE_START + ctrl_id;
-	v4l2_evt.u.data[0] = out->queue_idx;
-	
-	isp_event->resptype = MSM_CAM_RESP_V4L2;
-	isp_event->isp_data.ctrl = *out;
-	isp_event->isp_data.ctrl.evt_id = server_dev->server_evt_id;
-
-	atomic_set(&event_qcmd->on_heap, 1);
-	event_qcmd->command = isp_event;
-
-	msm_enqueue(&server_dev->server_queue[out->queue_idx].eventData_q,
-				&event_qcmd->list_eventdata);
-
-	v4l2_event_queue(server_dev->server_command_queue.pvdev,
-					  &v4l2_evt);
-	D("%s v4l2_event_queue: type = 0x%x\n", __func__, v4l2_evt.type);
-	mutex_unlock(&server_dev->server_queue_lock);
-
-	
-	D("Waiting for config status\n");
-	rc = wait_event_interruptible_timeout(queue->wait,
-		!list_empty_careful(&queue->list),
-		msecs_to_jiffies(out->timeout_ms));
-	D("Waiting is over for config status\n");
-	if (list_empty_careful(&queue->list)) {
-		if (!rc)
-			rc = -ETIMEDOUT;
-		if (rc < 0) {
-			kfree(isp_event);
-			pr_err("%s: wait_event error %d\n", __func__, rc);
-			return rc;
-		}
-	}
-
-	rcmd = msm_dequeue(queue, list_control);
-	BUG_ON(!rcmd);
-	if(!rcmd) return -EINVAL;
-	D("%s Finished servicing ioctl\n", __func__);
-
-	ctrlcmd = (struct msm_ctrl_cmd *)(rcmd->command);
-	value = out->value;
-	if (ctrlcmd->length > 0)
-		memcpy(value, ctrlcmd->value, ctrlcmd->length);
-
-	memcpy(out, ctrlcmd, sizeof(struct msm_ctrl_cmd));
-	out->value = value;
-
-	kfree(ctrlcmd);
-
-	free_qcmd(rcmd);
-	kfree(isp_event);
-	D("%s: rc %d\n", __func__, rc);
-	
-	if (rc >= 0) {
-		
-		if (out->status == 0)
-			rc = -1;
-		else if (out->status == 1 || out->status == 4)
-			rc = 0;
-		else
-			rc = -EINVAL;
-	}
-	return rc;
-}
-
-int msm_server_close_client(int idx)
-{
-	int rc = 0;
-	struct msm_cam_server_queue *queue = NULL;
-	mutex_lock(&g_server_dev.server_lock);
-	queue = &g_server_dev.server_queue[idx];
-	queue->queue_active = 0;
-	kfree(queue->ctrl_data);
-	queue->ctrl_data = NULL;
-	msm_queue_drain(&queue->ctrl_q, list_control);
-	msm_drain_eventq(&queue->eventData_q);
-	mutex_unlock(&g_server_dev.server_lock);
-	return rc;
-}
-
-static int msm_open(struct file *f)
-{
-	int i;
-	int rc = -EINVAL;
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	int ion_client_created = 0;
-#endif
-	int server_q_idx = 0;
-
-	
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_media_controller *pmctl = NULL;
-	struct msm_cam_server_queue *queue = NULL;
-	D("%s\n", __func__);
-
-	if (!pcam) {
-		pr_err("%s NULL pointer passed in!\n", __func__);
-		return rc;
-	}
-	if (!g_server_dev.use_count) {
-		pr_err("%s: error, daemon not yet started.", __func__);
-		return -EINVAL;
-	}
-	mutex_lock(&pcam->vid_lock);
-	for (i = 0; i < MSM_DEV_INST_MAX; i++) {
-		if (pcam->dev_inst[i] == NULL)
-			break;
-	}
-
-	server_q_idx = msm_find_free_queue();
-	if (server_q_idx < 0)
-		return server_q_idx;
-
-	
-	if (i == MSM_DEV_INST_MAX) {
-		mutex_unlock(&pcam->vid_lock);
-		return rc;
-	}
-	pcam_inst = kzalloc(sizeof(struct msm_cam_v4l2_dev_inst), GFP_KERNEL);
-	if (!pcam_inst) {
-		mutex_unlock(&pcam->vid_lock);
-		return rc;
-	}
-	mutex_init(&pcam_inst->inst_lock);
-	pcam_inst->sensor_pxlcode = pcam->usr_fmts[0].pxlcode;
-	pcam_inst->my_index = i;
-	pcam_inst->pcam = pcam;
-	pcam->dev_inst[i] = pcam_inst;
-
-	D("%s index %d nodeid %d count %d\n", __func__,
-			pcam_inst->my_index,
-			pcam->vnode_id, pcam->use_count);
-	pcam->use_count++;
-	D("%s use_count %d\n", __func__, pcam->use_count);
-	if (pcam->use_count == 1) {
-		int ges_evt = MSM_V4L2_GES_CAM_OPEN;
-
-		pr_info("%s use_count %d\n", __func__, pcam->use_count); 
-
-		
-		if (atomic_read(&g_server_dev.number_pcam_active) > 0) {
-			pr_err("%s: Cannot have more than one active camera\n", __func__);
-			rc = -EINVAL;
-			goto more_than_one_active_cam_error;
-		}
-		
-		pcam->server_queue_idx = server_q_idx;
-		queue = &g_server_dev.server_queue[server_q_idx];
-		queue->ctrl_data = kzalloc(sizeof(uint8_t) *
-			max_control_command_size, GFP_KERNEL);
-		msm_queue_init(&queue->ctrl_q, "control");
-		msm_queue_init(&queue->eventData_q, "eventdata");
-		queue->queue_active = 1;
-
-		msm_cam_server_subdev_notify(g_server_dev.gesture_device,
-			NOTIFY_GESTURE_CAM_EVT, &ges_evt);
-
-
-		rc = msm_cam_server_open_session(&g_server_dev, pcam);
-		if (rc < 0) {
-			pr_err("%s: cam_server_open_session failed %d\n",
-			__func__, rc);
-			goto msm_cam_server_open_session_failed;
-		}
-
-		pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-		if (!pmctl)  {
-			rc = -EINVAL;
-			goto msm_cam_server_open_session_failed;
-		}
-
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-		{
-			char ion_debug_name[64];
-			snprintf(ion_debug_name, 64, "%u", task_pid_nr(current->group_leader));
-			pmctl->client = msm_ion_client_create(-1, ion_debug_name);
-		}
-		kref_init(&pmctl->refcount);
-		ion_client_created = 1;
-#endif
-		
-		if (!pmctl->mctl_open) {
-			D("%s: media contoller is not inited\n", __func__);
-			rc = -ENODEV;
-			goto mctl_open_failed;
-		}
-
-		
-		D("%s: call mctl_open\n", __func__);
-		rc = pmctl->mctl_open(pmctl, MSM_APPS_ID_V4L2);
-
-		if (rc < 0) {
-			pr_err("%s: HW open failed rc = 0x%x\n",  __func__, rc);
-			goto mctl_open_failed;
-		}
-		pmctl->pcam_ptr = pcam;
-
-		rc = msm_setup_v4l2_event_queue(&pcam_inst->eventHandle,
-			pcam->pvdev);
-		if (rc < 0) {
-			pr_err("%s: msm_setup_v4l2_event_queue failed %d",
-				__func__, rc);
-			goto mctl_event_q_setup_failed;
-		}
-	}
-	pcam_inst->vbqueue_initialized = 0;
-	rc = 0;
-
-	f->private_data = &pcam_inst->eventHandle;
-
-	D("f->private_data = 0x%x, pcam = 0x%x\n",
-		(u32)f->private_data, (u32)pcam_inst);
-
-
-	if (pcam->use_count == 1) {
-		rc = msm_send_open_server(pcam);
-		if (rc < 0 && rc != -ERESTARTSYS) {
-			pr_err("%s: msm_send_open_server failed %d\n",
-				__func__, rc);
-			goto msm_send_open_server_failed;
-		}
-	}
-	mutex_unlock(&pcam->vid_lock);
-	D("%s: end\n", __func__);
-	return rc;
-	
-msm_send_open_server_failed:
-	v4l2_fh_del(&pcam_inst->eventHandle);
-	v4l2_fh_exit(&pcam_inst->eventHandle);
-mctl_event_q_setup_failed:
-	if (pmctl->mctl_release)
-		if (pmctl->mctl_release(pmctl) < 0)
-			pr_err("%s: mctl_release failed\n", __func__);
-mctl_open_failed:
-
-	if (pcam->use_count == 1) {
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-		if (ion_client_created) {
-			D("%s: destroy ion client", __func__);
-			kref_put(&pmctl->refcount, msm_release_ion_client);
-		}
-#endif
-		if (msm_cam_server_close_session(&g_server_dev, pcam) < 0)
-			pr_err("%s: msm_cam_server_close_session failed\n",
-				__func__);
-	}
-msm_cam_server_open_session_failed:
-	if (pcam->use_count == 1) {
-		if (queue) {
-			queue->queue_active = 0;
-			msm_drain_eventq(&queue->eventData_q);
-			kfree(queue->ctrl_data);
-			queue->ctrl_data = NULL;
-			msm_queue_drain(&queue->ctrl_q, list_control);
-			msm_drain_eventq(&queue->eventData_q);
-			queue = NULL;
-		}
-
-		pcam->dev_inst[i] = NULL;
-		pcam->use_count = 0;
-	}
-more_than_one_active_cam_error:
-	pcam->dev_inst[i] = NULL;
-	mutex_unlock(&pcam->vid_lock);
-	kfree(pcam_inst);
-	pr_err("%s: error end", __func__);
-	return rc;
-}
-
-int msm_cam_server_close_mctl_session(struct msm_cam_v4l2_device *pcam)
-{
-	int rc = 0;
-	struct msm_cam_media_controller *pmctl = NULL;
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (!pmctl) {
-		D("%s: invalid handle\n", __func__);
-		return -ENODEV;
-	}
-
-	if (pmctl->mctl_release) {
-		rc = pmctl->mctl_release(pmctl);
-		if (rc < 0)
-			pr_err("mctl_release fails %d\n", rc);
-	}
-
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	kref_put(&pmctl->refcount, msm_release_ion_client);
-#endif
-
-	rc = msm_cam_server_close_session(&g_server_dev, pcam);
-	if (rc < 0)
-		pr_err("msm_cam_server_close_session fails %d\n", rc);
-
-	return rc;
-}
-
-int msm_cam_server_open_mctl_session(struct msm_cam_v4l2_device *pcam,
-	int *p_active)
-{
-	int rc = 0;
-	struct msm_cam_media_controller *pmctl = NULL;
-	pr_info("%s: %p", __func__, g_server_dev.pcam_active);
-	*p_active = 0;
-	if (g_server_dev.pcam_active) {
-		pr_info("%s: Active camera present return", __func__);
-		return 0;
-	}
-	rc = msm_cam_server_open_session(&g_server_dev, pcam);
-	if (rc < 0) {
-		pr_err("%s: cam_server_open_session failed %d\n",
-		__func__, rc);
-		return rc;
-	}
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	
-	if (!pmctl) {
-		pr_err("%s: pmctl is NULL\n",
-			 __func__);
-		rc = -ENODEV;
-		return rc;
-	}
-	
-	
-	if (!pmctl->mctl_open) {
-		D("%s: media contoller is not inited\n",
-			 __func__);
-		rc = -ENODEV;
-		return rc;
-	}
-
-	D("%s: call mctl_open\n", __func__);
-	rc = pmctl->mctl_open(pmctl, MSM_APPS_ID_V4L2);
-
-	if (rc < 0) {
-		pr_err("%s: HW open failed rc = 0x%x\n",  __func__, rc);
-		return rc;
-	}
-	pmctl->pcam_ptr = pcam;
-	*p_active = 1;	
-	return rc;
-}
-
-static int msm_addr_remap(struct msm_cam_v4l2_dev_inst *pcam_inst,
-				struct vm_area_struct *vma)
-{
-	int phyaddr;
-	int retval;
-	unsigned long size;
-	int rc = 0;
-	struct msm_cam_media_controller *mctl;
-
-	mctl = msm_camera_get_mctl(pcam_inst->pcam->mctl_handle);
-	if (!mctl) {
-		pr_err("%s: invalid mctl pointer", __func__);
-		return -EFAULT;
-	}
-
-	rc = msm_pmem_region_get_phy_addr(&mctl->stats_info.pmem_stats_list,
-			&pcam_inst->mem_map,
-			&phyaddr);
-	if (rc) {
-		pr_err("%s: cannot map vaddr", __func__);
-		return -EFAULT;
-	}
-	size = vma->vm_end - vma->vm_start;
-	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
-	retval = remap_pfn_range(vma, vma->vm_start,
-			phyaddr >> PAGE_SHIFT,
-			size, vma->vm_page_prot);
-	if (retval) {
-		pr_err("%s:mmap: remap failed with error %d. ",
-			   __func__, retval);
-		memset(&pcam_inst->mem_map, 0, sizeof(pcam_inst->mem_map));
-		return -ENOMEM;
-	}
-	D("%s:mmap: phy_addr=0x%x: %08lx-%08lx, pgoff %08lx\n",
-		   __func__, (uint32_t)phyaddr,
-		   vma->vm_start, vma->vm_end, vma->vm_pgoff);
-	memset(&pcam_inst->mem_map, 0, sizeof(pcam_inst->mem_map));
-	return 0;
-}
-
-static int msm_mmap(struct file *f, struct vm_area_struct *vma)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("mmap called, vma=0x%08lx\n", (unsigned long)vma);
-
-	if (pcam_inst->is_mem_map_inst &&
-		pcam_inst->mem_map.cookie) {
-		rc = msm_addr_remap(pcam_inst, vma);
-		D("%s: msm_addr_remap ret=%d\n", __func__, rc);
-		return rc;
-	} else
-		rc = vb2_mmap(&pcam_inst->vid_bufq, vma);
-	D("vma start=0x%08lx, size=%ld, ret=%d\n",
-		(unsigned long)vma->vm_start,
-		(unsigned long)vma->vm_end - (unsigned long)vma->vm_start,
-		rc);
-
-	return rc;
-}
-
-void msm_release_ion_client(struct kref *ref)
-{
-	struct msm_cam_media_controller *mctl = container_of(ref,
-		struct msm_cam_media_controller, refcount);
-	pr_info("%s Calling ion_client_destroy\n", __func__);
-
-	if (mctl)
-		ion_client_destroy(mctl->client);
-}
-
-static int msm_close(struct file *f)
-{
-	int rc = 0,i=0;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_server_queue *queue;
-	struct msm_cam_media_controller *pmctl;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-	pcam = pcam_inst->pcam;
-	if (!pcam) {
-		pr_err("%s NULL pointer of camera device!\n", __func__);
-		return -EINVAL;
-	}
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (!pmctl) {
-		pr_err("%s NULL mctl pointer\n", __func__);
-		return -EINVAL;
-	}
-
-
-	mutex_lock(&pcam->vid_lock);
-	mutex_lock(&pcam_inst->inst_lock);
-
-	if (pcam_inst->streamon) {
-	
-	#if 0
-		if (pmctl->mctl_release) {
-			rc = pmctl->mctl_release(pmctl);
-			if (rc < 0)
-				pr_err("mctl_release fails %d\n", rc);
-		}
-		pmctl->mctl_release = NULL;
-	#endif
-	
-		msm_cam_stop_hardware(pcam);
-	}
-
-	pcam_inst->streamon = 0;
-	pcam->use_count--;
-	pcam->dev_inst_map[pcam_inst->image_mode] = NULL;
-
-	
-	pr_info("%s Inst %p freeing buffer offsets array",__func__, pcam_inst);
-	if (pcam_inst->buf_offset) {
-		for (i = 0 ; i < pcam_inst->buf_count ; i++)
-			kfree(pcam_inst->buf_offset[i]);
-		kfree(pcam_inst->buf_offset);
-		pcam_inst->buf_offset = NULL;
-	}
-	
-	if (pcam_inst->vbqueue_initialized)
-		vb2_queue_release(&pcam_inst->vid_bufq);
-	pr_info("%s Closing down instance %p, [%d, %d]", __func__, pcam_inst, pcam->use_count , g_server_dev.use_count);
-	D("%s index %d nodeid %d count %d\n", __func__, pcam_inst->my_index,
-	pcam->vnode_id, pcam->use_count);
-
-	pcam->dev_inst[pcam_inst->my_index] = NULL;
-	if (pcam_inst->my_index == 0) {
-		v4l2_fh_del(&pcam_inst->eventHandle);
-		v4l2_fh_exit(&pcam_inst->eventHandle);
-	}
-	mutex_unlock(&pcam_inst->inst_lock);
-	mutex_destroy(&pcam_inst->inst_lock);
-	kfree(pcam_inst);
-	f->private_data = NULL;
-
-	if (pcam->use_count == 0) {
-		int ges_evt = MSM_V4L2_GES_CAM_CLOSE;
-		
-		struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(pmctl->sensor_sdev);
-		if(s_ctrl && s_ctrl->sensor_first_mutex)  {
-			mutex_lock(s_ctrl->sensor_first_mutex);
-			mutex_unlock(s_ctrl->sensor_first_mutex);
-		}
-
-		if (g_server_dev.use_count > 0) {
-			rc = msm_send_close_server(pcam);
-			if (rc < 0)
-				pr_err("msm_send_close_server failed %d\n", rc);
-		}
-		if (pmctl->mctl_release) {
-			rc = pmctl->mctl_release(pmctl);
-			if (rc < 0)
-				pr_err("mctl_release fails %d\n", rc);
-		}
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-		kref_put(&pmctl->refcount, msm_release_ion_client);
-#endif
-		mutex_lock(&g_server_dev.server_queue_lock);
-		queue = &g_server_dev.server_queue[pcam->server_queue_idx];
-		if (queue) {
-			queue->queue_active = 0;
-			if(queue->ctrl_data)  kfree(queue->ctrl_data);
-			queue->ctrl_data = NULL;
-			msm_queue_drain(&queue->ctrl_q, list_control);
-			msm_drain_eventq(&queue->eventData_q);
-			
-		}
-		mutex_unlock(&g_server_dev.server_queue_lock);
-
-		rc = msm_cam_server_close_session(&g_server_dev, pcam);
-		if (rc < 0)
-			pr_err("msm_cam_server_close_session fails %d\n", rc);
-
-		msm_cam_server_subdev_notify(g_server_dev.gesture_device,
-			NOTIFY_GESTURE_CAM_EVT, &ges_evt);
-	}
-	mutex_unlock(&pcam->vid_lock);
-	return rc;
-}
-
-static unsigned int msm_poll(struct file *f, struct poll_table_struct *wait)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-	pcam = pcam_inst->pcam;
-	D("%s\n", __func__);
-	if (!pcam) {
-		pr_err("%s NULL pointer of camera device!\n", __func__);
-		return -EINVAL;
-	}
-	if (pcam_inst->my_index == 0) {
-		poll_wait(f, &(pcam_inst->eventHandle.events->wait), wait);
-		if (v4l2_event_pending(&pcam_inst->eventHandle))
-			rc |= POLLPRI;
-	} else {
-		if (!pcam_inst->vid_bufq.streaming) {
-			D("%s vid_bufq.streaming is off, inst=0x%x\n",
-			__func__, (u32)pcam_inst);
-			return -EINVAL;
-		}
-		rc |= vb2_poll(&pcam_inst->vid_bufq, f, wait);
-	}
-	D("%s returns, rc  = 0x%x\n", __func__, rc);
-	return rc;
-}
-
-static unsigned int msm_poll_server(struct file *fp,
-					struct poll_table_struct *wait)
-{
-	int rc = 0;
-
-	D("%s\n", __func__);
-	poll_wait(fp,
-		 &g_server_dev.server_command_queue.eventHandle.events->wait,
-		 wait);
-	if (v4l2_event_pending(&g_server_dev.server_command_queue.eventHandle))
-		rc |= POLLPRI;
-
-	return rc;
-}
-static long msm_ioctl_server(struct file *file, void *fh,
-		bool valid_prio, int cmd, void *arg)
-{
-	int rc = -EINVAL;
-	struct msm_camera_v4l2_ioctl_t *ioctl_ptr = arg;
-	struct msm_camera_info temp_cam_info;
-	struct msm_cam_config_dev_info temp_config_info;
-	struct msm_mctl_node_info temp_mctl_info;
-	int i;
-
-	D("%s: cmd %d\n", __func__, _IOC_NR(cmd));
-
-	switch (cmd) {
-	case MSM_CAM_V4L2_IOCTL_GET_CAMERA_INFO:
-		if (copy_from_user(&temp_cam_info,
-			(void __user *)ioctl_ptr->ioctl_ptr,
-			sizeof(struct msm_camera_info))) {
-			rc = -EINVAL;
-			return rc;
-		}
-		for (i = 0; i < g_server_dev.camera_info.num_cameras; i++) {
-			if (copy_to_user((void __user *)
-				temp_cam_info.video_dev_name[i],
-				g_server_dev.camera_info.video_dev_name[i],
-				strnlen(
-				g_server_dev.camera_info.video_dev_name[i],
-				MAX_DEV_NAME_LEN))) {
-				rc = -EINVAL;
-				return rc;
-			}
-			temp_cam_info.has_3d_support[i] =
-				g_server_dev.camera_info.has_3d_support[i];
-			temp_cam_info.is_internal_cam[i] =
-				g_server_dev.camera_info.is_internal_cam[i];
-			temp_cam_info.s_mount_angle[i] =
-				g_server_dev.camera_info.s_mount_angle[i];
-			temp_cam_info.sensor_type[i] =
-				g_server_dev.camera_info.sensor_type[i];
-
-		}
-		temp_cam_info.num_cameras =
-			g_server_dev.camera_info.num_cameras;
-		if (copy_to_user((void __user *)ioctl_ptr->ioctl_ptr,
-				&temp_cam_info,
-				sizeof(struct msm_camera_info))) {
-					rc = -EINVAL;
-					return rc;
-		}
-		rc = 0;
-		break;
-
-	case MSM_CAM_V4L2_IOCTL_GET_CONFIG_INFO:
-		if (copy_from_user(&temp_config_info,
-				(void __user *)ioctl_ptr->ioctl_ptr,
-				sizeof(struct msm_cam_config_dev_info))) {
-			rc = -EINVAL;
-			return rc;
-		}
-		for (i = 0;
-		 i < g_server_dev.config_info.num_config_nodes; i++) {
-			if (copy_to_user(
-			(void __user *)temp_config_info.config_dev_name[i],
-			g_server_dev.config_info.config_dev_name[i],
-			strlen(g_server_dev.config_info.config_dev_name[i]))) {
-				rc = -EINVAL;
-				return rc;
-			}
-		}
-		temp_config_info.num_config_nodes =
-			g_server_dev.config_info.num_config_nodes;
-		if (copy_to_user((void __user *)ioctl_ptr->ioctl_ptr,
-							  &temp_config_info,
-				sizeof(struct msm_cam_config_dev_info))) {
-			rc = -EINVAL;
-			return rc;
-		}
-		rc = 0;
-		break;
-	case MSM_CAM_V4L2_IOCTL_GET_MCTL_INFO:
-		if (copy_from_user(&temp_mctl_info,
-				(void __user *)ioctl_ptr->ioctl_ptr,
-				sizeof(struct msm_mctl_node_info))) {
-			rc = -EINVAL;
-			return rc;
-		}
-
-		for (i = 0; i < g_server_dev.mctl_node_info.num_mctl_nodes;
-				i++) {
-			if (copy_to_user((void __user *)
-			temp_mctl_info.mctl_node_name[i],
-			g_server_dev.mctl_node_info.mctl_node_name[i], strnlen(
-			g_server_dev.mctl_node_info.mctl_node_name[i],
-			MAX_DEV_NAME_LEN))) {
-				rc = -EINVAL;
-				return rc;
-			}
-		}
-		temp_mctl_info.num_mctl_nodes =
-			g_server_dev.mctl_node_info.num_mctl_nodes;
-		if (copy_to_user((void __user *)ioctl_ptr->ioctl_ptr,
-							  &temp_mctl_info,
-				sizeof(struct msm_mctl_node_info))) {
-			rc = -EINVAL;
-			return rc;
-		}
-		rc = 0;
-	break;
-
-	case MSM_CAM_V4L2_IOCTL_CTRL_CMD_DONE:
-		D("%s: MSM_CAM_IOCTL_CTRL_CMD_DONE\n", __func__);
-		rc = msm_ctrl_cmd_done(arg);
-		break;
-
-	case MSM_CAM_V4L2_IOCTL_GET_EVENT_PAYLOAD: {
-		struct msm_queue_cmd *event_cmd;
-		struct msm_isp_event_ctrl u_isp_event;
-		struct msm_isp_event_ctrl *k_isp_event;
-
-		struct msm_device_queue *queue;
-		void __user *u_ctrl_value = NULL;
-		if (copy_from_user(&u_isp_event,
-			(void __user *)ioctl_ptr->ioctl_ptr,
-			sizeof(struct msm_isp_event_ctrl))) {
-			rc = -EINVAL;
-			return rc;
-
-		}
-		mutex_lock(&g_server_dev.server_queue_lock);
-		if (!g_server_dev.server_queue
-			[u_isp_event.isp_data.ctrl.queue_idx].queue_active) {
-			pr_err("%s: Invalid queue\n", __func__);
-			mutex_unlock(&g_server_dev.server_queue_lock);
-			rc = -EINVAL;
-			return rc;
-		}		
-		queue = &g_server_dev.server_queue
-			[u_isp_event.isp_data.ctrl.queue_idx].eventData_q;
-		event_cmd = msm_dequeue(queue, list_eventdata);
-		if (!event_cmd) {
-			pr_err("%s: No event payload\n", __func__);
-			rc = -EINVAL;
-			mutex_unlock(&g_server_dev.server_queue_lock);
-			return rc;
-
-		}
-		k_isp_event = (struct msm_isp_event_ctrl *)
-				event_cmd->command;
-		free_qcmd(event_cmd);
-
-		
-		u_ctrl_value = u_isp_event.isp_data.ctrl.value;
-
-		
-		u_isp_event = *k_isp_event;
-
-		u_isp_event.isp_data.ctrl.value = u_ctrl_value;
-
-		
-		if (k_isp_event->isp_data.ctrl.length > 0 &&
-			k_isp_event->isp_data.ctrl.value != NULL) {
-			void *k_ctrl_value =
-				k_isp_event->isp_data.ctrl.value;
-			if (copy_to_user(u_ctrl_value, k_ctrl_value,
-				 k_isp_event->isp_data.ctrl.length)) {
-				kfree(k_isp_event->isp_data.ctrl.value);
-				kfree(k_isp_event);
-				rc = -EINVAL;
-				mutex_unlock(&g_server_dev.server_queue_lock);
-				break;
-			}
-			kfree(k_isp_event->isp_data.ctrl.value);
-		}
-
-		if (copy_to_user((void __user *)ioctl_ptr->ioctl_ptr,
-							  &u_isp_event,
-				sizeof(struct msm_isp_event_ctrl))) {
-			kfree(k_isp_event);
-			rc = -EINVAL;
-			mutex_unlock(&g_server_dev.server_queue_lock);
-			return rc;
-		}
-		kfree(k_isp_event);
-		mutex_unlock(&g_server_dev.server_queue_lock);
-	
-		rc = 0;
-		break;
-	}
-	
-	case MSM_CAM_IOCTL_SEND_EVENT:
-		rc = msm_server_send_v4l2_evt(arg);
-		break;
-
-	default:
-	
-		pr_err("%s: Invalid IOCTL = %d", __func__, cmd);
-		break;
-	}
-	return rc;
-}
-static long msm_server_send_v4l2_evt(void *evt)
-{
-	struct v4l2_event *v4l2_ev = (struct v4l2_event *)evt;
-	int rc = 0;
-
-	if (NULL == evt) {
-		pr_err("%s: evt is NULL\n", __func__);
-		return -EINVAL;
-	}
-
-	D("%s: evt type 0x%x\n", __func__, v4l2_ev->type);
-	if ((v4l2_ev->type >= MSM_GES_APP_EVT_MIN) &&
-		(v4l2_ev->type < MSM_GES_APP_EVT_MAX)) {
-		msm_cam_server_subdev_notify(g_server_dev.gesture_device,
-			NOTIFY_GESTURE_EVT, v4l2_ev);
-	} else {
-		pr_err("%s: Invalid evt %d\n", __func__, v4l2_ev->type);
-		rc = -EINVAL;
-	}
-	D("%s: end\n", __func__);
-
-	return rc;
-}
-
-static int msm_open_server(struct file *fp)
-{
-	int rc = 0;
-	D("%s: open %s\n", __func__, fp->f_path.dentry->d_name.name);
-	mutex_lock(&g_server_dev.server_lock);
-	
-	g_server_dev.use_count++;
-	if (g_server_dev.use_count == 1)
-		fp->private_data =
-			&g_server_dev.server_command_queue.eventHandle;
-	mutex_unlock(&g_server_dev.server_lock);
-	return rc;
-}
-
-static unsigned int msm_poll_config(struct file *fp,
-					struct poll_table_struct *wait)
-{
-	int rc = 0;
-	struct msm_cam_config_dev *config = fp->private_data;
-	if (config == NULL)
-		return -EINVAL;
-
-	D("%s\n", __func__);
-
-	poll_wait(fp,
-	&config->config_stat_event_queue.eventHandle.events->wait, wait);
-	if (v4l2_event_pending(&config->config_stat_event_queue.eventHandle))
-		rc |= POLLPRI;
-	return rc;
-}
-
-static int msm_close_server(struct file *fp)
-{
-	struct v4l2_event_subscription sub;
-
-	D("%s\n", __func__);
-
-	mutex_lock(&g_server_dev.server_lock);
-	if (g_server_dev.use_count > 0)
-		g_server_dev.use_count--;
-	mutex_unlock(&g_server_dev.server_lock);
-	if (g_server_dev.use_count == 0) {
-		mutex_lock(&g_server_dev.server_lock);
-		if (g_server_dev.pcam_active) {
-			struct v4l2_event v4l2_ev;
-			
-			msm_cam_stop_hardware(g_server_dev.pcam_active);
-
-
-			v4l2_ev.type = V4L2_EVENT_PRIVATE_START
-				+ MSM_CAM_APP_NOTIFY_ERROR_EVENT;
-			ktime_get_ts(&v4l2_ev.timestamp);
-			v4l2_event_queue(
-				g_server_dev.pcam_active->pvdev, &v4l2_ev);
-		}
-		
-		sub.type = V4L2_EVENT_ALL;
-		msm_server_v4l2_unsubscribe_event(
-			&g_server_dev.server_command_queue.eventHandle, &sub);
-		mutex_unlock(&g_server_dev.server_lock);
-	}
-	return 0;
-}
-
-
-static long msm_v4l2_evt_notify(struct msm_cam_media_controller *mctl,
-		unsigned int cmd, unsigned long evt)
-{
-	struct v4l2_event v4l2_ev;
-	struct msm_cam_v4l2_device *pcam = NULL;
-
-	if (!mctl) {
-		pr_err("%s: mctl is NULL\n", __func__);
-		return -EINVAL;
-	}
-
-	if (copy_from_user(&v4l2_ev, (void __user *)evt,
-		sizeof(struct v4l2_event))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	}
-
-	pcam = mctl->pcam_ptr;
-	ktime_get_ts(&v4l2_ev.timestamp);
-	v4l2_event_queue(pcam->pvdev, &v4l2_ev);
-	return 0;
-}
-
-static long msm_ioctl_config(struct file *fp, unsigned int cmd,
-	unsigned long arg)
-{
-
-	int rc = 0;
-	struct v4l2_event ev;
-	struct msm_cam_config_dev *config_cam = fp->private_data;
-	struct v4l2_event_subscription temp_sub;
-
-	D("%s: cmd %d\n", __func__, _IOC_NR(cmd));
-
-	switch (cmd) {
-	
-	case MSM_CAM_IOCTL_REGISTER_PMEM:
-		return msm_register_pmem(
-			&config_cam->p_mctl->stats_info.pmem_stats_list,
-			(void __user *)arg, config_cam->p_mctl->client);
-		break;
-
-	case MSM_CAM_IOCTL_UNREGISTER_PMEM:
-		return msm_pmem_table_del(
-			&config_cam->p_mctl->stats_info.pmem_stats_list,
-			(void __user *)arg, config_cam->p_mctl->client);
-		break;
-	case VIDIOC_SUBSCRIBE_EVENT:
-		if (copy_from_user(&temp_sub,
-			(void __user *)arg,
-			sizeof(struct v4l2_event_subscription))) {
-			rc = -EINVAL;
-			return rc;
-		}
-		rc = msm_server_v4l2_subscribe_event
-			(&config_cam->config_stat_event_queue.eventHandle,
-			&temp_sub);
-		if (rc < 0) {
-			pr_err("%s: cam_v4l2_subscribe_event failed rc=%d\n",
-				__func__, rc);
-			return rc;
-		}
-		break;
-
-	case VIDIOC_UNSUBSCRIBE_EVENT:
-		if (copy_from_user(&temp_sub, (void __user *)arg,
-			  sizeof(struct v4l2_event_subscription))) {
-			rc = -EINVAL;
-			return rc;
-		}
-		rc = msm_server_v4l2_unsubscribe_event
-			(&config_cam->config_stat_event_queue.eventHandle,
-			&temp_sub);
-		if (rc < 0) {
-			pr_err("%s: server_unsubscribe_event failed rc=%d\n",
-				__func__, rc);
-		}
-		break;
-
-	case VIDIOC_DQEVENT: {
-		void __user *u_msg_value = NULL, *user_ptr = NULL;
-		struct msm_isp_event_ctrl u_isp_event;
-		struct msm_isp_event_ctrl *k_isp_event;
-
-		
-		D("%s: VIDIOC_DQEVENT\n", __func__);
-		if (copy_from_user(&ev, (void __user *)arg,
-				sizeof(struct v4l2_event)))
-			break;
-		user_ptr = (void __user *)(*((uint32_t *)ev.u.data));
-
-		
-		if (copy_from_user((void *)&u_isp_event, user_ptr,
-				   sizeof(struct msm_isp_event_ctrl))) {
-			rc = -EFAULT;
-			break;
-		}
-		
-		u_msg_value = u_isp_event.isp_data.isp_msg.data;
-
-		
-		rc = v4l2_event_dequeue(
-			&config_cam->config_stat_event_queue.eventHandle,
-			&ev, fp->f_flags & O_NONBLOCK);
-		if (rc < 0) {
-			pr_err("no pending events?");
-			rc = -EFAULT;
-			break;
-		}
-		k_isp_event = (struct msm_isp_event_ctrl *)
-				(*((uint32_t *)ev.u.data));
-		
-		u_isp_event = *k_isp_event;
-		if (ev.type != (V4L2_EVENT_PRIVATE_START +
-				MSM_CAM_RESP_DIV_FRAME_EVT_MSG) &&
-				ev.type != (V4L2_EVENT_PRIVATE_START +
-				MSM_CAM_RESP_MCTL_PP_EVENT)) {
-
-			u_isp_event.isp_data.isp_msg.data = u_msg_value;
-
-			if (ev.type == (V4L2_EVENT_PRIVATE_START +
-					MSM_CAM_RESP_STAT_EVT_MSG)) {
-				if (k_isp_event->isp_data.isp_msg.len > 0) {
-					void *k_msg_value =
-					k_isp_event->isp_data.isp_msg.data;
-					if (copy_to_user(u_msg_value,
-							k_msg_value,
-					 k_isp_event->isp_data.isp_msg.len)) {
-						rc = -EINVAL;
-						break;
-					}
-					kfree(k_msg_value);
-				}
-			}
-		}
-		if (copy_to_user(user_ptr,
-				(void *)&u_isp_event, sizeof(
-				struct msm_isp_event_ctrl))) {
-			rc = -EINVAL;
-			break;
-		}
-		kfree(k_isp_event);
-
-		
-		if (copy_to_user((void __user *)arg, &ev,
-				sizeof(struct v4l2_event))) {
-			rc = -EINVAL;
-			break;
-		}
-		}
-
-		break;
-
-	case MSM_CAM_IOCTL_V4L2_EVT_NOTIFY:
-		rc = msm_v4l2_evt_notify(config_cam->p_mctl, cmd, arg);
-		break;
-
-	case MSM_CAM_IOCTL_SET_MEM_MAP_INFO:
-		if (copy_from_user(&config_cam->mem_map, (void __user *)arg,
-				sizeof(struct msm_mem_map_info)))
-			rc = -EINVAL;
-		break;
-
-	default:{
-		
-		struct msm_cam_media_controller *p_mctl = config_cam->p_mctl;
-		if (p_mctl && p_mctl->mctl_cmd) {
-			rc = config_cam->p_mctl->mctl_cmd(p_mctl, cmd, arg);
-		} else {
-			rc = -EINVAL;
-			pr_err("%s: media controller is null\n", __func__);
-		}
-
-		break;
-	} 
-	} 
-	return rc;
-}
-
-static int msm_mmap_config(struct file *fp, struct vm_area_struct *vma)
-{
-	struct msm_cam_config_dev *config_cam = fp->private_data;
-	int rc = 0;
-	int phyaddr;
-	int retval;
-	unsigned long size;
-
-	D("%s: phy_addr=0x%x", __func__, config_cam->mem_map.cookie);
-	phyaddr = (int)config_cam->mem_map.cookie;
-	if (!phyaddr) {
-		pr_err("%s: no physical memory to map", __func__);
-		return -EFAULT;
-	}
-	memset(&config_cam->mem_map, 0,
-		sizeof(struct msm_mem_map_info));
-	size = vma->vm_end - vma->vm_start;
-	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
-	retval = remap_pfn_range(vma, vma->vm_start,
-					phyaddr >> PAGE_SHIFT,
-					size, vma->vm_page_prot);
-	if (retval) {
-		pr_err("%s: remap failed, rc = %d",
-					__func__, retval);
-		rc = -ENOMEM;
-		goto end;
-	}
-	D("%s: phy_addr=0x%x: %08lx-%08lx, pgoff %08lx\n",
-			__func__, (uint32_t)phyaddr,
-			vma->vm_start, vma->vm_end, vma->vm_pgoff);
-end:
-	return rc;
-}
-
-static int msm_open_config(struct inode *inode, struct file *fp)
-{
-	int rc;
-
-	struct msm_cam_config_dev *config_cam = container_of(inode->i_cdev,
-		struct msm_cam_config_dev, config_cdev);
-
-	D("%s: open %s\n", __func__, fp->f_path.dentry->d_name.name);
-
-	rc = nonseekable_open(inode, fp);
-	if (rc < 0) {
-		pr_err("%s: nonseekable_open error %d\n", __func__, rc);
-		return rc;
-	}
-	config_cam->use_count++;
-
-	
-	
-	config_cam->p_mctl =
-		msm_camera_get_mctl(g_server_dev.pcam_active->mctl_handle);
-
-	if(!config_cam->p_mctl)
-		return -EFAULT;
-
-		
-	INIT_HLIST_HEAD(&config_cam->p_mctl->stats_info.pmem_stats_list);
-	spin_lock_init(&config_cam->p_mctl->stats_info.pmem_stats_spinlock);
-
-	config_cam->p_mctl->config_device = config_cam;
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	kref_get(&config_cam->p_mctl->refcount);
-#endif
-	fp->private_data = config_cam;
-	return rc;
-}
-
-static int msm_close_config(struct inode *node, struct file *f)
-{
-	struct v4l2_event ev;
-	struct v4l2_event_subscription sub;
-	struct msm_isp_event_ctrl *isp_event;
-	struct msm_cam_config_dev *config_cam = f->private_data;
-	
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	D("%s Decrementing ref count of config node ", __func__);
-	kref_put(&config_cam->p_mctl->refcount, msm_release_ion_client);
-#endif
-	sub.type = V4L2_EVENT_ALL;
-	msm_server_v4l2_unsubscribe_event(
-		&config_cam->config_stat_event_queue.eventHandle,
-		&sub);
-	while (v4l2_event_pending(
-		&config_cam->config_stat_event_queue.eventHandle)) {
-		v4l2_event_dequeue(
-			&config_cam->config_stat_event_queue.eventHandle,
-			&ev, O_NONBLOCK);
-		isp_event = (struct msm_isp_event_ctrl *)
-			(*((uint32_t *)ev.u.data));
-		if (isp_event) {
-			if (isp_event->isp_data.isp_msg.len != 0 &&
-				isp_event->isp_data.isp_msg.data != NULL)
-				kfree(isp_event->isp_data.isp_msg.data);
-			kfree(isp_event);
-		}
-	}
-
-	return 0;
-}
-
-static struct v4l2_file_operations g_msm_fops = {
-	.owner   = THIS_MODULE,
-	.open	= msm_open,
-	.poll	= msm_poll,
-	.mmap	= msm_mmap,
-	.release = msm_close,
-	.ioctl   = video_ioctl2,
-};
-
-static const struct v4l2_file_operations msm_fops_server = {
-	.owner = THIS_MODULE,
-	.open  = msm_open_server,
-	.poll  = msm_poll_server,
-	.unlocked_ioctl = video_ioctl2,
-	.release = msm_close_server,
-};
-
-static const struct v4l2_ioctl_ops msm_ioctl_ops_server = {
-	.vidioc_subscribe_event = msm_server_v4l2_subscribe_event,
-	.vidioc_default = msm_ioctl_server,
-};
-
-static const struct file_operations msm_fops_config = {
-	.owner = THIS_MODULE,
-	.open  = msm_open_config,
-	.poll  = msm_poll_config,
-	.unlocked_ioctl = msm_ioctl_config,
-	.mmap	= msm_mmap_config,
-	.release = msm_close_config,
-};
-
-static struct camera_flash_info *p_flash_led_info;
-static struct kobject *led_status_obj; 
-
-static ssize_t flash_led_info_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length = 0;
-
-	if (p_flash_led_info != NULL)
-		length = sprintf(buf, "%d %d %d %d\n",
-			p_flash_led_info->led_info->enable,
-			p_flash_led_info->led_info->low_limit_led_state,
-			p_flash_led_info->led_info->max_led_current_ma,
-			p_flash_led_info->led_info->num_led_est_table);
-	else
-		length = sprintf(buf, "%d\n", 0);
-	
-	return length;
-}
-
-static ssize_t flash_led_tbl_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length = 0;
-	uint16_t i = 0;
-	char sub[64] = {0};
-	struct camera_led_est *sub_tbl = NULL;
-
-	if (p_flash_led_info != NULL)
-		for (i = 0; i < p_flash_led_info->led_info->num_led_est_table; i++) {
-			sub_tbl = (struct camera_led_est *)
-				(((char *)p_flash_led_info->led_est_table) +
-				(i * sizeof(struct camera_led_est)));
-			if (sub_tbl != NULL) {
-			length += sprintf(sub, "%d %d %d %d %d %d ",
-				sub_tbl->enable,
-				sub_tbl->led_state,
-				sub_tbl->current_ma,
-				sub_tbl->lumen_value,
-				sub_tbl->min_step,
-				sub_tbl->max_step);
-			strcat(buf, sub);
-			}
-		}
-	else
-		length = sprintf(buf, "%d\n", 0);
-	return length;
-}
-
-static DEVICE_ATTR(flash_led_info, 0444,
-	flash_led_info_get,
-	NULL);
-
-static DEVICE_ATTR(flash_led_tbl, 0444,
-	flash_led_tbl_get,
-	NULL);
-
-static uint32_t led_ril_status_value;
-static uint32_t led_wimax_status_value;
-static uint32_t led_hotspot_status_value;
-static uint16_t led_low_temp_limit;
-static uint16_t led_low_cap_limit;
-static uint16_t led_low_cap_limit_dual;
-
-static ssize_t led_ril_status_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "%d\n", led_ril_status_value);
-	return length;
-}
-
-static ssize_t led_ril_status_set(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	uint32_t tmp = 0;
-
-	if (buf[1] == '\n')
-		tmp = buf[0] - 0x30;
-
-	led_ril_status_value = tmp;
-	pr_info("led_ril_status_value = %d\n", led_ril_status_value);
-	return count;
-}
-
-static ssize_t led_wimax_status_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "%d\n", led_wimax_status_value);
-	return length;
-}
-
-static ssize_t led_wimax_status_set(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	uint32_t tmp = 0;
-
-	if (buf[1] == '\n')
-		tmp = buf[0] - 0x30;
-
-	led_wimax_status_value = tmp;
-	pr_info("led_wimax_status_value = %d\n", led_wimax_status_value);
-	return count;
-}
-
-static ssize_t led_hotspot_status_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "%d\n", led_hotspot_status_value);
-	return length;
-}
-
-static ssize_t led_hotspot_status_set(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	uint32_t tmp = 0;
-
-	tmp = buf[0] - 0x30; 
-
-	led_hotspot_status_value = tmp;
-	pr_info("led_hotspot_status_value = %d\n", led_hotspot_status_value);
-	return count;
-}
-
-static ssize_t low_temp_limit_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "%d\n", led_low_temp_limit);
-	return length;
-}
-
-static ssize_t low_cap_limit_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "%d\n", led_low_cap_limit);
-	return length;
-}
-
-static ssize_t low_cap_limit_dual_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "%d\n", led_low_cap_limit_dual);
-	return length;
-}
-
-static DEVICE_ATTR(led_ril_status, 0644,
-	led_ril_status_get,
-	led_ril_status_set);
-
-static DEVICE_ATTR(led_wimax_status, 0644,
-	led_wimax_status_get,
-	led_wimax_status_set);
-
-static DEVICE_ATTR(led_hotspot_status, 0644,
-	led_hotspot_status_get,
-	led_hotspot_status_set);
-
-static DEVICE_ATTR(low_temp_limit, 0444,
-	low_temp_limit_get,
-	NULL);
-
-static DEVICE_ATTR(low_cap_limit, 0444,
-	low_cap_limit_get,
-	NULL);
-
-static DEVICE_ATTR(low_cap_limit_dual, 0444,
-	low_cap_limit_dual_get,
-	NULL);
-
-static int msm_sensor_attr_node(struct msm_camera_sensor_info *sdata)
-{
-	int ret = 0;
-
-	led_status_obj = kobject_create_and_add("camera_led_status", NULL);
-	if (led_status_obj == NULL) {
-		pr_info("msm_camera: subsystem_register failed\n");
-		ret = -ENOMEM;
-		goto error;
-	}
-
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_flash_led_info.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file flash_led_info failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_flash_led_tbl.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file flash_led_tbl failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_led_ril_status.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file dev_attr_led_ril_status failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_led_wimax_status.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file dev_attr_led_wimax_status failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_led_hotspot_status.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file dev_attr_led_hotspot_status failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_low_temp_limit.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file dev_attr_low_temp_limit failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_low_cap_limit.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file dev_attr_low_cap_limit failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-	ret = sysfs_create_file(led_status_obj,
-		&dev_attr_low_cap_limit_dual.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file dev_attr_low_cap_limit_dual failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-
-	if ((sdata->flash_data->flash_type != MSM_CAMERA_FLASH_NONE) &&
-		sdata->flash_cfg && sdata->flash_cfg->flash_info) {
-		p_flash_led_info = sdata->flash_cfg->flash_info;
-	} else {
-		p_flash_led_info = NULL;
-	}
-
-	led_low_temp_limit = sdata->flash_cfg->low_temp_limit;
-	led_low_cap_limit = sdata->flash_cfg->low_cap_limit;
-	led_low_cap_limit_dual = sdata->flash_cfg->low_cap_limit_dual;
-
-	return ret;
-
-error:
-	kobject_del(led_status_obj);
-	return ret;
-}
-
-#ifdef CONFIG_RAWCHIP
-static struct kobject *rawchip_status_obj;
-
-uint32_t rawchip_id;
-
-static ssize_t probed_rawchip_id_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "0x%x\n", rawchip_id);
-	return length;
-}
-
-static DEVICE_ATTR(probed_rawchip_id, 0444,
-	probed_rawchip_id_get,
-	NULL);
-
-int msm_rawchip_attr_node(void)
-{
-	int ret = 0;
-
-	rawchip_status_obj = kobject_create_and_add("camera_rawchip_status", NULL);
-	if (rawchip_status_obj == NULL) {
-		pr_err("msm_camera: create camera_rawchip_status failed\n");
-		ret = -ENOMEM;
-		goto error;
-	}
-
-	ret = sysfs_create_file(rawchip_status_obj,
-		&dev_attr_probed_rawchip_id.attr);
-	if (ret) {
-		pr_info("msm_camera: sysfs_create_file dev_attr_probed_rawchip_id failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-
-	return ret;
-
-error:
-	kobject_del(rawchip_status_obj);
-	return ret;
-}
-#endif
-
-
-int msm_setup_v4l2_event_queue(struct v4l2_fh *eventHandle,
-	struct video_device *pvdev)
-{
-	int rc = 0;
-	
-	spin_lock_init(&pvdev->fh_lock);
-	INIT_LIST_HEAD(&pvdev->fh_list);
-
-	rc = v4l2_fh_init(eventHandle, pvdev);
-	if (rc < 0)
-		return rc;
-	if (eventHandle->events == NULL) {
-		rc = v4l2_event_init(eventHandle);
-		if (rc < 0)
-			return rc;
-	}
-
-	
-	
-	rc = v4l2_event_alloc(eventHandle, 200);
-	
-	if (rc < 0) {
-		pr_err("%s, v4l2_event_alloc failed, rc = %d", __func__, rc);
-		return rc;
-	}
-	v4l2_fh_add(eventHandle);
-	return rc;
-
-}
-
-static int msm_setup_config_dev(int node, char *device_name)
-{
-	int rc = -ENODEV;
-	struct device *device_config;
-	int dev_num = node;
-	dev_t devno;
-	struct msm_cam_config_dev *config_cam;
-
-	config_cam = kzalloc(sizeof(*config_cam), GFP_KERNEL);
-	if (!config_cam) {
-		pr_err("%s: could not allocate memory for msm_cam_config_device\n",
-			__func__);
-		return -ENOMEM;
-	}
-
-	D("%s\n", __func__);
-
-	devno = MKDEV(MAJOR(msm_devno), dev_num+1);
-	device_config = device_create(msm_class, NULL, devno, NULL, "%s%d",
-		device_name, dev_num);
-
-	if (IS_ERR(device_config)) {
-		rc = PTR_ERR(device_config);
-		pr_err("%s: error creating device: %d\n", __func__, rc);
-		goto config_setup_fail;
-	}
-
-	cdev_init(&config_cam->config_cdev, &msm_fops_config);
-	config_cam->config_cdev.owner = THIS_MODULE;
-
-	rc = cdev_add(&config_cam->config_cdev, devno, 1);
-	if (rc < 0) {
-		pr_err("%s: error adding cdev: %d\n", __func__, rc);
-		device_destroy(msm_class, devno);
-		goto config_setup_fail;
-	}
-
-	g_server_dev.config_info.config_dev_name[dev_num] =
-		dev_name(device_config);
-	D("%s Connected config device %s\n", __func__,
-		g_server_dev.config_info.config_dev_name[dev_num]);
-	g_server_dev.config_info.config_dev_id[dev_num] = dev_num;
-
-	config_cam->config_stat_event_queue.pvdev = video_device_alloc();
-	if (config_cam->config_stat_event_queue.pvdev == NULL) {
-		pr_err("%s: video_device_alloc failed\n", __func__);
-		goto config_setup_fail;
-	}
-
-	rc = msm_setup_v4l2_event_queue(
-		&config_cam->config_stat_event_queue.eventHandle,
-		config_cam->config_stat_event_queue.pvdev);
-	if (rc < 0) {
-		pr_err("%s failed to initialize event queue\n", __func__);
-		video_device_release(config_cam->config_stat_event_queue.pvdev);
-		goto config_setup_fail;
-	}
-
-	return rc;
-
-config_setup_fail:
-	kfree(config_cam);
-	return rc;
-
-}
-static void msm_cam_server_subdev_notify(struct v4l2_subdev *sd,
-				unsigned int notification, void *arg)
-{
-	int rc = -EINVAL;
-	struct msm_sensor_ctrl_t *s_ctrl;
-	struct msm_camera_sensor_info *sinfo;
-	struct msm_camera_device_platform_data *camdev;
-	uint8_t csid_core = 0;
-
-	if (notification == NOTIFY_CID_CHANGE ||
-		notification == NOTIFY_ISPIF_STREAM ||
-		notification == NOTIFY_PCLK_CHANGE ||
-		notification == NOTIFY_CSIPHY_CFG ||
-		notification == NOTIFY_CSID_CFG ||
-		notification == NOTIFY_CSIC_CFG) {
-		s_ctrl = get_sctrl(sd);
-		sinfo = (struct msm_camera_sensor_info *) s_ctrl->sensordata;
-		camdev = sinfo->pdata;
-		csid_core = camdev->csid_core;
-	}
-
-	switch (notification) {
-	case NOTIFY_CID_CHANGE:
-		
-		if (g_server_dev.ispif_device) {
-			struct msm_ispif_params_list ispif_params;
-			ispif_params.len = 1;
-			ispif_params.params[0].intftype = PIX0;
-			ispif_params.params[0].cid_mask = 0x0001;
-			ispif_params.params[0].csid = csid_core;
-
-			rc = v4l2_subdev_call(
-				g_server_dev.ispif_device, core, ioctl,
-				VIDIOC_MSM_ISPIF_CFG, &ispif_params);
-			if (rc < 0)
-				return;
-		}
-		break;
-	case NOTIFY_ISPIF_STREAM:
-		
-		rc = v4l2_subdev_call(g_server_dev.ispif_device, video,
-				s_stream, (int)arg);
-		if (rc < 0)
-			return;
-
-		break;
-	case NOTIFY_ISP_MSG_EVT:
-	case NOTIFY_VFE_MSG_OUT:
-	case NOTIFY_VFE_MSG_STATS:
-	case NOTIFY_VFE_MSG_COMP_STATS:
-	case NOTIFY_VFE_BUF_EVT:
-	case NOTIFY_VFE_BUF_FREE_EVT:
-		if (g_server_dev.isp_subdev[0] &&
-			g_server_dev.isp_subdev[0]->isp_notify) {
-			rc = g_server_dev.isp_subdev[0]->isp_notify(
-				g_server_dev.vfe_device[0], notification, arg);
-		}
-		break;
-	case NOTIFY_VPE_MSG_EVT: {
-		struct msm_cam_media_controller *pmctl =
-		(struct msm_cam_media_controller *)
-		v4l2_get_subdev_hostdata(sd);
-		struct msm_vpe_resp *vdata = (struct msm_vpe_resp *)arg;
-		msm_mctl_pp_notify(pmctl,
-		(struct msm_mctl_pp_frame_info *)
-		vdata->extdata);
-		break;
-	}
-	case NOTIFY_VFE_IRQ:{
-		struct msm_vfe_cfg_cmd cfg_cmd;
-		struct msm_camvfe_params vfe_params;
-		cfg_cmd.cmd_type = CMD_VFE_PROCESS_IRQ;
-		vfe_params.vfe_cfg = &cfg_cmd;
-		vfe_params.data = arg;
-		rc = v4l2_subdev_call(g_server_dev.vfe_device[0],
-			core, ioctl, 0, &vfe_params);
-	}
-		break;
-	case NOTIFY_AXI_IRQ:
-		rc = v4l2_subdev_call(g_server_dev.axi_device[0],
-			core, ioctl, VIDIOC_MSM_AXI_IRQ, arg);
-		break;
-	
-	case NOTIFY_PCLK_CHANGE:
-		if (g_server_dev.axi_device[0])
-			rc = v4l2_subdev_call(g_server_dev.axi_device[0], video,
-				s_crystal_freq, *(uint32_t *)arg, 0);
-		else
-			rc = v4l2_subdev_call(g_server_dev.vfe_device[0], video,
-				s_crystal_freq, *(uint32_t *)arg, 0);
-		break;
-	case NOTIFY_CSIPHY_CFG:
-		rc = v4l2_subdev_call(g_server_dev.csiphy_device[csid_core],
-			core, ioctl, VIDIOC_MSM_CSIPHY_CFG, arg);
-		break;
-	case NOTIFY_CSID_CFG:
-		rc = v4l2_subdev_call(g_server_dev.csid_device[csid_core],
-			core, ioctl, VIDIOC_MSM_CSID_CFG, arg);
-		break;
-	case NOTIFY_CSIC_CFG:
-		rc = v4l2_subdev_call(g_server_dev.csic_device[csid_core],
-			core, ioctl, VIDIOC_MSM_CSIC_CFG, arg);
-		break;
-	case NOTIFY_GESTURE_EVT:
-		rc = v4l2_subdev_call(g_server_dev.gesture_device,
-			core, ioctl, VIDIOC_MSM_GESTURE_EVT, arg);
-		break;
-	case NOTIFY_GESTURE_CAM_EVT:
-		rc = v4l2_subdev_call(g_server_dev.gesture_device,
-			core, ioctl, VIDIOC_MSM_GESTURE_CAM_EVT, arg);
-		break;		
-	default:
-		break;
-	}
-
-	return;
-}
-
-int msm_cam_register_subdev_node(struct v4l2_subdev *sd,
-	enum msm_cam_subdev_type sdev_type, uint8_t index)
-{
-	struct video_device *vdev;
-	int err = 0;
-
-	if (sdev_type == CSIPHY_DEV) {
-		if (index >= MAX_NUM_CSIPHY_DEV)
-			return -EINVAL;
-		g_server_dev.csiphy_device[index] = sd;
-	} else if (sdev_type == CSID_DEV) {
-		if (index >= MAX_NUM_CSID_DEV)
-			return -EINVAL;
-		g_server_dev.csid_device[index] = sd;
-	} else if (sdev_type == CSIC_DEV) {
-		if (index >= MAX_NUM_CSIC_DEV)
-			return -EINVAL;
-		g_server_dev.csic_device[index] = sd;
-	} else if (sdev_type == ISPIF_DEV) {
-		g_server_dev.ispif_device = sd;
-	} else if (sdev_type == VFE_DEV) {
-		if (index >= MAX_NUM_VFE_DEV)
-			return -EINVAL;
-		g_server_dev.vfe_device[index] = sd;
-	} else if (sdev_type == VPE_DEV) {
-		if (index >= MAX_NUM_VPE_DEV)
-			return -EINVAL;
-		g_server_dev.vpe_device[index] = sd;
-	} else if (sdev_type == AXI_DEV) {
-		if (index >= MAX_NUM_AXI_DEV)
-			return -EINVAL;
-		g_server_dev.axi_device[index] = sd;		
-	}
-	else if (sdev_type == GESTURE_DEV) {
-		g_server_dev.gesture_device = sd;
-	}
-
-	err = v4l2_device_register_subdev(&g_server_dev.v4l2_dev, sd);
-	if (err < 0)
-		return err;
-
-	if (!(sd->flags & V4L2_SUBDEV_FL_HAS_DEVNODE))
-		return err;
-
-	vdev = &sd->devnode;
-	strlcpy(vdev->name, sd->name, sizeof(vdev->name));
-	vdev->v4l2_dev = &g_server_dev.v4l2_dev;
-	vdev->fops = &v4l2_subdev_fops;
-	vdev->release = video_device_release_empty;
-	err = __video_register_device(vdev, VFL_TYPE_SUBDEV, -1, 1,
-						  sd->owner);
-	if (err < 0)
-		return err;
-#if defined(CONFIG_MEDIA_CONTROLLER)
-	sd->entity.v4l.major = VIDEO_MAJOR;
-	sd->entity.v4l.minor = vdev->minor;
-#endif
-	return 0;
-}
-
-
-static int msm_setup_server_dev(struct platform_device *pdev)
-{
-	int rc = -ENODEV, i;
-
-	D("%s\n", __func__);
-	g_server_dev.server_pdev = pdev;
-	g_server_dev.v4l2_dev.dev = &pdev->dev;
-	g_server_dev.v4l2_dev.notify = msm_cam_server_subdev_notify;
-
-	rc = v4l2_device_register(g_server_dev.v4l2_dev.dev,
-			&g_server_dev.v4l2_dev);
-	if (rc < 0)
-		return -EINVAL;
-
-
-	g_server_dev.video_dev = video_device_alloc();
-	if (g_server_dev.video_dev == NULL) {
-		pr_err("%s: video_device_alloc failed\n", __func__);
-		return rc;
-	}
-
-	strlcpy(g_server_dev.video_dev->name, pdev->name,
-			sizeof(g_server_dev.video_dev->name));
-
-	g_server_dev.video_dev->v4l2_dev = &g_server_dev.v4l2_dev;
-	g_server_dev.video_dev->fops = &msm_fops_server;
-	g_server_dev.video_dev->ioctl_ops = &msm_ioctl_ops_server;
-	g_server_dev.video_dev->release   = video_device_release;
-	g_server_dev.video_dev->minor = 100;
-	g_server_dev.video_dev->vfl_type = 1;
-
-	video_set_drvdata(g_server_dev.video_dev, &g_server_dev);
-
-	strlcpy(g_server_dev.media_dev.model, "qcamera",
-		sizeof(g_server_dev.media_dev.model));
-	g_server_dev.media_dev.dev = &pdev->dev;
-#if defined(CONFIG_MEDIA_CONTROLLER)
-	rc = media_device_register(&g_server_dev.media_dev);
-
-	g_server_dev.v4l2_dev.mdev = &g_server_dev.media_dev;
-#endif
-	rc = video_register_device(g_server_dev.video_dev,
-		VFL_TYPE_GRABBER, 100);
-
-
-	mutex_init(&g_server_dev.server_lock);
-	mutex_init(&g_server_dev.server_queue_lock);
-	g_server_dev.pcam_active = NULL;
-	g_server_dev.camera_info.num_cameras = 0;
-	atomic_set(&g_server_dev.number_pcam_active, 0);
-	g_server_dev.server_evt_id = 0;
-
-	
-
-	g_server_dev.server_command_queue.pvdev = g_server_dev.video_dev;
-
-	rc = msm_setup_v4l2_event_queue(
-		&g_server_dev.server_command_queue.eventHandle,
-		g_server_dev.server_command_queue.pvdev);
-	if (rc < 0) {
-		pr_err("%s failed to initialize event queue\n", __func__);
-		video_device_release(g_server_dev.server_command_queue.pvdev);
-		return rc;
-	}
-	for (i = 0; i < MAX_NUM_ACTIVE_CAMERA; i++) {
-		struct msm_cam_server_queue *queue;
-		queue = &g_server_dev.server_queue[i];
-		queue->queue_active = 0;
-		msm_queue_init(&queue->ctrl_q, "control");
-		msm_queue_init(&queue->eventData_q, "eventdata");
-	}
-	return rc;
-}
-
-static int msm_cam_dev_init(struct msm_cam_v4l2_device *pcam)
-{
-	int rc = -ENOMEM;
-	struct video_device *pvdev = NULL;
-	struct i2c_client *client = v4l2_get_subdevdata(pcam->sensor_sdev);
-	D("%s\n", __func__);
-
-	
-	pcam->v4l2_dev.dev = &client->dev;
-	rc = v4l2_device_register(pcam->v4l2_dev.dev, &pcam->v4l2_dev);
-	if (rc < 0)
-		return -EINVAL;
-	else
-		pcam->v4l2_dev.notify = msm_cam_v4l2_subdev_notify;
-
-
-	
-	pvdev = video_device_alloc();
-	if (pvdev == NULL) {
-		pr_err("%s: video_device_alloc failed\n", __func__);
-		return rc;
-	}
-
-#if defined(CONFIG_MEDIA_CONTROLLER)
-	strlcpy(pcam->media_dev.model, QCAMERA_NAME,
-			sizeof(pcam->media_dev.model));
-	pcam->media_dev.dev = &client->dev;
-	rc = media_device_register(&pcam->media_dev);
-	pvdev->v4l2_dev = &pcam->v4l2_dev;
-	pcam->v4l2_dev.mdev = &pcam->media_dev;
-#endif
-
-	
-	D("sensor name = %s, sizeof(pvdev->name)=%d\n",
-		pcam->sensor_sdev->name, sizeof(pvdev->name));
-
-	strlcpy(pvdev->name, pcam->sensor_sdev->name, sizeof(pvdev->name));
-
-	pvdev->release   = video_device_release;
-	pvdev->fops	  = &g_msm_fops;
-	pvdev->ioctl_ops = &g_msm_ioctl_ops;
-	pvdev->minor	 = -1;
-	pvdev->vfl_type  = 1;
-
-#if defined(CONFIG_MEDIA_CONTROLLER)
-	media_entity_init(&pvdev->entity, 0, NULL, 0);
-	pvdev->entity.type = MEDIA_ENT_T_DEVNODE_V4L;
-	pvdev->entity.group_id = QCAMERA_VNODE_GROUP_ID;
-#endif
-
-	
-	D("video_register_device\n");
-	rc = video_register_device(pvdev,
-					VFL_TYPE_GRABBER,
-					msm_camera_v4l2_nr);
-	if (rc) {
-		pr_err("%s: video_register_device failed\n", __func__);
-		goto reg_fail;
-	}
-
-#if defined(CONFIG_MEDIA_CONTROLLER)
-	pvdev->entity.name = video_device_node_name(pvdev);
-#endif
-
-	D("%s: video device registered as /dev/video%d\n",
-		__func__, pvdev->num);
-
-	
-	pcam->pvdev	= pvdev;
-	video_set_drvdata(pcam->pvdev, pcam);
-
-	
-	
-
-	return rc ;
-
-reg_fail:
-	video_device_release(pvdev);
-	v4l2_device_unregister(&pcam->v4l2_dev);
-	pcam->v4l2_dev.dev = NULL;
-	return rc;
-}
-
-static int msm_actuator_probe(struct msm_actuator_info *actuator_info,
-			      struct v4l2_subdev *act_sdev,
-			      struct msm_actuator_ctrl *actctrl)
-{
-	int rc = 0;
-	struct i2c_adapter *adapter = NULL;
-	void *act_client = NULL;
-	struct msm_actuator_ctrl *a_ext_ctrl = NULL;
-
-	D("%s called\n", __func__);
-
-	if (!actuator_info)
-		goto probe_fail;
-
-	adapter = i2c_get_adapter(actuator_info->bus_id);
-	if (!adapter)
-		goto probe_fail;
-
-	act_client = i2c_new_device(adapter, actuator_info->board_info);
-	if (!act_client)
-		goto device_fail;
-
-	a_ext_ctrl = (struct msm_actuator_ctrl *)i2c_get_clientdata(act_client);
-	if (!a_ext_ctrl)
-		goto client_fail;
-
-	*actctrl = *a_ext_ctrl;
-	a_ext_ctrl->a_create_subdevice((void *)actuator_info,
-				       (void *)act_sdev);
-	return rc;
-
-client_fail:
-	i2c_unregister_device(act_client);
-device_fail:
-	i2c_put_adapter(adapter);
-	adapter = NULL;
-probe_fail:
-	actctrl->a_init_table = NULL;
-	actctrl->a_power_up = NULL;
-	actctrl->a_power_down = NULL;
-	actctrl->a_config = NULL;
-	actctrl->a_create_subdevice = NULL;
-	return rc;
-}
-
-int msm_sensor_register(struct v4l2_subdev *sensor_sd)
-{
-	int rc = -EINVAL;
-	struct msm_camera_sensor_info *sdata;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_sensor_ctrl_t *s_ctrl;
-	struct v4l2_subdev *act_sdev = NULL;
-	struct msm_actuator_ctrl *actctrl = NULL;
-
-	D("%s for %s\n", __func__, sensor_sd->name);
-
-	
-	pcam = kzalloc(sizeof(*pcam), GFP_KERNEL);
-	if (!pcam) {
-		pr_err("%s: could not allocate mem for msm_cam_v4l2_device\n",
-			__func__);
-		return -ENOMEM;
-	}
-
-	pcam->sensor_sdev = sensor_sd;
-	s_ctrl = get_sctrl(sensor_sd);
-	if(!s_ctrl) goto failure;
-	sdata = (struct msm_camera_sensor_info *) s_ctrl->sensordata;
-	if(!sdata) goto failure;
-
-	pcam->act_sdev = kzalloc(sizeof(struct v4l2_subdev),
-								  GFP_KERNEL);
-	if (!pcam->act_sdev) {
-		pr_err("%s: could not allocate mem for actuator v4l2_subdev\n",
-			   __func__);
-		kfree(pcam);
-		return -ENOMEM;
-	}
-
-	act_sdev = pcam->act_sdev;
-	actctrl = &pcam->actctrl;
-
-	
-	if (sdata->actuator_info) {
-		if (sdata->use_rawchip)
-			sdata->actuator_info->use_rawchip_af = 1;
-		else
-			sdata->actuator_info->use_rawchip_af = 0;
-	}
-	
-
-	msm_actuator_probe(sdata->actuator_info,
-					   act_sdev, actctrl);
-
-	pcam->sdata = sdata;
-
-	
-	if (pcam->sdata && pcam->sdata->flash_cfg )
-		msm_sensor_attr_node(pcam->sdata);
-	
-
-	
-	pcam->use_count = 0;
-	mutex_init(&pcam->vid_lock);
-	mutex_init(&pcam->mctl_node.dev_lock);
-
-	
-	rc  = msm_mctl_init_user_formats(pcam);
-	if (rc < 0)
-		goto failure;
-
-	rc  = msm_cam_dev_init(pcam);
-	if (rc < 0)
-		goto failure;
-
-	rc = msm_setup_mctl_node(pcam);
-	if (rc < 0) {
-		pr_err("%s:failed to create mctl device: %d\n",
-			 __func__, rc);
-		goto failure;
-	}
-
-	g_server_dev.camera_info.video_dev_name
-	[g_server_dev.camera_info.num_cameras]
-	= video_device_node_name(pcam->pvdev);
-	D("%s Connected video device %s\n", __func__,
-		g_server_dev.camera_info.video_dev_name
-		[g_server_dev.camera_info.num_cameras]);
-
-	g_server_dev.camera_info.s_mount_angle
-	[g_server_dev.camera_info.num_cameras]
-	= sdata->sensor_platform_info->mount_angle;
-
-	g_server_dev.camera_info.is_internal_cam
-	[g_server_dev.camera_info.num_cameras]
-	= sdata->camera_type;
-
-	g_server_dev.mctl_node_info.mctl_node_name
-	[g_server_dev.mctl_node_info.num_mctl_nodes]
-	= video_device_node_name(pcam->mctl_node.pvdev);
-
-	pr_info("%s mctl_node_name[%d] = %s\n", __func__,
-		g_server_dev.mctl_node_info.num_mctl_nodes,
-		g_server_dev.mctl_node_info.mctl_node_name
-		[g_server_dev.mctl_node_info.num_mctl_nodes]);
-
-	snprintf(pcam->media_dev.serial,
-			sizeof(pcam->media_dev.serial),
-			"%s-%d-%d", QCAMERA_NAME,
-			sdata->sensor_platform_info->mount_angle,
-			sdata->camera_type);
-
-	g_server_dev.camera_info.num_cameras++;
-	g_server_dev.mctl_node_info.num_mctl_nodes++;
-
-	D("%s done, rc = %d\n", __func__, rc);
-	D("%s number of sensors connected is %d\n", __func__,
-		g_server_dev.camera_info.num_cameras);
-
-	
-	rc = msm_cam_register_subdev_node(sensor_sd, SENSOR_DEV, vnode_count);
-	if (rc < 0) {
-		D("%s sensor sub device register failed\n",
-			__func__);
-		goto failure;
-	}
-
-	if (sdata->actuator_info) {
-		rc = v4l2_device_register_subdev(&pcam->v4l2_dev, act_sdev);
-		if (rc < 0) {
-			D("%s actuator sub device register failed\n",
-			  __func__);
-			goto failure;
-		}
-	}
-
-	pcam->vnode_id = vnode_count++;
-	return rc;
-
-failure:
-	kfree(act_sdev);
-	kzfree(pcam);
-	return rc;
-}
-EXPORT_SYMBOL(msm_sensor_register);
-
-static struct switch_dev htccallback_switch = {
-	.name = "htccallback",
-};
-
-static struct kobject *htccallback_obj;
-static struct kobject *camera_attrs_obj;
-
-static uint32_t htccallback_value;
-static uint32_t videochat_value;
-
-static ssize_t htccallback_set(struct device *dev,
-                struct device_attribute *attr, const char *buf, size_t count)
-{
-	char *tmp;
-	htccallback_value = simple_strtoul(buf, &tmp, 0);
-
-	switch_set_state(&htccallback_switch, htccallback_value);
-
-       pr_info("htccallback_value = %d\n", htccallback_value);
-
-       return count;
-}
-
-static ssize_t videochat_get(struct device *dev,
-				struct device_attribute *attr, char *buf)
-{
-	ssize_t length;
-	length = sprintf(buf, "%d\n", videochat_value);
-	return length;
-}
-
-static ssize_t videochat_set(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	uint32_t tmp = 0;
-
-	if (buf[1] == '\n')
-		tmp = buf[0] - 0x30;
-
-	videochat_value = tmp;
-	pr_info("videochat_value = %d\n", videochat_value);
-	return count;
-}
-
-static DEVICE_ATTR(htccallback, 0660,
-    NULL,
-    htccallback_set);
-
-static DEVICE_ATTR(videochat, 0660,
-    videochat_get,
-    videochat_set);
-
-static int msm_camera_sysfs_init(void)
-{
-	int ret = 0;
-	pr_info("htccallback:kobject creat and add\n");
-
-       htccallback_obj = kobject_create_and_add("camera_htccallback", NULL);
-       if (htccallback_obj == NULL) {
-              pr_info("htccallback: subsystem_register_htccallback failed\n");
-              ret = -ENOMEM;
-              goto error;
-       }
-
-       ret = sysfs_create_file(htccallback_obj,
-                  &dev_attr_htccallback.attr);
-	if (ret) {
-		pr_info("htccallback: sysfs_create_htccallback_file failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-	if (switch_dev_register(&htccallback_switch) < 0) {
-		pr_info("htccallback : switch_dev_register error\n");
-	}
-
-
-	pr_info("camera_attrs:kobject creat and add\n");
-
-       camera_attrs_obj = kobject_create_and_add("camera_attrs", NULL);
-       if (camera_attrs_obj == NULL) {
-              pr_info("camera_attrs: subsystem_register_camera_attrs failed\n");
-              ret = -ENOMEM;
-              goto error;
-       }
-
-       ret = sysfs_create_file(camera_attrs_obj,
-                  &dev_attr_videochat.attr);
-	if (ret) {
-		pr_info("dev_attr_videochat: sysfs_create_dev attr_videochat file failed\n");
-		ret = -EFAULT;
-		goto error;
-	}
-
-	return ret;
-error:
-	kobject_del(htccallback_obj);
-	kobject_del(camera_attrs_obj);
-	return ret;
-}
-extern int system_rev;
-
-static int __devinit msm_camera_probe(struct platform_device *pdev)
-{
-	int rc = 0, i;
-
-	pr_info("system rev = %d",system_rev);
-	g_server_dev.config_info.num_config_nodes = 1;
-
-	rc = msm_isp_init_module(g_server_dev.config_info.num_config_nodes);
-	if (rc < 0) {
-		pr_err("Failed to initialize isp\n");
-		return rc;
-	}
-
-	if (!msm_class) {
-		rc = alloc_chrdev_region(&msm_devno, 0,
-		g_server_dev.config_info.num_config_nodes+1, "msm_camera");
-		if (rc < 0) {
-			pr_err("%s: failed to allocate chrdev: %d\n", __func__,
-			rc);
-			return rc;
-		}
-
-		msm_class = class_create(THIS_MODULE, "msm_camera");
-		if (IS_ERR(msm_class)) {
-			rc = PTR_ERR(msm_class);
-			pr_err("%s: create device class failed: %d\n",
-			__func__, rc);
-			return rc;
-		}
-	}
-
-	D("creating server and config nodes\n");
-	rc = msm_setup_server_dev(pdev);
-	if (rc < 0) {
-		pr_err("%s: failed to create server dev: %d\n", __func__,
-		rc);
-		return rc;
-	}
-
-	for (i = 0; i < g_server_dev.config_info.num_config_nodes; i++) {
-		rc = msm_setup_config_dev(i, "config");
-		if (rc < 0) {
-			pr_err("%s:failed to create config dev: %d\n",
-			 __func__, rc);
-			return rc;
-		}
-	}
-
-	msm_camera_sysfs_init();
-
-#ifdef CONFIG_PERFLOCK
-	perf_lock_init(&g_server_dev.cam_perf_lock, TYPE_PERF_LOCK, PERF_LOCK_HIGHEST, "camera_v4l2");
-#endif
-
-	msm_isp_register(&g_server_dev);
-	return rc;
-}
-
-static int __exit msm_camera_exit(struct platform_device *pdev)
-{
-	msm_isp_unregister(&g_server_dev);
-	return 0;
-}
-
-
-static struct platform_driver msm_cam_server_driver = {
-	.probe = msm_camera_probe,
-	.remove = msm_camera_exit,
-	.driver = {
-		.name = "msm_cam_server",
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init msm_camera_init(void)
-{
-	return platform_driver_register(&msm_cam_server_driver);
-}
-
-static void __exit msm_cam_server_exit(void)
-{
-	platform_driver_unregister(&msm_cam_server_driver);	
-}
-
-module_init(msm_camera_init);
-module_exit(msm_cam_server_exit);
-
diff --git a/drivers/media/video/msm/msm.h b/drivers/media/video/msm/msm.h
deleted file mode 100644
index b40f432..0000000
--- a/drivers/media/video/msm/msm.h
+++ /dev/null
@@ -1,594 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#ifndef _MSM_H
-#define _MSM_H
-
-#ifdef __KERNEL__
-
-#include <linux/wakelock.h>
-#include <linux/i2c.h>
-#include <linux/videodev2.h>
-#include <linux/pm_qos.h>
-#include <media/v4l2-dev.h>
-#include <media/v4l2-ioctl.h>
-#include <media/v4l2-device.h>
-#include <media/v4l2-fh.h>
-#include <media/v4l2-event.h>
-#include <media/v4l2-mediabus.h>
-#include <media/videobuf2-dma-contig.h>
-#include <media/videobuf2-msm-mem.h>
-#include <media/msm_isp.h>
-#include <mach/camera.h>
-#include <media/msm_isp.h>
-#include <linux/ion.h>
-#include <media/msm_gestures.h>
-#include <linux/iommu.h>
-
-#ifdef CONFIG_PERFLOCK
-#include <mach/perflock.h>
-#endif
-
-#define MSM_V4L2_DIMENSION_SIZE 96
-#define MAX_DEV_NAME_LEN 50
-
-#define ERR_USER_COPY(to) pr_debug("%s(%d): copy %s user\n", \
-				__func__, __LINE__, ((to) ? "to" : "from"))
-#define ERR_COPY_FROM_USER() ERR_USER_COPY(0)
-#define ERR_COPY_TO_USER() ERR_USER_COPY(1)
-
-#define MSM_CSIPHY_DRV_NAME "msm_csiphy"
-#define MSM_CSID_DRV_NAME "msm_csid"
-#define MSM_CSIC_DRV_NAME "msm_csic"
-#define MSM_ISPIF_DRV_NAME "msm_ispif"
-#define MSM_VFE_DRV_NAME "msm_vfe"
-#define MSM_VPE_DRV_NAME "msm_vpe"
-#define MSM_GEMINI_DRV_NAME "msm_gemini"
-#define MSM_I2C_MUX_DRV_NAME "msm_cam_i2c_mux"
-#define MAX_NUM_CSIPHY_DEV 3
-#define MAX_NUM_CSID_DEV 3
-#define MAX_NUM_CSIC_DEV 3
-#define MAX_NUM_ISPIF_DEV 1
-#define MAX_NUM_VFE_DEV 2
-#define MAX_NUM_AXI_DEV 2
-#define MAX_NUM_VPE_DEV 1
-
-enum msm_cam_subdev_type {
-	CSIPHY_DEV,
-	CSID_DEV,
-	CSIC_DEV,
-	ISPIF_DEV,
-	VFE_DEV,
-	AXI_DEV,
-	VPE_DEV,
-	SENSOR_DEV,
-	GESTURE_DEV,
-};
-
-
-
-#define msm_dequeue(queue, member) ({	   \
-	unsigned long flags;		  \
-	struct msm_device_queue *__q = (queue);	 \
-	struct msm_queue_cmd *qcmd = 0;	   \
-	spin_lock_irqsave(&__q->lock, flags);	 \
-	if (!list_empty(&__q->list)) {		\
-		__q->len--;		 \
-		qcmd = list_first_entry(&__q->list,   \
-		struct msm_queue_cmd, member);  \
-		list_del_init(&qcmd->member);	 \
-	}			 \
-	spin_unlock_irqrestore(&__q->lock, flags);  \
-	qcmd;			 \
-})
-
-#define msm_queue_drain(queue, member) do {	 \
-	unsigned long flags;		  \
-	struct msm_device_queue *__q = (queue);	 \
-	struct msm_queue_cmd *qcmd;	   \
-	spin_lock_irqsave(&__q->lock, flags);	 \
-	while (!list_empty(&__q->list)) {	 \
-		qcmd = list_first_entry(&__q->list,   \
-			struct msm_queue_cmd, member);	\
-			list_del_init(&qcmd->member);	 \
-			free_qcmd(qcmd);		\
-	 };			  \
-	spin_unlock_irqrestore(&__q->lock, flags);	\
-} while (0)
-
-static inline void free_qcmd(struct msm_queue_cmd *qcmd)
-{
-	if (!qcmd || !atomic_read(&qcmd->on_heap))
-		return;
-	if (!atomic_sub_return(1, &qcmd->on_heap))
-		kfree(qcmd);
-}
-
-struct isp_msg_stats {
-	uint32_t    id;
-	uint32_t    buffer;
-	uint32_t    frameCounter;
-};
-
-struct msm_free_buf {
-	uint8_t num_planes;
-	uint32_t ch_paddr[VIDEO_MAX_PLANES];
-	uint32_t vb;
-};
-
-struct isp_msg_event {
-	uint32_t msg_id;
-	uint32_t sof_count;
-};
-
-struct isp_msg_output {
-	uint8_t   output_id;
-	struct msm_free_buf buf;
-	uint32_t  frameCounter;
-};
-
-enum msm_camera_v4l2_subdev_notify {
-	NOTIFY_CID_CHANGE, 
-	NOTIFY_ISP_MSG_EVT, 
-	NOTIFY_VFE_MSG_OUT, 
-	NOTIFY_VFE_MSG_STATS,  
-	NOTIFY_VFE_MSG_COMP_STATS, 
-	NOTIFY_VFE_BUF_EVT, 
-	NOTIFY_ISPIF_STREAM, 
-	NOTIFY_VPE_MSG_EVT,
-	NOTIFY_PCLK_CHANGE, 
-	NOTIFY_CSIPHY_CFG, 
-	NOTIFY_CSID_CFG, 
-	NOTIFY_CSIC_CFG, 
-	NOTIFY_VFE_BUF_FREE_EVT, 
-	NOTIFY_VFE_IRQ,
-	NOTIFY_AXI_IRQ,
-	NOTIFY_GESTURE_EVT, 
-	NOTIFY_GESTURE_CAM_EVT, 
-	NOTIFY_INVALID
-};
-
-enum isp_vfe_cmd_id {
-	ISP_VFE_CMD_ID_STREAM_ON,
-	ISP_VFE_CMD_ID_STREAM_OFF,
-	ISP_VFE_CMD_ID_FRAME_BUF_RELEASE
-};
-
-struct msm_cam_v4l2_device;
-struct msm_cam_v4l2_dev_inst;
-#define MSM_MAX_IMG_MODE                8
-
-enum msm_buffer_state {
-	MSM_BUFFER_STATE_UNUSED,
-	MSM_BUFFER_STATE_INITIALIZED,
-	MSM_BUFFER_STATE_PREPARED,
-	MSM_BUFFER_STATE_QUEUED,
-	MSM_BUFFER_STATE_RESERVED,
-	MSM_BUFFER_STATE_DEQUEUED
-};
-
-struct msm_frame_buffer {
-	
-	struct vb2_buffer         vidbuf;
-	struct list_head		  list;
-	enum v4l2_mbus_pixelcode  pxlcode;
-	enum msm_buffer_state state;
-	int active;
-};
-
-struct msm_isp_color_fmt {
-	char *name;
-	int depth;
-	int bitsperpxl;
-	u32 fourcc;
-	enum v4l2_mbus_pixelcode pxlcode;
-	enum v4l2_colorspace colorspace;
-};
-
-struct msm_mctl_pp_frame_info {
-	int user_cmd;
-	struct msm_pp_frame src_frame;
-	struct msm_pp_frame dest_frame;
-	struct msm_mctl_pp_frame_cmd pp_frame_cmd;
-};
-
-struct msm_mctl_pp_ctrl {
-	int pp_msg_type;
-	struct msm_mctl_pp_frame_info *pp_frame_info;
-
-};
-struct msm_mctl_pp_info {
-	spinlock_t lock;
-	uint32_t cnt;
-	uint32_t pp_key;
-	uint32_t cur_frame_id[MSM_MAX_IMG_MODE];
-	struct msm_free_buf div_frame[MSM_MAX_IMG_MODE];
-	struct msm_mctl_pp_ctrl pp_ctrl;
-
-};
-
-struct msm_cam_media_controller {
-
-	int (*mctl_open)(struct msm_cam_media_controller *p_mctl,
-					 const char *const apps_id);
-	int (*mctl_cb)(void);
-	int (*mctl_cmd)(struct msm_cam_media_controller *p_mctl,
-					unsigned int cmd, unsigned long arg);
-	int (*mctl_release)(struct msm_cam_media_controller *p_mctl);
-	int (*mctl_buf_init)(struct msm_cam_v4l2_dev_inst *pcam);
-	int (*mctl_vbqueue_init)(struct msm_cam_v4l2_dev_inst *pcam,
-				struct vb2_queue *q, enum v4l2_buf_type type);
-	int (*mctl_ufmt_init)(struct msm_cam_media_controller *p_mctl);
- 	struct v4l2_subdev *sensor_sdev; 
-
-	struct v4l2_subdev *csiphy_sdev; 
-	struct v4l2_subdev *csid_sdev; 
-	struct v4l2_subdev *csic_sdev; 
-	struct v4l2_subdev *ispif_sdev; 
-	struct v4l2_subdev *act_sdev; 
-	struct v4l2_subdev *gemini_sdev; 
-	struct v4l2_subdev *vpe_sdev; 
-	struct v4l2_subdev *axi_sdev; 
-
-	struct msm_isp_ops *isp_sdev;	 
-	struct msm_cam_config_dev *config_device;
-
-	
-	uint8_t opencnt; 
-	const char *apps_id; 
-	struct mutex lock;
-	
-	
-	struct wake_lock wake_lock_suspend;
-
-	struct pm_qos_request pm_qos_req_list;
-	struct msm_mctl_pp_info pp_info;
-	struct msm_mctl_stats_t stats_info; 
-	uint32_t vfe_output_mode; 
-
-	struct ion_client *client;
-	struct kref refcount;
-	atomic_t dropframe_enabled;
-	atomic_t snap_dropframe_num; 
-	atomic_t snap_dropframe; 
-
-	
-	struct msm_cam_v4l2_device *pcam_ptr;
-
-	
-	struct msm_camera_sensor_info *sdata;
-	struct msm_actuator_ctrl *actctrl;
-
-
-	
-	uint32_t ping_imem_y;
-	uint32_t ping_imem_cbcr;
-	uint32_t pong_imem_y;
-	uint32_t pong_imem_cbcr;
-
-#ifdef CONFIG_PERFLOCK
-	struct perf_lock *cam_perf_lock;
-#endif
-};
-
-struct msm_isp_ops {
-	char *config_dev_name;
-
-	
-	int (*isp_open)(struct v4l2_subdev *sd,
-		struct msm_cam_media_controller *mctl);
-	int (*isp_config)(struct msm_cam_media_controller *pmctl,
-		 unsigned int cmd, unsigned long arg);
-	int (*isp_notify)(struct v4l2_subdev *sd,
-		unsigned int notification, void *arg);
-	void (*isp_release)(struct msm_cam_media_controller *mctl,
-		struct v4l2_subdev *sd);
-	int (*isp_pp_cmd)(struct msm_cam_media_controller *pmctl,
-		 struct msm_mctl_pp_cmd, void *data);
-
-	
-	struct v4l2_subdev *sd;
-	struct v4l2_subdev *sd_vpe;
-};
-
-struct msm_isp_buf_info {
-	int type;
-	unsigned long buffer;
-	int fd;
-};
-struct msm_cam_buf_offset {
-	uint32_t addr_offset;
-	uint32_t data_offset;
-};
-
-#define MSM_DEV_INST_MAX                    16
-struct msm_cam_v4l2_dev_inst {
-	struct v4l2_fh  eventHandle;
-	struct vb2_queue vid_bufq;
-	spinlock_t vq_irqlock;
-	struct list_head free_vq;
-	struct v4l2_format vid_fmt;
-	
-	enum v4l2_mbus_pixelcode sensor_pxlcode;
-	struct msm_cam_v4l2_device *pcam;
-	int my_index;
-	int image_mode;
-	int path;
-	int buf_count;
-	
-	struct msm_cam_buf_offset **buf_offset;
-	struct v4l2_crop crop;
-	int streamon;
-	struct msm_mem_map_info mem_map;
-	int is_mem_map_inst;
-	struct img_plane_info plane_info;
-	int vbqueue_initialized;
-    struct mutex inst_lock;
-	int no_free_buf_cnt; 
-};
-
-struct msm_cam_mctl_node {
-	
-	struct v4l2_device v4l2_dev;
-	struct video_device *pvdev;
-	struct msm_cam_v4l2_dev_inst *dev_inst[MSM_DEV_INST_MAX];
-	struct msm_cam_v4l2_dev_inst *dev_inst_map[MSM_MAX_IMG_MODE];
-	struct mutex dev_lock;
-	int active;
-	int use_count;
-};
-
-struct msm_cam_v4l2_device {
-	
-	int vnode_id;
-	struct v4l2_device v4l2_dev; 
-	struct video_device *pvdev; 
-	struct msm_cam_mctl_node mctl_node; 
-	struct media_device media_dev; 
-
-	
-	int use_count;
-
-
-	struct mutex vid_lock;
-	uint32_t server_queue_idx;
-	uint32_t mctl_handle;
-
-	struct msm_cam_v4l2_dev_inst *dev_inst[MSM_DEV_INST_MAX];
-	struct msm_cam_v4l2_dev_inst *dev_inst_map[MSM_MAX_IMG_MODE];
-	int op_mode;
-
-	
-	struct msm_isp_color_fmt *usr_fmts;
-	int num_fmts;
-
-	struct v4l2_subdev *sensor_sdev; 
-	struct v4l2_subdev *act_sdev; 
-	struct msm_camera_sensor_info *sdata;
-	struct msm_actuator_ctrl actctrl;
-
-};
-static inline struct msm_cam_v4l2_device *to_pcam(
-	struct v4l2_device *v4l2_dev)
-{
-	return container_of(v4l2_dev, struct msm_cam_v4l2_device, v4l2_dev);
-}
-
-struct v4l2_queue_util {
-	struct video_device *pvdev;
-	struct v4l2_fh  eventHandle;
-};
-
-struct msm_cam_config_dev {
-	struct cdev config_cdev;
-	struct v4l2_queue_util config_stat_event_queue;
-	int use_count;
-	
-	struct msm_cam_media_controller *p_mctl;
-	struct msm_mem_map_info mem_map;
-};
-#define MAX_NUM_ACTIVE_CAMERA 3
-
-
-struct msm_cam_server_queue {
-	uint32_t queue_active;
-	struct msm_device_queue ctrl_q;
-	struct msm_device_queue eventData_q;
-	uint8_t *ctrl_data;
-	uint32_t evt_id;
-};
-
-struct msm_cam_server_mctl_inst {
-	struct msm_cam_media_controller mctl;
-	uint32_t handle;
-};
-
-
-struct msm_cam_server_dev {
-
-	
-	struct platform_device *server_pdev;
-	
-	struct v4l2_device v4l2_dev;
-	struct video_device *video_dev;
-	struct media_device media_dev;
-
-	
-	struct msm_camera_info camera_info;
-	
-	struct msm_cam_config_dev_info config_info;
-	
-	struct msm_cam_v4l2_device *pcam_active;
-	
-	atomic_t number_pcam_active;
-	struct v4l2_queue_util server_command_queue;
-	struct msm_cam_server_queue server_queue[MAX_NUM_ACTIVE_CAMERA];
-	uint32_t server_evt_id;
-	struct msm_cam_server_mctl_inst mctl[MAX_NUM_ACTIVE_CAMERA];
-	uint32_t mctl_handle_cnt;
-	
-	int use_count;
-	
-	struct msm_isp_ops *isp_subdev[MSM_MAX_CAMERA_CONFIGS];
-	
-	struct msm_mctl_node_info mctl_node_info;
-	struct mutex server_lock;
-	struct mutex server_queue_lock;
-	
-	struct v4l2_subdev *csiphy_device[MAX_NUM_CSIPHY_DEV];
-	struct v4l2_subdev *csid_device[MAX_NUM_CSID_DEV];
-	struct v4l2_subdev *csic_device[MAX_NUM_CSIC_DEV];
-	struct v4l2_subdev *ispif_device;
-	struct v4l2_subdev *vfe_device[MAX_NUM_VFE_DEV];
-	struct v4l2_subdev *axi_device[MAX_NUM_AXI_DEV];
-	struct v4l2_subdev *vpe_device[MAX_NUM_VPE_DEV];
-	struct v4l2_subdev *gesture_device;
-
-#ifdef CONFIG_PERFLOCK
-	struct perf_lock cam_perf_lock;
-#endif
-};
-
-
-
-void msm_isp_vfe_dev_init(struct v4l2_subdev *vd);
-int msm_isp_register(struct msm_cam_server_dev *psvr);
-void msm_isp_unregister(struct msm_cam_server_dev *psvr);
-int msm_sensor_register(struct v4l2_subdev *);
-int msm_isp_init_module(int g_num_config_nodes);
-
-int msm_mctl_init(struct msm_cam_v4l2_device *pcam);
-int msm_mctl_free(struct msm_cam_v4l2_device *pcam);
-int msm_mctl_buf_init(struct msm_cam_v4l2_device *pcam);
-int msm_mctl_init_user_formats(struct msm_cam_v4l2_device *pcam);
-int msm_mctl_buf_done(struct msm_cam_media_controller *pmctl,
-			int msg_type, struct msm_free_buf *buf,
-			uint32_t frame_id);
-int msm_mctl_buf_done_pp(struct msm_cam_media_controller *pmctl,
-	int msg_type, struct msm_free_buf *frame, int dirty, int node_type);
-int msm_mctl_reserve_free_buf(struct msm_cam_media_controller *pmctl,
-				struct msm_cam_v4l2_dev_inst *pcam_inst,
-				int path, struct msm_free_buf *free_buf);
-int msm_mctl_release_free_buf(struct msm_cam_media_controller *pmctl,
-				struct msm_cam_v4l2_dev_inst *pcam_inst,
-				int path, struct msm_free_buf *free_buf);
-int msm_mctl_return_free_buf(struct msm_cam_media_controller *pmctl,
-				int path, struct msm_free_buf *free_buf);
-int msm_register_pmem(struct hlist_head *ptype, void __user *arg,
-				struct ion_client *client);
-int msm_pmem_table_del(struct hlist_head *ptype, void __user *arg,
-				struct ion_client *client);
-int msm_pmem_region_get_phy_addr(struct hlist_head *ptype,
-	struct msm_mem_map_info *mem_map, int32_t *phyaddr);
-uint8_t msm_pmem_region_lookup(struct hlist_head *ptype,
-	int pmem_type, struct msm_pmem_region *reg, uint8_t maxcount);
-uint8_t msm_pmem_region_lookup_2(struct hlist_head *ptype,
-					int pmem_type,
-					struct msm_pmem_region *reg,
-					uint8_t maxcount);
-unsigned long msm_pmem_stats_vtop_lookup(
-				struct msm_cam_media_controller *mctl,
-				unsigned long buffer,
-				int fd);
-unsigned long msm_pmem_stats_ptov_lookup(
-	struct msm_cam_media_controller *mctl,
-	unsigned long addr, int *fd);
-
-int msm_vfe_subdev_init(struct v4l2_subdev *sd,
-			struct msm_cam_media_controller *mctl);
-void msm_vfe_subdev_release(struct v4l2_subdev *sd);
-
-int msm_isp_subdev_ioctl(struct v4l2_subdev *sd,
-	struct msm_vfe_cfg_cmd *cfgcmd, void *data);
-int msm_vpe_subdev_init(struct v4l2_subdev *sd,
-			struct msm_cam_media_controller *mctl);
-int msm_gemini_subdev_init(struct v4l2_subdev *gemini_sd);
-void msm_vpe_subdev_release(void);
-void msm_gemini_subdev_release(struct v4l2_subdev *gemini_sd);
-int msm_mctl_is_pp_msg_type(struct msm_cam_media_controller *p_mctl,
-	int msg_type);
-int msm_mctl_do_pp(struct msm_cam_media_controller *p_mctl,
-			int msg_type, uint32_t y_phy, uint32_t frame_id);
-int msm_mctl_pp_ioctl(struct msm_cam_media_controller *p_mctl,
-			unsigned int cmd, unsigned long arg);
-int msm_mctl_pp_notify(struct msm_cam_media_controller *pmctl,
-			struct msm_mctl_pp_frame_info *pp_frame_info);
-int msm_mctl_img_mode_to_inst_index(struct msm_cam_media_controller *pmctl,
-					int out_type, int node_type);
-struct msm_frame_buffer *msm_mctl_buf_find(
-	struct msm_cam_media_controller *pmctl,
-	struct msm_cam_v4l2_dev_inst *pcam_inst, int del_buf,
-	int msg_type, struct msm_free_buf *fbuf);
-void msm_mctl_gettimeofday(struct timeval *tv);
-struct msm_frame_buffer *msm_mctl_get_free_buf(
-		struct msm_cam_media_controller *pmctl,
-		int msg_type);
-int msm_mctl_put_free_buf(
-		struct msm_cam_media_controller *pmctl,
-		int msg_type, struct msm_frame_buffer *buf);
-int msm_mctl_check_pp(struct msm_cam_media_controller *p_mctl,
-		int msg_type, int *pp_divert_type, int *pp_type);
-int msm_mctl_do_pp_divert(
-	struct msm_cam_media_controller *p_mctl,
-	int msg_type, struct msm_free_buf *fbuf,
-	uint32_t frame_id, int pp_type);
-int msm_mctl_buf_del(struct msm_cam_media_controller *pmctl,
-	int msg_type,
-	struct msm_frame_buffer *my_buf);
-int msm_mctl_pp_release_free_frame(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg);
-int msm_mctl_pp_reserve_free_frame(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg);
-int msm_mctl_pp_return_free_frame(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg);
-int msm_mctl_set_pp_key(struct msm_cam_media_controller *p_mctl,
-				void __user *arg);
-int msm_mctl_pp_done(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg);
-int msm_mctl_pp_divert_done(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg);
-int msm_setup_v4l2_event_queue(struct v4l2_fh *eventHandle,
-					struct video_device *pvdev);
-int msm_setup_mctl_node(struct msm_cam_v4l2_device *pcam);
-struct msm_cam_v4l2_dev_inst *msm_mctl_get_pcam_inst(
-		struct msm_cam_media_controller *pmctl,
-		int image_mode);
-int msm_mctl_buf_return_buf(struct msm_cam_media_controller *pmctl,
-			int image_mode, struct msm_frame_buffer *buf);
-int msm_mctl_pp_mctl_divert_done(struct msm_cam_media_controller *p_mctl,
-					void __user *arg);
-void msm_release_ion_client(struct kref *ref);
-int msm_cam_register_subdev_node(struct v4l2_subdev *sd,
-			enum msm_cam_subdev_type sdev_type, uint8_t index);
-
-#if 1	
-int msm_rawchip_attr_node(void);
-#endif	
-uint32_t msm_camera_get_mctl_handle(void);
-struct msm_cam_media_controller *msm_camera_get_mctl(uint32_t handle);
-void msm_camera_free_mctl(uint32_t handle);
-int msm_server_open_client(int *p_qidx);
-int msm_server_send_ctrl(struct msm_ctrl_cmd *out, int ctrl_id);
-int msm_server_close_client(int idx);
-int msm_cam_server_open_mctl_session(struct msm_cam_v4l2_device *pcam,
-	int *p_active);
-int msm_cam_server_close_mctl_session(struct msm_cam_v4l2_device *pcam);
-
-#endif 
-
-#endif 
diff --git a/drivers/media/video/msm/msm_axi_qos.c b/drivers/media/video/msm/msm_axi_qos.c
deleted file mode 100644
index eaceceb..0000000
--- a/drivers/media/video/msm/msm_axi_qos.c
+++ /dev/null
@@ -1,50 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/clk.h>
-#include <mach/camera.h>
-#define MSM_AXI_QOS_NAME "msm_camera"
-
-static struct clk *ebi1_clk;
-
-int add_axi_qos(void)
-{
-	ebi1_clk = clk_get(NULL, "ebi1_vfe_clk");
-	if (IS_ERR(ebi1_clk))
-		ebi1_clk = NULL;
-	else {
-		clk_prepare(ebi1_clk);
-		clk_enable(ebi1_clk);
-	}
-
-	return 0;
-}
-
-int update_axi_qos(uint32_t rate)
-{
-	if (!ebi1_clk)
-		return 0;
-
-	return clk_set_rate(ebi1_clk, rate * 1000);
-}
-
-void release_axi_qos(void)
-{
-	if (!ebi1_clk)
-		return;
-
-	clk_disable(ebi1_clk);
-	clk_unprepare(ebi1_clk);
-	clk_put(ebi1_clk);
-	ebi1_clk = NULL;
-}
diff --git a/drivers/media/video/msm/msm_gesture.c b/drivers/media/video/msm/msm_gesture.c
deleted file mode 100644
index 2839e43..0000000
--- a/drivers/media/video/msm/msm_gesture.c
+++ /dev/null
@@ -1,502 +0,0 @@
-/* Copyright (c) 2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <mach/camera.h>
-#include <media/v4l2-subdev.h>
-#include "msm.h"
-#include <media/msm_camera.h>
-#include <media/msm_gestures.h>
-#include <media/v4l2-ctrls.h>
-
-#ifdef CONFIG_MSM_CAMERA_DEBUG
-#define D(fmt, args...) pr_debug("msm_gesture: " fmt, ##args)
-#else
-#define D(fmt, args...) do {} while (0)
-#endif
-
-struct msm_gesture_ctrl {
-	int queue_id;
-	atomic_t active;
-	struct v4l2_ctrl_handler ctrl_handler;
-	int num_ctrls;
-	struct v4l2_fh *p_eventHandle;
-	struct v4l2_subdev *sd;
-	struct msm_ges_evt event;
-	int camera_opened;
-};
-
-static struct msm_gesture_ctrl g_gesture_ctrl;
-
-int msm_gesture_subscribe_event(struct v4l2_subdev *sd, struct v4l2_fh *fh,
-	struct v4l2_event_subscription *sub)
-{
-	D("%s\n", __func__);
-	if (sub->type == V4L2_EVENT_ALL)
-		sub->type = MSM_GES_APP_NOTIFY_EVENT;
-	return v4l2_event_subscribe(fh, sub);
-}
-
-static int msm_gesture_send_ctrl(struct msm_gesture_ctrl *p_gesture_ctrl,
-	int type, void *value, int length, uint32_t timeout)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd ctrlcmd;
-	D("%s qid %d\n", __func__, p_gesture_ctrl->queue_id);
-	ctrlcmd.type = type;
-	ctrlcmd.timeout_ms = timeout;
-	ctrlcmd.length = length;
-	ctrlcmd.value = value;
-	ctrlcmd.vnode_id = 0;
-	ctrlcmd.queue_idx = p_gesture_ctrl->queue_id;
-	ctrlcmd.config_ident = 0;
-
-	rc = msm_server_send_ctrl(&ctrlcmd, MSM_GES_RESP_V4L2);
-	return rc;
-}
-
-static int msm_gesture_proc_ctrl_cmd(struct msm_gesture_ctrl *p_gesture_ctrl,
-	struct v4l2_control *ctrl)
-{
-	int rc = 0;
-	struct msm_ctrl_cmd *tmp_cmd = NULL;
-	uint8_t *ctrl_data = NULL;
-	void __user *uptr_cmd;
-	void __user *uptr_value;
-	uint32_t cmd_len = sizeof(struct msm_ctrl_cmd);
-	uint32_t value_len;
-
-	tmp_cmd = (struct msm_ctrl_cmd *)ctrl->value;
-	uptr_cmd = (void __user *)ctrl->value;
-	uptr_value = (void __user *)tmp_cmd->value;
-	value_len = tmp_cmd->length;
-
-	D("%s: cmd type = %d, up1=0x%x, ulen1=%d, up2=0x%x, ulen2=%d\n",
-		__func__, tmp_cmd->type, (uint32_t)uptr_cmd, cmd_len,
-		(uint32_t)uptr_value, tmp_cmd->length);
-
-	ctrl_data = kzalloc(value_len + cmd_len, GFP_KERNEL);
-	if (ctrl_data == 0) {
-		pr_err("%s could not allocate memory\n", __func__);
-		rc = -ENOMEM;
-		goto end;
-	}
-	tmp_cmd = (struct msm_ctrl_cmd *)ctrl_data;
-	if (copy_from_user((void *)ctrl_data, uptr_cmd,
-			cmd_len)) {
-		pr_err("%s: copy_from_user failed.\n", __func__);
-		rc = -EINVAL;
-		goto end;
-	}
-	tmp_cmd->value = (void *)(ctrl_data + cmd_len);
-	if (uptr_value && tmp_cmd->length > 0) {
-		if (copy_from_user((void *)tmp_cmd->value, uptr_value,
-			value_len)) {
-			pr_err("%s: copy_from_user failed, size=%d\n",
-				__func__, value_len);
-			rc = -EINVAL;
-			goto end;
-		}
-	} else
-		tmp_cmd->value = NULL;
-
-	
-	rc = msm_server_send_ctrl((struct msm_ctrl_cmd *)ctrl_data,
-			MSM_GES_RESP_V4L2);
-	D("%s: msm_server_control rc=%d\n", __func__, rc);
-	if (rc == 0) {
-		if (uptr_value && tmp_cmd->length > 0 &&
-			copy_to_user((void __user *)uptr_value,
-				(void *)(ctrl_data + cmd_len),
-				tmp_cmd->length)) {
-			pr_err("%s: copy_to_user failed, size=%d\n",
-				__func__, tmp_cmd->length);
-			rc = -EINVAL;
-			goto end;
-		}
-		tmp_cmd->value = uptr_value;
-		if (copy_to_user((void __user *)uptr_cmd,
-			(void *)tmp_cmd, cmd_len)) {
-			pr_err("%s: copy_to_user failed in cpy, size=%d\n",
-				__func__, cmd_len);
-			rc = -EINVAL;
-			goto end;
-		}
-	}
-end:
-	D("%s: END, type = %d, vaddr = 0x%x, vlen = %d, status = %d, rc = %d\n",
-		__func__, tmp_cmd->type, (uint32_t)tmp_cmd->value,
-		tmp_cmd->length, tmp_cmd->status, rc);
-	kfree(ctrl_data);
-	return rc;
-}
-
-static int msm_gesture_s_ctrl(struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl)
-{
-	int rc = 0;
-	struct msm_gesture_ctrl *p_gesture_ctrl = &g_gesture_ctrl;
-	D("%s ctrl->id %d\n", __func__, ctrl->id);
-	rc = msm_gesture_proc_ctrl_cmd(p_gesture_ctrl, ctrl);
-	if (rc != 0) {
-		pr_err("%s set ctrl failed %d\n", __func__, rc);
-		return -EINVAL;
-	}
-	return rc;
-}
-
-static int msm_gesture_s_ctrl_ops(struct v4l2_ctrl *ctrl)
-{
-	int rc = 0;
-	struct v4l2_control control;
-	struct msm_gesture_ctrl *p_gesture_ctrl = &g_gesture_ctrl;
-	control.id = ctrl->id;
-	control.value = ctrl->val;
-	D("%s ctrl->id 0x%x\n", __func__, ctrl->id);
-	rc = msm_gesture_proc_ctrl_cmd(p_gesture_ctrl, &control);
-	if (rc != 0) {
-		pr_err("%s proc ctrl failed %d\n", __func__, rc);
-		return -EINVAL;
-	}
-	return rc;
-}
-
-static int msm_gesture_s_ctrl_ext(struct v4l2_subdev *sd,
-	struct v4l2_ext_controls *ctrls)
-{
-	int rc = 0;
-	struct v4l2_control control;
-	struct msm_gesture_ctrl *p_gesture_ctrl = &g_gesture_ctrl;
-	if ((ctrls->count < 1) || (NULL == ctrls->controls)) {
-		pr_err("%s invalid ctrl failed\n", __func__);
-		return -EINVAL;
-	}
-	control.id = ctrls->controls->id;
-	control.value = ctrls->controls->value;
-	D("%s ctrl->id %d\n", __func__, control.id);
-	rc = msm_gesture_proc_ctrl_cmd(p_gesture_ctrl, &control);
-	if (rc != 0) {
-		pr_err("%s proc ctrl failed %d\n", __func__, rc);
-		return -EINVAL;
-	}
-	return rc;
-}
-
-static int msm_gesture_handle_event(struct v4l2_subdev *sd,
-	struct msm_gesture_ctrl *p_gesture_ctrl, void* arg)
-{
-	int rc = 0;
-	struct v4l2_event *evt = (struct v4l2_event *)arg;
-	struct msm_ges_evt *p_ges_evt = NULL;
-	D("%s: Received gesture evt 0x%x ", __func__, evt->type);
-	p_gesture_ctrl->event.evt_len = 0;
-	p_gesture_ctrl->event.evt_data = NULL;
-	if (0 != evt->u.data[0]) {
-		p_ges_evt = (struct msm_ges_evt *)evt->u.data;
-		D("%s: event data %p len %d", __func__,
-			p_ges_evt->evt_data,
-			p_ges_evt->evt_len);
-
-		if (p_ges_evt->evt_len > 0) {
-			p_gesture_ctrl->event.evt_data =
-				kzalloc(p_ges_evt->evt_len, GFP_KERNEL);
-
-			if (NULL == p_gesture_ctrl->event.evt_data) {
-				pr_err("%s: cannot allocate event", __func__);
-				rc = -ENOMEM;
-			} else {
-				if (copy_from_user(
-					(void *)p_gesture_ctrl->event.evt_data,
-					(void __user *)p_ges_evt->evt_data,
-					p_ges_evt->evt_len)) {
-					pr_err("%s: copy_from_user failed",
-							__func__);
-					rc = -EFAULT;
-				} else {
-					D("%s: copied the event", __func__);
-					p_gesture_ctrl->event.evt_len =
-						p_ges_evt->evt_len;
-				}
-			}
-		}
-	}
-
-	if (rc == 0) {
-		ktime_get_ts(&evt->timestamp);
-		v4l2_event_queue(&sd->devnode, evt);
-	}
-	D("%s: exit rc %d ", __func__, rc);
-	return rc;
-}
-
-static int msm_gesture_get_evt_payload(struct v4l2_subdev *sd,
-	struct msm_gesture_ctrl *p_gesture_ctrl, void* arg)
-{
-	int rc = 0;
-	struct msm_ges_evt *p_ges_evt = (struct msm_ges_evt *)arg;
-	D("%s: enter ", __func__);
-	if (NULL != p_gesture_ctrl->event.evt_data) {
-		D("%s: event data %p len %d", __func__,
-			p_gesture_ctrl->event.evt_data,
-			p_gesture_ctrl->event.evt_len);
-
-		if (copy_to_user((void __user *)p_ges_evt->evt_data,
-			p_gesture_ctrl->event.evt_data,
-			p_gesture_ctrl->event.evt_len)) {
-			pr_err("%s: copy_to_user failed.\n", __func__);
-			rc = -EFAULT;
-		} else {
-			D("%s: copied the event", __func__);
-			p_ges_evt->evt_len = p_gesture_ctrl->event.evt_len;
-		}
-	}
-	D("%s: exit rc %d ", __func__, rc);
-	return rc;
-}
-
-static int msm_gesture_handle_cam_event(struct v4l2_subdev *sd,
-	struct msm_gesture_ctrl *p_gesture_ctrl, int cam_evt)
-{
-	int rc = 0;
-	D("%s: cam_evt %d ", __func__, cam_evt);
-
-	if ((cam_evt != MSM_V4L2_GES_CAM_OPEN)
-		&& (cam_evt != MSM_V4L2_GES_CAM_CLOSE)) {
-		pr_err("%s: error invalid event %d ", __func__, cam_evt);
-		return -EINVAL;
-	}
-
-	p_gesture_ctrl->camera_opened =
-		(cam_evt == MSM_V4L2_GES_CAM_OPEN);
-
-	if (atomic_read(&p_gesture_ctrl->active) == 0) {
-		D("%s gesture not active\n", __func__);
-		return 0;
-	}
-
-	rc = msm_gesture_send_ctrl(p_gesture_ctrl, cam_evt, NULL,
-		0, 2000);
-	if (rc != 0) {
-		pr_err("%s gesture ctrl failed %d\n", __func__, rc);
-		rc = -EINVAL;
-	}
-	D("%s exit rc %d\n", __func__, rc);
-	return rc;
-}
-
-long msm_gesture_ioctl(struct v4l2_subdev *sd,
-	 unsigned int cmd, void *arg)
-{
-	int rc = 0;
-	struct msm_gesture_ctrl *p_gesture_ctrl = &g_gesture_ctrl;
-	D("%s\n", __func__);
-	switch (cmd) {
-	case MSM_GES_IOCTL_CTRL_COMMAND: {
-		struct v4l2_control *ctrl = (struct v4l2_control *)arg;
-		D("%s MSM_GES_IOCTL_CTRL_COMMAND arg %p size %d\n", __func__,
-			arg, sizeof(ctrl));
-		rc = msm_gesture_s_ctrl(sd, ctrl);
-		break;
-	}
-	case VIDIOC_MSM_GESTURE_EVT: {
-		rc = msm_gesture_handle_event(sd, p_gesture_ctrl, arg);
-		break;
-	}
-	case VIDIOC_MSM_GESTURE_CAM_EVT: {
-		int cam_evt = *((int *)arg);
-		rc = msm_gesture_handle_cam_event(sd, p_gesture_ctrl, cam_evt);
-		break;
-	}
-	case MSM_GES_GET_EVT_PAYLOAD: {
-		rc = msm_gesture_get_evt_payload(sd, p_gesture_ctrl, arg);
-		break;
-	}
-	default:
-		pr_err("%s: Invalid ioctl %d", __func__, cmd);
-		break;
-	}
-	D("%s exit rc %d\n", __func__, rc);
-	return rc;
-}
-
-static const struct v4l2_ctrl_ops msm_gesture_ctrl_ops = {
-	.s_ctrl = msm_gesture_s_ctrl_ops,
-};
-
-static const struct v4l2_ctrl_config msm_gesture_ctrl_filter = {
-	.ops = &msm_gesture_ctrl_ops,
-	.id = MSM_GESTURE_CID_CTRL_CMD,
-	.name = "Gesture ctrl",
-	.type = V4L2_CTRL_TYPE_INTEGER,
-	.flags = V4L2_CTRL_FLAG_SLIDER,
-	.max = 0x7fffffff,
-	.step = 1,
-	.min = 0x80000000,
-};
-
-static int msm_gesture_init_ctrl(struct v4l2_subdev *sd,
-	struct msm_gesture_ctrl *p_gesture_ctrl)
-{
-	int rc = 0;
-	p_gesture_ctrl->num_ctrls = 1;
-	p_gesture_ctrl->ctrl_handler.error = 0;
-	v4l2_ctrl_handler_init(&p_gesture_ctrl->ctrl_handler,
-		p_gesture_ctrl->num_ctrls);
-	v4l2_ctrl_new_custom(&p_gesture_ctrl->ctrl_handler,
-		&msm_gesture_ctrl_filter, p_gesture_ctrl);
-	if (p_gesture_ctrl->ctrl_handler.error) {
-		int err = p_gesture_ctrl->ctrl_handler.error;
-		D("%s: error adding control %d", __func__, err);
-		p_gesture_ctrl->ctrl_handler.error = 0;
-	}
-	sd->ctrl_handler = &p_gesture_ctrl->ctrl_handler;
-	return rc;
-}
-
-static int msm_gesture_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
-{
-	int rc = 0, rc_err = 0;
-	struct msm_gesture_ctrl *p_gesture_ctrl = &g_gesture_ctrl;
-	D("%s\n", __func__);
-	if (atomic_read(&p_gesture_ctrl->active) != 0) {
-		pr_err("%s already opened\n", __func__);
-		return -EINVAL;
-	}
-	memset(&p_gesture_ctrl->event, 0x0, sizeof(struct msm_ges_evt));
-	rc = msm_server_open_client(&p_gesture_ctrl->queue_id);
-	if (rc != 0) {
-		pr_err("%s open failed %d\n", __func__, rc);
-		rc = -EINVAL;
-		goto err;
-	}
-
-	rc = msm_gesture_init_ctrl(sd, p_gesture_ctrl);
-	if (rc != 0) {
-		pr_err("%s init ctrl failed %d\n", __func__, rc);
-		rc = -EINVAL;
-		goto err;
-	}
-
-	rc = msm_gesture_send_ctrl(p_gesture_ctrl, MSM_V4L2_GES_OPEN, NULL,
-		0, 10000);
-	if (rc != 0) {
-		pr_err("%s gesture ctrl failed %d\n", __func__, rc);
-		rc = -EINVAL;
-		goto err;
-	}
-
-	atomic_inc(&p_gesture_ctrl->active);
-
-	return rc;
-
-err:
-	rc_err = msm_server_close_client(p_gesture_ctrl->queue_id);
-	if (rc_err != 0)
-		pr_err("%s failed %d\n", __func__, rc);
-	return rc;
-}
-
-static int msm_gesture_close(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
-{
-	int rc = 0;
-	struct msm_gesture_ctrl *p_gesture_ctrl = &g_gesture_ctrl;
-	D("%s\n", __func__);
-	if (atomic_read(&p_gesture_ctrl->active) == 0) {
-		pr_err("%s already closed\n", __func__);
-		return -EINVAL;
-	}
-
-	rc = msm_gesture_send_ctrl(p_gesture_ctrl, MSM_V4L2_GES_CLOSE, NULL,
-		0, 10000);
-	if (rc != 0)
-		pr_err("%s gesture ctrl failed %d\n", __func__, rc);
-
-	rc = msm_server_close_client(p_gesture_ctrl->queue_id);
-	if (rc != 0)
-		pr_err("%s failed %d\n", __func__, rc);
-
-	v4l2_ctrl_handler_free(&p_gesture_ctrl->ctrl_handler);
-	kfree(p_gesture_ctrl->event.evt_data);
-
-	atomic_dec(&p_gesture_ctrl->active);
-	g_gesture_ctrl.queue_id = -1;
-	return 0;
-}
-
-static struct v4l2_subdev_core_ops msm_gesture_core_ops = {
-	.s_ctrl = msm_gesture_s_ctrl,
-	.s_ext_ctrls = msm_gesture_s_ctrl_ext,
-	.ioctl = msm_gesture_ioctl,
-	.subscribe_event = msm_gesture_subscribe_event,
-};
-
-static struct v4l2_subdev_video_ops msm_gesture_video_ops;
-
-static struct v4l2_subdev_ops msm_gesture_subdev_ops = {
-	.core = &msm_gesture_core_ops,
-	.video  = &msm_gesture_video_ops,
-};
-
-static const struct v4l2_subdev_internal_ops msm_gesture_internal_ops = {
-	.open = msm_gesture_open,
-	.close = msm_gesture_close,
-};
-
-static int msm_gesture_node_register(void)
-{
-	struct msm_gesture_ctrl *p_gesture_ctrl = &g_gesture_ctrl;
-	struct v4l2_subdev *gesture_subdev =
-		kzalloc(sizeof(struct v4l2_subdev), GFP_KERNEL);
-	D("%s\n", __func__);
-	if (!gesture_subdev) {
-		pr_err("%s: no enough memory\n", __func__);
-		return -ENOMEM;
-	};
-
-	v4l2_subdev_init(gesture_subdev, &msm_gesture_subdev_ops);
-	gesture_subdev->internal_ops = &msm_gesture_internal_ops;
-	gesture_subdev->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-	snprintf(gesture_subdev->name,
-			 sizeof(gesture_subdev->name), "gesture");
-
-#if defined(CONFIG_MEDIA_CONTROLLER)
-
-	media_entity_init(&gesture_subdev->entity, 0, NULL, 0);
-	gesture_subdev->entity.type = MEDIA_ENT_T_DEVNODE_V4L;
-	gesture_subdev->entity.group_id = GESTURE_DEV;
-	gesture_subdev->entity.name = gesture_subdev->name;
-#endif
-	
-	gesture_subdev->flags |= V4L2_SUBDEV_FL_HAS_EVENTS;
-	gesture_subdev->nevents = MAX_GES_EVENTS;
-
-	msm_cam_register_subdev_node(gesture_subdev, GESTURE_DEV, 0);
-#if defined(CONFIG_MEDIA_CONTROLLER)
-
-	gesture_subdev->entity.revision = gesture_subdev->devnode.num;
-#endif
-	atomic_set(&p_gesture_ctrl->active, 0);
-	p_gesture_ctrl->queue_id = -1;
-	p_gesture_ctrl->event.evt_data = NULL;
-	p_gesture_ctrl->event.evt_len = 0;
-	return 0;
-}
-
-static int __init msm_gesture_init_module(void)
-{
-	return msm_gesture_node_register();
-}
-
-module_init(msm_gesture_init_module);
-MODULE_DESCRIPTION("MSM Gesture driver");
-MODULE_LICENSE("GPL v2");
-
diff --git a/drivers/media/video/msm/msm_io_8x60_v4l2.c b/drivers/media/video/msm/msm_io_8x60_v4l2.c
deleted file mode 100644
index 679f9c5..0000000
--- a/drivers/media/video/msm/msm_io_8x60_v4l2.c
+++ /dev/null
@@ -1,540 +0,0 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/delay.h>
-#include <linux/clk.h>
-#include <linux/io.h>
-#include <linux/regulator/consumer.h>
-#include <mach/gpio.h>
-#include <mach/board.h>
-#include <mach/camera.h>
-#include <mach/vreg.h>
-#include <mach/camera.h>
-#include <mach/clk.h>
-#include <mach/msm_bus.h>
-#include <mach/msm_bus_board.h>
-
-#include <msm_sensor.h>
-
-#define MSM_AXI_QOS_PREVIEW     192000
-#define MSM_AXI_QOS_SNAPSHOT    192000
-#define MSM_AXI_QOS_RECORDING   192000
-#define PM_QOS_DEFAULT_VALUE -1
-
-#define BUFF_SIZE_128 128
-
-static struct clk *camio_cam_clk;
-static struct clk *camio_jpeg_clk;
-static struct clk *camio_vfe_clk;
-static struct clk *camio_jpeg_pclk;
-static struct clk *camio_vpe_clk;
-static struct clk *camio_vpe_pclk;
-static struct regulator *fs_ijpeg;
-static struct regulator *fs_vpe;
-static int camio_cam_open_cnt = 0;
-
-static int vpe_clk_rate;
-static struct platform_device *camio_dev;
-void msm_io_w(u32 data, void __iomem *addr)
-{
-	CDBG("%s: %08x %08x\n", __func__, (int) (addr), (data));
-	writel_relaxed((data), (addr));
-}
-
-void msm_io_w_mb(u32 data, void __iomem *addr)
-{
-	CDBG("%s: %08x %08x\n", __func__, (int) (addr), (data));
-	wmb();
-	writel_relaxed((data), (addr));
-	wmb();
-}
-
-u32 msm_io_r(void __iomem *addr)
-{
-	uint32_t data = readl_relaxed(addr);
-	CDBG("%s: %08x %08x\n", __func__, (int) (addr), (data));
-	return data;
-}
-
-u32 msm_io_r_mb(void __iomem *addr)
-{
-	uint32_t data;
-	rmb();
-	data = readl_relaxed(addr);
-	rmb();
-	CDBG("%s: %08x %08x\n", __func__, (int) (addr), (data));
-	return data;
-}
-
-void msm_io_memcpy_toio(void __iomem *dest_addr,
-	void __iomem *src_addr, u32 len)
-{
-	int i;
-	u32 *d = (u32 *) dest_addr;
-	u32 *s = (u32 *) src_addr;
-	
-	for (i = 0; i < len; i++)
-		writel_relaxed(*s++, d++);
-}
-
-void msm_io_dump(void __iomem *addr, int size)
-{
-	char line_str[BUFF_SIZE_128], *p_str;
-	int i;
-	u32 *p = (u32 *) addr;
-	u32 data;
-	CDBG("%s: %p %d\n", __func__, addr, size);
-	line_str[0] = '\0';
-	p_str = line_str;
-	for (i = 0; i < size/4; i++) {
-		if (i % 4 == 0) {
-			snprintf(p_str, 12, "%08x: ", (u32) p);
-			p_str += 10;
-		}
-		data = readl_relaxed(p++);
-		snprintf(p_str, 12, "%08x ", data);
-		p_str += 9;
-		if ((i + 1) % 4 == 0) {
-			CDBG("%s\n", line_str);
-			line_str[0] = '\0';
-			p_str = line_str;
-		}
-	}
-	if (line_str[0] != '\0')
-		CDBG("%s\n", line_str);
-}
-
-void msm_io_memcpy(void __iomem *dest_addr, void __iomem *src_addr, u32 len)
-{
-	CDBG("%s: %p %p %d\n", __func__, dest_addr, src_addr, len);
-	msm_io_memcpy_toio(dest_addr, src_addr, len / 4);
-	msm_io_dump(dest_addr, len);
-}
-
-
-int msm_camio_clk_enable(enum msm_camio_clk_type clktype)
-{
-	int rc = 0;
-	struct clk *clk = NULL;
-	pr_info("[CAM] %s clktype:%d", __func__, clktype);
-	switch (clktype) {
-	case CAMIO_CAM_MCLK_CLK:
-		camio_cam_open_cnt++;
-		if (camio_cam_open_cnt > 1)
-			return 0;
-		camio_cam_clk =
-		clk = clk_get(NULL, "cam_clk");
-		pr_info("[CAM] %s clk:0x%x", __func__, (unsigned int)clk);
-		msm_camio_clk_rate_set_2(clk, 24000000);
-		break;
-
-	case CAMIO_JPEG_CLK:
-		camio_jpeg_clk =
-		clk = clk_get(NULL, "ijpeg_clk");
-		msm_camio_clk_rate_set_2(clk, 228571000);
-		break;
-
-	case CAMIO_JPEG_PCLK:
-		camio_jpeg_pclk =
-		clk = clk_get(NULL, "ijpeg_pclk");
-		break;
-
-	case CAMIO_VPE_CLK:
-		camio_vpe_clk =
-		clk = clk_get(NULL, "vpe_clk");
-		vpe_clk_rate = clk_round_rate(camio_vpe_clk, vpe_clk_rate);
-		clk_set_rate(camio_vpe_clk, vpe_clk_rate);
-		break;
-
-	case CAMIO_VPE_PCLK:
-		camio_vpe_pclk =
-		clk = clk_get(NULL, "vpe_pclk");
-		break;
-
-	default:
-		break;
-	}
-
-	if (!IS_ERR(clk)) {
-		clk_prepare(clk);
-		clk_enable(clk);
-	} else {
-		rc = -1;
-	}
-	return rc;
-}
-
-int msm_camio_clk_disable(enum msm_camio_clk_type clktype)
-{
-	int rc = 0;
-	struct clk *clk = NULL;
-	pr_info("[CAM] %s clktype:%d", __func__, clktype);
-
-	switch (clktype) {
-	case CAMIO_CAM_MCLK_CLK:
-		camio_cam_open_cnt--;
-		if (camio_cam_open_cnt > 0)
-			return 0;
-		if (camio_cam_open_cnt < 0){
-			camio_cam_open_cnt = 0;
-			return 0;
-		}
-		clk = camio_cam_clk;
-		break;
-
-	case CAMIO_JPEG_CLK:
-		clk = camio_jpeg_clk;
-		break;
-
-	case CAMIO_JPEG_PCLK:
-		clk = camio_jpeg_pclk;
-		break;
-
-	case CAMIO_VPE_CLK:
-		clk = camio_vpe_clk;
-		break;
-
-	case CAMIO_VPE_PCLK:
-		clk = camio_vpe_pclk;
-		break;
-
-	default:
-		break;
-	}
-
-	if (!IS_ERR(clk)) {
-		clk_disable(clk);
-		clk_unprepare(clk);
-		clk_put(clk);
-	} else {
-		rc = -1;
-	}
-
-	return rc;
-}
-
-int msm_camio_vfe_clk_rate_set(int rate)
-{
-	int rc = 0;
-	struct clk *clk = camio_vfe_clk;
-	if (rate > clk_get_rate(clk))
-		rc = clk_set_rate(clk, rate);
-	return rc;
-}
-
-void msm_camio_clk_rate_set(int rate)
-{
-	struct clk *clk = camio_cam_clk;
-	clk_set_rate(clk, rate);
-}
-
-void msm_camio_clk_rate_set_2(struct clk *clk, int rate)
-{
-	clk_set_rate(clk, rate);
-}
-
-int msm_camio_jpeg_clk_disable(void)
-{
-	int rc = 0;
-	if (fs_ijpeg) {
-		rc = regulator_disable(fs_ijpeg);
-		if (rc < 0) {
-			CDBG("%s: Regulator disable failed %d\n", __func__, rc);
-			return rc;
-		}
-		regulator_put(fs_ijpeg);
-	}
-	rc = msm_camio_clk_disable(CAMIO_JPEG_PCLK);
-	if (rc < 0)
-		return rc;
-	rc = msm_camio_clk_disable(CAMIO_JPEG_CLK);
-	CDBG("%s: exit %d\n", __func__, rc);
-	return rc;
-}
-
-int msm_camio_jpeg_clk_enable(void)
-{
-	int rc = 0;
-	rc = msm_camio_clk_enable(CAMIO_JPEG_CLK);
-	if (rc < 0)
-		return rc;
-	rc = msm_camio_clk_enable(CAMIO_JPEG_PCLK);
-	if (rc < 0)
-		return rc;
-	fs_ijpeg = regulator_get(NULL, "fs_ijpeg");
-	if (IS_ERR(fs_ijpeg)) {
-		CDBG("%s: Regulator FS_IJPEG get failed %ld\n", __func__,
-			PTR_ERR(fs_ijpeg));
-		fs_ijpeg = NULL;
-	} else if (regulator_enable(fs_ijpeg)) {
-		CDBG("%s: Regulator FS_IJPEG enable failed\n", __func__);
-		regulator_put(fs_ijpeg);
-	}
-	CDBG("%s: exit %d\n", __func__, rc);
-	return rc;
-}
-
-static int config_gpio_table(int gpio_en)
-{
-	struct msm_camera_sensor_info *sinfo = camio_dev->dev.platform_data;
-	struct msm_camera_gpio_conf *gpio_conf = sinfo->gpio_conf;
-	int rc = 0, i = 0;
-	return 0; 
-#if 1 
-	if (gpio_conf == NULL || gpio_conf->cam_gpio_tbl == NULL) {
-		pr_err("%s: Invalid NULL cam gpio config table\n", __func__);
-		return -EFAULT;
-	}
-
-	if (gpio_en) {
-		for (i = 0; i < gpio_conf->cam_gpio_tbl_size; i++) {
-			rc = gpio_request(gpio_conf->cam_gpio_tbl[i],
-				 "CAM_GPIO");
-			if (rc < 0) {
-				pr_err("%s not able to get gpio\n", __func__);
-				for (i--; i >= 0; i--)
-					gpio_free(gpio_conf->cam_gpio_tbl[i]);
-					break;
-			}
-		}
-	} else {
-		for (i = 0; i < gpio_conf->cam_gpio_tbl_size; i++)
-			gpio_free(gpio_conf->cam_gpio_tbl[i]);
-	}
-#else 
-	if (gpio_conf->cam_gpio_tbl == NULL || gpio_conf->cam_gpiomux_conf_tbl
-		== NULL) {
-		pr_err("%s: Invalid NULL cam gpio config table\n", __func__);
-		return -EFAULT;
-	}
-
-	if (gpio_en) {
-		msm_gpiomux_install((struct msm_gpiomux_config *)gpio_conf->
-			cam_gpiomux_conf_tbl,
-			gpio_conf->cam_gpiomux_conf_tbl_size);
-		for (i = 0; i < gpio_conf->cam_gpio_tbl_size; i++) {
-			rc = gpio_request(gpio_conf->cam_gpio_tbl[i],
-				 "CAM_GPIO");
-			if (rc < 0) {
-				pr_err("%s not able to get gpio\n", __func__);
-				for (i--; i >= 0; i--)
-					gpio_free(gpio_conf->cam_gpio_tbl[i]);
-					break;
-			}
-		}
-	} else {
-		for (i = 0; i < gpio_conf->cam_gpio_tbl_size; i++)
-			gpio_free(gpio_conf->cam_gpio_tbl[i]);
-	}
-#endif 
-	return rc;
-}
-
-int msm_camio_vpe_clk_disable(void)
-{
-	int rc = 0;
-	if (fs_vpe) {
-		regulator_disable(fs_vpe);
-		regulator_put(fs_vpe);
-	}
-
-	rc = msm_camio_clk_disable(CAMIO_VPE_CLK);
-	if (rc < 0)
-		return rc;
-	rc = msm_camio_clk_disable(CAMIO_VPE_PCLK);
-	return rc;
-}
-
-int msm_camio_vpe_clk_enable(uint32_t clk_rate)
-{
-	int rc = 0;
-	fs_vpe = regulator_get(NULL, "fs_vpe");
-	if (IS_ERR(fs_vpe)) {
-		CDBG("%s: Regulator FS_VPE get failed %ld\n", __func__,
-			PTR_ERR(fs_vpe));
-		fs_vpe = NULL;
-	} else if (regulator_enable(fs_vpe)) {
-		CDBG("%s: Regulator FS_VPE enable failed\n", __func__);
-		regulator_put(fs_vpe);
-	}
-
-	vpe_clk_rate = clk_rate;
-	rc = msm_camio_clk_enable(CAMIO_VPE_CLK);
-	if (rc < 0)
-		return rc;
-
-	rc = msm_camio_clk_enable(CAMIO_VPE_PCLK);
-	return rc;
-}
-
-void msm_camio_vfe_blk_reset(void)
-{
-	return;
-}
-
-int msm_camio_probe_on(void *s_ctrl)
-{
-	int rc = 0;
-#if 0 
-	struct msm_sensor_ctrl_t* sctrl = (struct msm_sensor_ctrl_t *)s_ctrl;
-	struct msm_camera_sensor_info *sinfo = sctrl->sensordata;
-	struct msm_camera_device_platform_data *camdev = sinfo->pdata;
-	camio_dev = pdev;
-	camio_clk = camdev->ioclk;
-
-	rc = config_gpio_table(1);
-	if (rc < 0)
-		return rc;
-
-	if (rc < 0)
-		pr_info("%s camera_csi_on failed\n", __func__);
-#endif 
-	return rc;
-}
-
-int msm_camio_probe_off(void *s_ctrl)
-{
-	int rc = 0;
-
-
-	if (rc < 0)
-		pr_info("%s camera_csi_off failed\n", __func__);
-
-	rc = config_gpio_table(0);
-
-	return rc;
-}
-int msm_camio_probe_on_bootup(void *s_ctrl)
-{
-	int rc = 0;
-	rc = msm_camio_probe_on(s_ctrl);
-	return rc;
-}
-
-int msm_camio_probe_off_bootup(void *s_ctrl)
-{
-	int rc = 0;
-	rc = msm_camio_probe_off(s_ctrl);
-	return rc;
-}
-
-static void msm_camio_axi_cfg(enum msm_bus_perf_setting perf_setting)
-{
-	switch (perf_setting) {
-	case S_INIT:
-		add_axi_qos();
-		break;
-	case S_PREVIEW:
-		update_axi_qos(MSM_AXI_QOS_PREVIEW);
-		break;
-	case S_VIDEO:
-		update_axi_qos(MSM_AXI_QOS_RECORDING);
-		break;
-	case S_CAPTURE:
-		update_axi_qos(MSM_AXI_QOS_SNAPSHOT);
-		break;
-	case S_DEFAULT:
-		update_axi_qos(PM_QOS_DEFAULT_VALUE);
-		break;
-	case S_EXIT:
-		release_axi_qos();
-		break;
-	default:
-		CDBG("%s: INVALID CASE\n", __func__);
-	}
-}
-
-void msm_camio_bus_scale_cfg(struct msm_bus_scale_pdata *cam_bus_scale_table,
-		enum msm_bus_perf_setting perf_setting)
-{
-	static uint32_t bus_perf_client;
-	int rc = 0;
-	if (cam_bus_scale_table == NULL) {
-	    pr_err("%s: NULL cam_bus_scale_table\n", __func__);
-		msm_camio_axi_cfg(perf_setting);
-		return;
-	}
-
-	switch (perf_setting) {
-	case S_INIT:
-		bus_perf_client =
-			msm_bus_scale_register_client(cam_bus_scale_table);
-		if (!bus_perf_client) {
-			pr_err("%s: Registration Failed!!!\n", __func__);
-			bus_perf_client = 0;
-			return;
-		}
-		CDBG("%s: S_INIT rc = %u\n", __func__, bus_perf_client);
-		break;
-	case S_EXIT:
-		if (bus_perf_client) {
-			CDBG("%s: S_EXIT\n", __func__);
-			msm_bus_scale_unregister_client(bus_perf_client);
-		} else
-			pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
-		break;
-	case S_PREVIEW:
-		if (bus_perf_client) {
-			rc = msm_bus_scale_client_update_request(
-				bus_perf_client, 1);
-			CDBG("%s: S_PREVIEW rc = %d\n", __func__, rc);
-		} else
-			pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
-		break;
-	case S_VIDEO:
-		if (bus_perf_client) {
-			rc = msm_bus_scale_client_update_request(
-				bus_perf_client, 2);
-			CDBG("%s: S_VIDEO rc = %d\n", __func__, rc);
-		} else
-			pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
-		break;
-	case S_CAPTURE:
-		if (bus_perf_client) {
-			rc = msm_bus_scale_client_update_request(
-				bus_perf_client, 3);
-			CDBG("%s: S_CAPTURE rc = %d\n", __func__, rc);
-		} else
-			pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
-		break;
-
-	case S_ZSL:
-		if (bus_perf_client) {
-			rc = msm_bus_scale_client_update_request(
-				bus_perf_client, 4);
-			CDBG("%s: S_ZSL rc = %d\n", __func__, rc);
-		} else
-			pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
-		break;
-	case S_STEREO_VIDEO:
-		if (bus_perf_client) {
-			rc = msm_bus_scale_client_update_request(
-				bus_perf_client, 5);
-			CDBG("%s: S_STEREO_VIDEO rc = %d\n", __func__, rc);
-		} else
-			pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
-		break;
-	case S_STEREO_CAPTURE:
-		if (bus_perf_client) {
-			rc = msm_bus_scale_client_update_request(
-				bus_perf_client, 6);
-			CDBG("%s: S_STEREO_VIDEO rc = %d\n", __func__, rc);
-		} else
-			pr_err("%s: Bus Client NOT Registered!!!\n", __func__);
-		break;
-	case S_DEFAULT:
-		break;
-	default:
-		pr_warning("%s: INVALID CASE\n", __func__);
-	}
-}
diff --git a/drivers/media/video/msm/msm_isp.c b/drivers/media/video/msm/msm_isp.c
deleted file mode 100644
index 7166687..0000000
--- a/drivers/media/video/msm/msm_isp.c
+++ /dev/null
@@ -1,1010 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/module.h>
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/list.h>
-#include <linux/ioctl.h>
-#include <linux/spinlock.h>
-#include <linux/videodev2.h>
-#include <linux/proc_fs.h>
-#include <linux/vmalloc.h>
-#include <linux/android_pmem.h>
-
-#include <media/v4l2-dev.h>
-#include <media/v4l2-ioctl.h>
-#include <media/v4l2-device.h>
-#include <media/msm_isp.h>
-#include <media/msm_gemini.h>
-
-#include "msm.h"
-
-#ifdef CONFIG_MSM_CAMERA_DEBUG
-#define D(fmt, args...) pr_debug("msm_isp: " fmt, ##args)
-#else
-#define D(fmt, args...) do {} while (0)
-#endif
-
-#define MSM_FRAME_AXI_MAX_BUF 32
-
-
-void *msm_isp_sync_alloc(int size,
-	  gfp_t gfp)
-{
-	struct msm_queue_cmd *qcmd =
-		kmalloc(sizeof(struct msm_queue_cmd) + size, gfp);
-
-	if (qcmd) {
-		atomic_set(&qcmd->on_heap, 1);
-		return qcmd + 1;
-	}
-	return NULL;
-}
-
-void msm_isp_sync_free(void *ptr)
-{
-	if (ptr) {
-		struct msm_queue_cmd *qcmd =
-			(struct msm_queue_cmd *)ptr;
-		qcmd--;
-		if (atomic_read(&qcmd->on_heap))
-			kfree(qcmd);
-	}
-}
-
-static int msm_isp_notify_VFE_BUF_FREE_EVT(struct v4l2_subdev *sd, void *arg)
-{
-	struct msm_vfe_cfg_cmd cfgcmd;
-	struct msm_camvfe_params vfe_params;
-	int rc;
-
-	cfgcmd.cmd_type = CMD_VFE_BUFFER_RELEASE;
-	cfgcmd.value = NULL;
-	vfe_params.vfe_cfg = &cfgcmd;
-	vfe_params.data = NULL;
-	rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-	return 0;
-}
-
-int msm_isp_vfe_msg_to_img_mode(struct msm_cam_media_controller *pmctl,
-				int vfe_msg)
-{
-	int image_mode;
-	if (vfe_msg == VFE_MSG_OUTPUT_PRIMARY) {
-		switch (pmctl->vfe_output_mode) {
-		case VFE_OUTPUTS_MAIN_AND_PREVIEW:
-		case VFE_OUTPUTS_MAIN_AND_VIDEO:
-		case VFE_OUTPUTS_MAIN_AND_THUMB:
-		case VFE_OUTPUTS_RAW:
-		case VFE_OUTPUTS_JPEG_AND_THUMB:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_MAIN;
-			break;
-		case VFE_OUTPUTS_THUMB_AND_MAIN:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL;
-			break;
-		case VFE_OUTPUTS_VIDEO:
-		case VFE_OUTPUTS_VIDEO_AND_PREVIEW:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_VIDEO;
-			break;
-		case VFE_OUTPUTS_PREVIEW:
-		case VFE_OUTPUTS_PREVIEW_AND_VIDEO:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW;
-			break;
-		default:
-			image_mode = -1;
-			break;
-		}
-	} else if (vfe_msg == VFE_MSG_OUTPUT_SECONDARY) {
-		switch (pmctl->vfe_output_mode) {
-		case VFE_OUTPUTS_MAIN_AND_PREVIEW:
-		case VFE_OUTPUTS_VIDEO_AND_PREVIEW:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW;
-			break;
-		case VFE_OUTPUTS_MAIN_AND_VIDEO:
-		case VFE_OUTPUTS_PREVIEW_AND_VIDEO:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_VIDEO;
-			break;
-		case VFE_OUTPUTS_MAIN_AND_THUMB:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL;
-			break;
-		case VFE_OUTPUTS_THUMB_AND_MAIN:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_MAIN;
-			break;
-		case VFE_OUTPUTS_JPEG_AND_THUMB:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL;
-			break;
-		case VFE_OUTPUTS_PREVIEW:
-		case VFE_OUTPUTS_VIDEO:
-			image_mode = MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW;
-			break;
-		default:
-			image_mode = -1;
-			break;
-		}
-	} else
-		image_mode = -1;
-
-	D("%s Selected image mode %d vfe output mode %d, vfe msg %d\n",
-	  __func__, image_mode, pmctl->vfe_output_mode, vfe_msg);
-	return image_mode;
-}
-
-static int msm_isp_notify_VFE_BUF_EVT(struct v4l2_subdev *sd, void *arg)
-{
-	int rc = -EINVAL, image_mode;
-	struct msm_vfe_resp *vdata = (struct msm_vfe_resp *)arg;
-	struct msm_free_buf free_buf, temp_free_buf;
-	struct msm_camvfe_params vfe_params;
-	struct msm_vfe_cfg_cmd cfgcmd;
-	struct msm_cam_media_controller *pmctl =
-		(struct msm_cam_media_controller *)v4l2_get_subdev_hostdata(sd);
-	struct msm_cam_v4l2_device *pcam = pmctl->pcam_ptr;
-	
-
-	int vfe_id = vdata->evt_msg.msg_id;
-	if (!pcam) {
-		pr_debug("%s pcam is null. return\n", __func__);
-		msm_isp_sync_free(vdata);
-		return rc;
-	}
-	
-	image_mode = msm_isp_vfe_msg_to_img_mode(pmctl, vfe_id);
-	BUG_ON(image_mode < 0);
-	switch (vdata->type) {
-	case VFE_MSG_V32_START:
-	case VFE_MSG_V32_START_RECORDING:
-	case VFE_MSG_V2X_PREVIEW:
-		D("%s Got V32_START_*: Getting ping addr id = %d",
-						__func__, vfe_id);
-		msm_mctl_reserve_free_buf(pmctl, NULL,
-					image_mode, &free_buf);
-		cfgcmd.cmd_type = CMD_CONFIG_PING_ADDR;
-		cfgcmd.value = &vfe_id;
-		vfe_params.vfe_cfg = &cfgcmd;
-		vfe_params.data = (void *)&free_buf;
-		rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-		msm_mctl_reserve_free_buf(pmctl, NULL,
-					image_mode, &free_buf);
-		cfgcmd.cmd_type = CMD_CONFIG_PONG_ADDR;
-		cfgcmd.value = &vfe_id;
-		vfe_params.vfe_cfg = &cfgcmd;
-		vfe_params.data = (void *)&free_buf;
-		rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-		break;
-	case VFE_MSG_V32_CAPTURE:
-	case VFE_MSG_V2X_CAPTURE:
-		pr_debug("%s Got V32_CAPTURE: getting buffer for id = %d",
-						__func__, vfe_id);
-		msm_mctl_reserve_free_buf(pmctl, NULL,
-					image_mode, &free_buf);
-		cfgcmd.cmd_type = CMD_CONFIG_PING_ADDR;
-		cfgcmd.value = &vfe_id;
-		vfe_params.vfe_cfg = &cfgcmd;
-		vfe_params.data = (void *)&free_buf;
-		rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-		temp_free_buf = free_buf;
-		if (msm_mctl_reserve_free_buf(pmctl, NULL,
-					image_mode, &free_buf)) {
-			
-			free_buf = temp_free_buf;
-		}
-		cfgcmd.cmd_type = CMD_CONFIG_PONG_ADDR;
-		cfgcmd.value = &vfe_id;
-		vfe_params.vfe_cfg = &cfgcmd;
-		vfe_params.data = (void *)&free_buf;
-		rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-		break;
-	case VFE_MSG_V32_JPEG_CAPTURE:
-		D("%s:VFE_MSG_V32_JPEG_CAPTURE vdata->type %d\n", __func__,
-			vdata->type);
-		free_buf.num_planes = 2;
-		free_buf.ch_paddr[0] = pmctl->ping_imem_y;
-		free_buf.ch_paddr[1] = pmctl->ping_imem_cbcr;
-		cfgcmd.cmd_type = CMD_CONFIG_PING_ADDR;
-		cfgcmd.value = &vfe_id;
-		vfe_params.vfe_cfg = &cfgcmd;
-		vfe_params.data = (void *)&free_buf;
-		D("%s:VFE_MSG_V32_JPEG_CAPTURE y_ping=%x cbcr_ping=%x\n",
-			__func__, free_buf.ch_paddr[0], free_buf.ch_paddr[1]);
-		rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-		
-		free_buf.ch_paddr[0] = pmctl->pong_imem_y;
-		free_buf.ch_paddr[1] = pmctl->pong_imem_cbcr;
-		cfgcmd.cmd_type = CMD_CONFIG_PONG_ADDR;
-		cfgcmd.value = &vfe_id;
-		vfe_params.vfe_cfg = &cfgcmd;
-		vfe_params.data = (void *)&free_buf;
-		D("%s:VFE_MSG_V32_JPEG_CAPTURE y_pong=%x cbcr_pong=%x\n",
-			__func__, free_buf.ch_paddr[0], free_buf.ch_paddr[1]);
-		rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-		break;
-	case VFE_MSG_OUTPUT_IRQ:
-		D("%s Got OUTPUT_IRQ: Getting free buf id = %d",
-						__func__, vfe_id);
-		msm_mctl_reserve_free_buf(pmctl, NULL,
-					image_mode, &free_buf);
-		cfgcmd.cmd_type = CMD_CONFIG_FREE_BUF_ADDR;
-		cfgcmd.value = &vfe_id;
-		vfe_params.vfe_cfg = &cfgcmd;
-		vfe_params.data = (void *)&free_buf;
-		rc = v4l2_subdev_call(sd, core, ioctl, 0, &vfe_params);
-		break;
-	default:
-		pr_err("%s: Invalid vdata type: %d\n", __func__, vdata->type);
-		break;
-	}
-	return rc;
-}
-
-static int msm_enable_dropframe(struct v4l2_subdev *sd,
-			struct msm_cam_media_controller *pmctl, void __user *arg)
-{
-	int dropframe_enabled;
-
-	if (copy_from_user(&dropframe_enabled, arg, sizeof(dropframe_enabled))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	} else {
-		atomic_set(&pmctl->dropframe_enabled, dropframe_enabled);
-		pr_info("%s: set dropframe_enabled %d", __func__, atomic_read(&pmctl->dropframe_enabled));
-
-		
-		if (!dropframe_enabled)
-			atomic_set(&pmctl->snap_dropframe_num, 0);
-	}
-
-	return 0;
-}
-
-static int msm_set_dropframe_num(struct v4l2_subdev *sd,
-			struct msm_cam_media_controller *pmctl, void __user *arg)
-{
-	int snap_dropframe_num;
-
-	if (copy_from_user(&snap_dropframe_num, arg, sizeof(snap_dropframe_num))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	} else {
-		atomic_set(&pmctl->snap_dropframe_num, snap_dropframe_num);
-		pr_info("%s: set snap_dropframe_num %d", __func__, atomic_read(&pmctl->snap_dropframe_num));
-	}
-
-	return 0;
-}
-
-static int msm_isp_should_drop_frame(struct msm_cam_media_controller *pmctl, uint8_t msgid)
-{
-	int drop_frame = 0;
-
-	switch (msgid) {
-	case VFE_MSG_OUTPUT_PRIMARY:
-		{
-			atomic_set(&pmctl->snap_dropframe, 0);
-
-			if (atomic_read(&pmctl->dropframe_enabled)) {
-				if (atomic_read(&pmctl->snap_dropframe_num) == 0) { 
-					atomic_sub(1, &pmctl->snap_dropframe_num);
-				} else { 
-					atomic_set(&pmctl->snap_dropframe, 1);
-					
-					if (atomic_read(&pmctl->snap_dropframe_num) > 0)
-						atomic_sub(1, &pmctl->snap_dropframe_num);
-					drop_frame = 1;
-				}
-			}
-		}
-		break;
-	case VFE_MSG_OUTPUT_SECONDARY:
-		{
-			
-			if (atomic_read(&pmctl->snap_dropframe))
-				drop_frame = 1;
-		}
-		break;
-	default:
-		break;
-	}
-
-	if (atomic_read(&pmctl->dropframe_enabled))
-		pr_info("%s: FRAME (%d): drop_frame %d [enable %d num %d drop_snap %d]",
-				__func__, msgid, drop_frame,
-				atomic_read(&pmctl->dropframe_enabled),
-				atomic_read(&pmctl->snap_dropframe_num),
-				atomic_read(&pmctl->snap_dropframe));
-
-	return drop_frame;
-}
-
-static int msm_isp_notify_vfe(struct v4l2_subdev *sd,
-	unsigned int notification,  void *arg)
-{
-	int rc = 0;
-	struct v4l2_event v4l2_evt;
-	struct msm_isp_event_ctrl *isp_event;
-	struct msm_cam_media_controller *pmctl =
-		(struct msm_cam_media_controller *)v4l2_get_subdev_hostdata(sd);
-	struct msm_free_buf buf;
-
-	if (!pmctl) {
-		pr_err("%s: no context in dsp callback.\n", __func__);
-		rc = -EINVAL;
-		return rc;
-	}
-
-	if (notification == NOTIFY_VFE_BUF_EVT)
-		return msm_isp_notify_VFE_BUF_EVT(sd, arg);
-
-	if (notification == NOTIFY_VFE_BUF_FREE_EVT)
-		return msm_isp_notify_VFE_BUF_FREE_EVT(sd, arg);
-
-	isp_event = kzalloc(sizeof(struct msm_isp_event_ctrl), GFP_ATOMIC);
-	if (!isp_event) {
-		pr_err("%s Insufficient memory. return", __func__);
-		return -ENOMEM;
-	}
-
-	v4l2_evt.type = V4L2_EVENT_PRIVATE_START +
-					MSM_CAM_RESP_STAT_EVT_MSG;
-	*((uint32_t *)v4l2_evt.u.data) = (uint32_t)isp_event;
-
-	isp_event->resptype = MSM_CAM_RESP_STAT_EVT_MSG;
-	isp_event->isp_data.isp_msg.type = MSM_CAMERA_MSG;
-	isp_event->isp_data.isp_msg.len = 0;
-
-	switch (notification) {
-	case NOTIFY_ISP_MSG_EVT: {
-		struct isp_msg_event *isp_msg = (struct isp_msg_event *)arg;
-		if (!isp_msg) {
-			pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-			rc = -EINVAL;
-			return rc;
-		}
-
-		isp_event->isp_data.isp_msg.msg_id = isp_msg->msg_id;
-		isp_event->isp_data.isp_msg.frame_id = isp_msg->sof_count;
-        getnstimeofday(&(isp_event->isp_data.isp_msg.timestamp));
-		if(atomic_read(&pmctl->dropframe_enabled) &&
-			atomic_read(&pmctl->snap_dropframe_num) == 0 &&
-			isp_msg->msg_id == MSG_ID_SOF_ACK)
-		{
-			isp_event->isp_data.isp_msg.msg_id = MSG_ID_HDR_SOF_ACK;
-			pr_info("%s MSG_ID_HDR_SOF_ACK", __func__);
-		}
-
-		break;
-	}
-	case NOTIFY_VFE_MSG_OUT: {
-		
-		int8_t msgid;
-		
-		int image_mode; 
-		struct isp_msg_output *isp_output =
-				(struct isp_msg_output *)arg;
-		if (!isp_output) {
-			pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-			rc = -EINVAL;
-			return rc;
-		}
-		switch (isp_output->output_id) {
-		case MSG_ID_OUTPUT_P:
-			msgid = VFE_MSG_OUTPUT_P;
-			break;
-		case MSG_ID_OUTPUT_V:
-			msgid = VFE_MSG_OUTPUT_V;
-			break;
-		case MSG_ID_OUTPUT_T:
-			msgid = VFE_MSG_OUTPUT_T;
-			break;
-		case MSG_ID_OUTPUT_S:
-			msgid = VFE_MSG_OUTPUT_S;
-			break;
-		case MSG_ID_OUTPUT_PRIMARY:
-			msgid = VFE_MSG_OUTPUT_PRIMARY;
-			break;
-		case MSG_ID_OUTPUT_SECONDARY:
-			msgid = VFE_MSG_OUTPUT_SECONDARY;
-			break;
-		default:
-			pr_err("%s: Invalid VFE output id: %d\n",
-				__func__, isp_output->output_id);
-			rc = -EINVAL;
-			break;
-		}
-
-		if (!rc) {
-            if (msm_isp_should_drop_frame(pmctl, msgid)) {
-                msgid = msm_isp_vfe_msg_to_img_mode(pmctl, msgid);
-                
-                msm_mctl_return_free_buf(pmctl, msgid, &(isp_output->buf));
-                kfree(isp_event);
-                return rc;
-            } else {
-			isp_event->isp_data.isp_msg.msg_id =
-				isp_output->output_id;
-			isp_event->isp_data.isp_msg.frame_id =
-				isp_output->frameCounter;
-			buf = isp_output->buf;
-			
-			image_mode  = msm_isp_vfe_msg_to_img_mode(pmctl, msgid);
-			BUG_ON(image_mode  < 0);
-			msm_mctl_buf_done(pmctl, image_mode ,
-				&buf, isp_output->frameCounter);
-			
-            }
-		}
-		}
-		break;
-	case NOTIFY_VFE_MSG_COMP_STATS: {
-		struct msm_stats_buf *stats = (struct msm_stats_buf *)arg;
-		struct msm_stats_buf *stats_buf = NULL;
-		if (!stats) {
-			pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-			rc = -EINVAL;
-			return rc;
-		}
-
-		isp_event->isp_data.isp_msg.msg_id = MSG_ID_STATS_COMPOSITE;
-		stats->aec.buff = msm_pmem_stats_ptov_lookup(pmctl,
-					stats->aec.buff, &(stats->aec.fd));
-		stats->awb.buff = msm_pmem_stats_ptov_lookup(pmctl,
-					stats->awb.buff, &(stats->awb.fd));
-		stats->af.buff = msm_pmem_stats_ptov_lookup(pmctl,
-					stats->af.buff, &(stats->af.fd));
-		stats->ihist.buff = msm_pmem_stats_ptov_lookup(pmctl,
-					stats->ihist.buff, &(stats->ihist.fd));
-		stats->rs.buff = msm_pmem_stats_ptov_lookup(pmctl,
-					stats->rs.buff, &(stats->rs.fd));
-		stats->cs.buff = msm_pmem_stats_ptov_lookup(pmctl,
-					stats->cs.buff, &(stats->cs.fd));
-		stats->skin.buff = msm_pmem_stats_ptov_lookup(pmctl,
-					stats->skin.buff, &(stats->skin.fd)); 
-
-		stats_buf = kmalloc(sizeof(struct msm_stats_buf), GFP_ATOMIC);
-		if (!stats_buf) {
-			pr_err("%s: out of memory.\n", __func__);
-			rc = -ENOMEM;
-		} else {
-			*stats_buf = *stats;
-			isp_event->isp_data.isp_msg.len	=
-				sizeof(struct msm_stats_buf);
-			isp_event->isp_data.isp_msg.data = stats_buf;
-		}
-		}
-		break;
-	case NOTIFY_VFE_MSG_STATS: {
-		struct msm_stats_buf stats;
-		struct isp_msg_stats *isp_stats = (struct isp_msg_stats *)arg;
-		if (!isp_stats) {
-			pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-			rc = -EINVAL;
-			return rc;
-		}
-
-		isp_event->isp_data.isp_msg.msg_id = isp_stats->id;
-		isp_event->isp_data.isp_msg.frame_id =
-			isp_stats->frameCounter;
-#ifdef CONFIG_ARCH_MSM8X60
-		stats.frame_id = isp_stats->frameCounter;
-#endif 
-		stats.buffer = msm_pmem_stats_ptov_lookup(pmctl,
-						isp_stats->buffer,
-						&(stats.fd));
-		switch (isp_stats->id) {
-		case MSG_ID_STATS_AEC:
-		case MSG_ID_STATS_BG:
-			stats.aec.buff = stats.buffer;
-			stats.aec.fd = stats.fd;
-			break;
-		case MSG_ID_STATS_AF:
-		case MSG_ID_STATS_BF:
-			stats.af.buff = stats.buffer;
-			stats.af.fd = stats.fd;
-			break;
-		case MSG_ID_STATS_AWB:
-			stats.awb.buff = stats.buffer;
-			stats.awb.fd = stats.fd;
-			break;
-		case MSG_ID_STATS_IHIST:
-			stats.ihist.buff = stats.buffer;
-			stats.ihist.fd = stats.fd;
-			break;
-		case MSG_ID_STATS_RS:
-			stats.rs.buff = stats.buffer;
-			stats.rs.fd = stats.fd;
-			break;
-		case MSG_ID_STATS_CS:
-			stats.cs.buff = stats.buffer;
-			stats.cs.fd = stats.fd;
-			break;
-		case MSG_ID_STATS_BHIST:
-			stats.skin.buff = stats.buffer;
-			stats.skin.fd = stats.fd;
-			break;
-		case MSG_ID_STATS_AWB_AEC:
-			break;
-		default:
-			pr_err("%s: Invalid msg type", __func__);
-			break;
-		}
-		if (!stats.buffer) {
-			pr_err("%s: msm_pmem_stats_ptov_lookup error\n",
-							__func__);
-			isp_event->isp_data.isp_msg.len = 0;
-			rc = -EFAULT;
-		} else {
-			struct msm_stats_buf *stats_buf =
-				kmalloc(sizeof(struct msm_stats_buf),
-							GFP_ATOMIC);
-			if (!stats_buf) {
-				pr_err("%s: out of memory.\n",
-							__func__);
-				rc = -ENOMEM;
-			} else {
-				*stats_buf = stats;
-				isp_event->isp_data.isp_msg.len	=
-					sizeof(struct msm_stats_buf);
-				isp_event->isp_data.isp_msg.data = stats_buf;
-			}
-		}
-		}
-		break;
-	default:
-		pr_err("%s: Unsupport isp notification %d\n",
-			__func__, notification);
-		rc = -EINVAL;
-		break;
-	}
-
-	if (!pmctl->config_device) {
-		pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-		rc = -EINVAL;
-		return rc;
-	}
-
-	v4l2_event_queue(pmctl->config_device->config_stat_event_queue.pvdev,
-			 &v4l2_evt);
-
-	return rc;
-}
-
-static int msm_isp_notify(struct v4l2_subdev *sd,
-	unsigned int notification, void *arg)
-{
-	return msm_isp_notify_vfe(sd, notification, arg);
-}
-
-static int msm_isp_open(struct v4l2_subdev *sd,
-	struct msm_cam_media_controller *mctl)
-{
-	
-	int rc = 0;
-	D("%s\n", __func__);
-	if (!mctl) {
-		pr_err("%s: param is NULL", __func__);
-		return -EINVAL;
-	}
-
-	rc = msm_iommu_map_contig_buffer(
-		(unsigned long)IMEM_Y_PING_OFFSET, CAMERA_DOMAIN, GEN_POOL,
-		((IMEM_Y_SIZE + IMEM_CBCR_SIZE + 4095) & (~4095)),
-		SZ_4K, IOMMU_WRITE | IOMMU_READ,
-		(unsigned long *)&mctl->ping_imem_y);
-	mctl->ping_imem_cbcr = mctl->ping_imem_y + IMEM_Y_SIZE;
-	if (rc < 0) {
-		pr_err("%s: ping iommu mapping returned error %d\n",
-			__func__, rc);
-		mctl->ping_imem_y = 0;
-		mctl->ping_imem_cbcr = 0;
-	}
-	msm_iommu_map_contig_buffer(
-		(unsigned long)IMEM_Y_PONG_OFFSET, CAMERA_DOMAIN, GEN_POOL,
-		((IMEM_Y_SIZE + IMEM_CBCR_SIZE + 4095) & (~4095)),
-		SZ_4K, IOMMU_WRITE | IOMMU_READ,
-		(unsigned long *)&mctl->pong_imem_y);
-	mctl->pong_imem_cbcr = mctl->pong_imem_y + IMEM_Y_SIZE;
-	if (rc < 0) {
-		pr_err("%s: pong iommu mapping returned error %d\n",
-			 __func__, rc);
-		mctl->pong_imem_y = 0;
-		mctl->pong_imem_cbcr = 0;
-	}
-
-
-	rc = msm_vfe_subdev_init(sd, mctl);
-	if (rc < 0) {
-		pr_err("%s: vfe_init failed at %d\n",
-				__func__, rc);
-	}
-	return rc;
-}
-
-static void msm_isp_release(struct msm_cam_media_controller *mctl,
-	struct v4l2_subdev *sd)
-{
-	D("%s\n", __func__);
-	msm_vfe_subdev_release(sd);
-	if (mctl->ping_imem_y)
-		msm_iommu_unmap_contig_buffer(mctl->ping_imem_y,
-			CAMERA_DOMAIN, GEN_POOL,
-			((IMEM_Y_SIZE + IMEM_CBCR_SIZE + 4095) & (~4095)));
-	if (mctl->pong_imem_y)
-		msm_iommu_unmap_contig_buffer(mctl->pong_imem_y,
-			CAMERA_DOMAIN, GEN_POOL,
-			((IMEM_Y_SIZE + IMEM_CBCR_SIZE + 4095) & (~4095)));
-	mctl->ping_imem_y = 0;
-	mctl->ping_imem_cbcr = 0;
-	mctl->pong_imem_y = 0;
-	mctl->pong_imem_cbcr = 0;
-}
-
-static int msm_config_vfe(struct v4l2_subdev *sd,
-	struct msm_cam_media_controller *mctl, void __user *arg)
-{
-	struct msm_vfe_cfg_cmd cfgcmd;
-	struct msm_pmem_region region[8];
-	struct axidata axi_data;
-
-	if (copy_from_user(&cfgcmd, arg, sizeof(cfgcmd))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	}
-
-	memset(&axi_data, 0, sizeof(axi_data));
-	CDBG("%s: cmd_type %d\n", __func__, cfgcmd.cmd_type);
-	switch (cfgcmd.cmd_type) {
-	case CMD_STATS_BG_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_BAYER_GRID, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_BF_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_BAYER_FOCUS, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_BHIST_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_BAYER_HIST, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_AF_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_AF, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_AEC_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_AEC, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_AWB_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_AWB, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_AEC_AWB_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_AEC_AWB, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_IHIST_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_IHIST, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_RS_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_RS, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_STATS_CS_ENABLE:
-		axi_data.bufnum1 =
-			msm_pmem_region_lookup(
-				&mctl->stats_info.pmem_stats_list,
-				MSM_PMEM_CS, &region[0],
-				NUM_STAT_OUTPUT_BUFFERS);
-		if (!axi_data.bufnum1) {
-			pr_err("%s %d: pmem region lookup error\n",
-				__func__, __LINE__);
-			return -EINVAL;
-		}
-		axi_data.region = &region[0];
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	case CMD_GENERAL:
-	case CMD_STATS_DISABLE:
-		return msm_isp_subdev_ioctl(sd, &cfgcmd,
-							&axi_data);
-	default:
-		pr_err("%s: unknown command type %d\n",
-			__func__, cfgcmd.cmd_type);
-	}
-
-	return -EINVAL;
-}
-
-
-static int msm_axi_config(struct v4l2_subdev *sd,
-		struct msm_cam_media_controller *mctl, void __user *arg)
-{
-	struct msm_vfe_cfg_cmd cfgcmd;
-
-	if (copy_from_user(&cfgcmd, arg, sizeof(cfgcmd))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	}
-
-	switch (cfgcmd.cmd_type) {
-	case CMD_AXI_CFG_PRIM:
-	case CMD_AXI_CFG_SEC:
-	case CMD_AXI_CFG_ZSL:
-	case CMD_RAW_PICT_AXI_CFG:
-	case CMD_AXI_CFG_PRIM_ALL_CHNLS:
-	case CMD_AXI_CFG_PRIM|CMD_AXI_CFG_SEC:
-	case CMD_AXI_CFG_PRIM|CMD_AXI_CFG_SEC_ALL_CHNLS:
-	case CMD_AXI_CFG_PRIM_ALL_CHNLS|CMD_AXI_CFG_SEC:
-		return msm_isp_subdev_ioctl(sd, &cfgcmd, NULL);
-
-	default:
-		pr_err("%s: unknown command type %d\n",
-			__func__,
-			cfgcmd.cmd_type);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int msm_put_stats_buffer(struct v4l2_subdev *sd,
-			struct msm_cam_media_controller *mctl, void __user *arg)
-{
-	int rc = -EIO;
-
-	struct msm_stats_buf buf;
-	unsigned long pphy;
-	struct msm_vfe_cfg_cmd cfgcmd;
-
-	if (copy_from_user(&buf, arg,
-				sizeof(struct msm_stats_buf))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	}
-
-	CDBG("%s\n", __func__);
-	pphy = msm_pmem_stats_vtop_lookup(mctl, buf.buffer, buf.fd);
-
-	if (pphy != 0) {
-		if (buf.type == STAT_AF)
-			cfgcmd.cmd_type = CMD_STATS_AF_BUF_RELEASE;
-		else if (buf.type == STAT_AEC)
-			cfgcmd.cmd_type = CMD_STATS_AEC_BUF_RELEASE;
-		else if (buf.type == STAT_AWB)
-			cfgcmd.cmd_type = CMD_STATS_AWB_BUF_RELEASE;
-		else if (buf.type == STAT_IHIST)
-			cfgcmd.cmd_type = CMD_STATS_IHIST_BUF_RELEASE;
-		else if (buf.type == STAT_RS)
-			cfgcmd.cmd_type = CMD_STATS_RS_BUF_RELEASE;
-		else if (buf.type == STAT_CS)
-			cfgcmd.cmd_type = CMD_STATS_CS_BUF_RELEASE;
-		else if (buf.type == STAT_AEAW)
-			cfgcmd.cmd_type = CMD_STATS_BUF_RELEASE;
-		else if (buf.type == STAT_BG)
-			cfgcmd.cmd_type = CMD_STATS_BG_BUF_RELEASE;
-		else if (buf.type == STAT_BF)
-			cfgcmd.cmd_type = CMD_STATS_BF_BUF_RELEASE;
-		else if (buf.type == STAT_BHIST)
-			cfgcmd.cmd_type = CMD_STATS_BHIST_BUF_RELEASE;
-		else {
-			pr_err("%s: invalid buf type %d\n",
-				__func__,
-				buf.type);
-			rc = -EINVAL;
-			goto put_done;
-		}
-
-		cfgcmd.value = (void *)&buf;
-
-		rc = msm_isp_subdev_ioctl(sd, &cfgcmd, &pphy);
-	} else {
-		pr_err("%s: NULL physical address\n", __func__);
-		rc = -EINVAL;
-	}
-
-put_done:
-	return rc;
-}
-
-static int msm_isp_config(struct msm_cam_media_controller *pmctl,
-			 unsigned int cmd, unsigned long arg)
-{
-
-	int rc = -EINVAL;
-	void __user *argp = (void __user *)arg;
-	struct v4l2_subdev *sd = pmctl->isp_sdev->sd;
-
-	D("%s: cmd %d\n", __func__, _IOC_NR(cmd));
-	switch (cmd) {
-	case MSM_CAM_IOCTL_PICT_PP_DONE:
-		
-		break;
-
-	case MSM_CAM_IOCTL_CONFIG_VFE:
-		
-		rc = msm_config_vfe(sd, pmctl, argp);
-		break;
-
-	case MSM_CAM_IOCTL_CONFIG_VPE:
-		
-		
-		rc = 0;
-		break;
-
-	case MSM_CAM_IOCTL_AXI_CONFIG:
-		D("Received MSM_CAM_IOCTL_AXI_CONFIG\n");
-		rc = msm_axi_config(sd, pmctl, argp);
-		break;
-
-	case MSM_CAM_IOCTL_RELEASE_STATS_BUFFER:
-		rc = msm_put_stats_buffer(sd, pmctl, argp);
-		break;
-
-	case MSM_CAM_IOCTL_ENABLE_DROP_FRAME :
-		rc = msm_enable_dropframe(sd, pmctl, argp);
-		break;
-
-	case MSM_CAM_IOCTL_SET_DROP_FRAME_NUM :
-		rc = msm_set_dropframe_num(sd, pmctl, argp);
-		break;
-
-	default:
-		break;
-	}
-
-	D("%s: cmd %d DONE\n", __func__, _IOC_NR(cmd));
-
-	return rc;
-}
-
-static struct msm_isp_ops isp_subdev[MSM_MAX_CAMERA_CONFIGS];
-
-int msm_isp_init_module(int g_num_config_nodes)
-{
-	int i = 0;
-
-	for (i = 0; i < g_num_config_nodes; i++) {
-		isp_subdev[i].isp_open = msm_isp_open;
-		isp_subdev[i].isp_config = msm_isp_config;
-		isp_subdev[i].isp_release  = msm_isp_release;
-		isp_subdev[i].isp_notify = msm_isp_notify;
-	}
-	return 0;
-}
-EXPORT_SYMBOL(msm_isp_init_module);
-
-int msm_isp_register(struct msm_cam_server_dev *psvr)
-{
-	int i = 0;
-
-	D("%s\n", __func__);
-
-	BUG_ON(!psvr);
-
-	
-	for (i = 0; i < psvr->config_info.num_config_nodes; i++)
-		psvr->isp_subdev[i] = &(isp_subdev[i]);
-
-	return 0;
-}
-EXPORT_SYMBOL(msm_isp_register);
-
-void msm_isp_unregister(struct msm_cam_server_dev *psvr)
-{
-	int i = 0;
-	for (i = 0; i < psvr->config_info.num_config_nodes; i++)
-		psvr->isp_subdev[i] = NULL;
-}
-
-int msm_isp_subdev_ioctl(struct v4l2_subdev *isp_subdev,
-	struct msm_vfe_cfg_cmd *cfgcmd, void *data)
-{
-	struct msm_camvfe_params vfe_params;
-	vfe_params.vfe_cfg = cfgcmd;
-	vfe_params.data = data;
-	return v4l2_subdev_call(isp_subdev, core, ioctl, 0, &vfe_params);
-}
-
-
-
diff --git a/drivers/media/video/msm/msm_mctl.c b/drivers/media/video/msm/msm_mctl.c
deleted file mode 100644
index f2d3d66..0000000
--- a/drivers/media/video/msm/msm_mctl.c
+++ /dev/null
@@ -1,1825 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/module.h>
-#include <linux/wakelock.h>
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/list.h>
-#include <linux/ioctl.h>
-#include <linux/spinlock.h>
-#include <linux/videodev2.h>
-#include <linux/proc_fs.h>
-#include <linux/vmalloc.h>
-#include <mach/board.h>
-
-#include <media/v4l2-dev.h>
-#include <media/v4l2-ioctl.h>
-#include <media/v4l2-device.h>
-
-#include <linux/android_pmem.h>
-
-#include "msm.h"
-#include "msm_csid.h"
-#include "msm_csic.h"
-#include "msm_csiphy.h"
-#include "msm_ispif.h"
-#include "msm_sensor.h"
-#include "msm_vpe.h"
-#include "msm_vfe32.h"
-
-#if 1	
-#ifdef CONFIG_RAWCHIP
-#include "rawchip/rawchip.h"
-#endif
-#endif 
-
-#ifdef CONFIG_MSM_CAMERA_DEBUG
-#define D(fmt, args...) pr_debug("msm_mctl: " fmt, ##args)
-#else
-#define D(fmt, args...) do {} while (0)
-#endif
-
-#define MSM_V4L2_SWFI_LATENCY 3
-
-static struct msm_isp_color_fmt msm_isp_formats[] = {
-	{
-	.name	   = "NV12YUV",
-	.depth	  = 12,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_NV12,
-	.pxlcode	= V4L2_MBUS_FMT_YUYV8_2X8, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "NV21YUV",
-	.depth	  = 12,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_NV21,
-	.pxlcode	= V4L2_MBUS_FMT_YUYV8_2X8, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "YU12YUV",
-	.depth	  = 12,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_YUV420M,
-	.pxlcode	= V4L2_MBUS_FMT_YUYV8_2X8, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "NV12BAYER",
-	.depth	  = 8,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_NV12,
-	.pxlcode	= V4L2_MBUS_FMT_SBGGR10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "NV21BAYER",
-	.depth	  = 8,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_NV21,
-	.pxlcode	= V4L2_MBUS_FMT_SBGGR10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "NV16BAYER",
-	.depth	  = 8,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_NV16,
-	.pxlcode	= V4L2_MBUS_FMT_SBGGR10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "NV61BAYER",
-	.depth	  = 8,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_NV61,
-	.pxlcode	= V4L2_MBUS_FMT_SBGGR10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "NV21BAYER",
-	.depth	  = 8,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_NV21,
-	.pxlcode	= V4L2_MBUS_FMT_SGRBG10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "YU12BAYER",
-	.depth	  = 8,
-	.bitsperpxl = 8,
-	.fourcc	 = V4L2_PIX_FMT_YUV420M,
-	.pxlcode	= V4L2_MBUS_FMT_SBGGR10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "RAWBAYER",
-	.depth	  = 10,
-	.bitsperpxl = 10,
-	.fourcc	 = V4L2_PIX_FMT_SBGGR10,
-	.pxlcode	= V4L2_MBUS_FMT_SBGGR10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-	{
-	.name	   = "RAWBAYER",
-	.depth	  = 10,
-	.bitsperpxl = 10,
-	.fourcc	 = V4L2_PIX_FMT_SBGGR10,
-	.pxlcode	= V4L2_MBUS_FMT_SGRBG10_1X10, 
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	},
-
-};
-
-static int msm_set_perf_lock(
-	struct msm_cam_media_controller *mctl,
-	int enable)
-{
-#ifdef CONFIG_PERFLOCK
-	pr_info("%s: cam_perf_lock enable %d flag 0x%x\n", __func__, enable, mctl->cam_perf_lock->flags);
-	if(enable) {
-		if (!is_perf_lock_active(mctl->cam_perf_lock))
-			perf_lock(mctl->cam_perf_lock);
-	} else {
-		if (is_perf_lock_active(mctl->cam_perf_lock))
-			perf_unlock(mctl->cam_perf_lock);
-	}
-#endif
-	return 0;
-}
-
-static int msm_get_sensor_info(
-	struct msm_cam_media_controller *mctl,
-	void __user *arg)
-{
-	int rc = 0;
-	struct msm_camsensor_info info;
-	struct msm_camera_sensor_info *sdata;
-	struct msm_cam_v4l2_device *pcam = mctl->pcam_ptr;
-	if (copy_from_user(&info,
-			arg,
-			sizeof(struct msm_camsensor_info))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	}
-
-	sdata = mctl->sdata;
-	D("%s: sensor_name %s\n", __func__, sdata->sensor_name);
-
-	memcpy(&info.name[0], sdata->sensor_name, MAX_SENSOR_NAME);
-	info.flash_enabled = sdata->flash_data->flash_type !=
-					MSM_CAMERA_FLASH_NONE;
-	info.pxlcode = pcam->usr_fmts[0].pxlcode;
-	info.flashtype = sdata->flash_type; 
-	info.camera_type = sdata->camera_type;
-	
-	info.sensor_type = sdata->sensor_type;
-	info.mount_angle = sdata->sensor_platform_info->mount_angle;
-	info.actuator_enabled = sdata->actuator_info ? 1 : 0;
-	info.strobe_flash_enabled = sdata->strobe_flash_data ? 1 : 0;
-
-	
-	if (sdata->use_rawchip == RAWCHIP_ENABLE)
-		info.use_rawchip = RAWCHIP_ENABLE;
-	else
-		info.use_rawchip = RAWCHIP_DISABLE;
-	
-	
-	if (copy_to_user((void *)arg,
-				&info,
-				sizeof(struct msm_camsensor_info))) {
-		ERR_COPY_TO_USER();
-		rc = -EFAULT;
-	}
-	return rc;
-}
-
-
-static int msm_mctl_set_vfe_output_mode(struct msm_cam_media_controller
-					*p_mctl, void __user *arg)
-{
-	int rc = 0;
-	if (copy_from_user(&p_mctl->vfe_output_mode,
-		(void __user *)arg, sizeof(p_mctl->vfe_output_mode))) {
-		pr_err("%s Copy from user failed ", __func__);
-		rc = -EFAULT;
-	} else {
-		pr_info("%s: mctl=0x%p, vfe output mode =0x%x",
-		  __func__, p_mctl, p_mctl->vfe_output_mode);
-	}
-	return rc;
-}
-
-static int msm_mctl_cmd(struct msm_cam_media_controller *p_mctl,
-			unsigned int cmd, unsigned long arg)
-{
-	int rc = -EINVAL;
-	void __user *argp = (void __user *)arg;
-	if (!p_mctl) {
-		pr_err("%s: param is NULL", __func__);
-		return -EINVAL;
-	}
-	D("%s:%d: cmd %d\n", __func__, __LINE__, cmd);
-
-	
-	switch (cmd) {
-		
-	case MSM_CAM_IOCTL_GET_SENSOR_INFO:
-			rc = msm_get_sensor_info(p_mctl, argp);
-			break;
-
-	case MSM_CAM_IOCTL_SENSOR_IO_CFG:
-		rc = v4l2_subdev_call(p_mctl->sensor_sdev,
-			core, ioctl, VIDIOC_MSM_SENSOR_CFG, argp);
-			break;
-
-	case MSM_CAM_IOCTL_SENSOR_V4l2_S_CTRL: {
-			struct v4l2_control v4l2_ctrl;
-			CDBG("subdev call\n");
-			if (copy_from_user(&v4l2_ctrl,
-				(void *)argp,
-				sizeof(struct v4l2_control))) {
-				CDBG("copy fail\n");
-				return -EFAULT;
-			}
-			CDBG("subdev call ok\n");
-			rc = v4l2_subdev_call(p_mctl->sensor_sdev,
-				core, s_ctrl, &v4l2_ctrl);
-			break;
-	}
-
-	case MSM_CAM_IOCTL_SENSOR_V4l2_QUERY_CTRL: {
-			struct v4l2_queryctrl v4l2_qctrl;
-			CDBG("query called\n");
-			if (copy_from_user(&v4l2_qctrl,
-				(void *)argp,
-				sizeof(struct v4l2_queryctrl))) {
-				CDBG("copy fail\n");
-				rc = -EFAULT;
-				break;
-			}
-			rc = v4l2_subdev_call(p_mctl->sensor_sdev,
-				core, queryctrl, &v4l2_qctrl);
-			if (rc < 0) {
-				rc = -EFAULT;
-				break;
-			}
-			if (copy_to_user((void *)argp,
-					 &v4l2_qctrl,
-					 sizeof(struct v4l2_queryctrl))) {
-				rc = -EFAULT;
-			}
-			break;
-	}
-
-	case MSM_CAM_IOCTL_GET_ACTUATOR_INFO: {
-		struct msm_actuator_cfg_data cdata;
-		CDBG("%s: act_config: %p\n", __func__,
-			p_mctl->actctrl->a_config);
-		if (copy_from_user(&cdata,
-			(void *)argp,
-			sizeof(struct msm_actuator_cfg_data))) {
-			ERR_COPY_FROM_USER();
-			return -EFAULT;
-		}
-		cdata.is_af_supported = 0;
-		cdata.is_ois_supported = 0;
-		rc = 0;
-
-		if (p_mctl->actctrl->a_config) {
-			struct msm_camera_sensor_info *sdata;
-
-			sdata = p_mctl->sdata;
-			CDBG("%s: Act_cam_Name %d\n", __func__,
-				sdata->actuator_info->cam_name);
-
-			cdata.is_af_supported = 1;
-			cdata.is_ois_supported = p_mctl->actctrl->is_ois_supported;
-			cdata.cfg.cam_name =
-				(enum af_camera_name)sdata->
-				actuator_info->cam_name;
-
-			CDBG("%s: Af Support:%d\n", __func__,
-				cdata.is_af_supported);
-			CDBG("%s: Act_name:%d\n", __func__, cdata.cfg.cam_name);
-
-		}
-		if (copy_to_user((void *)argp,
-				&cdata,
-				sizeof(struct msm_actuator_cfg_data))) {
-			ERR_COPY_TO_USER();
-			rc = -EFAULT;
-		}
-		break;
-	}
-
-	case MSM_CAM_IOCTL_ACTUATOR_IO_CFG: {
-		struct msm_actuator_cfg_data act_data;
-		if (p_mctl->actctrl->a_config) {
-			rc = p_mctl->actctrl->a_config(argp);
-		} else {
-			rc = copy_from_user(
-				&act_data,
-				(void *)argp,
-				sizeof(struct msm_actuator_cfg_data));
-			if (rc != 0) {
-				rc = -EFAULT;
-				break;
-			}
-			act_data.is_af_supported = 0;
-			act_data.is_ois_supported = 0;
-			rc = copy_to_user((void *)argp,
-					 &act_data,
-					 sizeof(struct msm_actuator_cfg_data));
-			if (rc != 0) {
-				rc = -EFAULT;
-				break;
-			}
-		}
-		break;
-	}
-
-	case MSM_CAM_IOCTL_GET_KERNEL_SYSTEM_TIME: {
-		struct timeval timestamp;
-		if (copy_from_user(&timestamp, argp, sizeof(timestamp))) {
-			ERR_COPY_FROM_USER();
-			rc = -EFAULT;
-		} else {
-			msm_mctl_gettimeofday(&timestamp);
-			rc = copy_to_user((void *)argp,
-				 &timestamp, sizeof(timestamp));
-		}
-		break;
-	}
-
-	case MSM_CAM_IOCTL_FLASH_CTRL: {
-		struct flash_ctrl_data flash_info;
-		if (copy_from_user(&flash_info, argp, sizeof(flash_info))) {
-			ERR_COPY_FROM_USER();
-			rc = -EFAULT;
-		} else {
-			rc = msm_flash_ctrl(p_mctl->sdata, &flash_info);
-		}
-		break;
-	}
-	case MSM_CAM_IOCTL_PICT_PP:
-		rc = msm_mctl_set_pp_key(p_mctl, (void __user *)arg);
-		break;
-	case MSM_CAM_IOCTL_PICT_PP_DIVERT_DONE:
-		rc = msm_mctl_pp_divert_done(p_mctl, (void __user *)arg);
-		break;
-	case MSM_CAM_IOCTL_PICT_PP_DONE:
-		rc = msm_mctl_pp_done(p_mctl, (void __user *)arg);
-		break;
-	case MSM_CAM_IOCTL_MCTL_POST_PROC:
-		rc = msm_mctl_pp_ioctl(p_mctl, cmd, arg);
-		break;
-	case MSM_CAM_IOCTL_RESERVE_FREE_FRAME:
-		rc = msm_mctl_pp_reserve_free_frame(p_mctl,
-			(void __user *)arg);
-		break;
-	case MSM_CAM_IOCTL_RELEASE_FREE_FRAME:
-		rc = msm_mctl_pp_release_free_frame(p_mctl,
-			(void __user *)arg);
-		break;
-	case MSM_CAM_IOCTL_SET_VFE_OUTPUT_TYPE:
-		rc = msm_mctl_set_vfe_output_mode(p_mctl,
-		  (void __user *)arg);
-		break;
-	case MSM_CAM_IOCTL_MCTL_DIVERT_DONE:
-		rc = msm_mctl_pp_mctl_divert_done(p_mctl,
-			(void __user *)arg);
-		break;
-			
-	case MSM_CAM_IOCTL_AXI_CONFIG:
-		if (p_mctl->axi_sdev)
-			rc = v4l2_subdev_call(p_mctl->axi_sdev, core, ioctl,
-				VIDIOC_MSM_AXI_CFG, (void __user *)arg);
-		else
-			rc = p_mctl->isp_sdev->isp_config(p_mctl, cmd, arg);
-		break;
-			
-	case MSM_CAM_IOCTL_SET_PERF_LOCK: {
-		int perf_lock_enable;
-		if (copy_from_user(&perf_lock_enable, argp, sizeof(perf_lock_enable))) {
-			ERR_COPY_FROM_USER();
-			rc = -EFAULT;
-		} else {
-			rc = msm_set_perf_lock(p_mctl, perf_lock_enable);
-		}
-		break;
-	}
-
-	default:
-		
-		D("%s:%d: go to default. Calling msm_isp_config\n",
-			__func__, __LINE__);
-		rc = p_mctl->isp_sdev->isp_config(p_mctl, cmd, arg);
-		break;
-	}
-	D("%s: !!! cmd = %d, rc = %d\n",
-		__func__, _IOC_NR(cmd), rc);
-	return rc;
-}
-
-static int msm_mctl_subdev_match_core(struct device *dev, void *data)
-{
-	int core_index = (int)data;
-	struct platform_device *pdev = to_platform_device(dev);
-
-	if (pdev->id == core_index)
-		return 1;
-	else
-		return 0;
-}
-
-static int msm_mctl_register_subdevs(struct msm_cam_media_controller *p_mctl,
-	int core_index)
-{
-	struct device_driver *driver;
-	struct device *dev;
-	int rc = -ENODEV;
-
-	struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(p_mctl->sensor_sdev);
-	struct msm_camera_sensor_info *sinfo =
-		(struct msm_camera_sensor_info *) s_ctrl->sensordata;
-	struct msm_camera_device_platform_data *pdata = sinfo->pdata;
-
-	if (pdata->is_csiphy) {
-		
-		driver = driver_find(MSM_CSIPHY_DRV_NAME, &platform_bus_type);
-		if (!driver)
-			goto out;
-
-		dev = driver_find_device(driver, NULL, (void *)core_index,
-				msm_mctl_subdev_match_core);
-		if (!dev)
-			goto out;
-
-		p_mctl->csiphy_sdev = dev_get_drvdata(dev);
-	}
-
-	if (pdata->is_csic) {
-		
-		driver = driver_find(MSM_CSIC_DRV_NAME, &platform_bus_type);
-		if (!driver)
-			goto out;
-
-		dev = driver_find_device(driver, NULL, (void *)core_index,
-				msm_mctl_subdev_match_core);
-		if (!dev)
-			goto out;
-
-		p_mctl->csic_sdev = dev_get_drvdata(dev);
-	}
-
-	if (pdata->is_csid) {
-		
-		driver = driver_find(MSM_CSID_DRV_NAME, &platform_bus_type);
-		if (!driver)
-			goto out;
-
-		dev = driver_find_device(driver, NULL, (void *)core_index,
-				msm_mctl_subdev_match_core);
-		if (!dev)
-			goto out;
-
-		p_mctl->csid_sdev = dev_get_drvdata(dev);
-	}
-
-	if (pdata->is_ispif) {
-		
-		driver = driver_find(MSM_ISPIF_DRV_NAME, &platform_bus_type);
-		if (!driver)
-			goto out;
-
-		dev = driver_find_device(driver, NULL, 0,
-				msm_mctl_subdev_match_core);
-		if (!dev)
-			goto out;
-
-		p_mctl->ispif_sdev = dev_get_drvdata(dev);
-	}
-
-	
-	driver = driver_find(MSM_VFE_DRV_NAME, &platform_bus_type);
-	if (!driver)
-		goto out;
-
-	dev = driver_find_device(driver, NULL, 0,
-				msm_mctl_subdev_match_core);
-	if (!dev)
-		goto out;
-
-	p_mctl->isp_sdev->sd = dev_get_drvdata(dev);
-
-	if (pdata->is_vpe) {
-		
-		driver = driver_find(MSM_VPE_DRV_NAME, &platform_bus_type);
-		if (!driver)
-			goto out;
-
-		dev = driver_find_device(driver, NULL, 0,
-				msm_mctl_subdev_match_core);
-		if (!dev){pr_info("%s: driver_find_device \n", __func__);
-			goto out;}
-
-		p_mctl->vpe_sdev = dev_get_drvdata(dev);
-	}
-
-	rc = 0;
-
-#if 0		
-	
-	driver = driver_find(MSM_GEMINI_DRV_NAME, &platform_bus_type);
-	if (!driver) {
-		pr_err("%s:%d:Gemini: Failure: goto out\n",
-			__func__, __LINE__);
-		goto out;
-	}
-	pr_debug("%s:%d:Gemini: driver_find_device Gemini driver 0x%x\n",
-		__func__, __LINE__, (uint32_t)driver);
-	dev = driver_find_device(driver, NULL, NULL,
-				msm_mctl_subdev_match_core);
-	if (!dev) {
-		pr_err("%s:%d:Gemini: Failure goto out_put_driver\n",
-			__func__, __LINE__);
-		goto out_put_driver;
-	}
-	p_mctl->gemini_sdev = dev_get_drvdata(dev);
-	pr_debug("%s:%d:Gemini: After dev_get_drvdata gemini_sdev=0x%x\n",
-		__func__, __LINE__, (uint32_t)p_mctl->gemini_sdev);
-
-	if (p_mctl->gemini_sdev == NULL) {
-		pr_err("%s:%d:Gemini: Failure gemini_sdev is null\n",
-			__func__, __LINE__);
-		goto out_put_driver;
-	}
-	rc = 0;
-#endif 
-
-out:
-	return rc;
-}
-
-static int msm_mctl_open(struct msm_cam_media_controller *p_mctl,
-				 const char *const apps_id)
-{
-	int rc = 0;
-	struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(p_mctl->sensor_sdev);
-	struct msm_camera_sensor_info *sinfo =
-		(struct msm_camera_sensor_info *) s_ctrl->sensordata;
-	struct msm_camera_device_platform_data *camdev = sinfo->pdata;
-	uint8_t csid_core;
-	D("%s\n", __func__);
-	if (!p_mctl) {
-		pr_err("%s: param is NULL", __func__);
-		return -EINVAL;
-	}
-
-	mutex_lock(&p_mctl->lock);
-	
-	if (!p_mctl->opencnt) {
-		uint32_t csid_version;
-		wake_lock(&p_mctl->wake_lock_suspend);
-		
-		
-
-		csid_core = camdev->csid_core;
-		rc = msm_mctl_register_subdevs(p_mctl, csid_core);
-		if (rc < 0) {
-			pr_err("%s: msm_mctl_register_subdevs failed:%d\n",
-				__func__, rc);
-			goto register_sdev_failed;
-		}
-
-		if (camdev->is_csiphy) {
-			rc = v4l2_subdev_call(p_mctl->csiphy_sdev, core, ioctl,
-				VIDIOC_MSM_CSIPHY_INIT, NULL);
-			if (rc < 0) {
-				pr_err("%s: csiphy initialization failed %d\n",
-					__func__, rc);
-				goto csiphy_init_failed;
-			}
-		}
-
-		if (camdev->is_csid) {
-			rc = v4l2_subdev_call(p_mctl->csid_sdev, core, ioctl,
-				VIDIOC_MSM_CSID_INIT, &csid_version);
-			if (rc < 0) {
-				pr_err("%s: csid initialization failed %d\n",
-					__func__, rc);
-				goto csid_init_failed;
-			}
-		}
-		if (camdev->is_csic) {
-			rc = v4l2_subdev_call(p_mctl->csic_sdev, core, ioctl,
-				VIDIOC_MSM_CSIC_INIT, &csid_version);
-			if (rc < 0) {
-				pr_err("%s: csic initialization failed %d\n",
-					__func__, rc);
-				goto csic_init_failed;
-			}
-		}
-
-		
-		if (p_mctl->isp_sdev && p_mctl->isp_sdev->isp_open) {
-			rc = p_mctl->isp_sdev->isp_open(
-				p_mctl->isp_sdev->sd, p_mctl);
-	
-			if (rc < 0) {
-				pr_err("%s: isp init failed: %d\n",
-					__func__, rc);
-				goto isp_open_failed;
-			}
-		}
-
-		if (p_mctl->axi_sdev) {
-			rc = v4l2_subdev_call(p_mctl->axi_sdev, core, ioctl,
-				VIDIOC_MSM_AXI_INIT, p_mctl);
-			if (rc < 0) {
-				pr_err("%s: axi initialization failed %d\n",
-					__func__, rc);
-				goto axi_init_failed;
-			}
-		}
-		if (camdev->is_vpe) {
-			rc = v4l2_subdev_call(p_mctl->vpe_sdev, core, ioctl,
-				VIDIOC_MSM_VPE_INIT, p_mctl);
-			if (rc < 0) {
-				pr_err("%s: vpe initialization failed %d\n",
-				__func__, rc);
-				goto vpe_init_failed;
-			}
-		}
-
-
-		if (camdev->is_ispif) {
-			rc = v4l2_subdev_call(p_mctl->ispif_sdev, core, ioctl,
-				VIDIOC_MSM_ISPIF_INIT, &csid_version);
-			if (rc < 0) {
-				pr_err("%s: ispif initialization failed %d\n",
-					__func__, rc);
-				goto ispif_init_failed;
-			}
-		}
-
-#if 1	
-
-		rc = msm_camio_probe_on(s_ctrl);
-		if (rc)
-			pr_info("%s msm_camio_probe_on rc(%d)\n", __func__, rc);
-
-		if (p_mctl->sdata->use_rawchip) {
-#ifdef CONFIG_RAWCHIP
-			rc = rawchip_open_init();
-			if (rc < 0) {
-				goto sensor_sdev_failed;
-			}
-#endif
-		}
-#endif 
-
-		
-		rc = v4l2_subdev_call(p_mctl->sensor_sdev, core, s_power, 1);
-
-		if (rc < 0) {
-			pr_err("%s: sensor powerup failed: %d\n", __func__, rc);
-			goto sensor_sdev_failed;
-		}
-
-#if 1		
-		msm_sensor_match_id(s_ctrl);
-#endif 
-
-		
-		if (p_mctl->actctrl->a_init_table)
-			rc = p_mctl->actctrl->a_init_table();
-
-		if (rc < 0) {
-			pr_err("%s: act init failed: %d\n", __func__, rc);
-			goto act_power_up_failed;
-		}
-		
-
-		if (p_mctl->actctrl->a_power_up)
-			rc = p_mctl->actctrl->a_power_up(
-				p_mctl->sdata->actuator_info);
-
-		if (rc < 0) {
-			pr_err("%s: act power failed:%d\n", __func__, rc);
-			goto act_power_up_failed;
-		}
-
-		if (camdev->is_ispif) {
-			pm_qos_add_request(&p_mctl->pm_qos_req_list,
-				PM_QOS_CPU_DMA_LATENCY, PM_QOS_DEFAULT_VALUE);
-			pm_qos_update_request(&p_mctl->pm_qos_req_list,
-				MSM_V4L2_SWFI_LATENCY);
-		}
-		p_mctl->apps_id = apps_id;
-		p_mctl->opencnt++;
-		
-	} else {
-		D("%s: camera is already open", __func__);
-	}
-	mutex_unlock(&p_mctl->lock);
-
-	return rc;
-
-act_power_up_failed:
-	if (v4l2_subdev_call(p_mctl->sensor_sdev, core, s_power, 0) < 0)
-		pr_err("%s: sensor powerdown failed: %d\n", __func__, rc);
-sensor_sdev_failed:
-	if (camdev->is_ispif)
-		if (v4l2_subdev_call(p_mctl->ispif_sdev, core, ioctl,
-			VIDIOC_MSM_ISPIF_RELEASE, NULL) < 0)
-			pr_err("%s: ispif release failed %d\n", __func__, rc);
-ispif_init_failed:
-	if (camdev->is_vpe)
-		if (v4l2_subdev_call(p_mctl->vpe_sdev, core, ioctl,
-			VIDIOC_MSM_VPE_RELEASE, NULL) < 0)
-			pr_err("%s: vpe release failed %d\n", __func__, rc);
-vpe_init_failed:
-	if (p_mctl->axi_sdev)
-		if (v4l2_subdev_call(p_mctl->axi_sdev, core, ioctl,
-			VIDIOC_MSM_AXI_RELEASE, NULL) < 0)
-			pr_err("%s: axi release failed %d\n", __func__, rc);
-axi_init_failed:
-	if (p_mctl->isp_sdev && p_mctl->isp_sdev->isp_release)
-		p_mctl->isp_sdev->isp_release(p_mctl, p_mctl->isp_sdev->sd);
-isp_open_failed:
-	if (camdev->is_csic)
-		if (v4l2_subdev_call(p_mctl->csic_sdev, core, ioctl,
-			VIDIOC_MSM_CSIC_RELEASE, NULL) < 0)
-			pr_err("%s: csic release failed %d\n", __func__, rc);
-csic_init_failed:
-	if (camdev->is_csid)
-		if (v4l2_subdev_call(p_mctl->csid_sdev, core, ioctl,
-			VIDIOC_MSM_CSID_RELEASE, NULL) < 0)
-			pr_err("%s: csid release failed %d\n", __func__, rc);
-csid_init_failed:
-	if (camdev->is_csiphy)
-		if (v4l2_subdev_call(p_mctl->csiphy_sdev, core, ioctl,
-			VIDIOC_MSM_CSIPHY_RELEASE, NULL) < 0)
-			pr_err("%s: csiphy release failed %d\n", __func__, rc);
-csiphy_init_failed:
-register_sdev_failed:
-	wake_unlock(&p_mctl->wake_lock_suspend);
-
-	mutex_unlock(&p_mctl->lock);
-	return rc;
-}
-
-static int msm_mctl_release(struct msm_cam_media_controller *p_mctl)
-{
-	int rc = 0;
-	struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(p_mctl->sensor_sdev);
-	struct msm_camera_sensor_info *sinfo =
-		(struct msm_camera_sensor_info *) s_ctrl->sensordata;
-	struct msm_camera_device_platform_data *camdev = sinfo->pdata;
-
-#if 0 
-	v4l2_subdev_call(p_mctl->sensor_sdev, core, ioctl,
-		VIDIOC_MSM_SENSOR_RELEASE, NULL);
-#endif
-	if (camdev->is_ispif) {
-		v4l2_subdev_call(p_mctl->ispif_sdev, core, ioctl,
-			VIDIOC_MSM_ISPIF_RELEASE, NULL);
-	}
-	if (camdev->is_vpe) {
-		v4l2_subdev_call(p_mctl->vpe_sdev, core, ioctl,
-			VIDIOC_MSM_VPE_RELEASE, NULL);
-	}
-	if (p_mctl->axi_sdev) {
-		v4l2_subdev_call(p_mctl->axi_sdev, core, ioctl,
-			VIDIOC_MSM_AXI_RELEASE, NULL);
-	}
-
-
-	if (p_mctl->isp_sdev && p_mctl->isp_sdev->isp_release)
-		p_mctl->isp_sdev->isp_release(p_mctl,
-			p_mctl->isp_sdev->sd);
-
-	if (camdev->is_csid) {
-		v4l2_subdev_call(p_mctl->csid_sdev, core, ioctl,
-			VIDIOC_MSM_CSID_RELEASE, NULL);
-	}
-
-	if (camdev->is_csic) {
-		v4l2_subdev_call(p_mctl->csic_sdev, core, ioctl,
-			VIDIOC_MSM_CSIC_RELEASE, NULL);
-	}
-
-	if (camdev->is_csiphy) {
-		v4l2_subdev_call(p_mctl->csiphy_sdev, core, ioctl,
-			VIDIOC_MSM_CSIPHY_RELEASE, NULL);
-	}
-
-	if (p_mctl->actctrl->a_power_down)
-		p_mctl->actctrl->a_power_down(
-			p_mctl->sdata->actuator_info);
-	
-	if (p_mctl->sdata->use_rawchip) {
-#ifdef CONFIG_RAWCHIP
-		rawchip_release();
-#endif
-	}
-	
-	rc = msm_camio_probe_off(s_ctrl);
-	if (rc)
-		pr_info("%s msm_camio_probe_off rc(%d)\n", __func__, rc);
-	
-
-	v4l2_subdev_call(p_mctl->sensor_sdev, core, s_power, 0);
-	if (camdev->is_ispif) {
-		pm_qos_update_request(&p_mctl->pm_qos_req_list,
-				PM_QOS_DEFAULT_VALUE);
-		pm_qos_remove_request(&p_mctl->pm_qos_req_list);
-	}
-
-	(void)msm_set_perf_lock(p_mctl, 0);
-
-	
-	
-	wake_unlock(&p_mctl->wake_lock_suspend);
-	return rc;
-}
-
-int msm_mctl_init_user_formats(struct msm_cam_v4l2_device *pcam)
-{
-	struct v4l2_subdev *sd = pcam->sensor_sdev;
-	enum v4l2_mbus_pixelcode pxlcode;
-	int numfmt_sensor = 0;
-	int numfmt = 0;
-	int rc = 0;
-	int i, j;
-
-	D("%s\n", __func__);
-	while (!v4l2_subdev_call(sd, video, enum_mbus_fmt, numfmt_sensor,
-								&pxlcode))
-		numfmt_sensor++;
-
-	D("%s, numfmt_sensor = %d\n", __func__, numfmt_sensor);
-	if (!numfmt_sensor)
-		return -ENXIO;
-
-	pcam->usr_fmts = vmalloc(numfmt_sensor * ARRAY_SIZE(msm_isp_formats) *
-				sizeof(struct msm_isp_color_fmt));
-	if (!pcam->usr_fmts)
-		return -ENOMEM;
-
-	
-	for (i = 0; i < numfmt_sensor; i++) {
-		rc = v4l2_subdev_call(sd, video, enum_mbus_fmt, i, &pxlcode);
-		D("rc is  %d\n", rc);
-		if (rc < 0) {
-			vfree(pcam->usr_fmts);
-			return rc;
-		}
-
-		for (j = 0; j < ARRAY_SIZE(msm_isp_formats); j++) {
-			
-			if (pxlcode == msm_isp_formats[j].pxlcode) {
-				pcam->usr_fmts[numfmt] = msm_isp_formats[j];
-				D("pcam->usr_fmts=0x%x\n", (u32)pcam->usr_fmts);
-				D("format pxlcode 0x%x (0x%x) found\n",
-					  pcam->usr_fmts[numfmt].pxlcode,
-					  pcam->usr_fmts[numfmt].fourcc);
-				numfmt++;
-			}
-		}
-	}
-
-	pcam->num_fmts = numfmt;
-
-	if (numfmt == 0) {
-		pr_err("%s: No supported formats.\n", __func__);
-		vfree(pcam->usr_fmts);
-		return -EINVAL;
-	}
-
-	D("Found %d supported formats.\n", pcam->num_fmts);
-	return 0;
-}
-
-int msm_mctl_init(struct msm_cam_v4l2_device *pcam)
-{
-	struct msm_cam_media_controller *pmctl = NULL;
-	D("%s\n", __func__);
-	if (!pcam) {
-		pr_err("%s: param is NULL", __func__);
-		return -EINVAL;
-	}
-	pcam->mctl_handle = msm_camera_get_mctl_handle();
-	if (pcam->mctl_handle == 0) {
-		pr_err("%s: cannot get mctl handle", __func__);
-		return -EINVAL;
-	}
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (!pmctl) {
-		pr_err("%s: invalid mctl controller", __func__);
-		return -EINVAL;
-	}
-	wake_lock_init(&pmctl->wake_lock_suspend, WAKE_LOCK_SUSPEND, "msm_camera_suspend");
-	
-	
-	mutex_init(&pmctl->lock);
-	pmctl->opencnt = 0;
-
-	
-	pmctl->mctl_open = msm_mctl_open;
-	pmctl->mctl_cmd = msm_mctl_cmd;
-	pmctl->mctl_release = msm_mctl_release;
-	
-	msm_mctl_buf_init(pcam);
-	memset(&pmctl->pp_info, 0, sizeof(pmctl->pp_info));
-	pmctl->vfe_output_mode = 0;
-	spin_lock_init(&pmctl->pp_info.lock);
-	pmctl->act_sdev = pcam->act_sdev;
-	pmctl->actctrl = &pcam->actctrl;
-	pmctl->sensor_sdev = pcam->sensor_sdev;
-	pmctl->sdata = pcam->sdata;
-
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	pmctl->client = msm_ion_client_create(-1, "camera");
-	kref_init(&pmctl->refcount);
-#endif
-
-	return 0;
-}
-
-int msm_mctl_free(struct msm_cam_v4l2_device *pcam)
-{
-	int rc = 0;
-	struct msm_cam_media_controller *pmctl = NULL;
-	D("%s\n", __func__);
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (!pmctl) {
-		pr_err("%s: invalid mctl controller", __func__);
-		return -EINVAL;
-	}
-
-	mutex_destroy(&pmctl->lock);
-	
-	
-	wake_lock_destroy(&pmctl->wake_lock_suspend);
-	msm_camera_free_mctl(pcam->mctl_handle);
-	return rc;
-}
-static int msm_mctl_dev_open(struct file *f)
-{
-	int rc = -EINVAL, i;
-	
-	struct msm_cam_v4l2_device *pcam  = NULL;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_media_controller *pmctl;
-	D("%s : E ", __func__);
-
-	if (f == NULL) {
-		pr_err("%s :: cannot open video driver data", __func__);
-		return rc;
-	}
-	pcam = video_drvdata(f);
-
-	if (!pcam) {
-		pr_err("%s NULL pointer passed in!\n", __func__);
-		return rc;
-	}
-	D("%s : E use_count %d", __func__, pcam->mctl_node.use_count);
-	mutex_lock(&pcam->mctl_node.dev_lock);
-	for (i = 0; i < MSM_DEV_INST_MAX; i++) {
-		if (pcam->mctl_node.dev_inst[i] == NULL)
-			break;
-	}
-	
-	if (i == MSM_DEV_INST_MAX) {
-		mutex_unlock(&pcam->mctl_node.dev_lock);
-		return rc;
-	}
-	pcam_inst = kzalloc(sizeof(struct msm_cam_v4l2_dev_inst), GFP_KERNEL);
-	if (!pcam_inst) {
-		mutex_unlock(&pcam->mctl_node.dev_lock);
-		return rc;
-	}
-
-	pcam_inst->sensor_pxlcode = pcam->usr_fmts[0].pxlcode;
-	pcam_inst->my_index = i;
-	pcam_inst->pcam = pcam;
-	mutex_init(&pcam_inst->inst_lock);
-	pcam->mctl_node.dev_inst[i] = pcam_inst;
-
-	D("%s pcam_inst %p my_index = %d\n", __func__,
-		pcam_inst, pcam_inst->my_index);
-
-	rc = msm_cam_server_open_mctl_session(pcam,
-		&pcam->mctl_node.active);
-	if (rc < 0) {
-		pr_err("%s: mctl session open failed %d", __func__, rc);
-		mutex_unlock(&pcam->mctl_node.dev_lock);
-		return rc;
-	}
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (!pmctl) {
-		pr_err("%s mctl NULL!\n", __func__);
-		return rc;
-	}
-
-	D("%s active %d\n", __func__, pcam->mctl_node.active);		
-	rc = msm_setup_v4l2_event_queue(&pcam_inst->eventHandle,
-					pcam->mctl_node.pvdev);
-	if (rc < 0) {
-		mutex_unlock(&pcam->mctl_node.dev_lock);
-		return rc;
-	}
-	pcam_inst->vbqueue_initialized = 0;
-	kref_get(&pmctl->refcount);
-	f->private_data = &pcam_inst->eventHandle;
-
-	D("f->private_data = 0x%x, pcam = 0x%x\n",
-		(u32)f->private_data, (u32)pcam_inst);
-	pcam->mctl_node.use_count++;
-
-	mutex_unlock(&pcam->mctl_node.dev_lock);
-	D("%s : X ", __func__);
-	return rc;
-}
-
-static unsigned int msm_mctl_dev_poll(struct file *f,
-				struct poll_table_struct *wait)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-			struct msm_cam_v4l2_dev_inst, eventHandle);
-	pcam = pcam_inst->pcam;
-
-	D("%s : E pcam_inst = %p", __func__, pcam_inst);
-	if (!pcam) {
-		pr_err("%s NULL pointer of camera device!\n", __func__);
-		return -EINVAL;
-	}
-
-	poll_wait(f, &(pcam_inst->eventHandle.events->wait), wait);
-	if (v4l2_event_pending(&pcam_inst->eventHandle)) {
-		rc |= POLLPRI;
-		D("%s Event available on mctl node ", __func__);
-	}
-
-	D("%s poll on vb2\n", __func__);
-	if (!pcam_inst->vid_bufq.streaming) {
-		D("%s vid_bufq.streaming is off, inst=0x%x\n",
-				__func__, (u32)pcam_inst);
-		return rc;
-	}
-	rc |= vb2_poll(&pcam_inst->vid_bufq, f, wait);
-
-	D("%s : X ", __func__);
-	return rc;
-}
-
-static int msm_mctl_dev_close(struct file *f)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_media_controller *pmctl;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-	pcam = pcam_inst->pcam;
-
-	D("%s : E ", __func__);
-	if (!pcam) {
-		pr_err("%s NULL pointer of camera device!\n", __func__);
-		return -EINVAL;
-	}
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	mutex_lock(&pcam->mctl_node.dev_lock);
-
-	D("%s : active %d ", __func__, pcam->mctl_node.active);
-	if (pcam->mctl_node.active == 1) {
-		rc = msm_cam_server_close_mctl_session(pcam);
-		if (rc < 0) {
-			pr_err("%s: mctl session close failed %d",
-				__func__, rc);
-			mutex_unlock(&pcam->mctl_node.dev_lock);
-			return rc;
-		}
-		pmctl = NULL;
-	}	
-	pcam_inst->streamon = 0;
-	pcam->mctl_node.dev_inst_map[pcam_inst->image_mode] = NULL;
-	if (pcam_inst->vbqueue_initialized)
-		vb2_queue_release(&pcam_inst->vid_bufq);
-	D("%s Closing down instance %p ", __func__, pcam_inst);
-	pcam->mctl_node.dev_inst[pcam_inst->my_index] = NULL;
-	v4l2_fh_del(&pcam_inst->eventHandle);
-	v4l2_fh_exit(&pcam_inst->eventHandle);
-	mutex_destroy(&pcam_inst->inst_lock);
-
-	kfree(pcam_inst);
-	if (NULL != pmctl) {
-		D("%s : release ion client", __func__);
-		kref_put(&pmctl->refcount, msm_release_ion_client);
-	}
-	f->private_data = NULL;
-	mutex_unlock(&pcam->mctl_node.dev_lock);
-	pcam->mctl_node.use_count--;
-	D("%s : use_count %d X ", __func__, pcam->mctl_node.use_count);
-	return rc;
-}
-
-static struct v4l2_file_operations g_msm_mctl_fops = {
-	.owner   = THIS_MODULE,
-	.open	= msm_mctl_dev_open,
-	.poll	= msm_mctl_dev_poll,
-	.release = msm_mctl_dev_close,
-	.unlocked_ioctl = video_ioctl2,
-};
-
-static int msm_mctl_v4l2_querycap(struct file *f, void *pctx,
-				struct v4l2_capability *pcaps)
-{
-	struct msm_cam_v4l2_device *pcam;
-
-	if (f == NULL) {
-		pr_err("%s :: NULL file pointer", __func__);
-		return -EINVAL;
-	}
-
-	pcam = video_drvdata(f);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	if (!pcam) {
-		pr_err("%s NULL pointer passed in!\n", __func__);
-		return -EINVAL;
-	}
-
-	strlcpy(pcaps->driver, pcam->media_dev.dev->driver->name,
-			sizeof(pcaps->driver));
-	return 0;
-}
-
-static int msm_mctl_v4l2_queryctrl(struct file *f, void *pctx,
-				struct v4l2_queryctrl *pqctrl)
-{
-	int rc = 0;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_g_ctrl(struct file *f, void *pctx,
-					struct v4l2_control *c)
-{
-	int rc = 0;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_s_ctrl(struct file *f, void *pctx,
-					struct v4l2_control *ctrl)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-			struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam->mctl_node.dev_lock);
-	if (ctrl->id == MSM_V4L2_PID_PP_PLANE_INFO) {
-		if (copy_from_user(&pcam_inst->plane_info,
-					(void *)ctrl->value,
-					sizeof(struct img_plane_info))) {
-			pr_err("%s inst %p Copying plane_info failed ",
-					__func__, pcam_inst);
-			rc = -EFAULT;
-		}
-		D("%s inst %p got plane info: num_planes = %d,"
-				"plane size = %ld %ld ", __func__, pcam_inst,
-				pcam_inst->plane_info.num_planes,
-				pcam_inst->plane_info.plane[0].size,
-				pcam_inst->plane_info.plane[1].size);
-	} else
-		pr_err("%s Unsupported S_CTRL Value ", __func__);
-
-	mutex_unlock(&pcam->mctl_node.dev_lock);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_reqbufs(struct file *f, void *pctx,
-				struct v4l2_requestbuffers *pb)
-{
-	int rc = 0, i, j;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam_inst->inst_lock);
-	rc = vb2_reqbufs(&pcam_inst->vid_bufq, pb);
-	if (rc < 0) {
-		pr_err("%s reqbufs failed %d ", __func__, rc);
-		mutex_unlock(&pcam_inst->inst_lock);
-		return rc;
-	}
-	if (!pb->count) {
-		
-		D("%s Inst %p freeing buffer offsets array",
-			__func__, pcam_inst);
-		for (j = 0 ; j < pcam_inst->buf_count ; j++)
-			kfree(pcam_inst->buf_offset[j]);
-		kfree(pcam_inst->buf_offset);
-		pcam_inst->buf_offset = NULL;
-		if (pcam_inst->vbqueue_initialized) {
-			vb2_queue_release(&pcam_inst->vid_bufq);
-			pcam_inst->vbqueue_initialized = 0;
-		}
-	} else {
-		D("%s Inst %p Allocating buf_offset array",
-			__func__, pcam_inst);
-		
-		pcam_inst->buf_offset = (struct msm_cam_buf_offset **)
-			kzalloc(pb->count * sizeof(struct msm_cam_buf_offset *),
-							GFP_KERNEL);
-		if (!pcam_inst->buf_offset) {
-			pr_err("%s out of memory ", __func__);
-			mutex_unlock(&pcam_inst->inst_lock);
-			return -ENOMEM;
-		}
-		for (i = 0; i < pb->count; i++) {
-			pcam_inst->buf_offset[i] =
-				kzalloc(sizeof(struct msm_cam_buf_offset) *
-				pcam_inst->plane_info.num_planes, GFP_KERNEL);
-			if (!pcam_inst->buf_offset[i]) {
-				pr_err("%s out of memory ", __func__);
-				for (j = i-1 ; j >= 0; j--)
-					kfree(pcam_inst->buf_offset[j]);
-				kfree(pcam_inst->buf_offset);
-				pcam_inst->buf_offset = NULL;
-				mutex_unlock(&pcam_inst->inst_lock);
-				return -ENOMEM;
-			}
-		}
-	}
-	pcam_inst->buf_count = pb->count;
-	D("%s inst %p, buf count %d ", __func__,
-		pcam_inst, pcam_inst->buf_count);
-	mutex_unlock(&pcam_inst->inst_lock);
-	return rc;
-}
-
-static int msm_mctl_v4l2_querybuf(struct file *f, void *pctx,
-					struct v4l2_buffer *pb)
-{
-	
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam_inst->inst_lock);
-	rc = vb2_querybuf(&pcam_inst->vid_bufq, pb);
-	mutex_unlock(&pcam_inst->inst_lock);
-	return rc;
-}
-
-static int msm_mctl_v4l2_qbuf(struct file *f, void *pctx,
-					struct v4l2_buffer *pb)
-{
-	int rc = 0, i = 0;
-	
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst = %p\n", __func__, pcam_inst);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam_inst->inst_lock);
-	if (!pcam_inst->buf_offset) {
-		pr_err("%s Buffer is already released. Returning. ", __func__);
-		mutex_unlock(&pcam_inst->inst_lock);
-		return -EINVAL;
-	}
-
-	if (pb->type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
-		
-		if (pb->m.planes == NULL) {
-			pr_err("%s Planes array is null ", __func__);
-			mutex_unlock(&pcam_inst->inst_lock);
-			return -EINVAL;
-		}
-		for (i = 0; i < pcam_inst->plane_info.num_planes; i++) {
-			D("%s stored offsets for plane %d as"
-				"addr offset %d, data offset %d",
-				__func__, i, pb->m.planes[i].reserved[0],
-				pb->m.planes[i].data_offset);
-			pcam_inst->buf_offset[pb->index][i].data_offset =
-				pb->m.planes[i].data_offset;
-			pcam_inst->buf_offset[pb->index][i].addr_offset =
-				pb->m.planes[i].reserved[0];
-			pcam_inst->plane_info.plane[i].offset = 0;
-			D("%s, len %d user[%d] %p buf_len %d\n",
-				__func__, pb->length, i,
-				(void *)pb->m.planes[i].m.userptr,
-				pb->m.planes[i].length);
-		}
-	} else {
-		D("%s stored reserved info %d", __func__, pb->reserved);
-		pcam_inst->buf_offset[pb->index][0].addr_offset = pb->reserved;
-	}
-
-	rc = vb2_qbuf(&pcam_inst->vid_bufq, pb);
-	D("%s, videobuf_qbuf returns %d\n", __func__, rc);
-
-	mutex_unlock(&pcam_inst->inst_lock);
-	return rc;
-}
-
-static int msm_mctl_v4l2_dqbuf(struct file *f, void *pctx,
-					struct v4l2_buffer *pb)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	mutex_lock(&pcam_inst->inst_lock);
-	if (0 == pcam_inst->streamon) {
-		mutex_unlock(&pcam_inst->inst_lock);
-		return -EACCES;
-	}
-
-	rc = vb2_dqbuf(&pcam_inst->vid_bufq, pb,  f->f_flags & O_NONBLOCK);
-	D("%s, videobuf_dqbuf returns %d\n", __func__, rc);
-
-	mutex_unlock(&pcam_inst->inst_lock);
-	return rc;
-}
-
-static int msm_mctl_v4l2_streamon(struct file *f, void *pctx,
-					enum v4l2_buf_type buf_type)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst %p\n", __func__, pcam_inst);
-	WARN_ON(pctx != f->private_data);
-
-	mutex_lock(&pcam->mctl_node.dev_lock);
-	mutex_lock(&pcam_inst->inst_lock);
-	if ((buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) &&
-		(buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE)) {
-		pr_err("%s Invalid buffer type ", __func__);
-		mutex_unlock(&pcam_inst->inst_lock);
-		mutex_unlock(&pcam->mctl_node.dev_lock);
-		return -EINVAL;
-	}
-
-	D("%s Calling videobuf_streamon", __func__);
-	
-	rc = vb2_streamon(&pcam_inst->vid_bufq, buf_type);
-	D("%s, videobuf_streamon returns %d\n", __func__, rc);
-
-	
-	pcam_inst->streamon = 1;
-	mutex_unlock(&pcam_inst->inst_lock);
-	mutex_unlock(&pcam->mctl_node.dev_lock);
-	D("%s rc = %d\n", __func__, rc);
-	return rc;
-}
-
-static int msm_mctl_v4l2_streamoff(struct file *f, void *pctx,
-					enum v4l2_buf_type buf_type)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst %p\n", __func__, pcam_inst);
-	WARN_ON(pctx != f->private_data);
-
-	if ((buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) &&
-		(buf_type != V4L2_BUF_TYPE_VIDEO_CAPTURE)) {
-		pr_err("%s Invalid buffer type ", __func__);
-		return -EINVAL;
-	}
-
-	mutex_lock(&pcam->mctl_node.dev_lock);
-	mutex_lock(&pcam_inst->inst_lock);
-	pcam_inst->streamon = 0;
-	if (rc < 0)
-		pr_err("%s: hw failed to stop streaming\n", __func__);
-
-	
-	rc = vb2_streamoff(&pcam_inst->vid_bufq, buf_type);
-	D("%s, videobuf_streamoff returns %d\n", __func__, rc);
-	mutex_unlock(&pcam_inst->inst_lock);
-	mutex_unlock(&pcam->mctl_node.dev_lock);
-	return rc;
-}
-
-static int msm_mctl_v4l2_enum_fmt_cap(struct file *f, void *pctx,
-					struct v4l2_fmtdesc *pfmtdesc)
-{
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	const struct msm_isp_color_fmt *isp_fmt;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-	if ((pfmtdesc->type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) &&
-		(pfmtdesc->type != V4L2_BUF_TYPE_VIDEO_CAPTURE))
-		return -EINVAL;
-
-	if (pfmtdesc->index >= pcam->num_fmts)
-		return -EINVAL;
-
-	isp_fmt = &pcam->usr_fmts[pfmtdesc->index];
-
-	if (isp_fmt->name)
-		strlcpy(pfmtdesc->description, isp_fmt->name,
-						sizeof(pfmtdesc->description));
-
-	pfmtdesc->pixelformat = isp_fmt->fourcc;
-
-	D("%s: [%d] 0x%x, %s\n", __func__, pfmtdesc->index,
-		isp_fmt->fourcc, isp_fmt->name);
-	return 0;
-}
-
-static int msm_mctl_v4l2_g_fmt_cap(struct file *f,
-		void *pctx, struct v4l2_format *pfmt)
-{
-	int rc = 0;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return -EINVAL;
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_g_fmt_cap_mplane(struct file *f,
-		void *pctx, struct v4l2_format *pfmt)
-{
-	int rc = 0;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	if (pfmt->type != V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE)
-		return -EINVAL;
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_try_fmt_cap(struct file *f, void *pctx,
-					struct v4l2_format *pfmt)
-{
-	int rc = 0;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_try_fmt_cap_mplane(struct file *f, void *pctx,
-					struct v4l2_format *pfmt)
-{
-	int rc = 0;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_s_fmt_cap(struct file *f, void *pctx,
-					struct v4l2_format *pfmt)
-{
-	int rc = 0;
-	
-	struct msm_cam_v4l2_device *pcam  = video_drvdata(f);
-	struct msm_cam_media_controller *pmctl;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s\n", __func__);
-	D("%s, inst=0x%x,idx=%d,priv = 0x%p\n",
-		__func__, (u32)pcam_inst, pcam_inst->my_index,
-		(void *)pfmt->fmt.pix.priv);
-	WARN_ON(pctx != f->private_data);
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (!pcam_inst->vbqueue_initialized) {
-		pmctl->mctl_vbqueue_init(pcam_inst, &pcam_inst->vid_bufq,
-					V4L2_BUF_TYPE_VIDEO_CAPTURE);
-		pcam_inst->vbqueue_initialized = 1;
-	}
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_s_fmt_cap_mplane(struct file *f, void *pctx,
-				struct v4l2_format *pfmt)
-{
-	int rc = 0, i;
-	struct msm_cam_v4l2_device *pcam = video_drvdata(f);
-	struct msm_cam_media_controller *pmctl;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-			struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s Inst %p vbqueue %d\n", __func__,
-		pcam_inst, pcam_inst->vbqueue_initialized);
-	WARN_ON(pctx != f->private_data);
-
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if (!pcam_inst->vbqueue_initialized) {
-		pmctl->mctl_vbqueue_init(pcam_inst, &pcam_inst->vid_bufq,
-					V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE);
-		pcam_inst->vbqueue_initialized = 1;
-	}
-	for (i = 0; i < pcam->num_fmts; i++)
-		if (pcam->usr_fmts[i].fourcc == pfmt->fmt.pix_mp.pixelformat)
-			break;
-	if (i == pcam->num_fmts) {
-		pr_err("%s: User requested pixelformat %x not supported\n",
-			__func__, pfmt->fmt.pix_mp.pixelformat);
-		return -EINVAL;
-	}
-	pcam_inst->vid_fmt = *pfmt;
-	pcam_inst->sensor_pxlcode =
-		pcam->usr_fmts[i].pxlcode;
-	D("%s: inst=%p, width=%d, heigth=%d\n",
-		__func__, pcam_inst,
-		pcam_inst->vid_fmt.fmt.pix_mp.width,
-		pcam_inst->vid_fmt.fmt.pix_mp.height);
-	return rc;
-}
-static int msm_mctl_v4l2_g_jpegcomp(struct file *f, void *pctx,
-				struct v4l2_jpegcompression *pcomp)
-{
-	int rc = -EINVAL;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_s_jpegcomp(struct file *f, void *pctx,
-				struct v4l2_jpegcompression *pcomp)
-{
-	int rc = -EINVAL;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-
-static int msm_mctl_v4l2_g_crop(struct file *f, void *pctx,
-					struct v4l2_crop *crop)
-{
-	int rc = -EINVAL;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_s_crop(struct file *f, void *pctx,
-					struct v4l2_crop *a)
-{
-	int rc = -EINVAL;
-
-	D("%s\n", __func__);
-	WARN_ON(pctx != f->private_data);
-
-	return rc;
-}
-
-static int msm_mctl_v4l2_g_parm(struct file *f, void *pctx,
-				struct v4l2_streamparm *a)
-{
-	int rc = -EINVAL;
-	return rc;
-}
-
-static int msm_mctl_vidbuf_get_path(u32 extendedmode)
-{
-	switch (extendedmode) {
-	case MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL:
-		return OUTPUT_TYPE_T;
-	case MSM_V4L2_EXT_CAPTURE_MODE_MAIN:
-		return OUTPUT_TYPE_S;
-	case MSM_V4L2_EXT_CAPTURE_MODE_VIDEO:
-		return OUTPUT_TYPE_V;
-	case MSM_V4L2_EXT_CAPTURE_MODE_DEFAULT:
-	case MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW:
-	default:
-		return OUTPUT_TYPE_P;
-	}
-}
-
-static int msm_mctl_v4l2_s_parm(struct file *f, void *pctx,
-				struct v4l2_streamparm *a)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst = container_of(f->private_data,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-	pcam_inst->image_mode = a->parm.capture.extendedmode;
-	pcam_inst->pcam->mctl_node.dev_inst_map[pcam_inst->image_mode] =
-		pcam_inst;
-	pcam_inst->path = msm_mctl_vidbuf_get_path(pcam_inst->image_mode);
-	D("%s path=%d, image mode = %d rc=%d\n", __func__,
-		pcam_inst->path, pcam_inst->image_mode, rc);
-	return rc;
-}
-
-static int msm_mctl_v4l2_subscribe_event(struct v4l2_fh *fh,
-			struct v4l2_event_subscription *sub)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst =
-		(struct msm_cam_v4l2_dev_inst *)container_of(fh,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s:fh = 0x%x, type = 0x%x\n", __func__, (u32)fh, sub->type);
-
-	if (sub->type == V4L2_EVENT_ALL)
-		sub->type = V4L2_EVENT_PRIVATE_START+MSM_CAM_APP_NOTIFY_EVENT;
-	rc = v4l2_event_subscribe(fh, sub);
-	if (rc < 0)
-		pr_err("%s: failed for evtType = 0x%x, rc = %d\n",
-						__func__, sub->type, rc);
-	return rc;
-}
-
-static int msm_mctl_v4l2_unsubscribe_event(struct v4l2_fh *fh,
-			struct v4l2_event_subscription *sub)
-{
-	int rc = 0;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	pcam_inst =
-		(struct msm_cam_v4l2_dev_inst *)container_of(fh,
-		struct msm_cam_v4l2_dev_inst, eventHandle);
-
-	D("%s: fh = 0x%x\n", __func__, (u32)fh);
-
-	rc = v4l2_event_unsubscribe(fh, sub);
-	D("%s: rc = %d\n", __func__, rc);
-	return rc;
-}
-
-static const struct v4l2_ioctl_ops g_msm_mctl_ioctl_ops = {
-	.vidioc_querycap = msm_mctl_v4l2_querycap,
-
-	.vidioc_s_crop = msm_mctl_v4l2_s_crop,
-	.vidioc_g_crop = msm_mctl_v4l2_g_crop,
-
-	.vidioc_queryctrl = msm_mctl_v4l2_queryctrl,
-	.vidioc_g_ctrl = msm_mctl_v4l2_g_ctrl,
-	.vidioc_s_ctrl = msm_mctl_v4l2_s_ctrl,
-
-	.vidioc_reqbufs = msm_mctl_v4l2_reqbufs,
-	.vidioc_querybuf = msm_mctl_v4l2_querybuf,
-	.vidioc_qbuf = msm_mctl_v4l2_qbuf,
-	.vidioc_dqbuf = msm_mctl_v4l2_dqbuf,
-
-	.vidioc_streamon = msm_mctl_v4l2_streamon,
-	.vidioc_streamoff = msm_mctl_v4l2_streamoff,
-
-	
-	.vidioc_enum_fmt_vid_cap = msm_mctl_v4l2_enum_fmt_cap,
-	.vidioc_enum_fmt_vid_cap_mplane = msm_mctl_v4l2_enum_fmt_cap,
-	.vidioc_try_fmt_vid_cap = msm_mctl_v4l2_try_fmt_cap,
-	.vidioc_try_fmt_vid_cap_mplane = msm_mctl_v4l2_try_fmt_cap_mplane,
-	.vidioc_g_fmt_vid_cap = msm_mctl_v4l2_g_fmt_cap,
-	.vidioc_g_fmt_vid_cap_mplane = msm_mctl_v4l2_g_fmt_cap_mplane,
-	.vidioc_s_fmt_vid_cap = msm_mctl_v4l2_s_fmt_cap,
-	.vidioc_s_fmt_vid_cap_mplane = msm_mctl_v4l2_s_fmt_cap_mplane,
-
-	.vidioc_g_jpegcomp = msm_mctl_v4l2_g_jpegcomp,
-	.vidioc_s_jpegcomp = msm_mctl_v4l2_s_jpegcomp,
-
-	
-	.vidioc_g_parm =  msm_mctl_v4l2_g_parm,
-	.vidioc_s_parm =  msm_mctl_v4l2_s_parm,
-
-	
-	.vidioc_subscribe_event = msm_mctl_v4l2_subscribe_event,
-	.vidioc_unsubscribe_event = msm_mctl_v4l2_unsubscribe_event,
-};
-
-int msm_setup_mctl_node(struct msm_cam_v4l2_device *pcam)
-{
-	int rc = -EINVAL;
-	struct video_device *pvdev = NULL;
-	struct i2c_client *client = v4l2_get_subdevdata(pcam->sensor_sdev);
-
-	D("%s\n", __func__);
-
-	
-	pcam->mctl_node.v4l2_dev.dev = &client->dev;
-	rc = v4l2_device_register(pcam->mctl_node.v4l2_dev.dev,
-				&pcam->mctl_node.v4l2_dev);
-	if (rc < 0)
-		return -EINVAL;
-
-	
-	pvdev = video_device_alloc();
-	if (pvdev == NULL) {
-		pr_err("%s: video_device_alloc failed\n", __func__);
-		return rc;
-	}
-
-	
-	D("sensor name = %s, sizeof(pvdev->name)=%d\n",
-			pcam->sensor_sdev->name, sizeof(pvdev->name));
-
-	strlcpy(pvdev->name, pcam->sensor_sdev->name,
-			sizeof(pvdev->name));
-
-	pvdev->release   = video_device_release;
-	pvdev->fops	  = &g_msm_mctl_fops;
-	pvdev->ioctl_ops  = &g_msm_mctl_ioctl_ops;
-	pvdev->minor	  = -1;
-	pvdev->vfl_type   = 1;
-
-	
-	D("%s video_register_device\n", __func__);
-	rc = video_register_device(pvdev,
-			VFL_TYPE_GRABBER,
-			-1);
-	if (rc) {
-		pr_err("%s: video_register_device failed\n", __func__);
-		goto reg_fail;
-	}
-	D("%s: video device registered as /dev/video%d\n",
-			__func__, pvdev->num);
-
-	
-	pcam->mctl_node.pvdev	= pvdev;
-	video_set_drvdata(pcam->mctl_node.pvdev, pcam);
-
-	return rc ;
-
-reg_fail:
-	video_device_release(pvdev);
-	v4l2_device_unregister(&pcam->mctl_node.v4l2_dev);
-	pcam->mctl_node.v4l2_dev.dev = NULL;
-	return rc;
-}
diff --git a/drivers/media/video/msm/msm_mctl_buf.c b/drivers/media/video/msm/msm_mctl_buf.c
deleted file mode 100644
index 1d37e9c..0000000
--- a/drivers/media/video/msm/msm_mctl_buf.c
+++ /dev/null
@@ -1,937 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/list.h>
-#include <linux/ioctl.h>
-#include <linux/spinlock.h>
-#include <linux/videodev2.h>
-#include <linux/vmalloc.h>
-
-#include <media/v4l2-dev.h>
-#include <media/v4l2-ioctl.h>
-#include <media/v4l2-device.h>
-
-#include <linux/android_pmem.h>
-
-#include "msm.h"
-#include "msm_ispif.h"
-
-#ifdef CONFIG_MSM_CAMERA_DEBUG
-#define D(fmt, args...) pr_debug("msm_mctl_buf: " fmt, ##args)
-#else
-#define D(fmt, args...) do {} while (0)
-#endif
-
-static int msm_vb2_ops_queue_setup(struct vb2_queue *vq,
-					unsigned int *num_buffers,
-					unsigned int *num_planes,
-					unsigned long sizes[],
-					void *alloc_ctxs[])
-{
-	
-	struct msm_cam_v4l2_dev_inst *pcam_inst = vb2_get_drv_priv(vq);
-	struct msm_cam_v4l2_device *pcam = pcam_inst->pcam;
-	int i;
-
-	D("%s\n", __func__);
-	if (!pcam || !(*num_buffers)) {
-		pr_err("%s error : invalid input\n", __func__);
-		return -EINVAL;
-	}
-
-	*num_planes = pcam_inst->plane_info.num_planes;
-	for (i = 0; i < pcam_inst->vid_fmt.fmt.pix_mp.num_planes; i++) {
-		sizes[i] = PAGE_ALIGN(pcam_inst->plane_info.plane[i].size);
-		D("%s Inst %p : Plane %d Offset = %d Size = %ld"
-			"Aligned Size = %ld", __func__, pcam_inst, i,
-			pcam_inst->plane_info.plane[i].offset,
-			pcam_inst->plane_info.plane[i].size, sizes[i]);
-	}
-	return 0;
-}
-
-static void msm_vb2_ops_wait_prepare(struct vb2_queue *q)
-{
-	
-}
-static void msm_vb2_ops_wait_finish(struct vb2_queue *q)
-{
-	
-}
-
-static int msm_vb2_ops_buf_init(struct vb2_buffer *vb)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_cam_media_controller *pmctl;
-	struct videobuf2_contig_pmem *mem;
-	struct vb2_queue	*vq;
-	uint32_t buf_idx;
-	struct msm_frame_buffer *buf;
-	int rc = 0, i;
-	enum videobuf2_buffer_type buf_type;
-	struct videobuf2_msm_offset offset;
-	vq = vb->vb2_queue;
-	pcam_inst = vb2_get_drv_priv(vq);
-	pcam = pcam_inst->pcam;
-	D("%s\n", __func__);
-	D("%s, inst=0x%x,idx=%d, width = %d\n", __func__,
-		(u32)pcam_inst, pcam_inst->my_index,
-		pcam_inst->vid_fmt.fmt.pix.width);
-	D("%s, inst=0x%x,idx=%d, height = %d\n", __func__,
-		(u32)pcam_inst, pcam_inst->my_index,
-		pcam_inst->vid_fmt.fmt.pix.height);
-
-	buf = container_of(vb, struct msm_frame_buffer, vidbuf);
-	if (buf->state == MSM_BUFFER_STATE_INITIALIZED)
-		return rc;
-
-	if (pcam_inst->plane_info.buffer_type ==
-		V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE)
-		buf_type = VIDEOBUF2_MULTIPLE_PLANES;
-	else if (pcam_inst->plane_info.buffer_type ==
-		V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		buf_type = VIDEOBUF2_SINGLE_PLANE;
-	else
-		return -EINVAL;
-
-	if (buf_type == VIDEOBUF2_SINGLE_PLANE) {
-		offset.sp_off.y_off = pcam_inst->plane_info.sp_y_offset;
-		offset.sp_off.cbcr_off =
-			pcam_inst->plane_info.plane[0].offset;
-	}
-	buf_idx = vb->v4l2_buf.index;
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if(!pmctl) return -EINVAL;
-	for (i = 0; i < vb->num_planes; i++) {
-		mem = vb2_plane_cookie(vb, i);
-		if (!mem) { 
-			pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-			return -EINVAL;
-		} 
-		if (buf_type == VIDEOBUF2_MULTIPLE_PLANES)
-			offset.data_offset =
-				pcam_inst->plane_info.plane[i].offset;
-
-		if (vb->v4l2_buf.memory == V4L2_MEMORY_USERPTR)
-			rc = videobuf2_pmem_contig_user_get(mem, &offset,
-				buf_type,
-				pcam_inst->buf_offset[buf_idx][i].addr_offset,
-				pcam_inst->path, pmctl->client);
-		else
-			rc = videobuf2_pmem_contig_mmap_get(mem, &offset,
-				buf_type, pcam_inst->path);
-		if (rc < 0) {
-			pr_err("%s error initializing buffer ",
-				__func__);
-			return rc;
-		}
-	}
-	buf->state = MSM_BUFFER_STATE_INITIALIZED;
-	return rc;
-}
-
-static int msm_vb2_ops_buf_prepare(struct vb2_buffer *vb)
-{
-	int i, rc = 0;
-	uint32_t len;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_frame_buffer *buf;
-	struct vb2_queue	*vq = NULL;
-
-	D("%s\n", __func__);
-	if (!vb) {
-		pr_err("%s error : input is NULL\n", __func__);
-		return -EINVAL;
-	}
-	vq = vb->vb2_queue;
-	if (!vq) {
-		pr_err("%s error : input is NULL\n", __func__);
-		return -EINVAL;
-	}
-	
-	pcam_inst = vb2_get_drv_priv(vq);
-	pcam = pcam_inst->pcam;
-	buf = container_of(vb, struct msm_frame_buffer, vidbuf);
-
-	if (!pcam || !buf) {
-		pr_err("%s error : pointer is NULL\n", __func__);
-		return -EINVAL;
-	}
-	if ((pcam_inst->vid_fmt.fmt.pix.width == 0) ||
-		(pcam_inst->vid_fmt.fmt.pix.height == 0)) {
-		pr_err("%s error : pcam vid_fmt is not set\n", __func__);
-		return -EINVAL;
-	}
-	
-	for (i = 0; i < vb->num_planes; i++) {
-		len = vb2_plane_size(vb, i);
-		vb2_set_plane_payload(vb, i, len);
-	}
-	buf->state = MSM_BUFFER_STATE_PREPARED;
-	return rc;
-}
-
-static int msm_vb2_ops_buf_finish(struct vb2_buffer *vb)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_v4l2_device *pcam;
-	struct msm_frame_buffer *buf;
-
-	pcam_inst = vb2_get_drv_priv(vb->vb2_queue);
-	pcam = pcam_inst->pcam;
-	buf = container_of(vb, struct msm_frame_buffer, vidbuf);
-	buf->state = MSM_BUFFER_STATE_DEQUEUED;
-	D("%s: inst=0x%x, buf=0x, %x, idx=%d\n", __func__,
-	(uint32_t)pcam_inst, (uint32_t)buf, vb->v4l2_buf.index);
-	D("%s: inst=%p, buf=%x, idx=%d\n", __func__,
-	pcam_inst, (uint32_t)buf, vb->v4l2_buf.index);
-	return 0;
-}
-
-static void msm_vb2_ops_buf_cleanup(struct vb2_buffer *vb)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_media_controller *pmctl;
-	struct msm_cam_v4l2_device *pcam;
-	struct videobuf2_contig_pmem *mem;
-	struct msm_frame_buffer *buf, *tmp;
-	uint32_t i, vb_phyaddr = 0, buf_phyaddr = 0;
-	unsigned long flags = 0;
-
-	pcam_inst = vb2_get_drv_priv(vb->vb2_queue);
-	pcam = pcam_inst->pcam;
-	buf = container_of(vb, struct msm_frame_buffer, vidbuf);
-
-	if (pcam_inst->vid_fmt.type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
-		for (i = 0; i < vb->num_planes; i++) {
-			mem = vb2_plane_cookie(vb, i);
-			if (!mem) {
-				D("%s Inst %p memory already freed up. return",
-					__func__, pcam_inst);
-				return;
-			}
-			D("%s: inst=%p, buf=0x%x, idx=%d plane id = %d\n",
-				__func__, pcam_inst,
-				(uint32_t)buf, vb->v4l2_buf.index, i);
-
-			spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-			list_for_each_entry_safe(buf, tmp,
-					&pcam_inst->free_vq, list) {
-				if (&buf->vidbuf == vb) {
-					list_del_init(&buf->list);
-					break;
-				}
-			}
-			spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-		}
-	} else {
-		mem = vb2_plane_cookie(vb, 0);
-		if (!mem)
-			return;
-		D("%s: inst=0x%x, buf=0x%x, idx=%d\n", __func__,
-		(uint32_t)pcam_inst, (uint32_t)buf, vb->v4l2_buf.index);
-		vb_phyaddr = (unsigned long) videobuf2_to_pmem_contig(vb, 0);
-		spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-		list_for_each_entry_safe(buf, tmp,
-				&pcam_inst->free_vq, list) {
-			buf_phyaddr = (unsigned long)
-				videobuf2_to_pmem_contig(&buf->vidbuf, 0);
-			D("%s vb_idx=%d,vb_paddr=0x%x,phyaddr=0x%x\n",
-				__func__, buf->vidbuf.v4l2_buf.index,
-				buf_phyaddr, vb_phyaddr);
-			if (vb_phyaddr == buf_phyaddr) {
-				list_del_init(&buf->list);
-				break;
-			}
-		}
-		spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	}
-	
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if(pmctl)  {
-		for (i = 0; i < vb->num_planes; i++) {
-			mem = vb2_plane_cookie(vb, i);
-			if (!mem) { 
-				pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-				return;
-			} 
-			videobuf2_pmem_contig_user_put(mem, pmctl->client);
-		}
-	}
-	buf->state = MSM_BUFFER_STATE_UNUSED;
-}
-
-static int msm_vb2_ops_start_streaming(struct vb2_queue *q)
-{
-	return 0;
-}
-
-static int msm_vb2_ops_stop_streaming(struct vb2_queue *q)
-{
-	return 0;
-}
-
-static void msm_vb2_ops_buf_queue(struct vb2_buffer *vb)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst = NULL;
-	struct msm_cam_v4l2_device *pcam = NULL;
-	unsigned long flags = 0;
-	struct vb2_queue *vq = NULL; 
-	struct msm_frame_buffer *buf;
-	D("%s\n", __func__);
-	if (vb) vq = vb->vb2_queue; 
-	if (!vb || !vq) {
-		pr_err("%s error : input is NULL\n", __func__);
-		return ;
-	}
-	pcam_inst = vb2_get_drv_priv(vq);
-	pcam = pcam_inst->pcam;
-	D("%s pcam_inst=%p,(vb=0x%p),idx=%d,len=%d\n",
-		__func__, pcam_inst,
-	vb, vb->v4l2_buf.index, vb->v4l2_buf.length);
-	D("%s pcam_inst=%p, idx=%d\n", __func__, pcam_inst,
-		vb->v4l2_buf.index);
-	buf = container_of(vb, struct msm_frame_buffer, vidbuf);
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	
-	list_add_tail(&buf->list, &pcam_inst->free_vq);
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	buf->state = MSM_BUFFER_STATE_QUEUED;
-}
-
-static struct vb2_ops msm_vb2_ops = {
-	.queue_setup = msm_vb2_ops_queue_setup,
-	.wait_prepare = msm_vb2_ops_wait_prepare,
-	.wait_finish = msm_vb2_ops_wait_finish,
-	.buf_init = msm_vb2_ops_buf_init,
-	.buf_prepare = msm_vb2_ops_buf_prepare,
-	.buf_finish = msm_vb2_ops_buf_finish,
-	.buf_cleanup = msm_vb2_ops_buf_cleanup,
-	.start_streaming = msm_vb2_ops_start_streaming,
-	.stop_streaming = msm_vb2_ops_stop_streaming,
-	.buf_queue = msm_vb2_ops_buf_queue,
-};
-
-
-static int msm_vbqueue_init(struct msm_cam_v4l2_dev_inst *pcam_inst,
-			struct vb2_queue *q, enum v4l2_buf_type type)
-{
-	if (!q) {
-		pr_err("%s error : input is NULL\n", __func__);
-		return -EINVAL;
-	}
-
-	spin_lock_init(&pcam_inst->vq_irqlock);
-	INIT_LIST_HEAD(&pcam_inst->free_vq);
-	videobuf2_queue_pmem_contig_init(q, type,
-					&msm_vb2_ops,
-					sizeof(struct msm_frame_buffer),
-					(void *)pcam_inst);
-	return 0;
-}
-
-int msm_mctl_img_mode_to_inst_index(struct msm_cam_media_controller *pmctl,
-					int image_mode, int node_type)
-{
-	if ((image_mode >= 0) && node_type &&
-		pmctl->pcam_ptr->mctl_node.dev_inst_map[image_mode])
-		return pmctl->pcam_ptr->
-				mctl_node.dev_inst_map[image_mode]->my_index;
-	else if ((image_mode >= 0) &&
-		pmctl->pcam_ptr->dev_inst_map[image_mode])
-		return	pmctl->pcam_ptr->
-				dev_inst_map[image_mode]->my_index;
-	else
-		return -EINVAL;
-}
-
-void msm_mctl_gettimeofday(struct timeval *tv)
-{
-	struct timespec ts;
-
-	BUG_ON(!tv);
-
-	ktime_get_ts(&ts);
-	tv->tv_sec = ts.tv_sec;
-	tv->tv_usec = ts.tv_nsec/1000;
-}
-
-struct msm_frame_buffer *msm_mctl_buf_find(
-	struct msm_cam_media_controller *pmctl,
-	struct msm_cam_v4l2_dev_inst *pcam_inst, int del_buf,
-	int image_mode, struct msm_free_buf *fbuf)
-{
-	struct msm_frame_buffer *buf = NULL, *tmp;
-	uint32_t buf_phyaddr = 0;
-	unsigned long flags = 0;
-	uint32_t buf_idx, offset = 0;
-	struct videobuf2_contig_pmem *mem;
-
-	
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	list_for_each_entry_safe(buf, tmp,
-			&pcam_inst->free_vq, list) {
-		buf_idx = buf->vidbuf.v4l2_buf.index;
-		mem = vb2_plane_cookie(&buf->vidbuf, 0);
-		if (!mem) { 
-			pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-			return NULL;
-		} 
-		if (mem->buffer_type ==	VIDEOBUF2_MULTIPLE_PLANES)
-			offset = mem->offset.data_offset +
-				pcam_inst->buf_offset[buf_idx][0].data_offset;
-		else
-			offset = mem->offset.sp_off.y_off;
-		buf_phyaddr = (unsigned long)
-				videobuf2_to_pmem_contig(&buf->vidbuf, 0) +
-				offset;
-		D("%s vb_idx=%d,vb_paddr=0x%x ch0=0x%x\n",
-			__func__, buf->vidbuf.v4l2_buf.index,
-			buf_phyaddr, fbuf->ch_paddr[0]);
-		if (fbuf->ch_paddr[0] == buf_phyaddr) {
-			if (del_buf)
-				list_del_init(&buf->list);
-			spin_unlock_irqrestore(&pcam_inst->vq_irqlock,
-								flags);
-			buf->state = MSM_BUFFER_STATE_RESERVED;
-			return buf;
-		}
-	}
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	return NULL;
-}
-
-int msm_mctl_buf_done_proc(
-		struct msm_cam_media_controller *pmctl,
-		struct msm_cam_v4l2_dev_inst *pcam_inst,
-		int image_mode, struct msm_free_buf *fbuf,
-		uint32_t *frame_id, int gen_timestamp)
-{
-	struct msm_frame_buffer *buf = NULL;
-	int del_buf = 1;
-
-	buf = msm_mctl_buf_find(pmctl, pcam_inst, del_buf,
-					image_mode, fbuf);
-	if (!buf) {
-		pr_err("%s: buf=0x%x not found\n",
-			__func__, fbuf->ch_paddr[0]);
-		return -EINVAL;
-	}
-	if (gen_timestamp) {
-		if (frame_id)
-			buf->vidbuf.v4l2_buf.sequence = *frame_id;
-		msm_mctl_gettimeofday(
-			&buf->vidbuf.v4l2_buf.timestamp);
-	}
-	vb2_buffer_done(&buf->vidbuf, VB2_BUF_STATE_DONE);
-	return 0;
-}
-
-
-int msm_mctl_buf_done(struct msm_cam_media_controller *p_mctl,
-			int image_mode, struct msm_free_buf *fbuf,
-			uint32_t frame_id)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	int idx, rc;
-	int pp_divert_type = 0, pp_type = 0;
-
-	msm_mctl_check_pp(p_mctl, image_mode, &pp_divert_type, &pp_type);
-	D("%s: pp_type=%d, pp_divert_type = %d, frame_id = 0x%x image_mode %d",
-		__func__, pp_type, pp_divert_type, frame_id, image_mode);
-	if (pp_type || pp_divert_type)
-		rc = msm_mctl_do_pp_divert(p_mctl,
-		image_mode, fbuf, frame_id, pp_type);
-	else {
-		idx = msm_mctl_img_mode_to_inst_index(
-				p_mctl, image_mode, 0);
-		if (idx < 0) {
-			
-			if ((image_mode >= 0) &&
-				p_mctl->pcam_ptr->mctl_node.
-					dev_inst_map[image_mode]) {
-				int index = p_mctl->pcam_ptr->mctl_node.
-					   dev_inst_map[image_mode]->my_index;
-				pcam_inst = p_mctl->pcam_ptr->mctl_node.
-					dev_inst[index];
-				D("%s: Mctl node index %d inst %p",
-					__func__, index, pcam_inst);
-				rc = msm_mctl_buf_done_proc(p_mctl, pcam_inst,
-					image_mode, fbuf,
-					&frame_id, 1);
-				D("%s mctl node buf done %d\n", __func__, 0);
-				return -EINVAL;
-			} else {
-			  pr_err("%s Invalid instance, dropping buffer\n",
-				  __func__);
-			  return idx;
-			}
-		}
-		pcam_inst = p_mctl->pcam_ptr->dev_inst[idx];
-		rc = msm_mctl_buf_done_proc(p_mctl, pcam_inst,
-				image_mode, fbuf,
-				&frame_id, 1);
-	}
-	return rc;
-}
-
-int msm_mctl_buf_init(struct msm_cam_v4l2_device *pcam)
-{
-	struct msm_cam_media_controller *pmctl;
-	pmctl = msm_camera_get_mctl(pcam->mctl_handle);
-	if(!pmctl) return 0;
-	pmctl->mctl_vbqueue_init = msm_vbqueue_init;
-	return 0;
-}
-
-static int is_buffer_queued(struct msm_cam_v4l2_device *pcam, int image_mode)
-{
-	int idx;
-	int ret = 0;
-	struct msm_frame_buffer *buf = NULL;
-	struct msm_cam_v4l2_dev_inst *pcam_inst = NULL;
-	idx = pcam->mctl_node.dev_inst_map[image_mode]->my_index;
-	pcam_inst = pcam->mctl_node.dev_inst[idx];
-	list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-		if (buf->state != MSM_BUFFER_STATE_QUEUED)
-			continue;
-		ret = 1;
-	}
-	return ret;
-}
-
-struct msm_cam_v4l2_dev_inst *msm_mctl_get_pcam_inst(
-				struct msm_cam_media_controller *pmctl,
-				int image_mode)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst = NULL;
-	struct msm_cam_v4l2_device *pcam = pmctl->pcam_ptr;
-	int idx;
-
-	
-	if (!pcam) {
-		pr_err("%s pcam is null\n", __func__);
-		return pcam_inst;
-	}
-	
-
-	if (image_mode >= 0) {
-		if (pmctl->vfe_output_mode == VFE_OUTPUTS_MAIN_AND_THUMB
-		|| pmctl->vfe_output_mode == VFE_OUTPUTS_THUMB_AND_MAIN) {
-			if (pcam->mctl_node.dev_inst_map[image_mode]
-			&& is_buffer_queued(pcam, image_mode)) {
-				idx =
-				pcam->mctl_node.dev_inst_map[image_mode]
-				->my_index;
-				pcam_inst = pcam->mctl_node.dev_inst[idx];
-				D("%s Found instance %p in mctl node device\n",
-				  __func__, pcam_inst);
-			} else if (pcam->dev_inst_map[image_mode]) {
-				idx = pcam->dev_inst_map[image_mode]->my_index;
-				pcam_inst = pcam->dev_inst[idx];
-				D("%s Found instance %p in video device",
-				__func__, pcam_inst);
-			}
-			else { 
-				pr_info("%s image_node %d\n", __func__, image_mode);
-				pr_info("%s mctl_node.dev_inst_map %p\n", __func__, pcam->mctl_node.dev_inst_map[image_mode]);
-				pr_info("%s dev_inst_map %p\n", __func__, pcam->dev_inst_map[image_mode]);
-			}
-		} else {
-			if (pcam->mctl_node.dev_inst_map[image_mode]) {
-				idx = pcam->mctl_node.dev_inst_map[image_mode]
-				->my_index;
-				pcam_inst = pcam->mctl_node.dev_inst[idx];
-				D("%s Found instance %p in mctl node device\n",
-				__func__, pcam_inst);
-			} else if (pcam->dev_inst_map[image_mode]) {
-				idx = pcam->dev_inst_map[image_mode]->my_index;
-				pcam_inst = pcam->dev_inst[idx];
-				D("%s Found instance %p in video device",
-				__func__, pcam_inst);
-			}
-			else { 
-				pr_info("%s image_node %d\n", __func__, image_mode);
-				pr_info("%s mctl_node.dev_inst_map %p\n", __func__, pcam->mctl_node.dev_inst_map[image_mode]);
-				pr_info("%s dev_inst_map %p\n", __func__, pcam->dev_inst_map[image_mode]);
-			}
-		}
-	} else
-		pr_err("%s Invalid image mode %d. Return NULL\n",
-			__func__, image_mode);
-	return pcam_inst;
-}
-
-int msm_mctl_reserve_free_buf(
-		struct msm_cam_media_controller *pmctl,
-		struct msm_cam_v4l2_dev_inst *pref_pcam_inst,
-		int image_mode, struct msm_free_buf *free_buf)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst = pref_pcam_inst;
-	unsigned long flags = 0;
-	struct videobuf2_contig_pmem *mem = NULL;
-	struct msm_frame_buffer *buf = NULL;
-	int rc = -EINVAL, i;
-	uint32_t buf_idx, plane_offset = 0;
-
-	if (!free_buf || !pmctl) {
-		pr_err("%s: free_buf/pmctl is null\n", __func__);
-		return rc;
-	}
-	memset(free_buf, 0, sizeof(struct msm_free_buf));
-
-	if (!pcam_inst)
-		pcam_inst = msm_mctl_get_pcam_inst(pmctl, image_mode);
-
-	if (!pcam_inst || !pcam_inst->streamon) {
-		if (pcam_inst)
-			pr_info("%s: pcam_inst %p stream is off\n", __func__, pcam_inst);
-		pr_info("%s: stream is turned off\n", __func__);
-		return rc;
-	}
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-		if (buf->state != MSM_BUFFER_STATE_QUEUED)
-			continue;
-
-		buf_idx = buf->vidbuf.v4l2_buf.index;
-		if (pcam_inst->vid_fmt.type ==
-				V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE) {
-			free_buf->num_planes =
-				pcam_inst->plane_info.num_planes;
-			for (i = 0; i < free_buf->num_planes; i++) {
-				mem = vb2_plane_cookie(&buf->vidbuf, i);
-				if (!mem) { 
-					pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-					return -EINVAL;
-				} 
-				if (mem->buffer_type ==
-						VIDEOBUF2_MULTIPLE_PLANES)
-					plane_offset =
-					mem->offset.data_offset;
-				else
-					plane_offset =
-					mem->offset.sp_off.cbcr_off;
-				D("%s: data off %d plane off %d",
-					__func__,
-					pcam_inst->buf_offset[buf_idx][i].
-					data_offset, plane_offset);
-
-				free_buf->ch_paddr[i] =	(uint32_t)
-				videobuf2_to_pmem_contig(&buf->vidbuf, i) +
-				pcam_inst->buf_offset[buf_idx][i].data_offset +
-				plane_offset;
-
-			}
-		} else {
-			mem = vb2_plane_cookie(&buf->vidbuf, 0);
-			if (!mem) { 
-				pr_err("%s: null pointer check, line(%d)", __func__, __LINE__);
-				return -EINVAL;
-			} 
-			free_buf->ch_paddr[0] = (uint32_t)
-				videobuf2_to_pmem_contig(&buf->vidbuf, 0) +
-				mem->offset.sp_off.y_off;
-			free_buf->ch_paddr[1] =	free_buf->ch_paddr[0] +
-				mem->offset.sp_off.cbcr_off;
-		}
-		free_buf->vb = (uint32_t)buf;
-		buf->state = MSM_BUFFER_STATE_RESERVED;
-		if (pcam_inst->no_free_buf_cnt) {
-			pcam_inst->no_free_buf_cnt = 0;
-			pr_info("%s: inst=0x%p, idx=%d, paddr=0x%x, "
-				"ch1 addr=0x%x\n", __func__,
-				pcam_inst, buf->vidbuf.v4l2_buf.index,
-				free_buf->ch_paddr[0], free_buf->ch_paddr[1]);
-		}
-		rc = 0;
-		break;
-	}
-	if (rc != 0) {
-		++pcam_inst->no_free_buf_cnt;
-		if (pcam_inst->no_free_buf_cnt < 50 ||
-			pcam_inst->no_free_buf_cnt % 5 == 0)
-			pr_info("%s: No free buffer available: inst = 0x%p, cnt %d\n",
-				__func__, pcam_inst, pcam_inst->no_free_buf_cnt);
-	}
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	return rc;
-}
-
-int msm_mctl_return_free_buf(struct msm_cam_media_controller *pmctl,
-                int image_node, struct msm_free_buf *free_buf)
-{
-    int idx = 0;
-    struct msm_frame_buffer *buf = NULL;
-    struct msm_cam_v4l2_dev_inst *pcam_inst;
-    unsigned long flags = 0;
-    uint32_t buf_phyaddr = 0;
-    int rc = -EINVAL;
-
-    if (!free_buf)
-        return rc;
-
-    idx = msm_mctl_img_mode_to_inst_index(pmctl, image_node, 0);
-    if (idx < 0) {
-        pr_err("%s Invalid instance, buffer not released\n", __func__);
-        return idx;
-    }
-    pcam_inst = pmctl->pcam_ptr->dev_inst[idx];
-    if (!pcam_inst) {
-        pr_err("%s Invalid instance, cannot send buf to user",
-            __func__);
-        return rc;
-    }
-
-    spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-
-    if (!list_empty(&pcam_inst->free_vq)) {
-        list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-            buf_phyaddr =
-                (uint32_t) videobuf2_to_pmem_contig(&buf->vidbuf, 0);
-            if (free_buf->ch_paddr[0] == buf_phyaddr) {
-                D("%s buf = 0x%x ", __func__, free_buf->ch_paddr[0]);
-                buf->state = MSM_BUFFER_STATE_QUEUED;
-                rc = 0;
-                break;
-            }
-        }
-    }
-    if (rc != 0)
-        pr_err("%s invalid buffer address ", __func__);
-
-    spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-    return rc;
-}
-
-int msm_mctl_release_free_buf(struct msm_cam_media_controller *pmctl,
-				struct msm_cam_v4l2_dev_inst *pcam_inst,
-				int image_mode, struct msm_free_buf *free_buf)
-{
-	unsigned long flags = 0;
-	struct msm_frame_buffer *buf = NULL;
-	uint32_t buf_phyaddr = 0;
-	int rc = -EINVAL;
-
-	if (!free_buf)
-		return rc;
-
-	if (!pcam_inst) {
-		pr_err("%s Invalid instance, buffer not released\n",
-			__func__);
-		return rc;
-	}
-
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-		buf_phyaddr =
-			(uint32_t) videobuf2_to_pmem_contig(&buf->vidbuf, 0);
-		if (free_buf->ch_paddr[0] == buf_phyaddr) {
-			D("%s buf = 0x%x ", __func__, free_buf->ch_paddr[0]);
-			buf->state = MSM_BUFFER_STATE_UNUSED;
-			rc = 0;
-			break;
-		}
-	}
-
-	if (rc != 0)
-		pr_err("%s invalid buffer address ", __func__);
-
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	return rc;
-}
-
-int msm_mctl_buf_done_pp(struct msm_cam_media_controller *pmctl,
-	int image_mode, struct msm_free_buf *frame, int dirty, int node_type)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	int rc = 0, idx;
-
-	idx = msm_mctl_img_mode_to_inst_index(pmctl, image_mode, node_type);
-	if (idx < 0) {
-		pr_err("%s Invalid instance, buffer not released\n", __func__);
-		return idx;
-	}
-	if (node_type)
-		pcam_inst = pmctl->pcam_ptr->mctl_node.dev_inst[idx];
-	else
-		pcam_inst = pmctl->pcam_ptr->dev_inst[idx];
-	if (!pcam_inst) {
-		pr_err("%s Invalid instance, cannot send buf to user",
-			__func__);
-		return -EINVAL;
-	}
-
-	D("%s:inst=0x%p, paddr=0x%x, dirty=%d",
-		__func__, pcam_inst, frame->ch_paddr[0], dirty);
-	if (dirty)
-		
-		rc = msm_mctl_release_free_buf(pmctl, pcam_inst,
-						image_mode, frame);
-	else
-		rc = msm_mctl_buf_done_proc(pmctl, pcam_inst,
-			image_mode, frame, NULL, 0);
-	return rc;
-}
-
-struct msm_frame_buffer *msm_mctl_get_free_buf(
-		struct msm_cam_media_controller *pmctl,
-		int image_mode)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	unsigned long flags = 0;
-	struct msm_frame_buffer *buf = NULL;
-	int rc = -EINVAL, idx;
-
-	idx = msm_mctl_img_mode_to_inst_index(pmctl,
-		image_mode, 0);
-	if (idx < 0) {
-		pr_err("%s Invalid instance, cant get buffer\n", __func__);
-		return NULL;
-	}
-	pcam_inst = pmctl->pcam_ptr->dev_inst[idx];
-	if (!pcam_inst->streamon) {
-		pr_err("%s: stream 0x%p is off\n", __func__, pcam_inst);
-		return NULL;
-	}
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	if (!list_empty(&pcam_inst->free_vq)) {
-		list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-			if (buf->state == MSM_BUFFER_STATE_QUEUED) {
-				buf->state = MSM_BUFFER_STATE_RESERVED;
-				rc = 0;
-				break;
-			}
-		}
-	}
-	if (rc != 0) {
-		pr_info("%s:No free buffer available: inst = 0x%p ",
-				__func__, pcam_inst);
-		buf = NULL;
-	}
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	return buf;
-}
-
-int msm_mctl_put_free_buf(
-		struct msm_cam_media_controller *pmctl,
-		int image_mode, struct msm_frame_buffer *my_buf)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	unsigned long flags = 0;
-	int rc = 0, idx;
-	struct msm_frame_buffer *buf = NULL;
-
-	idx = msm_mctl_img_mode_to_inst_index(pmctl,
-		image_mode, 0);
-	if (idx < 0) {
-		pr_err("%s Invalid instance, cant put buffer\n", __func__);
-		return idx;
-	}
-	pcam_inst = pmctl->pcam_ptr->dev_inst[idx];
-	if (!pcam_inst->streamon) {
-		pr_err("%s: stream 0x%p is off\n", __func__, pcam_inst);
-		return rc;
-	}
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	if (!list_empty(&pcam_inst->free_vq)) {
-		list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-			if (my_buf == buf) {
-				buf->state = MSM_BUFFER_STATE_QUEUED;
-				spin_unlock_irqrestore(&pcam_inst->vq_irqlock,
-					flags);
-				return 0;
-			}
-		}
-	}
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	return rc;
-}
-
-int msm_mctl_buf_del(struct msm_cam_media_controller *pmctl,
-	int image_mode,
-	struct msm_frame_buffer *my_buf)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_frame_buffer *buf = NULL;
-	unsigned long flags = 0;
-	int idx;
-
-	idx = msm_mctl_img_mode_to_inst_index(pmctl,
-		image_mode, 0);
-	if (idx < 0) {
-		pr_err("%s Invalid instance, cant delete buffer\n", __func__);
-		return idx;
-	}
-	pcam_inst = pmctl->pcam_ptr->dev_inst[idx];
-	D("%s: idx = %d, pinst=0x%p", __func__, idx, pcam_inst);
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	if (!list_empty(&pcam_inst->free_vq)) {
-		list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-			if (my_buf == buf) {
-				list_del_init(&buf->list);
-				spin_unlock_irqrestore(&pcam_inst->vq_irqlock,
-					flags);
-				return 0;
-			}
-		}
-	}
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	pr_err("%s: buf 0x%p not found", __func__, my_buf);
-	return -EINVAL;
-}
-
-int msm_mctl_buf_return_buf(struct msm_cam_media_controller *pmctl,
-			int image_mode, struct msm_frame_buffer *rbuf)
-{
-	int idx = 0;
-	struct msm_frame_buffer *buf = NULL;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_cam_v4l2_device *pcam = pmctl->pcam_ptr;
-	unsigned long flags = 0;
-
-	if (pcam->mctl_node.dev_inst_map[image_mode]) {
-		idx = pcam->mctl_node.dev_inst_map[image_mode]->my_index;
-		pcam_inst = pcam->mctl_node.dev_inst[idx];
-		D("%s Found instance %p in mctl node device\n",
-			__func__, pcam_inst);
-	} else {
-		pr_err("%s Invalid image mode %d ", __func__, image_mode);
-		return -EINVAL;
-	}
-
-	if (!pcam_inst) {
-		pr_err("%s Invalid instance\n", __func__);
-		return -EINVAL;
-	}
-
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	if (!list_empty(&pcam_inst->free_vq)) {
-		list_for_each_entry(buf, &pcam_inst->free_vq, list) {
-			if (rbuf == buf) {
-				D("%s Return buffer %x in pcam_inst %p ",
-				__func__, (int)rbuf, pcam_inst);
-				buf->state = MSM_BUFFER_STATE_QUEUED;
-				spin_unlock_irqrestore(&pcam_inst->vq_irqlock,
-					flags);
-				return 0;
-			}
-		}
-	}
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	return -EINVAL;
-}
diff --git a/drivers/media/video/msm/msm_mctl_pp.c b/drivers/media/video/msm/msm_mctl_pp.c
deleted file mode 100644
index 5118491..0000000
--- a/drivers/media/video/msm/msm_mctl_pp.c
+++ /dev/null
@@ -1,1012 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/list.h>
-#include <linux/ioctl.h>
-#include <linux/spinlock.h>
-#include <linux/videodev2.h>
-#include <linux/proc_fs.h>
-#include <linux/vmalloc.h>
-
-#include <media/v4l2-dev.h>
-#include <media/v4l2-ioctl.h>
-#include <media/v4l2-device.h>
-
-#include <linux/android_pmem.h>
-
-#include "msm.h"
-#include "msm_vpe.h"
-
-#ifdef CONFIG_MSM_CAMERA_DEBUG
-#define D(fmt, args...) pr_debug("msm_mctl: " fmt, ##args)
-#else
-#define D(fmt, args...) do {} while (0)
-#endif
-
-static int msm_mctl_pp_vpe_ioctl(struct v4l2_subdev *vpe_sd,
-	struct msm_mctl_pp_cmd *cmd, void *data)
-{
-	int rc = 0;
-	struct msm_mctl_pp_params parm;
-	parm.cmd = cmd;
-	parm.data = data;
-	rc = v4l2_subdev_call(vpe_sd, core, ioctl, VIDIOC_MSM_VPE_CFG, &parm);
-	return rc;
-}
-
-
-static int msm_mctl_pp_buf_divert(
-			struct msm_cam_media_controller *pmctl,
-			struct msm_cam_v4l2_dev_inst *pcam_inst,
-			struct msm_cam_evt_divert_frame *div)
-{
-	struct v4l2_event v4l2_evt;
-	struct msm_isp_event_ctrl *isp_event;
-	isp_event = kzalloc(sizeof(struct msm_isp_event_ctrl),
-						GFP_ATOMIC);
-	if (!isp_event) {
-		pr_err("%s Insufficient memory. return", __func__);
-		return -ENOMEM;
-	}
-	D("%s: msm_cam_evt_divert_frame=%d",
-		__func__, sizeof(struct msm_cam_evt_divert_frame));
-	memset(&v4l2_evt, 0, sizeof(v4l2_evt));
-	v4l2_evt.type = V4L2_EVENT_PRIVATE_START +
-			MSM_CAM_RESP_DIV_FRAME_EVT_MSG;
-	*((uint32_t *)v4l2_evt.u.data) = (uint32_t)isp_event;
-	
-	isp_event->isp_data.div_frame = *div;
-
-	D("%s inst=%p, img_mode=%d, frame_id=%d\n", __func__,
-		pcam_inst, pcam_inst->image_mode, div->frame.frame_id);
-	v4l2_event_queue(
-		pmctl->config_device->config_stat_event_queue.pvdev,
-		&v4l2_evt);
-	return 0;
-}
-
-int msm_mctl_check_pp(struct msm_cam_media_controller *p_mctl,
-	int image_mode, int *pp_divert_type, int *pp_type)
-{
-	int rc = 0;
-	unsigned long flags;
-	uint32_t pp_key = 0;
-
-	*pp_type = 0;
-	*pp_divert_type = 0;
-	spin_lock_irqsave(&p_mctl->pp_info.lock, flags);
-	switch (image_mode) {
-	case MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW:
-		pp_key = PP_PREV;
-		if (p_mctl->pp_info.pp_key & pp_key)
-			*pp_divert_type = OUTPUT_TYPE_P;
-		if (p_mctl->pp_info.pp_ctrl.pp_msg_type & OUTPUT_TYPE_P)
-			*pp_type = OUTPUT_TYPE_P;
-		break;
-	case MSM_V4L2_EXT_CAPTURE_MODE_MAIN:
-		pp_key = PP_SNAP;
-		if (p_mctl->pp_info.pp_key & pp_key)
-			*pp_divert_type = OUTPUT_TYPE_S;
-		if (p_mctl->pp_info.pp_ctrl.pp_msg_type & OUTPUT_TYPE_S)
-			*pp_type = OUTPUT_TYPE_P;
-		break;
-	case MSM_V4L2_EXT_CAPTURE_MODE_VIDEO:
-		if (p_mctl->pp_info.pp_ctrl.pp_msg_type == OUTPUT_TYPE_V)
-			*pp_type = OUTPUT_TYPE_V;
-		break;
-	case MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL:
-		pp_key = PP_THUMB;
-		if (p_mctl->pp_info.pp_key & pp_key)
-			*pp_divert_type = OUTPUT_TYPE_T;
-		if (p_mctl->pp_info.pp_ctrl.pp_msg_type == OUTPUT_TYPE_T)
-			*pp_type = OUTPUT_TYPE_T;
-		break;
-	default:
-		break;
-	}
-	if (p_mctl->vfe_output_mode != VFE_OUTPUTS_MAIN_AND_THUMB &&
-		p_mctl->vfe_output_mode != VFE_OUTPUTS_THUMB_AND_MAIN) {
-		if (p_mctl->pp_info.div_frame[image_mode].ch_paddr[0])
-			*pp_divert_type = 0;
-	}
-	spin_unlock_irqrestore(&p_mctl->pp_info.lock, flags);
-	D("%s: pp_type=%d, pp_divert_type = %d",
-	__func__, *pp_type, *pp_divert_type);
-	return rc;
-}
-
-static int is_buf_in_queue(struct msm_cam_v4l2_device *pcam,
-	struct msm_free_buf *fbuf, int image_mode)
-{
-	struct msm_frame_buffer *buf = NULL, *tmp;
-	struct msm_cam_v4l2_dev_inst *pcam_inst = NULL;
-	unsigned long flags = 0;
-	struct videobuf2_contig_pmem *mem;
-	uint32_t buf_idx, offset = 0;
-	uint32_t buf_phyaddr = 0;
-	int idx;
-	idx = pcam->mctl_node.dev_inst_map[image_mode]->my_index;
-	pcam_inst = pcam->mctl_node.dev_inst[idx];
-	spin_lock_irqsave(&pcam_inst->vq_irqlock, flags);
-	list_for_each_entry_safe(buf, tmp,
-	&pcam_inst->free_vq, list) {
-		buf_idx = buf->vidbuf.v4l2_buf.index;
-		mem = vb2_plane_cookie(&buf->vidbuf, 0);
-		if (mem->buffer_type ==	VIDEOBUF2_MULTIPLE_PLANES)
-			offset = mem->offset.data_offset +
-				pcam_inst->buf_offset[buf_idx][0].data_offset;
-		else
-			offset = mem->offset.sp_off.y_off;
-		buf_phyaddr = (unsigned long)
-			videobuf2_to_pmem_contig(&buf->vidbuf, 0) +
-			offset;
-		D("%s vb_idx=%d,vb_paddr=0x%x ch0=0x%x\n",
-		  __func__, buf->vidbuf.v4l2_buf.index,
-		  buf_phyaddr, fbuf->ch_paddr[0]);
-		if (fbuf->ch_paddr[0] == buf_phyaddr) {
-			spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-			return 1;
-		}
-	}
-	spin_unlock_irqrestore(&pcam_inst->vq_irqlock, flags);
-	return 0;
-}
-static struct msm_cam_v4l2_dev_inst *msm_mctl_get_pcam_inst_for_divert(
-		struct msm_cam_media_controller *pmctl,
-		int image_mode, struct msm_free_buf *fbuf, int *node_type)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst = NULL;
-	struct msm_cam_v4l2_device *pcam = pmctl->pcam_ptr;
-	int idx;
-
-	if (image_mode >= 0) {
-		if (pcam->mctl_node.dev_inst_map[image_mode]
-		&& is_buf_in_queue(pcam, fbuf, image_mode)) {
-			idx =
-			pcam->mctl_node.dev_inst_map[image_mode]->my_index;
-			pcam_inst = pcam->mctl_node.dev_inst[idx];
-			*node_type = MCTL_NODE;
-			D("%s Found instance %p in mctl node device\n",
-				__func__, pcam_inst);
-		} else if (pcam->dev_inst_map[image_mode]) {
-			idx = pcam->dev_inst_map[image_mode]->my_index;
-			pcam_inst = pcam->dev_inst[idx];
-			*node_type = VIDEO_NODE;
-			D("%s Found instance %p in video device",
-				__func__, pcam_inst);
-		} else
-			pr_err("%s Invalid image mode %d. Return NULL\n",
-				   __func__, image_mode);
-	}
-		return pcam_inst;
-}
-
-int msm_mctl_do_pp_divert(
-	struct msm_cam_media_controller *p_mctl,
-	int image_mode, struct msm_free_buf *fbuf,
-	uint32_t frame_id, int pp_type)
-{
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	int rc = 0, i, buf_idx;
-	int del_buf = 0; 
-	struct msm_cam_evt_divert_frame div;
-	struct msm_frame_buffer *vb = NULL;
-	struct videobuf2_contig_pmem *mem;
-	int node;
-
-	pcam_inst = msm_mctl_get_pcam_inst_for_divert
-		(p_mctl, image_mode, fbuf, &node);
-	if (!pcam_inst) {
-		pr_err("%s Invalid instance. Cannot divert frame.\n",
-			__func__);
-		return -EINVAL;
-	}
-	vb = msm_mctl_buf_find(p_mctl, pcam_inst,
-		  del_buf, image_mode, fbuf);
-	if (!vb)
-		return -EINVAL;
-
-	vb->vidbuf.v4l2_buf.sequence = frame_id;
-	buf_idx = vb->vidbuf.v4l2_buf.index;
-	D("%s Diverting frame %d %x Image mode %d\n", __func__, buf_idx,
-		(uint32_t)vb, pcam_inst->image_mode);
-	div.image_mode = pcam_inst->image_mode;
-	div.op_mode    = pcam_inst->pcam->op_mode;
-	div.inst_idx   = pcam_inst->my_index;
-	div.node_idx   = pcam_inst->pcam->vnode_id;
-	p_mctl->pp_info.cur_frame_id[pcam_inst->image_mode] = frame_id;
-	div.frame.frame_id =
-		p_mctl->pp_info.cur_frame_id[pcam_inst->image_mode];
-	div.frame.buf_idx  = buf_idx;
-	div.frame.handle = (uint32_t)vb;
-	msm_mctl_gettimeofday(&div.frame.timestamp);
-	vb->vidbuf.v4l2_buf.timestamp = div.frame.timestamp;
-	div.do_pp = pp_type;
-	D("%s Diverting frame %x id %d to userspace ", __func__,
-		(int)div.frame.handle, div.frame.frame_id);
-	mem = vb2_plane_cookie(&vb->vidbuf, 0);
-	div.frame.path = mem->path;
-	div.frame.node_type = node;
-	if (mem->buffer_type == VIDEOBUF2_SINGLE_PLANE) {
-		div.frame.num_planes	= 1;
-		div.frame.sp.phy_addr	=
-			videobuf2_to_pmem_contig(&vb->vidbuf, 0);
-		div.frame.sp.addr_offset = mem->addr_offset;
-		div.frame.sp.y_off      = 0;
-		div.frame.sp.cbcr_off   = mem->offset.sp_off.cbcr_off;
-		div.frame.sp.fd         = (int)mem->vaddr;
-		div.frame.sp.length     = mem->size;
-		if (!pp_type)
-			p_mctl->pp_info.div_frame[pcam_inst->image_mode].
-			ch_paddr[0] = div.frame.sp.phy_addr;
-	} else {
-		div.frame.num_planes	= pcam_inst->plane_info.num_planes;
-		for (i = 0; i < div.frame.num_planes; i++) {
-			mem = vb2_plane_cookie(&vb->vidbuf, i);
-			div.frame.mp[i].phy_addr =
-				videobuf2_to_pmem_contig(&vb->vidbuf, i);
-			if (!pcam_inst->buf_offset)
-				div.frame.mp[i].data_offset = 0;
-			else
-				div.frame.mp[i].data_offset =
-				pcam_inst->buf_offset[buf_idx][i].data_offset;
-			div.frame.mp[i].addr_offset =
-				mem->addr_offset;
-			div.frame.mp[i].fd = (int)mem->vaddr;
-			div.frame.mp[i].length = mem->size;
-		}
-		if (!pp_type)
-			p_mctl->pp_info.div_frame[pcam_inst->image_mode].
-			ch_paddr[0] = div.frame.mp[0].phy_addr +
-					div.frame.mp[0].data_offset;
-	}
-	rc = msm_mctl_pp_buf_divert(p_mctl, pcam_inst, &div);
-	return rc;
-}
-
-static int msm_mctl_pp_get_phy_addr(
-	struct msm_cam_v4l2_dev_inst *pcam_inst,
-	uint32_t frame_handle,
-	struct msm_pp_frame *pp_frame)
-{
-	struct msm_frame_buffer *vb = NULL;
-	struct videobuf2_contig_pmem *mem;
-	int i, buf_idx = 0;
-
-	vb = (struct msm_frame_buffer *)frame_handle;
-	buf_idx = vb->vidbuf.v4l2_buf.index;
-	memset(pp_frame, 0, sizeof(struct msm_pp_frame));
-	pp_frame->handle = (uint32_t)vb;
-	pp_frame->frame_id = vb->vidbuf.v4l2_buf.sequence;
-	pp_frame->timestamp = vb->vidbuf.v4l2_buf.timestamp;
-	pp_frame->buf_idx = buf_idx;
-	mem = vb2_plane_cookie(&vb->vidbuf, 0);
-	pp_frame->image_type = (unsigned short)mem->path;
-	if (mem->buffer_type == VIDEOBUF2_SINGLE_PLANE) {
-		pp_frame->num_planes = 1;
-		pp_frame->sp.addr_offset = mem->addr_offset;
-		pp_frame->sp.phy_addr =
-			videobuf2_to_pmem_contig(&vb->vidbuf, 0);
-		pp_frame->sp.y_off = 0;
-		pp_frame->sp.cbcr_off = mem->offset.sp_off.cbcr_off;
-		pp_frame->sp.length = mem->size;
-		pp_frame->sp.fd = (int)mem->vaddr;
-	} else {
-		pp_frame->num_planes = pcam_inst->plane_info.num_planes;
-		for (i = 0; i < pp_frame->num_planes; i++) {
-			mem = vb2_plane_cookie(&vb->vidbuf, i);
-			pp_frame->mp[i].addr_offset = mem->addr_offset;
-			pp_frame->mp[i].phy_addr =
-				videobuf2_to_pmem_contig(&vb->vidbuf, i);
-			pp_frame->mp[i].data_offset =
-			pcam_inst->buf_offset[buf_idx][i].data_offset;
-			pp_frame->mp[i].fd = (int)mem->vaddr;
-			pp_frame->mp[i].length = mem->size;
-			D("%s frame id %d buffer %d plane %d phy addr 0x%x"
-				" fd %d length %d\n", __func__,
-				pp_frame->frame_id, buf_idx, i,
-				(uint32_t)pp_frame->mp[i].phy_addr,
-				pp_frame->mp[i].fd, pp_frame->mp[i].length);
-		}
-	}
-	return 0;
-}
-
-static int msm_mctl_pp_copy_timestamp_and_frame_id(
-	uint32_t src_handle, uint32_t dest_handle)
-{
-	struct msm_frame_buffer *src_vb;
-	struct msm_frame_buffer *dest_vb;
-
-	src_vb = (struct msm_frame_buffer *)src_handle;
-	dest_vb = (struct msm_frame_buffer *)dest_handle;
-	dest_vb->vidbuf.v4l2_buf.timestamp =
-		src_vb->vidbuf.v4l2_buf.timestamp;
-	dest_vb->vidbuf.v4l2_buf.sequence =
-		src_vb->vidbuf.v4l2_buf.sequence;
-	D("%s: timestamp=%ld:%ld,frame_id=0x%x", __func__,
-		dest_vb->vidbuf.v4l2_buf.timestamp.tv_sec,
-		dest_vb->vidbuf.v4l2_buf.timestamp.tv_usec,
-		dest_vb->vidbuf.v4l2_buf.sequence);
-	return 0;
-}
-
-static int msm_mctl_pp_path_to_inst_index(struct msm_cam_v4l2_device *pcam,
-					int out_type)
-{
-	int image_mode;
-	switch (out_type) {
-	case OUTPUT_TYPE_P:
-		image_mode = MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW;
-		break;
-	case OUTPUT_TYPE_V:
-		image_mode = MSM_V4L2_EXT_CAPTURE_MODE_VIDEO;
-		break;
-	case OUTPUT_TYPE_S:
-		image_mode = MSM_V4L2_EXT_CAPTURE_MODE_MAIN;
-		break;
-	default:
-		image_mode = -1;
-		break;
-	}
-	if ((image_mode >= 0) && pcam->dev_inst_map[image_mode])
-		return pcam->dev_inst_map[image_mode]->my_index;
-	else
-		return -EINVAL;
-}
-
-int msm_mctl_pp_proc_vpe_cmd(
-	struct msm_cam_media_controller *p_mctl,
-	struct msm_mctl_pp_cmd *pp_cmd)
-{
-	int rc = 0, idx;
-	void __user *argp = (void __user *)pp_cmd->value;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-
-	switch (pp_cmd->id) {
-	case VPE_CMD_INIT:
-	case VPE_CMD_DEINIT:
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		break;
-	case VPE_CMD_DISABLE:
-	case VPE_CMD_RESET:
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		break;
-	case VPE_CMD_ENABLE: {
-		struct msm_vpe_clock_rate clk_rate;
-		if (sizeof(struct msm_vpe_clock_rate) !=
-			pp_cmd->length) {
-			pr_err("%s: vpe cmd size mismatch "
-				"(id=%d, length = %d, expect size = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(struct msm_vpe_clock_rate));
-				rc = -EINVAL;
-				break;
-		}
-		if (copy_from_user(&clk_rate, pp_cmd->value,
-			sizeof(struct msm_vpe_clock_rate))) {
-			pr_err("%s:clk_rate copy failed", __func__);
-			return -EFAULT;
-		}
-		pp_cmd->value = (void *)&clk_rate;
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		pp_cmd->value = argp;
-		break;
-	}
-	case VPE_CMD_FLUSH: {
-		struct msm_vpe_flush_frame_buffer flush_buf;
-		if (sizeof(struct msm_vpe_flush_frame_buffer) !=
-			pp_cmd->length) {
-			D("%s: size mismatch(id=%d, len = %d, expected = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(struct msm_vpe_flush_frame_buffer));
-				rc = -EINVAL;
-				break;
-		}
-		if (copy_from_user(
-			&flush_buf, pp_cmd->value, sizeof(flush_buf)))
-			return -EFAULT;
-		pp_cmd->value = (void *)&flush_buf;
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		if (rc == 0) {
-			if (copy_to_user((void *)argp,
-						&flush_buf,
-						sizeof(flush_buf))) {
-				ERR_COPY_TO_USER();
-				rc = -EFAULT;
-			}
-			pp_cmd->value = argp;
-		}
-	}
-	break;
-	case VPE_CMD_OPERATION_MODE_CFG: {
-		struct msm_vpe_op_mode_cfg op_mode_cfg;
-		if (sizeof(struct msm_vpe_op_mode_cfg) !=
-		pp_cmd->length) {
-			D("%s: size mismatch(id=%d, len = %d, expected = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(struct msm_vpe_op_mode_cfg));
-				rc = -EINVAL;
-				break;
-		}
-		if (copy_from_user(&op_mode_cfg,
-			pp_cmd->value,
-			sizeof(op_mode_cfg)))
-			return -EFAULT;
-		pp_cmd->value = (void *)&op_mode_cfg;
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		break;
-	}
-	case VPE_CMD_INPUT_PLANE_CFG: {
-		struct msm_vpe_input_plane_cfg input_cfg;
-		if (sizeof(struct msm_vpe_input_plane_cfg) !=
-			pp_cmd->length) {
-			D("%s: mismatch(id=%d, len = %d, expected = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(struct msm_vpe_input_plane_cfg));
-				rc = -EINVAL;
-				break;
-		}
-		if (copy_from_user(
-			&input_cfg, pp_cmd->value, sizeof(input_cfg)))
-			return -EFAULT;
-		pp_cmd->value = (void *)&input_cfg;
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		break;
-	}
-	case VPE_CMD_OUTPUT_PLANE_CFG: {
-		struct msm_vpe_output_plane_cfg output_cfg;
-		if (sizeof(struct msm_vpe_output_plane_cfg) !=
-			pp_cmd->length) {
-			D("%s: size mismatch(id=%d, len = %d, expected = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(struct msm_vpe_output_plane_cfg));
-				rc = -EINVAL;
-				break;
-		}
-		if (copy_from_user(&output_cfg, pp_cmd->value,
-			sizeof(output_cfg))) {
-			D("%s: cannot copy pp_cmd->value, size=%d",
-				__func__, pp_cmd->length);
-			return -EFAULT;
-		}
-		pp_cmd->value = (void *)&output_cfg;
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		break;
-	}
-	case VPE_CMD_INPUT_PLANE_UPDATE: {
-		struct msm_vpe_input_plane_update_cfg input_update_cfg;
-		if (sizeof(struct msm_vpe_input_plane_update_cfg) !=
-			pp_cmd->length) {
-			D("%s: size mismatch(id=%d, len = %d, expected = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(struct msm_vpe_input_plane_update_cfg));
-				rc = -EINVAL;
-				break;
-		}
-		if (copy_from_user(&input_update_cfg, pp_cmd->value,
-			sizeof(input_update_cfg)))
-			return -EFAULT;
-		pp_cmd->value = (void *)&input_update_cfg;
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		break;
-	}
-	case VPE_CMD_SCALE_CFG_TYPE: {
-		struct msm_vpe_scaler_cfg scaler_cfg;
-		if (sizeof(struct msm_vpe_scaler_cfg) !=
-			pp_cmd->length) {
-			D("%s: size mismatch(id=%d, len = %d, expected = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(struct msm_vpe_scaler_cfg));
-				rc = -EINVAL;
-				break;
-		}
-		if (copy_from_user(&scaler_cfg, pp_cmd->value,
-			sizeof(scaler_cfg)))
-			return -EFAULT;
-		pp_cmd->value = (void *)&scaler_cfg;
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, NULL);
-		break;
-	}
-	case VPE_CMD_ZOOM: {
-		struct msm_mctl_pp_frame_info *zoom;
-		zoom = kmalloc(sizeof(struct msm_mctl_pp_frame_info),
-					GFP_ATOMIC);
-		if (!zoom) {
-			rc = -ENOMEM;
-			break;
-		}
-		if (sizeof(zoom->pp_frame_cmd) != pp_cmd->length) {
-			D("%s: size mismatch(id=%d, len = %d, expected = %d",
-				__func__, pp_cmd->id, pp_cmd->length,
-				sizeof(zoom->pp_frame_cmd));
-				rc = -EINVAL;
-				kfree(zoom);
-				break;
-		}
-		if (copy_from_user(&zoom->pp_frame_cmd, pp_cmd->value,
-			sizeof(zoom->pp_frame_cmd))) {
-			kfree(zoom);
-			return -EFAULT;
-		}
-		D("%s: src=0x%x, dest=0x%x,cookie=0x%x,action=0x%x,path=0x%x",
-				__func__, zoom->pp_frame_cmd.src_buf_handle,
-				zoom->pp_frame_cmd.dest_buf_handle,
-				zoom->pp_frame_cmd.cookie,
-				zoom->pp_frame_cmd.vpe_output_action,
-				zoom->pp_frame_cmd.path);
-		idx = msm_mctl_pp_path_to_inst_index(p_mctl->pcam_ptr,
-			zoom->pp_frame_cmd.path);
-		if (idx < 0) {
-			pr_err("%s Invalid path, returning\n", __func__);
-			kfree(zoom);
-			return idx;
-		}
-		pcam_inst = p_mctl->pcam_ptr->dev_inst[idx];
-		if (!pcam_inst) {
-			pr_err("%s Invalid instance, returning\n", __func__);
-			kfree(zoom);
-			return -EINVAL;
-		}
-		zoom->user_cmd = pp_cmd->id;
-		rc = msm_mctl_pp_get_phy_addr(pcam_inst,
-			zoom->pp_frame_cmd.src_buf_handle, &zoom->src_frame);
-		if (rc) {
-			kfree(zoom);
-			break;
-		}
-		rc = msm_mctl_pp_get_phy_addr(pcam_inst,
-			zoom->pp_frame_cmd.dest_buf_handle, &zoom->dest_frame);
-		if (rc) {
-			kfree(zoom);
-			break;
-		}
-		rc = msm_mctl_pp_copy_timestamp_and_frame_id(
-			zoom->pp_frame_cmd.src_buf_handle,
-
-			zoom->pp_frame_cmd.dest_buf_handle);
-		if (rc) {
-			kfree(zoom);
-			break;
-		}
-		rc = msm_mctl_pp_vpe_ioctl(
-			p_mctl->vpe_sdev, pp_cmd, (void *)zoom);
-		if (rc) {
-			kfree(zoom);
-			break;
-		}
-		break;
-	}
-	default:
-		rc = -1;
-		break;
-	}
-	return rc;
-}
-
-static int msm_mctl_pp_path_to_img_mode(int path)
-{
-	switch (path) {
-	case OUTPUT_TYPE_P:
-		return MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW;
-	case OUTPUT_TYPE_V:
-		return MSM_V4L2_EXT_CAPTURE_MODE_VIDEO;
-	case OUTPUT_TYPE_S:
-		return MSM_V4L2_EXT_CAPTURE_MODE_MAIN;
-	case OUTPUT_TYPE_T:
-		return MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL;
-	default:
-		return -EINVAL;
-	}
-}
-
-int msm_mctl_pp_proc_cmd(struct msm_cam_media_controller *p_mctl,
-			struct msm_mctl_pp_cmd *pp_cmd)
-{
-	int rc = 0;
-	struct msm_mctl_pp_frame_buffer pp_buffer;
-	struct msm_frame_buffer *buf = NULL;
-	void __user *argp = (void __user *)pp_cmd->value;
-	int img_mode;
-	unsigned long flags;
-
-	switch (pp_cmd->id) {
-	case MCTL_CMD_GET_FRAME_BUFFER: {
-		if (copy_from_user(&pp_buffer, pp_cmd->value,
-				sizeof(pp_buffer)))
-			return -EFAULT;
-		img_mode = msm_mctl_pp_path_to_img_mode(pp_buffer.path);
-		if (img_mode < 0) {
-			pr_err("%s Invalid image mode\n", __func__);
-			return img_mode;
-		}
-		buf = msm_mctl_get_free_buf(p_mctl, img_mode);
-		pp_buffer.buf_handle = (uint32_t)buf;
-		if (copy_to_user((void *)argp,
-			&pp_buffer,
-			sizeof(struct msm_mctl_pp_frame_buffer))) {
-			ERR_COPY_TO_USER();
-			rc = -EFAULT;
-		}
-		break;
-	}
-	case MCTL_CMD_PUT_FRAME_BUFFER: {
-		if (copy_from_user(&pp_buffer, pp_cmd->value,
-				sizeof(pp_buffer)))
-			return -EFAULT;
-		img_mode = msm_mctl_pp_path_to_img_mode(pp_buffer.path);
-		if (img_mode < 0) {
-			pr_err("%s Invalid image mode\n", __func__);
-			return img_mode;
-		}
-		buf = (struct msm_frame_buffer *)pp_buffer.buf_handle;
-		msm_mctl_put_free_buf(p_mctl, img_mode, buf);
-		break;
-	}
-	case MCTL_CMD_DIVERT_FRAME_PP_PATH: {
-		struct msm_mctl_pp_divert_pp divert_pp;
-		if (copy_from_user(&divert_pp, pp_cmd->value,
-				sizeof(divert_pp)))
-			return -EFAULT;
-		D("%s: PP_PATH, path=%d",
-			__func__, divert_pp.path);
-		spin_lock_irqsave(&p_mctl->pp_info.lock, flags);
-		if (divert_pp.enable)
-			p_mctl->pp_info.pp_ctrl.pp_msg_type |= divert_pp.path;
-		else
-			p_mctl->pp_info.pp_ctrl.pp_msg_type &= ~divert_pp.path;
-		spin_unlock_irqrestore(&p_mctl->pp_info.lock, flags);
-		D("%s: pp path = 0x%x", __func__,
-			p_mctl->pp_info.pp_ctrl.pp_msg_type);
-		break;
-	}
-	default:
-		rc = -EPERM;
-	break;
-	}
-	return rc;
-}
-
-
-int msm_mctl_pp_ioctl(struct msm_cam_media_controller *p_mctl,
-			unsigned int cmd, unsigned long arg)
-{
-	int rc = -EINVAL;
-	struct msm_mctl_post_proc_cmd pp_cmd;
-	void __user *argp = (void __user *)arg;
-
-	if (copy_from_user(&pp_cmd, argp, sizeof(pp_cmd)))
-		return -EFAULT;
-
-	switch (pp_cmd.type) {
-	case MSM_PP_CMD_TYPE_VPE:
-		rc = msm_mctl_pp_proc_vpe_cmd(p_mctl, &pp_cmd.cmd);
-		break;
-	case MSM_PP_CMD_TYPE_MCTL:
-		rc = msm_mctl_pp_proc_cmd(p_mctl, &pp_cmd.cmd);
-		break;
-	default:
-		rc = -EPERM;
-		break;
-	}
-	if (!rc) {
-		
-		if (copy_to_user((void *)arg,
-			&pp_cmd,
-			sizeof(struct msm_mctl_post_proc_cmd))) {
-			ERR_COPY_TO_USER();
-			rc = -EFAULT;
-		}
-	}
-	return rc;
-}
-
-int msm_mctl_pp_notify(struct msm_cam_media_controller *p_mctl,
-			struct msm_mctl_pp_frame_info *pp_frame_info)
-{
-		struct msm_mctl_pp_frame_cmd *pp_frame_cmd;
-		pp_frame_cmd = &pp_frame_info->pp_frame_cmd;
-
-		D("%s: msm_cam_evt_divert_frame=%d",
-			__func__, sizeof(struct msm_mctl_pp_event_info));
-		if ((MSM_MCTL_PP_VPE_FRAME_TO_APP &
-			pp_frame_cmd->vpe_output_action)) {
-			struct msm_free_buf done_frame;
-			int img_mode =
-				msm_mctl_pp_path_to_img_mode(
-					pp_frame_cmd->path);
-			if (img_mode < 0) {
-				pr_err("%s Invalid image mode\n", __func__);
-				return img_mode;
-			}
-			done_frame.ch_paddr[0] =
-				pp_frame_info->dest_frame.sp.phy_addr;
-			done_frame.vb =
-				pp_frame_info->dest_frame.handle;
-			msm_mctl_buf_done_pp(
-				p_mctl, img_mode, &done_frame, 0, 0);
-			D("%s: vpe done to app, vb=0x%x, path=%d, phy=0x%x",
-				__func__, done_frame.vb,
-				pp_frame_cmd->path, done_frame.ch_paddr[0]);
-		}
-		if ((MSM_MCTL_PP_VPE_FRAME_ACK &
-			pp_frame_cmd->vpe_output_action)) {
-			struct v4l2_event v4l2_evt;
-			struct msm_mctl_pp_event_info *pp_event_info;
-			struct msm_isp_event_ctrl *isp_event;
-			isp_event = kzalloc(sizeof(struct msm_isp_event_ctrl),
-								GFP_ATOMIC);
-			if (!isp_event) {
-				pr_err("%s Insufficient memory.", __func__);
-				return -ENOMEM;
-			}
-			memset(&v4l2_evt, 0, sizeof(v4l2_evt));
-			*((uint32_t *)v4l2_evt.u.data) = (uint32_t)isp_event;
-
-			
-			pp_event_info = &(isp_event->isp_data.pp_event_info);
-
-			pp_event_info->event = MCTL_PP_EVENT_CMD_ACK;
-			pp_event_info->ack.cmd = pp_frame_info->user_cmd;
-			pp_event_info->ack.status = 0;
-			pp_event_info->ack.cookie = pp_frame_cmd->cookie;
-			v4l2_evt.type = V4L2_EVENT_PRIVATE_START +
-						MSM_CAM_RESP_MCTL_PP_EVENT;
-
-			v4l2_event_queue(
-				p_mctl->config_device->
-					config_stat_event_queue.pvdev,
-				&v4l2_evt);
-			D("%s: ack to daemon, cookie=0x%x, event = 0x%x",
-				__func__, pp_frame_info->pp_frame_cmd.cookie,
-				v4l2_evt.type);
-		}
-		kfree(pp_frame_info); 
-		return 0;
-}
-
-int msm_mctl_pp_reserve_free_frame(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg)
-{
-	struct msm_cam_evt_divert_frame frame;
-	int image_mode, rc = 0;
-	struct msm_free_buf free_buf;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-
-	memset(&free_buf, 0, sizeof(struct msm_free_buf));
-	if (copy_from_user(&frame, arg,
-		sizeof(struct msm_cam_evt_divert_frame)))
-		return -EFAULT;
-
-	image_mode = frame.image_mode;
-	if (image_mode <= 0) {
-		pr_err("%s Invalid image mode %d", __func__, image_mode);
-		return -EINVAL;
-	}
-	
-	pcam_inst = p_mctl->pcam_ptr->dev_inst[image_mode];
-	if (!pcam_inst) {
-		pr_err("%s Instance already closed ", __func__);
-		return -EINVAL;
-	}
-	rc = msm_mctl_reserve_free_buf(p_mctl, pcam_inst,
-					image_mode, &free_buf);
-	if (rc == 0) {
-		msm_mctl_pp_get_phy_addr(pcam_inst, free_buf.vb, &frame.frame);
-		if (copy_to_user((void *)arg, &frame, sizeof(frame))) {
-			ERR_COPY_TO_USER();
-			rc = -EFAULT;
-		}
-	}
-	D("%s: reserve free buf got buffer %d from %p rc = %d, phy = 0x%x",
-		__func__, frame.frame.buf_idx,
-		pcam_inst, rc, free_buf.ch_paddr[0]);
-	return rc;
-}
-
-int msm_mctl_pp_release_free_frame(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg)
-{
-	struct msm_cam_evt_divert_frame div_frame;
-	struct msm_cam_v4l2_dev_inst *pcam_inst;
-	struct msm_pp_frame *frame;
-	int image_mode, rc = 0;
-	struct msm_free_buf free_buf;
-
-	if (copy_from_user(&div_frame, arg,
-		sizeof(struct msm_cam_evt_divert_frame)))
-		return -EFAULT;
-
-	image_mode = div_frame.image_mode;
-	if (image_mode < 0) {
-		pr_err("%s Invalid image mode %d\n", __func__, image_mode);
-		return -EINVAL;
-	}
-	frame = &div_frame.frame;
-	if (frame->num_planes > 1)
-		free_buf.ch_paddr[0] = frame->mp[0].phy_addr;
-	else
-		free_buf.ch_paddr[0] = frame->sp.phy_addr;
-
-	pcam_inst = msm_mctl_get_pcam_inst(p_mctl, image_mode);
-	if (!pcam_inst) {
-		pr_err("%s Invalid instance. Cannot release frame.\n",
-			__func__);
-		return -EINVAL;
-	}
-
-	rc = msm_mctl_release_free_buf(p_mctl, pcam_inst,
-					image_mode, &free_buf);
-	D("%s: release free buf, rc = %d, phy = 0x%x",
-		__func__, rc, free_buf.ch_paddr[0]);
-
-	return rc;
-}
-
-int msm_mctl_set_pp_key(struct msm_cam_media_controller *p_mctl,
-				void __user *arg)
-{
-	int rc = 0;
-	unsigned long flags;
-	spin_lock_irqsave(&p_mctl->pp_info.lock, flags);
-	if (copy_from_user(&p_mctl->pp_info.pp_key,
-			arg, sizeof(p_mctl->pp_info.pp_key)))
-		rc = -EFAULT;
-	else
-		D("%s: mctl=0x%p, pp_key_setting=0x%x",
-			__func__, p_mctl, p_mctl->pp_info.pp_key);
-	spin_unlock_irqrestore(&p_mctl->pp_info.lock, flags);
-	return rc;
-}
-
-int msm_mctl_pp_done(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg)
-{
-	struct msm_pp_frame frame;
-	int image_mode, rc = 0;
-	int dirty = 0;
-	struct msm_free_buf buf;
-	unsigned long flags;
-
-	if (copy_from_user(&frame, arg, sizeof(frame)))
-		return -EFAULT;
-
-	spin_lock_irqsave(&p_mctl->pp_info.lock, flags);
-	image_mode = msm_mctl_pp_path_to_img_mode(frame.path);
-	if (image_mode < 0) {
-		pr_err("%s Invalid image mode\n", __func__);
-		return image_mode;
-	}
-	D("%s Returning frame %x id %d to kernel ", __func__,
-		(int)frame.handle, frame.frame_id);
-	if (p_mctl->pp_info.div_frame[image_mode].ch_paddr[0]) {
-		memcpy(&buf,
-			&p_mctl->pp_info.div_frame[image_mode],
-			sizeof(buf));
-		memset(&p_mctl->pp_info.div_frame[image_mode],
-			0, sizeof(buf));
-		if (p_mctl->pp_info.cur_frame_id[image_mode] !=
-					frame.frame_id) {
-			
-			dirty = 1;
-		}
-	} else {
-		if (frame.num_planes > 1)
-			buf.ch_paddr[0] = frame.mp[0].phy_addr +
-						frame.mp[0].data_offset;
-		else
-			buf.ch_paddr[0] = frame.sp.phy_addr + frame.sp.y_off;
-	}
-	spin_unlock_irqrestore(&p_mctl->pp_info.lock, flags);
-	
-	rc = msm_mctl_buf_done_pp(p_mctl, image_mode, &buf, dirty, 0);
-	return rc;
-}
-
-int msm_mctl_pp_divert_done(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg)
-{
-	struct msm_pp_frame frame;
-	int msg_type, image_mode, rc = 0;
-	int dirty = 0;
-	struct msm_free_buf buf;
-	unsigned long flags;
-	D("%s enter\n", __func__);
-
-	if (copy_from_user(&frame, arg, sizeof(frame)))
-		return -EFAULT;
-
-	spin_lock_irqsave(&p_mctl->pp_info.lock, flags);
-	D("%s Frame path: %d\n", __func__, frame.path);
-	switch (frame.path) {
-	case OUTPUT_TYPE_P:
-		msg_type = VFE_MSG_OUTPUT_P;
-		image_mode = MSM_V4L2_EXT_CAPTURE_MODE_PREVIEW;
-		break;
-	case OUTPUT_TYPE_S:
-		msg_type = VFE_MSG_OUTPUT_S;
-		image_mode = MSM_V4L2_EXT_CAPTURE_MODE_MAIN;
-		break;
-	case OUTPUT_TYPE_V:
-		msg_type = VFE_MSG_OUTPUT_V;
-		image_mode = MSM_V4L2_EXT_CAPTURE_MODE_VIDEO;
-		break;
-	case OUTPUT_TYPE_T:
-		msg_type = VFE_MSG_OUTPUT_T;
-		image_mode = MSM_V4L2_EXT_CAPTURE_MODE_THUMBNAIL;
-		break;
-	default:
-		rc = -EFAULT;
-		goto err;
-	}
-
-	if (frame.num_planes > 1)
-		buf.ch_paddr[0] = frame.mp[0].phy_addr +
-					frame.mp[0].data_offset;
-	else
-		buf.ch_paddr[0] = frame.sp.phy_addr + frame.sp.y_off;
-
-	spin_unlock_irqrestore(&p_mctl->pp_info.lock, flags);
-	D("%s Frame done id: %d\n", __func__, frame.frame_id);
-	rc = msm_mctl_buf_done_pp(p_mctl, image_mode,
-		&buf, dirty, frame.node_type);
-	return rc;
-err:
-	spin_unlock_irqrestore(&p_mctl->pp_info.lock, flags);
-	return rc;
-}
-
-int msm_mctl_pp_mctl_divert_done(
-	struct msm_cam_media_controller *p_mctl,
-	void __user *arg)
-{
-	struct msm_cam_evt_divert_frame div_frame;
-	struct msm_frame_buffer *buf;
-	int image_mode, rc = 0;
-
-	if (copy_from_user(&div_frame, arg,
-			sizeof(struct msm_cam_evt_divert_frame))) {
-		pr_err("%s copy from user failed ", __func__);
-		return -EFAULT;
-	}
-
-	if (!div_frame.frame.handle) {
-		pr_err("%s Invalid buffer handle ", __func__);
-		return -EINVAL;
-	}
-	image_mode = div_frame.image_mode;
-	buf = (struct msm_frame_buffer *)div_frame.frame.handle;
-	D("%s Returning buffer %x Image mode %d ", __func__,
-		(int)buf, image_mode);
-	rc = msm_mctl_buf_return_buf(p_mctl, image_mode, buf);
-	if (rc < 0)
-		pr_err("%s Error returning mctl buffer ", __func__);
-
-	return rc;
-}
diff --git a/drivers/media/video/msm/msm_mem.c b/drivers/media/video/msm/msm_mem.c
deleted file mode 100644
index 31a7858..0000000
--- a/drivers/media/video/msm/msm_mem.c
+++ /dev/null
@@ -1,423 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/module.h>
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/list.h>
-#include <linux/ioctl.h>
-#include <linux/spinlock.h>
-#include <linux/videodev2.h>
-#include <linux/proc_fs.h>
-#include <linux/vmalloc.h>
-
-#include <media/v4l2-dev.h>
-#include <media/v4l2-ioctl.h>
-#include <media/v4l2-device.h>
-
-#include <linux/android_pmem.h>
-
-#include "msm.h"
-
-#ifdef CONFIG_MSM_CAMERA_DEBUG
-#define D(fmt, args...) pr_debug("msm_isp: " fmt, ##args)
-#else
-#define D(fmt, args...) do {} while (0)
-#endif
-
-#define PAD_TO_WORD(a)	  (((a) + 3) & ~3)
-
-#define __CONTAINS(r, v, l, field) ({			   \
-	typeof(r) __r = r;				  \
-	typeof(v) __v = v;				  \
-	typeof(v) __e = __v + l;				\
-	int res = __v >= __r->field &&			  \
-		__e <= __r->field + __r->len;		   \
-	res;							\
-})
-
-#define CONTAINS(r1, r2, field) ({			  \
-	typeof(r2) __r2 = r2;				   \
-	__CONTAINS(r1, __r2->field, __r2->len, field);	  \
-})
-
-#define IN_RANGE(r, v, field) ({				\
-	typeof(r) __r = r;				  \
-	typeof(v) __vv = v;				 \
-	int res = ((__vv >= __r->field) &&		  \
-		(__vv < (__r->field + __r->len)));	  \
-	res;							\
-})
-
-#define OVERLAPS(r1, r2, field) ({			  \
-	typeof(r1) __r1 = r1;				   \
-	typeof(r2) __r2 = r2;				   \
-	typeof(__r2->field) __v = __r2->field;		  \
-	typeof(__v) __e = __v + __r2->len - 1;		  \
-	int res = (IN_RANGE(__r1, __v, field) ||		\
-		IN_RANGE(__r1, __e, field));				 \
-	res;							\
-})
-
-static DEFINE_MUTEX(hlist_mut);
-
-#ifdef CONFIG_ANDROID_PMEM
-static int check_pmem_info(struct msm_pmem_info *info, int len)
-{
-	if (info->offset < len &&
-		info->offset + info->len <= len &&
-		info->planar0_off < len &&
-		info->planar1_off < len)
-		return 0;
-
-	pr_err("%s: check failed: off %d len %d y %d cbcr %d (total len %d)\n",
-						__func__,
-						info->offset,
-						info->len,
-						info->planar0_off,
-						info->planar1_off,
-						len);
-	return -EINVAL;
-}
-#endif
-
-static int check_overlap(struct hlist_head *ptype,
-				unsigned long paddr,
-				unsigned long len)
-{
-	struct msm_pmem_region *region;
-	struct msm_pmem_region t = { .paddr = paddr, .len = len };
-	struct hlist_node *node;
-
-	hlist_for_each_entry(region, node, ptype, list) {
-		if (CONTAINS(region, &t, paddr) ||
-			CONTAINS(&t, region, paddr) ||
-			OVERLAPS(region, &t, paddr)) {
-			CDBG(" region (PHYS %p len %ld)"
-				" clashes with registered region"
-				" (paddr %p len %ld)\n",
-				(void *)t.paddr, t.len,
-				(void *)region->paddr, region->len);
-			return -EINVAL;
-		}
-	}
-
-	return 0;
-}
-
-static int msm_pmem_table_add(struct hlist_head *ptype,
-	struct msm_pmem_info *info, struct ion_client *client)
-{
-	unsigned long paddr;
-#ifndef CONFIG_MSM_MULTIMEDIA_USE_ION
-	unsigned long kvstart;
-	struct file *file;
-#endif
-	int rc = -ENOMEM;
-
-	unsigned long len;
-	struct msm_pmem_region *region;
-
-	region = kmalloc(sizeof(struct msm_pmem_region), GFP_KERNEL);
-	if (!region)
-		goto out;
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	region->handle = ion_import_dma_buf(client, info->fd);
-	if (IS_ERR_OR_NULL(region->handle))
-		goto out1;
-	if (ion_map_iommu(client, region->handle, CAMERA_DOMAIN, GEN_POOL,
-				  SZ_4K, 0, &paddr, &len, UNCACHED, 0) < 0)
-		goto out2;
-#elif CONFIG_ANDROID_PMEM
-	rc = get_pmem_file(info->fd, &paddr, &kvstart, &len, &file);
-	if (rc < 0) {
-		pr_err("%s: get_pmem_file fd %d error %d\n",
-				__func__, info->fd, rc);
-		goto out1;
-	}
-	region->file = file;
-#else
-	paddr = 0;
-	file = NULL;
-	kvstart = 0;
-#endif
-	if (!info->len)
-		info->len = len;
-	rc = check_pmem_info(info, len);
-	if (rc < 0)
-		goto out3;
-	paddr += info->offset;
-	len = info->len;
-
-	if (check_overlap(ptype, paddr, len) < 0) {
-		rc = -EINVAL;
-		goto out3;
-	}
-
-	CDBG("%s: type %d, active flag %d, paddr 0x%lx, vaddr 0x%lx\n",
-		__func__, info->type, info->active, paddr,
-		(unsigned long)info->vaddr);
-
-	INIT_HLIST_NODE(&region->list);
-	region->paddr = paddr;
-	region->len = len;
-	memcpy(&region->info, info, sizeof(region->info));
-	D("%s Adding region to list with type %d\n", __func__,
-						region->info.type);
-	D("%s pmem_stats address is 0x%p\n", __func__, ptype);
-	hlist_add_head(&(region->list), ptype);
-
-	return 0;
-out3:
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-	ion_unmap_iommu(client, region->handle, CAMERA_DOMAIN, GEN_POOL);
-#endif
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-out2:
-	ion_free(client, region->handle);
-#elif CONFIG_ANDROID_PMEM
-	put_pmem_file(region->file);
-#endif
-out1:
-	kfree(region);
-out:
-	return rc;
-}
-
-static int __msm_register_pmem(struct hlist_head *ptype,
-			struct msm_pmem_info *pinfo, struct ion_client *client)
-{
-	int rc = 0;
-
-	switch (pinfo->type) {
-	case MSM_PMEM_AF:
-	case MSM_PMEM_AEC:
-	case MSM_PMEM_AWB:
-	case MSM_PMEM_RS:
-	case MSM_PMEM_CS:
-	case MSM_PMEM_IHIST:
-	case MSM_PMEM_SKIN:
-	case MSM_PMEM_AEC_AWB:
-	case MSM_PMEM_BAYER_GRID:
-	case MSM_PMEM_BAYER_FOCUS:
-	case MSM_PMEM_BAYER_HIST:
-		rc = msm_pmem_table_add(ptype, pinfo, client);
-		break;
-
-	default:
-		rc = -EINVAL;
-		break;
-	}
-
-	return rc;
-}
-
-static int __msm_pmem_table_del(struct hlist_head *ptype,
-			struct msm_pmem_info *pinfo, struct ion_client *client)
-{
-	int rc = 0;
-	struct msm_pmem_region *region;
-	struct hlist_node *node, *n;
-
-	switch (pinfo->type) {
-	case MSM_PMEM_AF:
-	case MSM_PMEM_AEC:
-	case MSM_PMEM_AWB:
-	case MSM_PMEM_RS:
-	case MSM_PMEM_CS:
-	case MSM_PMEM_IHIST:
-	case MSM_PMEM_SKIN:
-	case MSM_PMEM_AEC_AWB:
-	case MSM_PMEM_BAYER_GRID:
-	case MSM_PMEM_BAYER_FOCUS:
-	case MSM_PMEM_BAYER_HIST:
-		hlist_for_each_entry_safe(region, node, n,
-				ptype, list) {
-
-			if (pinfo->type == region->info.type &&
-				pinfo->vaddr == region->info.vaddr &&
-				pinfo->fd == region->info.fd) {
-				hlist_del(node);
-#ifdef CONFIG_MSM_MULTIMEDIA_USE_ION
-				ion_unmap_iommu(client, region->handle,
-					CAMERA_DOMAIN, GEN_POOL);
-				ion_free(client, region->handle);
-#else
-				put_pmem_file(region->file);
-#endif
-				kfree(region);
-			}
-		}
-		break;
-
-	default:
-		rc = -EINVAL;
-		break;
-	}
-
-	return rc;
-}
-
-uint8_t msm_pmem_region_lookup(struct hlist_head *ptype,
-	int pmem_type, struct msm_pmem_region *reg, uint8_t maxcount)
-{
-	struct msm_pmem_region *region;
-	struct msm_pmem_region *regptr;
-	struct hlist_node *node, *n;
-
-	uint8_t rc = 0;
-	D("%s\n", __func__);
-	regptr = reg;
-	mutex_lock(&hlist_mut);
-	hlist_for_each_entry_safe(region, node, n, ptype, list) {
-		if (region->info.type == pmem_type && region->info.active) {
-			*regptr = *region;
-			rc += 1;
-			if (rc >= maxcount)
-				break;
-			regptr++;
-		}
-	}
-	D("%s finished, rc=%d\n", __func__, rc);
-	mutex_unlock(&hlist_mut);
-	return rc;
-}
-
-int msm_pmem_region_get_phy_addr(struct hlist_head *ptype,
-	struct msm_mem_map_info *mem_map, int32_t *phyaddr)
-{
-	struct msm_pmem_region *region;
-	struct hlist_node *node, *n;
-	int pmem_type = mem_map->mem_type;
-	int rc = -EFAULT;
-
-	D("%s\n", __func__);
-	*phyaddr = 0;
-	mutex_lock(&hlist_mut);
-	hlist_for_each_entry_safe(region, node, n, ptype, list) {
-		if (region->info.type == pmem_type &&
-			(uint32_t)region->info.vaddr == mem_map->cookie) {
-			*phyaddr = (int32_t)region->paddr;
-			rc = 0;
-			break;
-		}
-	}
-	D("%s finished, phy_addr = 0x%x, rc=%d\n", __func__, *phyaddr, rc);
-	mutex_unlock(&hlist_mut);
-	return rc;
-}
-
-uint8_t msm_pmem_region_lookup_2(struct hlist_head *ptype,
-					int pmem_type,
-					struct msm_pmem_region *reg,
-					uint8_t maxcount)
-{
-	struct msm_pmem_region *region;
-	struct msm_pmem_region *regptr;
-	struct hlist_node *node, *n;
-	uint8_t rc = 0;
-	regptr = reg;
-	mutex_lock(&hlist_mut);
-	hlist_for_each_entry_safe(region, node, n, ptype, list) {
-		D("Mio: info.type=%d, pmem_type = %d,"
-						"info.active = %d\n",
-		region->info.type, pmem_type, region->info.active);
-
-		if (region->info.type == pmem_type && region->info.active) {
-			D("info.type=%d, pmem_type = %d,"
-							"info.active = %d,\n",
-				region->info.type, pmem_type,
-				region->info.active);
-			*regptr = *region;
-			region->info.type = MSM_PMEM_VIDEO;
-			rc += 1;
-			if (rc >= maxcount)
-				break;
-			regptr++;
-		}
-	}
-	mutex_unlock(&hlist_mut);
-	return rc;
-}
-
-unsigned long msm_pmem_stats_vtop_lookup(
-				struct msm_cam_media_controller *mctl,
-				unsigned long buffer,
-				int fd)
-{
-	struct msm_pmem_region *region;
-	struct hlist_node *node, *n;
-
-	hlist_for_each_entry_safe(region, node, n,
-	&mctl->stats_info.pmem_stats_list, list) {
-		if (((unsigned long)(region->info.vaddr) == buffer) &&
-						(region->info.fd == fd) &&
-						region->info.active == 0) {
-			region->info.active = 1;
-			return region->paddr;
-		}
-	}
-
-	return 0;
-}
-
-unsigned long msm_pmem_stats_ptov_lookup(
-		struct msm_cam_media_controller *mctl,
-		unsigned long addr, int *fd)
-{
-	struct msm_pmem_region *region;
-	struct hlist_node *node, *n;
-
-	hlist_for_each_entry_safe(region, node, n,
-	&mctl->stats_info.pmem_stats_list, list) {
-		if (addr == region->paddr && region->info.active) {
-			*fd = region->info.fd;
-			region->info.active = 0;
-			return (unsigned long)(region->info.vaddr);
-		}
-	}
-
-    if (addr != 0)
-        pr_err("%s: abnormal addr == 0X%x\n", __func__, (uint32_t)addr);
-
-	return 0;
-}
-
-int msm_register_pmem(struct hlist_head *ptype, void __user *arg,
-					  struct ion_client *client)
-{
-	struct msm_pmem_info info;
-
-	if (copy_from_user(&info, arg, sizeof(info))) {
-		ERR_COPY_FROM_USER();
-			return -EFAULT;
-	}
-
-	return __msm_register_pmem(ptype, &info, client);
-}
-EXPORT_SYMBOL(msm_register_pmem);
-
-int msm_pmem_table_del(struct hlist_head *ptype, void __user *arg,
-					   struct ion_client *client)
-{
-	struct msm_pmem_info info;
-
-	if (copy_from_user(&info, arg, sizeof(info))) {
-		ERR_COPY_FROM_USER();
-		return -EFAULT;
-	}
-
-	return __msm_pmem_table_del(ptype, &info, client);
-}
-EXPORT_SYMBOL(msm_pmem_table_del);
diff --git a/drivers/media/video/msm/msm_vfe31_v4l2.c b/drivers/media/video/msm/msm_vfe31_v4l2.c
deleted file mode 100644
index 891b0d5..0000000
--- a/drivers/media/video/msm/msm_vfe31_v4l2.c
+++ /dev/null
@@ -1,3808 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/uaccess.h>
-#include <linux/interrupt.h>
-#include <linux/slab.h>
-#include <linux/io.h>
-#include <linux/atomic.h>
-#include <linux/regulator/consumer.h>
-#include <linux/clk.h>
-#include <mach/clk.h>
-#include <mach/irqs.h>
-#include <mach/camera.h>
-#include <media/v4l2-device.h>
-#include <media/v4l2-subdev.h>
-#include <media/msm_isp.h>
-
-#include "msm.h"
-#include "msm_vfe31_v4l2.h"
-
-#define VFE_REG_DUMP_FLAG 0
-
-#if VFE_REG_DUMP_FLAG
-	#ifdef CDBG
-	#undef CDBG
-	#define CDBG pr_err
-	#endif
-#endif
-
-atomic_t irq_cnt;
-
-#define CHECKED_COPY_FROM_USER(in) {					\
-	if (copy_from_user((in), (void __user *)cmd->value,		\
-			cmd->length)) {					\
-		rc = -EFAULT;						\
-		break;							\
-	}								\
-}
-
-#define BUFF_SIZE_128 128
-
-#define VFE31_AXI_OFFSET 0x0050
-#define vfe31_get_ch_ping_addr(chn) \
-	(msm_io_r(vfe31_ctrl->vfebase + 0x0050 + 0x18 * (chn)))
-#define vfe31_get_ch_pong_addr(chn) \
-	(msm_io_r(vfe31_ctrl->vfebase + 0x0050 + 0x18 * (chn) + 4))
-#define vfe31_get_ch_addr(ping_pong, chn) \
-	(((ping_pong) & (1 << (chn))) == 0 ? \
-	vfe31_get_ch_pong_addr(chn) : vfe31_get_ch_ping_addr(chn))
-
-#define vfe31_put_ch_ping_addr(chn, addr) \
-	(msm_io_w((addr), vfe31_ctrl->vfebase + 0x0050 + 0x18 * (chn)))
-#define vfe31_put_ch_pong_addr(chn, addr) \
-	(msm_io_w((addr), vfe31_ctrl->vfebase + 0x0050 + 0x18 * (chn) + 4))
-#define vfe31_put_ch_addr(ping_pong, chn, addr) \
-	(((ping_pong) & (1 << (chn))) == 0 ?   \
-	vfe31_put_ch_pong_addr((chn), (addr)) : \
-	vfe31_put_ch_ping_addr((chn), (addr)))
-
-static struct vfe31_ctrl_type *vfe31_ctrl;
-static uint32_t vfe_clk_rate;
-
-struct vfe31_isr_queue_cmd {
-	struct list_head list;
-	uint32_t                           vfeInterruptStatus0;
-	uint32_t                           vfeInterruptStatus1;
-};
-
-#define VFE_MSG_V31_START VFE_MSG_V32_START
-#define VFE_MSG_V31_CAPTURE VFE_MSG_V32_CAPTURE
-#define VFE_MSG_V31_JPEG_CAPTURE VFE_MSG_V32_JPEG_CAPTURE
-#define VFE_MSG_V31_START_RECORDING VFE_MSG_V32_START_RECORDING
-
-
-static struct vfe31_cmd_type vfe31_cmd[] = {
-	{VFE_CMD_DUMMY_0},
-		{VFE_CMD_SET_CLK},
-		{VFE_CMD_RESET},
-		{VFE_CMD_START},
-		{VFE_CMD_TEST_GEN_START},
-	{VFE_CMD_OPERATION_CFG, V31_OPERATION_CFG_LEN},
-		{VFE_CMD_AXI_OUT_CFG, V31_AXI_OUT_LEN, V31_AXI_OUT_OFF, 0xFF},
-		{VFE_CMD_CAMIF_CFG, V31_CAMIF_LEN, V31_CAMIF_OFF, 0xFF},
-		{VFE_CMD_AXI_INPUT_CFG},
-		{VFE_CMD_BLACK_LEVEL_CFG, V31_BLACK_LEVEL_LEN,
-		V31_BLACK_LEVEL_OFF,
-		0xFF},
-  {VFE_CMD_MESH_ROLL_OFF_CFG, V31_MESH_ROLL_OFF_CFG_LEN,
-		V31_MESH_ROLL_OFF_CFG_OFF, 0xFF},
-		{VFE_CMD_DEMUX_CFG, V31_DEMUX_LEN, V31_DEMUX_OFF, 0xFF},
-		{VFE_CMD_FOV_CFG, V31_FOV_LEN, V31_FOV_OFF, 0xFF},
-		{VFE_CMD_MAIN_SCALER_CFG, V31_MAIN_SCALER_LEN,
-		V31_MAIN_SCALER_OFF, 0xFF},
-		{VFE_CMD_WB_CFG, V31_WB_LEN, V31_WB_OFF, 0xFF},
-	{VFE_CMD_COLOR_COR_CFG, V31_COLOR_COR_LEN, V31_COLOR_COR_OFF, 0xFF},
-		{VFE_CMD_RGB_G_CFG, V31_RGB_G_LEN, V31_RGB_G_OFF, 0xFF},
-		{VFE_CMD_LA_CFG, V31_LA_LEN, V31_LA_OFF, 0xFF },
-		{VFE_CMD_CHROMA_EN_CFG, V31_CHROMA_EN_LEN, V31_CHROMA_EN_OFF,
-		0xFF},
-		{VFE_CMD_CHROMA_SUP_CFG, V31_CHROMA_SUP_LEN, V31_CHROMA_SUP_OFF,
-		0xFF},
-	{VFE_CMD_MCE_CFG, V31_MCE_LEN, V31_MCE_OFF, 0xFF},
-		{VFE_CMD_SK_ENHAN_CFG, V31_SCE_LEN, V31_SCE_OFF, 0xFF},
-		{VFE_CMD_ASF_CFG, V31_ASF_LEN, V31_ASF_OFF, 0xFF},
-		{VFE_CMD_S2Y_CFG, V31_S2Y_LEN, V31_S2Y_OFF, 0xFF},
-		{VFE_CMD_S2CbCr_CFG, V31_S2CbCr_LEN, V31_S2CbCr_OFF, 0xFF},
-	{VFE_CMD_CHROMA_SUBS_CFG, V31_CHROMA_SUBS_LEN, V31_CHROMA_SUBS_OFF,
-		0xFF},
-		{VFE_CMD_OUT_CLAMP_CFG, V31_OUT_CLAMP_LEN, V31_OUT_CLAMP_OFF,
-		0xFF},
-		{VFE_CMD_FRAME_SKIP_CFG, V31_FRAME_SKIP_LEN, V31_FRAME_SKIP_OFF,
-		0xFF},
-		{VFE_CMD_DUMMY_1},
-		{VFE_CMD_DUMMY_2},
-	{VFE_CMD_DUMMY_3},
-		{VFE_CMD_UPDATE},
-		{VFE_CMD_BL_LVL_UPDATE, V31_BLACK_LEVEL_LEN,
-		V31_BLACK_LEVEL_OFF, 0xFF},
-		{VFE_CMD_DEMUX_UPDATE, V31_DEMUX_LEN, V31_DEMUX_OFF, 0xFF},
-		{VFE_CMD_FOV_UPDATE, V31_FOV_LEN, V31_FOV_OFF, 0xFF},
-	{VFE_CMD_MAIN_SCALER_UPDATE, V31_MAIN_SCALER_LEN, V31_MAIN_SCALER_OFF,
-		0xFF},
-		{VFE_CMD_WB_UPDATE, V31_WB_LEN, V31_WB_OFF, 0xFF},
-		{VFE_CMD_COLOR_COR_UPDATE, V31_COLOR_COR_LEN, V31_COLOR_COR_OFF,
-		0xFF},
-		{VFE_CMD_RGB_G_UPDATE, V31_RGB_G_LEN, V31_CHROMA_EN_OFF, 0xFF},
-		{VFE_CMD_LA_UPDATE, V31_LA_LEN, V31_LA_OFF, 0xFF },
-	{VFE_CMD_CHROMA_EN_UPDATE, V31_CHROMA_EN_LEN, V31_CHROMA_EN_OFF,
-		0xFF},
-		{VFE_CMD_CHROMA_SUP_UPDATE, V31_CHROMA_SUP_LEN,
-		V31_CHROMA_SUP_OFF, 0xFF},
-		{VFE_CMD_MCE_UPDATE, V31_MCE_LEN, V31_MCE_OFF, 0xFF},
-		{VFE_CMD_SK_ENHAN_UPDATE, V31_SCE_LEN, V31_SCE_OFF, 0xFF},
-		{VFE_CMD_S2CbCr_UPDATE, V31_S2CbCr_LEN, V31_S2CbCr_OFF, 0xFF},
-	{VFE_CMD_S2Y_UPDATE, V31_S2Y_LEN, V31_S2Y_OFF, 0xFF},
-		{VFE_CMD_ASF_UPDATE, V31_ASF_UPDATE_LEN, V31_ASF_OFF, 0xFF},
-		{VFE_CMD_FRAME_SKIP_UPDATE},
-		{VFE_CMD_CAMIF_FRAME_UPDATE},
-		{VFE_CMD_STATS_AF_UPDATE, V31_STATS_AF_LEN, V31_STATS_AF_OFF},
-	{VFE_CMD_STATS_AE_UPDATE, V31_STATS_AE_LEN, V31_STATS_AE_OFF},
-		{VFE_CMD_STATS_AWB_UPDATE, V31_STATS_AWB_LEN,
-		V31_STATS_AWB_OFF},
-		{VFE_CMD_STATS_RS_UPDATE, V31_STATS_RS_LEN, V31_STATS_RS_OFF},
-		{VFE_CMD_STATS_CS_UPDATE, V31_STATS_CS_LEN, V31_STATS_CS_OFF},
-		{VFE_CMD_STATS_SKIN_UPDATE},
-	{VFE_CMD_STATS_IHIST_UPDATE, V31_STATS_IHIST_LEN, V31_STATS_IHIST_OFF},
-		{VFE_CMD_DUMMY_4},
-		{VFE_CMD_EPOCH1_ACK},
-		{VFE_CMD_EPOCH2_ACK},
-		{VFE_CMD_START_RECORDING},
-	{VFE_CMD_STOP_RECORDING},
-		{VFE_CMD_DUMMY_5},
-		{VFE_CMD_DUMMY_6},
-		{VFE_CMD_CAPTURE, V31_CAPTURE_LEN, 0xFF},
-		{VFE_CMD_DUMMY_7},
-	{VFE_CMD_STOP},
-		{VFE_CMD_GET_HW_VERSION, V31_GET_HW_VERSION_LEN,
-		V31_GET_HW_VERSION_OFF},
-		{VFE_CMD_GET_FRAME_SKIP_COUNTS},
-		{VFE_CMD_OUTPUT1_BUFFER_ENQ},
-		{VFE_CMD_OUTPUT2_BUFFER_ENQ},
-	{VFE_CMD_OUTPUT3_BUFFER_ENQ},
-		{VFE_CMD_JPEG_OUT_BUF_ENQ},
-		{VFE_CMD_RAW_OUT_BUF_ENQ},
-		{VFE_CMD_RAW_IN_BUF_ENQ},
-		{VFE_CMD_STATS_AF_ENQ},
-	{VFE_CMD_STATS_AE_ENQ},
-		{VFE_CMD_STATS_AWB_ENQ},
-		{VFE_CMD_STATS_RS_ENQ},
-		{VFE_CMD_STATS_CS_ENQ},
-		{VFE_CMD_STATS_SKIN_ENQ},
-	{VFE_CMD_STATS_IHIST_ENQ},
-		{VFE_CMD_DUMMY_8},
-		{VFE_CMD_JPEG_ENC_CFG},
-		{VFE_CMD_DUMMY_9},
-		{VFE_CMD_STATS_AF_START, V31_STATS_AF_LEN, V31_STATS_AF_OFF},
-	{VFE_CMD_STATS_AF_STOP},
-		{VFE_CMD_STATS_AE_START, V31_STATS_AE_LEN, V31_STATS_AE_OFF},
-		{VFE_CMD_STATS_AE_STOP},
-		{VFE_CMD_STATS_AWB_START, V31_STATS_AWB_LEN, V31_STATS_AWB_OFF},
-		{VFE_CMD_STATS_AWB_STOP},
-	{VFE_CMD_STATS_RS_START, V31_STATS_RS_LEN, V31_STATS_RS_OFF},
-		{VFE_CMD_STATS_RS_STOP},
-		{VFE_CMD_STATS_CS_START, V31_STATS_CS_LEN, V31_STATS_CS_OFF},
-		{VFE_CMD_STATS_CS_STOP},
-		{VFE_CMD_STATS_SKIN_START},
-	{VFE_CMD_STATS_SKIN_STOP},
-		{VFE_CMD_STATS_IHIST_START,
-		V31_STATS_IHIST_LEN, V31_STATS_IHIST_OFF},
-		{VFE_CMD_STATS_IHIST_STOP},
-		{VFE_CMD_DUMMY_10},
-		{VFE_CMD_SYNC_TIMER_SETTING, V31_SYNC_TIMER_LEN,
-			V31_SYNC_TIMER_OFF},
-	{VFE_CMD_ASYNC_TIMER_SETTING, V31_ASYNC_TIMER_LEN, V31_ASYNC_TIMER_OFF},
-		{VFE_CMD_LIVESHOT},
-		{VFE_CMD_LA_SETUP},
-		{VFE_CMD_LINEARIZATION_CFG},
-		{VFE_CMD_DEMOSAICV3},
-	{VFE_CMD_DEMOSAICV3_ABCC_CFG},
-	{VFE_CMD_DEMOSAICV3_DBCC_CFG},
-		{VFE_CMD_DEMOSAICV3_DBPC_CFG, V31_DEMOSAICV3_DBPC_LEN,
-			V31_DEMOSAICV3_DBPC_CFG_OFF},
-		{VFE_CMD_DEMOSAICV3_ABF_CFG, V31_DEMOSAICV3_ABF_LEN,
-			V31_DEMOSAICV3_ABF_OFF},
-		{VFE_CMD_DEMOSAICV3_ABCC_UPDATE},
-	{VFE_CMD_DEMOSAICV3_DBCC_UPDATE},
-		{VFE_CMD_DEMOSAICV3_DBPC_UPDATE, V31_DEMOSAICV3_DBPC_LEN,
-			V31_DEMOSAICV3_DBPC_CFG_OFF},
-		{VFE_CMD_XBAR_CFG},
-		{VFE_CMD_MODULE_CFG, V31_MODULE_CFG_LEN, V31_MODULE_CFG_OFF},
-		{VFE_CMD_ZSL},
-	{VFE_CMD_LINEARIZATION_UPDATE},
-		{VFE_CMD_DEMOSAICV3_ABF_UPDATE, V31_DEMOSAICV3_ABF_LEN,
-			V31_DEMOSAICV3_ABF_OFF},
-		{VFE_CMD_CLF_CFG},
-		{VFE_CMD_CLF_LUMA_UPDATE},
-		{VFE_CMD_CLF_CHROMA_UPDATE},
- {VFE_CMD_PCA_ROLL_OFF_CFG},
-		{VFE_CMD_PCA_ROLL_OFF_UPDATE},
-		{VFE_CMD_GET_REG_DUMP},
-		{VFE_CMD_GET_LINEARIZATON_TABLE},
-		{VFE_CMD_GET_MESH_ROLLOFF_TABLE},
- {VFE_CMD_GET_PCA_ROLLOFF_TABLE},
-		{VFE_CMD_GET_RGB_G_TABLE},
-		{VFE_CMD_GET_LA_TABLE},
-		{VFE_CMD_DEMOSAICV3_UPDATE},
-};
-
-uint32_t vfe31_AXI_WM_CFG[] = {
-	0x0000004C,
-	0x00000064,
-	0x0000007C,
-	0x00000094,
-	0x000000AC,
-	0x000000C4,
-	0x000000DC,
-};
-
-static const char * const vfe31_general_cmd[] = {
-	"DUMMY_0",  
-	"SET_CLK",
-	"RESET",
-	"START",
-	"TEST_GEN_START",
-	"OPERATION_CFG",  
-	"AXI_OUT_CFG",
-	"CAMIF_CFG",
-	"AXI_INPUT_CFG",
-	"BLACK_LEVEL_CFG",
-	"ROLL_OFF_CFG",  
-	"DEMUX_CFG",
-	"FOV_CFG",
-	"MAIN_SCALER_CFG",
-	"WB_CFG",
-	"COLOR_COR_CFG", 
-	"RGB_G_CFG",
-	"LA_CFG",
-	"CHROMA_EN_CFG",
-	"CHROMA_SUP_CFG",
-	"MCE_CFG", 
-	"SK_ENHAN_CFG",
-	"ASF_CFG",
-	"S2Y_CFG",
-	"S2CbCr_CFG",
-	"CHROMA_SUBS_CFG",  
-	"OUT_CLAMP_CFG",
-	"FRAME_SKIP_CFG",
-	"DUMMY_1",
-	"DUMMY_2",
-	"DUMMY_3",  
-	"UPDATE",
-	"BL_LVL_UPDATE",
-	"DEMUX_UPDATE",
-	"FOV_UPDATE",
-	"MAIN_SCALER_UPDATE",  
-	"WB_UPDATE",
-	"COLOR_COR_UPDATE",
-	"RGB_G_UPDATE",
-	"LA_UPDATE",
-	"CHROMA_EN_UPDATE",  
-	"CHROMA_SUP_UPDATE",
-	"MCE_UPDATE",
-	"SK_ENHAN_UPDATE",
-	"S2CbCr_UPDATE",
-	"S2Y_UPDATE",  
-	"ASF_UPDATE",
-	"FRAME_SKIP_UPDATE",
-	"CAMIF_FRAME_UPDATE",
-	"STATS_AF_UPDATE",
-	"STATS_AE_UPDATE",  
-	"STATS_AWB_UPDATE",
-	"STATS_RS_UPDATE",
-	"STATS_CS_UPDATE",
-	"STATS_SKIN_UPDATE",
-	"STATS_IHIST_UPDATE",  
-	"DUMMY_4",
-	"EPOCH1_ACK",
-	"EPOCH2_ACK",
-	"START_RECORDING",
-	"STOP_RECORDING",  
-	"DUMMY_5",
-	"DUMMY_6",
-	"CAPTURE",
-	"DUMMY_7",
-	"STOP",  
-	"GET_HW_VERSION",
-	"GET_FRAME_SKIP_COUNTS",
-	"OUTPUT1_BUFFER_ENQ",
-	"OUTPUT2_BUFFER_ENQ",
-	"OUTPUT3_BUFFER_ENQ",  
-	"JPEG_OUT_BUF_ENQ",
-	"RAW_OUT_BUF_ENQ",
-	"RAW_IN_BUF_ENQ",
-	"STATS_AF_ENQ",
-	"STATS_AE_ENQ",  
-	"STATS_AWB_ENQ",
-	"STATS_RS_ENQ",
-	"STATS_CS_ENQ",
-	"STATS_SKIN_ENQ",
-	"STATS_IHIST_ENQ",  
-	"DUMMY_8",
-	"JPEG_ENC_CFG",
-	"DUMMY_9",
-	"STATS_AF_START",
-	"STATS_AF_STOP",  
-	"STATS_AE_START",
-	"STATS_AE_STOP",
-	"STATS_AWB_START",
-	"STATS_AWB_STOP",
-	"STATS_RS_START",  
-	"STATS_RS_STOP",
-	"STATS_CS_START",
-	"STATS_CS_STOP",
-	"STATS_SKIN_START",
-	"STATS_SKIN_STOP",  
-	"STATS_IHIST_START",
-	"STATS_IHIST_STOP",
-	"DUMMY_10",
-	"SYNC_TIMER_SETTING",
-	"ASYNC_TIMER_SETTING",  
-	"LIVESHOT",
-	"LA_SETUP",
-	"LINEARIZATION_CFG",
-	"DEMOSAICV3",
-	"DEMOSAICV3_ABCC_CFG", 
-	"DEMOSAICV3_DBCC_CFG",
-	"DEMOSAICV3_DBPC_CFG",
-	"DEMOSAICV3_ABF_CFG",
-	"DEMOSAICV3_ABCC_UPDATE",
-	"DEMOSAICV3_DBCC_UPDATE", 
-	"DEMOSAICV3_DBPC_UPDATE",
-	"XBAR_CFG",
-	"EZTUNE_CFG",
-	"V31_ZSL",
-	"LINEARIZATION_UPDATE", 
-	"DEMOSAICV3_ABF_UPDATE",
-	"CLF_CFG",
-	"CLF_LUMA_UPDATE",
-	"CLF_CHROMA_UPDATE",
-	"PCA_ROLL_OFF_CFG", 
-	"PCA_ROLL_OFF_UPDATE",
-	"GET_REG_DUMP",
-	"GET_LINEARIZATON_TABLE",
-	"GET_MESH_ROLLOFF_TABLE",
-	"GET_PCA_ROLLOFF_TABLE", 
-	"GET_RGB_G_TABLE",
-	"GET_LA_TABLE",
-	"DEMOSAICV3_UPDATE",
-	"CAPTURE_RAW",
-	"STOP_LIVESHOT" 
-};
-
-static void vfe31_stop(void)
-{
-	uint8_t  axiBusyFlag = true;
-	unsigned long flags;
-
-	if (atomic_read(&vfe31_ctrl->vstate) == 0) {
-		pr_info("[CAM] vfe31_stop VFE_STATE_IDLE\n");
-		return;
-	}
-	atomic_set(&vfe31_ctrl->vstate, 0);
-
-	
-	spin_lock_irqsave(&vfe31_ctrl->stop_flag_lock, flags);
-	vfe31_ctrl->stop_ack_pending = TRUE;
-	spin_unlock_irqrestore(&vfe31_ctrl->stop_flag_lock, flags);
-
-	
-	msm_io_w(VFE_DISABLE_ALL_IRQS,
-		vfe31_ctrl->vfebase + VFE_IRQ_MASK_0);
-	msm_io_w(VFE_DISABLE_ALL_IRQS,
-		vfe31_ctrl->vfebase + VFE_IRQ_MASK_1);
-
-	
-	msm_io_w(VFE_CLEAR_ALL_IRQS,
-		vfe31_ctrl->vfebase + VFE_IRQ_CLEAR_0);
-	msm_io_w(VFE_CLEAR_ALL_IRQS,
-		vfe31_ctrl->vfebase + VFE_IRQ_CLEAR_1);
-	msm_io_w_mb(1,
-		vfe31_ctrl->vfebase + VFE_IRQ_CMD);
-
-	msm_io_w(CAMIF_COMMAND_STOP_IMMEDIATELY,
-		vfe31_ctrl->vfebase + VFE_CAMIF_COMMAND);
-	wmb();
-	
-	msm_io_w(AXI_HALT,
-		vfe31_ctrl->vfebase + VFE_AXI_CMD);
-	wmb();
-
-	while (axiBusyFlag) {
-		if (msm_io_r(vfe31_ctrl->vfebase + VFE_AXI_STATUS) & 0x1)
-			axiBusyFlag = false;
-	}
-
-	msm_io_w_mb(AXI_HALT_CLEAR,
-		vfe31_ctrl->vfebase + VFE_AXI_CMD);
-
-	
-	msm_io_w(0xf0000000,
-		vfe31_ctrl->vfebase + VFE_IRQ_MASK_0);
-	msm_io_w(VFE_IMASK_WHILE_STOPPING_1,
-		vfe31_ctrl->vfebase + VFE_IRQ_MASK_1);
-
-	msm_io_w_mb(VFE_RESET_UPON_STOP_CMD,
-		vfe31_ctrl->vfebase + VFE_GLOBAL_RESET);
-}
-
-void try_vfe_stop(void)
-{
-	if (atomic_read(&vfe31_ctrl->vstate)) {
-		pr_info("force stop vfe31\n");
-		vfe31_stop();
-	}
-
-}
-
-static void vfe31_subdev_notify(int id, int path)
-{
-	struct msm_vfe_resp rp;
-	unsigned long flags;
-	spin_lock_irqsave(&vfe31_ctrl->sd_notify_lock, flags);
-	memset(&rp, 0, sizeof(struct msm_vfe_resp));
-	CDBG("vfe31_subdev_notify : msgId = %d\n", id);
-	rp.evt_msg.type   = MSM_CAMERA_MSG;
-	rp.evt_msg.msg_id = path;
-	rp.type	   = id;
-	v4l2_subdev_notify(&vfe31_ctrl->subdev, NOTIFY_VFE_BUF_EVT, &rp);
-	spin_unlock_irqrestore(&vfe31_ctrl->sd_notify_lock, flags);
-}
-
-static int vfe31_config_axi(int mode, uint32_t *ao)
-{
-	uint32_t *ch_info;
-	uint32_t *axi_cfg = ao+V31_AXI_RESERVED;
-	
-	ch_info = axi_cfg + V31_AXI_CFG_LEN;
-	vfe31_ctrl->outpath.out0.ch0 = 0x0000FFFF & *ch_info;
-	vfe31_ctrl->outpath.out0.ch1 = 0x0000FFFF & (*ch_info++ >> 16);
-	vfe31_ctrl->outpath.out0.ch2 = 0x0000FFFF & *ch_info++;
-	vfe31_ctrl->outpath.out1.ch0 = 0x0000FFFF & *ch_info;
-	vfe31_ctrl->outpath.out1.ch1 = 0x0000FFFF & (*ch_info++ >> 16);
-	vfe31_ctrl->outpath.out1.ch2 = 0x0000FFFF & *ch_info++;
-	vfe31_ctrl->outpath.out2.ch0 = 0x0000FFFF & *ch_info;
-	vfe31_ctrl->outpath.out2.ch1 = 0x0000FFFF & (*ch_info++ >> 16);
-	vfe31_ctrl->outpath.out2.ch2 = 0x0000FFFF & *ch_info++;
-
-	switch (mode) {
-	case OUTPUT_PRIM:
-		vfe31_ctrl->outpath.output_mode =
-			VFE31_OUTPUT_MODE_PRIMARY;
-		break;
-	case OUTPUT_PRIM_ALL_CHNLS:
-		vfe31_ctrl->outpath.output_mode =
-			VFE31_OUTPUT_MODE_PRIMARY_ALL_CHNLS;
-		break;
-	case OUTPUT_PRIM|OUTPUT_SEC:
-		vfe31_ctrl->outpath.output_mode =
-			VFE31_OUTPUT_MODE_PRIMARY;
-		vfe31_ctrl->outpath.output_mode |=
-			VFE31_OUTPUT_MODE_SECONDARY;
-		break;
-	case OUTPUT_PRIM|OUTPUT_SEC_ALL_CHNLS:
-		vfe31_ctrl->outpath.output_mode =
-			VFE31_OUTPUT_MODE_PRIMARY;
-		vfe31_ctrl->outpath.output_mode |=
-			VFE31_OUTPUT_MODE_SECONDARY_ALL_CHNLS;
-		break;
-	case OUTPUT_PRIM_ALL_CHNLS|OUTPUT_SEC:
-		vfe31_ctrl->outpath.output_mode =
-			VFE31_OUTPUT_MODE_PRIMARY_ALL_CHNLS;
-		vfe31_ctrl->outpath.output_mode |=
-			VFE31_OUTPUT_MODE_SECONDARY;
-		break;
-	default:
-		pr_err("%s Invalid AXI mode %d ", __func__, mode);
-		return -EINVAL;
-	}
-
-	msm_io_memcpy(vfe31_ctrl->vfebase +
-		vfe31_cmd[VFE_CMD_AXI_OUT_CFG].offset, axi_cfg,
-		vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length - V31_AXI_CH_INF_LEN -
-				  V31_AXI_RESERVED);
-	return 0;
-}
-
-static void vfe31_reset_internal_variables(void)
-{
-	unsigned long flags;
-	vfe31_ctrl->vfeImaskCompositePacked = 0;
-	
-	vfe31_ctrl->start_ack_pending = FALSE;
-	atomic_set(&irq_cnt, 0);
-
-	spin_lock_irqsave(&vfe31_ctrl->stop_flag_lock, flags);
-	vfe31_ctrl->stop_ack_pending  = FALSE;
-	spin_unlock_irqrestore(&vfe31_ctrl->stop_flag_lock, flags);
-
-	vfe31_ctrl->reset_ack_pending  = FALSE;
-
-	spin_lock_irqsave(&vfe31_ctrl->update_ack_lock, flags);
-	vfe31_ctrl->update_ack_pending = FALSE;
-	spin_unlock_irqrestore(&vfe31_ctrl->update_ack_lock, flags);
-
-	vfe31_ctrl->recording_state = VFE_STATE_IDLE;
-	vfe31_ctrl->liveshot_state = VFE_STATE_IDLE;
-
-	atomic_set(&vfe31_ctrl->vstate, 0);
-
-	
-	vfe31_ctrl->operation_mode = 0;
-	vfe31_ctrl->outpath.output_mode = 0;
-	vfe31_ctrl->vfe_capture_count = 0;
-
-	
-	vfe31_ctrl->vfeFrameId = 0;
-	
-	memset(&(vfe31_ctrl->afStatsControl), 0,
-		sizeof(struct vfe_stats_control));
-
-	memset(&(vfe31_ctrl->awbStatsControl), 0,
-		sizeof(struct vfe_stats_control));
-
-	memset(&(vfe31_ctrl->aecStatsControl), 0,
-		sizeof(struct vfe_stats_control));
-
-	memset(&(vfe31_ctrl->ihistStatsControl), 0,
-		sizeof(struct vfe_stats_control));
-
-	memset(&(vfe31_ctrl->rsStatsControl), 0,
-		sizeof(struct vfe_stats_control));
-
-	memset(&(vfe31_ctrl->csStatsControl), 0,
-		sizeof(struct vfe_stats_control));
-
-	vfe31_ctrl->frame_skip_cnt = 31;
-	vfe31_ctrl->frame_skip_pattern = 0xffffffff;
-	vfe31_ctrl->snapshot_frame_cnt = 0;
-}
-
-static void vfe31_reset(void)
-{
-	vfe31_reset_internal_variables();
-	msm_io_w(VFE_DISABLE_ALL_IRQS,
-		vfe31_ctrl->vfebase + VFE_IRQ_MASK_0);
-
-	msm_io_w(VFE_DISABLE_ALL_IRQS,
-		vfe31_ctrl->vfebase + VFE_IRQ_MASK_1);
-
-	
-	msm_io_w(VFE_CLEAR_ALL_IRQS, vfe31_ctrl->vfebase + VFE_IRQ_CLEAR_0);
-	msm_io_w(VFE_CLEAR_ALL_IRQS, vfe31_ctrl->vfebase + VFE_IRQ_CLEAR_1);
-
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_IRQ_CMD);
-
-	
-	msm_io_w(VFE_IMASK_WHILE_STOPPING_1,
-	vfe31_ctrl->vfebase + VFE_IRQ_MASK_1);
-
-
-	msm_io_w_mb(VFE_RESET_UPON_RESET_CMD,
-		vfe31_ctrl->vfebase + VFE_GLOBAL_RESET);
-}
-
-static int vfe31_operation_config(uint32_t *cmd)
-{
-	uint32_t *p = cmd;
-
-	vfe31_ctrl->operation_mode = *p;
-	vfe31_ctrl->stats_comp = *(++p);
-	vfe31_ctrl->hfr_mode = *(++p);
-
-	msm_io_w(*(++p), vfe31_ctrl->vfebase + VFE_CFG);
-	msm_io_w(*(++p), vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-	msm_io_w(*(++p), vfe31_ctrl->vfebase + VFE_REALIGN_BUF);
-	msm_io_w(*(++p), vfe31_ctrl->vfebase + VFE_CHROMA_UP);
-	msm_io_w(*(++p), vfe31_ctrl->vfebase + VFE_STATS_CFG);
-	return 0;
-}
-
-static uint32_t vfe_stats_awb_buf_init(struct vfe_cmd_stats_buf *in)
-{
-	uint32_t *ptr = in->statsBuf;
-	uint32_t addr;
-
-	addr = ptr[0];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_AWB_WR_PING_ADDR);
-	addr = ptr[1];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_AWB_WR_PONG_ADDR);
-	vfe31_ctrl->awbStatsControl.nextFrameAddrBuf = in->statsBuf[2];
-	return 0;
-}
-
-static uint32_t vfe_stats_aec_buf_init(struct vfe_cmd_stats_buf *in)
-{
-	uint32_t *ptr = in->statsBuf;
-	uint32_t addr;
-
-	addr = ptr[0];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_AEC_WR_PING_ADDR);
-	addr = ptr[1];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_AEC_WR_PONG_ADDR);
-
-	vfe31_ctrl->aecStatsControl.nextFrameAddrBuf = in->statsBuf[2];
-	return 0;
-}
-
-static uint32_t vfe_stats_af_buf_init(struct vfe_cmd_stats_buf *in)
-{
-	uint32_t *ptr = in->statsBuf;
-	uint32_t addr;
-
-	addr = ptr[0];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_AF_WR_PING_ADDR);
-	addr = ptr[1];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_AF_WR_PONG_ADDR);
-
-	vfe31_ctrl->afStatsControl.nextFrameAddrBuf = in->statsBuf[2];
-	return 0;
-}
-
-static uint32_t vfe_stats_ihist_buf_init(struct vfe_cmd_stats_buf *in)
-{
-	uint32_t *ptr = in->statsBuf;
-	uint32_t addr;
-
-	addr = ptr[0];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_HIST_WR_PING_ADDR);
-	addr = ptr[1];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_HIST_WR_PONG_ADDR);
-
-	vfe31_ctrl->ihistStatsControl.nextFrameAddrBuf = in->statsBuf[2];
-	return 0;
-}
-
-static uint32_t vfe_stats_rs_buf_init(struct vfe_cmd_stats_buf *in)
-{
-	uint32_t *ptr = in->statsBuf;
-	uint32_t addr;
-
-	addr = ptr[0];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_RS_WR_PING_ADDR);
-	addr = ptr[1];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_RS_WR_PONG_ADDR);
-
-	vfe31_ctrl->rsStatsControl.nextFrameAddrBuf = in->statsBuf[2];
-	return 0;
-}
-
-static uint32_t vfe_stats_cs_buf_init(struct vfe_cmd_stats_buf *in)
-{
-	uint32_t *ptr = in->statsBuf;
-	uint32_t addr;
-
-	addr = ptr[0];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_CS_WR_PING_ADDR);
-	addr = ptr[1];
-	msm_io_w(addr, vfe31_ctrl->vfebase + VFE_BUS_STATS_CS_WR_PONG_ADDR);
-
-	vfe31_ctrl->csStatsControl.nextFrameAddrBuf = in->statsBuf[2];
-	return 0;
-}
-
-#if VFE_REG_DUMP_FLAG
-static void msm_io_dump2(void __iomem *addr, int size)
-{
-	char line_str[BUFF_SIZE_128], *p_str;
-	int i;
-	u32 *p = (u32 *) addr;
-	u32 data;
-	CDBG("%s: %p %d\n", __func__, addr, size);
-	line_str[0] = '\0';
-	p_str = line_str;
-	for (i = 0; i < size/4; i++) {
-		if (i % 4 == 0) {
-			snprintf(p_str, 12, "%08x: ", (u32) p);
-			p_str += 10;
-		}
-		data = readl_relaxed(p++);
-		snprintf(p_str, 12, "%08x ", data);
-		p_str += 9;
-		if ((i + 1) % 4 == 0) {
-			CDBG("%s\n", line_str);
-			line_str[0] = '\0';
-			p_str = line_str;
-		}
-	}
-	if (line_str[0] != '\0')
-		CDBG("%s\n", line_str);
-}
-#endif
-
-static void vfe31_start_common(void)
-{
-	uint32_t irq_mask = 0x00E00021;
-	vfe31_ctrl->start_ack_pending = TRUE;
-	CDBG("VFE opertaion mode = 0x%x, output mode = 0x%x\n",
-		vfe31_ctrl->operation_mode, vfe31_ctrl->outpath.output_mode);
-	if (vfe31_ctrl->stats_comp)
-		irq_mask |= VFE_IRQ_STATUS0_STATS_COMPOSIT_MASK;
-	else
-		irq_mask |= 0x000FE000;
-
-	msm_io_w(irq_mask, vfe31_ctrl->vfebase + VFE_IRQ_MASK_0);
-	msm_io_w(VFE_IMASK_WHILE_STOPPING_1,
-		vfe31_ctrl->vfebase + VFE_IRQ_MASK_1);
-
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_CAMIF_COMMAND);
-
-#if VFE_REG_DUMP_FLAG
-	msm_io_dump2(vfe31_ctrl->vfebase, vfe31_ctrl->register_total*4);
-#endif
-	atomic_set(&vfe31_ctrl->vstate, 1);
-}
-
-static int vfe31_start_recording(struct msm_cam_media_controller *pmctl)
-{
-	msm_camio_bus_scale_cfg(
-		pmctl->sdata->pdata->cam_bus_scale_table, S_VIDEO);
-	vfe31_ctrl->recording_state = VFE_STATE_START_REQUESTED;
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-	return 0;
-}
-
-static int vfe31_stop_recording(struct msm_cam_media_controller *pmctl)
-{
-	vfe31_ctrl->recording_state = VFE_STATE_STOP_REQUESTED;
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-	msm_camio_bus_scale_cfg(
-		pmctl->sdata->pdata->cam_bus_scale_table, S_PREVIEW);
-	return 0;
-}
-
-static void vfe31_start_liveshot(struct msm_cam_media_controller *pmctl)
-{
-
-	
-	vfe31_ctrl->outpath.out0.capture_cnt = 1;
-	vfe31_ctrl->vfe_capture_count = vfe31_ctrl->outpath.out0.capture_cnt;
-
-	vfe31_ctrl->liveshot_state = VFE_STATE_START_REQUESTED;
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-}
-
-static int vfe31_zsl(struct msm_cam_media_controller *pmctl)
-{
-	uint32_t irq_comp_mask = 0;
-
-	
-	irq_comp_mask	=
-		msm_io_r(vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-
-	CDBG("%s:op mode %d O/P Mode %d\n", __func__,
-		vfe31_ctrl->operation_mode, vfe31_ctrl->outpath.output_mode);
-
-	if (vfe31_ctrl->outpath.output_mode & VFE31_OUTPUT_MODE_PRIMARY) {
-		irq_comp_mask |= ((0x1 << (vfe31_ctrl->outpath.out0.ch0)) |
-				(0x1 << (vfe31_ctrl->outpath.out0.ch1)));
-	} else if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_PRIMARY_ALL_CHNLS) {
-		irq_comp_mask |= ((0x1 << (vfe31_ctrl->outpath.out0.ch0)) |
-				(0x1 << (vfe31_ctrl->outpath.out0.ch1)) |
-				(0x1 << (vfe31_ctrl->outpath.out0.ch2)));
-	}
-
-	if (vfe31_ctrl->outpath.output_mode & VFE31_OUTPUT_MODE_SECONDARY) {
-		irq_comp_mask |= ((0x1 << (vfe31_ctrl->outpath.out1.ch0 + 8)) |
-				(0x1 << (vfe31_ctrl->outpath.out1.ch1 + 8)));
-	} else if (vfe31_ctrl->outpath.output_mode &
-			   VFE31_OUTPUT_MODE_SECONDARY_ALL_CHNLS) {
-		irq_comp_mask |= ((0x1 << (vfe31_ctrl->outpath.out1.ch0 + 8)) |
-				(0x1 << (vfe31_ctrl->outpath.out1.ch1 + 8)) |
-				(0x1 << (vfe31_ctrl->outpath.out1.ch2 + 8)));
-	}
-
-	if (vfe31_ctrl->outpath.output_mode & VFE31_OUTPUT_MODE_PRIMARY) {
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-	} else if (vfe31_ctrl->outpath.output_mode &
-				VFE31_OUTPUT_MODE_PRIMARY_ALL_CHNLS) {
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch2]);
-	}
-
-	if (vfe31_ctrl->outpath.output_mode & VFE31_OUTPUT_MODE_SECONDARY) {
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch0]);
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch1]);
-	} else if (vfe31_ctrl->outpath.output_mode &
-				VFE31_OUTPUT_MODE_SECONDARY_ALL_CHNLS) {
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch0]);
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch1]);
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch2]);
-	}
-
-	msm_io_w(irq_comp_mask, vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-	msm_camio_bus_scale_cfg(
-		pmctl->sdata->pdata->cam_bus_scale_table, S_ZSL);
-	vfe31_start_common();
-
-	msm_io_w(1, vfe31_ctrl->vfebase + 0x18C);
-	msm_io_w(1, vfe31_ctrl->vfebase + 0x188);
-	return 0;
-}
-static int vfe31_capture_raw(
-	struct msm_cam_media_controller *pmctl,
-	uint32_t num_frames_capture)
-{
-	uint32_t irq_comp_mask = 0;
-
-	vfe31_ctrl->outpath.out0.capture_cnt = num_frames_capture;
-	vfe31_ctrl->vfe_capture_count = num_frames_capture;
-
-	irq_comp_mask	=
-		msm_io_r(vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-
-	if (vfe31_ctrl->outpath.output_mode & VFE31_OUTPUT_MODE_PRIMARY) {
-		irq_comp_mask |= (0x1 << (vfe31_ctrl->outpath.out0.ch0));
-		msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-	}
-
-	msm_io_w(irq_comp_mask, vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-	msm_camio_bus_scale_cfg(
-		pmctl->sdata->pdata->cam_bus_scale_table, S_CAPTURE);
-	vfe31_start_common();
-	return 0;
-}
-
-static int vfe31_capture(
-	struct msm_cam_media_controller *pmctl,
-	uint32_t num_frames_capture)
-{
-	uint32_t irq_comp_mask = 0;
-	
-	vfe31_ctrl->outpath.out1.capture_cnt = num_frames_capture;
-	if (vfe31_ctrl->operation_mode == VFE_OUTPUTS_MAIN_AND_THUMB ||
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_MAIN
-#if 0
-		|| vfe31_ctrl->operation_mode == VFE_OUTPUTS_JPEG_AND_THUMB
-		|| vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_JPEG
-#endif
-		) {
-		vfe31_ctrl->outpath.out0.capture_cnt =
-			num_frames_capture;
-	}
-
-	vfe31_ctrl->vfe_capture_count = num_frames_capture;
-	irq_comp_mask	= msm_io_r(vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-
-	if (vfe31_ctrl->operation_mode == VFE_OUTPUTS_MAIN_AND_THUMB ||
-#if 0
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_JPEG_AND_THUMB ||
-#endif
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_MAIN) {
-		if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_PRIMARY) {
-			irq_comp_mask |= (0x1 << vfe31_ctrl->outpath.out0.ch0 |
-					0x1 << vfe31_ctrl->outpath.out0.ch1);
-		}
-		if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_SECONDARY) {
-			irq_comp_mask |=
-				(0x1 << (vfe31_ctrl->outpath.out1.ch0 + 8) |
-				0x1 << (vfe31_ctrl->outpath.out1.ch1 + 8));
-		}
-		if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_PRIMARY) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-				vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-				vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-		}
-		if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_SECONDARY) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-				vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-				vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch1]);
-		}
-	}
-
-	vfe31_ctrl->vfe_capture_count = num_frames_capture;
-
-	msm_io_w(irq_comp_mask, vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-	msm_io_r(vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-	msm_camio_bus_scale_cfg(
-		pmctl->sdata->pdata->cam_bus_scale_table, S_CAPTURE);
-
-	vfe31_start_common();
-	
-	msm_io_w(1, vfe31_ctrl->vfebase + 0x18C);
-	msm_io_w(1, vfe31_ctrl->vfebase + 0x188);
-	return 0;
-}
-
-static int vfe31_start(struct msm_cam_media_controller *pmctl)
-{
-	uint32_t irq_comp_mask = 0;
-
-	irq_comp_mask	=
-		msm_io_r(vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-
-	if (vfe31_ctrl->outpath.output_mode & VFE31_OUTPUT_MODE_PRIMARY) {
-		irq_comp_mask |= (0x1 << vfe31_ctrl->outpath.out0.ch0 |
-			0x1 << vfe31_ctrl->outpath.out0.ch1);
-	} else if (vfe31_ctrl->outpath.output_mode &
-			   VFE31_OUTPUT_MODE_PRIMARY_ALL_CHNLS) {
-		irq_comp_mask |= (0x1 << vfe31_ctrl->outpath.out0.ch0 |
-			0x1 << vfe31_ctrl->outpath.out0.ch1 |
-			0x1 << vfe31_ctrl->outpath.out0.ch2);
-	}
-	if (vfe31_ctrl->outpath.output_mode & VFE31_OUTPUT_MODE_SECONDARY) {
-		irq_comp_mask |= (0x1 << (vfe31_ctrl->outpath.out1.ch0 + 8) |
-			0x1 << (vfe31_ctrl->outpath.out1.ch1 + 8));
-	} else if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_SECONDARY_ALL_CHNLS) {
-		irq_comp_mask |= (0x1 << (vfe31_ctrl->outpath.out1.ch0 + 8) |
-			0x1 << (vfe31_ctrl->outpath.out1.ch1 + 8) |
-			0x1 << (vfe31_ctrl->outpath.out1.ch2 + 8));
-	}
-	msm_io_w(irq_comp_mask, vfe31_ctrl->vfebase + VFE_IRQ_COMP_MASK);
-
-	switch (vfe31_ctrl->operation_mode) {
-	case VFE_OUTPUTS_PREVIEW:
-	case VFE_OUTPUTS_PREVIEW_AND_VIDEO:
-		if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_PRIMARY) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-		} else if (vfe31_ctrl->outpath.output_mode &
-				VFE31_OUTPUT_MODE_PRIMARY_ALL_CHNLS) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch2]);
-		}
-		break;
-	default:
-		if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_SECONDARY) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch1]);
-		} else if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_SECONDARY_ALL_CHNLS) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch1]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch2]);
-		}
-		break;
-	}
-
-	msm_camio_bus_scale_cfg(
-		pmctl->sdata->pdata->cam_bus_scale_table, S_PREVIEW);
-	vfe31_start_common();
-	return 0;
-}
-
-static void vfe31_update(void)
-{
-	unsigned long flags;
-
-	if (vfe31_ctrl->update_la) {
-		if (!msm_io_r(vfe31_ctrl->vfebase + V31_LA_OFF))
-			msm_io_w(1,
-				vfe31_ctrl->vfebase + V31_LA_OFF);
-		else
-			msm_io_w(0,
-				vfe31_ctrl->vfebase + V31_LA_OFF);
-		vfe31_ctrl->update_la = false;
-	}
-
-	if (vfe31_ctrl->update_gamma) {
-		if (!msm_io_r(vfe31_ctrl->vfebase + V31_RGB_G_OFF))
-			msm_io_w(7, vfe31_ctrl->vfebase+V31_RGB_G_OFF);
-		else
-			msm_io_w(0, vfe31_ctrl->vfebase+V31_RGB_G_OFF);
-		vfe31_ctrl->update_gamma = false;
-	}
-
-	spin_lock_irqsave(&vfe31_ctrl->update_ack_lock, flags);
-	vfe31_ctrl->update_ack_pending = TRUE;
-	spin_unlock_irqrestore(&vfe31_ctrl->update_ack_lock, flags);
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-	return;
-}
-
-static void vfe31_sync_timer_stop(void)
-{
-	uint32_t value = 0;
-	vfe31_ctrl->sync_timer_state = 0;
-	if (vfe31_ctrl->sync_timer_number == 0)
-		value = 0x10000;
-	else if (vfe31_ctrl->sync_timer_number == 1)
-		value = 0x20000;
-	else if (vfe31_ctrl->sync_timer_number == 2)
-		value = 0x40000;
-
-	
-	msm_io_w(value, vfe31_ctrl->vfebase + V31_SYNC_TIMER_OFF);
-}
-
-static void vfe31_sync_timer_start(const uint32_t *tbl)
-{
-	
-	uint32_t value = 1;
-	uint32_t val;
-
-	vfe31_ctrl->sync_timer_state = *tbl++;
-	vfe31_ctrl->sync_timer_repeat_count = *tbl++;
-	vfe31_ctrl->sync_timer_number = *tbl++;
-	CDBG("%s timer_state %d, repeat_cnt %d timer number %d\n",
-		 __func__, vfe31_ctrl->sync_timer_state,
-		 vfe31_ctrl->sync_timer_repeat_count,
-		 vfe31_ctrl->sync_timer_number);
-
-	if (vfe31_ctrl->sync_timer_state) { 
-		value = value << vfe31_ctrl->sync_timer_number;
-	} else { 
-		CDBG("Failed to Start timer\n");
-		return;
-	}
-
-	
-	msm_io_w(value, vfe31_ctrl->vfebase + V31_SYNC_TIMER_OFF);
-	
-	value = *tbl++;
-	msm_io_w(value, vfe31_ctrl->vfebase + V31_SYNC_TIMER_OFF +
-		4 + ((vfe31_ctrl->sync_timer_number) * 12));
-	
-	value = *tbl++;
-	msm_io_w(value, vfe31_ctrl->vfebase + V31_SYNC_TIMER_OFF +
-			 8 + ((vfe31_ctrl->sync_timer_number) * 12));
-	
-	value = *tbl++;
-	val = vfe_clk_rate / 10000;
-	val = 10000000 / val;
-	val = value * 10000 / val;
-	CDBG("%s: Pixel Clk Cycles!!! %d\n", __func__, val);
-	msm_io_w(val, vfe31_ctrl->vfebase + V31_SYNC_TIMER_OFF +
-		12 + ((vfe31_ctrl->sync_timer_number) * 12));
-	
-	value = *tbl++;
-	msm_io_w(value, vfe31_ctrl->vfebase + V31_SYNC_TIMER_POLARITY_OFF);
-	
-	value = 0;
-	msm_io_w(value, vfe31_ctrl->vfebase + V31_TIMER_SELECT_OFF);
-}
-
-static void vfe31_program_dmi_cfg(enum VFE31_DMI_RAM_SEL bankSel)
-{
-	
-	uint32_t value = VFE_DMI_CFG_DEFAULT;
-	value += (uint32_t)bankSel;
-	CDBG("%s: banksel = %d\n", __func__, bankSel);
-
-	msm_io_w(value, vfe31_ctrl->vfebase + VFE_DMI_CFG);
-	
-	msm_io_w(0, vfe31_ctrl->vfebase + VFE_DMI_ADDR);
-}
-static void vfe31_write_gamma_cfg(enum VFE31_DMI_RAM_SEL channel_sel,
-						const uint32_t *tbl)
-{
-	int i;
-	uint32_t value, value1, value2;
-	vfe31_program_dmi_cfg(channel_sel);
-	for (i = 0 ; i < (VFE31_GAMMA_NUM_ENTRIES/2) ; i++) {
-		value = *tbl++;
-		value1 = value & 0x0000FFFF;
-		value2 = (value & 0xFFFF0000)>>16;
-		msm_io_w((value1), vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-		msm_io_w((value2), vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-	}
-	vfe31_program_dmi_cfg(NO_MEM_SELECTED);
-}
-
-static void vfe31_read_gamma_cfg(enum VFE31_DMI_RAM_SEL channel_sel,
-	uint32_t *tbl)
-{
-	int i;
-	vfe31_program_dmi_cfg(channel_sel);
-	CDBG("%s: Gamma table channel: %d\n", __func__, channel_sel);
-	for (i = 0 ; i < VFE31_GAMMA_NUM_ENTRIES ; i++) {
-		*tbl = msm_io_r(vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-		CDBG("%s: %08x\n", __func__, *tbl);
-		tbl++;
-	}
-	vfe31_program_dmi_cfg(NO_MEM_SELECTED);
-}
-
-static void vfe31_write_la_cfg(enum VFE31_DMI_RAM_SEL channel_sel,
-						const uint32_t *tbl)
-{
-	uint32_t i;
-	uint32_t value, value1, value2;
-
-	vfe31_program_dmi_cfg(channel_sel);
-	for (i = 0 ; i < (VFE31_LA_TABLE_LENGTH/2) ; i++) {
-		value = *tbl++;
-		value1 = value & 0x0000FFFF;
-		value2 = (value & 0xFFFF0000)>>16;
-		msm_io_w((value1), vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-		msm_io_w((value2), vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-	}
-	vfe31_program_dmi_cfg(NO_MEM_SELECTED);
-}
-
-static struct vfe31_output_ch *vfe31_get_ch(int path)
-{
-	struct vfe31_output_ch *ch = NULL;
-
-	if (path == VFE_MSG_OUTPUT_PRIMARY)
-		ch = &vfe31_ctrl->outpath.out0;
-	else if (path == VFE_MSG_OUTPUT_SECONDARY)
-		ch = &vfe31_ctrl->outpath.out1;
-	else
-		pr_err("%s: Invalid path %d\n", __func__,
-			path);
-
-	BUG_ON(ch == NULL);
-	return ch;
-}
-static struct msm_free_buf *vfe31_check_free_buffer(int id, int path)
-{
-	struct vfe31_output_ch *outch = NULL;
-	struct msm_free_buf *b = NULL;
-	vfe31_subdev_notify(id, path);
-	outch = vfe31_get_ch(path);
-	if (outch->free_buf.ch_paddr[0])
-		b = &outch->free_buf;
-	return b;
-}
-static int vfe31_configure_pingpong_buffers(int id, int path)
-{
-	struct vfe31_output_ch *outch = NULL;
-	int rc = 0;
-	vfe31_subdev_notify(id, path);
-	outch = vfe31_get_ch(path);
-	if (outch->ping.ch_paddr[0] && outch->pong.ch_paddr[0]) {
-		
-		CDBG("%s Configure ping/pong address for %d",
-						__func__, path);
-		vfe31_put_ch_ping_addr(outch->ch0,
-			outch->ping.ch_paddr[0]);
-		vfe31_put_ch_pong_addr(outch->ch0,
-			outch->pong.ch_paddr[0]);
-
-		if (vfe31_ctrl->operation_mode !=
-			VFE_OUTPUTS_RAW) {
-			vfe31_put_ch_ping_addr(outch->ch1,
-				outch->ping.ch_paddr[1]);
-			vfe31_put_ch_pong_addr(outch->ch1,
-				outch->pong.ch_paddr[1]);
-		}
-
-		if (outch->ping.num_planes > 2)
-			vfe31_put_ch_ping_addr(outch->ch2,
-				outch->ping.ch_paddr[2]);
-		if (outch->pong.num_planes > 2)
-			vfe31_put_ch_pong_addr(outch->ch2,
-				outch->pong.ch_paddr[2]);
-
-		
-		memset(&outch->ping, 0, sizeof(struct msm_free_buf));
-		memset(&outch->pong, 0, sizeof(struct msm_free_buf));
-	} else {
-		pr_err("%s ping/pong addr is null!!", __func__);
-		rc = -EINVAL;
-	}
-	return rc;
-}
-
-static void vfe31_send_isp_msg(struct vfe31_ctrl_type *vctrl,
-	uint32_t isp_msg_id)
-{
-	struct isp_msg_event isp_msg_evt;
-
-	isp_msg_evt.msg_id = isp_msg_id;
-	isp_msg_evt.sof_count = vfe31_ctrl->vfeFrameId;
-	v4l2_subdev_notify(&vctrl->subdev,
-		NOTIFY_ISP_MSG_EVT, (void *)&isp_msg_evt);
-}
-
-static int vfe31_proc_general(
-	struct msm_cam_media_controller *pmctl,
-	struct msm_isp_cmd *cmd)
-{
-	int i , rc = 0;
-	uint32_t old_val = 0 , new_val = 0;
-	uint32_t *cmdp = NULL;
-	uint32_t *cmdp_local = NULL;
-	uint32_t snapshot_cnt = 0;
-	uint32_t temp1 = 0, temp2 = 0;
-
-	CDBG("vfe31_proc_general: cmdID = %s, length = %d\n",
-		vfe31_general_cmd[cmd->id], cmd->length);
-	switch (cmd->id) {
-	case VFE_CMD_RESET:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		vfe31_reset();
-		break;
-	case VFE_CMD_START:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		if ((vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_PREVIEW_AND_VIDEO) ||
-				(vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_PREVIEW))
-			
-			rc = vfe31_configure_pingpong_buffers(
-				VFE_MSG_V31_START, VFE_MSG_OUTPUT_PRIMARY);
-		else
-			
-			rc = vfe31_configure_pingpong_buffers(
-				VFE_MSG_V31_START, VFE_MSG_OUTPUT_SECONDARY);
-		if (rc < 0) {
-			pr_err("%s error configuring pingpong buffers"
-				   " for preview", __func__);
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		rc = vfe31_start(pmctl);
-		break;
-	case VFE_CMD_UPDATE:
-		vfe31_update();
-		break;
-	case VFE_CMD_CAPTURE_RAW:
-		pr_info("[CAM] %s: cmdID = VFE_CMD_CAPTURE_RAW\n", __func__);
-		if (copy_from_user(&snapshot_cnt, (void __user *)(cmd->value),
-				sizeof(uint32_t))) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		rc = vfe31_configure_pingpong_buffers(VFE_MSG_V31_CAPTURE,
-							VFE_MSG_OUTPUT_PRIMARY);
-		if (rc < 0) {
-			pr_err("%s error configuring pingpong buffers"
-				   " for snapshot", __func__);
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		rc = vfe31_capture_raw(pmctl, snapshot_cnt);
-		break;
-	case VFE_CMD_CAPTURE:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		if (copy_from_user(&snapshot_cnt, (void __user *)(cmd->value),
-				sizeof(uint32_t))) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-#if 0
-		if (vfe31_ctrl->operation_mode == VFE_OUTPUTS_JPEG_AND_THUMB ||
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_JPEG) {
-			if (snapshot_cnt != 1) {
-				pr_err("only support 1 inline snapshot\n");
-				rc = -EINVAL;
-				goto proc_general_done;
-			}
-			
-			rc = vfe31_configure_pingpong_buffers(
-				VFE_MSG_V31_JPEG_CAPTURE,
-				VFE_MSG_OUTPUT_PRIMARY);
-		} else {
-#endif
-			
-			rc = vfe31_configure_pingpong_buffers(
-				VFE_MSG_V31_CAPTURE,
-				VFE_MSG_OUTPUT_PRIMARY);
-		if (rc < 0) {
-			pr_err("%s error configuring pingpong buffers"
-				   " for primary output", __func__);
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		
-		rc = vfe31_configure_pingpong_buffers(VFE_MSG_V31_CAPTURE,
-						  VFE_MSG_OUTPUT_SECONDARY);
-		if (rc < 0) {
-			pr_err("%s error configuring pingpong buffers"
-				   " for secondary output", __func__);
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		rc = vfe31_capture(pmctl, snapshot_cnt);
-		break;
-	case VFE_CMD_START_RECORDING:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		if (vfe31_ctrl->operation_mode ==
-			VFE_OUTPUTS_PREVIEW_AND_VIDEO)
-			rc = vfe31_configure_pingpong_buffers(
-				VFE_MSG_V31_START_RECORDING,
-				VFE_MSG_OUTPUT_SECONDARY);
-		else if (vfe31_ctrl->operation_mode ==
-			VFE_OUTPUTS_VIDEO_AND_PREVIEW)
-			rc = vfe31_configure_pingpong_buffers(
-				VFE_MSG_V31_START_RECORDING,
-				VFE_MSG_OUTPUT_PRIMARY);
-		if (rc < 0) {
-			pr_err("%s error configuring pingpong buffers"
-				" for video", __func__);
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		rc = vfe31_start_recording(pmctl);
-		break;
-	case VFE_CMD_STOP_RECORDING:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		rc = vfe31_stop_recording(pmctl);
-		break;
-	case VFE_CMD_OPERATION_CFG: {
-		if (cmd->length != V31_OPERATION_CFG_LEN) {
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		cmdp = kmalloc(V31_OPERATION_CFG_LEN, GFP_ATOMIC);
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			V31_OPERATION_CFG_LEN)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		rc = vfe31_operation_config(cmdp);
-		}
-		break;
-
-	case VFE_CMD_STATS_AE_START: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val |= AE_BG_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-		cmdp, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-	case VFE_CMD_STATS_AF_START: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val |= AF_BF_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-		cmdp, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-	case VFE_CMD_STATS_AWB_START: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val |= AWB_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-				cmdp, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-
-	case VFE_CMD_STATS_IHIST_START: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val |= IHIST_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-				cmdp, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-
-
-	case VFE_CMD_STATS_RS_START: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-				cmdp, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-
-	case VFE_CMD_STATS_CS_START: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-				cmdp, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-
-	case VFE_CMD_MCE_UPDATE:
-	case VFE_CMD_MCE_CFG:{
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		old_val = msm_io_r(vfe31_ctrl->vfebase +
-			V31_CHROMA_SUP_OFF + 4);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		new_val = *cmdp_local;
-		old_val &= MCE_EN_MASK;
-		new_val = new_val | old_val;
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_CHROMA_SUP_OFF + 4,
-			&new_val, 4);
-		cmdp_local += 1;
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase +
-			V31_CHROMA_SUP_OFF + 8);
-		new_val = *cmdp_local;
-		old_val &= MCE_Q_K_MASK;
-		new_val = new_val | old_val;
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_CHROMA_SUP_OFF + 8,
-		&new_val, 4);
-		cmdp_local += 1;
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-		cmdp_local, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-	case VFE_CMD_CHROMA_SUP_UPDATE:
-	case VFE_CMD_CHROMA_SUP_CFG:{
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_CHROMA_SUP_OFF,
-			cmdp_local, 4);
-
-		cmdp_local += 1;
-		new_val = *cmdp_local;
-		old_val = msm_io_r(vfe31_ctrl->vfebase +
-			V31_CHROMA_SUP_OFF + 4);
-		old_val &= ~MCE_EN_MASK;
-		new_val = new_val | old_val;
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_CHROMA_SUP_OFF + 4,
-			&new_val, 4);
-		cmdp_local += 1;
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase +
-			V31_CHROMA_SUP_OFF + 8);
-		new_val = *cmdp_local;
-		old_val &= ~MCE_Q_K_MASK;
-		new_val = new_val | old_val;
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_CHROMA_SUP_OFF + 8,
-			&new_val, 4);
-		}
-		break;
-
-	case VFE_CMD_MESH_ROLL_OFF_CFG: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value) , cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-		cmdp_local, 16);
-		cmdp_local += 4;
-		vfe31_program_dmi_cfg(ROLLOFF_RAM);
-		
-		for (i = 0; i < (V31_MESH_ROLL_OFF_INIT_TABLE_SIZE * 2); i++) {
-			msm_io_w(*cmdp_local ,
-			vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-			cmdp_local++;
-		}
-		CDBG("done writing init table\n");
-		
-		msm_io_w(V31_MESH_ROLL_OFF_DELTA_TABLE_OFFSET,
-		vfe31_ctrl->vfebase + VFE_DMI_ADDR);
-		
-		for (i = 0; i < (V31_MESH_ROLL_OFF_DELTA_TABLE_SIZE * 2); i++) {
-			msm_io_w(*cmdp_local,
-			vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-			cmdp_local++;
-		}
-		vfe31_program_dmi_cfg(NO_MEM_SELECTED);
-		}
-		break;
-
-	case VFE_CMD_GET_MESH_ROLLOFF_TABLE:
-		temp1 = sizeof(uint32_t) * ((V31_MESH_ROLL_OFF_INIT_TABLE_SIZE *
-			2) + (V31_MESH_ROLL_OFF_DELTA_TABLE_SIZE * 2));
-		if (cmd->length != temp1) {
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		cmdp = kzalloc(temp1, GFP_KERNEL);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		vfe31_program_dmi_cfg(ROLLOFF_RAM);
-		CDBG("%s: Mesh Rolloff init Table\n", __func__);
-		for (i = 0; i < (V31_MESH_ROLL_OFF_INIT_TABLE_SIZE * 2); i++) {
-			*cmdp_local =
-				msm_io_r(vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-			CDBG("%s: %08x\n", __func__, *cmdp_local);
-			cmdp_local++;
-		}
-		msm_io_w(V31_MESH_ROLL_OFF_DELTA_TABLE_OFFSET,
-			vfe31_ctrl->vfebase + VFE_DMI_ADDR);
-		CDBG("%s: Mesh Rolloff Delta Table\n", __func__);
-		for (i = 0; i < (V31_MESH_ROLL_OFF_DELTA_TABLE_SIZE * 2); i++) {
-			*cmdp_local =
-				msm_io_r(vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-			CDBG("%s: %08x\n", __func__, *cmdp_local);
-			cmdp_local++;
-		}
-		CDBG("done reading delta table\n");
-		vfe31_program_dmi_cfg(NO_MEM_SELECTED);
-		if (copy_to_user((void __user *)(cmd->value), cmdp,
-			temp1)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		break;
-	case VFE_CMD_LA_CFG:
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-			cmdp_local, (vfe31_cmd[cmd->id].length));
-
-		cmdp_local += 1;
-		vfe31_write_la_cfg(LUMA_ADAPT_LUT_RAM_BANK0, cmdp_local);
-		break;
-
-	case VFE_CMD_LA_UPDATE: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-
-		cmdp_local = cmdp + 1;
-		old_val = msm_io_r(vfe31_ctrl->vfebase + V31_LA_OFF);
-		if (old_val != 0x0)
-			vfe31_write_la_cfg(LUMA_ADAPT_LUT_RAM_BANK0,
-				cmdp_local);
-		else
-			vfe31_write_la_cfg(LUMA_ADAPT_LUT_RAM_BANK1,
-				cmdp_local);
-		}
-		vfe31_ctrl->update_la = true;
-		break;
-
-	case VFE_CMD_GET_LA_TABLE:
-		temp1 = sizeof(uint32_t) * VFE31_LA_TABLE_LENGTH / 2;
-		if (cmd->length != temp1) {
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		cmdp = kzalloc(temp1, GFP_KERNEL);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		if (msm_io_r(vfe31_ctrl->vfebase + V31_LA_OFF))
-			vfe31_program_dmi_cfg(LUMA_ADAPT_LUT_RAM_BANK1);
-		else
-			vfe31_program_dmi_cfg(LUMA_ADAPT_LUT_RAM_BANK0);
-		for (i = 0 ; i < (VFE31_LA_TABLE_LENGTH / 2) ; i++) {
-			*cmdp_local =
-				msm_io_r(vfe31_ctrl->vfebase + VFE_DMI_DATA_LO);
-			*cmdp_local |= (msm_io_r(vfe31_ctrl->vfebase +
-				VFE_DMI_DATA_LO)) << 16;
-			cmdp_local++;
-		}
-		vfe31_program_dmi_cfg(NO_MEM_SELECTED);
-		if (copy_to_user((void __user *)(cmd->value), cmdp,
-			temp1)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		break;
-	case VFE_CMD_SK_ENHAN_CFG:
-	case VFE_CMD_SK_ENHAN_UPDATE:{
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_SCE_OFF,
-				cmdp, V31_SCE_LEN);
-		}
-		break;
-
-	case VFE_CMD_LIVESHOT:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		
-		rc = vfe31_configure_pingpong_buffers(VFE_MSG_V31_CAPTURE,
-						VFE_MSG_OUTPUT_PRIMARY);
-		if (rc < 0) {
-			pr_err("%s error configuring pingpong buffers"
-				   " for primary output", __func__);
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		vfe31_start_liveshot(pmctl);
-		break;
-
-
-	case VFE_CMD_DEMOSAICV3:
-		if (cmd->length != V31_DEMOSAICV3_LEN) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		new_val = *cmdp_local;
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF);
-		old_val &= DEMOSAIC_MASK;
-		new_val = new_val | old_val;
-		*cmdp_local = new_val;
-
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF,
-			cmdp_local, V31_DEMOSAICV3_LEN);
-		break;
-
-	case VFE_CMD_DEMOSAICV3_UPDATE:
-		if (cmd->length !=
-			V31_DEMOSAICV3_LEN * V31_DEMOSAICV3_UP_REG_CNT) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		new_val = *cmdp_local;
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF);
-		old_val &= DEMOSAIC_MASK;
-		new_val = new_val | old_val;
-		*cmdp_local = new_val;
-
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF,
-			cmdp_local, V31_DEMOSAICV3_LEN);
-
-		break;
-
-	case VFE_CMD_DEMOSAICV3_ABCC_CFG:
-		rc = -EFAULT;
-		break;
-
-	case VFE_CMD_DEMOSAICV3_ABF_UPDATE:
-	case VFE_CMD_DEMOSAICV3_ABF_CFG: { 
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		new_val = *cmdp_local;
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF);
-		old_val &= ABF_MASK;
-		new_val = new_val | old_val;
-		*cmdp_local = new_val;
-
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF,
-		    cmdp_local, 4);
-
-		cmdp_local += 1;
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-			cmdp_local, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-
-	case VFE_CMD_DEMOSAICV3_DBCC_CFG:
-	case VFE_CMD_DEMOSAICV3_DBCC_UPDATE:
-		return -EINVAL;
-
-	case VFE_CMD_DEMOSAICV3_DBPC_CFG:
-	case VFE_CMD_DEMOSAICV3_DBPC_UPDATE: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-		new_val = *cmdp_local;
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF);
-		old_val &= BPC_MASK;
-
-		new_val = new_val | old_val;
-		*cmdp_local = new_val;
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_DEMOSAICV3_OFF,
-					cmdp_local, V31_DEMOSAICV3_LEN);
-		cmdp_local += 1;
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_DEMOSAICV3_DBPC_CFG_OFF,
-			cmdp_local, V31_DEMOSAICV3_DBPC_LEN);
-		}
-		break;
-
-	case VFE_CMD_RGB_G_CFG: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		msm_io_memcpy(vfe31_ctrl->vfebase + V31_RGB_G_OFF,
-			cmdp, 4);
-		cmdp += 1;
-
-		vfe31_write_gamma_cfg(RGBLUT_RAM_CH0_BANK0, cmdp);
-		vfe31_write_gamma_cfg(RGBLUT_RAM_CH1_BANK0, cmdp);
-		vfe31_write_gamma_cfg(RGBLUT_RAM_CH2_BANK0, cmdp);
-		}
-	    cmdp -= 1;
-		break;
-
-	case VFE_CMD_RGB_G_UPDATE: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp, (void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase + V31_RGB_G_OFF);
-		cmdp += 1;
-		if (old_val != 0x0) {
-			vfe31_write_gamma_cfg(RGBLUT_RAM_CH0_BANK0, cmdp);
-			vfe31_write_gamma_cfg(RGBLUT_RAM_CH1_BANK0, cmdp);
-			vfe31_write_gamma_cfg(RGBLUT_RAM_CH2_BANK0, cmdp);
-		} else {
-			vfe31_write_gamma_cfg(RGBLUT_RAM_CH0_BANK1, cmdp);
-			vfe31_write_gamma_cfg(RGBLUT_RAM_CH1_BANK1, cmdp);
-			vfe31_write_gamma_cfg(RGBLUT_RAM_CH2_BANK1, cmdp);
-		}
-		}
-		vfe31_ctrl->update_gamma = TRUE;
-		cmdp -= 1;
-		break;
-
-	case VFE_CMD_GET_RGB_G_TABLE:
-		temp1 = sizeof(uint32_t) * VFE31_GAMMA_NUM_ENTRIES * 3;
-		if (cmd->length != temp1) {
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		cmdp = kzalloc(temp1, GFP_KERNEL);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		cmdp_local = cmdp;
-
-		old_val = msm_io_r(vfe31_ctrl->vfebase + V31_RGB_G_OFF);
-		temp2 = old_val ? RGBLUT_RAM_CH0_BANK1 :
-			RGBLUT_RAM_CH0_BANK0;
-		for (i = 0; i < 3; i++) {
-			vfe31_read_gamma_cfg(temp2,
-				cmdp_local + (VFE31_GAMMA_NUM_ENTRIES * i));
-			temp2 += 2;
-		}
-		if (copy_to_user((void __user *)(cmd->value), cmdp,
-			temp1)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		break;
-
-	case VFE_CMD_STATS_AWB_STOP: {
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val &= ~AWB_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		}
-		break;
-	case VFE_CMD_STATS_AE_STOP: {
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val &= ~AE_BG_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		}
-		break;
-	case VFE_CMD_STATS_AF_STOP: {
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val &= ~AF_BF_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		}
-		break;
-
-	case VFE_CMD_STATS_IHIST_STOP: {
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val &= ~IHIST_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		}
-		break;
-
-	case VFE_CMD_STATS_RS_STOP: {
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val &= ~RS_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		}
-		break;
-
-	case VFE_CMD_STATS_CS_STOP: {
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val &= ~CS_ENABLE_MASK;
-		msm_io_w(old_val,
-			vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		}
-		break;
-	case VFE_CMD_STOP:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		vfe31_stop();
-		break;
-
-	case VFE_CMD_SYNC_TIMER_SETTING:
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp, (void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		vfe31_sync_timer_start(cmdp);
-		break;
-
-	case VFE_CMD_MODULE_CFG: {
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp,
-			(void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		*cmdp &= ~STATS_ENABLE_MASK;
-		old_val = msm_io_r(vfe31_ctrl->vfebase + VFE_MODULE_CFG);
-		old_val &= STATS_ENABLE_MASK;
-		*cmdp |= old_val;
-
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-			cmdp, (vfe31_cmd[cmd->id].length));
-		}
-		break;
-
-	case VFE_CMD_ZSL:
-		pr_info("[CAM] vfe31_proc_general: cmdID = %s\n",
-			vfe31_general_cmd[cmd->id]);
-		rc = vfe31_configure_pingpong_buffers(VFE_MSG_V31_START,
-			VFE_MSG_OUTPUT_PRIMARY);
-		if (rc < 0)
-			goto proc_general_done;
-		rc = vfe31_configure_pingpong_buffers(VFE_MSG_V31_START,
-			VFE_MSG_OUTPUT_SECONDARY);
-		if (rc < 0)
-			goto proc_general_done;
-
-		rc = vfe31_zsl(pmctl);
-		break;
-
-	case VFE_CMD_ASF_CFG:
-	case VFE_CMD_ASF_UPDATE:
-		cmdp = kmalloc(cmd->length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		if (copy_from_user(cmdp, (void __user *)(cmd->value),
-			cmd->length)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-			cmdp, (vfe31_cmd[cmd->id].length));
-		cmdp_local = cmdp + V31_ASF_LEN/4;
-
-		break;
-
-	case VFE_CMD_GET_HW_VERSION:
-		if (cmd->length != V31_GET_HW_VERSION_LEN) {
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		cmdp = kmalloc(V31_GET_HW_VERSION_LEN, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		*cmdp = msm_io_r(vfe31_ctrl->vfebase+V31_GET_HW_VERSION_OFF);
-		if (copy_to_user((void __user *)(cmd->value), cmdp,
-			V31_GET_HW_VERSION_LEN)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		break;
-	case VFE_CMD_GET_REG_DUMP:
-		temp1 = sizeof(uint32_t) * vfe31_ctrl->register_total;
-		if (cmd->length != temp1) {
-			rc = -EINVAL;
-			goto proc_general_done;
-		}
-		cmdp = kmalloc(temp1, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-		msm_io_dump(vfe31_ctrl->vfebase, vfe31_ctrl->register_total*4);
-		CDBG("%s: %p %p %d\n", __func__, (void *)cmdp,
-			vfe31_ctrl->vfebase, temp1);
-		memcpy_fromio((void *)cmdp, vfe31_ctrl->vfebase, temp1);
-		if (copy_to_user((void __user *)(cmd->value), cmdp, temp1)) {
-			rc = -EFAULT;
-			goto proc_general_done;
-		}
-		break;
-	case VFE_CMD_FRAME_SKIP_CFG:
-		if (cmd->length != vfe31_cmd[cmd->id].length)
-			return -EINVAL;
-
-		cmdp = kmalloc(vfe31_cmd[cmd->id].length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-
-		CHECKED_COPY_FROM_USER(cmdp);
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-			cmdp, (vfe31_cmd[cmd->id].length));
-		vfe31_ctrl->frame_skip_cnt = ((uint32_t)
-			*cmdp & VFE_FRAME_SKIP_PERIOD_MASK) + 1;
-		vfe31_ctrl->frame_skip_pattern = (uint32_t)(*(cmdp + 2));
-		break;
-	default:
-		if (cmd->length != vfe31_cmd[cmd->id].length)
-			return -EINVAL;
-
-		cmdp = kmalloc(vfe31_cmd[cmd->id].length, GFP_ATOMIC);
-		if (!cmdp) {
-			rc = -ENOMEM;
-			goto proc_general_done;
-		}
-
-		CHECKED_COPY_FROM_USER(cmdp);
-		msm_io_memcpy(vfe31_ctrl->vfebase + vfe31_cmd[cmd->id].offset,
-			cmdp, (vfe31_cmd[cmd->id].length));
-		break;
-
-	}
-
-proc_general_done:
-	kfree(cmdp);
-
-	return rc;
-}
-
-static void vfe31_stats_af_ack(struct vfe_cmd_stats_ack *pAck)
-{
-	unsigned long flags;
-	spinlock_t *lock = (vfe31_ctrl->stats_comp ?
-		&vfe31_ctrl->comp_stats_ack_lock :
-		&vfe31_ctrl->af_ack_lock);
-	spin_lock_irqsave(lock, flags);
-	vfe31_ctrl->afStatsControl.nextFrameAddrBuf = pAck->nextStatsBuf;
-	vfe31_ctrl->afStatsControl.ackPending = FALSE;
-	spin_unlock_irqrestore(lock, flags);
-}
-
-static void vfe31_stats_awb_ack(struct vfe_cmd_stats_ack *pAck)
-{
-	unsigned long flags;
-	spinlock_t *lock = (vfe31_ctrl->stats_comp ?
-		&vfe31_ctrl->comp_stats_ack_lock :
-		&vfe31_ctrl->awb_ack_lock);
-	spin_lock_irqsave(lock, flags);
-	vfe31_ctrl->awbStatsControl.nextFrameAddrBuf = pAck->nextStatsBuf;
-	vfe31_ctrl->awbStatsControl.ackPending = FALSE;
-	spin_unlock_irqrestore(lock, flags);
-}
-
-static void vfe31_stats_aec_ack(struct vfe_cmd_stats_ack *pAck)
-{
-	unsigned long flags;
-	spinlock_t *lock = (vfe31_ctrl->stats_comp ?
-		&vfe31_ctrl->comp_stats_ack_lock :
-		&vfe31_ctrl->aec_ack_lock);
-	spin_lock_irqsave(lock, flags);
-	vfe31_ctrl->aecStatsControl.nextFrameAddrBuf = pAck->nextStatsBuf;
-	vfe31_ctrl->aecStatsControl.ackPending = FALSE;
-	spin_unlock_irqrestore(lock, flags);
-}
-
-static void vfe31_stats_ihist_ack(struct vfe_cmd_stats_ack *pAck)
-{
-	unsigned long flags;
-	spinlock_t *lock = (vfe31_ctrl->stats_comp ?
-		&vfe31_ctrl->comp_stats_ack_lock :
-		&vfe31_ctrl->ihist_ack_lock);
-	spin_lock_irqsave(lock, flags);
-	vfe31_ctrl->ihistStatsControl.nextFrameAddrBuf = pAck->nextStatsBuf;
-	vfe31_ctrl->ihistStatsControl.ackPending = FALSE;
-	spin_unlock_irqrestore(lock, flags);
-}
-static void vfe31_stats_rs_ack(struct vfe_cmd_stats_ack *pAck)
-{
-	unsigned long flags;
-	spinlock_t *lock = (vfe31_ctrl->stats_comp ?
-		&vfe31_ctrl->comp_stats_ack_lock :
-		&vfe31_ctrl->rs_ack_lock);
-	spin_lock_irqsave(lock, flags);
-	vfe31_ctrl->rsStatsControl.nextFrameAddrBuf = pAck->nextStatsBuf;
-	vfe31_ctrl->rsStatsControl.ackPending = FALSE;
-	spin_unlock_irqrestore(lock, flags);
-}
-static void vfe31_stats_cs_ack(struct vfe_cmd_stats_ack *pAck)
-{
-	unsigned long flags;
-	spinlock_t *lock = (vfe31_ctrl->stats_comp ?
-		&vfe31_ctrl->comp_stats_ack_lock :
-		&vfe31_ctrl->cs_ack_lock);
-	spin_lock_irqsave(lock, flags);
-	vfe31_ctrl->csStatsControl.nextFrameAddrBuf = pAck->nextStatsBuf;
-	vfe31_ctrl->csStatsControl.ackPending = FALSE;
-	spin_unlock_irqrestore(lock, flags);
-}
-
-static inline void vfe31_read_irq_status(struct vfe31_irq_status *out)
-{
-	uint32_t *temp;
-	memset(out, 0, sizeof(struct vfe31_irq_status));
-	temp = (uint32_t *)(vfe31_ctrl->vfebase + VFE_IRQ_STATUS_0);
-	out->vfeIrqStatus0 = msm_io_r(temp);
-
-	temp = (uint32_t *)(vfe31_ctrl->vfebase + VFE_IRQ_STATUS_1);
-	out->vfeIrqStatus1 = msm_io_r(temp);
-
-	temp = (uint32_t *)(vfe31_ctrl->vfebase + VFE_CAMIF_STATUS);
-	out->camifStatus = msm_io_r(temp);
-	CDBG("camifStatus  = 0x%x\n", out->camifStatus);
-
-	
-	msm_io_w(out->vfeIrqStatus0, vfe31_ctrl->vfebase + VFE_IRQ_CLEAR_0);
-	msm_io_w(out->vfeIrqStatus1, vfe31_ctrl->vfebase + VFE_IRQ_CLEAR_1);
-
-	msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_IRQ_CMD);
-
-}
-
-static void vfe31_process_reg_update_irq(void)
-{
-	unsigned long flags;
-
-	if (vfe31_ctrl->recording_state == VFE_STATE_START_REQUESTED) {
-		if (vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_VIDEO_AND_PREVIEW) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-		} else if (vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_PREVIEW_AND_VIDEO) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch1]);
-		}
-		vfe31_ctrl->recording_state = VFE_STATE_STARTED;
-		msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-		CDBG("start video triggered .\n");
-	} else if (vfe31_ctrl->recording_state ==
-			VFE_STATE_STOP_REQUESTED) {
-		if (vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_VIDEO_AND_PREVIEW) {
-			msm_io_w(0, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-			msm_io_w(0, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-		} else if (vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_PREVIEW_AND_VIDEO) {
-			msm_io_w(0, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch0]);
-			msm_io_w(0, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out1.ch1]);
-		}
-		CDBG("stop video triggered .\n");
-	}
-
-	if (vfe31_ctrl->start_ack_pending == TRUE) {
-		pr_info("%s: MSG_ID_START_ACK\n", __func__);
-		vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_START_ACK);
-		vfe31_ctrl->start_ack_pending = FALSE;
-	} else {
-		if (vfe31_ctrl->recording_state ==
-				VFE_STATE_STOP_REQUESTED) {
-			vfe31_ctrl->recording_state = VFE_STATE_STOPPED;
-			msm_io_w_mb(1,
-			vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-		} else if (vfe31_ctrl->recording_state ==
-					VFE_STATE_STOPPED) {
-			vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_STOP_REC_ACK);
-			vfe31_ctrl->recording_state = VFE_STATE_IDLE;
-		}
-		spin_lock_irqsave(&vfe31_ctrl->update_ack_lock, flags);
-		if (vfe31_ctrl->update_ack_pending == TRUE) {
-			vfe31_ctrl->update_ack_pending = FALSE;
-			spin_unlock_irqrestore(
-				&vfe31_ctrl->update_ack_lock, flags);
-			vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_UPDATE_ACK);
-		} else {
-			spin_unlock_irqrestore(
-				&vfe31_ctrl->update_ack_lock, flags);
-		}
-	}
-
-	if (vfe31_ctrl->liveshot_state == VFE_STATE_START_REQUESTED) {
-		pr_info("[CAM] %s enabling liveshot output\n", __func__);
-		if (vfe31_ctrl->outpath.output_mode &
-				VFE31_OUTPUT_MODE_PRIMARY) {
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-			msm_io_w(1, vfe31_ctrl->vfebase +
-			vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-			vfe31_ctrl->liveshot_state = VFE_STATE_STARTED;
-		}
-	}
-
-	if (vfe31_ctrl->liveshot_state == VFE_STATE_STARTED) {
-		vfe31_ctrl->vfe_capture_count--;
-		if (!vfe31_ctrl->vfe_capture_count)
-			vfe31_ctrl->liveshot_state = VFE_STATE_STOP_REQUESTED;
-		msm_io_w_mb(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-	} else if (vfe31_ctrl->liveshot_state == VFE_STATE_STOP_REQUESTED) {
-		CDBG("%s: disabling liveshot output\n", __func__);
-		if (vfe31_ctrl->outpath.output_mode &
-			VFE31_OUTPUT_MODE_PRIMARY) {
-			msm_io_w(0, vfe31_ctrl->vfebase +
-				vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch0]);
-			msm_io_w(0, vfe31_ctrl->vfebase +
-				vfe31_AXI_WM_CFG[vfe31_ctrl->outpath.out0.ch1]);
-			vfe31_ctrl->liveshot_state = VFE_STATE_STOPPED;
-			msm_io_w_mb(1, vfe31_ctrl->vfebase +
-				VFE_REG_UPDATE_CMD);
-		}
-	} else if (vfe31_ctrl->liveshot_state == VFE_STATE_STOPPED) {
-		vfe31_ctrl->liveshot_state = VFE_STATE_IDLE;
-	}
-
-	if ((vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_MAIN) ||
-		(vfe31_ctrl->operation_mode == VFE_OUTPUTS_MAIN_AND_THUMB)
-#if 0
-		|| (vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_JPEG)
-		|| (vfe31_ctrl->operation_mode == VFE_OUTPUTS_JPEG_AND_THUMB)
-#endif
-		) {
-		
-		
-		if (vfe31_ctrl->frame_skip_pattern & (0x1 <<
-			(vfe31_ctrl->snapshot_frame_cnt %
-				vfe31_ctrl->frame_skip_cnt))) {
-			vfe31_ctrl->vfe_capture_count--;
-			
-			if (vfe31_ctrl->vfe_capture_count == 0) {
-				
-				if (vfe31_ctrl->outpath.output_mode &
-						VFE31_OUTPUT_MODE_PRIMARY) {
-					msm_io_w(0, vfe31_ctrl->vfebase +
-						vfe31_AXI_WM_CFG[vfe31_ctrl->
-							outpath.out0.ch0]);
-					msm_io_w(0, vfe31_ctrl->vfebase +
-						vfe31_AXI_WM_CFG[vfe31_ctrl->
-							outpath.out0.ch1]);
-				}
-				if (vfe31_ctrl->outpath.output_mode &
-						VFE31_OUTPUT_MODE_SECONDARY) {
-					msm_io_w(0, vfe31_ctrl->vfebase +
-						vfe31_AXI_WM_CFG[vfe31_ctrl->
-							outpath.out1.ch0]);
-					msm_io_w(0, vfe31_ctrl->vfebase +
-						vfe31_AXI_WM_CFG[vfe31_ctrl->
-							outpath.out1.ch1]);
-				}
-				msm_io_w_mb
-				(CAMIF_COMMAND_STOP_AT_FRAME_BOUNDARY,
-				vfe31_ctrl->vfebase + VFE_CAMIF_COMMAND);
-				vfe31_ctrl->snapshot_frame_cnt = -1;
-				vfe31_ctrl->frame_skip_cnt = 31;
-				vfe31_ctrl->frame_skip_pattern = 0xffffffff;
-			} 
-		} 
-		vfe31_ctrl->snapshot_frame_cnt++;
-		
-		msm_io_w(1, vfe31_ctrl->vfebase + VFE_REG_UPDATE_CMD);
-	} 
-}
-
-static void vfe31_set_default_reg_values(void)
-{
-	msm_io_w(0x800080, vfe31_ctrl->vfebase + VFE_DEMUX_GAIN_0);
-	msm_io_w(0x800080, vfe31_ctrl->vfebase + VFE_DEMUX_GAIN_1);
-	
-	msm_io_w(0xFFFFF, vfe31_ctrl->vfebase + VFE_CGC_OVERRIDE);
-
-	
-	msm_io_w(0x1f, vfe31_ctrl->vfebase + VFE_FRAMEDROP_ENC_Y_CFG);
-	msm_io_w(0x1f, vfe31_ctrl->vfebase + VFE_FRAMEDROP_ENC_CBCR_CFG);
-	msm_io_w(0xFFFFFFFF, vfe31_ctrl->vfebase + VFE_FRAMEDROP_ENC_Y_PATTERN);
-	msm_io_w(0xFFFFFFFF,
-		vfe31_ctrl->vfebase + VFE_FRAMEDROP_ENC_CBCR_PATTERN);
-	msm_io_w(0x1f, vfe31_ctrl->vfebase + VFE_FRAMEDROP_VIEW_Y);
-	msm_io_w(0x1f, vfe31_ctrl->vfebase + VFE_FRAMEDROP_VIEW_CBCR);
-	msm_io_w(0xFFFFFFFF,
-		vfe31_ctrl->vfebase + VFE_FRAMEDROP_VIEW_Y_PATTERN);
-	msm_io_w(0xFFFFFFFF,
-		vfe31_ctrl->vfebase + VFE_FRAMEDROP_VIEW_CBCR_PATTERN);
-	msm_io_w(0, vfe31_ctrl->vfebase + VFE_CLAMP_MIN);
-	msm_io_w(0xFFFFFF, vfe31_ctrl->vfebase + VFE_CLAMP_MAX);
-
-	
-	msm_io_w(0x3980007, vfe31_ctrl->vfebase + VFE_BUS_STATS_AEC_UB_CFG);
-	msm_io_w(0x3A00007, vfe31_ctrl->vfebase + VFE_BUS_STATS_AF_UB_CFG);
-	msm_io_w(0x3A8000F, vfe31_ctrl->vfebase + VFE_BUS_STATS_AWB_UB_CFG);
-	msm_io_w(0x3B80007, vfe31_ctrl->vfebase + VFE_BUS_STATS_RS_UB_CFG);
-	msm_io_w(0x3C0001F, vfe31_ctrl->vfebase + VFE_BUS_STATS_CS_UB_CFG);
-	msm_io_w(0x3E0001F, vfe31_ctrl->vfebase + VFE_BUS_STATS_HIST_UB_CFG);
-}
-
-static void vfe31_process_reset_irq(void)
-{
-	unsigned long flags;
-
-	atomic_set(&vfe31_ctrl->vstate, 0);
-
-	spin_lock_irqsave(&vfe31_ctrl->stop_flag_lock, flags);
-	if (vfe31_ctrl->stop_ack_pending) {
-		vfe31_ctrl->stop_ack_pending = FALSE;
-		spin_unlock_irqrestore(&vfe31_ctrl->stop_flag_lock, flags);
-		vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_STOP_ACK);
-	} else {
-		spin_unlock_irqrestore(&vfe31_ctrl->stop_flag_lock, flags);
-		
-		vfe31_set_default_reg_values();
-
-		
-		msm_io_w(0x7FFF, vfe31_ctrl->vfebase + VFE_BUS_CMD);
-		vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_RESET_ACK);
-	}
-}
-
-static void vfe31_process_camif_sof_irq(void)
-{
-	if (vfe31_ctrl->operation_mode ==
-		VFE_OUTPUTS_RAW) {
-		if (vfe31_ctrl->start_ack_pending) {
-			pr_info("%s: MSG_ID_START_ACK\n", __func__);
-			vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_START_ACK);
-			vfe31_ctrl->start_ack_pending = FALSE;
-		}
-		vfe31_ctrl->vfe_capture_count--;
-		
-		if (vfe31_ctrl->vfe_capture_count == 0) {
-			msm_io_w_mb(CAMIF_COMMAND_STOP_AT_FRAME_BOUNDARY,
-				vfe31_ctrl->vfebase + VFE_CAMIF_COMMAND);
-		}
-	} 
-
-	if (vfe31_ctrl->vfeFrameId == 0)
-		pr_info("[CAM] irq startAckIrq sof\n");
-	if ((vfe31_ctrl->hfr_mode != HFR_MODE_OFF) &&
-		(vfe31_ctrl->operation_mode == VFE_MODE_OF_OPERATION_VIDEO) &&
-		(vfe31_ctrl->vfeFrameId % vfe31_ctrl->hfr_mode != 0)) {
-		vfe31_ctrl->vfeFrameId++;
-		CDBG("Skip the SOF notification when HFR enabled\n");
-		return;
-	}
-
-	vfe31_ctrl->vfeFrameId++;
-	vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_SOF_ACK);
-	CDBG("camif_sof_irq, frameId = %d\n", vfe31_ctrl->vfeFrameId);
-
-	if (vfe31_ctrl->sync_timer_state) {
-		if (vfe31_ctrl->sync_timer_repeat_count == 0)
-			vfe31_sync_timer_stop();
-		else
-			vfe31_ctrl->sync_timer_repeat_count--;
-	}
-}
-
-static void vfe31_process_error_irq(uint32_t errStatus)
-{
-	uint32_t reg_value, read_val;
-
-	if (errStatus & VFE31_IMASK_CAMIF_ERROR) {
-		pr_err("vfe31_irq: camif errors\n");
-		reg_value = msm_io_r(vfe31_ctrl->vfebase + VFE_CAMIF_STATUS);
-		pr_err("camifStatus  = 0x%x\n", reg_value);
-		vfe31_send_isp_msg(vfe31_ctrl, MSG_ID_CAMIF_ERROR);
-	}
-
-	if (errStatus & VFE31_IMASK_STATS_CS_OVWR)
-		pr_err("vfe31_irq: stats cs overwrite\n");
-
-	if (errStatus & VFE31_IMASK_STATS_IHIST_OVWR)
-		pr_err("vfe31_irq: stats ihist overwrite\n");
-
-	if (errStatus & VFE31_IMASK_REALIGN_BUF_Y_OVFL)
-		pr_err("vfe31_irq: realign bug Y overflow\n");
-
-	if (errStatus & VFE31_IMASK_REALIGN_BUF_CB_OVFL)
-		pr_err("vfe31_irq: realign bug CB overflow\n");
-
-	if (errStatus & VFE31_IMASK_REALIGN_BUF_CR_OVFL)
-		pr_err("vfe31_irq: realign bug CR overflow\n");
-
-	if (errStatus & VFE31_IMASK_VIOLATION)
-		pr_err("vfe31_irq: violation interrupt\n");
-
-	if (errStatus & VFE31_IMASK_IMG_MAST_0_BUS_OVFL)
-		pr_err("vfe31_irq: image master 0 bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_IMG_MAST_1_BUS_OVFL)
-		pr_err("vfe31_irq: image master 1 bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_IMG_MAST_2_BUS_OVFL)
-		pr_err("vfe31_irq: image master 2 bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_IMG_MAST_3_BUS_OVFL)
-		pr_err("vfe31_irq: image master 3 bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_IMG_MAST_4_BUS_OVFL)
-		pr_err("vfe31_irq: image master 4 bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_IMG_MAST_5_BUS_OVFL)
-		pr_err("vfe31_irq: image master 5 bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_IMG_MAST_6_BUS_OVFL)
-		pr_err("vfe31_irq: image master 6 bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_STATS_AE_BG_BUS_OVFL)
-		pr_err("vfe31_irq: ae/bg stats bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_STATS_AF_BF_BUS_OVFL)
-		pr_err("vfe31_irq: af/bf stats bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_STATS_AWB_BUS_OVFL)
-		pr_err("vfe31_irq: awb stats bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_STATS_RS_BUS_OVFL)
-		pr_err("vfe31_irq: rs stats bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_STATS_CS_BUS_OVFL)
-		pr_err("vfe31_irq: cs stats bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_STATS_IHIST_BUS_OVFL)
-		pr_err("vfe31_irq: ihist stats bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_STATS_SKIN_BHIST_BUS_OVFL)
-		pr_err("vfe31_irq: skin/bhist stats bus overflow\n");
-
-	if (errStatus & VFE31_IMASK_AXI_ERROR) {
-		pr_err("vfe31_irq: axi error\n");
-		
-		read_val = msm_io_r(vfe31_ctrl->vfebase +
-			VFE_BUS_PING_PONG_STATUS);
-		pr_debug("VFE_BUS_PING_PONG_STATUS = 0x%x\n", read_val);
-		read_val = msm_io_r(vfe31_ctrl->vfebase +
-			VFE_BUS_OPERATION_STATUS);
-		pr_debug("VFE_BUS_OPERATION_STATUS = 0x%x\n", read_val);
-		read_val = msm_io_r(vfe31_ctrl->vfebase +
-			VFE_BUS_IMAGE_MASTER_0_WR_PM_STATS_0);
-		pr_debug("VFE_BUS_IMAGE_MASTER_0_WR_PM_STATS_0 = 0x%x\n",
-			read_val);
-		read_val = msm_io_r(vfe31_ctrl->vfebase +
-			VFE_BUS_IMAGE_MASTER_0_WR_PM_STATS_1);
-		pr_debug("VFE_BUS_IMAGE_MASTER_0_WR_PM_STATS_1 = 0x%x\n",
-			read_val);
-		read_val = msm_io_r(vfe31_ctrl->vfebase +
-			VFE_AXI_STATUS);
-		pr_debug("VFE_AXI_STATUS = 0x%x\n", read_val);
-	}
-}
-static void vfe_send_outmsg(struct v4l2_subdev *sd, uint8_t msgid,
-	uint32_t ch0_paddr, uint32_t ch1_paddr, uint32_t ch2_paddr)
-{
-	struct isp_msg_output msg;
-
-	msg.output_id = msgid;
-	msg.buf.ch_paddr[0]	= ch0_paddr;
-	msg.buf.ch_paddr[1]	= ch1_paddr;
-	msg.buf.ch_paddr[2]	= ch2_paddr;
-	msg.frameCounter = vfe31_ctrl->vfeFrameId;
-
-	v4l2_subdev_notify(&vfe31_ctrl->subdev,
-			NOTIFY_VFE_MSG_OUT,
-			&msg);
-	return;
-}
-
-static void vfe31_process_output_path_irq_0(void)
-{
-	uint32_t ping_pong;
-	uint32_t ch0_paddr, ch1_paddr, ch2_paddr;
-	uint8_t out_bool = 0;
-	struct msm_free_buf *free_buf = NULL;
-
-	free_buf = vfe31_check_free_buffer(VFE_MSG_OUTPUT_IRQ,
-		VFE_MSG_OUTPUT_PRIMARY);
-
-	out_bool = ((vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_MAIN ||
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_MAIN_AND_THUMB ||
-#if 0
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_THUMB_AND_JPEG ||
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_JPEG_AND_THUMB ||
-#endif
-		vfe31_ctrl->operation_mode == VFE_OUTPUTS_RAW ||
-		vfe31_ctrl->liveshot_state == VFE_STATE_STARTED ||
-		vfe31_ctrl->liveshot_state == VFE_STATE_STOP_REQUESTED ||
-		vfe31_ctrl->liveshot_state == VFE_STATE_STOPPED) &&
-		(vfe31_ctrl->vfe_capture_count <= 1)) || free_buf;
-
-	if (out_bool) {
-		ping_pong = msm_io_r(vfe31_ctrl->vfebase +
-			VFE_BUS_PING_PONG_STATUS);
-
-		
-		ch0_paddr = vfe31_get_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out0.ch0);
-		
-		ch1_paddr = vfe31_get_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out0.ch1);
-		
-		ch2_paddr = vfe31_get_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out0.ch2);
-
-		CDBG("output path 0, ch0 = 0x%x, ch1 = 0x%x, ch2 = 0x%x\n",
-			ch0_paddr, ch1_paddr, ch2_paddr);
-		if (free_buf) {
-			
-			vfe31_put_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out0.ch0,
-			free_buf->ch_paddr[0]);
-			
-			vfe31_put_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out0.ch1,
-			free_buf->ch_paddr[1]);
-			if (free_buf->num_planes > 2)
-				vfe31_put_ch_addr(ping_pong,
-					vfe31_ctrl->outpath.out0.ch2,
-					free_buf->ch_paddr[2]);
-		}
-		if (vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_THUMB_AND_MAIN ||
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_MAIN_AND_THUMB ||
-#if 0
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_THUMB_AND_JPEG ||
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_JPEG_AND_THUMB ||
-#endif
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_RAW ||
-			vfe31_ctrl->liveshot_state == VFE_STATE_STOPPED)
-			vfe31_ctrl->outpath.out0.capture_cnt--;
-
-		vfe_send_outmsg(&vfe31_ctrl->subdev,
-			MSG_ID_OUTPUT_PRIMARY, ch0_paddr,
-			ch1_paddr, ch2_paddr);
-
-		if (vfe31_ctrl->liveshot_state == VFE_STATE_STOPPED)
-			vfe31_ctrl->liveshot_state = VFE_STATE_IDLE;
-
-	} else {
-		vfe31_ctrl->outpath.out0.frame_drop_cnt++;
-		CDBG("path_irq_0 - no free buffer!\n");
-	}
-}
-
-static void vfe31_process_output_path_irq_1(void)
-{
-	uint32_t ping_pong;
-	uint32_t ch0_paddr, ch1_paddr, ch2_paddr;
-	
-	uint8_t out_bool = 0;
-	struct msm_free_buf *free_buf = NULL;
-
-	free_buf = vfe31_check_free_buffer(VFE_MSG_OUTPUT_IRQ,
-		VFE_MSG_OUTPUT_SECONDARY);
-	out_bool = ((vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_THUMB_AND_MAIN ||
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_MAIN_AND_THUMB ||
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_RAW
-#if 0
-			 || vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_JPEG_AND_THUMB
-#endif
-				) &&
-			(vfe31_ctrl->vfe_capture_count <= 1)) || free_buf;
-
-	if (out_bool) {
-		ping_pong = msm_io_r(vfe31_ctrl->vfebase +
-			VFE_BUS_PING_PONG_STATUS);
-
-		
-		ch0_paddr = vfe31_get_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out1.ch0);
-		
-		ch1_paddr = vfe31_get_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out1.ch1);
-		ch2_paddr = vfe31_get_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out1.ch2);
-
-		CDBG("%s ch0 = 0x%x, ch1 = 0x%x, ch2 = 0x%x\n",
-			__func__, ch0_paddr, ch1_paddr, ch2_paddr);
-		if (free_buf) {
-			
-			vfe31_put_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out1.ch0,
-			free_buf->ch_paddr[0]);
-			
-			vfe31_put_ch_addr(ping_pong,
-			vfe31_ctrl->outpath.out1.ch1,
-			free_buf->ch_paddr[1]);
-			if (free_buf->num_planes > 2)
-				vfe31_put_ch_addr(ping_pong,
-					vfe31_ctrl->outpath.out1.ch2,
-					free_buf->ch_paddr[2]);
-		}
-		if (vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_THUMB_AND_MAIN ||
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_MAIN_AND_THUMB ||
-			vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_RAW
-#if 0
-			|| vfe31_ctrl->operation_mode ==
-				VFE_OUTPUTS_JPEG_AND_THUMB
-#endif
-				)
-			vfe31_ctrl->outpath.out1.capture_cnt--;
-
-		vfe_send_outmsg(&vfe31_ctrl->subdev,
-			MSG_ID_OUTPUT_SECONDARY, ch0_paddr,
-			ch1_paddr, ch2_paddr);
-	} else {
-		vfe31_ctrl->outpath.out1.frame_drop_cnt++;
-		CDBG("path_irq_1 - no free buffer!\n");
-	}
-}
-
-static uint32_t  vfe31_process_stats_irq_common(uint32_t statsNum,
-						uint32_t newAddr) {
-
-	uint32_t pingpongStatus;
-	uint32_t returnAddr;
-	uint32_t pingpongAddr;
-
-	
-	pingpongStatus =
-		((msm_io_r(vfe31_ctrl->vfebase +
-		VFE_BUS_PING_PONG_STATUS))
-	& ((uint32_t)(1<<(statsNum + 7)))) >> (statsNum + 7);
-	
-	CDBG("statsNum %d, pingpongStatus %d\n", statsNum, pingpongStatus);
-	pingpongAddr =
-		((uint32_t)(vfe31_ctrl->vfebase +
-				VFE_BUS_STATS_PING_PONG_BASE)) +
-				(3*statsNum)*4 + (1-pingpongStatus)*4;
-	returnAddr = msm_io_r((uint32_t *)pingpongAddr);
-	msm_io_w(newAddr, (uint32_t *)pingpongAddr);
-	return returnAddr;
-}
-
-static void
-vfe_send_stats_msg(uint32_t bufAddress, uint32_t statsNum)
-{
-	unsigned long flags;
-	
-	
-	
-	struct isp_msg_stats msgStats;
-	msgStats.frameCounter = vfe31_ctrl->vfeFrameId;
-	msgStats.buffer = bufAddress;
-
-	switch (statsNum) {
-	case statsAeNum:{
-		msgStats.id = MSG_ID_STATS_AEC;
-		spin_lock_irqsave(&vfe31_ctrl->aec_ack_lock, flags);
-		vfe31_ctrl->aecStatsControl.ackPending = TRUE;
-		spin_unlock_irqrestore(&vfe31_ctrl->aec_ack_lock, flags);
-		}
-		break;
-	case statsAfNum:{
-		msgStats.id = MSG_ID_STATS_AF;
-		spin_lock_irqsave(&vfe31_ctrl->af_ack_lock, flags);
-		vfe31_ctrl->afStatsControl.ackPending = TRUE;
-		spin_unlock_irqrestore(&vfe31_ctrl->af_ack_lock, flags);
-		}
-		break;
-	case statsAwbNum: {
-		msgStats.id = MSG_ID_STATS_AWB;
-		spin_lock_irqsave(&vfe31_ctrl->awb_ack_lock, flags);
-		vfe31_ctrl->awbStatsControl.ackPending = TRUE;
-		spin_unlock_irqrestore(&vfe31_ctrl->awb_ack_lock, flags);
-		}
-		break;
-
-	case statsIhistNum: {
-		msgStats.id = MSG_ID_STATS_IHIST;
-		spin_lock_irqsave(&vfe31_ctrl->ihist_ack_lock, flags);
-		vfe31_ctrl->ihistStatsControl.ackPending = TRUE;
-		spin_unlock_irqrestore(&vfe31_ctrl->ihist_ack_lock, flags);
-		}
-		break;
-	case statsRsNum: {
-		msgStats.id = MSG_ID_STATS_RS;
-		spin_lock_irqsave(&vfe31_ctrl->rs_ack_lock, flags);
-		vfe31_ctrl->rsStatsControl.ackPending = TRUE;
-		spin_unlock_irqrestore(&vfe31_ctrl->rs_ack_lock, flags);
-		}
-		break;
-	case statsCsNum: {
-		msgStats.id = MSG_ID_STATS_CS;
-		spin_lock_irqsave(&vfe31_ctrl->cs_ack_lock, flags);
-		vfe31_ctrl->csStatsControl.ackPending = TRUE;
-		spin_unlock_irqrestore(&vfe31_ctrl->cs_ack_lock, flags);
-		}
-		break;
-
-	default:
-		goto stats_done;
-	}
-
-	v4l2_subdev_notify(&vfe31_ctrl->subdev,
-				NOTIFY_VFE_MSG_STATS,
-				&msgStats);
-stats_done:
-	
-	return;
-}
-
-static void vfe_send_comp_stats_msg(uint32_t status_bits)
-{
-	struct msm_stats_buf msgStats;
-	uint32_t temp;
-
-	msgStats.frame_id = vfe31_ctrl->vfeFrameId;
-	msgStats.status_bits = status_bits;
-
-	msgStats.aec.buff = vfe31_ctrl->aecStatsControl.bufToRender;
-	msgStats.awb.buff = vfe31_ctrl->awbStatsControl.bufToRender;
-	msgStats.af.buff = vfe31_ctrl->afStatsControl.bufToRender;
-
-	msgStats.ihist.buff = vfe31_ctrl->ihistStatsControl.bufToRender;
-	msgStats.rs.buff = vfe31_ctrl->rsStatsControl.bufToRender;
-	msgStats.cs.buff = vfe31_ctrl->csStatsControl.bufToRender;
-
-	temp = msm_io_r(vfe31_ctrl->vfebase + VFE_STATS_AWB_SGW_CFG);
-	msgStats.awb_ymin = (0xFF00 & temp) >> 8;
-#if 0
-	v4l2_subdev_notify(&vfe31_ctrl->subdev,
-				NOTIFY_VFE_MSG_COMP_STATS,
-				&msgStats);
-#endif
-}
-
-static void vfe31_process_stats_ae_irq(void)
-{
-	unsigned long flags;
-	spin_lock_irqsave(&vfe31_ctrl->aec_ack_lock, flags);
-	if (!(vfe31_ctrl->aecStatsControl.ackPending)) {
-		spin_unlock_irqrestore(&vfe31_ctrl->aec_ack_lock, flags);
-		vfe31_ctrl->aecStatsControl.bufToRender =
-			vfe31_process_stats_irq_common(statsAeNum,
-			vfe31_ctrl->aecStatsControl.nextFrameAddrBuf);
-
-		vfe_send_stats_msg(vfe31_ctrl->aecStatsControl.bufToRender,
-						statsAeNum);
-	} else{
-		spin_unlock_irqrestore(&vfe31_ctrl->aec_ack_lock, flags);
-		vfe31_ctrl->aecStatsControl.droppedStatsFrameCount++;
-		CDBG("%s: droppedStatsFrameCount = %d", __func__,
-			vfe31_ctrl->aecStatsControl.droppedStatsFrameCount);
-	}
-}
-
-static void vfe31_process_stats_awb_irq(void)
-{
-	unsigned long flags;
-	spin_lock_irqsave(&vfe31_ctrl->awb_ack_lock, flags);
-	if (!(vfe31_ctrl->awbStatsControl.ackPending)) {
-		spin_unlock_irqrestore(&vfe31_ctrl->awb_ack_lock, flags);
-		vfe31_ctrl->awbStatsControl.bufToRender =
-			vfe31_process_stats_irq_common(statsAwbNum,
-			vfe31_ctrl->awbStatsControl.nextFrameAddrBuf);
-
-		vfe_send_stats_msg(vfe31_ctrl->awbStatsControl.bufToRender,
-						statsAwbNum);
-	} else{
-		spin_unlock_irqrestore(&vfe31_ctrl->awb_ack_lock, flags);
-		vfe31_ctrl->awbStatsControl.droppedStatsFrameCount++;
-		CDBG("%s: droppedStatsFrameCount = %d", __func__,
-			vfe31_ctrl->awbStatsControl.droppedStatsFrameCount);
-	}
-}
-
-static void vfe31_process_stats_af_irq(void)
-{
-	unsigned long flags;
-	spin_lock_irqsave(&vfe31_ctrl->af_ack_lock, flags);
-	if (!(vfe31_ctrl->afStatsControl.ackPending)) {
-		spin_unlock_irqrestore(&vfe31_ctrl->af_ack_lock, flags);
-		vfe31_ctrl->afStatsControl.bufToRender =
-			vfe31_process_stats_irq_common(statsAfNum,
-			vfe31_ctrl->afStatsControl.nextFrameAddrBuf);
-
-		vfe_send_stats_msg(vfe31_ctrl->afStatsControl.bufToRender,
-						statsAfNum);
-	} else{
-		spin_unlock_irqrestore(&vfe31_ctrl->af_ack_lock, flags);
-		vfe31_ctrl->afStatsControl.droppedStatsFrameCount++;
-		CDBG("%s: droppedStatsFrameCount = %d", __func__,
-			vfe31_ctrl->afStatsControl.droppedStatsFrameCount);
-	}
-}
-
-static void vfe31_process_stats_ihist_irq(void)
-{
-	if (!(vfe31_ctrl->ihistStatsControl.ackPending)) {
-		vfe31_ctrl->ihistStatsControl.bufToRender =
-			vfe31_process_stats_irq_common(statsIhistNum,
-			vfe31_ctrl->ihistStatsControl.nextFrameAddrBuf);
-
-		vfe_send_stats_msg(vfe31_ctrl->ihistStatsControl.bufToRender,
-						statsIhistNum);
-	} else {
-		vfe31_ctrl->ihistStatsControl.droppedStatsFrameCount++;
-		CDBG("%s: droppedStatsFrameCount = %d", __func__,
-			vfe31_ctrl->ihistStatsControl.droppedStatsFrameCount);
-	}
-}
-
-static void vfe31_process_stats_rs_irq(void)
-{
-	if (!(vfe31_ctrl->rsStatsControl.ackPending)) {
-		vfe31_ctrl->rsStatsControl.bufToRender =
-			vfe31_process_stats_irq_common(statsRsNum,
-			vfe31_ctrl->rsStatsControl.nextFrameAddrBuf);
-
-		vfe_send_stats_msg(vfe31_ctrl->rsStatsControl.bufToRender,
-						statsRsNum);
-	} else {
-		vfe31_ctrl->rsStatsControl.droppedStatsFrameCount++;
-		CDBG("%s: droppedStatsFrameCount = %d", __func__,
-			vfe31_ctrl->rsStatsControl.droppedStatsFrameCount);
-	}
-}
-
-static void vfe31_process_stats_cs_irq(void)
-{
-	if (!(vfe31_ctrl->csStatsControl.ackPending)) {
-		vfe31_ctrl->csStatsControl.bufToRender =
-			vfe31_process_stats_irq_common(statsCsNum,
-			vfe31_ctrl->csStatsControl.nextFrameAddrBuf);
-
-		vfe_send_stats_msg(vfe31_ctrl->csStatsControl.bufToRender,
-						statsCsNum);
-	} else {
-		vfe31_ctrl->csStatsControl.droppedStatsFrameCount++;
-		CDBG("%s: droppedStatsFrameCount = %d", __func__,
-			vfe31_ctrl->csStatsControl.droppedStatsFrameCount);
-	}
-}
-
-static void vfe31_process_stats(uint32_t status_bits)
-{
-	unsigned long flags;
-	int32_t process_stats = false;
-	CDBG("%s, stats = 0x%x\n", __func__, status_bits);
-
-	spin_lock_irqsave(&vfe31_ctrl->comp_stats_ack_lock, flags);
-	if (status_bits & VFE_IRQ_STATUS0_STATS_AEC) {
-		if (!vfe31_ctrl->aecStatsControl.ackPending) {
-			vfe31_ctrl->aecStatsControl.ackPending = TRUE;
-			vfe31_ctrl->aecStatsControl.bufToRender =
-				vfe31_process_stats_irq_common(statsAeNum,
-				vfe31_ctrl->aecStatsControl.nextFrameAddrBuf);
-			process_stats = true;
-		} else{
-			vfe31_ctrl->aecStatsControl.bufToRender = 0;
-			vfe31_ctrl->aecStatsControl.droppedStatsFrameCount++;
-		}
-	} else {
-		vfe31_ctrl->aecStatsControl.bufToRender = 0;
-	}
-
-	if (status_bits & VFE_IRQ_STATUS0_STATS_AWB) {
-		if (!vfe31_ctrl->awbStatsControl.ackPending) {
-			vfe31_ctrl->awbStatsControl.ackPending = TRUE;
-			vfe31_ctrl->awbStatsControl.bufToRender =
-				vfe31_process_stats_irq_common(statsAwbNum,
-				vfe31_ctrl->awbStatsControl.nextFrameAddrBuf);
-			process_stats = true;
-		} else{
-			vfe31_ctrl->awbStatsControl.droppedStatsFrameCount++;
-			vfe31_ctrl->awbStatsControl.bufToRender = 0;
-		}
-	} else {
-		vfe31_ctrl->awbStatsControl.bufToRender = 0;
-	}
-
-
-	if (status_bits & VFE_IRQ_STATUS0_STATS_AF) {
-		if (!vfe31_ctrl->afStatsControl.ackPending) {
-			vfe31_ctrl->afStatsControl.ackPending = TRUE;
-			vfe31_ctrl->afStatsControl.bufToRender =
-				vfe31_process_stats_irq_common(statsAfNum,
-				vfe31_ctrl->afStatsControl.nextFrameAddrBuf);
-			process_stats = true;
-		} else {
-			vfe31_ctrl->afStatsControl.bufToRender = 0;
-			vfe31_ctrl->afStatsControl.droppedStatsFrameCount++;
-		}
-	} else {
-		vfe31_ctrl->afStatsControl.bufToRender = 0;
-	}
-
-	if (status_bits & VFE_IRQ_STATUS0_STATS_IHIST) {
-		if (!vfe31_ctrl->ihistStatsControl.ackPending) {
-			vfe31_ctrl->ihistStatsControl.ackPending = TRUE;
-			vfe31_ctrl->ihistStatsControl.bufToRender =
-				vfe31_process_stats_irq_common(statsIhistNum,
-				vfe31_ctrl->ihistStatsControl.nextFrameAddrBuf);
-			process_stats = true;
-		} else {
-			vfe31_ctrl->ihistStatsControl.droppedStatsFrameCount++;
-			vfe31_ctrl->ihistStatsControl.bufToRender = 0;
-		}
-	} else {
-		vfe31_ctrl->ihistStatsControl.bufToRender = 0;
-	}
-
-	if (status_bits & VFE_IRQ_STATUS0_STATS_RS) {
-		if (!vfe31_ctrl->rsStatsControl.ackPending) {
-			vfe31_ctrl->rsStatsControl.ackPending = TRUE;
-			vfe31_ctrl->rsStatsControl.bufToRender =
-				vfe31_process_stats_irq_common(statsRsNum,
-				vfe31_ctrl->rsStatsControl.nextFrameAddrBuf);
-			process_stats = true;
-		} else {
-			vfe31_ctrl->rsStatsControl.droppedStatsFrameCount++;
-			vfe31_ctrl->rsStatsControl.bufToRender = 0;
-		}
-	} else {
-		vfe31_ctrl->rsStatsControl.bufToRender = 0;
-	}
-
-
-	if (status_bits & VFE_IRQ_STATUS0_STATS_CS) {
-		if (!vfe31_ctrl->csStatsControl.ackPending) {
-			vfe31_ctrl->csStatsControl.ackPending = TRUE;
-			vfe31_ctrl->csStatsControl.bufToRender =
-				vfe31_process_stats_irq_common(statsCsNum,
-				vfe31_ctrl->csStatsControl.nextFrameAddrBuf);
-			process_stats = true;
-		} else {
-			vfe31_ctrl->csStatsControl.droppedStatsFrameCount++;
-			vfe31_ctrl->csStatsControl.bufToRender = 0;
-		}
-	} else {
-		vfe31_ctrl->csStatsControl.bufToRender = 0;
-	}
-
-	spin_unlock_irqrestore(&vfe31_ctrl->comp_stats_ack_lock, flags);
-	if (process_stats)
-		vfe_send_comp_stats_msg(status_bits);
-
-	return;
-}
-
-static void vfe31_process_stats_irq(uint32_t *irqstatus)
-{
-	uint32_t status_bits = VFE_COM_STATUS & *irqstatus;
-
-	if ((vfe31_ctrl->hfr_mode != HFR_MODE_OFF) &&
-		(vfe31_ctrl->vfeFrameId % vfe31_ctrl->hfr_mode != 0)) {
-		CDBG("Skip the stats when HFR enabled\n");
-		return;
-	}
-
-	vfe31_process_stats(status_bits);
-	return;
-}
-
-static void vfe31_do_tasklet(unsigned long data)
-{
-	unsigned long flags;
-
-	struct vfe31_isr_queue_cmd *qcmd = NULL;
-
-	CDBG("=== vfe31_do_tasklet start ===\n");
-
-	while (atomic_read(&irq_cnt)) {
-		spin_lock_irqsave(&vfe31_ctrl->tasklet_lock, flags);
-		qcmd = list_first_entry(&vfe31_ctrl->tasklet_q,
-			struct vfe31_isr_queue_cmd, list);
-		atomic_sub(1, &irq_cnt);
-
-		if (!qcmd) {
-			spin_unlock_irqrestore(&vfe31_ctrl->tasklet_lock,
-				flags);
-			return;
-		}
-
-		list_del(&qcmd->list);
-		spin_unlock_irqrestore(&vfe31_ctrl->tasklet_lock,
-			flags);
-
-		if (qcmd->vfeInterruptStatus0 &
-				VFE_IRQ_STATUS0_CAMIF_SOF_MASK) {
-			CDBG("irq	camifSofIrq\n");
-			vfe31_process_camif_sof_irq();
-		}
-		
-		if (qcmd->vfeInterruptStatus0 &
-				VFE_IRQ_STATUS0_REG_UPDATE_MASK) {
-			CDBG("irq	regUpdateIrq\n");
-			vfe31_process_reg_update_irq();
-		}
-
-		if (qcmd->vfeInterruptStatus1 &
-				VFE_IMASK_WHILE_STOPPING_1) {
-			CDBG("irq	resetAckIrq\n");
-			vfe31_process_reset_irq();
-		}
-
-		if (atomic_read(&vfe31_ctrl->vstate)) {
-			if (qcmd->vfeInterruptStatus1 &
-					VFE31_IMASK_ERROR_ONLY_1) {
-				pr_err("irq	errorIrq\n");
-				vfe31_process_error_irq(
-					qcmd->vfeInterruptStatus1 &
-					VFE31_IMASK_ERROR_ONLY_1);
-			}
-			
-			if (qcmd->vfeInterruptStatus0 &
-				VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE0_MASK) {
-				CDBG("Image composite done 0 irq occured.\n");
-				vfe31_process_output_path_irq_0();
-			}
-			if (qcmd->vfeInterruptStatus0 &
-				VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE1_MASK) {
-				CDBG("Image composite done 1 irq occured.\n");
-				vfe31_process_output_path_irq_1();
-			}
-			if (vfe31_ctrl->operation_mode ==
-					VFE_OUTPUTS_THUMB_AND_MAIN ||
-				vfe31_ctrl->operation_mode ==
-					VFE_OUTPUTS_MAIN_AND_THUMB ||
-#if 0
-				vfe31_ctrl->operation_mode ==
-					VFE_OUTPUTS_THUMB_AND_JPEG ||
-				vfe31_ctrl->operation_mode ==
-					VFE_OUTPUTS_JPEG_AND_THUMB ||
-#endif
-				vfe31_ctrl->operation_mode ==
-					VFE_OUTPUTS_RAW) {
-				if ((vfe31_ctrl->outpath.out0.capture_cnt == 0)
-						&& (vfe31_ctrl->outpath.out1.
-						capture_cnt == 0)) {
-					msm_io_w_mb(
-						CAMIF_COMMAND_STOP_IMMEDIATELY,
-						vfe31_ctrl->vfebase +
-						VFE_CAMIF_COMMAND);
-					vfe31_send_isp_msg(vfe31_ctrl,
-						MSG_ID_SNAPSHOT_DONE);
-				}
-			}
-			
-			if (vfe31_ctrl->stats_comp) {
-				
-				if (qcmd->vfeInterruptStatus0 &
-					VFE_IRQ_STATUS0_STATS_COMPOSIT_MASK) {
-					CDBG("Stats composite irq occured.\n");
-					vfe31_process_stats_irq(
-						&qcmd->vfeInterruptStatus0);
-				}
-			} else {
-				
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_STATS_AEC) {
-					CDBG("Stats AEC irq occured.\n");
-					vfe31_process_stats_ae_irq();
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_STATS_AWB) {
-					CDBG("Stats AWB irq occured.\n");
-					vfe31_process_stats_awb_irq();
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_STATS_AF) {
-					CDBG("Stats AF irq occured.\n");
-					vfe31_process_stats_af_irq();
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_STATS_IHIST) {
-					CDBG("Stats IHIST irq occured.\n");
-					vfe31_process_stats_ihist_irq();
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_STATS_RS) {
-					CDBG("Stats RS irq occured.\n");
-					vfe31_process_stats_rs_irq();
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_STATS_CS) {
-					CDBG("Stats CS irq occured.\n");
-					vfe31_process_stats_cs_irq();
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_SYNC_TIMER0) {
-					CDBG("SYNC_TIMER 0 irq occured.\n");
-					vfe31_send_isp_msg(vfe31_ctrl,
-						MSG_ID_SYNC_TIMER0_DONE);
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_SYNC_TIMER1) {
-					CDBG("SYNC_TIMER 1 irq occured.\n");
-					vfe31_send_isp_msg(vfe31_ctrl,
-						MSG_ID_SYNC_TIMER1_DONE);
-				}
-				if (qcmd->vfeInterruptStatus0 &
-						VFE_IRQ_STATUS0_SYNC_TIMER2) {
-					CDBG("SYNC_TIMER 2 irq occured.\n");
-					vfe31_send_isp_msg(vfe31_ctrl,
-						MSG_ID_SYNC_TIMER2_DONE);
-				}
-			}
-		}
-		kfree(qcmd);
-	}
-	CDBG("=== vfe31_do_tasklet end ===\n");
-}
-
-DECLARE_TASKLET(vfe31_tasklet, vfe31_do_tasklet, 0);
-
-static irqreturn_t vfe31_parse_irq(int irq_num, void *data)
-{
-	unsigned long flags;
-	struct vfe31_irq_status irq;
-	struct vfe31_isr_queue_cmd *qcmd;
-
-	CDBG("vfe_parse_irq\n");
-
-	vfe31_read_irq_status(&irq);
-
-	if ((irq.vfeIrqStatus0 == 0) && (irq.vfeIrqStatus1 == 0)) {
-		CDBG("vfe_parse_irq: vfeIrqStatus0 & 1 are both 0!\n");
-		return IRQ_HANDLED;
-	}
-
-	qcmd = kzalloc(sizeof(struct vfe31_isr_queue_cmd),
-		GFP_ATOMIC);
-	if (!qcmd) {
-		pr_err("vfe_parse_irq: qcmd malloc failed!\n");
-		return IRQ_HANDLED;
-	}
-
-	spin_lock_irqsave(&vfe31_ctrl->stop_flag_lock, flags);
-	if (vfe31_ctrl->stop_ack_pending) {
-		irq.vfeIrqStatus0 &= VFE_IMASK_WHILE_STOPPING_0;
-		irq.vfeIrqStatus1 &= VFE_IMASK_WHILE_STOPPING_1;
-	}
-	spin_unlock_irqrestore(&vfe31_ctrl->stop_flag_lock, flags);
-
-	CDBG("vfe_parse_irq: Irq_status0 = 0x%x, Irq_status1 = 0x%x.\n",
-		irq.vfeIrqStatus0, irq.vfeIrqStatus1);
-
-	qcmd->vfeInterruptStatus0 = irq.vfeIrqStatus0;
-	qcmd->vfeInterruptStatus1 = irq.vfeIrqStatus1;
-
-	spin_lock_irqsave(&vfe31_ctrl->tasklet_lock, flags);
-	list_add_tail(&qcmd->list, &vfe31_ctrl->tasklet_q);
-
-	atomic_add(1, &irq_cnt);
-	spin_unlock_irqrestore(&vfe31_ctrl->tasklet_lock, flags);
-	tasklet_schedule(&vfe31_tasklet);
-	return IRQ_HANDLED;
-}
-
-static long msm_vfe_subdev_ioctl(struct v4l2_subdev *sd,
-			unsigned int subdev_cmd, void *arg)
-{
-	struct msm_cam_media_controller *pmctl =
-		(struct msm_cam_media_controller *)v4l2_get_subdev_hostdata(sd);
-	struct msm_isp_cmd vfecmd;
-	struct msm_camvfe_params *vfe_params =
-		(struct msm_camvfe_params *)arg;
-	struct msm_vfe_cfg_cmd *cmd = vfe_params->vfe_cfg;
-	void *data = vfe_params->data;
-
-	long rc = 0;
-	uint32_t i = 0;
-	struct vfe_cmd_stats_buf *scfg = NULL;
-	struct msm_pmem_region   *regptr = NULL;
-	struct vfe_cmd_stats_ack *sack = NULL;
-	if (cmd->cmd_type != CMD_CONFIG_PING_ADDR &&
-		cmd->cmd_type != CMD_CONFIG_PONG_ADDR &&
-		cmd->cmd_type != CMD_CONFIG_FREE_BUF_ADDR &&
-		cmd->cmd_type != CMD_STATS_AEC_BUF_RELEASE &&
-		cmd->cmd_type != CMD_STATS_AWB_BUF_RELEASE &&
-		cmd->cmd_type != CMD_STATS_IHIST_BUF_RELEASE &&
-		cmd->cmd_type != CMD_STATS_RS_BUF_RELEASE &&
-		cmd->cmd_type != CMD_STATS_CS_BUF_RELEASE &&
-		cmd->cmd_type != CMD_STATS_AF_BUF_RELEASE) {
-		if (copy_from_user(&vfecmd,
-				(void __user *)(cmd->value),
-				sizeof(vfecmd))) {
-			pr_err("%s %d: copy_from_user failed\n", __func__,
-				__LINE__);
-			return -EFAULT;
-		}
-	} else {
-	
-		if (cmd->cmd_type != CMD_CONFIG_PING_ADDR &&
-			cmd->cmd_type != CMD_CONFIG_PONG_ADDR &&
-			cmd->cmd_type != CMD_CONFIG_FREE_BUF_ADDR) {
-			
-			if (!data)
-				return -EFAULT;
-			sack = kmalloc(sizeof(struct vfe_cmd_stats_ack),
-							GFP_ATOMIC);
-			if (!sack)
-				return -ENOMEM;
-
-			sack->nextStatsBuf = *(uint32_t *)data;
-		}
-	}
-
-	CDBG("%s: cmdType = %d\n", __func__, cmd->cmd_type);
-
-	if ((cmd->cmd_type == CMD_STATS_AF_ENABLE)    ||
-		(cmd->cmd_type == CMD_STATS_AWB_ENABLE)   ||
-		(cmd->cmd_type == CMD_STATS_IHIST_ENABLE) ||
-		(cmd->cmd_type == CMD_STATS_RS_ENABLE)    ||
-		(cmd->cmd_type == CMD_STATS_CS_ENABLE)    ||
-		(cmd->cmd_type == CMD_STATS_AEC_ENABLE)) {
-		struct axidata *axid;
-		axid = data;
-		if (!axid) {
-			rc = -EFAULT;
-			goto vfe31_config_done;
-		}
-
-		scfg =
-			kmalloc(sizeof(struct vfe_cmd_stats_buf),
-				GFP_ATOMIC);
-		if (!scfg) {
-			rc = -ENOMEM;
-			goto vfe31_config_done;
-		}
-		regptr = axid->region;
-		if (axid->bufnum1 > 0) {
-			for (i = 0; i < axid->bufnum1; i++) {
-				scfg->statsBuf[i] =
-					(uint32_t)(regptr->paddr);
-				regptr++;
-			}
-		}
-		
-		switch (cmd->cmd_type) {
-		case CMD_STATS_AEC_ENABLE:
-			rc = vfe_stats_aec_buf_init(scfg);
-			break;
-		case CMD_STATS_AF_ENABLE:
-			rc = vfe_stats_af_buf_init(scfg);
-			break;
-		case CMD_STATS_AWB_ENABLE:
-			rc = vfe_stats_awb_buf_init(scfg);
-			break;
-		case CMD_STATS_IHIST_ENABLE:
-			rc = vfe_stats_ihist_buf_init(scfg);
-			break;
-		case CMD_STATS_RS_ENABLE:
-			rc = vfe_stats_rs_buf_init(scfg);
-			break;
-		case CMD_STATS_CS_ENABLE:
-			rc = vfe_stats_cs_buf_init(scfg);
-			break;
-		default:
-			pr_err("%s Unsupported cmd type %d",
-				__func__, cmd->cmd_type);
-			break;
-		}
-		goto vfe31_config_done;
-	}
-	switch (cmd->cmd_type) {
-	case CMD_GENERAL: {
-		rc = vfe31_proc_general(pmctl, &vfecmd);
-		}
-		break;
-
-	case CMD_CONFIG_PING_ADDR: {
-		int path = *((int *)cmd->value);
-		struct vfe31_output_ch *outch = vfe31_get_ch(path);
-		outch->ping = *((struct msm_free_buf *)data);
-	}
-		break;
-
-	case CMD_CONFIG_PONG_ADDR: {
-		int path = *((int *)cmd->value);
-		struct vfe31_output_ch *outch = vfe31_get_ch(path);
-		outch->pong = *((struct msm_free_buf *)data);
-	}
-		break;
-
-	case CMD_CONFIG_FREE_BUF_ADDR: {
-		int path = *((int *)cmd->value);
-		struct vfe31_output_ch *outch = vfe31_get_ch(path);
-		outch->free_buf = *((struct msm_free_buf *)data);
-	}
-		break;
-
-	case CMD_SNAP_BUF_RELEASE:
-		break;
-	case CMD_STATS_AEC_BUF_RELEASE:
-		vfe31_stats_aec_ack(sack);
-		break;
-	case CMD_STATS_AF_BUF_RELEASE:
-		vfe31_stats_af_ack(sack);
-		break;
-	case CMD_STATS_AWB_BUF_RELEASE:
-		vfe31_stats_awb_ack(sack);
-		break;
-
-	case CMD_STATS_IHIST_BUF_RELEASE:
-		vfe31_stats_ihist_ack(sack);
-		break;
-	case CMD_STATS_RS_BUF_RELEASE:
-		vfe31_stats_rs_ack(sack);
-		break;
-	case CMD_STATS_CS_BUF_RELEASE:
-		vfe31_stats_cs_ack(sack);
-		break;
-
-	case CMD_AXI_CFG_PRIM: {
-		uint32_t *axio = NULL;
-		axio = kmalloc(vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length,
-				GFP_ATOMIC);
-		if (!axio) {
-			rc = -ENOMEM;
-			break;
-		}
-
-		if (copy_from_user(axio, (void __user *)(vfecmd.value),
-				vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length)) {
-			kfree(axio);
-			rc = -EFAULT;
-			break;
-		}
-		vfe31_config_axi(OUTPUT_PRIM, axio);
-		kfree(axio);
-	}
-		break;
-	case CMD_AXI_CFG_PRIM_ALL_CHNLS: {
-		uint32_t *axio = NULL;
-		axio = kmalloc(vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length,
-				GFP_ATOMIC);
-		if (!axio) {
-			rc = -ENOMEM;
-			break;
-		}
-
-		if (copy_from_user(axio, (void __user *)(vfecmd.value),
-				vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length)) {
-			kfree(axio);
-			rc = -EFAULT;
-			break;
-		}
-		vfe31_config_axi(OUTPUT_PRIM_ALL_CHNLS, axio);
-		kfree(axio);
-	}
-		break;
-	case CMD_AXI_CFG_PRIM|CMD_AXI_CFG_SEC: {
-		uint32_t *axio = NULL;
-		axio = kmalloc(vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length,
-				GFP_ATOMIC);
-		if (!axio) {
-			rc = -ENOMEM;
-			break;
-		}
-
-		if (copy_from_user(axio, (void __user *)(vfecmd.value),
-				vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length)) {
-			kfree(axio);
-			rc = -EFAULT;
-			break;
-		}
-		vfe31_config_axi(OUTPUT_PRIM|OUTPUT_SEC, axio);
-		kfree(axio);
-	}
-		break;
-	case CMD_AXI_CFG_PRIM|CMD_AXI_CFG_SEC_ALL_CHNLS: {
-		uint32_t *axio = NULL;
-		axio = kmalloc(vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length,
-				GFP_ATOMIC);
-		if (!axio) {
-			rc = -ENOMEM;
-			break;
-		}
-
-		if (copy_from_user(axio, (void __user *)(vfecmd.value),
-				vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length)) {
-			kfree(axio);
-			rc = -EFAULT;
-			break;
-		}
-		vfe31_config_axi(OUTPUT_PRIM|OUTPUT_SEC_ALL_CHNLS, axio);
-		kfree(axio);
-	}
-		break;
-	case CMD_AXI_CFG_PRIM_ALL_CHNLS|CMD_AXI_CFG_SEC: {
-		uint32_t *axio = NULL;
-		axio = kmalloc(vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length,
-				GFP_ATOMIC);
-		if (!axio) {
-			rc = -ENOMEM;
-			break;
-		}
-
-		if (copy_from_user(axio, (void __user *)(vfecmd.value),
-				vfe31_cmd[VFE_CMD_AXI_OUT_CFG].length)) {
-			kfree(axio);
-			rc = -EFAULT;
-			break;
-		}
-		vfe31_config_axi(OUTPUT_PRIM_ALL_CHNLS|OUTPUT_SEC, axio);
-		kfree(axio);
-	}
-		break;
-	case CMD_AXI_CFG_PRIM_ALL_CHNLS|CMD_AXI_CFG_SEC_ALL_CHNLS:
-		pr_err("%s Invalid/Unsupported AXI configuration %x",
-			__func__, cmd->cmd_type);
-		break;
-	default:
-		pr_err("%s Unsupported AXI configuration %x ", __func__,
-			cmd->cmd_type);
-		break;
-	}
-vfe31_config_done:
-	kfree(scfg);
-	kfree(sack);
-	CDBG("%s done: rc = %d\n", __func__, (int) rc);
-	return rc;
-}
-
-static int msm_vfe_subdev_s_crystal_freq(struct v4l2_subdev *sd,
-						u32 freq, u32 flags)
-{
-	int rc = 0;
-	int round_rate;
-
-	round_rate = clk_round_rate(vfe31_ctrl->vfe_clk[0], freq);
-	if (rc < 0) {
-		pr_err("%s: clk_round_rate failed %d\n",
-					__func__, rc);
-		return rc;
-	}
-
-	vfe_clk_rate = round_rate;
-	rc = clk_set_rate(vfe31_ctrl->vfe_clk[0], round_rate);
-	if (rc < 0)
-		pr_err("%s: clk_set_rate failed %d\n",
-					__func__, rc);
-
-	return rc;
-}
-
-static const struct v4l2_subdev_video_ops msm_vfe_subdev_video_ops = {
-	.s_crystal_freq = msm_vfe_subdev_s_crystal_freq,
-};
-
-static const struct v4l2_subdev_core_ops msm_vfe_subdev_core_ops = {
-	.ioctl = msm_vfe_subdev_ioctl,
-};
-
-static const struct v4l2_subdev_ops msm_vfe_subdev_ops = {
-	.core = &msm_vfe_subdev_core_ops,
-	.video = &msm_vfe_subdev_video_ops,
-};
-
-static struct msm_cam_clk_info vfe_clk_info[] = {
-	{"vfe_clk", 228570000},
-	{"vfe_pclk", -1},
-	{"csi0_vfe_clk", -1},
-	{"csi1_vfe_clk", -1},
-};
-
-int msm_vfe_subdev_init(struct v4l2_subdev *sd,
-			struct msm_cam_media_controller *mctl)
-{
-	int rc = 0;
-	struct clk *clk1;
-	v4l2_set_subdev_hostdata(sd, mctl);
-
-	spin_lock_init(&vfe31_ctrl->stop_flag_lock);
-	spin_lock_init(&vfe31_ctrl->state_lock);
-	spin_lock_init(&vfe31_ctrl->io_lock);
-	spin_lock_init(&vfe31_ctrl->update_ack_lock);
-	spin_lock_init(&vfe31_ctrl->tasklet_lock);
-
-	spin_lock_init(&vfe31_ctrl->aec_ack_lock);
-	spin_lock_init(&vfe31_ctrl->awb_ack_lock);
-	spin_lock_init(&vfe31_ctrl->af_ack_lock);
-	spin_lock_init(&vfe31_ctrl->ihist_ack_lock);
-	spin_lock_init(&vfe31_ctrl->rs_ack_lock);
-	spin_lock_init(&vfe31_ctrl->cs_ack_lock);
-	spin_lock_init(&vfe31_ctrl->comp_stats_ack_lock);
-	spin_lock_init(&vfe31_ctrl->sd_notify_lock);
-	INIT_LIST_HEAD(&vfe31_ctrl->tasklet_q);
-
-	vfe31_ctrl->update_linear = false;
-	vfe31_ctrl->update_rolloff = false;
-	vfe31_ctrl->update_la = false;
-	vfe31_ctrl->update_gamma = false;
-	vfe31_ctrl->hfr_mode = HFR_MODE_OFF;
-
-	vfe31_ctrl->vfebase = ioremap(vfe31_ctrl->vfemem->start,
-		resource_size(vfe31_ctrl->vfemem));
-	if (!vfe31_ctrl->vfebase) {
-		rc = -ENOMEM;
-		pr_err("%s: vfe ioremap failed\n", __func__);
-		goto vfe_remap_failed;
-	}
-
-	if (vfe31_ctrl->fs_vfe == NULL) {
-		vfe31_ctrl->fs_vfe =
-			regulator_get(&vfe31_ctrl->pdev->dev, "fs_vfe");
-		if (IS_ERR(vfe31_ctrl->fs_vfe)) {
-			pr_err("%s: Regulator FS_VFE get failed %ld\n",
-				__func__, PTR_ERR(vfe31_ctrl->fs_vfe));
-			vfe31_ctrl->fs_vfe = NULL;
-			goto vfe_fs_failed;
-		} else if (regulator_enable(vfe31_ctrl->fs_vfe)) {
-			pr_err("%s: Regulator FS_VFE enable failed\n",
-							__func__);
-			regulator_put(vfe31_ctrl->fs_vfe);
-			vfe31_ctrl->fs_vfe = NULL;
-			goto vfe_fs_failed;
-		}
-	}
-
-	clk1 = clk_get(&vfe31_ctrl->pdev->dev, "csi0_vfe_clk");
-	if (IS_ERR(clk1)) {
-		pr_err("%s: did not get csi0_vfe_clk\n", __func__);
-		return PTR_ERR(clk1);
-	}
-
-	rc = clk_reset(clk1, CLK_RESET_ASSERT);
-	if (rc) {
-		pr_err("%s:csi0_vfe_clk assert failed\n", __func__);
-		clk_put(clk1);
-		return rc;
-	}
-
-	usleep_range(1000, 1200);
-	rc = clk_reset(clk1, CLK_RESET_DEASSERT);
-	if (rc) {
-		pr_err("%s:csi0_vfe_clk deassert failed\n", __func__);
-		clk_put(clk1);
-		return rc;
-	}
-
-	clk_put(clk1);
-
-	vfe_clk_rate = 228570000;
-
-	rc = msm_cam_clk_enable(&vfe31_ctrl->pdev->dev, vfe_clk_info,
-		vfe31_ctrl->vfe_clk, ARRAY_SIZE(vfe_clk_info), 1);
-	if (rc < 0)
-		goto vfe_clk_enable_failed;
-
-	msm_camio_bus_scale_cfg(
-		mctl->sdata->pdata->cam_bus_scale_table, S_INIT);
-	msm_camio_bus_scale_cfg(
-		mctl->sdata->pdata->cam_bus_scale_table, S_PREVIEW);
-	vfe31_ctrl->register_total = VFE31_REGISTER_TOTAL;
-
-	enable_irq(vfe31_ctrl->vfeirq->start);
-
-	return rc;
-
-vfe_clk_enable_failed:
-	regulator_disable(vfe31_ctrl->fs_vfe);
-	regulator_put(vfe31_ctrl->fs_vfe);
-	vfe31_ctrl->fs_vfe = NULL;
-vfe_fs_failed:
-	iounmap(vfe31_ctrl->vfebase);
-vfe_remap_failed:
-	disable_irq(vfe31_ctrl->vfeirq->start);
-	return rc;
-}
-
-void msm_vfe_subdev_release(struct v4l2_subdev *sd)
-{
-	struct msm_cam_media_controller *pmctl =
-		(struct msm_cam_media_controller *)v4l2_get_subdev_hostdata(sd);
-	disable_irq(vfe31_ctrl->vfeirq->start);
-	tasklet_kill(&vfe31_tasklet);
-	msm_cam_clk_enable(&vfe31_ctrl->pdev->dev, vfe_clk_info,
-			vfe31_ctrl->vfe_clk, ARRAY_SIZE(vfe_clk_info), 0);
-	if (vfe31_ctrl->fs_vfe) {
-		regulator_disable(vfe31_ctrl->fs_vfe);
-		regulator_put(vfe31_ctrl->fs_vfe);
-		vfe31_ctrl->fs_vfe = NULL;
-	}
-	CDBG("%s, 31ee_irq\n", __func__);
-	iounmap(vfe31_ctrl->vfebase);
-
-	if (atomic_read(&irq_cnt))
-		pr_warning("%s, Warning IRQ Count not ZERO\n", __func__);
-
-	msm_camio_bus_scale_cfg(
-		pmctl->sdata->pdata->cam_bus_scale_table, S_EXIT);
-}
-
-
-static int __devinit vfe31_probe(struct platform_device *pdev)
-{
-	int rc = 0;
-	CDBG("%s: device id = %d\n", __func__, pdev->id);
-	vfe31_ctrl = kzalloc(sizeof(struct vfe31_ctrl_type), GFP_KERNEL);
-	if (!vfe31_ctrl) {
-		pr_err("%s: no enough memory\n", __func__);
-		return -ENOMEM;
-	}
-
-	v4l2_subdev_init(&vfe31_ctrl->subdev, &msm_vfe_subdev_ops);
-	snprintf(vfe31_ctrl->subdev.name,
-			 sizeof(vfe31_ctrl->subdev.name), "vfe3.1");
-	v4l2_set_subdevdata(&vfe31_ctrl->subdev, vfe31_ctrl);
-	platform_set_drvdata(pdev, &vfe31_ctrl->subdev);
-
-	vfe31_ctrl->vfemem = platform_get_resource_byname(pdev,
-					IORESOURCE_MEM, "msm_vfe");
-	if (!vfe31_ctrl->vfemem) {
-		pr_err("%s: no mem resource?\n", __func__);
-		rc = -ENODEV;
-		goto vfe31_no_resource;
-	}
-	vfe31_ctrl->vfeirq = platform_get_resource_byname(pdev,
-					IORESOURCE_IRQ, "msm_vfe");
-	if (!vfe31_ctrl->vfeirq) {
-		pr_err("%s: no irq resource?\n", __func__);
-		rc = -ENODEV;
-		goto vfe31_no_resource;
-	}
-
-	vfe31_ctrl->vfeio = request_mem_region(vfe31_ctrl->vfemem->start,
-		resource_size(vfe31_ctrl->vfemem), pdev->name);
-	if (!vfe31_ctrl->vfeio) {
-		pr_err("%s: no valid mem region\n", __func__);
-		rc = -EBUSY;
-		goto vfe31_no_resource;
-	}
-
-	rc = request_irq(vfe31_ctrl->vfeirq->start, vfe31_parse_irq,
-		IRQF_TRIGGER_RISING, "vfe", 0);
-	if (rc < 0) {
-		release_mem_region(vfe31_ctrl->vfemem->start,
-			resource_size(vfe31_ctrl->vfemem));
-		pr_err("%s: irq request fail\n", __func__);
-		rc = -EBUSY;
-		goto vfe31_no_resource;
-	}
-
-	disable_irq(vfe31_ctrl->vfeirq->start);
-
-	vfe31_ctrl->pdev = pdev;
-	msm_cam_register_subdev_node(&vfe31_ctrl->subdev, VFE_DEV, 0);
-	return 0;
-
-vfe31_no_resource:
-	kfree(vfe31_ctrl);
-	return 0;
-}
-
-static struct platform_driver vfe31_driver = {
-	.probe = vfe31_probe,
-	.driver = {
-		.name = MSM_VFE_DRV_NAME,
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init msm_vfe31_init_module(void)
-{
-	return platform_driver_register(&vfe31_driver);
-}
-
-static void __exit msm_vfe31_exit_module(void)
-{
-	platform_driver_unregister(&vfe31_driver);
-}
-
-module_init(msm_vfe31_init_module);
-module_exit(msm_vfe31_exit_module);
-MODULE_DESCRIPTION("VFE 3.1 driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/msm_vfe31_v4l2.h b/drivers/media/video/msm/msm_vfe31_v4l2.h
deleted file mode 100644
index dd88b49..0000000
--- a/drivers/media/video/msm/msm_vfe31_v4l2.h
+++ /dev/null
@@ -1,889 +0,0 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#ifndef __MSM_VFE31_V4L2_H__
-#define __MSM_VFE31_V4L2_H__
-
-#include <linux/bitops.h>
-
-#define TRUE  1
-#define FALSE 0
-
-#define VFE31_REGISTER_TOTAL 0x0000017F
-
-#define CAMIF_COMMAND_START  0x00000005
-
-#define CAMIF_COMMAND_CLEAR  0x00000004
-
-#define CAMIF_COMMAND_STOP_IMMEDIATELY  0x00000002
-
-#define CAMIF_COMMAND_STOP_AT_FRAME_BOUNDARY  0x00000000
-
-#define AXI_HALT  0x00000001
-
-#define AXI_HALT_CLEAR  0x00000000
-
-#define MASK_AXI_HALT_IRQ	0xFF7FFFFF
-
-#define VFE_RESET_UPON_STOP_CMD  0x000003ef
-
-#define VFE_RESET_UPON_RESET_CMD  0x000003ff
-
-#define AXI_STATUS_BUSY_MASK 0x00000020
-
-#define VFE_COMP_IRQ_BOTH_Y_CBCR 3
-
-#define VFE_COMP_IRQ_CBCR_ONLY 2
-
-#define VFE_COMP_IRQ_Y_ONLY 1
-
-#define VFE_PERFORMANCE_MONITOR_GO   0x00000001
-#define VFE_PERFORMANCE_MONITOR_STOP 0x00000002
-
-#define VFE_TEST_GEN_GO   0x00000001
-#define VFE_TEST_GEN_STOP 0x00000002
-
-#define VFE_CHROMA_UPSAMPLE_INTERPOLATED 0
-
-#define VFE_DISABLE_ALL_IRQS 0
-#define VFE_CLEAR_ALL_IRQS   0xffffffff
-
-#define VFE_IRQ_STATUS0_CAMIF_SOF_MASK            0x00000001
-#define VFE_IRQ_STATUS0_CAMIF_EOF_MASK            0x00000004
-#define VFE_IRQ_STATUS0_REG_UPDATE_MASK           0x00000020
-#define VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE0_MASK 0x00200000
-#define VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE1_MASK 0x00400000
-#define VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE2_MASK 0x00800000
-#define VFE_IRQ_STATUS1_RESET_AXI_HALT_ACK_MASK   0x00800000
-#define VFE_IRQ_STATUS0_STATS_COMPOSIT_MASK       0x01000000
-
-#define VFE_IRQ_STATUS0_STATS_AEC     0x2000  
-#define VFE_IRQ_STATUS0_STATS_AF      0x4000  
-#define VFE_IRQ_STATUS0_STATS_AWB     0x8000  
-#define VFE_IRQ_STATUS0_STATS_RS      0x10000  
-#define VFE_IRQ_STATUS0_STATS_CS      0x20000  
-#define VFE_IRQ_STATUS0_STATS_IHIST   0x40000  
-
-#define VFE_IRQ_STATUS0_SYNC_TIMER0   0x2000000  
-#define VFE_IRQ_STATUS0_SYNC_TIMER1   0x4000000  
-#define VFE_IRQ_STATUS0_SYNC_TIMER2   0x8000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER0  0x10000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER1  0x20000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER2  0x40000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER3  0x80000000  
-
-#define VFE_IMASK_WHILE_STOPPING_0  0xF0000000
-#define VFE_IMASK_WHILE_STOPPING_1  0x00400000
-#define VFE_IMASK_RESET             0x00400000
-#define VFE_IMASK_AXI_HALT          0x00800000
-
-
-#define VFE_IMASK_ERROR_ONLY_0  0x0
-#define VFE_IMASK_ERROR_ONLY_1  0x003fffff
-
-#define BPC_MASK 0xF80C0FFE
-
-#define ABF_MASK 0xFFFFFFF9
-
-#define DBPC_MASK 0xFFFFFFFE
-
-#define DBCC_MASK 0xFFFFFFFD
-
-#define DEMOSAIC_MASK 0x8FFFFFFF
-#define MCE_EN_MASK 0xEFFFFFFF
-
-#define MCE_Q_K_MASK 0x0FFFFFFF
-
-#define AE_BG_ENABLE_MASK 0x00000020      
-#define AF_BF_ENABLE_MASK 0x00000040      
-#define AWB_ENABLE_MASK 0x00000080     
-
-#define RS_ENABLE_MASK 0x00000100      
-#define CS_ENABLE_MASK 0x00000200      
-#define RS_CS_ENABLE_MASK 0x00000300   
-#define IHIST_ENABLE_MASK 0x00008000   
-#define STATS_ENABLE_MASK 0x000483E0   
-
-#define VFE_REG_UPDATE_TRIGGER           1
-#define VFE_PM_BUF_MAX_CNT_MASK          0xFF
-#define VFE_DMI_CFG_DEFAULT              0x00000100
-#define VFE_AE_PINGPONG_STATUS_BIT       0x80
-#define VFE_AF_PINGPONG_STATUS_BIT       0x100
-#define VFE_AWB_PINGPONG_STATUS_BIT      0x200
-
-#define HFR_MODE_OFF 1
-#define VFE_FRAME_SKIP_PERIOD_MASK 0x0000001F 
-
-enum VFE31_DMI_RAM_SEL {
-	 NO_MEM_SELECTED          = 0,
-	 ROLLOFF_RAM              = 0x1,
-	 RGBLUT_RAM_CH0_BANK0     = 0x2,
-	 RGBLUT_RAM_CH0_BANK1     = 0x3,
-	 RGBLUT_RAM_CH1_BANK0     = 0x4,
-	 RGBLUT_RAM_CH1_BANK1     = 0x5,
-	 RGBLUT_RAM_CH2_BANK0     = 0x6,
-	 RGBLUT_RAM_CH2_BANK1     = 0x7,
-	 STATS_HIST_RAM           = 0x8,
-	 RGBLUT_CHX_BANK0         = 0x9,
-	 RGBLUT_CHX_BANK1         = 0xa,
-	 LUMA_ADAPT_LUT_RAM_BANK0 = 0xb,
-	 LUMA_ADAPT_LUT_RAM_BANK1 = 0xc
-};
-
-enum vfe_output_state {
-	VFE_STATE_IDLE,
-	VFE_STATE_START_REQUESTED,
-	VFE_STATE_STARTED,
-	VFE_STATE_STOP_REQUESTED,
-	VFE_STATE_STOPPED,
-};
-
-#define V31_CAMIF_OFF             0x000001E4
-#define V31_CAMIF_LEN             32
-
-#define V31_DEMUX_OFF             0x00000284
-#define V31_DEMUX_LEN             20
-
-#define V31_DEMOSAICV3_UP_REG_CNT 5
-
-#define V31_OUT_CLAMP_OFF         0x00000524
-#define V31_OUT_CLAMP_LEN         8
-
-#define V31_OPERATION_CFG_LEN     32
-
-#define V31_AXI_OUT_OFF           0x00000038
-#define V31_AXI_OUT_LEN           212
-#define V31_AXI_CH_INF_LEN        24
-#define V31_AXI_CFG_LEN           47
-#define V31_AXI_RESERVED            1
-
-#define V31_FRAME_SKIP_OFF        0x00000504
-#define V31_FRAME_SKIP_LEN        32
-
-#define V31_CHROMA_SUBS_OFF       0x000004F8
-#define V31_CHROMA_SUBS_LEN       12
-
-#define V31_FOV_OFF           0x00000360
-#define V31_FOV_LEN           8
-
-#define V31_MAIN_SCALER_OFF 0x00000368
-#define V31_MAIN_SCALER_LEN 28
-
-#define V31_S2Y_OFF 0x000004D0
-#define V31_S2Y_LEN 20
-
-#define V31_S2CbCr_OFF 0x000004E4
-#define V31_S2CbCr_LEN 20
-
-#define V31_CHROMA_EN_OFF 0x000003C4
-#define V31_CHROMA_EN_LEN 36
-
-#define V31_SYNC_TIMER_OFF      0x0000020C
-#define V31_SYNC_TIMER_POLARITY_OFF 0x00000234
-#define V31_TIMER_SELECT_OFF        0x0000025C
-#define V31_SYNC_TIMER_LEN 28
-
-#define V31_ASYNC_TIMER_OFF 0x00000238
-#define V31_ASYNC_TIMER_LEN 28
-
-#define V31_BLACK_LEVEL_OFF 0x00000264
-#define V31_BLACK_LEVEL_LEN 16
-
-#define V31_MESH_ROLL_OFF_CFG_OFF             0x00000274
-#define V31_MESH_ROLL_OFF_CFG_LEN             16
-#define V31_MESH_ROLL_OFF_INIT_TABLE_SIZE     13
-#define V31_MESH_ROLL_OFF_DELTA_TABLE_SIZE    208
-#define V31_MESH_ROLL_OFF_DELTA_TABLE_OFFSET  32
-
-#define V31_COLOR_COR_OFF 0x00000388
-#define V31_COLOR_COR_LEN 52
-
-#define V31_WB_OFF 0x00000384
-#define V31_WB_LEN 4
-
-#define V31_RGB_G_OFF 0x000003BC
-#define V31_RGB_G_LEN 4
-
-#define V31_LA_OFF 0x000003C0
-#define V31_LA_LEN 4
-
-#define V31_SCE_OFF 0x00000418
-#define V31_SCE_LEN 136
-
-#define V31_CHROMA_SUP_OFF 0x000003E8
-#define V31_CHROMA_SUP_LEN 12
-
-#define V31_MCE_OFF 0x000003F4
-#define V31_MCE_LEN 36
-#define V31_STATS_AF_OFF 0x0000053c
-#define V31_STATS_AF_LEN 16
-
-#define V31_STATS_AE_OFF 0x00000534
-#define V31_STATS_AE_LEN 8
-
-#define V31_STATS_AWB_OFF 0x0000054c
-#define V31_STATS_AWB_LEN 32
-
-#define V31_STATS_IHIST_OFF 0x0000057c
-#define V31_STATS_IHIST_LEN 8
-
-#define V31_STATS_RS_OFF 0x0000056c
-#define V31_STATS_RS_LEN 8
-
-#define V31_STATS_CS_OFF 0x00000574
-#define V31_STATS_CS_LEN 8
-
-#define V31_ASF_OFF 0x000004A0
-#define V31_ASF_LEN 48
-#define V31_ASF_UPDATE_LEN 36
-#define V31_CAPTURE_LEN 4
-#define V31_GET_HW_VERSION_OFF 0
-#define V31_GET_HW_VERSION_LEN 4
-#define V31_DEMOSAICV3_OFF 0x00000298
-#define V31_DEMOSAICV3_LEN 4
-#define V31_DEMOSAICV3_DBPC_CFG_OFF  0x0000029C
-#define V31_DEMOSAICV3_DBPC_LEN 8
-#define V31_XBAR_CFG_OFF 0x00000040
-#define V31_DEMOSAICV3_ABF_OFF 0x000002A4
-#define V31_DEMOSAICV3_ABF_LEN 180
-#define V31_XBAR_CFG_LEN 8
-
-#define V31_MODULE_CFG_OFF 0x00000010
-#define V31_MODULE_CFG_LEN 4
-#define V31_EZTUNE_CFG_OFF 0x00000010
-#define V31_EZTUNE_CFG_LEN 4
-
-struct vfe_cmd_hw_version {
-	uint32_t minorVersion;
-	uint32_t majorVersion;
-	uint32_t coreVersion;
-};
-
-enum VFE_AXI_OUTPUT_MODE {
-	VFE_AXI_OUTPUT_MODE_Output1,
-	VFE_AXI_OUTPUT_MODE_Output2,
-	VFE_AXI_OUTPUT_MODE_Output1AndOutput2,
-	VFE_AXI_OUTPUT_MODE_CAMIFToAXIViaOutput2,
-	VFE_AXI_OUTPUT_MODE_Output2AndCAMIFToAXIViaOutput1,
-	VFE_AXI_OUTPUT_MODE_Output1AndCAMIFToAXIViaOutput2,
-	VFE_AXI_LAST_OUTPUT_MODE_ENUM
-};
-
-enum VFE_RAW_WR_PATH_SEL {
-	VFE_RAW_OUTPUT_DISABLED,
-	VFE_RAW_OUTPUT_ENC_CBCR_PATH,
-	VFE_RAW_OUTPUT_VIEW_CBCR_PATH,
-	VFE_RAW_OUTPUT_PATH_INVALID
-};
-
-#define VFE_AXI_OUTPUT_BURST_LENGTH     4
-#define VFE_MAX_NUM_FRAGMENTS_PER_FRAME 4
-#define VFE_AXI_OUTPUT_CFG_FRAME_COUNT  3
-
-struct vfe_cmds_per_write_master {
-	uint16_t imageWidth;
-	uint16_t imageHeight;
-	uint16_t outRowCount;
-	uint16_t outRowIncrement;
-	uint32_t outFragments[VFE_AXI_OUTPUT_CFG_FRAME_COUNT]
-		[VFE_MAX_NUM_FRAGMENTS_PER_FRAME];
-};
-
-struct vfe_cmds_axi_per_output_path {
-	uint8_t fragmentCount;
-	struct vfe_cmds_per_write_master firstWM;
-	struct vfe_cmds_per_write_master secondWM;
-};
-
-enum VFE_AXI_BURST_LENGTH {
-	VFE_AXI_BURST_LENGTH_IS_2  = 2,
-	VFE_AXI_BURST_LENGTH_IS_4  = 4,
-	VFE_AXI_BURST_LENGTH_IS_8  = 8,
-	VFE_AXI_BURST_LENGTH_IS_16 = 16
-};
-
-struct vfe_cmd_fov_crop_config {
-	uint8_t enable;
-	uint16_t firstPixel;
-	uint16_t lastPixel;
-	uint16_t firstLine;
-	uint16_t lastLine;
-};
-
-struct vfe_cmds_main_scaler_stripe_init {
-	uint16_t MNCounterInit;
-	uint16_t phaseInit;
-};
-
-struct vfe_cmds_scaler_one_dimension {
-	uint8_t  enable;
-	uint16_t inputSize;
-	uint16_t outputSize;
-	uint32_t phaseMultiplicationFactor;
-	uint8_t  interpolationResolution;
-};
-
-struct vfe_cmd_main_scaler_config {
-	uint8_t enable;
-	struct vfe_cmds_scaler_one_dimension    hconfig;
-	struct vfe_cmds_scaler_one_dimension    vconfig;
-	struct vfe_cmds_main_scaler_stripe_init MNInitH;
-	struct vfe_cmds_main_scaler_stripe_init MNInitV;
-};
-
-struct vfe_cmd_scaler2_config {
-	uint8_t enable;
-	struct vfe_cmds_scaler_one_dimension hconfig;
-	struct vfe_cmds_scaler_one_dimension vconfig;
-};
-
-
-struct vfe_cmd_frame_skip_update {
-	uint32_t output1Pattern;
-	uint32_t output2Pattern;
-};
-
-struct vfe_cmd_output_clamp_config {
-	uint8_t minCh0;
-	uint8_t minCh1;
-	uint8_t minCh2;
-	uint8_t maxCh0;
-	uint8_t maxCh1;
-	uint8_t maxCh2;
-};
-
-struct vfe_cmd_chroma_subsample_config {
-	uint8_t enable;
-	uint8_t cropEnable;
-	uint8_t vsubSampleEnable;
-	uint8_t hsubSampleEnable;
-	uint8_t vCosited;
-	uint8_t hCosited;
-	uint8_t vCositedPhase;
-	uint8_t hCositedPhase;
-	uint16_t cropWidthFirstPixel;
-	uint16_t cropWidthLastPixel;
-	uint16_t cropHeightFirstLine;
-	uint16_t cropHeightLastLine;
-};
-
-enum VFE_START_PIXEL_PATTERN {
-	VFE_BAYER_RGRGRG,
-	VFE_BAYER_GRGRGR,
-	VFE_BAYER_BGBGBG,
-	VFE_BAYER_GBGBGB,
-	VFE_YUV_YCbYCr,
-	VFE_YUV_YCrYCb,
-	VFE_YUV_CbYCrY,
-	VFE_YUV_CrYCbY
-};
-
-enum VFE_BUS_RD_INPUT_PIXEL_PATTERN {
-	VFE_BAYER_RAW,
-	VFE_YUV_INTERLEAVED,
-	VFE_YUV_PSEUDO_PLANAR_Y,
-	VFE_YUV_PSEUDO_PLANAR_CBCR
-};
-
-enum VFE_YUV_INPUT_COSITING_MODE {
-	VFE_YUV_COSITED,
-	VFE_YUV_INTERPOLATED
-};
-
-#define VFE31_GAMMA_NUM_ENTRIES  64
-
-#define VFE31_LA_TABLE_LENGTH    64
-
-#define VFE31_HIST_TABLE_LENGTH  256
-
-struct vfe_cmds_demosaic_abf {
-	uint8_t   enable;
-	uint8_t   forceOn;
-	uint8_t   shift;
-	uint16_t  lpThreshold;
-	uint16_t  max;
-	uint16_t  min;
-	uint8_t   ratio;
-};
-
-struct vfe_cmds_demosaic_bpc {
-	uint8_t   enable;
-	uint16_t  fmaxThreshold;
-	uint16_t  fminThreshold;
-	uint16_t  redDiffThreshold;
-	uint16_t  blueDiffThreshold;
-	uint16_t  greenDiffThreshold;
-};
-
-struct vfe_cmd_demosaic_config {
-	uint8_t   enable;
-	uint8_t   slopeShift;
-	struct vfe_cmds_demosaic_abf abfConfig;
-	struct vfe_cmds_demosaic_bpc bpcConfig;
-};
-
-struct vfe_cmd_demosaic_bpc_update {
-	struct vfe_cmds_demosaic_bpc bpcUpdate;
-};
-
-struct vfe_cmd_demosaic_abf_update {
-	struct vfe_cmds_demosaic_abf abfUpdate;
-};
-
-struct vfe_cmd_white_balance_config {
-	uint8_t  enable;
-	uint16_t ch2Gain;
-	uint16_t ch1Gain;
-	uint16_t ch0Gain;
-};
-
-enum VFE_COLOR_CORRECTION_COEF_QFACTOR {
-	COEF_IS_Q7_SIGNED,
-	COEF_IS_Q8_SIGNED,
-	COEF_IS_Q9_SIGNED,
-	COEF_IS_Q10_SIGNED
-};
-
-struct vfe_cmd_color_correction_config {
-	uint8_t     enable;
-	enum VFE_COLOR_CORRECTION_COEF_QFACTOR coefQFactor;
-	int16_t  C0;
-	int16_t  C1;
-	int16_t  C2;
-	int16_t  C3;
-	int16_t  C4;
-	int16_t  C5;
-	int16_t  C6;
-	int16_t  C7;
-	int16_t  C8;
-	int16_t  K0;
-	int16_t  K1;
-	int16_t  K2;
-};
-
-#define VFE_LA_TABLE_LENGTH 64
-
-struct vfe_cmd_la_config {
-	uint8_t enable;
-	int16_t table[VFE_LA_TABLE_LENGTH];
-};
-
-#define VFE_GAMMA_TABLE_LENGTH 256
-enum VFE_RGB_GAMMA_TABLE_SELECT {
-	RGB_GAMMA_CH0_SELECTED,
-	RGB_GAMMA_CH1_SELECTED,
-	RGB_GAMMA_CH2_SELECTED,
-	RGB_GAMMA_CH0_CH1_SELECTED,
-	RGB_GAMMA_CH0_CH2_SELECTED,
-	RGB_GAMMA_CH1_CH2_SELECTED,
-	RGB_GAMMA_CH0_CH1_CH2_SELECTED
-};
-
-struct vfe_cmd_rgb_gamma_config {
-	uint8_t enable;
-	enum VFE_RGB_GAMMA_TABLE_SELECT channelSelect;
-	int16_t table[VFE_GAMMA_TABLE_LENGTH];
-};
-
-struct vfe_cmd_chroma_enhan_config {
-	uint8_t  enable;
-	int16_t am;
-	int16_t ap;
-	int16_t bm;
-	int16_t bp;
-	int16_t cm;
-	int16_t cp;
-	int16_t dm;
-	int16_t dp;
-	int16_t kcr;
-	int16_t kcb;
-	int16_t RGBtoYConversionV0;
-	int16_t RGBtoYConversionV1;
-	int16_t RGBtoYConversionV2;
-	uint8_t RGBtoYConversionOffset;
-};
-
-struct vfe_cmd_chroma_suppression_config {
-	uint8_t enable;
-	uint8_t m1;
-	uint8_t m3;
-	uint8_t n1;
-	uint8_t n3;
-	uint8_t nn1;
-	uint8_t mm1;
-};
-
-struct vfe_cmd_asf_config {
-	uint8_t enable;
-	uint8_t smoothFilterEnabled;
-	uint8_t sharpMode;
-	uint8_t smoothCoefCenter;
-	uint8_t smoothCoefSurr;
-	uint8_t normalizeFactor;
-	uint8_t sharpK1;
-	uint8_t sharpK2;
-	uint8_t sharpThreshE1;
-	int8_t sharpThreshE2;
-	int8_t sharpThreshE3;
-	int8_t sharpThreshE4;
-	int8_t sharpThreshE5;
-	int8_t filter1Coefficients[9];
-	int8_t filter2Coefficients[9];
-	uint8_t  cropEnable;
-	uint16_t cropFirstPixel;
-	uint16_t cropLastPixel;
-	uint16_t cropFirstLine;
-	uint16_t cropLastLine;
-};
-
-struct vfe_cmd_asf_update {
-	uint8_t enable;
-	uint8_t smoothFilterEnabled;
-	uint8_t sharpMode;
-	uint8_t smoothCoefCenter;
-	uint8_t smoothCoefSurr;
-	uint8_t normalizeFactor;
-	uint8_t sharpK1;
-	uint8_t sharpK2;
-	uint8_t sharpThreshE1;
-	int8_t  sharpThreshE2;
-	int8_t  sharpThreshE3;
-	int8_t  sharpThreshE4;
-	int8_t  sharpThreshE5;
-	int8_t  filter1Coefficients[9];
-	int8_t  filter2Coefficients[9];
-	uint8_t cropEnable;
-};
-
-enum VFE_TEST_GEN_SYNC_EDGE {
-	VFE_TEST_GEN_SYNC_EDGE_ActiveHigh,
-	VFE_TEST_GEN_SYNC_EDGE_ActiveLow
-};
-
-
-struct vfe_cmd_bus_pm_start {
-	uint8_t output2YWrPmEnable;
-	uint8_t output2CbcrWrPmEnable;
-	uint8_t output1YWrPmEnable;
-	uint8_t output1CbcrWrPmEnable;
-};
-
-struct  vfe_frame_skip_counts {
-	uint32_t  totalFrameCount;
-	uint32_t  output1Count;
-	uint32_t  output2Count;
-};
-
-enum VFE_AXI_RD_UNPACK_HBI_SEL {
-	VFE_AXI_RD_HBI_32_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_64_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_128_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_256_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_512_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_1024_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_2048_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_4096_CLOCK_CYCLES
-};
-
-struct vfe_frame_bpc_info {
-	uint32_t greenDefectPixelCount;
-	uint32_t redBlueDefectPixelCount;
-};
-
-struct vfe_frame_asf_info {
-	uint32_t  asfMaxEdge;
-	uint32_t  asfHbiCount;
-};
-
-struct vfe_msg_camif_status {
-	uint8_t  camifState;
-	uint32_t pixelCount;
-	uint32_t lineCount;
-};
-
-struct vfe31_irq_status {
-	uint32_t vfeIrqStatus0;
-	uint32_t vfeIrqStatus1;
-	uint32_t camifStatus;
-	uint32_t demosaicStatus;
-	uint32_t asfMaxEdge;
-};
-
-#define V31_PREVIEW_AXI_FLAG  0x00000001
-#define V31_SNAPSHOT_AXI_FLAG (0x00000001<<1)
-
-struct vfe31_cmd_type {
-	uint16_t id;
-	uint32_t length;
-	uint32_t offset;
-	uint32_t flag;
-};
-
-struct vfe31_free_buf {
-	struct list_head node;
-	uint32_t paddr;
-	uint32_t y_off;
-	uint32_t cbcr_off;
-};
-
-struct vfe31_output_ch {
-	struct list_head free_buf_queue;
-	spinlock_t free_buf_lock;
-	uint16_t output_fmt;
-	int8_t ch0;
-	int8_t ch1;
-	int8_t ch2;
-	uint32_t  capture_cnt;
-	uint32_t  frame_drop_cnt;
-	struct msm_free_buf ping;
-	struct msm_free_buf pong;
-	struct msm_free_buf free_buf;
-};
-
-#define VFE31_IMASK_ERROR_ONLY_0  0x0
-#define VFE31_IMASK_ERROR_ONLY_1               0x003FFFFF
-#define VFE31_IMASK_CAMIF_ERROR               (0x00000001<<0)
-#define VFE31_IMASK_STATS_CS_OVWR             (0x00000001<<1)
-#define VFE31_IMASK_STATS_IHIST_OVWR          (0x00000001<<2)
-#define VFE31_IMASK_REALIGN_BUF_Y_OVFL        (0x00000001<<3)
-#define VFE31_IMASK_REALIGN_BUF_CB_OVFL       (0x00000001<<4)
-#define VFE31_IMASK_REALIGN_BUF_CR_OVFL       (0x00000001<<5)
-#define VFE31_IMASK_VIOLATION                 (0x00000001<<6)
-#define VFE31_IMASK_IMG_MAST_0_BUS_OVFL       (0x00000001<<7)
-#define VFE31_IMASK_IMG_MAST_1_BUS_OVFL       (0x00000001<<8)
-#define VFE31_IMASK_IMG_MAST_2_BUS_OVFL       (0x00000001<<9)
-#define VFE31_IMASK_IMG_MAST_3_BUS_OVFL       (0x00000001<<10)
-#define VFE31_IMASK_IMG_MAST_4_BUS_OVFL       (0x00000001<<11)
-#define VFE31_IMASK_IMG_MAST_5_BUS_OVFL       (0x00000001<<12)
-#define VFE31_IMASK_IMG_MAST_6_BUS_OVFL       (0x00000001<<13)
-#define VFE31_IMASK_STATS_AE_BG_BUS_OVFL         (0x00000001<<14)
-#define VFE31_IMASK_STATS_AF_BF_BUS_OVFL         (0x00000001<<15)
-#define VFE31_IMASK_STATS_AWB_BUS_OVFL        (0x00000001<<16)
-#define VFE31_IMASK_STATS_RS_BUS_OVFL         (0x00000001<<17)
-#define VFE31_IMASK_STATS_CS_BUS_OVFL         (0x00000001<<18)
-#define VFE31_IMASK_STATS_IHIST_BUS_OVFL      (0x00000001<<19)
-#define VFE31_IMASK_STATS_SKIN_BHIST_BUS_OVFL       (0x00000001<<20)
-#define VFE31_IMASK_AXI_ERROR                 (0x00000001<<21)
-
-#define VFE_COM_STATUS 0x000FE000
-
-struct vfe31_output_path {
-	uint16_t output_mode;     
-
-	struct vfe31_output_ch out0; 
-	struct vfe31_output_ch out1; 
-	struct vfe31_output_ch out2; 
-};
-
-struct vfe31_frame_extra {
-	uint32_t greenDefectPixelCount;
-	uint32_t redBlueDefectPixelCount;
-
-	uint32_t  asfMaxEdge;
-	uint32_t  asfHbiCount;
-
-	uint32_t yWrPmStats0;
-	uint32_t yWrPmStats1;
-	uint32_t cbcrWrPmStats0;
-	uint32_t cbcrWrPmStats1;
-
-	uint32_t  frameCounter;
-};
-
-#define VFE_DISABLE_ALL_IRQS             0
-#define VFE_CLEAR_ALL_IRQS               0xffffffff
-
-#define VFE_HW_VERSION					 0x00000000
-#define VFE_GLOBAL_RESET                 0x00000004
-#define VFE_MODULE_RESET				 0x00000008
-#define VFE_CGC_OVERRIDE                 0x0000000C
-#define VFE_MODULE_CFG                   0x00000010
-#define VFE_CFG				 0x00000014
-#define VFE_IRQ_CMD                      0x00000018
-#define VFE_IRQ_MASK_0                   0x0000001C
-#define VFE_IRQ_MASK_1                   0x00000020
-#define VFE_IRQ_CLEAR_0                  0x00000024
-#define VFE_IRQ_CLEAR_1                  0x00000028
-#define VFE_IRQ_STATUS_0                 0x0000002C
-#define VFE_IRQ_STATUS_1                 0x00000030
-#define VFE_IRQ_COMP_MASK                0x00000034
-#define VFE_BUS_CMD                      0x00000038
-#define VFE_BUS_PING_PONG_STATUS         0x00000180
-#define VFE_BUS_OPERATION_STATUS         0x00000184
-
-#define VFE_BUS_IMAGE_MASTER_0_WR_PM_STATS_0        0x00000190
-#define VFE_BUS_IMAGE_MASTER_0_WR_PM_STATS_1        0x00000194
-
-#define VFE_AXI_CMD                      0x000001D8
-#define VFE_AXI_STATUS                   0x000001DC
-#define VFE_BUS_STATS_PING_PONG_BASE     0x000000F4
-
-#define VFE_BUS_STATS_AEC_WR_PING_ADDR   0x000000F4
-#define VFE_BUS_STATS_AEC_WR_PONG_ADDR   0x000000F8
-#define VFE_BUS_STATS_AEC_UB_CFG         0x000000FC
-#define VFE_BUS_STATS_AF_WR_PING_ADDR    0x00000100
-#define VFE_BUS_STATS_AF_WR_PONG_ADDR    0x00000104
-#define VFE_BUS_STATS_AF_UB_CFG          0x00000108
-#define VFE_BUS_STATS_AWB_WR_PING_ADDR   0x0000010C
-#define VFE_BUS_STATS_AWB_WR_PONG_ADDR   0x00000110
-#define VFE_BUS_STATS_AWB_UB_CFG         0x00000114
-#define VFE_BUS_STATS_RS_WR_PING_ADDR    0x00000118
-#define VFE_BUS_STATS_RS_WR_PONG_ADDR    0x0000011C
-#define VFE_BUS_STATS_RS_UB_CFG          0x00000120
-
-#define VFE_BUS_STATS_CS_WR_PING_ADDR    0x00000124
-#define VFE_BUS_STATS_CS_WR_PONG_ADDR    0x00000128
-#define VFE_BUS_STATS_CS_UB_CFG          0x0000012C
-#define VFE_BUS_STATS_HIST_WR_PING_ADDR  0x00000130
-#define VFE_BUS_STATS_HIST_WR_PONG_ADDR  0x00000134
-#define VFE_BUS_STATS_HIST_UB_CFG        0x00000138
-#define VFE_BUS_STATS_SKIN_WR_PING_ADDR  0x0000013C
-#define VFE_BUS_STATS_SKIN_WR_PONG_ADDR  0x00000140
-#define VFE_BUS_STATS_SKIN_UB_CFG        0x00000144
-#define VFE_BUS_PM_CMD                   0x00000188
-#define VFE_BUS_PM_CFG                   0x0000018C
-#define VFE_CAMIF_COMMAND                0x000001E0
-#define VFE_CAMIF_STATUS                 0x00000204
-#define VFE_REG_UPDATE_CMD               0x00000260
-#define VFE_DEMUX_GAIN_0                 0x00000288
-#define VFE_DEMUX_GAIN_1                 0x0000028C
-#define VFE_CHROMA_UP                    0x0000035C
-#define VFE_FRAMEDROP_ENC_Y_CFG          0x00000504
-#define VFE_FRAMEDROP_ENC_CBCR_CFG       0x00000508
-#define VFE_FRAMEDROP_ENC_Y_PATTERN      0x0000050C
-#define VFE_FRAMEDROP_ENC_CBCR_PATTERN   0x00000510
-#define VFE_FRAMEDROP_VIEW_Y             0x00000514
-#define VFE_FRAMEDROP_VIEW_CBCR          0x00000518
-#define VFE_FRAMEDROP_VIEW_Y_PATTERN     0x0000051C
-#define VFE_FRAMEDROP_VIEW_CBCR_PATTERN  0x00000520
-#define VFE_CLAMP_MAX                    0x00000524
-#define VFE_CLAMP_MIN                    0x00000528
-#define VFE_REALIGN_BUF                  0x0000052C
-#define VFE_STATS_CFG                    0x00000530
-#define VFE_STATS_AWB_SGW_CFG            0x00000554
-#define VFE_DMI_CFG                      0x00000598
-#define VFE_DMI_ADDR                     0x0000059C
-#define VFE_DMI_DATA_LO                  0x000005A4
-#define VFE_AXI_CFG                      0x00000600
-
-#define VFE31_OUTPUT_MODE_PT		BIT(0)
-#define VFE31_OUTPUT_MODE_S			BIT(1)
-#define VFE31_OUTPUT_MODE_V			BIT(2)
-#define VFE31_OUTPUT_MODE_P			BIT(3)
-#define VFE31_OUTPUT_MODE_T			BIT(4)
-#define VFE31_OUTPUT_MODE_P_ALL_CHNLS		BIT(5)
-#define VFE31_OUTPUT_MODE_PRIMARY		BIT(6)
-#define VFE31_OUTPUT_MODE_PRIMARY_ALL_CHNLS	BIT(7)
-#define VFE31_OUTPUT_MODE_SECONDARY		BIT(8)
-#define VFE31_OUTPUT_MODE_SECONDARY_ALL_CHNLS	BIT(9)
-struct vfe_stats_control {
-	uint8_t  ackPending;
-	uint32_t nextFrameAddrBuf;
-	uint32_t droppedStatsFrameCount;
-	uint32_t bufToRender;
-};
-
-struct vfe31_ctrl_type {
-	uint16_t operation_mode;     
-	struct vfe31_output_path outpath;
-
-	uint32_t vfeImaskCompositePacked;
-
-	spinlock_t  stop_flag_lock;
-	spinlock_t  update_ack_lock;
-	spinlock_t  state_lock;
-	spinlock_t  io_lock;
-
-	spinlock_t  aec_ack_lock;
-	spinlock_t  awb_ack_lock;
-	spinlock_t  af_ack_lock;
-	spinlock_t  ihist_ack_lock;
-	spinlock_t  rs_ack_lock;
-	spinlock_t  cs_ack_lock;
-	spinlock_t  comp_stats_ack_lock;
-
-	uint32_t extlen;
-	void *extdata;
-
-	int8_t start_ack_pending;
-	int8_t stop_ack_pending;
-	int8_t reset_ack_pending;
-	int8_t update_ack_pending;
-	enum vfe_output_state recording_state;
-	int8_t update_linear;
-	int8_t update_rolloff;
-	int8_t update_la;
-	int8_t update_gamma;
-	enum vfe_output_state liveshot_state;
-
-	spinlock_t  tasklet_lock;
-	struct list_head tasklet_q;
-	void __iomem *vfebase;
-	void *syncdata;
-	uint32_t register_total;
-
-	struct resource	*vfemem;
-	struct resource *vfeio;
-	struct resource *vfeirq;
-	struct regulator *fs_vfe;
-
-	uint32_t stats_comp;
-	atomic_t vstate;
-	uint32_t vfe_capture_count;
-	uint32_t sync_timer_repeat_count;
-	uint32_t sync_timer_state;
-	uint32_t sync_timer_number;
-
-	uint32_t vfeFrameId;
-	uint32_t output1Pattern;
-	uint32_t output1Period;
-	uint32_t output2Pattern;
-	uint32_t output2Period;
-	uint32_t vfeFrameSkipCount;
-	uint32_t vfeFrameSkipPeriod;
-	struct vfe_stats_control afStatsControl;
-	struct vfe_stats_control awbStatsControl;
-	struct vfe_stats_control aecStatsControl;
-	struct vfe_stats_control ihistStatsControl;
-	struct vfe_stats_control rsStatsControl;
-	struct vfe_stats_control csStatsControl;
-
-	
-	struct v4l2_subdev subdev;
-	struct platform_device *pdev;
-	struct clk *vfe_clk[5];
-	spinlock_t  sd_notify_lock;
-	uint32_t hfr_mode;
-	uint32_t frame_skip_cnt;
-	uint32_t frame_skip_pattern;
-	uint32_t snapshot_frame_cnt;
-};
-
-#define statsAeNum      0
-#define statsAfNum      1
-#define statsAwbNum     2
-#define statsRsNum      3
-#define statsCsNum      4
-#define statsIhistNum   5
-#define statsSkinNum    6
-
-struct vfe_cmd_stats_ack {
-	uint32_t  nextStatsBuf;
-};
-
-#define VFE_STATS_BUFFER_COUNT            3
-
-struct vfe_cmd_stats_buf {
-	uint32_t statsBuf[VFE_STATS_BUFFER_COUNT];
-};
-#endif 
diff --git a/drivers/media/video/msm/msm_vfe32.h b/drivers/media/video/msm/msm_vfe32.h
deleted file mode 100644
index 9f43e68..0000000
--- a/drivers/media/video/msm/msm_vfe32.h
+++ /dev/null
@@ -1,987 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef __MSM_VFE32_H__
-#define __MSM_VFE32_H__
-
-#include <linux/bitops.h>
-
-#define TRUE  1
-#define FALSE 0
-
-#define VFE32_HW_NUMBER 0x3030B
-#define VFE33_HW_NUMBER 0x30408
-
-#define VFE32_REGISTER_TOTAL 0x000001CD
-#define VFE33_REGISTER_TOTAL 0x000001EE
-
-#define CAMIF_COMMAND_START  0x00000005
-
-#define CAMIF_COMMAND_CLEAR  0x00000004
-
-#define CAMIF_COMMAND_STOP_IMMEDIATELY  0x00000002
-
-#define CAMIF_COMMAND_STOP_AT_FRAME_BOUNDARY  0x00000000
-
-#define AXI_HALT  0x00000001
-
-#define AXI_HALT_CLEAR  0x00000000
-
-#define VFE_RESET_UPON_STOP_CMD  0x000003ef
-
-#define VFE_RESET_UPON_RESET_CMD  0x000003ff
-
-#define AXI_STATUS_BUSY_MASK 0x00000020
-
-#define VFE_COMP_IRQ_BOTH_Y_CBCR 3
-
-#define VFE_COMP_IRQ_CBCR_ONLY 2
-
-#define VFE_COMP_IRQ_Y_ONLY 1
-
-#define VFE_PERFORMANCE_MONITOR_GO   0x00000001
-#define VFE_PERFORMANCE_MONITOR_STOP 0x00000002
-
-#define VFE_TEST_GEN_GO   0x00000001
-#define VFE_TEST_GEN_STOP 0x00000002
-
-#define VFE_CHROMA_UPSAMPLE_INTERPOLATED 0
-
-#define VFE_DISABLE_ALL_IRQS 0
-#define VFE_CLEAR_ALL_IRQS   0xffffffff
-
-#define VFE_IRQ_STATUS0_CAMIF_SOF_MASK            0x00000001
-#define VFE_IRQ_STATUS0_REG_UPDATE_MASK           0x00000020
-#define VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE0_MASK 0x00200000
-#define VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE1_MASK 0x00400000
-#define VFE_IRQ_STATUS0_IMAGE_COMPOSIT_DONE2_MASK 0x00800000
-#define VFE_IRQ_STATUS1_RESET_AXI_HALT_ACK_MASK   0x00800000
-#define VFE_IRQ_STATUS0_STATS_COMPOSIT_MASK       0x01000000
-
-#define VFE_IRQ_STATUS0_STATS_AEC_BG    0x2000  
-#define VFE_IRQ_STATUS0_STATS_AF_BF     0x4000  
-#define VFE_IRQ_STATUS0_STATS_AWB       0x8000  
-#define VFE_IRQ_STATUS0_STATS_RS        0x10000  
-#define VFE_IRQ_STATUS0_STATS_CS        0x20000  
-#define VFE_IRQ_STATUS0_STATS_IHIST     0x40000  
-#define VFE_IRQ_STATUS0_STATS_SK_BHIST  0x80000 
-
-#define VFE_IRQ_STATUS0_SYNC_TIMER0   0x2000000  
-#define VFE_IRQ_STATUS0_SYNC_TIMER1   0x4000000  
-#define VFE_IRQ_STATUS0_SYNC_TIMER2   0x8000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER0  0x10000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER1  0x20000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER2  0x40000000  
-#define VFE_IRQ_STATUS0_ASYNC_TIMER3  0x80000000  
-
-#define VFE_IMASK_WHILE_STOPPING_0  0xF0000000
-#define VFE_IMASK_WHILE_STOPPING_1  0x00800000
-
-#define VFE_IMASK_ERROR_ONLY_0  0x0
-#define VFE_IMASK_ERROR_ONLY_1  0x003fffff
-
-#define BPC_MASK 0xF80C0FFE
-
-#define ABF_MASK 0xFFFFFFF7
-
-
-#define DBPC_MASK 0xFFFFFFFE
-
-#define DBCC_MASK 0xFFFFFFFD
-
-#define DEMOSAIC_MASK 0xF
-
-#define MCE_EN_MASK 0xEFFFFFFF
-
-#define MCE_Q_K_MASK 0x0FFFFFFF
-
-#define AE_BG_ENABLE_MASK 0x00000020      
-#define AF_BF_ENABLE_MASK 0x00000040      
-#define AWB_ENABLE_MASK 0x00000080     
-#define RS_ENABLE_MASK 0x00000100      
-#define CS_ENABLE_MASK 0x00000200      
-#define RS_CS_ENABLE_MASK 0x00000300   
-#define CLF_ENABLE_MASK 0x00002000     
-#define IHIST_ENABLE_MASK 0x00010000   
-#define SKIN_BHIST_ENABLE_MASK 0x00080000 
-#define STATS_ENABLE_MASK 0x000903E0   
-
-#define STATS_BG_ENABLE_MASK     0x00000002 
-#define STATS_BF_ENABLE_MASK     0x00000004 
-#define STATS_BHIST_ENABLE_MASK  0x00000008 
-
-#define VFE_REG_UPDATE_TRIGGER           1
-#define VFE_PM_BUF_MAX_CNT_MASK          0xFF
-#define VFE_DMI_CFG_DEFAULT              0x00000100
-#define VFE_AE_PINGPONG_STATUS_BIT       0x80
-#define VFE_AF_PINGPONG_STATUS_BIT       0x100
-#define VFE_AWB_PINGPONG_STATUS_BIT      0x200
-
-#define HFR_MODE_OFF 1
-#define VFE_FRAME_SKIP_PERIOD_MASK 0x0000001F 
-
-enum VFE32_DMI_RAM_SEL {
-	NO_MEM_SELECTED          = 0,
-	BLACK_LUT_RAM_BANK0      = 0x1,
-	BLACK_LUT_RAM_BANK1      = 0x2,
-	ROLLOFF_RAM0_BANK0       = 0x3,
-	DEMOSAIC_LUT_RAM_BANK0   = 0x4,
-	DEMOSAIC_LUT_RAM_BANK1   = 0x5,
-	STATS_BHIST_RAM0         = 0x6,
-	STATS_BHIST_RAM1         = 0x7,
-	RGBLUT_RAM_CH0_BANK0     = 0x8,
-	RGBLUT_RAM_CH0_BANK1     = 0x9,
-	RGBLUT_RAM_CH1_BANK0     = 0xa,
-	RGBLUT_RAM_CH1_BANK1     = 0xb,
-	RGBLUT_RAM_CH2_BANK0     = 0xc,
-	RGBLUT_RAM_CH2_BANK1     = 0xd,
-	RGBLUT_CHX_BANK0         = 0xe,
-	RGBLUT_CHX_BANK1         = 0xf,
-	STATS_IHIST_RAM          = 0x10,
-	LUMA_ADAPT_LUT_RAM_BANK0 = 0x11,
-	LUMA_ADAPT_LUT_RAM_BANK1 = 0x12,
-	ROLLOFF_RAM1_BANK0       = 0x13,
-	ROLLOFF_RAM0_BANK1       = 0x14,
-	ROLLOFF_RAM1_BANK1       = 0x15,
-};
-
-enum vfe_output_state {
-	VFE_STATE_IDLE,
-	VFE_STATE_START_REQUESTED,
-	VFE_STATE_STARTED,
-	VFE_STATE_STOP_REQUESTED,
-	VFE_STATE_STOPPED,
-};
-
-#define V32_CAMIF_OFF             0x000001E4
-#define V32_CAMIF_LEN             32
-
-#define V32_DEMUX_OFF             0x00000284
-#define V32_DEMUX_LEN             20
-
-#define V32_DEMOSAICV3_0_OFF      0x00000298
-#define V32_DEMOSAICV3_0_LEN      4
-#define V32_DEMOSAICV3_1_OFF      0x0000061C
-#define V32_DEMOSAICV3_1_LEN      88
-#define V32_DEMOSAICV3_2_OFF      0x0000066C
-#define V32_DEMOSAICV3_UP_REG_CNT 5
-#define V32_DEMOSAIC_2_OFF        0x0000029C
-#define V32_DEMOSAIC_2_LEN        8
-
-#define V32_OUT_CLAMP_OFF         0x00000524
-#define V32_OUT_CLAMP_LEN         8
-
-#define V32_OPERATION_CFG_LEN     44
-
-#define V32_AXI_OUT_OFF           0x00000038
-#define V32_AXI_OUT_LEN           216
-#define V32_AXI_CH_INF_LEN        24
-#define V32_AXI_CFG_LEN           47
-#define V32_AXI_BUS_FMT_OFF    1
-#define V32_AXI_BUS_FMT_LEN    4
-
-#define V32_FRAME_SKIP_OFF        0x00000504
-#define V32_FRAME_SKIP_LEN        32
-
-#define V32_CHROMA_SUBS_OFF       0x000004F8
-#define V32_CHROMA_SUBS_LEN       12
-
-#define V32_FOV_OFF           0x00000360
-#define V32_FOV_LEN           8
-
-#define V32_MAIN_SCALER_OFF 0x00000368
-#define V32_MAIN_SCALER_LEN 28
-
-#define V32_S2Y_OFF 0x000004D0
-#define V32_S2Y_LEN 20
-
-#define V32_S2CbCr_OFF 0x000004E4
-#define V32_S2CbCr_LEN 20
-
-#define V32_CHROMA_EN_OFF 0x000003C4
-#define V32_CHROMA_EN_LEN 36
-
-#define V32_SYNC_TIMER_OFF      0x0000020C
-#define V32_SYNC_TIMER_POLARITY_OFF 0x00000234
-#define V32_TIMER_SELECT_OFF        0x0000025C
-#define V32_SYNC_TIMER_LEN 28
-
-#define V32_ASYNC_TIMER_OFF 0x00000238
-#define V32_ASYNC_TIMER_LEN 28
-
-#define V32_BLACK_LEVEL_OFF 0x00000264
-#define V32_BLACK_LEVEL_LEN 16
-
-#define V32_MESH_ROLL_OFF_CFG_OFF             0x00000274
-#define V32_MESH_ROLL_OFF_CFG_LEN             16
-#define V32_MESH_ROLL_OFF_INIT_TABLE_SIZE     13
-#define V32_MESH_ROLL_OFF_DELTA_TABLE_SIZE    208
-#define V32_MESH_ROLL_OFF_DELTA_TABLE_OFFSET  32
-#define V32_GAMMA_LUT_BANK_SEL_MASK           0x00000007
-
-#define V33_PCA_ROLL_OFF_CFG_LEN1             16
-#define V33_PCA_ROLL_OFF_CFG_OFF1             0x00000274
-#define V33_PCA_ROLL_OFF_CFG_LEN2             12
-#define V33_PCA_ROLL_OFF_CFG_OFF2             0x000007A8
-#define V33_PCA_ROLL_OFF_TABLE_SIZE           (17 + (13*4))
-#define V33_PCA_ROLL_OFF_LUT_BANK_SEL_MASK    0x00010000
-
-#define V32_COLOR_COR_OFF 0x00000388
-#define V32_COLOR_COR_LEN 52
-
-#define V32_WB_OFF 0x00000384
-#define V32_WB_LEN 4
-
-#define V32_RGB_G_OFF 0x000003BC
-#define V32_RGB_G_LEN 4
-
-#define V32_LA_OFF 0x000003C0
-#define V32_LA_LEN 4
-
-#define V32_SCE_OFF 0x00000418
-#define V32_SCE_LEN 136
-
-#define V32_CHROMA_SUP_OFF 0x000003E8
-#define V32_CHROMA_SUP_LEN 12
-
-#define V32_MCE_OFF 0x000003F4
-#define V32_MCE_LEN 36
-#define V32_STATS_AF_OFF 0x0000053c
-#define V32_STATS_AF_LEN 16
-
-#define V32_STATS_AE_OFF 0x00000534
-#define V32_STATS_AE_LEN 8
-
-#define V32_STATS_AWB_OFF 0x0000054c
-#define V32_STATS_AWB_LEN 32
-
-#define V32_STATS_IHIST_OFF 0x0000057c
-#define V32_STATS_IHIST_LEN 8
-
-#define V32_STATS_RS_OFF 0x0000056c
-#define V32_STATS_RS_LEN 8
-
-#define V32_STATS_CS_OFF 0x00000574
-#define V32_STATS_CS_LEN 8
-
-
-#define V32_ASF_OFF 0x000004A0
-#define V32_ASF_LEN 48
-#define V32_ASF_UPDATE_LEN 36
-
-#define V32_CAPTURE_LEN 4
-
-#define V32_GET_HW_VERSION_OFF 0
-#define V32_GET_HW_VERSION_LEN 4
-
-#define V32_LINEARIZATION_OFF1 0x00000264
-#define V32_LINEARIZATION_LEN1 16
-
-#define V32_LINEARIZATION_OFF2 0x0000067C
-#define V32_LINEARIZATION_LEN2 52
-
-#define V32_DEMOSAICV3_OFF 0x00000298
-#define V32_DEMOSAICV3_LEN 4
-
-#define V32_DEMOSAICV3_DBPC_CFG_OFF  0x0000029C
-#define V32_DEMOSAICV3_DBPC_LEN 4
-
-#define V32_DEMOSAICV3_DBPC_CFG_OFF0 0x000002a0
-#define V32_DEMOSAICV3_DBPC_CFG_OFF1 0x00000604
-#define V32_DEMOSAICV3_DBPC_CFG_OFF2 0x00000608
-
-#define V32_DEMOSAICV3_DBCC_OFF 0x0000060C
-#define V32_DEMOSAICV3_DBCC_LEN 16
-
-#define V32_DEMOSAICV3_ABF_OFF 0x000002A4
-#define V32_DEMOSAICV3_ABF_LEN 180
-
-#define V32_MODULE_CFG_OFF 0x00000010
-#define V32_MODULE_CFG_LEN 4
-
-#define V32_ASF_SPECIAL_EFX_CFG_OFF 0x000005FC
-#define V32_ASF_SPECIAL_EFX_CFG_LEN 4
-
-#define V32_CLF_CFG_OFF 0x000006B0
-#define V32_CLF_CFG_LEN 72
-
-#define V32_CLF_LUMA_UPDATE_OFF 0x000006B4
-#define V32_CLF_LUMA_UPDATE_LEN 60
-
-#define V32_CLF_CHROMA_UPDATE_OFF 0x000006F0
-#define V32_CLF_CHROMA_UPDATE_LEN 8
-
-#define V32_STATS_BG_OFF 0x00000700
-#define V32_STATS_BG_LEN 12
-
-#define V32_STATS_BF_OFF 0x0000070c
-#define V32_STATS_BF_LEN 24
-
-#define V32_STATS_BHIST_OFF 0x00000724
-#define V32_STATS_BHIST_LEN 8
-
-struct vfe_cmd_hw_version {
-	uint32_t minorVersion;
-	uint32_t majorVersion;
-	uint32_t coreVersion;
-};
-
-enum VFE_AXI_OUTPUT_MODE {
-	VFE_AXI_OUTPUT_MODE_Output1,
-	VFE_AXI_OUTPUT_MODE_Output2,
-	VFE_AXI_OUTPUT_MODE_Output1AndOutput2,
-	VFE_AXI_OUTPUT_MODE_CAMIFToAXIViaOutput2,
-	VFE_AXI_OUTPUT_MODE_Output2AndCAMIFToAXIViaOutput1,
-	VFE_AXI_OUTPUT_MODE_Output1AndCAMIFToAXIViaOutput2,
-	VFE_AXI_LAST_OUTPUT_MODE_ENUM
-};
-
-enum VFE_RAW_WR_PATH_SEL {
-	VFE_RAW_OUTPUT_DISABLED,
-	VFE_RAW_OUTPUT_ENC_CBCR_PATH,
-	VFE_RAW_OUTPUT_VIEW_CBCR_PATH,
-	VFE_RAW_OUTPUT_PATH_INVALID
-};
-
-
-#define VFE_AXI_OUTPUT_BURST_LENGTH     4
-#define VFE_MAX_NUM_FRAGMENTS_PER_FRAME 4
-#define VFE_AXI_OUTPUT_CFG_FRAME_COUNT  3
-
-struct vfe_cmds_per_write_master {
-	uint16_t imageWidth;
-	uint16_t imageHeight;
-	uint16_t outRowCount;
-	uint16_t outRowIncrement;
-	uint32_t outFragments[VFE_AXI_OUTPUT_CFG_FRAME_COUNT]
-		[VFE_MAX_NUM_FRAGMENTS_PER_FRAME];
-};
-
-struct vfe_cmds_axi_per_output_path {
-	uint8_t fragmentCount;
-	struct vfe_cmds_per_write_master firstWM;
-	struct vfe_cmds_per_write_master secondWM;
-};
-
-enum VFE_AXI_BURST_LENGTH {
-	VFE_AXI_BURST_LENGTH_IS_2  = 2,
-	VFE_AXI_BURST_LENGTH_IS_4  = 4,
-	VFE_AXI_BURST_LENGTH_IS_8  = 8,
-	VFE_AXI_BURST_LENGTH_IS_16 = 16
-};
-
-
-struct vfe_cmd_fov_crop_config {
-	uint8_t enable;
-	uint16_t firstPixel;
-	uint16_t lastPixel;
-	uint16_t firstLine;
-	uint16_t lastLine;
-};
-
-struct vfe_cmds_main_scaler_stripe_init {
-	uint16_t MNCounterInit;
-	uint16_t phaseInit;
-};
-
-struct vfe_cmds_scaler_one_dimension {
-	uint8_t  enable;
-	uint16_t inputSize;
-	uint16_t outputSize;
-	uint32_t phaseMultiplicationFactor;
-	uint8_t  interpolationResolution;
-};
-
-struct vfe_cmd_main_scaler_config {
-	uint8_t enable;
-	struct vfe_cmds_scaler_one_dimension    hconfig;
-	struct vfe_cmds_scaler_one_dimension    vconfig;
-	struct vfe_cmds_main_scaler_stripe_init MNInitH;
-	struct vfe_cmds_main_scaler_stripe_init MNInitV;
-};
-
-struct vfe_cmd_scaler2_config {
-	uint8_t enable;
-	struct vfe_cmds_scaler_one_dimension hconfig;
-	struct vfe_cmds_scaler_one_dimension vconfig;
-};
-
-
-struct vfe_cmd_frame_skip_update {
-	uint32_t output1Pattern;
-	uint32_t output2Pattern;
-};
-
-struct vfe_cmd_output_clamp_config {
-	uint8_t minCh0;
-	uint8_t minCh1;
-	uint8_t minCh2;
-	uint8_t maxCh0;
-	uint8_t maxCh1;
-	uint8_t maxCh2;
-};
-
-struct vfe_cmd_chroma_subsample_config {
-	uint8_t enable;
-	uint8_t cropEnable;
-	uint8_t vsubSampleEnable;
-	uint8_t hsubSampleEnable;
-	uint8_t vCosited;
-	uint8_t hCosited;
-	uint8_t vCositedPhase;
-	uint8_t hCositedPhase;
-	uint16_t cropWidthFirstPixel;
-	uint16_t cropWidthLastPixel;
-	uint16_t cropHeightFirstLine;
-	uint16_t cropHeightLastLine;
-};
-
-enum VFE_START_PIXEL_PATTERN {
-	VFE_BAYER_RGRGRG,
-	VFE_BAYER_GRGRGR,
-	VFE_BAYER_BGBGBG,
-	VFE_BAYER_GBGBGB,
-	VFE_YUV_YCbYCr,
-	VFE_YUV_YCrYCb,
-	VFE_YUV_CbYCrY,
-	VFE_YUV_CrYCbY
-};
-
-enum VFE_BUS_RD_INPUT_PIXEL_PATTERN {
-	VFE_BAYER_RAW,
-	VFE_YUV_INTERLEAVED,
-	VFE_YUV_PSEUDO_PLANAR_Y,
-	VFE_YUV_PSEUDO_PLANAR_CBCR
-};
-
-enum VFE_YUV_INPUT_COSITING_MODE {
-	VFE_YUV_COSITED,
-	VFE_YUV_INTERPOLATED
-};
-
-#define VFE32_GAMMA_NUM_ENTRIES  64
-
-#define VFE32_LA_TABLE_LENGTH    64
-
-#define VFE32_LINEARIZATON_TABLE_LENGTH    36
-
-struct vfe_cmds_demosaic_abf {
-	uint8_t   enable;
-	uint8_t   forceOn;
-	uint8_t   shift;
-	uint16_t  lpThreshold;
-	uint16_t  max;
-	uint16_t  min;
-	uint8_t   ratio;
-};
-
-struct vfe_cmds_demosaic_bpc {
-	uint8_t   enable;
-	uint16_t  fmaxThreshold;
-	uint16_t  fminThreshold;
-	uint16_t  redDiffThreshold;
-	uint16_t  blueDiffThreshold;
-	uint16_t  greenDiffThreshold;
-};
-
-struct vfe_cmd_demosaic_config {
-	uint8_t   enable;
-	uint8_t   slopeShift;
-	struct vfe_cmds_demosaic_abf abfConfig;
-	struct vfe_cmds_demosaic_bpc bpcConfig;
-};
-
-struct vfe_cmd_demosaic_bpc_update {
-	struct vfe_cmds_demosaic_bpc bpcUpdate;
-};
-
-struct vfe_cmd_demosaic_abf_update {
-	struct vfe_cmds_demosaic_abf abfUpdate;
-};
-
-struct vfe_cmd_white_balance_config {
-	uint8_t  enable;
-	uint16_t ch2Gain;
-	uint16_t ch1Gain;
-	uint16_t ch0Gain;
-};
-
-enum VFE_COLOR_CORRECTION_COEF_QFACTOR {
-	COEF_IS_Q7_SIGNED,
-	COEF_IS_Q8_SIGNED,
-	COEF_IS_Q9_SIGNED,
-	COEF_IS_Q10_SIGNED
-};
-
-struct vfe_cmd_color_correction_config {
-	uint8_t     enable;
-	enum VFE_COLOR_CORRECTION_COEF_QFACTOR coefQFactor;
-	int16_t  C0;
-	int16_t  C1;
-	int16_t  C2;
-	int16_t  C3;
-	int16_t  C4;
-	int16_t  C5;
-	int16_t  C6;
-	int16_t  C7;
-	int16_t  C8;
-	int16_t  K0;
-	int16_t  K1;
-	int16_t  K2;
-};
-
-#define VFE_LA_TABLE_LENGTH 64
-
-struct vfe_cmd_la_config {
-	uint8_t enable;
-	int16_t table[VFE_LA_TABLE_LENGTH];
-};
-
-#define VFE_GAMMA_TABLE_LENGTH 256
-enum VFE_RGB_GAMMA_TABLE_SELECT {
-	RGB_GAMMA_CH0_SELECTED,
-	RGB_GAMMA_CH1_SELECTED,
-	RGB_GAMMA_CH2_SELECTED,
-	RGB_GAMMA_CH0_CH1_SELECTED,
-	RGB_GAMMA_CH0_CH2_SELECTED,
-	RGB_GAMMA_CH1_CH2_SELECTED,
-	RGB_GAMMA_CH0_CH1_CH2_SELECTED
-};
-
-struct vfe_cmd_rgb_gamma_config {
-	uint8_t enable;
-	enum VFE_RGB_GAMMA_TABLE_SELECT channelSelect;
-	int16_t table[VFE_GAMMA_TABLE_LENGTH];
-};
-
-struct vfe_cmd_chroma_enhan_config {
-	uint8_t  enable;
-	int16_t am;
-	int16_t ap;
-	int16_t bm;
-	int16_t bp;
-	int16_t cm;
-	int16_t cp;
-	int16_t dm;
-	int16_t dp;
-	int16_t kcr;
-	int16_t kcb;
-	int16_t RGBtoYConversionV0;
-	int16_t RGBtoYConversionV1;
-	int16_t RGBtoYConversionV2;
-	uint8_t RGBtoYConversionOffset;
-};
-
-struct vfe_cmd_chroma_suppression_config {
-	uint8_t enable;
-	uint8_t m1;
-	uint8_t m3;
-	uint8_t n1;
-	uint8_t n3;
-	uint8_t nn1;
-	uint8_t mm1;
-};
-
-struct vfe_cmd_asf_config {
-	uint8_t enable;
-	uint8_t smoothFilterEnabled;
-	uint8_t sharpMode;
-	uint8_t smoothCoefCenter;
-	uint8_t smoothCoefSurr;
-	uint8_t normalizeFactor;
-	uint8_t sharpK1;
-	uint8_t sharpK2;
-	uint8_t sharpThreshE1;
-	int8_t sharpThreshE2;
-	int8_t sharpThreshE3;
-	int8_t sharpThreshE4;
-	int8_t sharpThreshE5;
-	int8_t filter1Coefficients[9];
-	int8_t filter2Coefficients[9];
-	uint8_t  cropEnable;
-	uint16_t cropFirstPixel;
-	uint16_t cropLastPixel;
-	uint16_t cropFirstLine;
-	uint16_t cropLastLine;
-};
-
-struct vfe_cmd_asf_update {
-	uint8_t enable;
-	uint8_t smoothFilterEnabled;
-	uint8_t sharpMode;
-	uint8_t smoothCoefCenter;
-	uint8_t smoothCoefSurr;
-	uint8_t normalizeFactor;
-	uint8_t sharpK1;
-	uint8_t sharpK2;
-	uint8_t sharpThreshE1;
-	int8_t  sharpThreshE2;
-	int8_t  sharpThreshE3;
-	int8_t  sharpThreshE4;
-	int8_t  sharpThreshE5;
-	int8_t  filter1Coefficients[9];
-	int8_t  filter2Coefficients[9];
-	uint8_t cropEnable;
-};
-
-enum VFE_TEST_GEN_SYNC_EDGE {
-	VFE_TEST_GEN_SYNC_EDGE_ActiveHigh,
-	VFE_TEST_GEN_SYNC_EDGE_ActiveLow
-};
-
-
-struct vfe_cmd_bus_pm_start {
-	uint8_t output2YWrPmEnable;
-	uint8_t output2CbcrWrPmEnable;
-	uint8_t output1YWrPmEnable;
-	uint8_t output1CbcrWrPmEnable;
-};
-
-struct  vfe_frame_skip_counts {
-	uint32_t  totalFrameCount;
-	uint32_t  output1Count;
-	uint32_t  output2Count;
-};
-
-enum VFE_AXI_RD_UNPACK_HBI_SEL {
-	VFE_AXI_RD_HBI_32_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_64_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_128_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_256_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_512_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_1024_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_2048_CLOCK_CYCLES,
-	VFE_AXI_RD_HBI_4096_CLOCK_CYCLES
-};
-
-struct vfe_frame_bpc_info {
-	uint32_t greenDefectPixelCount;
-	uint32_t redBlueDefectPixelCount;
-};
-
-struct vfe_frame_asf_info {
-	uint32_t  asfMaxEdge;
-	uint32_t  asfHbiCount;
-};
-
-struct vfe_msg_camif_status {
-	uint8_t  camifState;
-	uint32_t pixelCount;
-	uint32_t lineCount;
-};
-
-struct vfe32_irq_status {
-	uint32_t vfeIrqStatus0;
-	uint32_t vfeIrqStatus1;
-	uint32_t camifStatus;
-	uint32_t demosaicStatus;
-	uint32_t asfMaxEdge;
-};
-
-#define V32_PREVIEW_AXI_FLAG  0x00000001
-#define V32_SNAPSHOT_AXI_FLAG (0x00000001<<1)
-
-struct vfe32_cmd_type {
-	uint16_t id;
-	uint32_t length;
-	uint32_t offset;
-	uint32_t flag;
-};
-
-struct vfe32_free_buf {
-	struct list_head node;
-	uint32_t paddr;
-	uint32_t y_off;
-	uint32_t cbcr_off;
-};
-
-struct vfe32_output_ch {
-	struct list_head free_buf_queue;
-	spinlock_t free_buf_lock;
-	uint16_t output_fmt;
-	int8_t ch0;
-	int8_t ch1;
-	int8_t ch2;
-	uint32_t  capture_cnt;
-	uint32_t  frame_drop_cnt;
-	struct msm_free_buf ping;
-	struct msm_free_buf pong;
-	struct msm_free_buf free_buf;
-};
-
-#define VFE32_IMASK_ERROR_ONLY_0  0x0
-#define VFE32_IMASK_ERROR_ONLY_1               0x005FFFFF
-#define VFE32_IMASK_CAMIF_ERROR               (0x00000001<<0)
-#define VFE32_IMASK_BHIST_OVWR                (0x00000001<<1)
-#define VFE32_IMASK_STATS_CS_OVWR             (0x00000001<<2)
-#define VFE32_IMASK_STATS_IHIST_OVWR          (0x00000001<<3)
-#define VFE32_IMASK_REALIGN_BUF_Y_OVFL        (0x00000001<<4)
-#define VFE32_IMASK_REALIGN_BUF_CB_OVFL       (0x00000001<<5)
-#define VFE32_IMASK_REALIGN_BUF_CR_OVFL       (0x00000001<<6)
-#define VFE32_IMASK_VIOLATION                 (0x00000001<<7)
-#define VFE32_IMASK_IMG_MAST_0_BUS_OVFL       (0x00000001<<8)
-#define VFE32_IMASK_IMG_MAST_1_BUS_OVFL       (0x00000001<<9)
-#define VFE32_IMASK_IMG_MAST_2_BUS_OVFL       (0x00000001<<10)
-#define VFE32_IMASK_IMG_MAST_3_BUS_OVFL       (0x00000001<<11)
-#define VFE32_IMASK_IMG_MAST_4_BUS_OVFL       (0x00000001<<12)
-#define VFE32_IMASK_IMG_MAST_5_BUS_OVFL       (0x00000001<<13)
-#define VFE32_IMASK_IMG_MAST_6_BUS_OVFL       (0x00000001<<14)
-#define VFE32_IMASK_STATS_AE_BG_BUS_OVFL      (0x00000001<<15)
-#define VFE32_IMASK_STATS_AF_BF_BUS_OVFL      (0x00000001<<16)
-#define VFE32_IMASK_STATS_AWB_BUS_OVFL        (0x00000001<<17)
-#define VFE32_IMASK_STATS_RS_BUS_OVFL         (0x00000001<<18)
-#define VFE32_IMASK_STATS_CS_BUS_OVFL         (0x00000001<<19)
-#define VFE32_IMASK_STATS_IHIST_BUS_OVFL      (0x00000001<<20)
-#define VFE32_IMASK_STATS_SKIN_BHIST_BUS_OVFL (0x00000001<<21)
-#define VFE32_IMASK_AXI_ERROR                 (0x00000001<<22)
-
-#define VFE_COM_STATUS 0x000FE000
-
-struct vfe32_output_path {
-	uint16_t output_mode;     
-
-	struct vfe32_output_ch out0; 
-	struct vfe32_output_ch out1; 
-	struct vfe32_output_ch out2; 
-};
-
-struct vfe32_frame_extra {
-	uint32_t greenDefectPixelCount;
-	uint32_t redBlueDefectPixelCount;
-
-	uint32_t  asfMaxEdge;
-	uint32_t  asfHbiCount;
-
-	uint32_t yWrPmStats0;
-	uint32_t yWrPmStats1;
-	uint32_t cbcrWrPmStats0;
-	uint32_t cbcrWrPmStats1;
-
-	uint32_t  frameCounter;
-};
-
-#define VFE_DISABLE_ALL_IRQS            0
-#define VFE_CLEAR_ALL_IRQS              0xffffffff
-
-#define VFE_HW_VERSION			0x00000000
-#define VFE_GLOBAL_RESET                0x00000004
-#define VFE_MODULE_RESET		0x00000008
-#define VFE_CGC_OVERRIDE                0x0000000C
-#define VFE_MODULE_CFG                  0x00000010
-#define VFE_CFG				0x00000014
-#define VFE_IRQ_CMD                     0x00000018
-#define VFE_IRQ_MASK_0                  0x0000001C
-#define VFE_IRQ_MASK_1                  0x00000020
-#define VFE_IRQ_CLEAR_0                 0x00000024
-#define VFE_IRQ_CLEAR_1                 0x00000028
-#define VFE_IRQ_STATUS_0                0x0000002C
-#define VFE_IRQ_STATUS_1                0x00000030
-#define VFE_IRQ_COMP_MASK               0x00000034
-#define VFE_BUS_CMD                     0x00000038
-#define VFE_BUS_PING_PONG_STATUS        0x00000180
-#define VFE_AXI_CMD                     0x000001D8
-#define VFE_AXI_STATUS        0x000001DC
-#define VFE_BUS_STATS_PING_PONG_BASE    0x000000F4
-
-#define VFE_BUS_STATS_AEC_BG_WR_PING_ADDR    0x000000F4
-#define VFE_BUS_STATS_AEC_BG_WR_PONG_ADDR    0x000000F8
-#define VFE_BUS_STATS_AEC_BG_UB_CFG          0x000000FC
-#define VFE_BUS_STATS_AF_BF_WR_PING_ADDR     0x00000100
-#define VFE_BUS_STATS_AF_BF_WR_PONG_ADDR     0x00000104
-#define VFE_BUS_STATS_AF_BF_UB_CFG           0x00000108
-#define VFE_BUS_STATS_AWB_WR_PING_ADDR    0x0000010C
-#define VFE_BUS_STATS_AWB_WR_PONG_ADDR    0x00000110
-#define VFE_BUS_STATS_AWB_UB_CFG          0x00000114
-#define VFE_BUS_STATS_RS_WR_PING_ADDR    0x00000118
-#define VFE_BUS_STATS_RS_WR_PONG_ADDR    0x0000011C
-#define VFE_BUS_STATS_RS_UB_CFG          0x00000120
-
-#define VFE_BUS_STATS_CS_WR_PING_ADDR    0x00000124
-#define VFE_BUS_STATS_CS_WR_PONG_ADDR    0x00000128
-#define VFE_BUS_STATS_CS_UB_CFG          0x0000012C
-#define VFE_BUS_STATS_HIST_WR_PING_ADDR   0x00000130
-#define VFE_BUS_STATS_HIST_WR_PONG_ADDR   0x00000134
-#define VFE_BUS_STATS_HIST_UB_CFG          0x00000138
-#define VFE_BUS_STATS_SKIN_BHIST_WR_PING_ADDR    0x0000013C
-#define VFE_BUS_STATS_SKIN_BHIST_WR_PONG_ADDR    0x00000140
-#define VFE_BUS_STATS_SKIN_BHIST_UB_CFG          0x00000144
-#define VFE_CAMIF_COMMAND               0x000001E0
-#define VFE_CAMIF_STATUS                0x00000204
-#define VFE_REG_UPDATE_CMD              0x00000260
-#define VFE_DEMUX_GAIN_0                0x00000288
-#define VFE_DEMUX_GAIN_1                0x0000028C
-#define VFE_CHROMA_UP                   0x0000035C
-#define VFE_FRAMEDROP_ENC_Y_CFG         0x00000504
-#define VFE_FRAMEDROP_ENC_CBCR_CFG      0x00000508
-#define VFE_FRAMEDROP_ENC_Y_PATTERN     0x0000050C
-#define VFE_FRAMEDROP_ENC_CBCR_PATTERN  0x00000510
-#define VFE_FRAMEDROP_VIEW_Y            0x00000514
-#define VFE_FRAMEDROP_VIEW_CBCR         0x00000518
-#define VFE_FRAMEDROP_VIEW_Y_PATTERN    0x0000051C
-#define VFE_FRAMEDROP_VIEW_CBCR_PATTERN 0x00000520
-#define VFE_CLAMP_MAX                   0x00000524
-#define VFE_CLAMP_MIN                   0x00000528
-#define VFE_REALIGN_BUF                 0x0000052C
-#define VFE_STATS_CFG                   0x00000530
-#define VFE_STATS_AWB_SGW_CFG           0x00000554
-#define VFE_DMI_CFG                     0x00000598
-#define VFE_DMI_ADDR                    0x0000059C
-#define VFE_DMI_DATA_HI                 0x000005A0  
-#define VFE_DMI_DATA_LO                 0x000005A4
-#define VFE_BUS_IO_FORMAT_CFG           0x000006F8
-#define VFE_PIXEL_IF_CFG                0x000006FC
-#define VFE_RDI0_CFG                    0x00000734
-#define VFE_RDI1_CFG                    0x000007A4
-
-#define VFE_VIOLATION_STATUS            0x000007B4
-
-#define VFE33_DMI_DATA_HI               0x000005A0
-#define VFE33_DMI_DATA_LO               0x000005A4
-
-#define VFE32_OUTPUT_MODE_PT			BIT(0)
-#define VFE32_OUTPUT_MODE_S			BIT(1)
-#define VFE32_OUTPUT_MODE_V			BIT(2)
-#define VFE32_OUTPUT_MODE_P			BIT(3)
-#define VFE32_OUTPUT_MODE_T			BIT(4)
-#define VFE32_OUTPUT_MODE_P_ALL_CHNLS		BIT(5)
-#define VFE32_OUTPUT_MODE_PRIMARY		BIT(6)
-#define VFE32_OUTPUT_MODE_PRIMARY_ALL_CHNLS	BIT(7)
-#define VFE32_OUTPUT_MODE_SECONDARY		BIT(8)
-#define VFE32_OUTPUT_MODE_SECONDARY_ALL_CHNLS	BIT(9)
-
-struct vfe_stats_control {
-	uint8_t  ackPending;
-	uint32_t nextFrameAddrBuf;
-	uint32_t droppedStatsFrameCount;
-	uint32_t bufToRender;
-};
-struct axi_ctrl_t {
-	struct v4l2_subdev subdev;
-	struct platform_device *pdev;
-	struct resource *vfeirq;
-	spinlock_t  tasklet_lock;
-	struct list_head tasklet_q;
-
-	void __iomem *vfebase;
-	void *syncdata;
-
-	struct resource	*vfemem;
-	struct resource *vfeio;
-	struct regulator *fs_vfe;
-	struct clk *vfe_clk[3];
-	struct tasklet_struct vfe32_tasklet;
-};
-
-
-struct vfe32_ctrl_type {
-	uint16_t operation_mode;     
-	struct vfe32_output_path outpath;
-
-	uint32_t vfeImaskCompositePacked;
-
-	spinlock_t  stop_flag_lock;
-	spinlock_t  update_ack_lock;
-	spinlock_t  state_lock;
-	spinlock_t  io_lock;
-
-	spinlock_t  aec_bg_ack_lock;
-	spinlock_t  awb_ack_lock;
-	spinlock_t  af_bf_ack_lock;
-	spinlock_t  bhist_ack_lock;
-	spinlock_t  ihist_ack_lock;
-	spinlock_t  rs_ack_lock;
-	spinlock_t  cs_ack_lock;
-	spinlock_t  comp_stats_ack_lock;
-
-	uint32_t extlen;
-	void *extdata;
-
-	int8_t start_ack_pending;
-	int8_t stop_ack_pending;
-	int8_t reset_ack_pending;
-	int8_t update_ack_pending;
-	enum vfe_output_state recording_state;
-	int8_t update_linear;
-	int8_t update_rolloff;
-	int8_t update_la;
-	int8_t update_gamma;
-	enum vfe_output_state liveshot_state;
-
-
-	void __iomem *vfebase;
-	uint32_t register_total;
-
-
-	uint32_t stats_comp;
-	atomic_t vstate;
-	uint32_t vfe_capture_count;
-	uint32_t sync_timer_repeat_count;
-	uint32_t sync_timer_state;
-	uint32_t sync_timer_number;
-
-	uint32_t vfeFrameId;
-	uint32_t output1Pattern;
-	uint32_t output1Period;
-	uint32_t output2Pattern;
-	uint32_t output2Period;
-	uint32_t vfeFrameSkipCount;
-	uint32_t vfeFrameSkipPeriod;
-	struct msm_ver_num_info ver_num;
-	struct vfe_stats_control afbfStatsControl;
-	struct vfe_stats_control awbStatsControl;
-	struct vfe_stats_control aecbgStatsControl;
-	struct vfe_stats_control ihistStatsControl;
-	struct vfe_stats_control rsStatsControl;
-	struct vfe_stats_control csStatsControl;
-	struct vfe_stats_control bhistStatsControl;
-
-	
-	struct v4l2_subdev subdev;
-	struct platform_device *pdev;
-	spinlock_t  sd_notify_lock;
-	uint32_t hfr_mode;
-	uint32_t frame_skip_cnt;
-	uint32_t frame_skip_pattern;
-	uint32_t snapshot_frame_cnt;
-};
-
-#define statsAeNum      0
-#define statsAfNum      1
-#define statsAwbNum     2
-#define statsRsNum      3
-#define statsCsNum      4
-#define statsIhistNum   5
-#define statsSkinNum    6
-
-struct vfe_cmd_stats_ack {
-	uint32_t  nextStatsBuf;
-};
-
-#define VIDIOC_MSM_AXI_INIT \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 18, struct msm_cam_media_controller *)
-
-#define VIDIOC_MSM_AXI_RELEASE \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 19, struct msm_cam_media_controller *)
-
-#define VIDIOC_MSM_AXI_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 20, void *)
-
-#define VIDIOC_MSM_AXI_IRQ \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 21, void *)
-
-
-#define VFE_STATS_BUFFER_COUNT            3
-
-struct vfe_cmd_stats_buf {
-	uint32_t statsBuf[VFE_STATS_BUFFER_COUNT];
-};
-#endif 
diff --git a/drivers/media/video/msm/msm_vpe.c b/drivers/media/video/msm/msm_vpe.c
deleted file mode 100644
index 4a425a4..0000000
--- a/drivers/media/video/msm/msm_vpe.c
+++ /dev/null
@@ -1,776 +0,0 @@
-/* Copyright (c) 2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <linux/module.h>
-#include <linux/uaccess.h>
-#include <linux/interrupt.h>
-#include <mach/irqs.h>
-#include <linux/io.h>
-#include <linux/slab.h>
-#include <linux/pm_qos.h>
-#include <linux/regulator/consumer.h>
-#include <linux/clk.h>
-#include <mach/clk.h>
-#include <asm/div64.h>
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/list.h>
-#include <linux/ioctl.h>
-#include <linux/spinlock.h>
-#include "msm.h"
-#include "msm_vpe.h"
-
-static int vpe_enable(uint32_t);
-static int vpe_disable(void);
-static int vpe_update_scaler(struct msm_pp_crop *pcrop);
-struct vpe_ctrl_type *vpe_ctrl;
-static atomic_t vpe_init_done = ATOMIC_INIT(0);
-
-static int msm_vpe_do_pp(struct msm_mctl_pp_cmd *cmd,
-	struct msm_mctl_pp_frame_info *pp_frame_info);
-
-static long long vpe_do_div(long long num, long long den)
-{
-	do_div(num, den);
-	return num;
-}
-
-static int vpe_start(void)
-{
-	
-	msm_io_w_mb(1, vpe_ctrl->vpebase + VPE_INTR_ENABLE_OFFSET);
-	msm_io_dump(vpe_ctrl->vpebase, 0x120);
-	msm_io_dump(vpe_ctrl->vpebase + 0x00400, 0x18);
-	msm_io_dump(vpe_ctrl->vpebase + 0x10000, 0x250);
-	msm_io_dump(vpe_ctrl->vpebase + 0x30000, 0x20);
-	msm_io_dump(vpe_ctrl->vpebase + 0x50000, 0x30);
-	msm_io_dump(vpe_ctrl->vpebase + 0x50400, 0x10);
-	
-	msm_io_w(1, vpe_ctrl->vpebase + VPE_DL0_START_OFFSET);
-	wmb();
-	return 0;
-}
-
-void vpe_reset_state_variables(void)
-{
-	
-	vpe_ctrl->op_mode = 0;
-	vpe_ctrl->state = VPE_STATE_INIT;
-}
-
-static void vpe_config_axi_default(void)
-{
-	msm_io_w(0x25, vpe_ctrl->vpebase + VPE_AXI_ARB_2_OFFSET);
-	CDBG("%s: yaddr %ld cbcraddr %ld", __func__,
-		 vpe_ctrl->out_y_addr, vpe_ctrl->out_cbcr_addr);
-	if (!vpe_ctrl->out_y_addr || !vpe_ctrl->out_cbcr_addr)
-		return;
-	msm_io_w(vpe_ctrl->out_y_addr,
-		vpe_ctrl->vpebase + VPE_OUTP0_ADDR_OFFSET);
-	
-	msm_io_w(vpe_ctrl->out_cbcr_addr,
-		vpe_ctrl->vpebase + VPE_OUTP1_ADDR_OFFSET);
-
-}
-
-static int vpe_reset(void)
-{
-	uint32_t vpe_version;
-	uint32_t rc = 0;
-	unsigned long flags = 0;
-
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	if (vpe_ctrl->state == VPE_STATE_IDLE) {
-		pr_info("%s: VPE already disabled.", __func__);
-		spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-		return rc;
-	}
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-
-	pr_info("%s, vpe_ctrl->state %d\n", __func__, vpe_ctrl->state);
-	vpe_reset_state_variables();
-	vpe_version = msm_io_r(vpe_ctrl->vpebase + VPE_HW_VERSION_OFFSET);
-	CDBG("vpe_version = 0x%x\n", vpe_version);
-	
-	msm_io_w(0, vpe_ctrl->vpebase + VPE_INTR_ENABLE_OFFSET);
-	
-	msm_io_w(0x1fffff, vpe_ctrl->vpebase + VPE_INTR_CLEAR_OFFSET);
-	
-	msm_io_w(0x10, vpe_ctrl->vpebase + VPE_SW_RESET_OFFSET);
-	
-	while (1) {
-		rc =
-		msm_io_r(vpe_ctrl->vpebase + VPE_SW_RESET_OFFSET) & 0x10;
-		if (rc == 0)
-			break;
-	}
-	msm_io_w(VPE_AXI_RD_ARB_CONFIG_VALUE,
-			vpe_ctrl->vpebase + VPE_AXI_RD_ARB_CONFIG_OFFSET);
-
-	msm_io_w(VPE_CGC_ENABLE_VALUE,
-			vpe_ctrl->vpebase + VPE_CGC_EN_OFFSET);
-	msm_io_w(1, vpe_ctrl->vpebase + VPE_CMD_MODE_OFFSET);
-	msm_io_w(VPE_DEFAULT_OP_MODE_VALUE,
-			vpe_ctrl->vpebase + VPE_OP_MODE_OFFSET);
-	msm_io_w(VPE_DEFAULT_SCALE_CONFIG,
-			vpe_ctrl->vpebase + VPE_SCALE_CONFIG_OFFSET);
-	vpe_config_axi_default();
-	return rc;
-}
-
-static int msm_vpe_cfg_update(void *pinfo)
-{
-	uint32_t  rot_flag, rc = 0;
-	struct msm_pp_crop *pcrop = (struct msm_pp_crop *)pinfo;
-
-	rot_flag = msm_io_r(vpe_ctrl->vpebase +
-						VPE_OP_MODE_OFFSET) & 0xE00;
-	if (pinfo != NULL) {
-		CDBG("%s: Crop info in2_w = %d, in2_h = %d "
-			"out2_w = %d out2_h = %d\n",
-			__func__, pcrop->src_w, pcrop->src_h,
-			pcrop->dst_w, pcrop->dst_h);
-		rc = vpe_update_scaler(pcrop);
-	}
-	CDBG("return rc = %d rot_flag = %d\n", rc, rot_flag);
-	rc |= rot_flag;
-
-	return rc;
-}
-
-void vpe_update_scale_coef(uint32_t *p)
-{
-	uint32_t i, offset;
-	offset = *p;
-	for (i = offset; i < (VPE_SCALE_COEFF_NUM + offset); i++) {
-		msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_SCALE_COEFF_LSBn(i));
-		msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_SCALE_COEFF_MSBn(i));
-	}
-}
-
-void vpe_input_plane_config(uint32_t *p)
-{
-	msm_io_w(*p, vpe_ctrl->vpebase + VPE_SRC_FORMAT_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_SRC_UNPACK_PATTERN1_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_SRC_IMAGE_SIZE_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_SRC_YSTRIDE1_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_SRC_SIZE_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_SRC_XY_OFFSET);
-}
-
-void vpe_output_plane_config(uint32_t *p)
-{
-	msm_io_w(*p, vpe_ctrl->vpebase + VPE_OUT_FORMAT_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_OUT_PACK_PATTERN1_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_OUT_YSTRIDE1_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_OUT_SIZE_OFFSET);
-	msm_io_w(*(++p), vpe_ctrl->vpebase + VPE_OUT_XY_OFFSET);
-}
-
-static int vpe_operation_config(uint32_t *p)
-{
-	uint32_t w, h, temp;
-	msm_io_w(*p, vpe_ctrl->vpebase + VPE_OP_MODE_OFFSET);
-
-	temp = msm_io_r(vpe_ctrl->vpebase + VPE_OUT_SIZE_OFFSET);
-	w = temp & 0xFFF;
-	h = (temp & 0xFFF0000) >> 16;
-	if (*p++ & 0xE00) {
-		
-		vpe_ctrl->out_w = h;
-		vpe_ctrl->out_h = w;
-	} else {
-		vpe_ctrl->out_w = w;
-		vpe_ctrl->out_h = h;
-	}
-	CDBG("%s: out_w=%d, out_h=%d", __func__, vpe_ctrl->out_w,
-		vpe_ctrl->out_h);
-	return 0;
-}
-
-static int vpe_update_scaler(struct msm_pp_crop *pcrop)
-{
-	uint32_t out_ROI_width, out_ROI_height;
-	uint32_t src_ROI_width, src_ROI_height;
-
-	uint32_t phase_step_x = 0;
-	uint32_t phase_step_y = 0;
-	uint32_t phase_init_x = 0;
-	uint32_t phase_init_y = 0;
-
-	uint32_t src_roi, src_x, src_y, src_xy, temp;
-	uint32_t yscale_filter_sel, xscale_filter_sel;
-	uint32_t scale_unit_sel_x, scale_unit_sel_y;
-	uint64_t numerator, denominator;
-
-	temp =
-		msm_io_r(vpe_ctrl->vpebase + VPE_OP_MODE_OFFSET) | 0x3;
-	msm_io_w(temp, vpe_ctrl->vpebase + VPE_OP_MODE_OFFSET);
-
-	src_ROI_width = pcrop->src_w;
-	src_ROI_height = pcrop->src_h;
-	out_ROI_width = pcrop->dst_w;
-	out_ROI_height = pcrop->dst_h;
-
-	CDBG("src w = 0x%x, h=0x%x, dst w = 0x%x, h =0x%x.\n",
-		src_ROI_width, src_ROI_height, out_ROI_width,
-		out_ROI_height);
-	src_roi = (src_ROI_height << 16) + src_ROI_width;
-
-	msm_io_w(src_roi, vpe_ctrl->vpebase + VPE_SRC_SIZE_OFFSET);
-
-	src_x = pcrop->src_x;
-	src_y = pcrop->src_y;
-
-	CDBG("src_x = %d, src_y=%d.\n", src_x, src_y);
-
-	src_xy = src_y*(1<<16) + src_x;
-	msm_io_w(src_xy, vpe_ctrl->vpebase +
-			VPE_SRC_XY_OFFSET);
-	CDBG("src_xy = %d, src_roi=%d.\n", src_xy, src_roi);
-
-	
-	if ((out_ROI_width == 1 && src_ROI_width < 4) ||
-		(src_ROI_width < 4 * out_ROI_width - 3))
-		scale_unit_sel_x = 0;
-	else
-		scale_unit_sel_x = 1;
-
-	if ((out_ROI_height == 1 && src_ROI_height < 4) ||
-		(src_ROI_height < 4 * out_ROI_height - 3))
-		scale_unit_sel_y = 0;
-	else
-		scale_unit_sel_y = 1;
-
-	
-
-	if (out_ROI_width == 1)
-		phase_step_x = (uint32_t) ((src_ROI_width) <<
-						SCALER_PHASE_BITS);
-
-		
-	else if (scale_unit_sel_x == 0) {
-
-		numerator = (uint64_t)(src_ROI_width - 1) <<
-			SCALER_PHASE_BITS;
-		denominator = (uint64_t)(out_ROI_width - 1);
-		phase_step_x = (uint32_t) vpe_do_div((numerator +
-					denominator - 1), denominator);
-	} else if (scale_unit_sel_x == 1) { 
-		numerator = (uint64_t)(src_ROI_width) <<
-			SCALER_PHASE_BITS;
-		denominator = (uint64_t)(out_ROI_width);
-		phase_step_x =
-			(uint32_t) vpe_do_div(numerator, denominator);
-	}
-	
-
-	if (out_ROI_height == 1)
-		phase_step_y =
-		(uint32_t) ((src_ROI_height) << SCALER_PHASE_BITS);
-
-	
-	else if (scale_unit_sel_y == 0) {
-		numerator = (uint64_t)(src_ROI_height - 1) <<
-			SCALER_PHASE_BITS;
-		denominator = (uint64_t)(out_ROI_height - 1);
-		phase_step_y =
-		(uint32_t) vpe_do_div(
-			(numerator + denominator - 1), denominator);
-	} else if (scale_unit_sel_y == 1) { 
-		numerator = (uint64_t)(src_ROI_height) <<
-			SCALER_PHASE_BITS;
-		denominator = (uint64_t)(out_ROI_height);
-		phase_step_y = (uint32_t) vpe_do_div(
-			numerator, denominator);
-	}
-
-	
-	if (phase_step_x > HAL_MDP_PHASE_STEP_2P50)
-		xscale_filter_sel = 0;
-	else if (phase_step_x > HAL_MDP_PHASE_STEP_1P66)
-		xscale_filter_sel = 1;
-	else if (phase_step_x > HAL_MDP_PHASE_STEP_1P25)
-		xscale_filter_sel = 2;
-	else
-		xscale_filter_sel = 3;
-
-	if (phase_step_y > HAL_MDP_PHASE_STEP_2P50)
-		yscale_filter_sel = 0;
-	else if (phase_step_y > HAL_MDP_PHASE_STEP_1P66)
-		yscale_filter_sel = 1;
-	else if (phase_step_y > HAL_MDP_PHASE_STEP_1P25)
-		yscale_filter_sel = 2;
-	else
-		yscale_filter_sel = 3;
-
-	
-
-	
-	if (scale_unit_sel_x == 0) {
-		if (out_ROI_width == 1)
-			phase_init_x =
-				(uint32_t) ((src_ROI_width - 1) <<
-							SCALER_PHASE_BITS);
-		else
-			phase_init_x = 0;
-	} else if (scale_unit_sel_x == 1) 
-		phase_init_x = 0;
-
-	if (scale_unit_sel_y == 0) {
-		if (out_ROI_height == 1)
-			phase_init_y =
-			(uint32_t) ((src_ROI_height -
-						1) << SCALER_PHASE_BITS);
-		else
-			phase_init_y = 0;
-	} else if (scale_unit_sel_y == 1) 
-		phase_init_y = 0;
-
-	CDBG("phase step x = %d, step y = %d.\n",
-		 phase_step_x, phase_step_y);
-	CDBG("phase init x = %d, init y = %d.\n",
-		 phase_init_x, phase_init_y);
-
-	msm_io_w(phase_step_x, vpe_ctrl->vpebase +
-			VPE_SCALE_PHASEX_STEP_OFFSET);
-	msm_io_w(phase_step_y, vpe_ctrl->vpebase +
-			VPE_SCALE_PHASEY_STEP_OFFSET);
-
-	msm_io_w(phase_init_x, vpe_ctrl->vpebase +
-			VPE_SCALE_PHASEX_INIT_OFFSET);
-
-	msm_io_w(phase_init_y, vpe_ctrl->vpebase +
-			VPE_SCALE_PHASEY_INIT_OFFSET);
-
-	return 1;
-}
-
-int msm_vpe_is_busy(void)
-{
-	int busy = 0;
-	unsigned long flags;
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	if (vpe_ctrl->state == VPE_STATE_ACTIVE)
-		busy = 1;
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-	return busy;
-}
-static int msm_send_frame_to_vpe(void)
-{
-	int rc = 0;
-	unsigned long flags;
-
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	msm_io_w((vpe_ctrl->pp_frame_info->src_frame.sp.phy_addr +
-			  vpe_ctrl->pp_frame_info->src_frame.sp.y_off),
-			vpe_ctrl->vpebase + VPE_SRCP0_ADDR_OFFSET);
-	msm_io_w((vpe_ctrl->pp_frame_info->src_frame.sp.phy_addr +
-			  vpe_ctrl->pp_frame_info->src_frame.sp.cbcr_off),
-			vpe_ctrl->vpebase + VPE_SRCP1_ADDR_OFFSET);
-	msm_io_w((vpe_ctrl->pp_frame_info->dest_frame.sp.phy_addr +
-			  vpe_ctrl->pp_frame_info->dest_frame.sp.y_off),
-			vpe_ctrl->vpebase + VPE_OUTP0_ADDR_OFFSET);
-	msm_io_w((vpe_ctrl->pp_frame_info->dest_frame.sp.phy_addr +
-			  vpe_ctrl->pp_frame_info->dest_frame.sp.cbcr_off),
-			vpe_ctrl->vpebase + VPE_OUTP1_ADDR_OFFSET);
-	vpe_ctrl->state = VPE_STATE_ACTIVE;
-	vpe_ctrl->vpe_event_done = 0;
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-	vpe_start();
-	return rc;
-}
-
-static void vpe_send_outmsg(void)
-{
-	unsigned long flags;
-	struct msm_vpe_resp rp;
-	memset(&rp, 0, sizeof(rp));
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	if (vpe_ctrl->state == VPE_STATE_IDLE) {
-		pr_err("%s VPE is in IDLE state. Ignore the ack msg", __func__);
-		spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-		return;
-	}
-	rp.type = vpe_ctrl->pp_frame_info->pp_frame_cmd.path;
-	rp.extdata = (void *)vpe_ctrl->pp_frame_info;
-	rp.extlen = sizeof(*vpe_ctrl->pp_frame_info);
-	vpe_ctrl->state = VPE_STATE_INIT;   
-	vpe_ctrl->pp_frame_info = NULL;
-	vpe_ctrl->vpe_event_done = 1;
-	wake_up(&vpe_ctrl->vpe_event_queue);
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-	v4l2_subdev_notify(&vpe_ctrl->subdev,
-		NOTIFY_VPE_MSG_EVT, (void *)&rp);
-}
-
-static void vpe_do_tasklet(unsigned long data)
-{
-	CDBG("%s: irq_status = 0x%x",
-		   __func__, vpe_ctrl->irq_status);
-	if (vpe_ctrl->irq_status & 0x1)
-		vpe_send_outmsg();
-
-}
-DECLARE_TASKLET(vpe_tasklet, vpe_do_tasklet, 0);
-
-static irqreturn_t vpe_parse_irq(int irq_num, void *data)
-{
-	vpe_ctrl->irq_status = msm_io_r_mb(vpe_ctrl->vpebase +
-							VPE_INTR_STATUS_OFFSET);
-	msm_io_w_mb(vpe_ctrl->irq_status, vpe_ctrl->vpebase +
-				VPE_INTR_CLEAR_OFFSET);
-	msm_io_w(0, vpe_ctrl->vpebase + VPE_INTR_ENABLE_OFFSET);
-	CDBG("%s: vpe_parse_irq =0x%x.\n", __func__, vpe_ctrl->irq_status);
-	tasklet_schedule(&vpe_tasklet);
-	return IRQ_HANDLED;
-}
-
-static struct msm_cam_clk_info vpe_clk_info[] = {
-#ifdef CONFIG_ARCH_APQ8064
-	{"vpe_clk", 160000000},
-#else
-	{"vpe_clk", 200000000},
-#endif
-	{"vpe_pclk", -1},
-};
-
-int vpe_enable(uint32_t clk_rate)
-{
-	int rc = 0;
-	unsigned long flags = 0;
-	CDBG("%s", __func__);
-	
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	pr_info("%s, vpe_ctrl->state %d\n", __func__, vpe_ctrl->state);
-	if (vpe_ctrl->state != VPE_STATE_IDLE) {
-		pr_err("%s: VPE already enabled", __func__);
-		spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-		return 0;
-	}
-	vpe_ctrl->state = VPE_STATE_INIT;
-	vpe_ctrl->vpe_event_done = 0;
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-	enable_irq(vpe_ctrl->vpeirq->start);
-	vpe_ctrl->fs_vpe = regulator_get(NULL, "fs_vpe");
-	if (IS_ERR(vpe_ctrl->fs_vpe)) {
-		pr_err("%s: Regulator FS_VPE get failed %ld\n", __func__,
-			PTR_ERR(vpe_ctrl->fs_vpe));
-		vpe_ctrl->fs_vpe = NULL;
-		goto vpe_fs_failed;
-	} else if (regulator_enable(vpe_ctrl->fs_vpe)) {
-		pr_err("%s: Regulator FS_VPE enable failed\n", __func__);
-		regulator_put(vpe_ctrl->fs_vpe);
-		vpe_ctrl->fs_vpe = NULL;
-		goto vpe_fs_failed;
-	}
-
-	rc = msm_cam_clk_enable(&vpe_ctrl->pdev->dev, vpe_clk_info,
-			vpe_ctrl->vpe_clk, ARRAY_SIZE(vpe_clk_info), 1);
-	if (rc < 0) {
-		pr_err("%s: VPE clk enable failed\n", __func__);
-		goto vpe_clk_failed;
-	}
-
-	return rc;
-
-vpe_clk_failed:
-	regulator_disable(vpe_ctrl->fs_vpe);
-	regulator_put(vpe_ctrl->fs_vpe);
-	vpe_ctrl->fs_vpe = NULL;
-vpe_fs_failed:
-	disable_irq(vpe_ctrl->vpeirq->start);
-	vpe_ctrl->state = VPE_STATE_IDLE;
-	return rc;
-}
-
-int vpe_disable(void)
-{
-	int rc = 0;
-	unsigned long flags = 0;
-	CDBG("%s", __func__);
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	pr_info("%s, vpe_ctrl->state %d\n", __func__, vpe_ctrl->state);
-	if (vpe_ctrl->state == VPE_STATE_IDLE) {
-		pr_info("%s: VPE already disabled", __func__);
-		spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-		return rc;
-	}
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-
-	rc = wait_event_interruptible_timeout(vpe_ctrl->vpe_event_queue,
-		vpe_ctrl->vpe_event_done, msecs_to_jiffies(500));
-
-	if (rc < 0)
-		pr_err("%s: wait vpe event error: %d\n", __func__, rc);
-	else if (rc == 0) {
-		
-		pr_info("%s: wait vpe event timeout", __func__);
-	} else
-		pr_info("%s: got vpe done event, rc %d\n", __func__, rc);
-	rc = 0;
-
-	disable_irq(vpe_ctrl->vpeirq->start);
-	tasklet_kill(&vpe_tasklet);
-	msm_cam_clk_enable(&vpe_ctrl->pdev->dev, vpe_clk_info,
-			vpe_ctrl->vpe_clk, ARRAY_SIZE(vpe_clk_info), 0);
-
-	regulator_disable(vpe_ctrl->fs_vpe);
-	regulator_put(vpe_ctrl->fs_vpe);
-	vpe_ctrl->fs_vpe = NULL;
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	vpe_ctrl->state = VPE_STATE_IDLE;
-	vpe_ctrl->vpe_event_done = 0;
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-	return rc;
-}
-
-static int msm_vpe_do_pp(struct msm_mctl_pp_cmd *cmd,
-			struct msm_mctl_pp_frame_info *pp_frame_info)
-{
-	int rc = 0;
-	unsigned long flags;
-
-	spin_lock_irqsave(&vpe_ctrl->lock, flags);
-	if (vpe_ctrl->state == VPE_STATE_ACTIVE ||
-		 vpe_ctrl->state == VPE_STATE_IDLE) {
-		spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-		pr_err(" =====VPE in wrong state:%d!!!  Wrong!========\n",
-		vpe_ctrl->state);
-		return -EBUSY;
-	}
-	spin_unlock_irqrestore(&vpe_ctrl->lock, flags);
-	vpe_ctrl->pp_frame_info = pp_frame_info;
-	msm_vpe_cfg_update(
-		&vpe_ctrl->pp_frame_info->pp_frame_cmd.crop);
-	CDBG("%s Sending frame idx %d id %d to VPE ", __func__,
-		pp_frame_info->src_frame.buf_idx,
-		pp_frame_info->src_frame.frame_id);
-	rc = msm_send_frame_to_vpe();
-	return rc;
-}
-
-
-static int msm_vpe_resource_init(void);
-
-int msm_vpe_subdev_init(struct v4l2_subdev *sd,
-		struct msm_cam_media_controller *mctl)
-{
-	int rc = 0;
-	CDBG("%s:begin", __func__);
-	if (atomic_read(&vpe_init_done)) {
-		pr_err("%s: VPE has been initialized", __func__);
-		return -EBUSY;
-	}
-	atomic_set(&vpe_init_done, 1);
-
-	rc = msm_vpe_resource_init();
-	if (rc < 0) {
-		atomic_set(&vpe_init_done, 0);
-		return rc;
-	}
-	v4l2_set_subdev_hostdata(sd, mctl);
-	spin_lock_init(&vpe_ctrl->lock);
-	CDBG("%s:end", __func__);
-	return rc;
-}
-EXPORT_SYMBOL(msm_vpe_subdev_init);
-
-static int msm_vpe_resource_init(void)
-{
-	int rc = 0;
-
-	vpe_ctrl->vpebase = ioremap(vpe_ctrl->vpemem->start,
-		resource_size(vpe_ctrl->vpemem));
-
-	if (!vpe_ctrl->vpebase) {
-		rc = -ENOMEM;
-		pr_err("%s: vpe ioremap failed\n", __func__);
-		goto vpe_unmap_mem_region;
-	}
-
-	return rc;
-vpe_unmap_mem_region:
-	iounmap(vpe_ctrl->vpebase);
-	vpe_ctrl->vpebase = NULL;
-	return rc;  
-}
-
-void msm_vpe_subdev_release(void)
-{
-	if (!atomic_read(&vpe_init_done)) {
-		
-		pr_err("%s: no VPE object to release", __func__);
-		return;
-	}
-	vpe_reset();
-	vpe_disable();
-	iounmap(vpe_ctrl->vpebase);
-	vpe_ctrl->vpebase = NULL;
-	atomic_set(&vpe_init_done, 0);
-}
-EXPORT_SYMBOL(msm_vpe_subdev_release);
-
-static long msm_vpe_subdev_ioctl(struct v4l2_subdev *sd,
-			unsigned int subdev_cmd, void *arg)
-{
-	struct msm_mctl_pp_params *vpe_params;
-	struct msm_mctl_pp_cmd *cmd;
-	int rc = 0;
-
-	if (subdev_cmd == VIDIOC_MSM_VPE_INIT) {
-		struct msm_cam_media_controller *mctl =
-			(struct msm_cam_media_controller *)arg;
-		msm_vpe_subdev_init(sd, mctl);
-	} else if (subdev_cmd == VIDIOC_MSM_VPE_RELEASE) {
-		msm_vpe_subdev_release();
-	} else if (subdev_cmd == VIDIOC_MSM_VPE_CFG) {
-		vpe_params = (struct msm_mctl_pp_params *)arg;
-		cmd = vpe_params->cmd;
-		switch (cmd->id) {
-		case VPE_CMD_INIT:
-		case VPE_CMD_DEINIT:
-			break;
-		case VPE_CMD_RESET:
-			rc = vpe_reset();
-			break;
-		case VPE_CMD_OPERATION_MODE_CFG:
-			rc = vpe_operation_config(cmd->value);
-			break;
-		case VPE_CMD_INPUT_PLANE_CFG:
-			vpe_input_plane_config(cmd->value);
-			break;
-		case VPE_CMD_OUTPUT_PLANE_CFG:
-			vpe_output_plane_config(cmd->value);
-			break;
-		case VPE_CMD_SCALE_CFG_TYPE:
-			vpe_update_scale_coef(cmd->value);
-			break;
-		case VPE_CMD_ZOOM: {
-			rc = msm_vpe_do_pp(cmd,
-			(struct msm_mctl_pp_frame_info *)vpe_params->data);
-			break;
-		}
-		case VPE_CMD_ENABLE: {
-			struct msm_vpe_clock_rate *clk_rate = cmd->value;
-			int turbo_mode = (int)clk_rate->rate;
-			rc = turbo_mode ?
-				vpe_enable(VPE_TURBO_MODE_CLOCK_RATE) :
-				vpe_enable(VPE_NORMAL_MODE_CLOCK_RATE);
-			break;
-		}
-		case VPE_CMD_DISABLE:
-			rc = vpe_disable();
-			break;
-		case VPE_CMD_INPUT_PLANE_UPDATE:
-		case VPE_CMD_FLUSH:
-		default:
-			break;
-		}
-		CDBG("%s: end, id = %d, rc = %d", __func__, cmd->id, rc);
-	}
-	return rc;
-}
-
-static const struct v4l2_subdev_core_ops msm_vpe_subdev_core_ops = {
-	.ioctl = msm_vpe_subdev_ioctl,
-};
-
-static const struct v4l2_subdev_ops msm_vpe_subdev_ops = {
-	.core = &msm_vpe_subdev_core_ops,
-};
-
-
-static const struct v4l2_subdev_internal_ops msm_vpe_internal_ops;
-
-static int __devinit vpe_probe(struct platform_device *pdev)
-{
-	int rc = 0;
-	CDBG("%s: device id = %d\n", __func__, pdev->id);
-	vpe_ctrl = kzalloc(sizeof(struct vpe_ctrl_type), GFP_KERNEL);
-	if (!vpe_ctrl) {
-		pr_err("%s: no enough memory\n", __func__);
-		return -ENOMEM;
-	}
-
-	v4l2_subdev_init(&vpe_ctrl->subdev, &msm_vpe_subdev_ops);
-	v4l2_set_subdevdata(&vpe_ctrl->subdev, vpe_ctrl);
-	vpe_ctrl->subdev.internal_ops = &msm_vpe_internal_ops;
-	vpe_ctrl->subdev.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-	snprintf(vpe_ctrl->subdev.name, sizeof(vpe_ctrl->subdev.name), "vpe");
-	platform_set_drvdata(pdev, &vpe_ctrl->subdev);
-
-	vpe_ctrl->vpemem = platform_get_resource_byname(pdev,
-					IORESOURCE_MEM, "vpe");
-	if (!vpe_ctrl->vpemem) {
-		pr_err("%s: no mem resource?\n", __func__);
-		rc = -ENODEV;
-		goto vpe_no_resource;
-	}
-	vpe_ctrl->vpeirq = platform_get_resource_byname(pdev,
-					IORESOURCE_IRQ, "vpe");
-	if (!vpe_ctrl->vpeirq) {
-		pr_err("%s: no irq resource?\n", __func__);
-		rc = -ENODEV;
-		goto vpe_no_resource;
-	}
-
-	vpe_ctrl->vpeio = request_mem_region(vpe_ctrl->vpemem->start,
-		resource_size(vpe_ctrl->vpemem), pdev->name);
-	if (!vpe_ctrl->vpeio) {
-		pr_err("%s: no valid mem region\n", __func__);
-		rc = -EBUSY;
-		goto vpe_no_resource;
-	}
-
-	rc = request_irq(vpe_ctrl->vpeirq->start, vpe_parse_irq,
-		IRQF_TRIGGER_RISING, "vpe", 0);
-	if (rc < 0) {
-		release_mem_region(vpe_ctrl->vpemem->start,
-			resource_size(vpe_ctrl->vpemem));
-		pr_err("%s: irq request fail\n", __func__);
-		rc = -EBUSY;
-		goto vpe_no_resource;
-	}
-
-	disable_irq(vpe_ctrl->vpeirq->start);
-
-	vpe_ctrl->pdev = pdev;	
-	msm_cam_register_subdev_node(&vpe_ctrl->subdev, VPE_DEV, pdev->id);
-
-	init_waitqueue_head(&vpe_ctrl->vpe_event_queue);
-
-	return 0;
-
-vpe_no_resource:
-	kfree(vpe_ctrl);
-	return 0;
-}
-
-struct platform_driver vpe_driver = {
-	.probe = vpe_probe,
-	.driver = {
-		.name = MSM_VPE_DRV_NAME,
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init msm_vpe_init_module(void)
-{
-	return platform_driver_register(&vpe_driver);
-}
-
-module_init(msm_vpe_init_module);
-MODULE_DESCRIPTION("VPE driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/msm_vpe.h b/drivers/media/video/msm/msm_vpe.h
deleted file mode 100644
index 96f2bdf..0000000
--- a/drivers/media/video/msm/msm_vpe.h
+++ /dev/null
@@ -1,184 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#ifndef _MSM_VPE_H_
-#define _MSM_VPE_H_
-
-#include <mach/camera.h>
-
-#define VPE_INTR_ENABLE_OFFSET                0x0020
-#define VPE_INTR_STATUS_OFFSET                0x0024
-#define VPE_INTR_CLEAR_OFFSET                 0x0028
-#define VPE_DL0_START_OFFSET                  0x0030
-#define VPE_HW_VERSION_OFFSET                 0x0070
-#define VPE_SW_RESET_OFFSET                   0x0074
-#define VPE_AXI_RD_ARB_CONFIG_OFFSET          0x0078
-#define VPE_SEL_CLK_OR_HCLK_TEST_BUS_OFFSET   0x007C
-#define VPE_CGC_EN_OFFSET                     0x0100
-#define VPE_CMD_STATUS_OFFSET                 0x10008
-#define VPE_PROFILE_EN_OFFSET                 0x10010
-#define VPE_PROFILE_COUNT_OFFSET              0x10014
-#define VPE_CMD_MODE_OFFSET                   0x10060
-#define VPE_SRC_SIZE_OFFSET                   0x10108
-#define VPE_SRCP0_ADDR_OFFSET                 0x1010C
-#define VPE_SRCP1_ADDR_OFFSET                 0x10110
-#define VPE_SRC_YSTRIDE1_OFFSET               0x1011C
-#define VPE_SRC_FORMAT_OFFSET                 0x10124
-#define VPE_SRC_UNPACK_PATTERN1_OFFSET        0x10128
-#define VPE_OP_MODE_OFFSET                    0x10138
-#define VPE_SCALE_PHASEX_INIT_OFFSET          0x1013C
-#define VPE_SCALE_PHASEY_INIT_OFFSET          0x10140
-#define VPE_SCALE_PHASEX_STEP_OFFSET          0x10144
-#define VPE_SCALE_PHASEY_STEP_OFFSET          0x10148
-#define VPE_OUT_FORMAT_OFFSET                 0x10150
-#define VPE_OUT_PACK_PATTERN1_OFFSET          0x10154
-#define VPE_OUT_SIZE_OFFSET                   0x10164
-#define VPE_OUTP0_ADDR_OFFSET                 0x10168
-#define VPE_OUTP1_ADDR_OFFSET                 0x1016C
-#define VPE_OUT_YSTRIDE1_OFFSET               0x10178
-#define VPE_OUT_XY_OFFSET                     0x1019C
-#define VPE_SRC_XY_OFFSET                     0x10200
-#define VPE_SRC_IMAGE_SIZE_OFFSET             0x10208
-#define VPE_SCALE_CONFIG_OFFSET               0x10230
-#define VPE_DEINT_STATUS_OFFSET               0x30000
-#define VPE_DEINT_DECISION_OFFSET             0x30004
-#define VPE_DEINT_COEFF0_OFFSET               0x30010
-#define VPE_SCALE_STATUS_OFFSET               0x50000
-#define VPE_SCALE_SVI_PARAM_OFFSET            0x50010
-#define VPE_SCALE_SHARPEN_CFG_OFFSET          0x50020
-#define VPE_SCALE_COEFF_LSP_0_OFFSET          0x50400
-#define VPE_SCALE_COEFF_MSP_0_OFFSET          0x50404
-
-#define VPE_AXI_ARB_1_OFFSET                  0x00408
-#define VPE_AXI_ARB_2_OFFSET                  0x0040C
-
-
-#define VPE_SCALE_COEFF_LSBn(n)	(0x50400 + 8 * (n))
-#define VPE_SCALE_COEFF_MSBn(n)	(0x50404 + 8 * (n))
-#define VPE_SCALE_COEFF_NUM			32
-
-
-
-#define VPE_HARDWARE_VERSION          0x00080308
-#define VPE_SW_RESET_VALUE            0x00000010  
-#define VPE_AXI_RD_ARB_CONFIG_VALUE   0x124924
-#define VPE_CMD_MODE_VALUE            0x1
-#define VPE_DEFAULT_OP_MODE_VALUE     0x40FC0004
-#define VPE_CGC_ENABLE_VALUE          0xffff
-#define VPE_DEFAULT_SCALE_CONFIG      0x3c
-
-#define VPE_NORMAL_MODE_CLOCK_RATE   150000000
-#define VPE_TURBO_MODE_CLOCK_RATE   200000000
-
-
-
-enum vpe_state {
-	VPE_STATE_IDLE,
-	VPE_STATE_INIT,
-	VPE_STATE_ACTIVE,
-};
-
-struct vpe_ctrl_type {
-	spinlock_t        lock;
-	uint32_t          irq_status;
-	void              *syncdata;
-	uint16_t          op_mode;
-	void              *extdata;
-	uint32_t          extlen;
-	struct msm_vpe_callback *resp;
-	uint32_t          out_h;  
-	uint32_t          out_w;  
-	struct timespec   ts;
-	int               output_type;
-	int               frame_pack;
-	uint8_t           pad_2k_bool;
-	enum vpe_state    state;
-	unsigned long     out_y_addr;
-	unsigned long     out_cbcr_addr;
-	struct v4l2_subdev subdev;
-	struct platform_device *pdev;
-	struct resource   *vpeirq;
-	void __iomem      *vpebase;
-	struct resource	  *vpemem;
-	struct resource   *vpeio;
-	void        *device_extdata;
-	struct regulator *fs_vpe;
-	struct clk	*vpe_clk[2];
-	struct msm_mctl_pp_frame_info *pp_frame_info;
-	wait_queue_head_t vpe_event_queue;
-	int               vpe_event_done;
-};
-
-struct vpe_src_size_packed {
-	uint32_t        src_w;
-	uint32_t        src_h;
-};
-
-struct vpe_src_xy_packed {
-	uint32_t        src_x;
-	uint32_t        src_y;
-};
-
-struct vpe_input_plane_update_type {
-	struct vpe_src_size_packed             src_roi_size;
-	
-	struct vpe_src_xy_packed               src_roi_offset;
-	
-	uint8_t                         *src_p0_addr;
-	uint8_t                         *src_p1_addr;
-};
-
-struct vpe_msg_stats {
-	uint32_t    buffer;
-	uint32_t    frameCounter;
-};
-
-struct vpe_msg_output {
-	uint8_t   output_id;
-	uint32_t  yBuffer;
-	uint32_t  cbcrBuffer;
-	uint32_t  frameCounter;
-};
-
-struct vpe_message {
-	uint8_t  _d;
-	union {
-		struct vpe_msg_output              msgOut;
-		struct vpe_msg_stats               msgStats;
-	} _u;
-};
-
-#define SCALER_PHASE_BITS 29
-#define HAL_MDP_PHASE_STEP_2P50    0x50000000
-#define HAL_MDP_PHASE_STEP_1P66    0x35555555
-#define HAL_MDP_PHASE_STEP_1P25    0x28000000
-
-struct phase_val_t {
-	int32_t phase_init_x;
-	int32_t phase_init_y;
-	int32_t phase_step_x;
-	int32_t phase_step_y;
-};
-
-#define VIDIOC_MSM_VPE_INIT \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 15, struct msm_cam_media_controller *)
-
-#define VIDIOC_MSM_VPE_RELEASE \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 16, struct msm_cam_media_controller *)
-
-#define VIDIOC_MSM_VPE_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 17, struct msm_mctl_pp_params *)
- 
-
-#endif 
-
diff --git a/drivers/media/video/msm/rawchip/DxODOP_regMap.h b/drivers/media/video/msm/rawchip/DxODOP_regMap.h
deleted file mode 100644
index c98077f..0000000
--- a/drivers/media/video/msm/rawchip/DxODOP_regMap.h
+++ /dev/null
@@ -1,395 +0,0 @@
-/* ============================================================================
-*  DxO Labs proprietary and confidential information
-*  Copyright (C) DxO Labs 1999-2011 - (All rights reserved)
-*  ============================================================================
-*
-*  The definitions listed below are available in DxODOP integration guide.
-*
-*  DxO Labs recommends the customer referring to these definitions before use.
-*
-*  These values mentioned here are related to a specific customer DxODOP configuration
-*  (RTL parameters and FW capabilities) and delivery.
-*
-*  It must not be used for any other configuration or delivery.
-*
-*  ============================================================================ */
-
-#ifndef __DxODOP_regMap_h__
-#define __DxODOP_regMap_h__
-
-#define DxODOP_boot                                                             0x6810
-#define DxODOP_execCmd                                                          0x6808
-#define DxODOP_newFrameCmd                                                      0x680c
-
-#define DxODOP_ucode_id_7_0                                                     0x0200
-#define DxODOP_ucode_id_15_8                                                    0x0201
-#define DxODOP_hw_id_7_0                                                        0x0202
-#define DxODOP_hw_id_15_8                                                       0x0203
-#define DxODOP_calib_id_0_7_0                                                   0x0204
-#define DxODOP_calib_id_1_7_0                                                   0x0205
-#define DxODOP_calib_id_2_7_0                                                   0x0206
-#define DxODOP_calib_id_3_7_0                                                   0x0207
-#define DxODOP_error_code_7_0                                                   0x0208
-#define DxODOP_visible_line_size_7_0                                            0x0209
-#define DxODOP_visible_line_size_15_8                                           0x020a
-#define DxODOP_mode_7_0                                                         0x020b
-#define DxODOP_image_orientation_7_0                                            0x020c
-#define DxODOP_x_addr_start_7_0                                                 0x020d
-#define DxODOP_x_addr_start_15_8                                                0x020e
-#define DxODOP_y_addr_start_7_0                                                 0x020f
-#define DxODOP_y_addr_start_15_8                                                0x0210
-#define DxODOP_x_addr_end_7_0                                                   0x0211
-#define DxODOP_x_addr_end_15_8                                                  0x0212
-#define DxODOP_y_addr_end_7_0                                                   0x0213
-#define DxODOP_y_addr_end_15_8                                                  0x0214
-#define DxODOP_x_odd_inc_7_0                                                    0x0217
-#define DxODOP_x_odd_inc_15_8                                                   0x0218
-#define DxODOP_y_odd_inc_7_0                                                    0x021b
-#define DxODOP_y_odd_inc_15_8                                                   0x021c
-#define DxODOP_binning_7_0                                                      0x021d
-#define DxODOP_analogue_gain_code_greenr_7_0                                    0x021e
-#define DxODOP_analogue_gain_code_greenr_15_8                                   0x021f
-#define DxODOP_analogue_gain_code_red_7_0                                       0x0220
-#define DxODOP_analogue_gain_code_red_15_8                                      0x0221
-#define DxODOP_analogue_gain_code_blue_7_0                                      0x0222
-#define DxODOP_analogue_gain_code_blue_15_8                                     0x0223
-#define DxODOP_pre_digital_gain_greenr_7_0                                      0x0224
-#define DxODOP_pre_digital_gain_greenr_15_8                                     0x0225
-#define DxODOP_pre_digital_gain_red_7_0                                         0x0226
-#define DxODOP_pre_digital_gain_red_15_8                                        0x0227
-#define DxODOP_pre_digital_gain_blue_7_0                                        0x0228
-#define DxODOP_pre_digital_gain_blue_15_8                                       0x0229
-#define DxODOP_red_green_ratio_7_0                                              0x022e
-#define DxODOP_blue_green_ratio_7_0                                             0x022f
-#define DxODOP_estimation_mode_7_0                                              0x0234
-#define DxODOP_ROI_active_number_7_0                                            0x0235
-#define DxODOP_ROI_0_x_start_7_0                                                0x0236
-#define DxODOP_ROI_0_y_start_7_0                                                0x0237
-#define DxODOP_ROI_0_x_end_7_0                                                  0x0238
-#define DxODOP_ROI_0_y_end_7_0                                                  0x0239
-#define DxODOP_ROI_1_x_start_7_0                                                0x023a
-#define DxODOP_ROI_1_y_start_7_0                                                0x023b
-#define DxODOP_ROI_1_x_end_7_0                                                  0x023c
-#define DxODOP_ROI_1_y_end_7_0                                                  0x023d
-#define DxODOP_ROI_2_x_start_7_0                                                0x023e
-#define DxODOP_ROI_2_y_start_7_0                                                0x023f
-#define DxODOP_ROI_2_x_end_7_0                                                  0x0240
-#define DxODOP_ROI_2_y_end_7_0                                                  0x0241
-#define DxODOP_ROI_3_x_start_7_0                                                0x0242
-#define DxODOP_ROI_3_y_start_7_0                                                0x0243
-#define DxODOP_ROI_3_x_end_7_0                                                  0x0244
-#define DxODOP_ROI_3_y_end_7_0                                                  0x0245
-#define DxODOP_ROI_4_x_start_7_0                                                0x0246
-#define DxODOP_ROI_4_y_start_7_0                                                0x0247
-#define DxODOP_ROI_4_x_end_7_0                                                  0x0248
-#define DxODOP_ROI_4_y_end_7_0                                                  0x0249
-#define DxODOP_sharpness_7_0                                                    0x024a
-#define DxODOP_denoising_lowGain_7_0                                            0x024b
-#define DxODOP_denoising_mediumGain_7_0                                         0x024c
-#define DxODOP_denoising_strongGain_7_0                                         0x024d
-#define DxODOP_noise_versus_details_lowGain_7_0                                 0x024e
-#define DxODOP_noise_versus_details_mediumGain_7_0                              0x024f
-#define DxODOP_noise_versus_details_strongGain_7_0                              0x0250
-#define DxODOP_temporal_smoothing_7_0                                           0x0251
-#define DxODOP_ROI_0_stats_G_7_0                                                0x0252
-#define DxODOP_ROI_0_stats_G_15_8                                               0x0253
-#define DxODOP_ROI_0_stats_G_23_16                                              0x0254
-#define DxODOP_ROI_0_stats_G_31_24                                              0x0255
-#define DxODOP_ROI_0_stats_R_7_0                                                0x0256
-#define DxODOP_ROI_0_stats_R_15_8                                               0x0257
-#define DxODOP_ROI_0_stats_R_23_16                                              0x0258
-#define DxODOP_ROI_0_stats_R_31_24                                              0x0259
-#define DxODOP_ROI_0_stats_B_7_0                                                0x025a
-#define DxODOP_ROI_0_stats_B_15_8                                               0x025b
-#define DxODOP_ROI_0_stats_B_23_16                                              0x025c
-#define DxODOP_ROI_0_stats_B_31_24                                              0x025d
-#define DxODOP_ROI_0_stats_confidence_7_0                                       0x025e
-#define DxODOP_ROI_0_stats_confidence_15_8                                      0x025f
-#define DxODOP_ROI_0_stats_confidence_23_16                                     0x0260
-#define DxODOP_ROI_0_stats_confidence_31_24                                     0x0261
-#define DxODOP_ROI_1_stats_G_7_0                                                0x0262
-#define DxODOP_ROI_1_stats_G_15_8                                               0x0263
-#define DxODOP_ROI_1_stats_G_23_16                                              0x0264
-#define DxODOP_ROI_1_stats_G_31_24                                              0x0265
-#define DxODOP_ROI_1_stats_R_7_0                                                0x0266
-#define DxODOP_ROI_1_stats_R_15_8                                               0x0267
-#define DxODOP_ROI_1_stats_R_23_16                                              0x0268
-#define DxODOP_ROI_1_stats_R_31_24                                              0x0269
-#define DxODOP_ROI_1_stats_B_7_0                                                0x026a
-#define DxODOP_ROI_1_stats_B_15_8                                               0x026b
-#define DxODOP_ROI_1_stats_B_23_16                                              0x026c
-#define DxODOP_ROI_1_stats_B_31_24                                              0x026d
-#define DxODOP_ROI_1_stats_confidence_7_0                                       0x026e
-#define DxODOP_ROI_1_stats_confidence_15_8                                      0x026f
-#define DxODOP_ROI_1_stats_confidence_23_16                                     0x0270
-#define DxODOP_ROI_1_stats_confidence_31_24                                     0x0271
-#define DxODOP_ROI_2_stats_G_7_0                                                0x0272
-#define DxODOP_ROI_2_stats_G_15_8                                               0x0273
-#define DxODOP_ROI_2_stats_G_23_16                                              0x0274
-#define DxODOP_ROI_2_stats_G_31_24                                              0x0275
-#define DxODOP_ROI_2_stats_R_7_0                                                0x0276
-#define DxODOP_ROI_2_stats_R_15_8                                               0x0277
-#define DxODOP_ROI_2_stats_R_23_16                                              0x0278
-#define DxODOP_ROI_2_stats_R_31_24                                              0x0279
-#define DxODOP_ROI_2_stats_B_7_0                                                0x027a
-#define DxODOP_ROI_2_stats_B_15_8                                               0x027b
-#define DxODOP_ROI_2_stats_B_23_16                                              0x027c
-#define DxODOP_ROI_2_stats_B_31_24                                              0x027d
-#define DxODOP_ROI_2_stats_confidence_7_0                                       0x027e
-#define DxODOP_ROI_2_stats_confidence_15_8                                      0x027f
-#define DxODOP_ROI_2_stats_confidence_23_16                                     0x0280
-#define DxODOP_ROI_2_stats_confidence_31_24                                     0x0281
-#define DxODOP_ROI_3_stats_G_7_0                                                0x0282
-#define DxODOP_ROI_3_stats_G_15_8                                               0x0283
-#define DxODOP_ROI_3_stats_G_23_16                                              0x0284
-#define DxODOP_ROI_3_stats_G_31_24                                              0x0285
-#define DxODOP_ROI_3_stats_R_7_0                                                0x0286
-#define DxODOP_ROI_3_stats_R_15_8                                               0x0287
-#define DxODOP_ROI_3_stats_R_23_16                                              0x0288
-#define DxODOP_ROI_3_stats_R_31_24                                              0x0289
-#define DxODOP_ROI_3_stats_B_7_0                                                0x028a
-#define DxODOP_ROI_3_stats_B_15_8                                               0x028b
-#define DxODOP_ROI_3_stats_B_23_16                                              0x028c
-#define DxODOP_ROI_3_stats_B_31_24                                              0x028d
-#define DxODOP_ROI_3_stats_confidence_7_0                                       0x028e
-#define DxODOP_ROI_3_stats_confidence_15_8                                      0x028f
-#define DxODOP_ROI_3_stats_confidence_23_16                                     0x0290
-#define DxODOP_ROI_3_stats_confidence_31_24                                     0x0291
-#define DxODOP_ROI_4_stats_G_7_0                                                0x0292
-#define DxODOP_ROI_4_stats_G_15_8                                               0x0293
-#define DxODOP_ROI_4_stats_G_23_16                                              0x0294
-#define DxODOP_ROI_4_stats_G_31_24                                              0x0295
-#define DxODOP_ROI_4_stats_R_7_0                                                0x0296
-#define DxODOP_ROI_4_stats_R_15_8                                               0x0297
-#define DxODOP_ROI_4_stats_R_23_16                                              0x0298
-#define DxODOP_ROI_4_stats_R_31_24                                              0x0299
-#define DxODOP_ROI_4_stats_B_7_0                                                0x029a
-#define DxODOP_ROI_4_stats_B_15_8                                               0x029b
-#define DxODOP_ROI_4_stats_B_23_16                                              0x029c
-#define DxODOP_ROI_4_stats_B_31_24                                              0x029d
-#define DxODOP_ROI_4_stats_confidence_7_0                                       0x029e
-#define DxODOP_ROI_4_stats_confidence_15_8                                      0x029f
-#define DxODOP_ROI_4_stats_confidence_23_16                                     0x02a0
-#define DxODOP_ROI_4_stats_confidence_31_24                                     0x02a1
-#define DxODOP_frame_number_7_0                                                 0x02a2
-#define DxODOP_frame_number_15_8                                                0x02a3
-
-#define DxODOP_af_strategy_7_0                              0x02a4
-#define DxODOP_mode_idle                                                        0x00
-#if 1 
-#define DxODOP_mode_still_preview                           0x01
-#define DxODOP_mode_video                                   0x02
-#define DxODOP_mode_edof_disabled                           0x04
-#define DxODOP_mode_blue_fringing_disabled                  0x08
-#define DxODOP_mode_denoising_disabled                      0x10
-#else
-#define DxODOP_mode_stillPreview                                                0x01
-#define DxODOP_mode_video                                                       0x02
-#endif
-#define DxODOP_execCmd_SettingCmd                                               0x01
-#define DxODOP_focus_strategy_CW                                                0x01
-#define DxODOP_focus_strategy_SL                                                0x02
-#define DxODOP_focus_strategy_SN                                                0x04
-#define DxODOP_focus_strategy_UF                                                0x08
-
-#if 1 
-#define DxODOP_dfltVal_ucode_id_7_0                         0x00
-#define DxODOP_dfltVal_ucode_id_15_8                        0x02
-#define DxODOP_dfltVal_hw_id_7_0                            0xed
-#define DxODOP_dfltVal_hw_id_15_8                           0xb4
-#define DxODOP_dfltVal_calib_id_0_7_0                       0x00
-#define DxODOP_dfltVal_calib_id_1_7_0                       0x00
-#define DxODOP_dfltVal_calib_id_2_7_0                       0x00
-#define DxODOP_dfltVal_calib_id_3_7_0                       0x01
-#else
-#define DxODOP_dfltVal_ucode_id_7_0                                             0x04
-#define DxODOP_dfltVal_ucode_id_15_8                                            0x01
-#define DxODOP_dfltVal_hw_id_7_0                                                0xed
-#define DxODOP_dfltVal_hw_id_15_8                                               0xb4
-#define DxODOP_dfltVal_calib_id_0_7_0                                           0x00
-#define DxODOP_dfltVal_calib_id_1_7_0                                           0x00
-#define DxODOP_dfltVal_calib_id_2_7_0                                           0x00
-#define DxODOP_dfltVal_calib_id_3_7_0                                           0x00
-#endif
-#define DxODOP_dfltVal_error_code_7_0                                           0x00
-#define DxODOP_dfltVal_visible_line_size_7_0                                    0x00
-#define DxODOP_dfltVal_visible_line_size_15_8                                   0x00
-#define DxODOP_dfltVal_mode_7_0                                                 0x00
-#define DxODOP_dfltVal_image_orientation_7_0                                    0x00
-#define DxODOP_dfltVal_x_addr_start_7_0                                         0x00
-#define DxODOP_dfltVal_x_addr_start_15_8                                        0x00
-#define DxODOP_dfltVal_y_addr_start_7_0                                         0x00
-#define DxODOP_dfltVal_y_addr_start_15_8                                        0x00
-#define DxODOP_dfltVal_x_addr_end_7_0                                           0x00
-#define DxODOP_dfltVal_x_addr_end_15_8                                          0x00
-#define DxODOP_dfltVal_y_addr_end_7_0                                           0x00
-#define DxODOP_dfltVal_y_addr_end_15_8                                          0x00
-#define DxODOP_dfltVal_x_odd_inc_7_0                                            0x00
-#define DxODOP_dfltVal_x_odd_inc_15_8                                           0x00
-#define DxODOP_dfltVal_y_odd_inc_7_0                                            0x00
-#define DxODOP_dfltVal_y_odd_inc_15_8                                           0x00
-#define DxODOP_dfltVal_binning_7_0                                              0x00
-#define DxODOP_dfltVal_analogue_gain_code_greenr_7_0                            0x00
-#define DxODOP_dfltVal_analogue_gain_code_greenr_15_8                           0x00
-#define DxODOP_dfltVal_analogue_gain_code_red_7_0                               0x00
-#define DxODOP_dfltVal_analogue_gain_code_red_15_8                              0x00
-#define DxODOP_dfltVal_analogue_gain_code_blue_7_0                              0x00
-#define DxODOP_dfltVal_analogue_gain_code_blue_15_8                             0x00
-#define DxODOP_dfltVal_pre_digital_gain_greenr_7_0                              0x00
-#define DxODOP_dfltVal_pre_digital_gain_greenr_15_8                             0x00
-#define DxODOP_dfltVal_pre_digital_gain_red_7_0                                 0x00
-#define DxODOP_dfltVal_pre_digital_gain_red_15_8                                0x00
-#define DxODOP_dfltVal_pre_digital_gain_blue_7_0                                0x00
-#define DxODOP_dfltVal_pre_digital_gain_blue_15_8                               0x00
-#define DxODOP_dfltVal_red_green_ratio_7_0                                      0x00
-#define DxODOP_dfltVal_blue_green_ratio_7_0                                     0x00
-#define DxODOP_dfltVal_estimation_mode_7_0                                      0x00
-#define DxODOP_dfltVal_ROI_active_number_7_0                                    0x00
-#define DxODOP_dfltVal_ROI_0_x_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_0_y_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_0_x_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_0_y_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_1_x_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_1_y_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_1_x_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_1_y_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_2_x_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_2_y_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_2_x_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_2_y_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_3_x_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_3_y_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_3_x_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_3_y_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_4_x_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_4_y_start_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_4_x_end_7_0                                          0x00
-#define DxODOP_dfltVal_ROI_4_y_end_7_0                                          0x00
-#define DxODOP_dfltVal_sharpness_7_0                                            0x80
-#define DxODOP_dfltVal_denoising_lowGain_7_0                                    0x80
-#define DxODOP_dfltVal_denoising_mediumGain_7_0                                 0x80
-#define DxODOP_dfltVal_denoising_strongGain_7_0                                 0x80
-#define DxODOP_dfltVal_noise_versus_details_lowGain_7_0                         0x80
-#define DxODOP_dfltVal_noise_versus_details_mediumGain_7_0                      0x80
-#define DxODOP_dfltVal_noise_versus_details_strongGain_7_0                      0x80
-#define DxODOP_dfltVal_temporal_smoothing_7_0                                   0x00
-#define DxODOP_dfltVal_ROI_0_stats_G_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_0_stats_G_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_0_stats_G_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_0_stats_G_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_0_stats_R_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_0_stats_R_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_0_stats_R_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_0_stats_R_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_0_stats_B_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_0_stats_B_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_0_stats_B_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_0_stats_B_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_0_stats_confidence_7_0                               0x00
-#define DxODOP_dfltVal_ROI_0_stats_confidence_15_8                              0x00
-#define DxODOP_dfltVal_ROI_0_stats_confidence_23_16                             0x00
-#define DxODOP_dfltVal_ROI_0_stats_confidence_31_24                             0x00
-#define DxODOP_dfltVal_ROI_1_stats_G_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_1_stats_G_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_1_stats_G_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_1_stats_G_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_1_stats_R_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_1_stats_R_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_1_stats_R_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_1_stats_R_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_1_stats_B_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_1_stats_B_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_1_stats_B_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_1_stats_B_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_1_stats_confidence_7_0                               0x00
-#define DxODOP_dfltVal_ROI_1_stats_confidence_15_8                              0x00
-#define DxODOP_dfltVal_ROI_1_stats_confidence_23_16                             0x00
-#define DxODOP_dfltVal_ROI_1_stats_confidence_31_24                             0x00
-#define DxODOP_dfltVal_ROI_2_stats_G_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_2_stats_G_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_2_stats_G_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_2_stats_G_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_2_stats_R_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_2_stats_R_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_2_stats_R_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_2_stats_R_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_2_stats_B_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_2_stats_B_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_2_stats_B_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_2_stats_B_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_2_stats_confidence_7_0                               0x00
-#define DxODOP_dfltVal_ROI_2_stats_confidence_15_8                              0x00
-#define DxODOP_dfltVal_ROI_2_stats_confidence_23_16                             0x00
-#define DxODOP_dfltVal_ROI_2_stats_confidence_31_24                             0x00
-#define DxODOP_dfltVal_ROI_3_stats_G_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_3_stats_G_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_3_stats_G_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_3_stats_G_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_3_stats_R_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_3_stats_R_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_3_stats_R_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_3_stats_R_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_3_stats_B_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_3_stats_B_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_3_stats_B_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_3_stats_B_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_3_stats_confidence_7_0                               0x00
-#define DxODOP_dfltVal_ROI_3_stats_confidence_15_8                              0x00
-#define DxODOP_dfltVal_ROI_3_stats_confidence_23_16                             0x00
-#define DxODOP_dfltVal_ROI_3_stats_confidence_31_24                             0x00
-#define DxODOP_dfltVal_ROI_4_stats_G_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_4_stats_G_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_4_stats_G_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_4_stats_G_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_4_stats_R_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_4_stats_R_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_4_stats_R_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_4_stats_R_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_4_stats_B_7_0                                        0x00
-#define DxODOP_dfltVal_ROI_4_stats_B_15_8                                       0x00
-#define DxODOP_dfltVal_ROI_4_stats_B_23_16                                      0x00
-#define DxODOP_dfltVal_ROI_4_stats_B_31_24                                      0x00
-#define DxODOP_dfltVal_ROI_4_stats_confidence_7_0                               0x00
-#define DxODOP_dfltVal_ROI_4_stats_confidence_15_8                              0x00
-#define DxODOP_dfltVal_ROI_4_stats_confidence_23_16                             0x00
-#define DxODOP_dfltVal_ROI_4_stats_confidence_31_24                             0x00
-#define DxODOP_dfltVal_frame_number_7_0                                         0xff
-#define DxODOP_dfltVal_frame_number_15_8                                        0xff
-#if 1 
-#define DxODOP_dfltVal_af_strategy_7_0                      0x11
-#endif
-
-#define DxODOP_error_code_ok                                                    0x00
-#define DxODOP_error_code_bad_hw_id                                             0x01
-#define DxODOP_error_code_bad_calib_data                                        0x02
-#define DxODOP_error_code_setting_not_ready                                     0x03
-#define DxODOP_error_code_no_matching_setting                                   0x04
-#define DxODOP_error_code_invalid_cmd                                           0x05
-#define DxODOP_error_code_invalid_mode                                          0x06
-#define DxODOP_error_code_y_addr_start_too_large                                0x08
-#define DxODOP_error_code_y_addr_end_too_large                                  0x0a
-#define DxODOP_error_code_y_addr_end_even                                       0x0e
-#define DxODOP_error_code_y_boundaries_order                                    0x10
-#define DxODOP_error_code_y_odd_inc_too_large                                   0x12
-#define DxODOP_error_code_y_odd_inc_even                                        0x14
-#define DxODOP_error_code_invalid_binning                                       0x1c
-#define DxODOP_error_code_invalid_orientation                                   0x1d
-#define DxODOP_error_code_invalid_analogue_gain_code                            0x1e
-#define DxODOP_error_code_invalid_analogue_gain_code_greenR                     0x1f
-#define DxODOP_error_code_invalid_analogue_gain_code_red                        0x20
-#define DxODOP_error_code_invalid_analogue_gain_code_blue                       0x21
-#define DxODOP_error_code_invalid_digital_gain_greenR                           0x22
-#define DxODOP_error_code_invalid_digital_gain_red                              0x23
-#define DxODOP_error_code_invalid_digital_gain_blue                             0x24
-#define DxODOP_error_code_invalid_estimation_mode                               0x25
-#define DxODOP_error_code_red_green_ratio_too_low                               0x26
-#define DxODOP_error_code_blue_green_ratio_too_low                              0x27
-#define DxODOP_error_code_ROI_number_too_large                                  0x29
-#define DxODOP_error_code_ROI_x_start_too_large                                 0x2a
-#define DxODOP_error_code_ROI_y_start_too_large                                 0x2b
-#define DxODOP_error_code_ROI_x_end_too_large                                   0x2c
-#define DxODOP_error_code_ROI_y_end_too_large                                   0x2d
-#define DxODOP_error_code_ROI_x_order                                           0x2e
-#define DxODOP_error_code_ROI_y_order                                           0x2f
-
-#endif 
diff --git a/drivers/media/video/msm/rawchip/DxODPP_regMap.h b/drivers/media/video/msm/rawchip/DxODPP_regMap.h
deleted file mode 100644
index b1d902b..0000000
--- a/drivers/media/video/msm/rawchip/DxODPP_regMap.h
+++ /dev/null
@@ -1,156 +0,0 @@
-/* ============================================================================
-*  DxO Labs proprietary and confidential information
-*  Copyright (C) DxO Labs 1999-2011 - (All rights reserved)
-*  ============================================================================
-*
-*  The definitions listed below are available in DxODPP integration guide.
-*
-*  DxO Labs recommends the customer referring to these definitions before use.
-*
-*  These values mentioned here are related to a specific customer DxODPP configuration
-*  (RTL parameters and FW capabilities) and delivery.
-*
-*  It must not be used for any other configuration or delivery.
-*
-*  ============================================================================ */
-
-#ifndef __DxODPP_regMap_h__
-#define __DxODPP_regMap_h__
-
-#define DxODPP_boot                                                             0xd010
-#define DxODPP_execCmd                                                          0xd008
-#define DxODPP_newFrameCmd                                                      0xd00c
-
-#define DxODPP_ucode_id_7_0                                                     0x0200
-#define DxODPP_ucode_id_15_8                                                    0x0201
-#define DxODPP_hw_id_7_0                                                        0x0202
-#define DxODPP_hw_id_15_8                                                       0x0203
-#define DxODPP_calib_id_0_7_0                                                   0x0204
-#define DxODPP_calib_id_1_7_0                                                   0x0205
-#define DxODPP_calib_id_2_7_0                                                   0x0206
-#define DxODPP_calib_id_3_7_0                                                   0x0207
-#define DxODPP_error_code_7_0                                                   0x0208
-#define DxODPP_visible_line_size_7_0                                            0x0209
-#define DxODPP_visible_line_size_15_8                                           0x020a
-#define DxODPP_mode_7_0                                                         0x020b
-#define DxODPP_image_orientation_7_0                                            0x020c
-#define DxODPP_x_addr_start_7_0                                                 0x020d
-#define DxODPP_x_addr_start_15_8                                                0x020e
-#define DxODPP_y_addr_start_7_0                                                 0x020f
-#define DxODPP_y_addr_start_15_8                                                0x0210
-#define DxODPP_x_addr_end_7_0                                                   0x0211
-#define DxODPP_x_addr_end_15_8                                                  0x0212
-#define DxODPP_y_addr_end_7_0                                                   0x0213
-#define DxODPP_y_addr_end_15_8                                                  0x0214
-#define DxODPP_x_even_inc_7_0                                                   0x0215
-#define DxODPP_x_even_inc_15_8                                                  0x0216
-#define DxODPP_x_odd_inc_7_0                                                    0x0217
-#define DxODPP_x_odd_inc_15_8                                                   0x0218
-#define DxODPP_y_even_inc_7_0                                                   0x0219
-#define DxODPP_y_even_inc_15_8                                                  0x021a
-#define DxODPP_y_odd_inc_7_0                                                    0x021b
-#define DxODPP_y_odd_inc_15_8                                                   0x021c
-#define DxODPP_analogue_gain_code_greenr_7_0                                    0x021e
-#define DxODPP_analogue_gain_code_greenr_15_8                                   0x021f
-#define DxODPP_pre_digital_gain_greenr_7_0                                      0x0224
-#define DxODPP_pre_digital_gain_greenr_15_8                                     0x0225
-#define DxODPP_exposure_time_7_0                                                0x022a
-#define DxODPP_exposure_time_15_8                                               0x022b
-#define DxODPP_temporal_smoothing_7_0                                           0x022e
-#define DxODPP_flash_preflash_ratio_7_0                                         0x022f
-#define DxODPP_flash_preflash_ratio_15_8                                        0x0230
-#define DxODPP_focal_info_7_0                                                   0x0231
-#define DxODPP_frame_number_7_0                                                 0x0232
-#define DxODPP_frame_number_15_8                                                0x0233
-#define DxODPP_last_estimation_frame_number_7_0                                 0x0234
-#define DxODPP_last_estimation_frame_number_15_8                                0x0235
-
-#define DxODPP_execCmd_SettingCmd                                               0x01
-#define DxODPP_mode_cls_msk                                                     0x01
-#define DxODPP_mode_grGb_msk                                                    0x02
-#define DxODPP_mode_unused_bit5                                                 0x20
-#define DxODPP_mode_unused_bit6                                                 0x40
-#define DxODPP_mode_preFlash                                                    0x08
-#define DxODPP_mode_flash                                                       0x10
-#define DxODPP_mode_restartEstim                                                0x80
-
-#if 1 
-#define DxODPP_dfltVal_ucode_id_7_0                         0x07
-#define DxODPP_dfltVal_ucode_id_15_8                        0x01
-#define DxODPP_dfltVal_hw_id_7_0                            0xe8
-#define DxODPP_dfltVal_hw_id_15_8                           0xeb
-#define DxODPP_dfltVal_calib_id_0_7_0                       0x00
-#define DxODPP_dfltVal_calib_id_1_7_0                       0x00
-#define DxODPP_dfltVal_calib_id_2_7_0                       0x00
-#define DxODPP_dfltVal_calib_id_3_7_0                       0x01
-#else
-#define DxODPP_dfltVal_ucode_id_7_0                                             0x04
-#define DxODPP_dfltVal_ucode_id_15_8                                            0x01
-#define DxODPP_dfltVal_hw_id_7_0                                                0xe8
-#define DxODPP_dfltVal_hw_id_15_8                                               0xeb
-#define DxODPP_dfltVal_calib_id_0_7_0                                           0x00
-#define DxODPP_dfltVal_calib_id_1_7_0                                           0x00
-#define DxODPP_dfltVal_calib_id_2_7_0                                           0x00
-#define DxODPP_dfltVal_calib_id_3_7_0                                           0x00
-#endif
-#define DxODPP_dfltVal_error_code_7_0                                           0x00
-#define DxODPP_dfltVal_visible_line_size_7_0                                    0x00
-#define DxODPP_dfltVal_visible_line_size_15_8                                   0x00
-#define DxODPP_dfltVal_mode_7_0                                                 0x00
-#define DxODPP_dfltVal_image_orientation_7_0                                    0x00
-#define DxODPP_dfltVal_x_addr_start_7_0                                         0x00
-#define DxODPP_dfltVal_x_addr_start_15_8                                        0x00
-#define DxODPP_dfltVal_y_addr_start_7_0                                         0x00
-#define DxODPP_dfltVal_y_addr_start_15_8                                        0x00
-#define DxODPP_dfltVal_x_addr_end_7_0                                           0x00
-#define DxODPP_dfltVal_x_addr_end_15_8                                          0x00
-#define DxODPP_dfltVal_y_addr_end_7_0                                           0x00
-#define DxODPP_dfltVal_y_addr_end_15_8                                          0x00
-#define DxODPP_dfltVal_x_even_inc_7_0                                           0x00
-#define DxODPP_dfltVal_x_even_inc_15_8                                          0x00
-#define DxODPP_dfltVal_x_odd_inc_7_0                                            0x00
-#define DxODPP_dfltVal_x_odd_inc_15_8                                           0x00
-#define DxODPP_dfltVal_y_even_inc_7_0                                           0x00
-#define DxODPP_dfltVal_y_even_inc_15_8                                          0x00
-#define DxODPP_dfltVal_y_odd_inc_7_0                                            0x00
-#define DxODPP_dfltVal_y_odd_inc_15_8                                           0x00
-#define DxODPP_dfltVal_analogue_gain_code_greenr_7_0                            0x00
-#define DxODPP_dfltVal_analogue_gain_code_greenr_15_8                           0x00
-#define DxODPP_dfltVal_pre_digital_gain_greenr_7_0                              0x00
-#define DxODPP_dfltVal_pre_digital_gain_greenr_15_8                             0x00
-#define DxODPP_dfltVal_exposure_time_7_0                                        0x00
-#define DxODPP_dfltVal_exposure_time_15_8                                       0x00
-#define DxODPP_dfltVal_temporal_smoothing_7_0                                   0x00
-#define DxODPP_dfltVal_flash_preflash_ratio_7_0                                 0x00
-#define DxODPP_dfltVal_flash_preflash_ratio_15_8                                0x00
-#define DxODPP_dfltVal_focal_info_7_0                                           0x00
-#define DxODPP_dfltVal_frame_number_7_0                                         0xff
-#define DxODPP_dfltVal_frame_number_15_8                                        0xff
-#define DxODPP_dfltVal_last_estimation_frame_number_7_0                         0xff
-#define DxODPP_dfltVal_last_estimation_frame_number_15_8                        0xff
-
-#define DxODPP_error_code_ok                                                    0x00
-#define DxODPP_error_code_bad_hw_id                                             0x01
-#define DxODPP_error_code_bad_calib_data                                        0x02
-#define DxODPP_error_code_setting_not_ready                                     0x03
-#define DxODPP_error_code_no_matching_setting                                   0x04
-#define DxODPP_error_code_invalid_cmd                                           0x05
-#define DxODPP_error_code_invalid_mode                                          0x06
-#define DxODPP_error_code_y_addr_start_too_large                                0x08
-#define DxODPP_error_code_y_addr_end_too_large                                  0x0a
-#define DxODPP_error_code_y_addr_start_odd                                      0x0c
-#define DxODPP_error_code_y_addr_end_even                                       0x0e
-#define DxODPP_error_code_y_boundaries_order                                    0x10
-#define DxODPP_error_code_y_odd_inc_too_large                                   0x12
-#if 1 
-#define DxODPP_error_code_y_odd_inc_even                    0x14
-#endif
-#define DxODPP_error_code_x_decim_unsupported                                   0x15
-#define DxODPP_error_code_y_decim_unsupported                                   0x16
-#if 1 
-#define DxODPP_error_code_y_even_inc_even                   0x18
-#endif
-#define DxODPP_error_code_y_even_inc_too_large                                  0x1a
-#define DxODPP_error_code_temporal_smoothing_too_large                          0x1b
-
-#endif 
diff --git a/drivers/media/video/msm/rawchip/DxOPDP_regMap.h b/drivers/media/video/msm/rawchip/DxOPDP_regMap.h
deleted file mode 100644
index eee7ab3..0000000
--- a/drivers/media/video/msm/rawchip/DxOPDP_regMap.h
+++ /dev/null
@@ -1,149 +0,0 @@
-/* ============================================================================
-*  DxO Labs proprietary and confidential information
-*  Copyright (C) DxO Labs 1999-2011 - (All rights reserved)
-*  ============================================================================
-*
-*  The definitions listed below are available in DxOPDP integration guide.
-*
-*  DxO Labs recommends the customer referring to these definitions before use.
-*
-*  These values mentioned here are related to a specific customer DxOPDP configuration
-*  (RTL parameters and FW capabilities) and delivery.
-*
-*  It must not be used for any other configuration or delivery.
-*
-*  ============================================================================ */
-
-#ifndef __DxOPDP_regMap_h__
-#define __DxOPDP_regMap_h__
-
-#define DxOPDP_boot                                                             0x1a10
-#define DxOPDP_execCmd                                                          0x1a08
-#define DxOPDP_newFrameCmd                                                      0x1a0c
-
-#define DxOPDP_ucode_id_7_0                                                     0x0200
-#define DxOPDP_ucode_id_15_8                                                    0x0201
-#define DxOPDP_hw_id_7_0                                                        0x0202
-#define DxOPDP_hw_id_15_8                                                       0x0203
-#define DxOPDP_calib_id_0_7_0                                                   0x0204
-#define DxOPDP_calib_id_1_7_0                                                   0x0205
-#define DxOPDP_calib_id_2_7_0                                                   0x0206
-#define DxOPDP_calib_id_3_7_0                                                   0x0207
-#define DxOPDP_error_code_7_0                                                   0x0208
-#define DxOPDP_visible_line_size_7_0                                            0x0209
-#define DxOPDP_visible_line_size_15_8                                           0x020a
-#define DxOPDP_mode_7_0                                                         0x020b
-#define DxOPDP_image_orientation_7_0                                            0x020c
-#define DxOPDP_x_addr_start_7_0                                                 0x020d
-#define DxOPDP_x_addr_start_15_8                                                0x020e
-#define DxOPDP_y_addr_start_7_0                                                 0x020f
-#define DxOPDP_y_addr_start_15_8                                                0x0210
-#define DxOPDP_x_addr_end_7_0                                                   0x0211
-#define DxOPDP_x_addr_end_15_8                                                  0x0212
-#define DxOPDP_y_addr_end_7_0                                                   0x0213
-#define DxOPDP_y_addr_end_15_8                                                  0x0214
-#define DxOPDP_x_odd_inc_7_0                                                    0x0217
-#define DxOPDP_x_odd_inc_15_8                                                   0x0218
-#define DxOPDP_y_odd_inc_7_0                                                    0x021b
-#define DxOPDP_y_odd_inc_15_8                                                   0x021c
-#define DxOPDP_binning_7_0                                                      0x021d
-#define DxOPDP_analogue_gain_code_greenr_7_0                                    0x021e
-#define DxOPDP_analogue_gain_code_greenr_15_8                                   0x021f
-#define DxOPDP_analogue_gain_code_red_7_0                                       0x0220
-#define DxOPDP_analogue_gain_code_red_15_8                                      0x0221
-#define DxOPDP_analogue_gain_code_blue_7_0                                      0x0222
-#define DxOPDP_analogue_gain_code_blue_15_8                                     0x0223
-#define DxOPDP_pre_digital_gain_greenr_7_0                                      0x0224
-#define DxOPDP_pre_digital_gain_greenr_15_8                                     0x0225
-#define DxOPDP_pre_digital_gain_red_7_0                                         0x0226
-#define DxOPDP_pre_digital_gain_red_15_8                                        0x0227
-#define DxOPDP_pre_digital_gain_blue_7_0                                        0x0228
-#define DxOPDP_pre_digital_gain_blue_15_8                                       0x0229
-#define DxOPDP_exposure_time_7_0                                                0x022a
-#define DxOPDP_exposure_time_15_8                                               0x022b
-#define DxOPDP_dead_pixels_correction_lowGain_7_0                               0x022e
-#define DxOPDP_dead_pixels_correction_mediumGain_7_0                            0x022f
-#define DxOPDP_dead_pixels_correction_strongGain_7_0                            0x0230
-#define DxOPDP_frame_number_7_0                                                 0x0231
-#define DxOPDP_frame_number_15_8                                                0x0232
-
-#define DxOPDP_execCmd_SettingCmd                                               0x01
-#define DxOPDP_mode_features_enabled                                            0x01
-#define DxOPDP_mode_black_point_disabled                                        0x08
-#define DxOPDP_mode_dead_pixels_disabled                                        0x10
-#define DxOPDP_mode_phase_repair_disabled                                       0x20
-
-#if 1 
-#define DxOPDP_dfltVal_ucode_id_7_0                                             0x07
-#define DxOPDP_dfltVal_ucode_id_15_8                                            0x01
-#define DxOPDP_dfltVal_hw_id_7_0                                                0x5b
-#define DxOPDP_dfltVal_hw_id_15_8                                               0xe6
-#define DxOPDP_dfltVal_calib_id_0_7_0                                           0x00
-#define DxOPDP_dfltVal_calib_id_1_7_0                                           0x00
-#define DxOPDP_dfltVal_calib_id_2_7_0                                           0x00
-#define DxOPDP_dfltVal_calib_id_3_7_0                                           0x01
-#else
-#define DxOPDP_dfltVal_ucode_id_7_0                                             0x04
-#define DxOPDP_dfltVal_ucode_id_15_8                                            0x01
-#define DxOPDP_dfltVal_hw_id_7_0                                                0x5b
-#define DxOPDP_dfltVal_hw_id_15_8                                               0xe6
-#define DxOPDP_dfltVal_calib_id_0_7_0                                           0x00
-#define DxOPDP_dfltVal_calib_id_1_7_0                                           0x00
-#define DxOPDP_dfltVal_calib_id_2_7_0                                           0x00
-#define DxOPDP_dfltVal_calib_id_3_7_0                                           0x00
-#endif
-#define DxOPDP_dfltVal_error_code_7_0                                           0x00
-#define DxOPDP_dfltVal_visible_line_size_7_0                                    0x00
-#define DxOPDP_dfltVal_visible_line_size_15_8                                   0x00
-#define DxOPDP_dfltVal_mode_7_0                                                 0x00
-#define DxOPDP_dfltVal_image_orientation_7_0                                    0x00
-#define DxOPDP_dfltVal_x_addr_start_7_0                                         0x00
-#define DxOPDP_dfltVal_x_addr_start_15_8                                        0x00
-#define DxOPDP_dfltVal_y_addr_start_7_0                                         0x00
-#define DxOPDP_dfltVal_y_addr_start_15_8                                        0x00
-#define DxOPDP_dfltVal_x_addr_end_7_0                                           0x00
-#define DxOPDP_dfltVal_x_addr_end_15_8                                          0x00
-#define DxOPDP_dfltVal_y_addr_end_7_0                                           0x00
-#define DxOPDP_dfltVal_y_addr_end_15_8                                          0x00
-#define DxOPDP_dfltVal_x_odd_inc_7_0                                            0x00
-#define DxOPDP_dfltVal_x_odd_inc_15_8                                           0x00
-#define DxOPDP_dfltVal_y_odd_inc_7_0                                            0x00
-#define DxOPDP_dfltVal_y_odd_inc_15_8                                           0x00
-#define DxOPDP_dfltVal_binning_7_0                                              0x00
-#define DxOPDP_dfltVal_analogue_gain_code_greenr_7_0                            0x00
-#define DxOPDP_dfltVal_analogue_gain_code_greenr_15_8                           0x00
-#define DxOPDP_dfltVal_analogue_gain_code_red_7_0                               0x00
-#define DxOPDP_dfltVal_analogue_gain_code_red_15_8                              0x00
-#define DxOPDP_dfltVal_analogue_gain_code_blue_7_0                              0x00
-#define DxOPDP_dfltVal_analogue_gain_code_blue_15_8                             0x00
-#define DxOPDP_dfltVal_pre_digital_gain_greenr_7_0                              0x00
-#define DxOPDP_dfltVal_pre_digital_gain_greenr_15_8                             0x00
-#define DxOPDP_dfltVal_pre_digital_gain_red_7_0                                 0x00
-#define DxOPDP_dfltVal_pre_digital_gain_red_15_8                                0x00
-#define DxOPDP_dfltVal_pre_digital_gain_blue_7_0                                0x00
-#define DxOPDP_dfltVal_pre_digital_gain_blue_15_8                               0x00
-#define DxOPDP_dfltVal_exposure_time_7_0                                        0x00
-#define DxOPDP_dfltVal_exposure_time_15_8                                       0x00
-#define DxOPDP_dfltVal_dead_pixels_correction_lowGain_7_0                       0x80
-#define DxOPDP_dfltVal_dead_pixels_correction_mediumGain_7_0                    0x80
-#define DxOPDP_dfltVal_dead_pixels_correction_strongGain_7_0                    0x80
-#define DxOPDP_dfltVal_frame_number_7_0                                         0xff
-#define DxOPDP_dfltVal_frame_number_15_8                                        0xff
-
-#define DxOPDP_error_code_ok                                                    0x00
-#define DxOPDP_error_code_bad_hw_id                                             0x01
-#define DxOPDP_error_code_bad_calib_data                                        0x02
-#define DxOPDP_error_code_setting_not_ready                                     0x03
-#define DxOPDP_error_code_no_matching_setting                                   0x04
-#define DxOPDP_error_code_y_addr_end_too_large                                  0x0a
-#define DxOPDP_error_code_y_addr_start_odd                                      0x0c
-#define DxOPDP_error_code_y_addr_end_even                                       0x0e
-#define DxOPDP_error_code_y_boundaries_order                                    0x10
-#define DxOPDP_error_code_y_odd_inc_too_large                                   0x12
-#define DxOPDP_error_code_y_odd_inc_even                                        0x14
-#define DxOPDP_error_code_y_even_inc_even                                       0x18
-#define DxOPDP_error_code_invalid_binning                                       0x1c
-#define DxOPDP_error_code_invalid_orientation                                   0x1d
-#define DxOPDP_error_code_invalid_analogue_gain_code_greenR                     0x1f
-
-#endif 
diff --git a/drivers/media/video/msm/rawchip/Makefile b/drivers/media/video/msm/rawchip/Makefile
deleted file mode 100644
index 2bee243..0000000
--- a/drivers/media/video/msm/rawchip/Makefile
+++ /dev/null
@@ -1,3 +0,0 @@
-GCC_VERSION      := $(shell $(CONFIG_SHELL) $(PWD)/scripts/gcc-version.sh $(CROSS_COMPILE)gcc)
-obj-$(CONFIG_RAWCHIP) += rawchip_spi.o rawchip.o Yushan_API.o Yushan_Platform_Specific.o Yushan_HTC_Functions.o
-obj-$(CONFIG_RAWCHIP) += yushan_reg.o yushan_u_code_r2.o yushan_u_code_r3.o yushan_reg_s5k3h2yx.o yushan_reg_imx175.o yushan_reg_ov8838.o yushan_reg_ar0260.o yushan_reg_ov2722.o yushan_reg_ov5693.o yushan_reg_s5k6a2ya.o
diff --git a/drivers/media/video/msm/rawchip/Yushan_API.c b/drivers/media/video/msm/rawchip/Yushan_API.c
deleted file mode 100644
index 6594926..0000000
--- a/drivers/media/video/msm/rawchip/Yushan_API.c
+++ /dev/null
@@ -1,2647 +0,0 @@
-
-#include "Yushan_API.h"
-#include "Yushan_Platform_Specific.h"
-
-
-
-
-bool_t	gPllLocked;
-
-
-bool_t	Yushan_Init_LDO(bool_t	bUseExternalLDO)
-{
-	bool_t		fStatus = SUCCESS;
-	uint8_t		bSpiReadData = 0, bLDOTrimValue = 0, bSpiData = 0;
-	uint16_t	uwCount = 500;	
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	
-	SPI_Read(YUSHAN_IOR_NVM_STATUS, 1, (uint8_t *)(&bSpiReadData));
-	while (bSpiReadData != 1) {
-		
-		SPI_Read(YUSHAN_IOR_NVM_STATUS, 1, (uint8_t *)(&bSpiReadData));
-		
-		uwCount--;
-		if (!uwCount)
-			break;	
-	}
-
-	
-	if (bSpiReadData == 1) {
-		
-		SPI_Read(YUSHAN_IOR_NVM_DATA_WORD_3, 1, (uint8_t *)(&bLDOTrimValue));
-		if (bLDOTrimValue>>3 == 1)				
-			bLDOTrimValue &= 0xF7;
-		else {
-			
-			bLDOTrimValue = 0;
-			SPI_Read(YUSHAN_IOR_NVM_DATA_WORD_2 + 3, 1, (uint8_t *)(&bLDOTrimValue));
-			if (bLDOTrimValue>>3 == 1)			
-				bLDOTrimValue &= 0xF7;
-			else							
-				bLDOTrimValue = 0 ;			
-		}
-
-		
-		SPI_Write(YUSHAN_PRIVATE_TEST_LDO_NVM_CTRL, 1, (uint8_t *)(&bLDOTrimValue));
-
-		
-		bSpiReadData = 0;
-		SPI_Read(YUSHAN_PRIVATE_TEST_LDO_CTRL,  1, (uint8_t *)(&bSpiReadData));
-		bSpiData = bSpiReadData;
-
-		DEBUGLOG("[CAM] %s: Yushan bUseExternalLDO = %d\n", __func__, bUseExternalLDO);
-		if(!bUseExternalLDO) {
-			
-			bSpiData = (bSpiData&0xF7);			
-			SPI_Write(YUSHAN_PRIVATE_TEST_LDO_CTRL,  1, (uint8_t *)(&bSpiData));
-			bSpiData = (bSpiData&0xFE);			
-			SPI_Write(YUSHAN_PRIVATE_TEST_LDO_CTRL,  1, (uint8_t *)(&bSpiData));
-			bSpiData = (bSpiData&0xFD);			
-			SPI_Write(YUSHAN_PRIVATE_TEST_LDO_CTRL,  1, (uint8_t *)(&bSpiData));
-		} else {
-			
-			bSpiData |= 0x04;
-			SPI_Write(YUSHAN_PRIVATE_TEST_LDO_CTRL,  1, (uint8_t *)(&bSpiData));
-		}
-
-		
-		DEBUGLOG("[CAM] %s: Waiting for EVENT_LDO_STABLE Interrupt\n", __func__);
-		fStatus &= Yushan_WaitForInterruptEvent(EVENT_LDO_STABLE, TIME_100MS);
-
-		if (!fStatus) {
-			ERRORLOG("[CAM] %s:LDO Interrupt Failed\n", __func__);
-			VERBOSELOG("[CAM] %s: End with Failure\n", __func__);
-			return FAILURE;
-		} else {
-			DEBUGLOG("[CAM] %s:LDO Interrupt received\n", __func__);
-		}
-
-	} else {
-		ERRORLOG("[CAM] %s:NVM is not Ready for Read operation\n", __func__);
-		VERBOSELOG("[CAM] %s: End\n", __func__);
-		return FAILURE;
-	}
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-
-}
-
-
-
-bool_t Yushan_Init_Clocks(Yushan_Init_Struct_t *sInitStruct, Yushan_SystemStatus_t *sSystemStatus, uint32_t	*udwIntrMask)
-{
-
-	uint32_t		fpTargetPll_Clk, fpSys_Clk, fpPixel_Clk, fpDxo_Clk, fpIdp_Clk, fpDxoClockLow;		
-	uint32_t		fpSysClk_Div, fpIdpClk_div, fpDxoClk_Div, fpTempVar;				
-
-	uint32_t		udwSpiData = 0;
-	uint8_t			bRx_PixelWidth, bTx_PixelWidth;
-	int8_t			bCount;
-	uint8_t			fStatus = SUCCESS, fDXOStatus = DXO_NO_ERR;
-	uint8_t			bSpiData;
-	uint32_t 		udwFullLine, udwFullFrame, udwFrameBlank;
-
-	
-	
-
-	
-	
-	uint32_t		fpDividers[] = {0x10000, 0x18000, 0x20000, 0x28000, 0x30000, 0x38000, 0x40000, 0x48000, 0x50000, 0x58000, 0x60000,	\
-										0x68000, 0x70000, 0x78000, 0x80000, 0xA0000};
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-	DEBUGLOG("[CAM] %s:Switching to Host clock while evaluating different clock dividers\n", __func__);
-	bSpiData = 0x00;
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+1, 1, (uint8_t *)(&bSpiData)); 
-	bSpiData = 0x02;
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+1, 1, (uint8_t *)(&bSpiData)); 
-	bSpiData = 0x19;
-	fStatus &= SPI_Write(YUSHAN_PLL_CTRL_MAIN, 1, (uint8_t *)(&bSpiData));	
-	
-	bRx_PixelWidth = bTx_PixelWidth = (sInitStruct->uwPixelFormat) & (0x000F);
-
-	
-	fpTargetPll_Clk = Yushan_ConvertTo16p16FP((uint16_t)sInitStruct->uwBitRate);
-	
-	fpTargetPll_Clk = Yushan_Compute_Pll_Divs(sInitStruct->fpExternalClock, fpTargetPll_Clk);
-	if (!fpTargetPll_Clk) {
-		ERRORLOG("[CAM] %s:Wrong PLL Clk calculated. Returning", __func__);
-		VERBOSELOG("[CAM] %s: End\n", __func__);
-		return FAILURE;
-	}
-
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	fpIdpClk_div = (Yushan_ConvertTo16p16FP(bTx_PixelWidth)/sInitStruct->bNumberOfLanes);
-
-	
-
-	
-	
-	
-	fpPixel_Clk = ( (Yushan_ConvertTo16p16FP(sInitStruct->uwBitRate)*sInitStruct->bNumberOfLanes)/bRx_PixelWidth);
-	fpIdp_Clk = Yushan_ConvertTo16p16FP((uint16_t)(fpTargetPll_Clk/fpIdpClk_div));
-
-	
-	udwFullLine  = sInitStruct->uwActivePixels + sInitStruct->uwLineBlankStill;
-	udwFullFrame = sInitStruct->uwLines + sInitStruct->uwFrameBlank;
-
-	fpTempVar = Yushan_ConvertTo16p16FP((uint16_t)((sInitStruct->fpSpiClock*30)/0x80000));
-	fpDxoClockLow = (fpTempVar >= fpIdp_Clk)?fpTempVar:fpIdp_Clk;
-
-	if (fpDxoClockLow > DXO_CLK_LIMIT) {
-		ERRORLOG("[CAM] %s:Lower limit of DxO clock is greater than higher limit, so EXITING the test\n", __func__);
-		sSystemStatus->bDxoConstraints = DXO_LOLIMIT_EXCEED_HILIMIT;
-		VERBOSELOG("[CAM] %s: End\n", __func__);
-		return FAILURE;
-	}
-
-	
-	bCount = ((bTx_PixelWidth == 8) ? 14 : 15);
-
-	sSystemStatus->udwDxoConstraintsMinValue = 0;
-	
-	while (bCount >= 0) {
-		fpDxoClk_Div = fpDividers[bCount];
-		fpDxo_Clk = Yushan_ConvertTo16p16FP((uint16_t)(fpTargetPll_Clk / fpDxoClk_Div));
-
-		if ((fpDxo_Clk >= fpDxoClockLow) && (fpDxo_Clk <= DXO_CLK_LIMIT)) {
-			
-			fDXOStatus = ((fStatus = Yushan_CheckDxoConstraints(sInitStruct->uwLineBlankStill, DXO_MIN_LINEBLANKING, fpDxo_Clk, fpPixel_Clk, 1, &sSystemStatus->udwDxoConstraintsMinValue))==0)? DXO_LINEBLANK_ERR : DXO_NO_ERR;
-			if(fDXOStatus!=DXO_NO_ERR) { bCount--; continue;}
-			fDXOStatus = ((fStatus = Yushan_CheckDxoConstraints(udwFullLine, DXO_MIN_LINELENGTH, fpDxo_Clk, fpPixel_Clk, 1, &sSystemStatus->udwDxoConstraintsMinValue))==0)? DXO_FULLLINE_ERR: DXO_NO_ERR ;
-			if(fDXOStatus!=DXO_NO_ERR) { bCount--; continue;}
-			
-			
-			fDXOStatus = ((fStatus = Yushan_CheckDxoConstraints(sInitStruct->uwLines, ((DXO_ACTIVE_FRAMELENGTH/udwFullLine)+1), fpDxo_Clk, fpPixel_Clk, 1, &sSystemStatus->udwDxoConstraintsMinValue))==0)? DXO_ACTIVE_FRAMELENGTH_ERR: DXO_NO_ERR;
-			if(fDXOStatus!=DXO_NO_ERR) { bCount--; continue;}
-			fDXOStatus = ((fStatus = Yushan_CheckDxoConstraints(udwFullFrame, ((DXO_FULL_FRAMELENGTH/udwFullLine)+1), fpDxo_Clk, fpPixel_Clk, 1, &sSystemStatus->udwDxoConstraintsMinValue))==0)? DXO_FULLFRAMELENGTH_ERR: DXO_NO_ERR;
-			if(fDXOStatus!=DXO_NO_ERR) { bCount--; continue;}
-
-			udwFrameBlank = ((8*fpDxo_Clk)/fpPixel_Clk);						
-			if (sInitStruct->bDxoSettingCmdPerFrame == 1)
-				udwFrameBlank += (135000/udwFullLine)+1;   
-			if (sInitStruct->bDxoSettingCmdPerFrame > 1)
-				udwFrameBlank += (220000/udwFullLine)+1;   
-
-			fDXOStatus = ((fStatus = Yushan_CheckDxoConstraints(sInitStruct->uwFrameBlank, udwFrameBlank, fpDxo_Clk, fpPixel_Clk, 1, &sSystemStatus->udwDxoConstraintsMinValue))==0)? DXO_FRAMEBLANKING_ERR: DXO_NO_ERR;
-			if(fDXOStatus!=DXO_NO_ERR) { bCount--; continue;}
-
-			
-			break;
-
-        	}																															
-		
-		bCount--;
-	}
-
-	
-	sSystemStatus->bDxoConstraints = fDXOStatus;
-
-	
-	if (bCount < 0) {
-		ERRORLOG("[CAM] %s:DXO Dividers exhausted and returning FAILURE\n", __func__);
-		VERBOSELOG("[CAM] %s: End\n", __func__);
-		return FAILURE;
-	}
-
-	for (bCount = 0; bCount < 10; bCount++) {
-		fpSysClk_Div = fpDividers[bCount];
-		fpSys_Clk = Yushan_ConvertTo16p16FP((uint16_t)(fpTargetPll_Clk / fpSysClk_Div));
-		if (fpSys_Clk <= SYS_CLK_LIMIT)
-			break; 
-	}
-
-
-	fStatus = SUCCESS;
-
-	
-	bSpiData = 0x7F;
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL, 1, (uint8_t *)(&bSpiData)); 
-
-	
-	
-	bSpiData = 0x00;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL, 1, (uint8_t *)(&bSpiData));
-	bSpiData = 0x04;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL + 1, 1, (uint8_t *)(&bSpiData));
-	bSpiData = 0x00;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL + 2, 1, (uint8_t *)(&bSpiData));
-	bSpiData = 0x37;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL, 1, (uint8_t *)(&bSpiData));
-	bSpiData = 0x0f;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL + 1, 1, (uint8_t *)(&bSpiData));
-	bSpiData = 0x07;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL + 2, 1, (uint8_t *)(&bSpiData));
-	bSpiData = 1;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL + 3, 1, (uint8_t *)(&bSpiData));
-	bSpiData = 0;
-	fStatus &= SPI_Write(YUSHAN_RESET_CTRL + 3, 1, (uint8_t *)(&bSpiData));
-
-	
-	Yushan_Intr_Enable((uint8_t *)udwIntrMask);
-
-	
-	fStatus &= Yushan_Init_LDO(sInitStruct->bUseExternalLDO);
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s:LDO setup FAILED\n", __func__);
-		VERBOSELOG("[CAM] %s: End\n", __func__);
-		return FAILURE;
-	} else {
-		DEBUGLOG("[CAM] %s:LDO setup done.\n", __func__);
-	}
-
-	
-	
-	bSpiData = (uint8_t)(fpDxoClk_Div>>16);
-	bSpiData = bSpiData << 1;
-	if ((fpDxoClk_Div&0x8000)==0x8000)				
-		bSpiData |= 0x01;
-	fStatus &= SPI_Write(YUSHAN_CLK_DIV_FACTOR,   1, (uint8_t *)(&bSpiData));
-	bSpiData = (uint8_t)(fpIdpClk_div>>16);
-	bSpiData = bSpiData << 1;
-	if ((fpIdpClk_div&0x8000)==0x8000)				
-		bSpiData |= 0x01;
-	fStatus &= SPI_Write(YUSHAN_CLK_DIV_FACTOR+1, 1, (uint8_t *) (&bSpiData));
-	bSpiData = (uint8_t)(fpSysClk_Div>>16);
-	bSpiData = bSpiData << 1;
-	if ((fpSysClk_Div&0x8000)==0x8000)				
-		bSpiData |= 0x01;
-	fStatus &= SPI_Write(YUSHAN_CLK_DIV_FACTOR + 2, 1, (uint8_t *) (&bSpiData));
-
-	
-	bSpiData = 0x18;
-	fStatus &= SPI_Write(YUSHAN_PLL_CTRL_MAIN, 1, (uint8_t *)(&bSpiData));	
-
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s: End with Failure at enabling PLLs\n", __func__);
-		return FAILURE;
-	}
-
-	DEBUGLOG("[CAM] %s:Waiting for YUSHAN_PLL_CTRL_MAIN interrupt Starts here\n", __func__);
-	fStatus &= Yushan_WaitForInterruptEvent(EVENT_PLL_STABLE, TIME_100MS);
-
-	DEBUGLOG("[CAM] %s:YUSHAN_PLL_CTRL_MAIN interrupt received\n", __func__);
-
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s: Failure at YUSHAN_PLL_CTRL_MAIN interrupt non-received Exiting...\n", __func__);
-		return FAILURE;
-	}
-
-	
-	
-	udwSpiData = 0;
-	SPI_Read(YUSHAN_CLK_CTRL,   4, (uint8_t*)(&udwSpiData));
-
-	
-	bSpiData = 0x00;
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL, 1, (uint8_t*)(&bSpiData));
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+2, 1, (uint8_t*)(&bSpiData));		
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+3, 1, (uint8_t*)(&bSpiData));		
-
-
-	
-	bSpiData = 0x01; 
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL + 1, 1, (uint8_t *)(&bSpiData));
-
-	
-	udwSpiData &= 0xFDFF; 
-	udwSpiData |= 0x0100; 
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL, 4, (uint8_t *)(&udwSpiData));
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-
-}
-
-
-
-uint32_t Yushan_ConvertTo16p16FP(uint16_t uwNonFPValue)
-{
-
-	return (((uint32_t)(uwNonFPValue)) << 16);
-
-}
-
-
-
-
-bool_t	Yushan_Init_Dxo(Yushan_Init_Dxo_Struct_t *sDxoStruct, bool_t fBypassDxoUpload)
-{
-
-	uint8_t bSpiData;
-	uint32_t	udwHWnMicroCodeID = 0; 
-	uint32_t udwDxoBaseAddress = 0, udwSpiBaseIndex = 0;
-	bool_t	fStatus = 1;
-	
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-
-	udwSpiBaseIndex = 0x08000;
-	fStatus=SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	udwDxoBaseAddress=DXO_DOP_BASE_ADDR;
-
-	if (!fBypassDxoUpload) {
-		DEBUGLOG("[CAM] load DxO DOP firmware\n");
-		fStatus &= SPI_Write_4thByte((uint16_t)(sDxoStruct->uwBaseAddrDopMicroCode[0]+udwDxoBaseAddress), sDxoStruct->uwDxoDopRamImageSize[0], sDxoStruct->pDxoDopRamImage[0]);
-		fStatus &= SPI_Write_4thByte((uint16_t)(sDxoStruct->uwBaseAddrDopMicroCode[1]+udwDxoBaseAddress), sDxoStruct->uwDxoDopRamImageSize[1], sDxoStruct->pDxoDopRamImage[1]);
-	}
-	
-	
-	fStatus &= SPI_Write((uint16_t)(sDxoStruct->uwDxoDopBootAddr + udwDxoBaseAddress), 2,  (uint8_t*)(&sDxoStruct->uwDxoDopStartAddr));
-	
-	bSpiData = DXO_BOOT_CMD;
-	fStatus &= SPI_Write((uint16_t)(DxODOP_boot + udwDxoBaseAddress), 1,  (uint8_t*)(&bSpiData));
-
-	
-	udwSpiBaseIndex = 0x10000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	udwDxoBaseAddress=(0x8000 + DXO_DPP_BASE_ADDR) - udwSpiBaseIndex; 
-	
-	if (!fBypassDxoUpload) {
-		DEBUGLOG("[CAM] load DxO DPP firmware\n");
-		fStatus &= SPI_Write_4thByte((uint16_t)(sDxoStruct->uwBaseAddrDppMicroCode[0]+ udwDxoBaseAddress), sDxoStruct->uwDxoDppRamImageSize[0], sDxoStruct->pDxoDppRamImage[0]);
-		
-		udwSpiBaseIndex = DXO_DPP_BASE_ADDR + sDxoStruct->uwBaseAddrDppMicroCode[1]; 
-		SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-		udwDxoBaseAddress = ((DXO_DPP_BASE_ADDR + sDxoStruct->uwBaseAddrDppMicroCode[1]) - udwSpiBaseIndex) + 0x8000; 
-
-		fStatus &= SPI_Write_4thByte((uint16_t)(udwDxoBaseAddress), sDxoStruct->uwDxoDppRamImageSize[1], sDxoStruct->pDxoDppRamImage[1]);
-	}
-	
-	udwSpiBaseIndex = 0x18000;
-	udwDxoBaseAddress = 0x8000;  
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	
-	
-	fStatus &= SPI_Write((uint16_t)((DXO_DPP_BASE_ADDR + sDxoStruct->uwDxoDppBootAddr) - udwSpiBaseIndex + udwDxoBaseAddress), 2,  (uint8_t*)(&sDxoStruct->uwDxoDppStartAddr));
-	
-	bSpiData = DXO_BOOT_CMD;
-	fStatus &= SPI_Write(((uint16_t)(DXO_DPP_BASE_ADDR + DxODPP_boot) - udwSpiBaseIndex + udwDxoBaseAddress), 1,  (uint8_t*)(&bSpiData));
-
-	
-	udwSpiBaseIndex = 0x8000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	
-	
-	if (!fBypassDxoUpload) {
-		DEBUGLOG("[CAM] load DxO PDP firmware\n");
-		fStatus &= SPI_Write_4thByte((uint16_t)(sDxoStruct->uwBaseAddrPdpMicroCode[0]+ DXO_PDP_BASE_ADDR), sDxoStruct->uwDxoPdpRamImageSize[0], sDxoStruct->pDxoPdpRamImage[0]);
-		fStatus &= SPI_Write_4thByte((uint16_t)(sDxoStruct->uwBaseAddrPdpMicroCode[1]+ DXO_PDP_BASE_ADDR), sDxoStruct->uwDxoPdpRamImageSize[1], sDxoStruct->pDxoPdpRamImage[1]);
-  	}
-	
-	
-	fStatus &= SPI_Write((uint16_t)(sDxoStruct->uwDxoPdpBootAddr + DXO_PDP_BASE_ADDR), 2,  (uint8_t*)(&sDxoStruct->uwDxoPdpStartAddr));
-
-	
-	bSpiData = DXO_BOOT_CMD;
-	fStatus &= SPI_Write((uint16_t)(DxOPDP_boot + DXO_PDP_BASE_ADDR), 1,  (uint8_t*)(&bSpiData));
-
-	DEBUGLOG("[CAM] %s:Waiting for EVENT_DOP7_BOOT interrupt Starts here\n", __func__);
-	
-	fStatus &= Yushan_WaitForInterruptEvent2 (EVENT_DOP7_BOOT, TIME_100MS);
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s: EVENT_DOP7_BOOT not received. Exiting ...\n", __func__);
-		return fStatus;
-	}
-	DEBUGLOG("[CAM] %s:DOP7 IP Booted\n", __func__);
-
-	
-
-		
-	SPI_Read((DxODOP_ucode_id_7_0 + DXO_DOP_BASE_ADDR) , 4, (uint8_t *)(&udwHWnMicroCodeID));
-#if 0
-	SPI_Read((DxODOP_calib_id_0_7_0 + DXO_DOP_BASE_ADDR), 4, (uint8_t *)(&udwCalibrationDataID));
-	SPI_Read((DxODOP_error_code_7_0 + DXO_DOP_BASE_ADDR), 1, (uint8_t *)(&udwErrorCode));
-	DEBUGLOG("DXO DOP udwHWnMicroCodeID:%x;udwCalibrationDataID:%x;udwErrorCode:%x\n",
-		udwHWnMicroCodeID, udwCalibrationDataID, udwErrorCode);
-#endif
-
-	udwHWnMicroCodeID &= 0xFFFFFF00;	
-	if ((udwHWnMicroCodeID != DXO_DOP_HW_MICROCODE_ID)) {
-		ERRORLOG("[CAM] %s: Error with DOP microcode check. Exiting ...\n", __func__);
-		return FAILURE;
-	}
-
-	DEBUGLOG("[CAM] %s:Waiting for EVENT_DPP_BOOT interrupt Starts here\n", __func__);
-	
-	fStatus &= Yushan_WaitForInterruptEvent (EVENT_DPP_BOOT, TIME_100MS);
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s: EVENT_DPP_BOOT not received. Exiting ...\n", __func__);
-		return fStatus;
-	}
-	DEBUGLOG("[CAM] %s:DPP IP Booted\n", __func__);
-
-	
-	udwSpiBaseIndex = 0x010000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	SPI_Read(DxODPP_ucode_id_7_0+ DXO_DPP_BASE_ADDR-0x8000, 4, (uint8_t *)(&udwHWnMicroCodeID));
-#if 0
-	SPI_Read(DxODPP_calib_id_0_7_0+DXO_DPP_BASE_ADDR-0x8000, 4, (uint8_t *)(&udwCalibrationDataID));
-	SPI_Read(DxOPDP_error_code_7_0+DXO_DPP_BASE_ADDR-0x8000, 1, (uint8_t *)(&udwErrorCode));
-	DEBUGLOG("DXO DPP udwHWnMicroCodeID:%x;udwCalibrationDataID:%x;udwErrorCode:%x\n",
-		udwHWnMicroCodeID, udwCalibrationDataID, udwErrorCode);
-#endif
-
-	udwHWnMicroCodeID &= 0xFFFFFF00;	
-	if (udwHWnMicroCodeID != DXO_DPP_HW_MICROCODE_ID) {
-		ERRORLOG("[CAM] %s: Error with DPP microcode check. Exiting ...\n", __func__);
-		return FAILURE;
-	}
-	
-	udwSpiBaseIndex = 0x08000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	DEBUGLOG("[CAM] %s:Waiting for EVENT_PDP_BOOT interrupt Starts here\n", __func__);
-	
-	fStatus &= Yushan_WaitForInterruptEvent (EVENT_PDP_BOOT, TIME_100MS);
-
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s: EVENT_PDP_BOOT not received. Exiting ...\n", __func__);
-		return fStatus;
-	}
-	DEBUGLOG("[CAM] %s:PDP IP Booted\n", __func__);
-
-	
-	SPI_Read((DxOPDP_ucode_id_7_0 + DXO_PDP_BASE_ADDR) , 4, (uint8_t *)(&udwHWnMicroCodeID));
-#if 0
-	SPI_Read((DxOPDP_calib_id_0_7_0 + DXO_PDP_BASE_ADDR), 4, (uint8_t *)(&udwCalibrationDataID));
-	SPI_Read((DxOPDP_error_code_7_0 + DXO_PDP_BASE_ADDR), 1, (uint8_t *)(&udwErrorCode));
-	DEBUGLOG("DXO PDP udwHWnMicroCodeID:%x;udwCalibrationDataID:%x;udwErrorCode:%x\n",
-		udwHWnMicroCodeID, udwCalibrationDataID, udwErrorCode);
-#endif
-
-	udwHWnMicroCodeID &= 0xFFFFFF00; 
-	if (udwHWnMicroCodeID != DXO_PDP_HW_MICROCODE_ID) {
-		ERRORLOG("[CAM] %s: Error with PDP microcode check. Exiting ...\n", __func__);
-		return FAILURE;
-	}
-
-	VERBOSELOG("[CAM] %s: End with Success\n", __func__);
-	return SUCCESS;
-}
-
-
-bool_t Yushan_Init(Yushan_Init_Struct_t *sInitStruct)
-{
-
-	uint32_t spi_base_address, udwSpiData;
-	uint16_t uwHsizeStill = 0;
-	uint16_t uwHsizeVf = 0;
-	uint16_t uwLecciStill;
-	uint16_t uwLecciVf;
-	uint8_t bCount, bStillIndex = 0xf, bVfIndex = 0xf;
-	uint8_t bSofEofLength = 32;
-	uint8_t bDxoClkDiv , bPixClkDiv;
-	uint8_t		bDXODecimalFactor = 0, bIdpDecimalFactor = 0; 
-	uint8_t		bUsedDataType = 0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-	spi_base_address = 0x8000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (unsigned char *)&spi_base_address);
-
-	udwSpiData = 0x1;
-	SPI_Write(YUSHAN_IOR_NVM_CTRL, 1, (unsigned char *)&udwSpiData); 
-
-	
-	udwSpiData = 4000/sInitStruct->uwBitRate;
-	SPI_Write(YUSHAN_MIPI_TX_UIX4, 1, (unsigned char *)&udwSpiData);
-	SPI_Write(YUSHAN_MIPI_RX_UIX4, 1, (unsigned char *)&udwSpiData);
-	udwSpiData = 1;
-	SPI_Write(YUSHAN_MIPI_RX_COMP, 1, (unsigned char*)&udwSpiData);
-
-	if (sInitStruct->bNumberOfLanes == 1)
-		udwSpiData = 0x11; 
-	else if (sInitStruct->bNumberOfLanes == 2)
-		udwSpiData = 0x31; 
-	else if (sInitStruct->bNumberOfLanes == 4)
-		udwSpiData = 0xf1; 
-
-	
-	SPI_Write(YUSHAN_MIPI_TX_ENABLE,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_MIPI_RX_ENABLE,1,(unsigned char*)&udwSpiData); 
-	
-	
-	udwSpiData=4000/sInitStruct->uwBitRate;
-	SPI_Write(YUSHAN_MIPI_TX_UIX4,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_MIPI_RX_UIX4,1,(unsigned char*)&udwSpiData); 
-
-	
-	SPI_Read(YUSHAN_MIPI_RX_ENABLE,1,(unsigned char*)&udwSpiData); 
-	udwSpiData |= 0x02; 
-	SPI_Write(YUSHAN_MIPI_TX_ENABLE,1,(unsigned char*)&udwSpiData);
-
-	
-
-	udwSpiData=sInitStruct->bNumberOfLanes;
-	SPI_Write(YUSHAN_CSI2_RX_NB_DATA_LANES,1,(unsigned char*)&udwSpiData); 
-
-	udwSpiData=sInitStruct->uwPixelFormat & 0x0f;
-	SPI_Write(YUSHAN_CSI2_RX_IMG_UNPACKING_FORMAT,1,(unsigned char*)&udwSpiData); 
-
-	udwSpiData = 4; 
-	SPI_Write(YUSHAN_CSI2_RX_BYTE2PIXEL_READ_TH,1,(unsigned char*)&udwSpiData); 
-
-	
-
-	udwSpiData=sInitStruct->uwPixelFormat & 0x0f;
-	SPI_Write(YUSHAN_SMIA_FM_PIX_WIDTH,1,(unsigned char*)&udwSpiData); 
-
-	udwSpiData=0;
-	SPI_Write(YUSHAN_SMIA_FM_GROUPED_PARAMETER_HOLD,1,(unsigned char*)&udwSpiData); 
-	udwSpiData=0x19;
-	SPI_Write(YUSHAN_SMIA_FM_CTRL,1,(unsigned char*)&udwSpiData); 
-	
-	udwSpiData = 0;
-	SPI_Write(YUSHAN_SMIA_FM_EOF_INT_EN, 1, (unsigned char*)&udwSpiData);	
-	
-	
-
-	
-	udwSpiData=((((sInitStruct->uwPixelFormat & 0x0f) * bSofEofLength )/32 )<<8)|0x01;
-	SPI_Write(YUSHAN_CSI2_TX_WRAPPER_THRESH,2,(unsigned char*)&udwSpiData); 
-
-	
-
-	udwSpiData=1;
-	SPI_Write(YUSHAN_EOF_RESIZE_PRE_DXO_AUTOMATIC_CONTROL,1,(unsigned char*)&udwSpiData); 
-	SPI_Write(YUSHAN_EOF_RESIZE_PRE_DXO_ENABLE,1,(unsigned char*)&udwSpiData); 
-
-	
-	udwSpiData=0; 
-	SPI_Write(YUSHAN_EOF_RESIZE_POST_DXO_AUTOMATIC_CONTROL,1,(unsigned char*)&udwSpiData); 
-	udwSpiData= bSofEofLength;
-	SPI_Write(YUSHAN_EOF_RESIZE_POST_DXO_H_SIZE,1,(unsigned char*)&udwSpiData); 
-	udwSpiData=1;
-	SPI_Write(YUSHAN_EOF_RESIZE_POST_DXO_ENABLE,1,(unsigned char*)&udwSpiData); 
-
-	SPI_Read(YUSHAN_CLK_DIV_FACTOR,1,(unsigned char*)&bDxoClkDiv); 
-	SPI_Read(YUSHAN_CLK_DIV_FACTOR+1,1,(unsigned char*)&bPixClkDiv); 
-	
-	
-
-	
-
-	for (bCount = 0 ; bCount < 14 ; bCount++) {
-
-		if (bCount < sInitStruct->bValidWCEntries) {
-		udwSpiData=sInitStruct->sFrameFormat[bCount].uwWordcount | 
-			( sInitStruct->sFrameFormat[bCount].bDatatype << 16 )|
-			( sInitStruct->sFrameFormat[bCount].bActiveDatatype << 24 );
-
-		SPI_Write((uint16_t)(YUSHAN_IDP_GEN_WC_DI_0+4*bCount),4,(unsigned char*)&udwSpiData);
-
-		udwSpiData=sInitStruct->sFrameFormat[bCount].uwWordcount ;
-		SPI_Write((uint16_t)(YUSHAN_CSI2_TX_PACKET_SIZE_0+0xc*bCount),4,(unsigned char*)&udwSpiData);
-
-		udwSpiData=sInitStruct->sFrameFormat[bCount].bDatatype ;
-		SPI_Write((uint16_t)(YUSHAN_CSI2_TX_DI_INDEX_CTRL_0+0xc*bCount),1,(unsigned char*)&udwSpiData);
-
-		if (sInitStruct->sFrameFormat[bCount].bSelectStillVfMode == YUSHAN_FRAME_FORMAT_VF_MODE) {
-			bUsedDataType = sInitStruct->sFrameFormat[bCount].bDatatype;
-			uwHsizeVf=(sInitStruct->sFrameFormat[bCount].uwWordcount * 8 )/ (sInitStruct->uwPixelFormat & 0x0f);
-			bVfIndex=bCount;
-		}
-
-		if (sInitStruct->sFrameFormat[bCount].bSelectStillVfMode == YUSHAN_FRAME_FORMAT_STILL_MODE) {
-			bUsedDataType = sInitStruct->sFrameFormat[bCount].bDatatype;
-			uwHsizeStill=(sInitStruct->sFrameFormat[bCount].uwWordcount * 8 )/ (sInitStruct->uwPixelFormat & 0x0f);
-			bStillIndex=bCount;
-		}
-		} else {
-			udwSpiData = (0)|(bUsedDataType << 16)|(1<<24);
-			SPI_Write((uint16_t)(YUSHAN_IDP_GEN_WC_DI_0+4*bCount),4,(unsigned char*)&udwSpiData);
-		}
-	}
-
-	udwSpiData=bVfIndex | ( bStillIndex << 4 ) | (bSofEofLength << 8)|0x3ff0000; 
-	SPI_Write(YUSHAN_IDP_GEN_CONTROL,4,(unsigned char*)&udwSpiData);
-	udwSpiData=0xc810;
-	SPI_Write(YUSHAN_IDP_GEN_ERROR_LINES_EOF_GAP,2,(unsigned char*)&udwSpiData);
-
-	  
-
-
-	udwSpiData=sInitStruct->bNumberOfLanes-1;
-	SPI_Write(YUSHAN_CSI2_TX_NUMBER_OF_LANES,1,(unsigned char*)&udwSpiData); 
-
-	udwSpiData=1;
-	SPI_Write(YUSHAN_CSI2_TX_PACKET_CONTROL,1,(unsigned char*)&udwSpiData); 
-	udwSpiData=1;
-	SPI_Write(YUSHAN_CSI2_TX_ENABLE,1,(unsigned char*)&udwSpiData); 
-
-	
-	
-	udwSpiData=0x1;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH0,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH1,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH2,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x3;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH3,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x01;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_ENABLE,1,(unsigned char*)&udwSpiData);
-
-	
-
-	udwSpiData=0xd;
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH0,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH2,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH3,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x02;
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH1,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x01;
-	SPI_Write(YUSHAN_DTFILTER_DXO_ENABLE,1,(unsigned char*)&udwSpiData);
-
-
-	
-
-	
-	udwSpiData=(uwHsizeStill&0xff) | ((uwHsizeVf&0xff) << 8 );
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_PDP_BASE_ADDR+DxOPDP_visible_line_size_7_0;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwHsizeStill>>8)&0xff) | (((uwHsizeVf>>8)&0xff) << 8 );
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+8,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_PDP_BASE_ADDR + DxOPDP_visible_line_size_15_8;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+8+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=0x0101;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+16,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_PDP_BASE_ADDR + DxOPDP_newFrameCmd;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+16+2,3,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwHsizeStill&0xff) | ((uwHsizeVf&0xff) << 8 );
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+24,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_DPP_BASE_ADDR + DxODPP_visible_line_size_7_0;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+24+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwHsizeStill>>8)&0xff) | (((uwHsizeVf>>8)&0xff) << 8 );
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+32,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_DPP_BASE_ADDR + DxODPP_visible_line_size_15_8;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+32+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=0x0101;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+40,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_DPP_BASE_ADDR + DxODPP_newFrameCmd;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+40+2,3,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwHsizeStill&0xff) | ((uwHsizeVf&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+48,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_DOP_BASE_ADDR + DxODOP_visible_line_size_7_0;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+48+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwHsizeStill>>8)&0xff) | (((uwHsizeVf>>8)&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+56,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_DOP_BASE_ADDR + DxODOP_visible_line_size_15_8;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+56+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=0x0101;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+64,2,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=DXO_DOP_BASE_ADDR + DxODOP_newFrameCmd;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+64+2,3,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwHsizeStill&0xff) | ((uwHsizeVf&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+72,2,(unsigned char*)&udwSpiData);
-	udwSpiData=YUSHAN_LBE_PRE_DXO_H_SIZE;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+72+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwHsizeStill>>8)&0xff) | (((uwHsizeVf>>8)&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+80,2,(unsigned char*)&udwSpiData);
-	udwSpiData=YUSHAN_LBE_PRE_DXO_H_SIZE+1;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+80+2,3,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwHsizeStill&0xff) | ((uwHsizeVf&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+88,2,(unsigned char*)&udwSpiData);
-	udwSpiData=YUSHAN_LBE_POST_DXO_H_SIZE;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+88+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwHsizeStill>>8)&0xff) | (((uwHsizeVf>>8)&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+96,2,(unsigned char*)&udwSpiData);
-	udwSpiData=YUSHAN_LBE_POST_DXO_H_SIZE+1;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+96+2,3,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwHsizeStill&0xff) | ((uwHsizeVf&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+104,2,(unsigned char*)&udwSpiData);
-	udwSpiData=YUSHAN_LECCI_LINE_SIZE;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+104+2,3,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwHsizeStill>>8)&0xff) | (((uwHsizeVf>>8)&0xff) << 8);
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+112,2,(unsigned char*)&udwSpiData);
-	udwSpiData=YUSHAN_LECCI_LINE_SIZE+1;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+112+2,3,(unsigned char*)&udwSpiData);
-
-	
-	
-	if (bDxoClkDiv != 0 && bPixClkDiv != 0) {
-		uwLecciVf    = sInitStruct->uwLineBlankVf*bPixClkDiv/ bDxoClkDiv;
-		uwLecciStill = sInitStruct->uwLineBlankStill*bPixClkDiv/ bDxoClkDiv;
-	} else {
-		uwLecciVf    = 300;
-		uwLecciStill = 300;
-	}
-
-	
-	udwSpiData=(uwLecciStill&0xff) | ((uwLecciVf&0xff) << 8 );
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+120,2,(unsigned char*)&udwSpiData); 
-	udwSpiData=YUSHAN_LECCI_MIN_INTERLINE;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+120+2,3,(unsigned char*)&udwSpiData); 
-	udwSpiData=((uwLecciStill>>8)&0xff) | (((uwLecciVf>>8)&0xff) << 8 );
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+128,2,(unsigned char*)&udwSpiData); 
-	udwSpiData=YUSHAN_LECCI_MIN_INTERLINE+1;
-	SPI_Write(YUSHAN_T1_DMA_MEM_LOWER_ELT+128+2,3,(unsigned char*)&udwSpiData);
-
- 
-	udwSpiData=17; 
-	SPI_Write(YUSHAN_T1_DMA_REG_REFILL_ELT_NB,1,(unsigned char*)&udwSpiData); 
-	udwSpiData=1;
-	SPI_Write(YUSHAN_T1_DMA_REG_ENABLE,1,(unsigned char*)&udwSpiData); 
-
-	
-	
-
-	udwSpiData=4;  
-	SPI_Write(YUSHAN_LBE_PRE_DXO_READ_START,1,(unsigned char*)&udwSpiData); 
-	udwSpiData=1;  
-	SPI_Write(YUSHAN_LBE_PRE_DXO_ENABLE,1,(unsigned char*)&udwSpiData); 
-
-	
-	
-	udwSpiData = 0x10;  
-	SPI_Write(YUSHAN_LBE_POST_DXO_READ_START,1,(unsigned char*)&udwSpiData);
-	udwSpiData=1;  
-	SPI_Write(YUSHAN_LBE_POST_DXO_ENABLE,1,(unsigned char*)&udwSpiData);
-
-	
-	
-	
-	bDXODecimalFactor = bIdpDecimalFactor = 0;
-
-	if(((bDxoClkDiv&0x01) == 1))		
-		bDXODecimalFactor = 1;		
-	if(((bPixClkDiv&0x01) == 1))		
-		bIdpDecimalFactor = 1;
-
-	bDxoClkDiv = bDxoClkDiv>>1;		
-	bPixClkDiv = bPixClkDiv>>1;		
-
-	if(bDxoClkDiv==bPixClkDiv)
-		udwSpiData = (((2*bDxoClkDiv + bDXODecimalFactor)<<8) | 0x1);
-	else
-		udwSpiData = (((2*bDxoClkDiv + bDXODecimalFactor)<<8)|((bPixClkDiv*2 + bIdpDecimalFactor)-1));
-
-
-	SPI_Write(YUSHAN_LECCI_OUT_BURST_CTRL,2,(unsigned char*)&udwSpiData);
-	udwSpiData=0x01;
-	SPI_Write(YUSHAN_LECCI_ENABLE,1,(unsigned char*)&udwSpiData);
-
-	DEBUGLOG("[CAM] Yushan_Init return success\n");
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-
-}
-
-
-bool_t Yushan_Update_ImageChar(Yushan_ImageChar_t *sImageChar)
-{
-	uint8_t  *pData;
-	bool_t fStatus;
-	uint32_t udwSpiData;
-	uint8_t  bData[20];
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-	pData = (uint8_t *)bData;
-
-	bData[0]=sImageChar->bImageOrientation;
-	bData[1]=sImageChar->uwXAddrStart & 0xff;
-	bData[2]=sImageChar->uwXAddrStart >> 8;
-	bData[3]=sImageChar->uwYAddrStart & 0xff;
-	bData[4]=sImageChar->uwYAddrStart >> 8;
-	bData[5]=sImageChar->uwXAddrEnd & 0xff;
-	bData[6]=sImageChar->uwXAddrEnd >> 8;
-	bData[7]=sImageChar->uwYAddrEnd & 0xff;
-	bData[8]=sImageChar->uwYAddrEnd >> 8;
-	bData[9]=sImageChar->uwXEvenInc & 0xff;
-	bData[10]=sImageChar->uwXEvenInc >> 8;
-	bData[11]=sImageChar->uwXOddInc & 0xff;
-	bData[12]=sImageChar->uwXOddInc >> 8;
-	bData[13]=sImageChar->uwYEvenInc & 0xff;
-	bData[14]=sImageChar->uwYEvenInc >> 8;
-	bData[15]=sImageChar->uwYOddInc & 0xff;
-	bData[16]=sImageChar->uwYOddInc >> 8;
-	bData[17]=sImageChar->bBinning ;
-
-	
-	fStatus = SPI_Write(DXO_PDP_BASE_ADDR+DxOPDP_image_orientation_7_0, 18, pData);
-	
-	fStatus = SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_image_orientation_7_0, 18, pData);
-	udwSpiData = 0x10000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-	fStatus = SPI_Write(DXO_DPP_BASE_ADDR+DxODPP_image_orientation_7_0-0x8000, 18, pData);
-	udwSpiData = 0x8000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-}
-
-
-
-bool_t Yushan_Update_SensorParameters(Yushan_GainsExpTime_t *sGainsExpInfo)
-{
-	uint8_t *pData;
-	bool_t fStatus;
-	uint32_t udwSpiData;
-	uint8_t bData[20];
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	pData = (uint8_t *)bData;
-
-	bData[0]=sGainsExpInfo->uwAnalogGainCodeGR & 0xff;
-	bData[1]=sGainsExpInfo->uwAnalogGainCodeGR >> 8;
-	bData[2]=sGainsExpInfo->uwAnalogGainCodeR & 0xff;
-	bData[3]=sGainsExpInfo->uwAnalogGainCodeR >> 8;
-	bData[4]=sGainsExpInfo->uwAnalogGainCodeB & 0xff;
-	bData[5]=sGainsExpInfo->uwAnalogGainCodeB >> 8;
-	bData[6]=sGainsExpInfo->uwPreDigGainGR & 0xff;
-	bData[7]=sGainsExpInfo->uwPreDigGainGR >> 8;
-	bData[8]=sGainsExpInfo->uwPreDigGainR & 0xff;
-	bData[9]=sGainsExpInfo->uwPreDigGainR >> 8;
-	bData[10]=sGainsExpInfo->uwPreDigGainB & 0xff;
-	bData[11]=sGainsExpInfo->uwPreDigGainB >> 8;
-	bData[12]=sGainsExpInfo->uwExposureTime & 0xff;
-	bData[13]=sGainsExpInfo->uwExposureTime >> 8;
-	
-	
-	fStatus = SPI_Write(DXO_PDP_BASE_ADDR+DxOPDP_analogue_gain_code_greenr_7_0, 14, pData);
-	fStatus = SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_analogue_gain_code_greenr_7_0, 12, pData);
-	pData = (uint8_t *)&(sGainsExpInfo->bRedGreenRatio);
-	fStatus = SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_red_green_ratio_7_0, 2, pData);
-	udwSpiData = 0x10000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-	pData = (uint8_t *)(sGainsExpInfo);
-	fStatus = SPI_Write(DXO_DPP_BASE_ADDR+DxODPP_analogue_gain_code_greenr_7_0-0x8000, 2, pData);
-	pData = (uint8_t *)&(sGainsExpInfo->uwPreDigGainGR);
-	fStatus = SPI_Write(DXO_DPP_BASE_ADDR+DxODPP_pre_digital_gain_greenr_7_0-0x8000, 2, pData);
-	pData = (uint8_t *)&(sGainsExpInfo->uwExposureTime);
-	fStatus = SPI_Write(DXO_DPP_BASE_ADDR+DxODPP_exposure_time_7_0-0x8000, 2, pData);
-	udwSpiData = 0x8000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-}
-
-
-
-bool_t Yushan_Update_DxoPdp_TuningParameters(Yushan_DXO_PDP_Tuning_t *sDxoPdpTuning)
-{
-	uint8_t  *pData,fStatus;
-	uint8_t bData[3];
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	pData = (uint8_t *)bData;
-	bData[0]=sDxoPdpTuning->bDeadPixelCorrectionLowGain;
-	bData[1]=sDxoPdpTuning->bDeadPixelCorrectionMedGain;
-	bData[2]=sDxoPdpTuning->bDeadPixelCorrectionHiGain;
-
-	/* Only three bytes need to be written. Fourth byte write will overwrite the */
-	
-	fStatus = SPI_Write(DXO_PDP_BASE_ADDR+DxOPDP_dead_pixels_correction_lowGain_7_0, 3, pData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-}
-
-
-
-
-
-bool_t Yushan_Update_DxoDpp_TuningParameters(Yushan_DXO_DPP_Tuning_t *sDxoDppTuning)
-{
-
-	uint8_t  *pData;
-	bool_t	fStatus;
-	uint32_t udwSpiData;
-	uint8_t bData[10];
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	pData = (uint8_t *)bData;
-
-	bData[0]=sDxoDppTuning->bTemporalSmoothing;
-	bData[1]=sDxoDppTuning->uwFlashPreflashRating & 0xff ;
-	bData[2]=sDxoDppTuning->uwFlashPreflashRating >> 8;
-	bData[3]=sDxoDppTuning->bFocalInfo;
-
-	udwSpiData = 0x10000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-	fStatus = SPI_Write(DXO_DPP_BASE_ADDR+DxODPP_temporal_smoothing_7_0-0x8000, 4,  pData);
-
-	
-  	udwSpiData = 0x8000 ;
-  	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-}
-
-
-bool_t Yushan_Update_DxoDop_TuningParameters(Yushan_DXO_DOP_Tuning_t *sDxoDopTuning)
-{
-	uint8_t *pData;
-	bool_t fStatus;
-	uint8_t bData[10];
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	pData = (uint8_t *) bData;
-
-	bData[0]=sDxoDopTuning->bEstimationMode ;
-	/* First five consecutive registers written. */
-	fStatus = SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_estimation_mode_7_0, 1, pData);
-
-	bData[0]=sDxoDopTuning->bSharpness;
-	bData[1]=sDxoDopTuning->bDenoisingLowGain;
-	bData[2]=sDxoDopTuning->bDenoisingMedGain;
-	bData[3]=sDxoDopTuning->bDenoisingHiGain;
-	bData[4]=sDxoDopTuning->bNoiseVsDetailsLowGain ;
-	bData[5]=sDxoDopTuning->bNoiseVsDetailsMedGain ;
-	bData[6]=sDxoDopTuning->bNoiseVsDetailsHiGain ;
-	bData[7]=sDxoDopTuning->bTemporalSmoothing ;
-
-	fStatus &= SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_sharpness_7_0, 8, pData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-}
-
-
-
-
-bool_t Yushan_Update_Commit(uint8_t  bPdpMode, uint8_t  bDppMode, uint8_t  bDopMode)
-{
-	uint8_t bData, *pData;
-	bool_t fStatus = SUCCESS;
-	uint32_t udwSpiData ;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	bData = 1;
-	pData = &bData;
-
-	
-	SPI_Write(DXO_PDP_BASE_ADDR+DxOPDP_mode_7_0, 1, &bPdpMode);
-	
-	SPI_Write(DXO_PDP_BASE_ADDR+DxOPDP_execCmd, 1, pData);
-
-	
-	SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_mode_7_0, 1, &bDopMode);
-	
-	SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_execCmd, 1, pData);
-
-	
-	udwSpiData = 0x10000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-	
-	SPI_Write(DXO_DPP_BASE_ADDR+DxODPP_mode_7_0-0x8000, 1, &bDppMode);
-	udwSpiData = 0x18000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-	
-	SPI_Write(DXO_DPP_BASE_ADDR+DxODPP_execCmd-0x10000, 1, pData);
-
-
-	
-	udwSpiData = 0x8000 ;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS,4,(uint8_t *)&udwSpiData);
-
-#if 0
-	DEBUGLOG("[CAM] %s:Waiting for EOF_EXECCMD interrupt Starts here\n", __func__);
-	
-	
-	fStatus = Yushan_WaitForInterruptEvent(EVENT_PDP_EOF_EXECCMD, TIME_100MS);
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s:Failed in EVENT_PDP_EOF_EXECCMD interrupt\n", __func__);
-		return FAILURE;
-	}
-	DEBUGLOG("[CAM] %s:DXO PDP commited now\n", __func__);
-
-	fStatus = Yushan_WaitForInterruptEvent2(EVENT_DOP7_EOF_EXECCMD, TIME_100MS);
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s:Failed in EVENT_DOP7_EOF_EXECCMD interrupt\n", __func__);
-		return FAILURE;
-	}
-	DEBUGLOG("[CAM] %s:DXO DOP7 commited now\n", __func__);
-
-	fStatus = Yushan_WaitForInterruptEvent(EVENT_DPP_EOF_EXECCMD, TIME_100MS);
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s:Failed in EVENT_DPP_EOF_EXECCMD interrupt\n", __func__);
-		return FAILURE;
-	}
-#endif
-
-	DEBUGLOG("[CAM] %s:DXO IPs commited now\n", __func__);
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	
-	return fStatus;
-
-}
-
-
-
-bool_t Yushan_CheckDxoConstraints(uint32_t udwParameters, uint32_t udwMinLimit, uint32_t fpDxo_Clk, uint32_t fpPixel_Clk, uint16_t uwFullLine, uint32_t * pMinValue)
-{
-	
-
-	
-	uint16_t	uwLocalDxoClk, uwLocalPixelClk;
-	uint32_t	udwTemp1, udwTemp2;
-
-	
-	uwLocalDxoClk = fpDxo_Clk>>16;
-	uwLocalPixelClk = fpPixel_Clk>>16;
-
-	udwTemp1 = (udwParameters*0xFFFF)/uwLocalPixelClk;
-	udwTemp2 = (udwMinLimit*0xFFFF)/uwLocalDxoClk;
-
-	
-	if (udwTemp1 < udwTemp2) {
-		
-		
-		udwTemp1 = ((udwTemp2*uwLocalPixelClk)/0xFFFF); 
-		*pMinValue = (udwTemp1+1);
-
-		return FAILURE;
-	}
-
-	
-	return SUCCESS;
-
-}
-
-
-
-uint32_t Yushan_Compute_Pll_Divs(uint32_t fpExternal_Clk, uint32_t fpTarget_PllClk)
-{
-	
-	
-	
-	uint32_t		fpIDiv, fpClkPll; 
-	uint32_t		fpBelow[4], fpAbove[4], *pDivPll;	
-	uint32_t		fpFreqVco, fpIdFreq;
-	uint8_t			bODiv, bLoop, bIDivCount = 0;
-	uint8_t			bSpiData;
-	bool_t			fStatus = SUCCESS;
-
-	
-	fpBelow[PLL_CLK_INDEX]=0;
-	fpAbove[PLL_CLK_INDEX]=0x7FFFFFFF; 
-
-	for (bIDivCount = 1; bIDivCount < 8; bIDivCount++) {
-		
-		fpIDiv = Yushan_ConvertTo16p16FP((uint16_t)bIDivCount);
-		
-		fpIdFreq = fpExternal_Clk/bIDivCount;
-		
-		if ((fpIdFreq >= 0x60000) && (fpIdFreq <= 0x320000)) {
-			for (bLoop = 10; bLoop < 168; bLoop++) {
-				
-				fpFreqVco = fpIdFreq * 2 * bLoop;
-				
-				if ((fpFreqVco >= 0x3E80000) && (fpFreqVco <= 0x7D00000)) {
-					for (bODiv = 1; bODiv < 64; bODiv++) {
-						fpClkPll = (fpFreqVco / (2 * bODiv));
-						if ((fpClkPll <= fpTarget_PllClk) && (fpClkPll >= fpBelow[PLL_CLK_INDEX]))
-							fpBelow[PLL_CLK_INDEX] = fpClkPll, fpBelow[IDIV_INDEX] = fpIDiv, fpBelow[LOOP_INDEX] = Yushan_ConvertTo16p16FP((uint16_t)bLoop), fpBelow[ODIV_INDEX] = Yushan_ConvertTo16p16FP((uint16_t)bODiv);
-						if ((fpClkPll >= fpTarget_PllClk) && (fpClkPll <= fpAbove[PLL_CLK_INDEX]))
-							fpAbove[PLL_CLK_INDEX] = fpClkPll, fpAbove[IDIV_INDEX] = fpIDiv, fpAbove[LOOP_INDEX] = Yushan_ConvertTo16p16FP((uint16_t)bLoop), fpAbove[ODIV_INDEX] = Yushan_ConvertTo16p16FP((uint16_t)bODiv);
-					}
-				}
-			}               
-		}
-	}
-
-	
-#if 0
-	if ((fpTarget_PllClk - fpBelow[PLL_CLK_INDEX]) < (fpAbove[PLL_CLK_INDEX] - fpTarget_PllClk))
-		pDivPll = &fpBelow[PLL_CLK_INDEX];
-	else
-		pDivPll = &fpAbove[PLL_CLK_INDEX];
-#else
-	
-	
-	if ((fpBelow[PLL_CLK_INDEX] <= fpTarget_PllClk)&&(fpAbove[PLL_CLK_INDEX]>fpTarget_PllClk))
-		pDivPll = &fpBelow[PLL_CLK_INDEX];
-	else if (fpAbove[PLL_CLK_INDEX] == fpTarget_PllClk)
-		pDivPll = &fpAbove[PLL_CLK_INDEX];
-	else {
-		
-		ERRORLOG("[CAM] %s: Error, Above Conditions not satisfied ...\n", __func__);
-		return FAILURE;
-	}
-#endif
-
-	
-	
-	bSpiData = (uint8_t)((*(pDivPll+1))>>16);
-	fStatus	&= SPI_Write(YUSHAN_PLL_CTRL_MAIN+1, 1, (uint8_t *)  (&bSpiData));
-	bSpiData = (uint8_t)((*(pDivPll+2))>>16);
-	fStatus	&= SPI_Write(YUSHAN_PLL_LOOP_OUT_DF, 1, (uint8_t *) (&bSpiData));
-	bSpiData = (uint8_t)((*(pDivPll+3))>>16);
-	fStatus	&= SPI_Write(YUSHAN_PLL_LOOP_OUT_DF+1, 1, (uint8_t *) (&bSpiData));
-
-	if (!fStatus) 
-		return FAILURE; 
-	else	
-		return *pDivPll;
-}
-
-
-
-
-
-
-bool_t Yushan_Get_Version_Information(Yushan_Version_Info_t * sYushanVersionInfo) 
-{
-#if 1 
-	uint32_t udwSpiBaseIndex;
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	SPI_Read((DxODOP_ucode_id_7_0 + DXO_DOP_BASE_ADDR) , 4, (uint8_t *)(&sYushanVersionInfo->udwDopVersion));
-	SPI_Read((DxODOP_calib_id_0_7_0+ DXO_DOP_BASE_ADDR), 4, (uint8_t *)(&sYushanVersionInfo->udwDopCalibrationVersion));	
-
-	udwSpiBaseIndex = 0x010000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-	
-	SPI_Read(DxODPP_ucode_id_7_0+ DXO_DPP_BASE_ADDR-0x8000, 4, (uint8_t *)(&sYushanVersionInfo->udwDppVersion));
-	SPI_Read(DxODPP_calib_id_0_7_0+ DXO_DPP_BASE_ADDR-0x8000, 4, (uint8_t *)(&sYushanVersionInfo->udwDppCalibrationVersion));
-
-	udwSpiBaseIndex = 0x08000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	SPI_Read((DxOPDP_ucode_id_7_0 + DXO_PDP_BASE_ADDR) , 4, (uint8_t *)(&sYushanVersionInfo->udwPdpVersion));
-	SPI_Read((DxOPDP_calib_id_0_7_0+ DXO_PDP_BASE_ADDR), 4, (uint8_t *)(&sYushanVersionInfo->udwPdpCalibrationVersion));
-
-#endif
-	sYushanVersionInfo->bApiMajorVersion=API_MAJOR_VERSION;
-	sYushanVersionInfo->bApiMinorVersion=API_MINOR_VERSION;
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-}
-
-
-
-
-
-void	Yushan_AssignInterruptGroupsToPad1(uint16_t	uwAssignITRGrpToPad1)
-{
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	VERBOSELOG("[CAM] %s: uwAssignITRGrpToPad1:0x%x\n", __func__, uwAssignITRGrpToPad1);
-	SPI_Write(YUSHAN_IOR_NVM_SEND_ITR_PAD1, 2, (uint8_t	*)&uwAssignITRGrpToPad1);
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-}
-
-
-
-bool_t Yushan_Intr_Enable(uint8_t *pIntrMask)
-{
-	
-	
-	uint8_t		bTotalEventInASet, *pSpiData, *pCompSpiData;
-	uint8_t		bIntrCount = 1, bIntr32Count = 1, bIntrCountInSet = 0, bIntrSetID = 0;
-	uint16_t	uwIntrSetOffset;
-	uint32_t	udwLocalIntrMask, udwInterruptSetting, *pLocalIntrMask, udwSpiData = 0, udwCompSpiData = 0;
-	uint32_t	udwLocalCompSPIMask = 0;
-	uint16_t	ByteCount = 0;
-
-	
-	uint8_t		bFirstIndexForSet[] = EVENT_FIRST_INDEXFORSET;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-	pLocalIntrMask = (uint32_t *)(pIntrMask);
-	udwLocalIntrMask	= *pLocalIntrMask;
-
-	pSpiData = (uint8_t *)(&udwSpiData);
-	pCompSpiData = (uint8_t *)(&udwCompSpiData);
-
-	
-	bTotalEventInASet = (bFirstIndexForSet[bIntrSetID+1] - bFirstIndexForSet[bIntrSetID]);
-
-	
-	while (bIntrCount <= (TOTAL_INTERRUPT_COUNT+1)) {
-		if (bIntrCountInSet == bTotalEventInASet) {
-			
-			uwIntrSetOffset = (bIntrSetID*INTERRUPT_SET_SIZE);
-
-			
-			if (bTotalEventInASet == 32)
-				udwLocalCompSPIMask = 0x00000000;
-			else
-				udwLocalCompSPIMask = (uint32_t)(0xFFFFFFFF<<bTotalEventInASet);
-			udwCompSpiData = (uint32_t)(~(udwSpiData|udwLocalCompSPIMask));
-
-			
-			
-			if (gPllLocked) {
-				
-				ByteCount = (uint16_t)((bTotalEventInASet+7)>>3);
-				
-				if (udwSpiData != 0)
-					
-					SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE), ByteCount, pSpiData);
-				
-				if (udwCompSpiData != 0)
-					
-					SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_DISABLE), ByteCount, pCompSpiData);
-			} else {
-				
-				if (udwSpiData != 0) {
-					
-					SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE), 1, pSpiData);
-				SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE+1), 1, pSpiData+1);
-				SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE+2), 1, pSpiData+2);
-				SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE+3), 1, pSpiData+3);
-			}
-			
-			
-			
-				if (udwCompSpiData != 0) {
-					
-					SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_DISABLE), 1, pCompSpiData);
-					SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_DISABLE+1), 1, pCompSpiData+1);
-					SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_DISABLE+2), 1, pCompSpiData+2);
-					SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_DISABLE+3), 1, pCompSpiData+3);
-				}
-			}
-
-			
-			bIntrCountInSet = 0;
-			udwSpiData = 0;
-
-			
-			bIntr32Count--;
-			bIntrCount--;
-			
-			bIntrSetID++;
-
-			
-				bTotalEventInASet = (bFirstIndexForSet[bIntrSetID+1] - bFirstIndexForSet[bIntrSetID]);
-		} else {
-			
-			udwInterruptSetting = ((udwLocalIntrMask>>(bIntr32Count-1))&0x01);
-			
-			udwSpiData |= (udwInterruptSetting<<(bIntrCountInSet));
-
-			
-			bIntrCountInSet++;
-		}
-
-		
-		if (!(bIntr32Count % 32)) {
-			
-			bIntr32Count = 1;
-			
-			pLocalIntrMask++;
-			udwLocalIntrMask	= *pLocalIntrMask;
-		} else
-			bIntr32Count++;
-
-		
-		bIntrCount++;
-	}
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-}
-
-
-
-
-void Yushan_Intr_Status_Read(uint8_t *bListOfInterrupts,	bool_t	fSelect_Intr_Pad)
-{
-	uint16_t	uwSpiData = 0, 	uwListOfITRGrpToPad1 = 0, RaisedGrpForPAD = 0;
-	uint8_t		bIntrSetID = 0;
-	bool_t		fStatus = SUCCESS;
-	uint8_t		bSpiData = 0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	VERBOSELOG("[CAM] %s: Check for interrupts on Pad%i\n", __func__, fSelect_Intr_Pad);
-
-	
-	memset((void *)bListOfInterrupts, 0, 96/8);
-
-	
-	if (gPllLocked) {
-		SPI_Read(YUSHAN_IOR_NVM_SEND_ITR_PAD1, 2, (uint8_t	*)&uwListOfITRGrpToPad1);
-	} else {
-		fStatus &= SPI_Read(YUSHAN_IOR_NVM_SEND_ITR_PAD1, 1, (uint8_t *)(&bSpiData));
-		uwListOfITRGrpToPad1 = (uint16_t) bSpiData;
-		fStatus &= SPI_Read(YUSHAN_IOR_NVM_SEND_ITR_PAD1+1, 1, (uint8_t *)(&bSpiData));
-		uwListOfITRGrpToPad1 |= (((uint16_t) bSpiData)<<8);
-	}
-
-
-	if(fSelect_Intr_Pad==INTERRUPT_PAD_0)
-		uwListOfITRGrpToPad1	=	~uwListOfITRGrpToPad1;
-
-	if (gPllLocked) {
-		fStatus &= SPI_Read(YUSHAN_IOR_NVM_INTR_STATUS, 2, (uint8_t *)(&uwSpiData));
-	} else {
-		fStatus &= SPI_Read(YUSHAN_IOR_NVM_INTR_STATUS, 1, (uint8_t *)(&bSpiData));
-		uwSpiData = (uint16_t) bSpiData;
-		fStatus &= SPI_Read(YUSHAN_IOR_NVM_INTR_STATUS+1, 1, (uint8_t *)(&bSpiData));
-		uwSpiData |= ( ((uint16_t) bSpiData)<<8 );
-	}
-
-	RaisedGrpForPAD = uwSpiData & uwListOfITRGrpToPad1;
-	while (bIntrSetID < TOTAL_INTERRUPT_SETS) {
-		if ((RaisedGrpForPAD>>bIntrSetID)&0x01) {
-			
-			Yushan_Read_IntrEvent(bIntrSetID, (uint32_t *)bListOfInterrupts);
-		}
-		
-		bIntrSetID++;
-	}
-
-	VERBOSELOG("[CAM] %s: Read interrupts status:0x%08x, 0x%08x, 0x%08x\n", __func__, *((uint32_t *)bListOfInterrupts), *(((uint32_t *)bListOfInterrupts)+1), *(((uint32_t *)bListOfInterrupts)+2));
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-}
-
-
-
-
-
-void Yushan_Read_IntrEvent(uint8_t bIntrSetID, uint32_t *udwListOfInterrupts)
-{
-
-	uint8_t		bInterruptID, bTotalEventInASet, bIntrCountInSet = 0, bTempIntrStatus = 0;
-	uint8_t		bFirstIndexForSet[] = EVENT_FIRST_INDEXFORSET;
-	uint16_t	uwIntrSetOffset;
-	uint32_t	udwIntrStatus = 0, udwIntrEnableStatus = 0, udwCombinedStatus = 0;
-	uint16_t	ByteCount = 0;
-
-	bTotalEventInASet = (bFirstIndexForSet[bIntrSetID + 1] - bFirstIndexForSet[bIntrSetID]);
-
-	
-	uwIntrSetOffset = (bIntrSetID * INTERRUPT_SET_SIZE);
-
-
-	if (gPllLocked) {	
-		
-		ByteCount = (uint16_t)((bTotalEventInASet+7)>>3);
-		
-		SPI_Read((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset), ByteCount, (uint8_t *)(&udwIntrStatus));
-		
-		SPI_Read((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE_STATUS), ByteCount, (uint8_t *)(&udwIntrEnableStatus));
-	} else {
-		SPI_Read((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset),   1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrStatus = (uint32_t)(bTempIntrStatus);
-		SPI_Read((uint16_t)((YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset)+1), 1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrStatus |= ((uint32_t)(bTempIntrStatus))<<8;
-		SPI_Read((uint16_t)((YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset)+2), 1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrStatus |= ((uint32_t)(bTempIntrStatus))<<16;
-		SPI_Read((uint16_t)((YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset)+3), 1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrStatus |= ((uint32_t)(bTempIntrStatus))<<24;
-
-		
-		SPI_Read((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE_STATUS),    1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrEnableStatus = (uint32_t)(bTempIntrStatus);
-		SPI_Read((uint16_t)((YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE_STATUS) +1), 1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrEnableStatus |= ((uint32_t)(bTempIntrStatus))<<8;
-		SPI_Read((uint16_t)((YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE_STATUS) +2), 1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrEnableStatus |= ((uint32_t)(bTempIntrStatus))<<16;
-		SPI_Read((uint16_t)((YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_ENABLE_STATUS) +3), 1, (uint8_t *)(&bTempIntrStatus));
-		udwIntrEnableStatus |= ((uint32_t)(bTempIntrStatus))<<24;
-	}
-
-	DEBUGLOG("[CAM] udwIntrStatus:  0x%x, udwIntrEnableStatus: 0x%x\n", udwIntrStatus, udwIntrEnableStatus);
-	udwCombinedStatus = (udwIntrStatus & udwIntrEnableStatus);
-	
-	while (bIntrCountInSet < bTotalEventInASet) {
-		if ((udwCombinedStatus>>bIntrCountInSet) & 0x01) {
-			bInterruptID = (bFirstIndexForSet[bIntrSetID] + bIntrCountInSet);
-
-			Yushan_AddnRemoveIDInList(bInterruptID, udwListOfInterrupts, ADD_INTR_TO_LIST);
-
-		}
-		bIntrCountInSet++;
-	}
-}
-
-
-
-bool_t Yushan_Intr_Status_Clear(uint8_t *bListOfInterrupts)
-{
-	uint8_t		bTotalEventInASet; 
-	uint8_t		bIntrCount = 1, bIntr32Count = 1, bIntrCountInSet = 0, bIntrSetID = 0;
-	uint16_t	uwIntrSetOffset;
-	uint32_t	udwLocalIntrMask, udwInterruptSetting, *pLocalIntrMask, udwSpiData = 0;
-	uint16_t	ByteCount = 0;
-
-	
-	uint8_t		bFirstIndexForSet[] = EVENT_FIRST_INDEXFORSET;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-
-	pLocalIntrMask = (uint32_t *) bListOfInterrupts; 
-	udwLocalIntrMask	= *pLocalIntrMask;
-
-	
-	bTotalEventInASet = (bFirstIndexForSet[bIntrSetID+1] - bFirstIndexForSet[bIntrSetID]);
-
-	
-	while (bIntrCount <= (TOTAL_INTERRUPT_COUNT + 1)) {
-		if (bIntrCountInSet == bTotalEventInASet) {
-			
-			if (udwSpiData != 0) {
-				
-				ByteCount = (uint16_t)((bTotalEventInASet+7)>>3);
-				
-				uwIntrSetOffset = (bIntrSetID * INTERRUPT_SET_SIZE);
-				
-				
-				
-				
-				
-				SPI_Write((uint16_t)(YUSHAN_INTR_BASE_ADDR + uwIntrSetOffset + YUSHAN_OFFSET_INTR_STATUS_CLEAR), ByteCount, (uint8_t *)(&udwSpiData));
-			}
-
-			
-			bIntrCountInSet = 0;
-			udwSpiData = 0;
-
-			
-			bIntr32Count--;
-			bIntrCount--;
-			
-			bIntrSetID++;
-
-			
-			bTotalEventInASet = (bFirstIndexForSet[bIntrSetID + 1] - bFirstIndexForSet[bIntrSetID]);
-		} else {
-			
-			udwInterruptSetting = ((udwLocalIntrMask>>(bIntr32Count-1))&0x01);
-			
-			udwSpiData |= (udwInterruptSetting<<(bIntrCountInSet));
-			
-			bIntrCountInSet++;
-		}
-
-		
-		if (!(bIntr32Count % 32)) {
-			
-			bIntr32Count = 1;
-
-			
-			pLocalIntrMask++;
-			udwLocalIntrMask	= *pLocalIntrMask;
-		} else
-			bIntr32Count++;
-
-
-		
-		bIntrCount++;
-
-	}
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-}
-
-
-
-bool_t	Yushan_Check_Pad_For_IntrID(uint8_t	bInterruptId)
-{
-
-	uint8_t		bFirstIndexForSet[] = EVENT_FIRST_INDEXFORSET;
-	uint8_t		bIntrSetID = 0;
-	uint16_t	uwIntrSetsDivertedToPad1 = 0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-	SPI_Read(YUSHAN_IOR_NVM_SEND_ITR_PAD1 , 2, (uint8_t	*)&uwIntrSetsDivertedToPad1);
-
-	
-	while (bIntrSetID < TOTAL_INTERRUPT_SETS) {
-		if ((bInterruptId >= bFirstIndexForSet[bIntrSetID]) && (bInterruptId < bFirstIndexForSet[bIntrSetID+1])) {
-			if ((uwIntrSetsDivertedToPad1>>bIntrSetID)&0x01) {
-				VERBOSELOG("[CAM] %s: End\n", __func__);
-				return INTERRUPT_PAD_1;
-			} else {
-				VERBOSELOG("[CAM] %s: End\n", __func__);
-				return INTERRUPT_PAD_0;
-			}
-		} else
-			bIntrSetID++;
-	}
-
-	
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return INTERRUPT_PAD_0;
-
-}
-
-
-bool_t Yushan_CheckForInterruptIDInList(uint8_t bInterruptID, uint32_t *udwProtoInterruptList)
-{
-
-	bool_t		fStatus = 0;
-	uint8_t		bIntrDWordInList, bIndexInCurrentDWord;
-	uint32_t	*pListOfInterrupt;
-
-
-	
-	pListOfInterrupt =  udwProtoInterruptList;
-
-
-	if ((1<=bInterruptID)&&(bInterruptID<=32))
-		bIntrDWordInList = 0;
-	else if ((33<=bInterruptID)&&(bInterruptID<=64))
-		bIntrDWordInList = 1;
-	else
-		bIntrDWordInList = 2;
-
-	
-	pListOfInterrupt = pListOfInterrupt + bIntrDWordInList;
-
-	bIndexInCurrentDWord = (bInterruptID - (bIntrDWordInList*32)) - 1;
-
-
-	
-	fStatus = (bool_t)(((*pListOfInterrupt)>>bIndexInCurrentDWord) & 0x00000001);
-
-	return fStatus;
-
-}
-
-
-
-
-void Yushan_AddnRemoveIDInList(uint8_t bInterruptID, uint32_t *udwListOfInterrupts, bool_t fAddORClear)
-{
-
-	uint8_t		bIntrDWordInList, bIndexInCurrentDWord;
-	uint32_t	*pListOfInterrupt, udwTempIntrList, udwMask = 0x00000001;
-
-	
-	pListOfInterrupt = udwListOfInterrupts;
-
-	if ((1<=bInterruptID)&&(bInterruptID<=32))
-		bIntrDWordInList = 0;
-	else if ((33<=bInterruptID)&&(bInterruptID<=64))
-		bIntrDWordInList = 1;
-	else
-		bIntrDWordInList = 2;
-
-	
-	pListOfInterrupt = pListOfInterrupt + bIntrDWordInList;
-
-	
-	bIndexInCurrentDWord = (bInterruptID - (bIntrDWordInList*32)) - 1;
-
-	
-	
-
-	
-	if (fAddORClear == ADD_INTR_TO_LIST) {
-		
-		udwTempIntrList = ( ((*pListOfInterrupt)>>(bIndexInCurrentDWord)) | udwMask ); 
-		*pListOfInterrupt |= (udwTempIntrList << (bIndexInCurrentDWord));
-	} else if (fAddORClear == DEL_INTR_FROM_LIST) {
-		
-		udwTempIntrList = ( ((*pListOfInterrupt)>>(bIndexInCurrentDWord)) & udwMask ); 
-		*pListOfInterrupt &= ~(udwTempIntrList << (bIndexInCurrentDWord));
-	}
-
-
-}
-
-
-
-
-
-
-
-
-void	Yushan_DCPX_CPX_Enable(void)
-{
-
-	uint8_t	bSpiData = 0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	
-	bSpiData = 0x01;
-	SPI_Write(YUSHAN_SMIA_DCPX_ENABLE, 1, &bSpiData); 
-	bSpiData = 0x08;
-	SPI_Write(YUSHAN_SMIA_DCPX_MODE_REQ, 1, &bSpiData); 
-	bSpiData = 0x0A;
-	SPI_Write(YUSHAN_SMIA_DCPX_MODE_REQ+1, 1, &bSpiData); 
-
-	
-	bSpiData = 0x01;
-	SPI_Write(YUSHAN_SMIA_CPX_CTRL_REQ, 1, &bSpiData); 
-	
-	SPI_Write(YUSHAN_SMIA_CPX_MODE_REQ, 1, &bSpiData); 
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-}
-
-
-uint8_t Yushan_GetCurrentStreamingMode(void)
-{
-	uint8_t bSpiData,currentEvent;
-	uint8_t CurrentStreamingMode;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-	SPI_Read(YUSHAN_T1_DMA_REG_STATUS, 1, &bSpiData);
-
-	currentEvent = (bSpiData&0x70)>>4;
-	switch (currentEvent) {
-	case 1:
-		CurrentStreamingMode = YUSHAN_FRAME_FORMAT_STILL_MODE;
-		break;
-	case 2:
-		CurrentStreamingMode = YUSHAN_FRAME_FORMAT_VF_MODE;
-		break;
-	default:
-		
-		CurrentStreamingMode = 255;
-	}
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return CurrentStreamingMode;
-}
-
-
-bool_t	Yushan_Context_Config_Update(Yushan_New_Context_Config_t	*sYushanNewContextConfig)
-{
-
-	
-	uint8_t		bVfStillIndex, bVFIndex, bStillIndex, bVFMask=0;
-	
-	uint8_t		bDataType=0, bCurrentDataType=0, bActiveDatatype=1, bRawFormat=0, bWCAlreadyPresent = 0;
-	
-	uint8_t		bPixClkDiv=0, bDxoClkDiv=0, bCount=0;
-	uint16_t	uwNewHSize=0, uwLecci=0;
-	uint32_t	udwSpiData = 0;
-	uint16_t	wordCount = 0;
-	uint8_t		bCurrentStreamingMode;
-	
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	
-	bCurrentStreamingMode = Yushan_GetCurrentStreamingMode();
-	if (bCurrentStreamingMode == YUSHAN_FRAME_FORMAT_STILL_MODE) {
-		
-		sYushanNewContextConfig->bSelectStillVfMode = YUSHAN_FRAME_FORMAT_VF_MODE;
-	} else {
-		
-		
-		sYushanNewContextConfig->bSelectStillVfMode = YUSHAN_FRAME_FORMAT_STILL_MODE;
-		
-	}
-
-	
-	
-	
-	
-
-	if ((sYushanNewContextConfig->uwPixelFormat&0x0F)==0x0A){
-		bRawFormat = RAW10;
-		bDataType  = 0x2b;
-	} else if((sYushanNewContextConfig->uwPixelFormat&0x0F)==0x08) {
-		bRawFormat= RAW8; 
-		if(((sYushanNewContextConfig->uwPixelFormat>>8)&0x0F)==0x08)
-			bDataType = 0x2a;
-		else 
-			bDataType = 0x30; 
-	}
-
-	
-	SPI_Read(YUSHAN_IDP_GEN_CONTROL, 1, (uint8_t *)(&bVfStillIndex));
-	bVFIndex = bVfStillIndex&0x0F;
-	bStillIndex = (bVfStillIndex&0xF0)>>4;
-
-	
-	uwNewHSize = sYushanNewContextConfig->uwActivePixels;
-
-	for (bCount = 0; bCount < 13; bCount++) {
-		SPI_Read((uint16_t)(YUSHAN_IDP_GEN_WC_DI_0+4*bCount),4,(unsigned char*)&udwSpiData);
-		wordCount = udwSpiData & 0x0000ffff; 
-		if (wordCount==0) 
-			break;
-
-		bCurrentDataType = (udwSpiData>>16);							
-		udwSpiData = ((udwSpiData&0xFFFF)*8)/bRawFormat;				
-		
-		
-		if ((uwNewHSize == udwSpiData) && (bCurrentDataType == bDataType)) {
-			bWCAlreadyPresent = 1;
-			if((bCount==bVFIndex)||(bCount==bStillIndex)) {
-				VERBOSELOG("[CAM] %s: End\n", __func__);
-				return SUCCESS;			
-			} else
-				break;					
-		}
-	}
-
-	
-	
-	SPI_Read(YUSHAN_IDP_GEN_CONTROL, 4, (uint8_t *)(&udwSpiData));
-	if (sYushanNewContextConfig->bSelectStillVfMode == YUSHAN_FRAME_FORMAT_VF_MODE) {
-		udwSpiData &= 0xFFFFFFF0;
-		udwSpiData |= bCount;
-		
-		bVFMask = 1;
-	} else if (sYushanNewContextConfig->bSelectStillVfMode == YUSHAN_FRAME_FORMAT_STILL_MODE) {
-		udwSpiData &= 0xFFFFFF0F;
-		udwSpiData |= bCount << 4;
-		
-		bVFMask = 0;
-	}
-
-	
-	SPI_Write((uint16_t)(YUSHAN_IDP_GEN_CONTROL), 4, (uint8_t *)(&udwSpiData));
-
-	
-	if (bWCAlreadyPresent && (bCount != 13)) {
-		
-		SPI_Write((uint16_t)((YUSHAN_IDP_GEN_WC_DI_0+(4*bCount))+3),	1,	(unsigned char*)&bActiveDatatype);
-	} else if (bCount != 13) {
-		
-		
-		udwSpiData=(sYushanNewContextConfig->uwActivePixels*bRawFormat)/8;
-		SPI_Write((uint16_t)(YUSHAN_CSI2_TX_PACKET_SIZE_0+0xc*bCount),	4,	(unsigned char*)&udwSpiData);
-
-		SPI_Write((uint16_t)(YUSHAN_CSI2_TX_DI_INDEX_CTRL_0+0xc*bCount),	1,	(unsigned char*)&bDataType);
-
-		udwSpiData = udwSpiData | (bDataType<<16) | (bActiveDatatype<<24);
-		SPI_Write((uint16_t)(YUSHAN_IDP_GEN_WC_DI_0+4*bCount),	4,	(unsigned char*)&udwSpiData);
-	} else {
-		
-		ERRORLOG("[CAM] %s: Error, No entry vacant. Exiting ...\n", __func__);
-		return FAILURE;
-	}
-	
-	
-	
-	udwSpiData = (uwNewHSize & 0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT + bVFMask),1,(unsigned char*)&udwSpiData);
-	udwSpiData = ((uwNewHSize>>8)&0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+8+ bVFMask),1,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwNewHSize & 0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+24+ bVFMask),1,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwNewHSize>>8)&0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+32+ bVFMask),1,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwNewHSize & 0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+48+ bVFMask),1,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwNewHSize>>8)&0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+56+ bVFMask),1,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwNewHSize & 0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+72+ bVFMask),1,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwNewHSize>>8)&0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+80+ bVFMask),1,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwNewHSize & 0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+88+ bVFMask),1,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwNewHSize>>8)&0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+96+ bVFMask),1,(unsigned char*)&udwSpiData);
-
-	
-	udwSpiData=(uwNewHSize & 0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+104+ bVFMask),1,(unsigned char*)&udwSpiData);
-	udwSpiData=((uwNewHSize>>8)&0xFF);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+112+ bVFMask),1,(unsigned char*)&udwSpiData);
-
-	
-	
-	SPI_Read(YUSHAN_CLK_DIV_FACTOR,1,(unsigned char*)&bDxoClkDiv); 
-	SPI_Read(YUSHAN_CLK_DIV_FACTOR+1,1,(unsigned char*)&bPixClkDiv); 
-
-	if ((bDxoClkDiv !=0) && (bPixClkDiv !=0))
-		uwLecci = (sYushanNewContextConfig->uwLineBlank*bPixClkDiv)/ bDxoClkDiv;
-	else
-		uwLecci = 300;
-
-	
-	udwSpiData=(uwLecci&0xff);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+120+bVFMask),1,(unsigned char*)&udwSpiData);
-
-	udwSpiData=((uwLecci>>8)&0xff);
-	SPI_Write((uint16_t)(YUSHAN_T1_DMA_MEM_LOWER_ELT+128+bVFMask),1,(unsigned char*)&udwSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-
-
-}
-
-
-
-
-
-bool_t Yushan_Update_DxoDop_Af_Strategy(uint8_t  bAfStrategy)
-{
-	bool_t	fStatus = SUCCESS;
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-#if DxODOP_dfltVal_ucode_id_15_8 == 2
-	fStatus = SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_af_strategy_7_0, 1, &bAfStrategy);
-#else
-	VERBOSELOG("[CAM] %s: DOP used not compatiblewith this function\n", __func__);
-#endif
-	VERBOSELOG("[CAM] %s: End with Status:%i\n", __func__, fStatus);
-	return fStatus;
-}
-
-
-
-bool_t Yushan_AF_ROI_Update(Yushan_AF_ROI_t  *sYushanAfRoi, uint8_t bNumOfActiveRoi) 
-{
-
-	uint8_t		bSpiData[4];
-	uint8_t		bStatus = SUCCESS, bCount=0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	if (!bNumOfActiveRoi) { 
-		DEBUGLOG("[CAM] %s:No ROI Activated so exiting with SUCCESS\n", __func__);
-		return SUCCESS;
-	} else {
-		
-		bStatus &= SPI_Write(DXO_DOP_BASE_ADDR+DxODOP_ROI_active_number_7_0, 1, (uint8_t*)(&bNumOfActiveRoi));
-	}
-
-	
-
-	
-	while (bCount < bNumOfActiveRoi) {
-		bSpiData[0] = (sYushanAfRoi->bXStart);
-		bSpiData[1] = (sYushanAfRoi->bYStart);
-		bSpiData[2] = (sYushanAfRoi->bXEnd);
-		bSpiData[3] = (sYushanAfRoi->bYEnd);
-
-		
-		
-		bStatus &= SPI_Write((uint16_t)(DXO_DOP_BASE_ADDR+DxODOP_ROI_0_x_start_7_0 + bCount*4), 4, (uint8_t*)(&bSpiData[0]));
-		
-		bCount++;
-
-		
-		sYushanAfRoi++;
-	}
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return bStatus;
-}
-
-
-
-
-bool_t Yushan_Enter_Standby_Mode(void)
-{
-	uint8_t		bSpiData;
-	uint32_t	udwSpiData;
-	bool_t		fStatus = SUCCESS;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	
-	bSpiData = 0;
-	fStatus &= SPI_Write(YUSHAN_MIPI_RX_ENABLE, 1, (uint8_t*)(&bSpiData));
-	fStatus &= SPI_Write(YUSHAN_MIPI_TX_ENABLE, 1, (uint8_t*)(&bSpiData));
-
-
-	
-	
-	
-	
-	SPI_Read(YUSHAN_CLK_CTRL,   1, (uint8_t*)(&bSpiData));		
-	SPI_Read(YUSHAN_CLK_CTRL+2, 2, (uint8_t*)(&udwSpiData));	
-	udwSpiData = (bSpiData | (udwSpiData<<16));
-
-	
-	bSpiData = 0x00;
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL, 1, (uint8_t*)(&bSpiData));
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+2, 1, (uint8_t*)(&bSpiData)); 
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+3, 1, (uint8_t*)(&bSpiData)); 
-
-	
-	SPI_Read(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));
-	bSpiData &= 0xFE;	
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));
-
-	
-	// SPI_Read(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));	/* No need of read, as the data written is saved in bSpiData */
-	bSpiData |= ((bSpiData>>1)|0x01)<<1;						
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));
-
-	
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL, 1, (uint8_t*)(&udwSpiData));		
-	udwSpiData = (udwSpiData >> 16);										
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+2, 1, (uint8_t*)(&udwSpiData));	
-	udwSpiData = (udwSpiData >> 8);
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+3, 1, (uint8_t*)(&udwSpiData));	
-	 
-	
-	SPI_Read(YUSHAN_PLL_CTRL_MAIN, 1, (uint8_t*)(&bSpiData));
-	bSpiData |= 0x01;			
-	fStatus &= SPI_Write(YUSHAN_PLL_CTRL_MAIN, 1, (uint8_t*)(&bSpiData));
-
-	
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-
-}
-
-
-
-
-bool_t Yushan_Exit_Standby_Mode(Yushan_Init_Struct_t * sInitStruct)
-{
-	uint8_t		bSpiData;
-	uint32_t	udwSpiData;
-	bool_t		fStatus = SUCCESS;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	
-
-	
-	SPI_Read(YUSHAN_PLL_CTRL_MAIN, 1, (uint8_t*)(&bSpiData));
-	bSpiData &= 0xFE;	
-	SPI_Write(YUSHAN_PLL_CTRL_MAIN, 1, (uint8_t*)(&bSpiData));
-
-	fStatus &= Yushan_WaitForInterruptEvent(EVENT_PLL_STABLE, TIME_100MS);
-	
-	if (!fStatus) {
-		ERRORLOG("[CAM] %s: Error: EVENT_PLL_STABLE not received. Exiting...\n", __func__);
-		return fStatus;
-	}
-
-	
-	
-	SPI_Read(YUSHAN_CLK_CTRL,   1, (uint8_t*)(&bSpiData));		
-	udwSpiData = (uint32_t)(bSpiData);
-	SPI_Read(YUSHAN_CLK_CTRL+2, 1, (uint8_t*)(&bSpiData));		
-	udwSpiData |= (((uint32_t)(bSpiData))<<8);
-	SPI_Read(YUSHAN_CLK_CTRL+3, 1, (uint8_t*)(&bSpiData));		
-	udwSpiData |= (((uint32_t)(bSpiData))<<16);
-
-
-	
-	bSpiData = 0x00;
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL, 1, (uint8_t*)(&bSpiData));
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+2, 1, (uint8_t*)(&bSpiData));		
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+3, 1, (uint8_t*)(&bSpiData));		
-
-	
-	SPI_Read(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));
-	bSpiData &= (bSpiData&0xFD);						
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));
-
-	
-	
-	bSpiData |= 0x01;											
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+1, 1, (uint8_t*)(&bSpiData));
-	
-	
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL, 1, (uint8_t*)(&udwSpiData));		
-	udwSpiData = (udwSpiData >> 16);										
-	fStatus &= SPI_Write(YUSHAN_CLK_CTRL+2, 2, (uint8_t*)(&udwSpiData));	
-
-
-	
-	if ( sInitStruct->bNumberOfLanes == 1)
-		udwSpiData=0x11; 
-	else
-	if ( sInitStruct->bNumberOfLanes == 2)
-		udwSpiData=0x31; 
-	else
-	if ( sInitStruct->bNumberOfLanes == 4)
-		udwSpiData=0xf1; 
-
-	fStatus &= SPI_Write(YUSHAN_MIPI_RX_ENABLE, 1,(uint8_t*)(&udwSpiData)); 
-	udwSpiData |= 0x02; 
-	fStatus &= SPI_Write(YUSHAN_MIPI_TX_ENABLE, 1,(uint8_t*)(&udwSpiData));
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-}
-
-
-
-
-bool_t Yushan_Swap_Rx_Pins (bool_t fClkLane, bool_t fDataLane1, bool_t fDataLane2, bool_t fDataLane3, bool_t fDataLane4)
-{
-	bool_t		fStatus; 
-	uint8_t		bSpiData = 0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	bSpiData = (fClkLane | (fDataLane1<<4) | (fDataLane2<<5) | (fDataLane3<<6) | (fDataLane4<<7));
-
-	DEBUGLOG("[CAM] %s:Spi data for Swapping Rx pins is %4.4x\n", __func__, bSpiData);
-
-	fStatus = SPI_Write(YUSHAN_MIPI_RX_SWAP_PINS, 1, &bSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-
-}
-
-
-
-bool_t Yushan_Invert_Rx_Pins (bool_t fClkLane, bool_t fDataLane1, bool_t fDataLane2, bool_t fDataLane3, bool_t fDataLane4)
-{
-
-	bool_t		fStatus; 
-	uint8_t		bSpiData = 0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	bSpiData = (fClkLane | (fDataLane1<<4) | (fDataLane2<<5) | (fDataLane3<<6) | (fDataLane4<<7));
-	VERBOSELOG("[CAM] %s:Spi data for Inverting Rx pins is %4.4x\n", __func__, bSpiData);
-
-	fStatus = SPI_Write(YUSHAN_MIPI_RX_INVERT_HS, 1, &bSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return fStatus;
-}
-
-
-
-
-bool_t Yushan_Assert_Reset(uint32_t udwModuleMask, uint8_t bResetORDeReset)
-{
-	uint8_t bCurrentModuleToReset, bCurrentModule=0;
-	uint8_t	bSpiData;
-	bool_t	bSetORReset;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	if (!(udwModuleMask & 0xFFFFFFFF)) {
-		ERRORLOG("[CAM] %s:Mask not given for reset/dereset. Returning FAILURE\n", __func__);
-		return FAILURE;	
-	}
-
-	while (bCurrentModule < TOTAL_MODULES) {
-
-		bSetORReset = ((udwModuleMask>>bCurrentModule) & 0x01);
-
-		
-		if (!bSetORReset) {
-			bCurrentModule++;
-			pr_info("[CAM] Current Module is %d\n", bCurrentModule);
-			continue;
-		} else {
-			bCurrentModuleToReset = bCurrentModule + 1;
-			bCurrentModule++;
-		}
-
-
-		
-		if (bResetORDeReset)
-			
-			bSpiData = 0x11;
-		else
-			
-			bSpiData = 0x01;
-
-		
-		pr_info("[CAM] Current module is %d and Module to reset/Dereset is %d\n", bCurrentModule, bCurrentModuleToReset);
-		
-		
-		switch (bCurrentModuleToReset) {
-#if 0
-			case DFT_RESET:
-				break;
-#endif
-			case T1_DMA:
-				SPI_Write(YUSHAN_T1_DMA_REG_ENABLE, 1, &bSpiData);
-				break;
-			case CSI2_RX:
-				
-				if(bResetORDeReset)
-					
-					bSpiData = 0x70;
-				else
-					
-					bSpiData = 0x00;
-
-				SPI_Write(YUSHAN_CSI2_RX_ENABLE, 1, &bSpiData);
-				
-				
-				if(bResetORDeReset)
-					
-					bSpiData = 0x11;
-				else
-					
-					bSpiData = 0x01;
-				break;
-			case IT_POINT:
-				SPI_Write(YUSHAN_ITPOINT_ENABLE, 1, &bSpiData);
-				break;
-			case IDP_GEN:
-
-				
-				SPI_Read(YUSHAN_IDP_GEN_AUTO_RUN, 1, &bSpiData);
-
-				if(bResetORDeReset)
-					bSpiData |= 0x10;
-				else
-					bSpiData &=0x01;
-				SPI_Write(YUSHAN_IDP_GEN_AUTO_RUN, 1, &bSpiData);
-
-				break;
-			case MIPI_RX_DTCHK:
-				SPI_Write(YUSHAN_MIPI_RX_DTCHK_ENABLE, 1, &bSpiData);
-				break;
-			case SMIA_PATTERN_GEN:
-				SPI_Write(YUSHAN_PATTERN_GEN_ENABLE, 1, &bSpiData);
-				break;
-			case SMIA_DCPX:
-				SPI_Write(YUSHAN_SMIA_DCPX_ENABLE, 1, &bSpiData);
-				break;
-			case P2W_FIFO_WR:
-				
-				if(bResetORDeReset)
-					
-					bSpiData = 0x03;
-				else
-					
-					bSpiData = 0x00;
-
-				SPI_Write(YUSHAN_P2W_FIFO_WR_CTRL, 1, &bSpiData);
-				
-				
-				if(bResetORDeReset)
-					
-					bSpiData = 0x11;
-				else
-					
-					bSpiData = 0x01;
-
-				break;
-			case P2W_FIFO_RD:
-				
-				if(bResetORDeReset)
-					
-					bSpiData = 0x03;
-				else
-					
-					bSpiData = 0x00;
-
-				SPI_Write(YUSHAN_P2W_FIFO_RD_CTRL, 1, &bSpiData);
-				
-				
-				if(bResetORDeReset)
-					
-					bSpiData = 0x11;
-				else
-					
-					bSpiData = 0x01;
-
-				break;
-			case CSI2_TX_WRAPPER:
-				if(bResetORDeReset)
-					
-					bSpiData = 0x01;
-				else
-					
-					bSpiData = 0x00;
-
-				SPI_Write(YUSHAN_CSI2_TX_WRAPPER_CTRL, 1, &bSpiData);
-				
-				
-				if(bResetORDeReset)
-					
-					bSpiData = 0x11;
-				else
-					
-					bSpiData = 0x01;
-
-				break;
-
-			case CSI2_TX:
-				SPI_Write(YUSHAN_CSI2_TX_ENABLE, 1, &bSpiData);
-				break;
-			case LINE_FILTER_BYPASS:
-				SPI_Write(YUSHAN_LINE_FILTER_BYPASS_ENABLE, 1, &bSpiData);
-				break;
-			case DT_FILTER_BYPASS:
-				SPI_Write(YUSHAN_DTFILTER_BYPASS_ENABLE, 1, &bSpiData);
-				break;
-			case LINE_FILTER_DXO:
-				SPI_Write(YUSHAN_LINE_FILTER_DXO_ENABLE, 1, &bSpiData);
-				break;
-			case DT_FILTER_DXO:
-				SPI_Write(YUSHAN_DTFILTER_DXO_ENABLE, 1, &bSpiData);
-				break;
-			case EOF_RESIZE_PRE_DXO:
-				SPI_Write(YUSHAN_EOF_RESIZE_PRE_DXO_ENABLE, 1, &bSpiData);
-				break;
-			case LBE_PRE_DXO:
-				SPI_Write(YUSHAN_LBE_PRE_DXO_ENABLE, 1, &bSpiData);
-				break;
-			case EOF_RESIZE_POST_DXO:
-				SPI_Write(YUSHAN_EOF_RESIZE_POST_DXO_ENABLE, 1, &bSpiData);
-				break;
-			case LECCI_RESET:
-				SPI_Write(YUSHAN_LECCI_ENABLE, 1,  &bSpiData);
-				break;
-			case LBE_POST_DXO:
-				SPI_Write(YUSHAN_LBE_POST_DXO_ENABLE, 1,  &bSpiData);
-				break;
-
-		}
-
-
-
-	}
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-
-}
-
-
-
-
-bool_t	Yushan_PatternGenerator(Yushan_Init_Struct_t *sInitStruct, uint8_t	bPatternReq, bool_t	bDxoBypassForTestPattern) 
-{
-
-	uint8_t		bSpiData, bDxoClkDiv, bPixClkDiv;
-	uint32_t	udwSpiData=0, uwHSize, uwVSize;
-	uint32_t	uwVBlk;
-	uint16_t	uwMaxInterframeGap;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	uwHSize = sInitStruct->uwActivePixels;
-	uwVSize = sInitStruct->uwLines;
-	uwVBlk	= sInitStruct->uwFrameBlank;
-
-	
-	sInitStruct->sFrameFormat[1].bDatatype = 0x12;
-	sInitStruct->sFrameFormat[1].uwWordcount=(uwHSize)*(sInitStruct->uwPixelFormat&0x0F)/8;
-
-	udwSpiData=sInitStruct->sFrameFormat[1].uwWordcount;
-	SPI_Write(YUSHAN_CSI2_TX_PACKET_SIZE_0+0xc*1,4,(unsigned char*)&udwSpiData);
-
-	udwSpiData=sInitStruct->sFrameFormat[1].bDatatype ;
-	SPI_Write(YUSHAN_CSI2_TX_DI_INDEX_CTRL_0+0xc*1,1,(unsigned char*)&udwSpiData); 
-
-	
-	
-	SPI_Write(YUSHAN_LECCI_BYPASS_CTRL, 1, (unsigned char*)&bDxoBypassForTestPattern); 
-
-	SPI_Read(YUSHAN_CLK_DIV_FACTOR,1,(unsigned char*)&bDxoClkDiv);
-	SPI_Read(YUSHAN_CLK_DIV_FACTOR+1,1,(unsigned char*)&bPixClkDiv);
-	
-	if ( bDxoClkDiv !=0 && bPixClkDiv !=0 )
-	  udwSpiData    = sInitStruct->uwLineBlankStill*bPixClkDiv/ bDxoClkDiv;
-	else
-	  udwSpiData    = 300;
-	SPI_Write(YUSHAN_LECCI_MIN_INTERLINE, 2, (unsigned char*)&udwSpiData);
-
-	
-	udwSpiData = uwHSize;
-	SPI_Write(YUSHAN_LECCI_LINE_SIZE, 2, (unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_LBE_PRE_DXO_H_SIZE, 2, (unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_LBE_POST_DXO_H_SIZE, 2, (unsigned char*)&udwSpiData);
-
-	
-	SPI_Write(YUSHAN_PATTERN_GEN_PATTERN_TYPE_REQ, 1, &bPatternReq);
-	
-	udwSpiData = (uwHSize|((uwHSize+sInitStruct->uwLineBlankStill)<<16));
-	SPI_Write(YUSHAN_IDP_GEN_LINE_LENGTH, 4, (uint8_t *)(&udwSpiData));
-	if (bDxoBypassForTestPattern) {
-	udwSpiData = (uwVSize|(0xFFF0<<16));
-		SPI_Write(YUSHAN_IDP_GEN_FRAME_LENGTH, 4, (uint8_t *)(&udwSpiData));
-	} else {
-		uwMaxInterframeGap = (0xFFF0/uwHSize)*uwHSize;
-		uwVBlk = uwVBlk - (uwMaxInterframeGap/uwHSize);
-		udwSpiData = ((uwVSize+uwVBlk)|(uwMaxInterframeGap<<16));
-		SPI_Write(YUSHAN_IDP_GEN_FRAME_LENGTH, 4, (uint8_t *)(&udwSpiData));
-		
-		udwSpiData = 1;
-		SPI_Write(YUSHAN_LINE_FILTER_BYPASS_ENABLE, 1, (unsigned char *)&udwSpiData);
-		udwSpiData = 1;
-		SPI_Write(YUSHAN_LINE_FILTER_BYPASS_LSTART_LEVEL, 2, (unsigned char *)&udwSpiData);
-		udwSpiData = uwVBlk+1;
-		SPI_Write(YUSHAN_LINE_FILTER_BYPASS_LSTOP_LEVEL, 2, (unsigned char *)&udwSpiData);
-		
-		udwSpiData = 0x1;
-		SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH0, 1, (unsigned char *)&udwSpiData);
-		udwSpiData = 0xd;
-		SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH1, 1, (unsigned char *)&udwSpiData);
-		SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH2, 1, (unsigned char *)&udwSpiData);
-		udwSpiData = 0x03;
-		SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH3, 1, (unsigned char *)&udwSpiData);
-		udwSpiData = 0x01;
-		SPI_Write(YUSHAN_DTFILTER_BYPASS_ENABLE, 1, (unsigned char *)&udwSpiData);
-		
-		udwSpiData = 1;
-		SPI_Write(YUSHAN_LINE_FILTER_DXO_ENABLE, 1, (unsigned char *)&udwSpiData);
-		udwSpiData = uwVBlk+1;
-		SPI_Write(YUSHAN_LINE_FILTER_DXO_LSTART_LEVEL, 2, (unsigned char *)&udwSpiData);
-		udwSpiData = uwVSize+uwVBlk+1;
-		SPI_Write(YUSHAN_LINE_FILTER_DXO_LSTOP_LEVEL, 2, (unsigned char *)&udwSpiData);
-	}
-
-	
-	if(sInitStruct->uwPixelFormat == 0x0a08) {
-		
-		bSpiData = 0x00;
-		SPI_Write(YUSHAN_SMIA_DCPX_ENABLE, 1, &bSpiData); 
-	}
-
-	
-
-	
-	bSpiData = 1;
-	SPI_Write(YUSHAN_PATTERN_GEN_ENABLE, 1, &bSpiData);
-
-	
-	bSpiData = 1;
-	SPI_Write(YUSHAN_IDP_GEN_AUTO_RUN, 1, &bSpiData);
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	return SUCCESS;
-
-}
-
-
-
-
-void	Yushan_DXO_Lecci_Bypass(void)
-{
-	uint8_t	bSpiData;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-	
-	bSpiData=0x01;
-	SPI_Write(YUSHAN_LECCI_BYPASS_CTRL, 1, (unsigned char*)&bSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-}
-
-
-
-
-void	Yushan_DXO_DTFilter_Bypass(void)
-{
-	uint32_t	udwSpiData=0;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	
-	
-	udwSpiData=0x1;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH0,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0xd;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH1,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x02;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH2,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x03;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_MATCH3,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x01;
-	SPI_Write(YUSHAN_DTFILTER_BYPASS_ENABLE,1,(unsigned char*)&udwSpiData);
-
-	
-
-	udwSpiData=0x5;
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH0,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH2,1,(unsigned char*)&udwSpiData);
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH3,1,(unsigned char*)&udwSpiData);
-	
-	udwSpiData=0x05;
-	SPI_Write(YUSHAN_DTFILTER_DXO_MATCH1,1,(unsigned char*)&udwSpiData);
-	udwSpiData=0x01;
-	SPI_Write(YUSHAN_DTFILTER_DXO_ENABLE,1,(unsigned char*)&udwSpiData);
-
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-	
-}
-
-
-
-
-
-
-bool_t Yushan_Read_AF_Statistics(Yushan_AF_Stats_t* sYushanAFStats, uint8_t	bNumOfActiveRoi, uint16_t *frameIdx)
-{
-
-	uint8_t		bStatus = SUCCESS, bCount = 0;
-	uint32_t	udwSpiData[4];
-	uint16_t	val;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-#if 0 
-			YushanPrintFrameNumber();
-			YushanPrintDxODOPAfStrategy();
-			YushanPrintImageInformation();
-			YushanPrintVisibleLineSizeAndRoi();
-#endif
-
-#if 0
-	
-	bStatus &= SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_ROI_active_number_7_0, 1, (uint8_t*)(&bNumOfActiveRoi));
-	
-#endif
-
-	if (!bNumOfActiveRoi) 
-		return SUCCESS;
-	if (frameIdx != NULL) {
-		SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_frame_number_7_0, 2, (uint8_t *)(&val));
-		*frameIdx= val;
-	}
-
-	
-	
-	while (bCount < bNumOfActiveRoi) {
-		
-		bStatus &= SPI_Read((uint16_t)(DXO_DOP_BASE_ADDR + DxODOP_ROI_0_stats_G_7_0 + bCount*16), 16, (uint8_t *)(&udwSpiData[0]));
-
-		
-		sYushanAFStats[bCount].udwAfStatsGreen = udwSpiData[0];
-		sYushanAFStats[bCount].udwAfStatsRed = udwSpiData[1];
-		sYushanAFStats[bCount].udwAfStatsBlue = udwSpiData[2];
-		sYushanAFStats[bCount].udwAfStatsConfidence = udwSpiData[3];
-		DEBUGLOG("[CAM]%s, G:%d, R:%d, B:%d, confidence:%d (%d) \n", __func__,
-			sYushanAFStats[bCount].udwAfStatsGreen,
-			sYushanAFStats[bCount].udwAfStatsRed,
-			sYushanAFStats[bCount].udwAfStatsBlue,
-			sYushanAFStats[bCount].udwAfStatsConfidence,
-			*frameIdx);
-
-		
-		bCount++;
-	}
-
-	VERBOSELOG("[CAM] %s: End With Status: %i\n", __func__, bStatus);
-	return bStatus;
-
-}
-
-
-
-#define YUSHAN_REGISTER_CHECK(reg_addr) udwSpiData = 0; SPI_Read(reg_addr, 4, (uint8_t *)(&udwSpiData)); pr_info("[CAM] %s: %s: 0x%08x\n", __func__, #reg_addr, udwSpiData);
-#define YUSHAN_DOP_REGISTER_CHECK(reg_addr) udwSpiData = 0; SPI_Read(reg_addr + DXO_DOP_BASE_ADDR, 1, (uint8_t *)(&udwSpiData)); pr_info("[CAM] %s: %s: 0x%02x\n", __func__, #reg_addr, udwSpiData);
-#define YUSHAN_PDP_REGISTER_CHECK(reg_addr) udwSpiData = 0; SPI_Read(reg_addr + DXO_PDP_BASE_ADDR, 1, (uint8_t *)(&udwSpiData)); pr_info("[CAM] %s: %s: 0x%02x\n", __func__, #reg_addr, udwSpiData);
-#define YUSHAN_DPP_REGISTER_CHECK(reg_addr) udwSpiData = 0; SPI_Read(reg_addr + DXO_DPP_BASE_ADDR-0x8000, 1, (uint8_t *)(&udwSpiData)); pr_info("[CAM] %s: %s: 0x%02x\n", __func__, #reg_addr, udwSpiData);
-#define YUSHAN_DPP_REGISTER_CHECK2(reg_addr) udwSpiData = 0; SPI_Read(reg_addr + DXO_DPP_BASE_ADDR-0x10000, 1, (uint8_t *)(&udwSpiData)); pr_info("[CAM] %s: %s: 0x%02x\n", __func__, #reg_addr, udwSpiData);
-void Yushan_Status_Snapshot(void)
-{
-	uint32_t	udwSpiData;
-	uint32_t	udwSpiBaseIndex;
-
-	VERBOSELOG("[CAM] %s: Start\n", __func__);
-
-	DEBUGLOG("[CAM] %s: **** CLK CONFIG  CHECK ****\n", __func__);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CLK_DIV_FACTOR);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CLK_DIV_FACTOR_2);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CLK_CTRL);
-	YUSHAN_REGISTER_CHECK(YUSHAN_PLL_CTRL_MAIN);
-	YUSHAN_REGISTER_CHECK(YUSHAN_PLL_LOOP_OUT_DF);
-
-	DEBUGLOG("[CAM] %s: **** CSI2 RX INTERFACE  CHECK ****\n", __func__);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_RX_FRAME_NUMBER);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_RX_DATA_TYPE);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_RX_WORD_COUNT);
-	YUSHAN_REGISTER_CHECK(YUSHAN_ITM_CSI2RX_STATUS);
-
-	DEBUGLOG("[CAM] %s: **** PRE-DXO CHECK ****\n", __func__);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_0);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_1);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_2);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_3);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_4);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_5);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_6);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_7);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_8);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_9);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_10);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_11);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_12);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_13);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_WC_DI_14);
-	YUSHAN_REGISTER_CHECK(YUSHAN_IDP_GEN_CONTROL);
-	YUSHAN_REGISTER_CHECK(YUSHAN_ITM_IDP_STATUS);
-	YUSHAN_REGISTER_CHECK(YUSHAN_T1_DMA_REG_STATUS);
-
-	DEBUGLOG("[CAM] %s: **** DXO PDP CHECK ****\n", __func__);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_ucode_id_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_ucode_id_15_8);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_hw_id_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_hw_id_15_8);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_calib_id_0_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_calib_id_1_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_calib_id_2_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_calib_id_3_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_error_code_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_frame_number_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_frame_number_15_8);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_visible_line_size_7_0);
-	YUSHAN_PDP_REGISTER_CHECK(DxOPDP_visible_line_size_15_8);
-
-	DEBUGLOG("[CAM] %s: **** DXO DPP CHECK ****\n", __func__);
-	udwSpiBaseIndex = 0x010000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_ucode_id_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_ucode_id_15_8);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_hw_id_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_hw_id_15_8);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_calib_id_0_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_calib_id_1_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_calib_id_2_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_calib_id_3_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_error_code_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_frame_number_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_frame_number_15_8);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_visible_line_size_7_0);
-	YUSHAN_DPP_REGISTER_CHECK(DxODPP_visible_line_size_15_8);
-	udwSpiBaseIndex = 0x08000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	DEBUGLOG("[CAM] %s: **** DXO DOP CHECK ****\n", __func__);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_ucode_id_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_ucode_id_15_8);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_hw_id_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_hw_id_15_8);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_calib_id_0_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_calib_id_1_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_calib_id_2_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_calib_id_3_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_error_code_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_frame_number_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_frame_number_15_8);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_visible_line_size_7_0);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_visible_line_size_15_8);
-	YUSHAN_DOP_REGISTER_CHECK(DxODOP_binning_7_0);
-
-	DEBUGLOG("[CAM] %s: **** POST-DXO CHECK ****\n", __func__);
-	YUSHAN_REGISTER_CHECK(YUSHAN_P2W_FIFO_WR_STATUS);
-	YUSHAN_REGISTER_CHECK(YUSHAN_P2W_FIFO_RD_STATUS);
-	YUSHAN_REGISTER_CHECK(YUSHAN_ITM_P2W_UFLOW_STATUS);
-	YUSHAN_REGISTER_CHECK(YUSHAN_ITM_LBE_POST_DXO_STATUS);
-
-	DEBUGLOG("[CAM] %s: **** CSI2 RX INTERFACE  CHECK ****\n", __func__);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_PACKET_SIZE_0);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_DI_INDEX_CTRL_0);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_LINE_NO_0);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_PACKET_SIZE_1);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_DI_INDEX_CTRL_1);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_LINE_NO_1);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_PACKET_SIZE_2);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_DI_INDEX_CTRL_2);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_LINE_NO_2);
-	YUSHAN_REGISTER_CHECK(YUSHAN_CSI2_TX_FRAME_NO_0);
-	YUSHAN_REGISTER_CHECK(YUSHAN_ITM_CSI2TX_STATUS);
-	VERBOSELOG("[CAM] %s: End\n", __func__);
-}
-
diff --git a/drivers/media/video/msm/rawchip/Yushan_API.h b/drivers/media/video/msm/rawchip/Yushan_API.h
deleted file mode 100644
index 7322a2b..0000000
--- a/drivers/media/video/msm/rawchip/Yushan_API.h
+++ /dev/null
@@ -1,619 +0,0 @@
-#ifndef _YUSHAN_API_H_
-#define _YUSHAN_API_H_
-
-
-#ifndef WIN32
-#include <media/linux_rawchip.h>
-#include "yushan_registermap.h"
-#include "DxODOP_regMap.h"
-#include "DxODPP_regMap.h"
-#include "DxOPDP_regMap.h"
-#include "rawchip_spi.h"
-#endif
-#ifdef __cplusplus
-extern "C"{
-#endif   
-
-
-
-
-
-#define YUSHAN_DEBUG 0
-#if YUSHAN_DEBUG
-	#ifdef WIN32
-		#include <stdio.h>
-		extern	FILE	*fLogFile;
-		extern	FILE	*HtmlFileLog;
-		#define __func__  __FUNCTION__
-		
-		#define DEBUGLOG(...)  fprintf(HtmlFileLog, __VA_ARGS__); fprintf(HtmlFileLog, "<hr>\n")
-		
-	#else
-		#define DEBUGLOG  pr_info
-	#endif
-#else
-	#define DEBUGLOG(...)	
-#endif
-
-#define YUSHAN_VERBOSE 0
-#if YUSHAN_VERBOSE
-	#ifdef WIN32
-		#define VERBOSELOG(...)   fprintf(HtmlFileLog, __VA_ARGS__)
-	#else
-		#define VERBOSELOG  pr_info
-	#endif
-#else
-	#define VERBOSELOG(...)	
-#endif
-
-#ifdef WIN32
-	#if YUSHAN_DEBUG == 0
-		#include <stdio.h>
-		extern	FILE	*fLogFile;
-		extern	FILE	*HtmlFileLog;
-		
-		#define __func__  __FUNCTION__
-	#endif
-	#define ERRORLOG(...)   fprintf(HtmlFileLog, __VA_ARGS__)
-#else
-	#define ERRORLOG  pr_err
-#endif
-
-
-
-typedef unsigned char bool_t;
-#ifdef WIN32
-typedef unsigned char uint8_t;
-typedef signed char int8_t;
-typedef unsigned short uint16_t;
-typedef unsigned int uint32_t;
-#endif
-
-
-#define API_MAJOR_VERSION					14
-#define API_MINOR_VERSION				2
-
-#define TRUE								1
-#define SUCCESS								1
-#define FALSE								0
-#define FAILURE								0
-#define MIPI_CLK_LANE					  1
-#define MIPI_DATA_LANE1					2
-#define MIPI_DATA_LANE2					3
-#define MIPI_DATA_LANE3					4
-#define MIPI_DATA_LANE4					5
-#define MIPI_STOP_STATE					1
-#define MIPI_ULP_STATE					2
-#define MIPI_ACTIVE_STATE				3
-
-
-
-#define RAW8								8
-#define	RAW10								10
-#define	RAW10_8								108		
-
-
-#define IDP_GEN_PIX_WIDTH					10
-#define DXO_CLK_LIMIT						0x12C0000	
-#define SYS_CLK_LIMIT						0x0C80000	
-
-#define PLL_CLK_INDEX				    	0
-#define IDIV_INDEX				    		1
-#define ODIV_INDEX		          			2
-#define LOOP_INDEX	     					3
-
-#define DXO_MIN_LINEBLANKING				150
-#define DXO_MIN_LINELENGTH					1000
-#define DXO_ACTIVE_FRAMELENGTH				500000
-#define DXO_FULL_FRAMELENGTH				900000
-
-
-#define DXO_PDP_HW_MICROCODE_ID				((DxOPDP_dfltVal_ucode_id_15_8<<8)|			\
-												(DxOPDP_dfltVal_hw_id_7_0<<16)|(DxOPDP_dfltVal_hw_id_15_8<<24))
-#define DXO_DOP_HW_MICROCODE_ID				((DxODOP_dfltVal_ucode_id_15_8<<8)|			\
-												(DxODOP_dfltVal_hw_id_7_0<<16)|(DxODOP_dfltVal_hw_id_15_8<<24))
-#define DXO_DPP_HW_MICROCODE_ID				((DxODPP_dfltVal_ucode_id_15_8<<8)|			\
-												(DxODPP_dfltVal_hw_id_7_0<<16)|(DxODPP_dfltVal_hw_id_15_8<<24))
-
-#define DXO_PDP_CALIBRATIONCODE_ID			((DxOPDP_dfltVal_calib_id_0_7_0)|(DxOPDP_dfltVal_calib_id_1_7_0<<8)|	\
-												(DxOPDP_dfltVal_calib_id_2_7_0<<16)|(DxOPDP_dfltVal_calib_id_3_7_0<<24))
-#define DXO_DOP_CALIBRATIONCODE_ID			((DxODOP_dfltVal_calib_id_0_7_0)|(DxODOP_dfltVal_calib_id_1_7_0<<8)|	\
-												(DxODOP_dfltVal_calib_id_2_7_0<<16)|(DxODOP_dfltVal_calib_id_3_7_0<<24))
-#define DXO_DPP_CALIBRATIONCODE_ID			((DxODPP_dfltVal_calib_id_0_7_0)|(DxODPP_dfltVal_calib_id_1_7_0<<8)|	\
-												(DxODPP_dfltVal_calib_id_2_7_0<<16)|(DxODPP_dfltVal_calib_id_3_7_0<<24))
-
-
-
-
-#define ADD_INTR_TO_LIST							0x01
-#define	DEL_INTR_FROM_LIST							0x00
-
-#define	INTERRUPT_PAD_0								0x00
-#define	INTERRUPT_PAD_1								0x01
-
-#define TOTAL_INTERRUPT_SETS						13
-#define TOTAL_INTERRUPT_COUNT						85
-#define INTERRUPT_SET_SIZE							0x18
-#define FALSE_ALARM									0xFF
-
-#define YUSHAN_INTR_BASE_ADDR						0x0C00
-#define	YUSHAN_OFFSET_INTR_STATUS					0x00	
-#define	YUSHAN_OFFSET_INTR_ENABLE_STATUS			0x04
-#define YUSHAN_OFFSET_INTR_STATUS_CLEAR				0x08
-#define YUSHAN_OFFSET_INTR_DISABLE					0x10
-#define YUSHAN_OFFSET_INTR_ENABLE					0x14
-
-#define DXO_DOP_BASE_ADDR							0x8000
-#define DXO_DPP_BASE_ADDR							0x10000
-#define DXO_PDP_BASE_ADDR							0x6000
-
-
-#define DFT_RESET									1
-#define T1_DMA										2
-#define CSI2_RX										3
-#define IT_POINT									4
-#define IDP_GEN										5
-#define MIPI_RX_DTCHK								6
-#define SMIA_PATTERN_GEN							7
-#define SMIA_DCPX									8
-#define P2W_FIFO_WR									9
-#define P2W_FIFO_RD									10
-#define CSI2_TX_WRAPPER								11
-#define CSI2_TX										12
-#define LINE_FILTER_BYPASS							13
-#define DT_FILTER_BYPASS							14
-#define LINE_FILTER_DXO								15
-#define DT_FILTER_DXO								16
-#define EOF_RESIZE_PRE_DXO							17
-#define LBE_PRE_DXO									18
-#define EOF_RESIZE_POST_DXO							19
-#define LECCI_RESET									20
-#define LBE_POST_DXO								21
-
-#define TOTAL_MODULES								21
-
-
-
-#define EVENT_CSI2RX_ECC_ERR						1
-#define EVENT_CSI2RX_CHKSUM_ERR						2
-#define EVENT_CSI2RX_SHORTPACKET					3
-#define EVENT_CSI2RX_SYNCPULSE_MISSED				4
-
-#define EVENT_PDP_BOOT							    5
-#define EVENT_PDP_EOF_EXECCMD				  		6
-#define EVENT_DXOPDP_EOP						  	7
-#define EVENT_DXOPDP_NEWFRAMECMD_ACK				8
-#define EVENT_DXOPDP_NEWFRAMEPROC_ACK				9
-#define EVENT_DXOPDP_NEWFRAME_ERR					10
-	
-#define EVENT_DPP_BOOT							  	11
-#define EVENT_DPP_EOF_EXECCMD						12
-#define EVENT_DXODPP_EOP							13
-#define EVENT_DXODPP_NEWFRAMECMD_ACK				14
-#define EVENT_DXODPP_NEWFRAMEPROC_ACK				15
-#define EVENT_DXODPP_NEWFRAME_ERR					16
-
-#define EVENT_DOP7_BOOT							  	17
-#define EVENT_DOP7_EOF_EXECCMD						18
-#define EVENT_DXODOP7_EOP						  	19
-#define EVENT_DXODOP7_NEWFRAMECMD_ACK				20
-#define EVENT_DXODOP7_NEWFRAMEPROC_ACK				21
-#define EVENT_DXODOP7_NEWFRAME_ERR					22
-
-#define EVENT_CSI2TX_SP_ERR							23
-#define EVENT_CSI2TX_LP_ERR							24
-#define EVENT_CSI2TX_DATAINDEX_ERR					25
-#define EVENT_CSI2TX_FRAMEFINISH					26
-#define	EVENT_RX_PHY_ERR_SOT_SOFT_DL4				27
-#define	EVENT_RX_PHY_ERR_SOT_HARD_DL4				28
-#define	EVENT_RX_PHY_ERR_EOT_DL4					29
-#define	EVENT_RX_PHY_ERR_ESC_DL4					30
-#define	EVENT_RX_PHY_ERR_CTRL_DL4					31
-#define	EVENT_RX_PHY_ULPM_EXIT_DL4					32
-#define	EVENT_RX_PHY_ULPM_ENTER_DL4					33
-
-#define	EVENT_RESERVED								34
-
-#define	EVENT_RX_PHY_ERR_SOT_SOFT_DL3				35
-#define	EVENT_RX_PHY_ERR_SOT_HARD_DL3				36
-#define	EVENT_RX_PHY_ERR_EOT_DL3					37
-#define	EVENT_RX_PHY_ERR_ESC_DL3					38
-#define	EVENT_RX_PHY_ERR_CTRL_DL3					39
-#define	EVENT_RX_PHY_ULPM_EXIT_DL3					40
-#define	EVENT_RX_PHY_ULPM_ENTER_DL3					41
-
-#define	EVENT_RESERVED2								42
-
-#define	EVENT_RX_PHY_ERR_SOT_SOFT_DL2				43
-#define	EVENT_RX_PHY_ERR_SOT_HARD_DL2				44
-#define	EVENT_RX_PHY_ERR_EOT_DL2					45
-#define	EVENT_RX_PHY_ERR_ESC_DL2					46
-#define	EVENT_RX_PHY_ERR_CTRL_DL2					47
-#define	EVENT_RX_PHY_ULPM_EXIT_DL2					48
-#define	EVENT_RX_PHY_ULPM_ENTER_DL2					49
-
-#define	EVENT_RX_PHY_ULPM_EXIT_CLK					50
-
-#define	EVENT_RX_PHY_ERR_SOT_SOFT_DL1				51
-#define	EVENT_RX_PHY_ERR_SOT_HARD_DL1				52
-#define	EVENT_RX_PHY_ERR_EOT_DL1					53
-#define	EVENT_RX_PHY_ERR_ESC_DL1					54
-#define	EVENT_RX_PHY_ERR_CTRL_DL1					55
-#define	EVENT_RX_PHY_ULPM_EXIT_DL1					56
-#define	EVENT_RX_PHY_ULPM_ENTER_DL1					57
-
-#define	EVENT_RX_PHY_ULPM_ENTER_CLK					58
-#define EVENT_TXPHY_CTRL_ERR_D1						59
-#define EVENT_TXPHY_CTRL_ERR_D2						60
-#define EVENT_TXPHY_CTRL_ERR_D3						61
-#define EVENT_TXPHY_CTRL_ERR_D4						62
-
-#define EVENT_UNMATCHED_IMAGE_SIZE_ERROR			63
-#define	EVENT_UNMANAGED_DATA_TYPE					64
-#define	PRE_DXO_WRAPPER_PROTOCOL_ERR				65
-#define	PRE_DXO_WRAPPER_FIFO_OVERFLOW				66
-#define EVENT_BAD_FRAME_DETECTION					67
-#define EVENT_TX_DATA_FIFO_OVERFLOW					68
-#define EVENT_TX_INDEX_FIFO_OVERFLOW				69
-#define EVENT_RX_CHAR_COLOR_BAR_0_ERR				70
-#define EVENT_RX_CHAR_COLOR_BAR_1_ERR				71
-#define EVENT_RX_CHAR_COLOR_BAR_2_ERR				72
-#define EVENT_RX_CHAR_COLOR_BAR_3_ERR				73
-#define EVENT_RX_CHAR_COLOR_BAR_4_ERR				74
-#define EVENT_RX_CHAR_COLOR_BAR_5_ERR				75
-#define EVENT_RX_CHAR_COLOR_BAR_6_ERR				76
-#define EVENT_RX_CHAR_COLOR_BAR_7_ERR				77
-#define	EVENT_POST_DXO_WRAPPER_PROTOCOL_ERR			78
-#define	EVENT_POST_DXO_WRAPPER_FIFO_OVERFLOW		79
-#define EVENT_LINESIZE_REPROGRAM_DONE				80
-#define EVENT_PLL_STABLE							81
-#define EVENT_LDO_STABLE							82
-#define EVENT_LINE_POSITION_INTR					83	
-#define EVENT_TX_DATA_UNDERFLOW						84	
-#define EVENT_TX_INDEX_UNDERFLOW					85	
-
-#define EVENT_FIRST_INDEXFORSET {EVENT_CSI2RX_ECC_ERR, EVENT_PDP_BOOT, EVENT_DPP_BOOT, EVENT_DOP7_BOOT, EVENT_CSI2TX_SP_ERR, EVENT_RX_PHY_ERR_SOT_SOFT_DL4, EVENT_TXPHY_CTRL_ERR_D1, EVENT_UNMATCHED_IMAGE_SIZE_ERROR, EVENT_RX_CHAR_COLOR_BAR_0_ERR, EVENT_POST_DXO_WRAPPER_PROTOCOL_ERR, EVENT_LINESIZE_REPROGRAM_DONE, EVENT_LINE_POSITION_INTR, EVENT_TX_DATA_UNDERFLOW, TOTAL_INTERRUPT_COUNT+1}
-
-
-
-#define TIME_5MS				1
-#define TIME_10MS				2
-#define TIME_20MS				3
-#define TIME_50MS				4
-#define TIME_100MS				5
-
-
-#define YUSHAN_FRAME_FORMAT_NORMAL_MODE		0	
-#define YUSHAN_FRAME_FORMAT_VF_MODE			1
-#define YUSHAN_FRAME_FORMAT_STILL_MODE		2
-
-#define DXO_BOOT_CMD			1
-
-
-#define RESET_MODULE						1
-#define	DERESET_MODULE						0
-
-
-extern bool_t			gPllLocked;
-
-
-
-typedef enum {
-	DXO_NO_ERR=100,
-	DXO_LINEBLANK_ERR,
-	DXO_FULLLINE_ERR, 
-	DXO_ACTIVE_FRAMELENGTH_ERR, 
-	DXO_FULLFRAMELENGTH_ERR, 
-	DXO_FRAMEBLANKING_ERR,
-	
-	DXO_LOLIMIT_EXCEED_HILIMIT  = 200
-}Yushan_DXO_Errors_e;
-
-
-
-
-
-
-
-
-typedef struct {
-	uint16_t 	uwWordcount; 
-	
-	
-	uint8_t 	bDatatype;
-	
-	uint8_t 	bActiveDatatype;
-	
-	
-	uint8_t 	bSelectStillVfMode;
-	
-	
-	
-	
-	
-	
-	
-} Yushan_Frame_Format_t;
-
-
-
-
-typedef	struct {
-	
-	
-	uint8_t 	bNumberOfLanes;
-	
-	
-	
-	
-	uint16_t 	uwPixelFormat;
-	
-	uint16_t 	uwBitRate; 
-	
-	uint32_t 	fpExternalClock; 
-	uint32_t	fpSpiClock;
-	
-	uint16_t	uwActivePixels;
-	
-	uint16_t	uwLineBlankVf;
-	
-	uint16_t	uwLineBlankStill;
-	
-	uint16_t	uwLines;
-	
-	uint16_t	uwFrameBlank;
-	
-	
-	
-	
-	
-	uint8_t		bValidWCEntries; 
-	Yushan_Frame_Format_t sFrameFormat[15];
-	
-	uint8_t		bDxoSettingCmdPerFrame;
-	
-	bool_t		bUseExternalLDO;
-	
-	
-}Yushan_Init_Struct_t;
-
-
-typedef struct {
-	
-	uint16_t	uwActivePixels;			
-	
-	uint16_t	uwLineBlank;
-	
-	uint16_t	uwActiveFrameLength;	
-	
-	uint8_t		bSelectStillVfMode;
-	
-	uint16_t	uwPixelFormat;
-
-}Yushan_New_Context_Config_t;
-
-
-
-typedef	struct {
-	uint8_t 	*pDxoPdpRamImage[2];
-	
-	uint16_t	uwDxoPdpStartAddr;
-	
-	uint16_t	uwDxoPdpBootAddr;
-	// IP Boot address, where first add of Microcode has to be written
-	uint16_t 	uwDxoPdpRamImageSize[2];
-	
-	uint16_t	uwBaseAddrPdpMicroCode[2];
-	
-	uint8_t 	*pDxoDppRamImage[2];
-	
-	uint16_t	uwDxoDppStartAddr;
-	
-	uint16_t	uwDxoDppBootAddr;
-	// IP Boot address, where first add of Microcode has to be written
-	uint16_t 	uwDxoDppRamImageSize[2];
-	
-	uint16_t	uwBaseAddrDppMicroCode[2];
-	
-	uint8_t 	*pDxoDopRamImage[2];
-	
-	uint16_t	uwDxoDopStartAddr;
-	
-	uint16_t	uwDxoDopBootAddr;
-	// IP Boot address, where first add of Microcode has to be written
-	uint16_t 	uwDxoDopRamImageSize[2];
-	
-	uint16_t	uwBaseAddrDopMicroCode[2];
-	
-} Yushan_Init_Dxo_Struct_t;
-
-
-
-typedef struct {
-	
-	uint8_t		bDxoConstraints;
-	
-	uint32_t	udwDxoConstraintsMinValue;
-	
-	
-	
-
-}Yushan_SystemStatus_t;
-
-
-
-
-typedef	struct {
-	uint8_t 	bImageOrientation;
-	uint16_t 	uwXAddrStart;
-	uint16_t 	uwYAddrStart;
-	uint16_t 	uwXAddrEnd;
-	uint16_t 	uwYAddrEnd;
-	uint16_t 	uwXEvenInc;  
-	uint16_t 	uwXOddInc;
-	uint16_t 	uwYEvenInc;  
-	uint16_t 	uwYOddInc;
-	uint8_t 	bBinning;    
-}Yushan_ImageChar_t;
-
-
-typedef	struct {
-	uint16_t 	uwAnalogGainCodeGR;
-	uint16_t 	uwAnalogGainCodeR;
-	uint16_t 	uwAnalogGainCodeB;
-	uint16_t 	uwPreDigGainGR;
-	uint16_t 	uwPreDigGainR;
-	uint16_t 	uwPreDigGainB;
-	uint16_t 	uwExposureTime;    
-	uint8_t	bRedGreenRatio;
-	uint8_t	bBlueGreenRatio; 
-}Yushan_GainsExpTime_t;
-
-
-
-typedef	struct {
-	
-	uint8_t 	bTemporalSmoothing;   
-	uint16_t 	uwFlashPreflashRating;
-	uint8_t 	bFocalInfo;
-}Yushan_DXO_DPP_Tuning_t;
-
-
-
-typedef	struct {
-	
-	
-	uint8_t 	bEstimationMode;
-	uint8_t 	bSharpness;
-	uint8_t 	bDenoisingLowGain;
-	uint8_t 	bDenoisingMedGain;
-	uint8_t 	bDenoisingHiGain;
-	uint8_t 	bNoiseVsDetailsLowGain;
-	uint8_t 	bNoiseVsDetailsMedGain;
-	uint8_t 	bNoiseVsDetailsHiGain;
-	uint8_t 	bTemporalSmoothing;    
-}Yushan_DXO_DOP_Tuning_t;
-
-
-
-typedef	struct {
-	uint8_t 	bDeadPixelCorrectionLowGain;
-	uint8_t 	bDeadPixelCorrectionMedGain;
-	uint8_t 	bDeadPixelCorrectionHiGain;
-}Yushan_DXO_PDP_Tuning_t;
-
-
-
-
-typedef struct {
-	uint8_t		bDxoDopRoiActiveNumber;
-}Yushan_DXO_ROI_Active_Number_t;
-
-
-
-typedef	struct {
-	uint8_t 	bXStart;
-	uint8_t 	bYStart;
-	uint8_t 	bXEnd;
-	uint8_t 	bYEnd;
-}Yushan_AF_ROI_t;
-
-typedef struct {
-	uint32_t 	udwAfStatsGreen;
-	uint32_t 	udwAfStatsRed;
-	uint32_t 	udwAfStatsBlue;
-	uint32_t 	udwAfStatsConfidence;
-}Yushan_AF_Stats_t;
-
-
-
-typedef struct {
-	uint32_t 	udwDopVersion;
-	uint32_t 	udwDppVersion;
-	uint32_t 	udwPdpVersion;
-	uint32_t 	udwDopCalibrationVersion;
-	uint32_t 	udwDppCalibrationVersion;
-	uint32_t 	udwPdpCalibrationVersion;
-	uint8_t 	bApiMajorVersion;
-	uint8_t 	bApiMinorVersion;
-}Yushan_Version_Info_t;
-
-
-
-#define Yushan_DXO_Sync_Reset_Dereset(bFlagResetOrDereset) 	SPI_Write(YUSHAN_RESET_CTRL+3, 1, &bFlagResetOrDereset)
-
-#ifdef WIN32
-bool_t	SPI_Read( uint16_t uwIndex , uint16_t uwCount , uint8_t * pData);
-bool_t	SPI_Write( uint16_t uwIndex , uint16_t uwCount , uint8_t * pData);
-#endif
-
-
-
-
-
-
-
-
-bool_t	Yushan_Init_LDO(bool_t	bUseExternalLDO);
-bool_t	Yushan_Init_Clocks(Yushan_Init_Struct_t *sInitStruct, Yushan_SystemStatus_t *sSystemStatus, uint32_t *udwIntrMask);
-bool_t	Yushan_Init(Yushan_Init_Struct_t * sInitStruct);
-bool_t	Yushan_Init_Dxo(Yushan_Init_Dxo_Struct_t * sDxoStruct, bool_t fBypassDxoUpload);
-
-bool_t	Yushan_Update_ImageChar(Yushan_ImageChar_t * sImageChar);
-bool_t	Yushan_Update_SensorParameters(Yushan_GainsExpTime_t * sGainsExpInfo);
-bool_t Yushan_Update_DxoPdp_TuningParameters(Yushan_DXO_PDP_Tuning_t * sDxoPdpTuning);
-bool_t	Yushan_Update_DxoDpp_TuningParameters(Yushan_DXO_DPP_Tuning_t * sDxoDppTuning);
-bool_t	Yushan_Update_DxoDop_TuningParameters(Yushan_DXO_DOP_Tuning_t * sDxoDopTuning);
-bool_t	Yushan_Update_Commit(uint8_t  bPdpMode, uint8_t  bDppMode, uint8_t  bDopMode);
-
-
-
-
-void	Yushan_AssignInterruptGroupsToPad1(uint16_t	uwAssignITRGrpToPad1);
-bool_t	Yushan_Intr_Enable(uint8_t *pIntrMask);
-void	Yushan_Intr_Status_Read (uint8_t *bListOfInterrupts, bool_t	fSelect_Intr_Pad);
-void	Yushan_Read_IntrEvent(uint8_t bIntrSetID, uint32_t *udwListOfInterrupts);
-bool_t	Yushan_Intr_Status_Clear(uint8_t *bListOfInterrupts);
-bool_t	Yushan_Check_Pad_For_IntrID(uint8_t	bInterruptId);
-void	Yushan_AddnRemoveIDInList(uint8_t bInterruptID, uint32_t *udwListOfInterrupts, bool_t fAddORClear);
-bool_t	Yushan_CheckForInterruptIDInList(uint8_t bInterruptID, uint32_t *udwProtoInterruptList);
-
-
-
-bool_t Yushan_Get_Version_Information(Yushan_Version_Info_t * sYushanVersionInfo );
-
-
-
-bool_t Yushan_Context_Config_Update(Yushan_New_Context_Config_t	*sYushanNewContextConfig);
-
-uint8_t Yushan_GetCurrentStreamingMode(void);
-bool_t	Yushan_Swap_Rx_Pins(bool_t fClkLane, bool_t fDataLane1, bool_t fDataLane2, bool_t fDataLane3, bool_t fDataLane4);
-bool_t	Yushan_Invert_Rx_Pins(bool_t fClkLane, bool_t fDataLane1, bool_t fDataLane2, bool_t fDataLane3, bool_t fDataLane4);
-bool_t	Yushan_Enter_Standby_Mode(void);
-bool_t	Yushan_Exit_Standby_Mode(Yushan_Init_Struct_t *sInitStruct);
-bool_t	Yushan_Assert_Reset(uint32_t bModuleMask, uint8_t bResetORDeReset);
-bool_t  Yushan_Update_DxoDop_Af_Strategy(uint8_t  bAfStrategy);
-bool_t	Yushan_AF_ROI_Update(Yushan_AF_ROI_t  *sYushanAfRoi, uint8_t bNumOfActiveRoi);
-bool_t	Yushan_PatternGenerator(Yushan_Init_Struct_t *sInitStruct, uint8_t	bPatternReq, bool_t	bDxoBypassForTestPattern);
-void	Yushan_DCPX_CPX_Enable(void);
-
-
-bool_t		Yushan_CheckDxoConstraints(uint32_t udwParameters, uint32_t udwMinLimit, uint32_t fpDxo_Clk, uint32_t fpPixel_Clk, uint16_t uwFullLine, uint32_t * pMinValue);
-uint32_t	Yushan_Compute_Pll_Divs(uint32_t fpExternal_Clk, uint32_t fpTarget_PllClk);
-uint32_t	Yushan_ConvertTo16p16FP(uint16_t);
-
-
-bool_t Yushan_Read_AF_Statistics(Yushan_AF_Stats_t* sYushanAFStats, uint8_t	bNumOfActiveRoi, uint16_t *frameIdx);
-
-
-void	Yushan_DXO_DTFilter_Bypass(void);
-void	Yushan_DXO_Lecci_Bypass(void);
-
-void	Yushan_Status_Snapshot(void);
-
-#ifdef __cplusplus
-}
-#endif   
-
-
-#endif 
diff --git a/drivers/media/video/msm/rawchip/Yushan_HTC_Functions.c b/drivers/media/video/msm/rawchip/Yushan_HTC_Functions.c
deleted file mode 100644
index dca737b..0000000
--- a/drivers/media/video/msm/rawchip/Yushan_HTC_Functions.c
+++ /dev/null
@@ -1,2094 +0,0 @@
-#include "yushan_registermap.h"
-#include "DxODOP_regMap.h"
-#include "DxODPP_regMap.h"
-#include "DxOPDP_regMap.h"
-#include "Yushan_HTC_Functions.h"
-
-#include <mach/board.h>
-
-#ifdef YUSHAN_HTC_FUNCTIONS_DEBUG
-#define CDBG(fmt, args...) pr_debug(fmt, ##args)
-#else
-#define CDBG(fmt, args...) do { } while (0)
-#endif
-
-Yushan_ImageChar_t	sImageChar_context;
-struct yushan_reg_t *p_yushan_regs;
-
-#define PDP_enable 0x01
-#define black_level_enable 0x01
-#define dead_pixel_enable 0x01
-#define DOP_enable 0x01
-#define denoise_enable 0x01
-#define DPP_enable 0x01
-
-uint8_t bPdpMode = PDP_enable ? (0x01|(((~black_level_enable)&0x01)<<3)|(((~dead_pixel_enable)&0x01)<<4)) : 0;
-uint8_t bDppMode = DPP_enable ? 0x03 : 0;
-uint8_t bDopMode = DOP_enable ? (0x01|(((~denoise_enable)&0x01)<<4)) : 0;
-
-void YushanPrintDxODOPAfStrategy(void)
-{
-	uint8_t val ;
-	SPI_Read((DXO_DOP_BASE_ADDR+0x02a4) , 1, (uint8_t *)(&val));
-	pr_info("[CAM] prcDxO YushanReadDxODOPAfStrategy:0x%02x", val);
-}
-
-void YushanPrintFrameNumber(void)
-{
-	uint16_t val ;
-	SPI_Read((0x82a2) , 2, (uint8_t *)(&val));
-	pr_info("[CAM] prcDxO YushanReadFrameNumber:%d", val);
-}
-
-void YushanPrintVisibleLineSizeAndRoi(void)
-{
-	uint16_t val ;
-	uint8_t  xRoiStart;
-	uint8_t  yRoiStart;
-	uint8_t  xRoiEnd;
-	uint8_t  yRoiEnd;
-
-	SPI_Read((DxOPDP_visible_line_size_7_0 + 0x8000) , 2, (uint8_t *)(&val));
-	pr_info("[CAM] prcDxO YushanPrintVisibleLineSizeAndRoi:%d", val);
-
-	SPI_Read((DxODOP_ROI_0_x_start_7_0 + DXO_DOP_BASE_ADDR) , 1, (uint8_t *)(&xRoiStart));
-	SPI_Read((DxODOP_ROI_0_y_start_7_0 + DXO_DOP_BASE_ADDR) , 1, (uint8_t *)(&yRoiStart));
-	SPI_Read((DxODOP_ROI_0_x_end_7_0 + DXO_DOP_BASE_ADDR) , 1, (uint8_t *)(&xRoiEnd));
-	SPI_Read((DxODOP_ROI_0_y_end_7_0 + DXO_DOP_BASE_ADDR) , 1, (uint8_t *)(&yRoiEnd));
-	pr_info("[CAM] prcDxO ROI [ %d %d | %d %d ]\n",xRoiStart,xRoiEnd,yRoiStart,yRoiEnd);
-}
-
-void YushanPrintImageInformation(void)
-{
-	static uint16_t xStart_prev = -1;
-	static uint16_t xEnd_prev = -1;
-	static uint16_t yStart_prev = -1;
-	static uint16_t yEnd_prev = -1;
-	static uint16_t xOddInc_prev = -1;
-	static uint16_t yOddInc_prev = -1;
-	uint16_t xStart_new ;
-	uint16_t xEnd_new ;
-	uint16_t yStart_new ;
-	uint16_t yEnd_new ;
-	uint16_t xOddInc_new ;
-	uint16_t yOddInc_new ;
-
-
-	SPI_Read((DxOPDP_x_addr_start_7_0 + 0x8000) , 2, (uint8_t *)(&xStart_new));
-	SPI_Read((DxOPDP_y_addr_start_7_0 + 0x8000) , 2, (uint8_t *)(&yStart_new));
-	SPI_Read((DxOPDP_x_addr_end_7_0 + 0x8000) , 2, (uint8_t *)(&xEnd_new));
-	SPI_Read((DxOPDP_y_addr_end_7_0 + 0x8000) , 2, (uint8_t *)(&yEnd_new));
-	SPI_Read((DxOPDP_x_odd_inc_7_0 + 0x8000) , 2, (uint8_t *)(&xOddInc_new));
-	SPI_Read((DxOPDP_y_odd_inc_7_0 + 0x8000) , 2, (uint8_t *)(&yOddInc_new));
-
-	if ((xStart_prev!=xStart_new)
-		||	(yStart_prev!=yStart_new)
-		||	(xEnd_prev!=xEnd_new)
-		||	(yEnd_prev!=yEnd_new)
-		||	(xOddInc_prev!=xOddInc_new)
-		||	(yOddInc_prev!=yOddInc_new) ) {
-			pr_err("[CAM] prcDxO DxOPDP_x_addr_start: %d", xStart_new);
-			pr_err("[CAM] prcDxO DxOPDP_x_addr_end: %d", xEnd_new);
-			pr_err("[CAM] prcDxO DxOPDP_y_addr_start: %d", yStart_new);
-			pr_err("[CAM] prcDxO DxOPDP_y_addr_end: %d", yEnd_new);
-			pr_err("[CAM] prcDxO DxOPDP_x_odd_inc: %d", xOddInc_new);
-			pr_err("[CAM] prcDxO DxOPDP_y_odd_inc: %d", yOddInc_new);
-		}
-	xStart_prev = xStart_new;
-	xEnd_prev = xEnd_new ;
-	yStart_prev = yStart_new ;
-	yEnd_prev = yEnd_new ;
-	xOddInc_prev = xOddInc_new ;
-	yOddInc_prev = yOddInc_new ;
-
-
-}
-
-void Reset_Yushan(void)
-{
-	uint8_t	bSpiData;
-	Yushan_Init_Dxo_Struct_t	sDxoStruct;
-	sDxoStruct.pDxoPdpRamImage[0] = (uint8_t *)p_yushan_regs->pdpcode;
-	sDxoStruct.pDxoDppRamImage[0] = (uint8_t *)p_yushan_regs->dppcode;
-	sDxoStruct.pDxoDopRamImage[0] = (uint8_t *)p_yushan_regs->dopcode;
-	sDxoStruct.pDxoPdpRamImage[1] = (uint8_t *)p_yushan_regs->pdpclib;
-	sDxoStruct.pDxoDppRamImage[1] = (uint8_t *)p_yushan_regs->dppclib;
-	sDxoStruct.pDxoDopRamImage[1] = (uint8_t *)p_yushan_regs->dopclib;
-
-	sDxoStruct.uwDxoPdpRamImageSize[0] = p_yushan_regs->pdpcode_size;
-	sDxoStruct.uwDxoDppRamImageSize[0] = p_yushan_regs->dppcode_size;
-	sDxoStruct.uwDxoDopRamImageSize[0] = p_yushan_regs->dopcode_size;
-	sDxoStruct.uwDxoPdpRamImageSize[1] = p_yushan_regs->pdpclib_size;
-	sDxoStruct.uwDxoDppRamImageSize[1] = p_yushan_regs->dppclib_size;
-	sDxoStruct.uwDxoDopRamImageSize[1] = p_yushan_regs->dopclib_size;
-
-	sDxoStruct.uwBaseAddrPdpMicroCode[0] = p_yushan_regs->pdpcode_first_addr;
-	sDxoStruct.uwBaseAddrDppMicroCode[0] = p_yushan_regs->dppcode_first_addr;
-	sDxoStruct.uwBaseAddrDopMicroCode[0] = p_yushan_regs->dopcode_first_addr;
-	sDxoStruct.uwBaseAddrPdpMicroCode[1] = p_yushan_regs->pdpclib_first_addr;
-	sDxoStruct.uwBaseAddrDppMicroCode[1] = p_yushan_regs->dppclib_first_addr;
-	sDxoStruct.uwBaseAddrDopMicroCode[1] = p_yushan_regs->dopclib_first_addr;
-
-	sDxoStruct.uwDxoPdpBootAddr = p_yushan_regs->pdpBootAddr;
-	sDxoStruct.uwDxoDppBootAddr = p_yushan_regs->dppBootAddr;
-	sDxoStruct.uwDxoDopBootAddr = p_yushan_regs->dopBootAddr;
-
-	sDxoStruct.uwDxoPdpStartAddr = p_yushan_regs->pdpStartAddr;
-	sDxoStruct.uwDxoDppStartAddr = p_yushan_regs->dppStartAddr;
-	sDxoStruct.uwDxoDopStartAddr = p_yushan_regs->dopStartAddr;
-
-	pr_err("[CAM] %s\n",__func__);
-	
-	Yushan_Assert_Reset(0x001F0F10, RESET_MODULE);
-	bSpiData =1;
-	Yushan_DXO_Sync_Reset_Dereset(bSpiData);
-	Yushan_Assert_Reset(0x001F0F10, DERESET_MODULE);
-	bSpiData = 0;
-	Yushan_DXO_Sync_Reset_Dereset(bSpiData);
-	Yushan_Init_Dxo(&sDxoStruct, 1);
-	msleep(10);
-	
-	
-	
-}
-
-void ASIC_Test(void)
-{
-	pr_info("[CAM] ASIC_Test E\n");
-	mdelay(10);
-	
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x000c, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x000d, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x000c, 0x3f); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x000d, 0x07); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x000f, 0x00); 
-	mdelay(10);
-
-	
-	rawchip_spi_write_2B1B(0x1405, 0x03);
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x1405, 0x02);
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x1405, 0x00);
-
-	
-	
-	rawchip_spi_write_2B1B(0x0015, 0x19); 
-	rawchip_spi_write_2B1B(0x0014, 0x03); 
-
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x0000, 0x0a); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x0001, 0x0a); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x0002, 0x14); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x0010, 0x18); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x0009, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x1000, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2000, 0xff); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2004, 0x06); 
-	mdelay(10);
-	
-	mdelay(10);
-	
-	rawchip_spi_write_2B1B(0x5004, 0x14); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2408, 0x04); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x240c, 0x0a); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2420, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2428, 0x2b); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4400, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4404, 0x0a); 
-	mdelay(10);
-
-	
-	rawchip_spi_write_2B1B(0x4a05, 0x04); 
-
-	
-	rawchip_spi_write_2B1B(0x2c09, 0x10); 
-
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c0c, 0xd0); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c0d, 0x0c); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c0e, 0xa0); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c0f, 0x0f); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c10, 0xa0); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c11, 0x09); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c12, 0xf0); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c13, 0xff); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x3400, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x3401, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x3402, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x3403, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x3408, 0x02); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x3409, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x340a, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x340b, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5880, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5888, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4400, 0x11); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4408, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x440c, 0x03); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c00, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c08, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c10, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c4c, 0x14); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c4d, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c50, 0x2b); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c51, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c5c, 0x2b); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c5d, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c58, 0x04); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x4c59, 0x10); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5828, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x582c, 0x02); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5830, 0x0d); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5834, 0x03); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5820, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5868, 0xff); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x586c, 0xff); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5870, 0xff); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5874, 0xff); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5860, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5c08, 0x94); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5c09, 0x02); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5c0c, 0xfc); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5c10, 0x90); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5c11, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5c14, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x5c00, 0x01); 
-	mdelay(10);
-
-	
-	rawchip_spi_write_2B1B(0x5000, 0x33); 
-	mdelay(100);
-
-	rawchip_spi_write_2B1B(0x2c00, 0x01); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c01, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c02, 0x00); 
-	mdelay(10);
-	rawchip_spi_write_2B1B(0x2c03, 0x00); 
-	msleep(2000);
-
-	pr_info("[CAM] ASIC_Test X\n");
-}
-
-#define DxO
-int Yushan_sensor_open_init(struct rawchip_sensor_init_data data)
-{
-	
-#ifdef COLOR_BAR
-	 int32_t rc = 0;
-	ASIC_Test();
-	
-#else
-	
-	
-
-	bool_t	bBypassDxoUpload = 0;
-	Yushan_Version_Info_t sYushanVersionInfo;
-
-	uint8_t			bPixelFormat = RAW10;
-	
-	
-	Yushan_Init_Struct_t	sInitStruct;
-	Yushan_Init_Dxo_Struct_t	sDxoStruct;
-	Yushan_GainsExpTime_t sGainsExpTime;
-	Yushan_DXO_DPP_Tuning_t sDxoDppTuning;
-	Yushan_DXO_PDP_Tuning_t sDxoPdpTuning;
-	Yushan_DXO_DOP_Tuning_t sDxoDopTuning;
-	Yushan_SystemStatus_t			sSystemStatus;
-	uint32_t		udwIntrMask[] = {0x3DE38E3B, 0xFC3C3C3C, 0x001B7FFB};	
-	uint16_t		uwAssignITRGrpToPad1 = 0x008; 
-
-#if 0
-	Yushan_AF_ROI_t					sYushanAfRoi[5];
-	Yushan_DXO_ROI_Active_Number_t	sYushanDxoRoiActiveNumber;
-	Yushan_AF_Stats_t				sYushanAFStats[5];
-	Yushan_New_Context_Config_t		sYushanNewContextConfig;
-#endif
-	
-	uint8_t bStatus;
-	
-
-	uint16_t uwHSize = data.width;
-	uint16_t uwVSize = data.height;
-	uint16_t uwBlkPixels = data.blk_pixels;
-	uint16_t uwBlkLines = data.blk_lines;
-
- #endif
-
-	CDBG("[CAM] Yushan API Version : %d.%d \n", API_MAJOR_VERSION, API_MINOR_VERSION);
-
-#ifndef COLOR_BAR
-	
-	sInitStruct.bNumberOfLanes		=	data.lane_cnt;
-	sInitStruct.fpExternalClock		=	data.ext_clk;
-	sInitStruct.uwBitRate			=	data.bitrate;
-	sInitStruct.uwPixelFormat = 0x0A0A;
-	
-	sInitStruct.bDxoSettingCmdPerFrame	=	1;
-
-	if ((sInitStruct.uwPixelFormat&0x0F) == 0x0A)
-		bPixelFormat = RAW10;
-	else if ((sInitStruct.uwPixelFormat&0x0F) == 0x08) {
-		if (((sInitStruct.uwPixelFormat>>8)&0x0F) == 0x08)
-			bPixelFormat = RAW8;
-		else 
-			bPixelFormat = RAW10_8;
-	}
-#endif
-
-#ifndef COLOR_BAR
-
-	p_yushan_regs = &yushan_regs;
-	if (1) {
-		pr_info("[CAM] Load R2 u_code data\n");
-		p_yushan_regs->pdpcode_first_addr = yushan_u_code_r2.pdpcode_first_addr;
-		p_yushan_regs->pdpcode = yushan_u_code_r2.pdpcode;
-		p_yushan_regs->pdpcode_size = yushan_u_code_r2.pdpcode_size;
-		p_yushan_regs->pdpBootAddr = yushan_u_code_r2.pdpBootAddr;
-		p_yushan_regs->pdpStartAddr = yushan_u_code_r2.pdpStartAddr;
-
-		p_yushan_regs->dppcode_first_addr = yushan_u_code_r2.dppcode_first_addr;
-		p_yushan_regs->dppcode = yushan_u_code_r2.dppcode;
-		p_yushan_regs->dppcode_size = yushan_u_code_r2.dppcode_size;
-		p_yushan_regs->dppBootAddr = yushan_u_code_r2.dppBootAddr;
-		p_yushan_regs->dppStartAddr = yushan_u_code_r2.dppStartAddr;
-
-		p_yushan_regs->dopcode_first_addr = yushan_u_code_r2.dopcode_first_addr;
-		p_yushan_regs->dopcode = yushan_u_code_r2.dopcode;
-		p_yushan_regs->dopcode_size = yushan_u_code_r2.dopcode_size;
-		p_yushan_regs->dopBootAddr = yushan_u_code_r2.dopBootAddr;
-		p_yushan_regs->dopStartAddr = yushan_u_code_r2.dopStartAddr;
-	} else {
-		pr_info("[CAM] Load R3 u_code data\n");
-		p_yushan_regs->pdpcode_first_addr = yushan_u_code_r3.pdpcode_first_addr;
-		p_yushan_regs->pdpcode = yushan_u_code_r3.pdpcode;
-		p_yushan_regs->pdpcode_size = yushan_u_code_r3.pdpcode_size;
-		p_yushan_regs->pdpBootAddr = yushan_u_code_r3.pdpBootAddr;
-		p_yushan_regs->pdpStartAddr = yushan_u_code_r3.pdpStartAddr;
-
-		p_yushan_regs->dppcode_first_addr = yushan_u_code_r3.dppcode_first_addr;
-		p_yushan_regs->dppcode = yushan_u_code_r3.dppcode;
-		p_yushan_regs->dppcode_size = yushan_u_code_r3.dppcode_size;
-		p_yushan_regs->dppBootAddr = yushan_u_code_r3.dppBootAddr;
-		p_yushan_regs->dppStartAddr = yushan_u_code_r3.dppStartAddr;
-
-		p_yushan_regs->dopcode_first_addr = yushan_u_code_r3.dopcode_first_addr;
-		p_yushan_regs->dopcode = yushan_u_code_r3.dopcode;
-		p_yushan_regs->dopcode_size = yushan_u_code_r3.dopcode_size;
-		p_yushan_regs->dopBootAddr = yushan_u_code_r3.dopBootAddr;
-		p_yushan_regs->dopStartAddr = yushan_u_code_r3.dopStartAddr;
-	}
-	
-	if (strcmp(data.sensor_name, "s5k3h2yx") == 0) {
-		p_yushan_regs->pdpclib = yushan_regs_clib_s5k3h2yx.pdpclib;
-		p_yushan_regs->dppclib = yushan_regs_clib_s5k3h2yx.dppclib;
-		p_yushan_regs->dopclib = yushan_regs_clib_s5k3h2yx.dopclib;
-		p_yushan_regs->pdpclib_size = yushan_regs_clib_s5k3h2yx.pdpclib_size;
-		p_yushan_regs->dppclib_size = yushan_regs_clib_s5k3h2yx.dppclib_size;
-		p_yushan_regs->dopclib_size = yushan_regs_clib_s5k3h2yx.dopclib_size;
-		p_yushan_regs->pdpclib_first_addr = yushan_regs_clib_s5k3h2yx.pdpclib_first_addr;
-		p_yushan_regs->dppclib_first_addr = yushan_regs_clib_s5k3h2yx.dppclib_first_addr;
-		p_yushan_regs->dopclib_first_addr = yushan_regs_clib_s5k3h2yx.dopclib_first_addr;
-	}
-	else if (strcmp(data.sensor_name, "imx175") == 0) {
-		p_yushan_regs->pdpclib = yushan_regs_clib_imx175.pdpclib;
-		p_yushan_regs->dppclib = yushan_regs_clib_imx175.dppclib;
-		p_yushan_regs->dopclib = yushan_regs_clib_imx175.dopclib;
-		p_yushan_regs->pdpclib_size = yushan_regs_clib_imx175.pdpclib_size;
-		p_yushan_regs->dppclib_size = yushan_regs_clib_imx175.dppclib_size;
-		p_yushan_regs->dopclib_size = yushan_regs_clib_imx175.dopclib_size;
-		p_yushan_regs->pdpclib_first_addr = yushan_regs_clib_imx175.pdpclib_first_addr;
-		p_yushan_regs->dppclib_first_addr = yushan_regs_clib_imx175.dppclib_first_addr;
-		p_yushan_regs->dopclib_first_addr = yushan_regs_clib_imx175.dopclib_first_addr;
-	}
-	else if (strcmp(data.sensor_name, "ov8838") == 0) {
-		p_yushan_regs->pdpclib = yushan_regs_clib_ov8838.pdpclib;
-		p_yushan_regs->dppclib = yushan_regs_clib_ov8838.dppclib;
-		p_yushan_regs->dopclib = yushan_regs_clib_ov8838.dopclib;
-		p_yushan_regs->pdpclib_size = yushan_regs_clib_ov8838.pdpclib_size;
-		p_yushan_regs->dppclib_size = yushan_regs_clib_ov8838.dppclib_size;
-		p_yushan_regs->dopclib_size = yushan_regs_clib_ov8838.dopclib_size;
-		p_yushan_regs->pdpclib_first_addr = yushan_regs_clib_ov8838.pdpclib_first_addr;
-		p_yushan_regs->dppclib_first_addr = yushan_regs_clib_ov8838.dppclib_first_addr;
-		p_yushan_regs->dopclib_first_addr = yushan_regs_clib_ov8838.dopclib_first_addr;
-	}
-	else if (strcmp(data.sensor_name, "ar0260") == 0) {
-		p_yushan_regs->pdpclib = yushan_regs_clib_ar0260.pdpclib;
-		p_yushan_regs->dppclib = yushan_regs_clib_ar0260.dppclib;
-		p_yushan_regs->dopclib = yushan_regs_clib_ar0260.dopclib;
-		p_yushan_regs->pdpclib_size = yushan_regs_clib_ar0260.pdpclib_size;
-		p_yushan_regs->dppclib_size = yushan_regs_clib_ar0260.dppclib_size;
-		p_yushan_regs->dopclib_size = yushan_regs_clib_ar0260.dopclib_size;
-		p_yushan_regs->pdpclib_first_addr = yushan_regs_clib_ar0260.pdpclib_first_addr;
-		p_yushan_regs->dppclib_first_addr = yushan_regs_clib_ar0260.dppclib_first_addr;
-		p_yushan_regs->dopclib_first_addr = yushan_regs_clib_ar0260.dopclib_first_addr;
-	}
-	else if (strcmp(data.sensor_name, "ov2722") == 0) {
-		p_yushan_regs->pdpclib = yushan_regs_clib_ov2722.pdpclib;
-		p_yushan_regs->dppclib = yushan_regs_clib_ov2722.dppclib;
-		p_yushan_regs->dopclib = yushan_regs_clib_ov2722.dopclib;
-		p_yushan_regs->pdpclib_size = yushan_regs_clib_ov2722.pdpclib_size;
-		p_yushan_regs->dppclib_size = yushan_regs_clib_ov2722.dppclib_size;
-		p_yushan_regs->dopclib_size = yushan_regs_clib_ov2722.dopclib_size;
-		p_yushan_regs->pdpclib_first_addr = yushan_regs_clib_ov2722.pdpclib_first_addr;
-		p_yushan_regs->dppclib_first_addr = yushan_regs_clib_ov2722.dppclib_first_addr;
-		p_yushan_regs->dopclib_first_addr = yushan_regs_clib_ov2722.dopclib_first_addr;
-	}
-	else if (strcmp(data.sensor_name, "ov5693") == 0) {
-		p_yushan_regs->pdpclib = yushan_regs_clib_ov5693.pdpclib;
-		p_yushan_regs->dppclib = yushan_regs_clib_ov5693.dppclib;
-		p_yushan_regs->dopclib = yushan_regs_clib_ov5693.dopclib;
-		p_yushan_regs->pdpclib_size = yushan_regs_clib_ov5693.pdpclib_size;
-		p_yushan_regs->dppclib_size = yushan_regs_clib_ov5693.dppclib_size;
-		p_yushan_regs->dopclib_size = yushan_regs_clib_ov5693.dopclib_size;
-		p_yushan_regs->pdpclib_first_addr = yushan_regs_clib_ov5693.pdpclib_first_addr;
-		p_yushan_regs->dppclib_first_addr = yushan_regs_clib_ov5693.dppclib_first_addr;
-		p_yushan_regs->dopclib_first_addr = yushan_regs_clib_ov5693.dopclib_first_addr;
-	}
-	else if (strcmp(data.sensor_name, "s5k6a2ya") == 0) {
-		p_yushan_regs->pdpclib = yushan_regs_clib_s5k6a2ya.pdpclib;
-		p_yushan_regs->dppclib = yushan_regs_clib_s5k6a2ya.dppclib;
-		p_yushan_regs->dopclib = yushan_regs_clib_s5k6a2ya.dopclib;
-		p_yushan_regs->pdpclib_size = yushan_regs_clib_s5k6a2ya.pdpclib_size;
-		p_yushan_regs->dppclib_size = yushan_regs_clib_s5k6a2ya.dppclib_size;
-		p_yushan_regs->dopclib_size = yushan_regs_clib_s5k6a2ya.dopclib_size;
-		p_yushan_regs->pdpclib_first_addr = yushan_regs_clib_s5k6a2ya.pdpclib_first_addr;
-		p_yushan_regs->dppclib_first_addr = yushan_regs_clib_s5k6a2ya.dppclib_first_addr;
-		p_yushan_regs->dopclib_first_addr = yushan_regs_clib_s5k6a2ya.dopclib_first_addr;
-	}
-
-	sDxoStruct.pDxoPdpRamImage[0] = (uint8_t *)p_yushan_regs->pdpcode;
-	sDxoStruct.pDxoDppRamImage[0] = (uint8_t *)p_yushan_regs->dppcode;
-	sDxoStruct.pDxoDopRamImage[0] = (uint8_t *)p_yushan_regs->dopcode;
-	sDxoStruct.pDxoPdpRamImage[1] = (uint8_t *)p_yushan_regs->pdpclib;
-	sDxoStruct.pDxoDppRamImage[1] = (uint8_t *)p_yushan_regs->dppclib;
-	sDxoStruct.pDxoDopRamImage[1] = (uint8_t *)p_yushan_regs->dopclib;
-
-	sDxoStruct.uwDxoPdpRamImageSize[0] = p_yushan_regs->pdpcode_size;
-	sDxoStruct.uwDxoDppRamImageSize[0] = p_yushan_regs->dppcode_size;
-	sDxoStruct.uwDxoDopRamImageSize[0] = p_yushan_regs->dopcode_size;
-	sDxoStruct.uwDxoPdpRamImageSize[1] = p_yushan_regs->pdpclib_size;
-	sDxoStruct.uwDxoDppRamImageSize[1] = p_yushan_regs->dppclib_size;
-	sDxoStruct.uwDxoDopRamImageSize[1] = p_yushan_regs->dopclib_size;
-
-	sDxoStruct.uwBaseAddrPdpMicroCode[0] = p_yushan_regs->pdpcode_first_addr;
-	sDxoStruct.uwBaseAddrDppMicroCode[0] = p_yushan_regs->dppcode_first_addr;
-	sDxoStruct.uwBaseAddrDopMicroCode[0] = p_yushan_regs->dopcode_first_addr;
-	sDxoStruct.uwBaseAddrPdpMicroCode[1] = p_yushan_regs->pdpclib_first_addr;
-	sDxoStruct.uwBaseAddrDppMicroCode[1] = p_yushan_regs->dppclib_first_addr;
-	sDxoStruct.uwBaseAddrDopMicroCode[1] = p_yushan_regs->dopclib_first_addr;
-
-	sDxoStruct.uwDxoPdpBootAddr = p_yushan_regs->pdpBootAddr;
-	sDxoStruct.uwDxoDppBootAddr = p_yushan_regs->dppBootAddr;
-	sDxoStruct.uwDxoDopBootAddr = p_yushan_regs->dopBootAddr;
-
-	sDxoStruct.uwDxoPdpStartAddr = p_yushan_regs->pdpStartAddr;
-	sDxoStruct.uwDxoDppStartAddr = p_yushan_regs->dppStartAddr;
-	sDxoStruct.uwDxoDopStartAddr = p_yushan_regs->dopStartAddr;
-
-#if 0
-	pr_info("/*---------------------------------------*\\");
-	pr_info("array base ADDRs %d %d %d %d %d %d",
-		sDxoStruct.uwBaseAddrPdpMicroCode[0], sDxoStruct.uwBaseAddrDppMicroCode[0], sDxoStruct.uwBaseAddrDopMicroCode[0],
-		sDxoStruct.uwBaseAddrPdpMicroCode[1], sDxoStruct.uwBaseAddrDppMicroCode[1], sDxoStruct.uwBaseAddrDopMicroCode[1]);
-	pr_info("array 1st values %d %d %d %d %d %d",
-		*sDxoStruct.pDxoPdpRamImage[0], *sDxoStruct.pDxoDppRamImage[0], *sDxoStruct.pDxoDopRamImage[0],
-		*sDxoStruct.pDxoPdpRamImage[1], *sDxoStruct.pDxoDppRamImage[1], *sDxoStruct.pDxoDopRamImage[1]);
-	pr_info("array sizes %d %d %d %d %d %d",
-		sDxoStruct.uwDxoPdpRamImageSize[0], sDxoStruct.uwDxoDppRamImageSize[0], sDxoStruct.uwDxoDopRamImageSize[0],
-		sDxoStruct.uwDxoPdpRamImageSize[1], sDxoStruct.uwDxoDppRamImageSize[1], sDxoStruct.uwDxoDopRamImageSize[1]);
-	pr_info("Boot Addr %d %d %d",
-		sDxoStruct.uwDxoPdpBootAddr, sDxoStruct.uwDxoDppBootAddr, sDxoStruct.uwDxoDopBootAddr);
-	pr_info("\\*---------------------------------------*/");
-#endif
-
-	
-	
-#if 0
-	
-	switch (bSpiFreq) {
-	case 0x80:	
-		udwSpiFreq = 8<<16;
-		break;
-	case 0x00:	
-		udwSpiFreq = 4<<16;
-		break;
-	case 0x81:	
-		udwSpiFreq = 2<<16;
-		break;
-	case 0x01:	
-		udwSpiFreq = 1<<16;
-		break;
-	case 0x82:	
-		udwSpiFreq = 1<<8;
-		break;
-	case 0x02:	
-		udwSpiFreq = 1<<4;
-		break;
-	case 0x03:	
-		udwSpiFreq = 1<<2;
-		break;
-	  }
-#endif
-
-	sInitStruct.fpSpiClock			=	data.spi_clk*(1<<16);  
-	sInitStruct.fpExternalClock		=	sInitStruct.fpExternalClock << 16; 
-
-	sInitStruct.uwActivePixels = uwHSize;
-	sInitStruct.uwLineBlankStill = uwBlkPixels;
-	sInitStruct.uwLineBlankVf = uwBlkPixels;
-	sInitStruct.uwLines = uwVSize;
-	sInitStruct.uwFrameBlank = uwBlkLines;
-	sInitStruct.bUseExternalLDO = data.use_ext_1v2;
-	sImageChar_context.bImageOrientation = data.orientation;
-	sImageChar_context.uwXAddrStart = data.x_addr_start;
-	sImageChar_context.uwYAddrStart = data.y_addr_start;
-	sImageChar_context.uwXAddrEnd = data.x_addr_end;
-	sImageChar_context.uwYAddrEnd = data.y_addr_end;
-	sImageChar_context.uwXEvenInc = data.x_even_inc;
-	sImageChar_context.uwXOddInc = data.x_odd_inc;
-	sImageChar_context.uwYEvenInc = data.y_even_inc;
-	sImageChar_context.uwYOddInc = data.y_odd_inc;
-	sImageChar_context.bBinning = data.binning_rawchip;
-
-	memset(sInitStruct.sFrameFormat, 0, sizeof(Yushan_Frame_Format_t)*15);
-	if ((bPixelFormat == RAW8) || (bPixelFormat == RAW10_8)) {
-		CDBG("[CAM] bPixelFormat==RAW8");
-		sInitStruct.sFrameFormat[0].uwWordcount = (uwHSize);	
-		sInitStruct.sFrameFormat[0].bDatatype = 0x2a;		  
-	} else { 
-		CDBG("[CAM] bPixelFormat==RAW10");
-		sInitStruct.sFrameFormat[0].uwWordcount = (uwHSize*10)/8;	 
-		sInitStruct.sFrameFormat[0].bDatatype = 0x2b;		  
-	}
-	
-	if (bPixelFormat == RAW10_8) {
-		sInitStruct.sFrameFormat[0].bDatatype = 0x30;
-	}
-	sInitStruct.sFrameFormat[0].bActiveDatatype = 1;
-	sInitStruct.sFrameFormat[0].bSelectStillVfMode = YUSHAN_FRAME_FORMAT_STILL_MODE;
-
-	sInitStruct.bValidWCEntries = 1;
-
-	sGainsExpTime.uwAnalogGainCodeGR = 0x20; 
-	sGainsExpTime.uwAnalogGainCodeR = 0x20;
-	sGainsExpTime.uwAnalogGainCodeB = 0x20;
-	sGainsExpTime.uwPreDigGainGR = 0x100;
-	sGainsExpTime.uwPreDigGainR = 0x100;
-	sGainsExpTime.uwPreDigGainB = 0x100;
-	sGainsExpTime.uwExposureTime = 0x20;
-	sGainsExpTime.bRedGreenRatio = 0x40;
-	sGainsExpTime.bBlueGreenRatio = 0x40;
-
-	sDxoDppTuning.bTemporalSmoothing = 0x63; 
-	sDxoDppTuning.uwFlashPreflashRating = 0;
-	sDxoDppTuning.bFocalInfo = 0;
-
-	sDxoPdpTuning.bDeadPixelCorrectionLowGain = 0x80;
-	sDxoPdpTuning.bDeadPixelCorrectionMedGain = 0x80;
-	sDxoPdpTuning.bDeadPixelCorrectionHiGain = 0x80;
-
-#if 0
-	sDxoDopTuning.uwForceClosestDistance = 0;	
-	sDxoDopTuning.uwForceFarthestDistance = 0;
-#endif
-	sDxoDopTuning.bEstimationMode = 1;
-	sDxoDopTuning.bSharpness = 0x01; 
-	sDxoDopTuning.bDenoisingLowGain = 0x1; 
-	sDxoDopTuning.bNoiseVsDetailsLowGain = 0xA0;
-	sDxoDopTuning.bNoiseVsDetailsMedGain = 0x80;
-	sDxoDopTuning.bNoiseVsDetailsHiGain = 0x80;
-	bDppMode = DPP_enable ? 0x03 : 0;
-	bDopMode = DOP_enable ? (0x01|(((~denoise_enable)&0x01)<<4)) : 0;
-
-	if (strcmp(data.sensor_name, "s5k3h2yx") == 0)
-	{
-		sDxoDopTuning.bDenoisingMedGain = 0x60;
-		sDxoDopTuning.bDenoisingHiGain = 0x40;
-	}
-	else if (strcmp(data.sensor_name, "imx175") == 0)
-	{
-	    sDxoDopTuning.bSharpness = 0x01;
-	    sDxoDopTuning.bDenoisingLowGain = 0x30;
-	    sDxoDopTuning.bDenoisingMedGain = 0x80;
-	    sDxoDopTuning.bDenoisingHiGain =  0x56;
- 
-	    sDxoDopTuning.bNoiseVsDetailsLowGain = 0xD0;
-	    sDxoDopTuning.bNoiseVsDetailsMedGain = 0xB0;
-	    sDxoDopTuning.bNoiseVsDetailsHiGain =  0xA0;
-	}
-	else if (strcmp(data.sensor_name, "ar0260") == 0)
-	{
-		sDxoDopTuning.bDenoisingLowGain = 0x30;
-		sDxoDopTuning.bDenoisingMedGain = 0x30;
-		sDxoDopTuning.bDenoisingHiGain =  0x20;
-	    sDxoDopTuning.bNoiseVsDetailsLowGain = 0x80;
-	    sDxoDopTuning.bNoiseVsDetailsMedGain = 0x80;
-	    sDxoDopTuning.bNoiseVsDetailsHiGain = 0xB0;
-	    sDxoDopTuning.bSharpness = 0;
-		bDppMode =0;
-		bDopMode =0xd;
-	}
-	else if (strcmp(data.sensor_name, "ov2722") == 0)   
-	{
-		sDxoDopTuning.bDenoisingLowGain = 0x10;
-		sDxoDopTuning.bDenoisingMedGain = 0x10;
-		sDxoDopTuning.bDenoisingHiGain =  0x45;
-	    sDxoDopTuning.bNoiseVsDetailsLowGain = 0x80;
-	    sDxoDopTuning.bNoiseVsDetailsMedGain = 0x80;
-	    sDxoDopTuning.bNoiseVsDetailsHiGain = 0xA8;
-	    sDxoDopTuning.bSharpness = 0;
-		
-		bDopMode =0xd;
-	}
-	else
-	{
-		sDxoDopTuning.bDenoisingMedGain = 0x60;
-		sDxoDopTuning.bDenoisingHiGain = 0x40;
-	}
-
-	sDxoDopTuning.bTemporalSmoothing = 0x26; 
-
-	gPllLocked = 0;
-	CDBG("[CAM] Yushan_common_init Yushan_Init_Clocks\n");
-	bStatus = Yushan_Init_Clocks(&sInitStruct, &sSystemStatus, udwIntrMask) ;
-	if (bStatus != SUCCESS) {
-		pr_err("[CAM] Clock Init FAILED\n");
-		pr_err("[CAM] Yushan_common_init Yushan_Init_Clocks=%d\n", bStatus);
-		pr_err("[CAM] Min Value Required %d\n", sSystemStatus.udwDxoConstraintsMinValue);
-		pr_err("[CAM] Error Code : %d\n", sSystemStatus.bDxoConstraints);
-		return -1;
-	} else
-		CDBG("[CAM] Clock Init Done \n");
-	
-	gPllLocked = 1;
-
-	
-	Yushan_AssignInterruptGroupsToPad1(uwAssignITRGrpToPad1);
-
-	CDBG("[CAM] Yushan_common_init Yushan_Init\n");
-	bStatus = Yushan_Init(&sInitStruct) ;
-	CDBG("[CAM] Yushan_common_init Yushan_Init=%d\n", bStatus);
-
-	
-	if (bPixelFormat == RAW10_8)
-		Yushan_DCPX_CPX_Enable();
-
-	if (bStatus == 0) {
-		pr_err("[CAM] Yushan Init FAILED\n");
-		return -1;
-	}
-	
-
-	if (data.use_rawchip == RAWCHIP_DXO_BYPASS) {
-		
-		Yushan_DXO_Lecci_Bypass();
-	}
-
-	if (data.use_rawchip == RAWCHIP_MIPI_BYPASS) {
-		
-		Yushan_DXO_DTFilter_Bypass();
-	}
-
-	if (data.use_rawchip == RAWCHIP_ENABLE) {
-		CDBG("[CAM] Yushan_common_init Yushan_Init_Dxo\n");
-		
-		bStatus = Yushan_Init_Dxo(&sDxoStruct, bBypassDxoUpload);
-		CDBG("[CAM] Yushan_common_init Yushan_Init_Dxo=%d\n", bStatus);
-		if (bStatus == SUCCESS) {
-			CDBG("[CAM] DXO Upload and Init Done\n");
-		} else {
-			pr_err("[CAM] DXO Upload and Init FAILED\n");
-			return -1;
-		}
-		CDBG("[CAM] Yushan_common_init Yushan_Get_Version_Information\n");
-
-		bStatus = Yushan_Get_Version_Information(&sYushanVersionInfo) ;
-	
-	#if 1 
-		CDBG("Yushan_common_init Yushan_Get_Version_Information=%d\n", bStatus);
-
-		CDBG("API Version : %d.%d \n", sYushanVersionInfo.bApiMajorVersion, sYushanVersionInfo.bApiMinorVersion);
-		CDBG("DxO Pdp Version : %x \n", sYushanVersionInfo.udwPdpVersion);
-		CDBG("DxO Dpp Version : %x \n", sYushanVersionInfo.udwDppVersion);
-		CDBG("DxO Dop Version : %x \n", sYushanVersionInfo.udwDopVersion);
-		CDBG("DxO Pdp Calibration Version : %x \n", sYushanVersionInfo.udwPdpCalibrationVersion);
-		CDBG("DxO Dpp Calibration Version : %x \n", sYushanVersionInfo.udwDppCalibrationVersion);
-		CDBG("DxO Dop Calibration Version : %x \n", sYushanVersionInfo.udwDopCalibrationVersion);
-	#endif
-	
-
-	#if 0
-		
-		if (bTestPatternMode == 1) {
-			
-			Yushan_PatternGenerator(&sInitStruct, bPatternReq, bDxoBypassForTestPattern);
-			
-			return 0;
-		}
-	#endif
-
-		
-		Yushan_Update_ImageChar(&sImageChar_context);
-	
-		Yushan_Update_SensorParameters(&sGainsExpTime);
-		Yushan_Update_DxoDpp_TuningParameters(&sDxoDppTuning);
-		Yushan_Update_DxoDop_TuningParameters(&sDxoDopTuning);
-		Yushan_Update_DxoPdp_TuningParameters(&sDxoPdpTuning);
-		bStatus = Yushan_Update_Commit(bPdpMode, bDppMode, bDopMode);
-		CDBG("[CAM] Yushan_common_init Yushan_Update_Commit=%d\n", bStatus);
-
-		
-		
-		bStatus &= Yushan_WaitForInterruptEvent(EVENT_PDP_EOF_EXECCMD, TIME_100MS);
-		if (!bStatus)
-		{
-			pr_err("[CAM] EVENT_PDP_EOF_EXECCMD fail\n");
-			return -1;
-		}
-
-		bStatus &= Yushan_WaitForInterruptEvent2(EVENT_DOP7_EOF_EXECCMD, TIME_100MS);
-		if (!bStatus)
-		{
-			pr_err("[CAM] EVENT_DOP7_EOF_EXECCMD fail\n");
-			return -1;
-		}
-
-		bStatus &= Yushan_WaitForInterruptEvent(EVENT_DPP_EOF_EXECCMD, TIME_100MS);
-		if (!bStatus)
-		{
-			pr_err("[CAM] EVENT_DPP_EOF_EXECCMD fail\n");
-			return -1;
-		}
-
-		if (bStatus == 1)
-			CDBG("[CAM] DXO Commit Done\n");
-		else {
-			pr_err("[CAM] DXO Commit FAILED\n");
-			
-		}
-	}
-#if 0
-	
-	bSpiData = 0;
-	SPI_Write(YUSHAN_SMIA_FM_EOF_INT_EN, 1,  &bSpiData);
-#endif
-
-	return (bStatus == SUCCESS) ? 0 : -1;
-#endif
-	return 0;
-}
-bool_t Yushan_Dxo_Dop_Af_Run(Yushan_AF_ROI_t	*sYushanAfRoi, uint32_t *pAfStatsGreen, uint8_t	bRoiActiveNumber)
-{
-
-	uint8_t		bStatus = SUCCESS;
-	
-#if 1
-	uint32_t		enableIntrMask[] = {0x00338E30, 0x00000000, 0x00018000};
-	uint32_t		disableIntrMask[] = {0x00238E30, 0x00000000, 0x00018000};
-#endif
-
-	
-
-	
-
-	if (bRoiActiveNumber)
-	{
-		Yushan_Intr_Enable((uint8_t*)enableIntrMask);
-		
-		bStatus = Yushan_AF_ROI_Update(&sYushanAfRoi[0], bRoiActiveNumber);
-		bStatus &= Yushan_Update_Commit(bPdpMode,bDppMode,bDopMode);
-
-		
-		bStatus &= Yushan_WaitForInterruptEvent2(EVENT_DXODOP7_NEWFRAMEPROC_ACK, TIME_100MS);
-	}
-	else
-		Yushan_Intr_Enable((uint8_t*)disableIntrMask);
-
-#if 0
-	if (bStatus) {
-		
-		#if 0
-		yushan_go_to_position(0, 0);
-		for(i=1; i<=42; i++)
-		{
-			s5k3h2yx_move_focus( 1, i);
-			bStatus = Yushan_Read_AF_Statistics(pAfStatsGreen);
-		}
-		#endif
-		bStatus = Yushan_Read_AF_Statistics(pAfStatsGreen);
-	}
-
-	if (!bStatus) {
-		pr_err("ROI AF Statistics read failed\n");
-		return FAILURE;
-	} else
-		pr_err("Read ROI AF Statistics successfully\n");
-#endif
-
-	return SUCCESS;
-
-}
-
-#if 0
-bool_t Yushan_get_AFSU(Yushan_AF_Stats_t* sYushanAFStats)
-{
-
-	uint8_t		bStatus = SUCCESS, bNumOfActiveRoi = 0,  bCount = 0;
-	uint32_t	udwSpiData[4];
-	uint16_t val ;
-
-#if 0
-			YushanPrintFrameNumber();
-			YushanPrintDxODOPAfStrategy();
-			YushanPrintImageInformation();
-			YushanPrintVisibleLineSizeAndRoi();
-#endif
-
-	
-	bStatus &= SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_ROI_active_number_7_0, 1, (uint8_t*)(&bNumOfActiveRoi));
-
-	if (!bNumOfActiveRoi) 
-		return SUCCESS;
-
-	SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_frame_number_7_0, 2, (uint8_t *)(&val));
-	sYushanAFStats[0].frameIdx= val;
-
-	
-	
-	while(bCount<bNumOfActiveRoi)
-	{
-		
-		bStatus &= SPI_Read((uint16_t)(DXO_DOP_BASE_ADDR + DxODOP_ROI_0_stats_G_7_0 + bCount*16), 16, (uint8_t *)(&udwSpiData[0]));
-		
-		sYushanAFStats[bCount].udwAfStatsGreen        = udwSpiData[0];
-		sYushanAFStats[bCount].udwAfStatsRed            = udwSpiData[1];
-		sYushanAFStats[bCount].udwAfStatsBlue           = udwSpiData[2];
-		sYushanAFStats[bCount].udwAfStatsConfidence = udwSpiData[3];
-		sYushanAFStats[bCount].frameIdx                    = sYushanAFStats[0].frameIdx;
-#if 0
-		pr_info("[CAM]%s, G:%d, R:%d, B:%d, confidence:%d (%d) \n", __func__,
-			sYushanAFStats[bCount].udwAfStatsGreen,
-			sYushanAFStats[bCount].udwAfStatsRed,
-		    sYushanAFStats[bCount].udwAfStatsBlue,
-		    sYushanAFStats[bCount].udwAfStatsConfidence,
-		    sYushanAFStats[bCount].frameIdx);
-#endif
-		bCount++;
-	}
-
-
-
-	return bStatus;
-}
-#else
-int Yushan_get_AFSU(rawchip_af_stats* af_stats)
-{
-
-	uint8_t		bStatus = SUCCESS;
-
-	bStatus = Yushan_Read_AF_Statistics(af_stats->udwAfStats, 1, &af_stats->frameIdx);
-	if (bStatus == FAILURE) {
-		pr_err("[CAM] Get AFSU statistic data fail\n");
-		return -1;
-	}
-	CDBG("[CAM] GET_AFSU:G:%d, R:%d, B:%d, confi:%d, frmIdx:%d\n",
-		af_stats->udwAfStats[0].udwAfStatsGreen,
-		af_stats->udwAfStats[0].udwAfStatsRed,
-		af_stats->udwAfStats[0].udwAfStatsBlue,
-		af_stats->udwAfStats[0].udwAfStatsConfidence,
-		af_stats->frameIdx);
-	return 0;
-}
-#endif
-
-
-int	Yushan_ContextUpdate_Wrapper(Yushan_New_Context_Config_t	sYushanNewContextConfig, Yushan_ImageChar_t	sImageNewChar_context)
-{
-
-	bool_t	bStatus = SUCCESS;
-	
-
-		CDBG("[CAM] Reconfiguration starts:%d,%d,%d\n",
-			sYushanNewContextConfig->uwActiveFrameLength,
-			sYushanNewContextConfig->uwActivePixels,
-			sYushanNewContextConfig->uwLineBlank);
-		bStatus = Yushan_Context_Config_Update(&sYushanNewContextConfig);
-		
-
-#if 0
-	
-	sImageChar_context.bImageOrientation = sYushanNewContextConfig->orientation;
-	sImageChar_context.uwXAddrStart = sYushanNewContextConfig->uwXAddrStart;
-	sImageChar_context.uwYAddrStart = sYushanNewContextConfig->uwYAddrStart;
-	sImageChar_context.uwXAddrEnd= sYushanNewContextConfig->uwXAddrEnd;
-	sImageChar_context.uwYAddrEnd= sYushanNewContextConfig->uwYAddrEnd;
-
-	sImageChar_context.uwXEvenInc = sYushanNewContextConfig->uwXEvenInc;
-	sImageChar_context.uwXOddInc = sYushanNewContextConfig->uwXOddInc;
-	sImageChar_context.uwYEvenInc = sYushanNewContextConfig->uwYEvenInc;
-	sImageChar_context.uwYOddInc = sYushanNewContextConfig->uwYOddInc;
-	sImageChar_context.bBinning = sYushanNewContextConfig->bBinning;
-#endif
-
-
-	
-	Yushan_Update_ImageChar(&sImageNewChar_context);
-	bStatus &= Yushan_Update_Commit(bPdpMode,bDppMode,bDopMode);
-
-	
-	
-	bStatus &= Yushan_WaitForInterruptEvent(EVENT_PDP_EOF_EXECCMD, TIME_100MS);
-	if (!bStatus)
-	{
-		pr_err("[CAM] EVENT_PDP_EOF_EXECCMD fail\n");
-		return -1;
-	}
-
-	bStatus &= Yushan_WaitForInterruptEvent2(EVENT_DOP7_EOF_EXECCMD, TIME_100MS);
-	if (!bStatus)
-	{
-		pr_err("[CAM] EVENT_DOP7_EOF_EXECCMD fail\n");
-		return -1;
-	}
-
-	bStatus &= Yushan_WaitForInterruptEvent(EVENT_DPP_EOF_EXECCMD, TIME_100MS);
-	if (!bStatus)
-	{
-		pr_err("[CAM] EVENT_DPP_EOF_EXECCMD fail\n");
-		return -1;
-	}
-
-	if (bStatus)
-		CDBG("[CAM] DXO Commit, Post Context Reconfigration, Done\n");
-	else
-		pr_err("[CAM] DXO Commit, Post Context Reconfigration, FAILED\n");
-
-	return (bStatus == SUCCESS) ? 0 : -1;
-
-}
-
-#if 0
-void Yushan_Write_Exp_Time_Gain(uint16_t yushan_line, uint16_t yushan_gain)
-{
-#if 0
-	Yushan_GainsExpTime_t sGainsExpTime;
-	uint32_t udwSpiBaseIndex;
-	uint32_t spidata;
-	float ratio = 0.019;
-	pr_info("[CAM] Yushan_Write_Exp_Time_Gain, yushan_gain:%d, yushan_line:%d", yushan_gain, yushan_line);
-#endif
-
-	sGainsExpTime.uwAnalogGainCodeGR= yushan_gain;
-	sGainsExpTime.uwAnalogGainCodeR=yushan_gain;
-	sGainsExpTime.uwAnalogGainCodeB=yushan_gain;
-	sGainsExpTime.uwPreDigGainGR= 0x100;
-	sGainsExpTime.uwPreDigGainR= 0x100;
-	sGainsExpTime.uwPreDigGainB= 0x100;
-	sGainsExpTime.uwExposureTime= (uint16_t)((19*yushan_line/1000));
-
-	if (sGainsExpTime.bRedGreenRatio == 0) sGainsExpTime.bRedGreenRatio=0x40;
-	if (sGainsExpTime.bBlueGreenRatio == 0) sGainsExpTime.bBlueGreenRatio=0x40;
-
-	pr_err("[CAM] uwExposureTime: %d\n", sGainsExpTime.uwExposureTime);
-	Yushan_Update_SensorParameters(&sGainsExpTime);
-#if 0
-	pr_info("DxO Regiser Dump Start******* \n");
-	SPI_Read((0x821E), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DOP 0x821E : %x \n",spidata);
-	SPI_Read((0x8222), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DOP 0x8222 : %x \n",spidata);
-	SPI_Read((0x8226), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DOP 0x8226 : %x \n",spidata);
-	SPI_Read((0x822A), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DOP 0x822A : %x \n",spidata);
-	SPI_Read((0x822E), 2, (uint8_t *)(&spidata));
-	pr_info("DxO DOP 0x822E : %x \n",spidata);
-	SPI_Read((0x8204), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DOP Cali_ID : %x \n",spidata);
-
-	udwSpiBaseIndex = 0x010000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-	SPI_Read((0x821E), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DPP 0x821E : %x \n",spidata);
-	SPI_Read((0x8222), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DPP 0x8222 : %x \n",spidata);
-	SPI_Read((0x8226), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DPP 0x8226 : %x \n",spidata);
-	SPI_Read((0x822A), 2, (uint8_t *)(&spidata));
-	pr_info("DxO DPP 0x822A : %x \n",spidata);
-	SPI_Read((0x8204), 4, (uint8_t *)(&spidata));
-	pr_info("DxO DPP Cali_ID : %x \n",spidata);
-
-	udwSpiBaseIndex = 0x08000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-	SPI_Read((0x621E), 4, (uint8_t *)(&spidata));
-	pr_info("DxO PDP 0x621E : %x \n",spidata);
-	SPI_Read((0x6222), 4, (uint8_t *)(&spidata));
-	pr_info("DxO PDP 0x6222 : %x \n",spidata);
-	SPI_Read((0x6226), 4, (uint8_t *)(&spidata));
-	pr_info("DxO PDP 0x6226 : %x \n",spidata);
-	SPI_Read((0x622A), 2, (uint8_t *)(&spidata));
-	pr_info("DxO PDP 0x622A : %x \n",spidata);
-	SPI_Read((0x6204), 4, (uint8_t *)(&spidata));
-	pr_info("DxO PDP Cali_ID : %x \n",spidata);
-#endif
-
-}
-#endif
-
-int Yushan_Set_AF_Strategy(uint8_t afStrategy)
-{
-	uint8_t		bStatus = SUCCESS;
-	CDBG("[CAM] Yushan_Set_AF_Strategy\n");
-	bStatus = Yushan_Update_DxoDop_Af_Strategy(afStrategy);
-	return (bStatus == SUCCESS) ? 0 : -1;
-}
-
-int Yushan_Get_Version(rawchip_dxo_version* dxo_version)
-{
-	uint32_t udwSpiBaseIndex = 0;
-	CDBG("[CAM] Yushan_Get_Version\n");
-
-	SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_ucode_id_7_0 , 2,(uint8_t *)(&(dxo_version->udwDOPUcodeId)));
-	SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_hw_id_7_0      , 2,(uint8_t *)(&(dxo_version->udwDOPHwId    )));
-	SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_calib_id_0_7_0, 4,(uint8_t *)(&(dxo_version->udwDOPCalibId )));
-
-	udwSpiBaseIndex = 0x010000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-	SPI_Read((DXO_DPP_BASE_ADDR-0x8000)+DxODPP_ucode_id_7_0 , 2, (uint8_t *)(&(dxo_version->udwDPPUcodeId)));
-	SPI_Read((DXO_DPP_BASE_ADDR-0x8000)+DxODPP_hw_id_7_0      , 2, (uint8_t *)(&(dxo_version->udwDPPHwId)));
-	SPI_Read((DXO_DPP_BASE_ADDR-0x8000)+DxODPP_calib_id_0_7_0, 4, (uint8_t *)(&(dxo_version->udwDPPCalibId)));
-	udwSpiBaseIndex = 0x08000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-       SPI_Read(DXO_PDP_BASE_ADDR+DxOPDP_ucode_id_7_0 , 2,(uint8_t *)(&(dxo_version->udwPDPUcodeId)));
-	SPI_Read(DXO_PDP_BASE_ADDR+DxOPDP_hw_id_7_0      , 2,(uint8_t *)(&(dxo_version->udwPDPHwId)));
-	SPI_Read(DXO_PDP_BASE_ADDR+DxOPDP_calib_id_0_7_0, 4,(uint8_t *)(&(dxo_version->udwPDPCalibId)));
-
-	CDBG("[CAM] Yushan_Get_Version : DOP ucodeid 0x%04x\n",dxo_version->udwDOPUcodeId);
-	CDBG("[CAM] Yushan_Get_Version : DOP hwid     0x%04x\n",dxo_version->udwDOPHwId);
-	CDBG("[CAM] Yushan_Get_Version : DOP calibid  0x%08x\n",dxo_version->udwDOPCalibId);
-	CDBG("[CAM] Yushan_Get_Version : DPP ucodeid 0x%04x\n",dxo_version->udwDPPUcodeId);
-	CDBG("[CAM] Yushan_Get_Version : DPP hwid     0x%04x\n",dxo_version->udwDPPHwId);
-	CDBG("[CAM] Yushan_Get_Version : DPP calibid  0x%08x\n",dxo_version->udwDPPCalibId);
-	CDBG("[CAM] Yushan_Get_Version : PDP ucodeid 0x%04x\n",dxo_version->udwPDPUcodeId);
-	CDBG("[CAM] Yushan_Get_Version : PDP hwid     0x%04x\n",dxo_version->udwPDPHwId);
-	CDBG("[CAM] Yushan_Get_Version : PDP calibid  0x%08x\n",dxo_version->udwPDPCalibId);
-
-	return SUCCESS;
-}
-int Yushan_Update_AEC_AWB_Params(rawchip_update_aec_awb_params_t *update_aec_awb_params)
-{
-	uint8_t bStatus = SUCCESS;
-	Yushan_GainsExpTime_t sGainsExpTime;
-
-	sGainsExpTime.uwAnalogGainCodeGR = update_aec_awb_params->aec_params.gain;
-	sGainsExpTime.uwAnalogGainCodeR = update_aec_awb_params->aec_params.gain;
-	sGainsExpTime.uwAnalogGainCodeB = update_aec_awb_params->aec_params.gain;
-	sGainsExpTime.uwPreDigGainGR = update_aec_awb_params->aec_params.dig_gain;
-	sGainsExpTime.uwPreDigGainR = update_aec_awb_params->aec_params.dig_gain;
-	sGainsExpTime.uwPreDigGainB = update_aec_awb_params->aec_params.dig_gain;
-	sGainsExpTime.uwExposureTime = update_aec_awb_params->aec_params.exp;
-	sGainsExpTime.bRedGreenRatio = update_aec_awb_params->awb_params.rg_ratio;
-	sGainsExpTime.bBlueGreenRatio = update_aec_awb_params->awb_params.bg_ratio;
-#if 0
-	if (sGainsExpTime.bRedGreenRatio == 0)
-		sGainsExpTime.bRedGreenRatio = 0x40;
-	if (sGainsExpTime.bBlueGreenRatio == 0)
-		sGainsExpTime.bBlueGreenRatio = 0x40;
-#endif
-
-	CDBG("[CAM] uwExposureTime: %d\n", sGainsExpTime.uwExposureTime);
-	bStatus = Yushan_Update_SensorParameters(&sGainsExpTime);
-
-	return (bStatus == SUCCESS) ? 0 : -1;
-}
-
-int Yushan_Update_AF_Params(rawchip_update_af_params_t *update_af_params)
-{
-
-	uint8_t bStatus = SUCCESS;
-	bStatus = Yushan_AF_ROI_Update(&update_af_params->af_params.sYushanAfRoi[0],
-		update_af_params->af_params.active_number);
-	return (bStatus == SUCCESS) ? 0 : -1;
-}
-
-int Yushan_Update_3A_Params(rawchip_newframe_ack_enable_t enable_newframe_ack)
-{
-	uint8_t bStatus = SUCCESS;
-	uint32_t		enableIntrMask[] = {0x3DF38E3B, 0xFC3C3C3C, 0x001B7FFB};
-	uint32_t		disableIntrMask[] = {0x3DE38E3B, 0xFC3C3C3C, 0x001B7FFB};
-	if (enable_newframe_ack == RAWCHIP_NEWFRAME_ACK_ENABLE)
-		Yushan_Intr_Enable((uint8_t*)enableIntrMask);
-	else if (enable_newframe_ack == RAWCHIP_NEWFRAME_ACK_DISABLE)
-		Yushan_Intr_Enable((uint8_t*)disableIntrMask);
-	bStatus = Yushan_Update_Commit(bPdpMode, bDppMode, bDopMode);
-	return (bStatus == SUCCESS) ? 0 : -1;
-}
-
-void Yushan_dump_register(void)
-{
-	uint16_t read_data = 0;
-	uint8_t i;
-	for (i = 0; i < 50; i++) {
-		
-		rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_FRAME_NUMBER, &read_data);
-		pr_info("[CAM] Yushan's in counting=%d\n", read_data);
-
-		
-		rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_FRAME_NO_0, &read_data);
-		pr_info("[CAM] Yushan's out counting=%d\n", read_data);
-
-		mdelay(30);
-	}
-
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2RX_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2RX_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2TX_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2TX_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_IDP_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_IDP_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_P2W_UFLOW_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_P2W_UFLOW_STATUS=%x\n", read_data);
-}
-
-void Yushan_dump_all_register(void)
-{
-	uint16_t read_data = 0;
-	uint8_t i;
-	for (i = 0; i < 50; i++) {
-		
-		rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_FRAME_NUMBER, &read_data);
-		pr_info("[CAM] Yushan's in counting=%d\n", read_data);
-
-		
-		rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_FRAME_NO_0, &read_data);
-		pr_info("[CAM] Yushan's out counting=%d\n", read_data);
-
-		mdelay(30);
-	}
-
-	rawchip_spi_read_2B2B(YUSHAN_CLK_DIV_FACTOR, &read_data);
-	pr_info("[CAM]YUSHAN_CLK_DIV_FACTOR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CLK_DIV_FACTOR_2, &read_data);
-	pr_info("[CAM]YUSHAN_CLK_DIV_FACTOR_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CLK_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_CLK_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_RESET_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_RESET_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PLL_CTRL_MAIN, &read_data);
-	pr_info("[CAM]YUSHAN_PLL_CTRL_MAIN=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PLL_LOOP_OUT_DF, &read_data);
-	pr_info("[CAM]YUSHAN_PLL_LOOP_OUT_DF=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PLL_SSCG_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_PLL_SSCG_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_HOST_IF_SPI_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_HOST_IF_SPI_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_HOST_IF_SPI_DEVADDR, &read_data);
-	pr_info("[CAM]YUSHAN_HOST_IF_SPI_DEVADDR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, &read_data);
-	pr_info("[CAM]YUSHAN_HOST_IF_SPI_BASE_ADDRESS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2RX_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2RX_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2RX_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2RX_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2RX_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2RX_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2RX_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2RX_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2RX_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2RX_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2RX_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2RX_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_PDP_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_PDP_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_PDP_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_PDP_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_PDP_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_PDP_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_PDP_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_PDP_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_PDP_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_PDP_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_PDP_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_PDP_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DPP_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DPP_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DPP_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DPP_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DPP_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DPP_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DPP_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DPP_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DPP_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DPP_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DPP_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DPP_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DOP7_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DOP7_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DOP7_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DOP7_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DOP7_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DOP7_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DOP7_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DOP7_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DOP7_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DOP7_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_DOP7_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_DOP7_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2TX_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2TX_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2TX_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2TX_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2TX_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2TX_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2TX_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2TX_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2TX_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2TX_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_CSI2TX_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_CSI2TX_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_PHY_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_PHY_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_PHY_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_PHY_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_PHY_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_PHY_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_PHY_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_PHY_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_PHY_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_PHY_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_PHY_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_PHY_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_TX_PHY_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_TX_PHY_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_TX_PHY_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_TX_PHY_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_TX_PHY_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_TX_PHY_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_TX_PHY_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_TX_PHY_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_TX_PHY_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_TX_PHY_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_TX_PHY_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_TX_PHY_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_IDP_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_IDP_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_IDP_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_IDP_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_IDP_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_IDP_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_IDP_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_IDP_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_IDP_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_IDP_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_IDP_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_IDP_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_CHAR_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_CHAR_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_CHAR_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_CHAR_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_CHAR_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_CHAR_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_CHAR_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_CHAR_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_CHAR_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_CHAR_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_RX_CHAR_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_RX_CHAR_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_LBE_POST_DXO_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_LBE_POST_DXO_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_LBE_POST_DXO_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_LBE_POST_DXO_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_LBE_POST_DXO_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_LBE_POST_DXO_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_LBE_POST_DXO_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_LBE_POST_DXO_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_LBE_POST_DXO_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_LBE_POST_DXO_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_LBE_POST_DXO_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_LBE_POST_DXO_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_SYS_DOMAIN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_SYS_DOMAIN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_SYS_DOMAIN_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_SYS_DOMAIN_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_SYS_DOMAIN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_SYS_DOMAIN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_SYS_DOMAIN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_SYS_DOMAIN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_SYS_DOMAIN_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_SYS_DOMAIN_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_SYS_DOMAIN_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_SYS_DOMAIN_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_ITPOINT_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_ITPOINT_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_ITPOINT_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_ITPOINT_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_ITPOINT_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_ITPOINT_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_ITPOINT_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_ITPOINT_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_ITPOINT_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_ITPOINT_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_ITPOINT_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_ITPOINT_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_P2W_UFLOW_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_P2W_UFLOW_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_P2W_UFLOW_EN_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_P2W_UFLOW_EN_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_P2W_UFLOW_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_P2W_UFLOW_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_P2W_UFLOW_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_P2W_UFLOW_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_P2W_UFLOW_EN_STATUS_BCLR, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_P2W_UFLOW_EN_STATUS_BCLR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITM_P2W_UFLOW_EN_STATUS_BSET, &read_data);
-	pr_info("[CAM]YUSHAN_ITM_P2W_UFLOW_EN_STATUS_BSET=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_DATA_WORD_0, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_DATA_WORD_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_DATA_WORD_1, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_DATA_WORD_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_DATA_WORD_2, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_DATA_WORD_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_DATA_WORD_3, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_DATA_WORD_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_HYST, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_HYST=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_PDN, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_PDN=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_PUN, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_PUN=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_LOWEMI, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_LOWEMI=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_PAD_IN, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_PAD_IN=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_RATIO_PAD, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_RATIO_PAD=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_SEND_ITR_PAD1, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_SEND_ITR_PAD1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_INTR_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_INTR_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IOR_NVM_LDO_STS_REG, &read_data);
-	pr_info("[CAM]YUSHAN_IOR_NVM_LDO_STS_REG=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_REG_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_REG_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_REG_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_REG_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_REG_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_REG_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_REG_REFILL_ELT_NB, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_REG_REFILL_ELT_NB=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_REG_REFILL_ERROR, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_REG_REFILL_ERROR=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_REG_DFV_CONTROL, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_REG_DFV_CONTROL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_MEM_PAGE, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_MEM_PAGE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_MEM_LOWER_ELT, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_MEM_LOWER_ELT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_T1_DMA_MEM_UPPER_ELT, &read_data);
-	pr_info("[CAM]YUSHAN_T1_DMA_MEM_UPPER_ELT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_UIX4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_UIX4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_SWAP_PINS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_SWAP_PINS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_INVERT_HS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_INVERT_HS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_STOP_STATE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_STOP_STATE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_ULP_STATE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_ULP_STATE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_CLK_ACTIVE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_CLK_ACTIVE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_FORCE_RX_MODE_DL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_FORCE_RX_MODE_DL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_TEST_RESERVED, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_TEST_RESERVED=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_ESC_DL_STS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_ESC_DL_STS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_EOT_BYPASS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_EOT_BYPASS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_HSRX_SHIFT_CL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_HSRX_SHIFT_CL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_HS_RX_SHIFT_DL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_HS_RX_SHIFT_DL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_VIL_CL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_VIL_CL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_VIL_DL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_VIL_DL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_OVERSAMPLE_BYPASS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_OVERSAMPLE_BYPASS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_OVERSAMPLE_FLAG1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_OVERSAMPLE_FLAG1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_SKEW_OFFSET_1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_SKEW_OFFSET_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_SKEW_OFFSET_2, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_SKEW_OFFSET_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_SKEW_OFFSET_3, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_SKEW_OFFSET_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_SKEW_OFFSET_4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_SKEW_OFFSET_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_OFFSET_CL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_OFFSET_CL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_CALIBRATE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_CALIBRATE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_SPECS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_SPECS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_COMP, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_COMP=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_MIPI_IN_SHORT, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_MIPI_IN_SHORT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_LANE_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_LANE_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_VER_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_VER_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_NB_DATA_LANES, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_NB_DATA_LANES=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_IMG_UNPACKING_FORMAT, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_IMG_UNPACKING_FORMAT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_WAIT_AFTER_PACKET_END, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_WAIT_AFTER_PACKET_END=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_MULTIPLE_OF_5_HSYNC_EXTENSION_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_MULTIPLE_OF_5_HSYNC_EXTENSION_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_MULTIPLE_OF_5_HSYNC_EXTENSION_PADDING_DATA, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_MULTIPLE_OF_5_HSYNC_EXTENSION_PADDING_DATA=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_CHARACTERIZATION_MODE, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_CHARACTERIZATION_MODE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_BYTE2PIXEL_READ_TH, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_BYTE2PIXEL_READ_TH=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_VIRTUAL_CHANNEL, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_VIRTUAL_CHANNEL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_DATA_TYPE, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_DATA_TYPE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_FRAME_NUMBER, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_FRAME_NUMBER=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_LINE_NUMBER, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_LINE_NUMBER=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_DATA_FIELD, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_DATA_FIELD=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_WORD_COUNT, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_WORD_COUNT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_ECC_ERROR_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_ECC_ERROR_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_RX_DFV, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_RX_DFV=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_PIX_POS, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_PIX_POS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_LINE_POS, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_LINE_POS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_PIX_CNT, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_PIX_CNT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_LINE_CNT, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_LINE_CNT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_FRAME_CNT, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_FRAME_CNT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_ITPOINT_DFV, &read_data);
-	pr_info("[CAM]YUSHAN_ITPOINT_DFV=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_AUTO_RUN, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_AUTO_RUN=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_CONTROL, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_CONTROL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_LINE_LENGTH, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_LINE_LENGTH=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_FRAME_LENGTH, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_FRAME_LENGTH=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_ERROR_LINES_EOF_GAP, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_ERROR_LINES_EOF_GAP=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_0, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_1, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_2, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_3, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_4, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_5, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_6, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_7, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_8, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_8=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_9, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_9=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_10, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_10=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_11, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_11=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_12, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_12=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_13, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_13=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_WC_DI_14, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_WC_DI_14=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_IDP_GEN_DFV, &read_data);
-	pr_info("[CAM]YUSHAN_IDP_GEN_DFV=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_VERSION_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_VERSION_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLORBAR_WIDTH_BY4_M1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLORBAR_WIDTH_BY4_M1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_0, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_2, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_3, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_5, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_6, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_7, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_0, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_2, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_3, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_5, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_6, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_7, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_0, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_2, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_3, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_5, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_6, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_7, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_0, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_2, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_3, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_5, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_6, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_7, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_RX_DTCHK_DFV, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_RX_DTCHK_DFV=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_PATTERN_TYPE_REQ, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_PATTERN_TYPE_REQ=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_TPAT_DATA_RG, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_TPAT_DATA_RG=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_TPAT_DATA_BG, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_TPAT_DATA_BG=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_TPAT_HCUR_WP, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_TPAT_HCUR_WP=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_TPAT_VCUR_WP, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_TPAT_VCUR_WP=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_PATTERN_GEN_PATTERN_TYPE_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_PATTERN_GEN_PATTERN_TYPE_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_DCPX_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_DCPX_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_DCPX_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_DCPX_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_DCPX_ENABLE_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_DCPX_ENABLE_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_DCPX_MODE_REQ, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_DCPX_MODE_REQ=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_DCPX_MODE_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_DCPX_MODE_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_CPX_CTRL_REQ, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_CPX_CTRL_REQ=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_CPX_MODE_REQ, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_CPX_MODE_REQ=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_CPX_CTRL_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_CPX_CTRL_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_CPX_MODE_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_CPX_MODE_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_FM_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_FM_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_FM_PIX_WIDTH, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_FM_PIX_WIDTH=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_FM_GROUPED_PARAMETER_HOLD, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_FM_GROUPED_PARAMETER_HOLD=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_FM_EOF_INT_EN, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_FM_EOF_INT_EN=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_SMIA_FM_EOF_INT_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_SMIA_FM_EOF_INT_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_P2W_FIFO_WR_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_P2W_FIFO_WR_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_P2W_FIFO_WR_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_P2W_FIFO_WR_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_P2W_FIFO_RD_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_P2W_FIFO_RD_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_P2W_FIFO_RD_STATUS, &read_data);
-	pr_info("[CAM]YUSHAN_P2W_FIFO_RD_STATUS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_WRAPPER_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_WRAPPER_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_WRAPPER_THRESH, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_WRAPPER_THRESH=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_WRAPPER_CHAR_EN, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_WRAPPER_CHAR_EN=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_VERSION_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_VERSION_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_NUMBER_OF_LANES, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_NUMBER_OF_LANES=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LANE_MAPPING, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LANE_MAPPING=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_CONTROL, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_CONTROL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_INTERPACKET_DELAY, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_INTERPACKET_DELAY=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_STATUS_LINE_SIZE, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_STATUS_LINE_SIZE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_STATUS_LINE_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_STATUS_LINE_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_VC_CTRL_0, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_VC_CTRL_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_VC_CTRL_1, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_VC_CTRL_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_VC_CTRL_2, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_VC_CTRL_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_VC_CTRL_3, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_VC_CTRL_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_FRAME_NO_0, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_FRAME_NO_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_FRAME_NO_1, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_FRAME_NO_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_FRAME_NO_2, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_FRAME_NO_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_FRAME_NO_3, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_FRAME_NO_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_BYTE_COUNT, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_BYTE_COUNT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_CURRENT_DATA_IDENTIFIER, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_CURRENT_DATA_IDENTIFIER=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DFV, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DFV=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_0, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_0, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_0, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_1, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_1, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_1, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_2, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_2, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_2, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_3, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_3, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_3, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_4, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_4, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_4, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_5, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_5, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_5, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_5=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_6, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_6, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_6, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_6=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_7, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_7, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_7, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_7=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_8, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_8=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_8, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_8=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_8, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_8=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_9, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_9=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_9, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_9=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_9, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_9=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_10, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_10=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_10, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_10=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_10, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_10=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_11, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_11=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_11, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_11=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_11, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_11=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_12, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_12=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_12, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_12=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_12, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_12=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_13, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_13=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_13, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_13=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_13, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_13=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_14, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_14=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_14, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_14=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_14, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_14=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_PACKET_SIZE_15, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_PACKET_SIZE_15=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_DI_INDEX_CTRL_15, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_DI_INDEX_CTRL_15=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_CSI2_TX_LINE_NO_15, &read_data);
-	pr_info("[CAM]YUSHAN_CSI2_TX_LINE_NO_15=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_UIX4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_UIX4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_SWAP_PINS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_SWAP_PINS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_INVERT_HS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_INVERT_HS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_STOP_STATE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_STOP_STATE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_FORCE_TX_MODE_DL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_FORCE_TX_MODE_DL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_ULP_STATE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_ULP_STATE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_ULP_EXIT, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_ULP_EXIT=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_ESC_DL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_ESC_DL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_HSTX_SLEW, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_HSTX_SLEW=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_SKEW, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_SKEW=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_GPIO_CL, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_GPIO_CL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_GPIO_DL1, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_GPIO_DL1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_GPIO_DL2, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_GPIO_DL2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_GPIO_DL3, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_GPIO_DL3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_GPIO_DL4, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_GPIO_DL4=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_SPECS, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_SPECS=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_SLEW_RATE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_SLEW_RATE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_TEST_RESERVED, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_TEST_RESERVED=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_TCLK_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_TCLK_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_MIPI_TX_TCLK_POST_DELAY, &read_data);
-	pr_info("[CAM]YUSHAN_MIPI_TX_TCLK_POST_DELAY=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_BYPASS_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_BYPASS_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_BYPASS_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_BYPASS_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_BYPASS_LSTART_LEVEL, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_BYPASS_LSTART_LEVEL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_BYPASS_LSTOP_LEVEL, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_BYPASS_LSTOP_LEVEL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_BYPASS_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_BYPASS_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_BYPASS_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_BYPASS_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_BYPASS_MATCH0, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_BYPASS_MATCH0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_BYPASS_MATCH1, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_BYPASS_MATCH1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_BYPASS_MATCH2, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_BYPASS_MATCH2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_BYPASS_MATCH3, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_BYPASS_MATCH3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_DXO_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_DXO_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_DXO_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_DXO_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_DXO_LSTART_LEVEL, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_DXO_LSTART_LEVEL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LINE_FILTER_DXO_LSTOP_LEVEL, &read_data);
-	pr_info("[CAM]YUSHAN_LINE_FILTER_DXO_LSTOP_LEVEL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_DXO_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_DXO_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_DXO_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_DXO_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_DXO_MATCH0, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_DXO_MATCH0=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_DXO_MATCH1, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_DXO_MATCH1=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_DXO_MATCH2, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_DXO_MATCH2=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_DTFILTER_DXO_MATCH3, &read_data);
-	pr_info("[CAM]YUSHAN_DTFILTER_DXO_MATCH3=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_PRE_DXO_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_PRE_DXO_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_PRE_DXO_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_PRE_DXO_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_PRE_DXO_AUTOMATIC_CONTROL, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_PRE_DXO_AUTOMATIC_CONTROL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_PRE_DXO_H_SIZE, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_PRE_DXO_H_SIZE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_PRE_DXO_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_PRE_DXO_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_PRE_DXO_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_PRE_DXO_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_PRE_DXO_DFV, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_PRE_DXO_DFV=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_PRE_DXO_H_SIZE, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_PRE_DXO_H_SIZE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_PRE_DXO_READ_START, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_PRE_DXO_READ_START=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_POST_DXO_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_POST_DXO_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_POST_DXO_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_POST_DXO_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_POST_DXO_AUTOMATIC_CONTROL, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_POST_DXO_AUTOMATIC_CONTROL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_EOF_RESIZE_POST_DXO_H_SIZE, &read_data);
-	pr_info("[CAM]YUSHAN_EOF_RESIZE_POST_DXO_H_SIZE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LECCI_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_LECCI_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LECCI_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_LECCI_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LECCI_MIN_INTERLINE, &read_data);
-	pr_info("[CAM]YUSHAN_LECCI_MIN_INTERLINE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LECCI_OUT_BURST_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_LECCI_OUT_BURST_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LECCI_LINE_SIZE, &read_data);
-	pr_info("[CAM]YUSHAN_LECCI_LINE_SIZE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LECCI_BYPASS_CTRL, &read_data);
-	pr_info("[CAM]YUSHAN_LECCI_BYPASS_CTRL=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_POST_DXO_ENABLE, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_POST_DXO_ENABLE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_POST_DXO_VERSION, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_POST_DXO_VERSION=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_POST_DXO_DFV, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_POST_DXO_DFV=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_POST_DXO_H_SIZE, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_POST_DXO_H_SIZE=%x\n", read_data);
-	rawchip_spi_read_2B2B(YUSHAN_LBE_POST_DXO_READ_START, &read_data);
-	pr_info("[CAM]YUSHAN_LBE_POST_DXO_READ_START=%x\n", read_data);
-
-}
-
-#define YUSHAN_DOP_REGISTER_CHECK(reg_addr) udwSpiData = 0; SPI_Read(reg_addr + DXO_DOP_BASE_ADDR, 1, (uint8_t *)(&udwSpiData)); CDBG("[CAM] %s: %s: 0x%02x\n", __func__, #reg_addr, udwSpiData);
-#define YUSHAN_PDP_REGISTER_CHECK(reg_addr) udwSpiData = 0; SPI_Read(reg_addr + DXO_PDP_BASE_ADDR, 1, (uint8_t *)(&udwSpiData)); CDBG("[CAM] %s: %s: 0x%02x\n", __func__, #reg_addr, udwSpiData);
-#define YUSHAN_DPP_REGISTER_CHECK(reg_addr) udwSpiData = 0; SPI_Read(reg_addr + DXO_DPP_BASE_ADDR-0x8000, 1, (uint8_t *)(&udwSpiData)); CDBG("[CAM] %s: %s: 0x%02x\n", __func__, #reg_addr, udwSpiData);
-void Yushan_dump_Dxo(void)
-{
-	int i;
-	uint32_t	udwSpiData;
-	uint32_t	udwSpiBaseIndex;
-	uint8_t target_data;
-	uint32_t udwDxoBaseAddress;
-	int print_data;
-
-	pr_info("[CAM] %s: Start\n", __func__);
-
-	CDBG("[CAM] %s: **** DXO DOP CODE/CLIB CHECK ****\n", __func__);
-	for (i = 0, print_data = 0; i < p_yushan_regs->dopcode_size; i++) {
-		YUSHAN_DOP_REGISTER_CHECK(p_yushan_regs->dopcode_first_addr+i);
-		target_data = *((uint8_t *)p_yushan_regs->dopcode+i);
-		if (udwSpiData != target_data && (print_data <= 10 || print_data % 1000 == 0)) {
-			pr_err("Unmatching DOP code addr=%x data=%x target_data=%x\n",
-				p_yushan_regs->dopcode_first_addr+i, udwSpiData, target_data);
-			print_data++;
-		}
-	}
-	for (i = 0, print_data = 0; i < p_yushan_regs->dopclib_size; i++) {
-		YUSHAN_DOP_REGISTER_CHECK(p_yushan_regs->dopclib_first_addr+i);
-		target_data = *((uint8_t *)p_yushan_regs->dopclib+i);
-		if (udwSpiData != target_data && (print_data <= 10 || print_data % 1000 == 0)) {
-			pr_err("Unmatching DOP clib addr=%x data=%x target_data=%x\n",
-				p_yushan_regs->dopclib_first_addr+i, udwSpiData, target_data);
-			print_data++;
-		}
-	}
-
-	CDBG("[CAM] %s: **** DXO DPP CODE/CLIB CHECK ****\n", __func__);
-	udwSpiBaseIndex = 0x010000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-	udwDxoBaseAddress=(0x8000 + DXO_DPP_BASE_ADDR) - udwSpiBaseIndex; 
-	for (i = 0, print_data = 0; i < p_yushan_regs->dppcode_size; i++) {
-		YUSHAN_DPP_REGISTER_CHECK(p_yushan_regs->dppcode_first_addr+udwDxoBaseAddress+i-DXO_DPP_BASE_ADDR+0x8000);
-		target_data = *((uint8_t *)p_yushan_regs->dppcode+i);
-		if (udwSpiData != target_data && (print_data <= 10 || print_data % 1000 == 0)) {
-			pr_err("Unmatching DPP code addr=%x data=%x target_data=%x\n",
-				p_yushan_regs->dppcode_first_addr+i, udwSpiData, target_data);
-			print_data++;
-		}
-	}
-	udwSpiBaseIndex = DXO_DPP_BASE_ADDR + p_yushan_regs->dppclib_first_addr; 
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-	udwDxoBaseAddress = ((DXO_DPP_BASE_ADDR + p_yushan_regs->dppclib_first_addr) - udwSpiBaseIndex) + 0x8000; 
-	for (i = 0, print_data = 0; i < p_yushan_regs->dppclib_size; i++) {
-		YUSHAN_DPP_REGISTER_CHECK(udwDxoBaseAddress+i-DXO_DPP_BASE_ADDR+0x8000);
-		target_data = *((uint8_t *)p_yushan_regs->dppclib+i);
-		if (udwSpiData != target_data && (print_data <= 10 || print_data % 1000 == 0)) {
-			pr_err("Unmatching DPP clib addr=%x data=%x target_data=%x\n",
-				p_yushan_regs->dppclib_first_addr+i, udwSpiData, target_data);
-			print_data++;
-		}
-	}
-	udwSpiBaseIndex = 0x08000;
-	SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-	CDBG("[CAM] %s: **** DXO PDP CODE/CLIB CHECK ****\n", __func__);
-	for (i = 0, print_data = 0; i < p_yushan_regs->pdpcode_size; i++) {
-		YUSHAN_PDP_REGISTER_CHECK(p_yushan_regs->pdpcode_first_addr+i);
-		target_data = *((uint8_t *)p_yushan_regs->pdpcode+i);
-		if (udwSpiData != target_data && (print_data <= 10 || print_data % 1000 == 0)) {
-			pr_err("Unmatching PDP code addr=%x data=%x target_data=%x\n",
-				p_yushan_regs->pdpcode_first_addr+i, udwSpiData, target_data);
-			print_data++;
-		}
-	}
-	for (i = 0, print_data = 0; i < p_yushan_regs->pdpclib_size; i++) {
-		YUSHAN_PDP_REGISTER_CHECK(p_yushan_regs->pdpclib_first_addr+i);
-		target_data = *((uint8_t *)p_yushan_regs->pdpclib+i);
-		if (udwSpiData != target_data && (print_data <= 10 || print_data % 1000 == 0)) {
-			pr_err("Unmatching PDP clib addr=%x data=%x target_data=%x\n",
-				p_yushan_regs->pdpclib_first_addr+i, udwSpiData, target_data);
-			print_data++;
-		}
-	}
-
-	pr_info("[CAM] %s: End\n", __func__);
-}
-
-
diff --git a/drivers/media/video/msm/rawchip/Yushan_HTC_Functions.h b/drivers/media/video/msm/rawchip/Yushan_HTC_Functions.h
deleted file mode 100644
index af882d8..0000000
--- a/drivers/media/video/msm/rawchip/Yushan_HTC_Functions.h
+++ /dev/null
@@ -1,210 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef _YUSHAN_HTC_FUNCTIONS_H
-#define _YUSHAN_HTC_FUNCTIONS_H
-
-#include "Yushan_API.h"
-#include "Yushan_Platform_Specific.h"
-
-enum yushan_orientation_type {
-	YUSHAN_ORIENTATION_NONE,
-	YUSHAN_ORIENTATION_MIRROR,
-	YUSHAN_ORIENTATION_FLIP,
-	YUSHAN_ORIENTATION_MIRROR_FLIP,
-};
-
-struct yushan_reg_conf {
-	uint16_t addr;
-	uint8_t  data;
-};
-
-struct yushan_reg_t {
-	uint16_t pdpcode_first_addr;
-	uint8_t *pdpcode;
-	uint16_t pdpcode_size;
-
-	uint16_t pdpclib_first_addr;
-	uint8_t *pdpclib;
-	uint16_t pdpclib_size;
-
-	uint16_t pdpBootAddr;
-	uint16_t pdpStartAddr;
-
-	uint16_t dppcode_first_addr;
-	uint8_t *dppcode;
-	uint16_t dppcode_size;
-
-	uint16_t dppclib_first_addr;
-	uint8_t *dppclib;
-	uint16_t dppclib_size;
-
-	uint16_t dppBootAddr;
-	uint16_t dppStartAddr;
-
-	uint16_t dopcode_first_addr;
-	uint8_t *dopcode;
-	uint16_t dopcode_size;
-
-	uint16_t dopclib_first_addr;
-	uint8_t *dopclib;
-	uint16_t dopclib_size;
-
-	uint16_t dopBootAddr;
-	uint16_t dopStartAddr;
-};
-
-extern struct yushan_reg_t yushan_regs;
-
-
-struct yushan_reg_u_code_t {
-	uint16_t pdpcode_first_addr;
-	uint8_t *pdpcode;
-	uint16_t pdpcode_size;
-
-	uint16_t pdpBootAddr;
-	uint16_t pdpStartAddr;
-
-	uint16_t dppcode_first_addr;
-	uint8_t *dppcode;
-	uint16_t dppcode_size;
-
-	uint16_t dppBootAddr;
-	uint16_t dppStartAddr;
-
-	uint16_t dopcode_first_addr;
-	uint8_t *dopcode;
-	uint16_t dopcode_size;
-
-	uint16_t dopBootAddr;
-	uint16_t dopStartAddr;
-};
-
-extern struct yushan_reg_u_code_t yushan_u_code_r2;
-extern struct yushan_reg_u_code_t yushan_u_code_r3;
-
-
-
-struct yushan_reg_clib_t {
-	uint16_t pdpclib_first_addr;
-	uint8_t *pdpclib;
-	uint16_t pdpclib_size;
-
-	uint16_t dppclib_first_addr;
-	uint8_t *dppclib;
-	uint16_t dppclib_size;
-
-	uint16_t dopclib_first_addr;
-	uint8_t *dopclib;
-	uint16_t dopclib_size;
-};
-
-extern struct yushan_reg_clib_t yushan_regs_clib_s5k3h2yx;
-extern struct yushan_reg_clib_t yushan_regs_clib_imx175;
-extern struct yushan_reg_clib_t yushan_regs_clib_ov8838;
-extern struct yushan_reg_clib_t yushan_regs_clib_ar0260;
-extern struct yushan_reg_clib_t yushan_regs_clib_ov2722;
-extern struct yushan_reg_clib_t yushan_regs_clib_ov5693;
-extern struct yushan_reg_clib_t yushan_regs_clib_s5k6a2ya;
-
-struct rawchip_sensor_init_data {
-	const char *sensor_name;
-	uint8_t spi_clk;
-	uint8_t ext_clk;
-	uint8_t lane_cnt;
-	uint8_t orientation;
-	uint8_t use_ext_1v2;
-	uint16_t bitrate;
-	uint16_t width;
-	uint16_t height;
-	uint16_t blk_pixels;
-	uint16_t blk_lines;
-	uint16_t x_addr_start;
-	uint16_t y_addr_start;
-	uint16_t x_addr_end;
-	uint16_t y_addr_end;
-	uint16_t x_even_inc;
-	uint16_t x_odd_inc;
-	uint16_t y_even_inc;
-	uint16_t y_odd_inc;
-	uint8_t binning_rawchip;
-	uint8_t use_rawchip;
-};
-
-typedef enum {
-  RAWCHIP_NEWFRAME_ACK_NOCHANGE,
-  RAWCHIP_NEWFRAME_ACK_ENABLE,
-  RAWCHIP_NEWFRAME_ACK_DISABLE,
-} rawchip_newframe_ack_enable_t;
-
-typedef struct {
-  uint16_t gain;
-  uint16_t dig_gain;
-  uint16_t exp;
-} rawchip_aec_params_t;
-
-typedef struct {
-  uint8_t rg_ratio; 
-  uint8_t bg_ratio; 
-} rawchip_awb_params_t;
-
-typedef struct {
-  int update;
-  rawchip_aec_params_t aec_params;
-  rawchip_awb_params_t awb_params;
-} rawchip_update_aec_awb_params_t;
-
-typedef struct {
-  uint8_t active_number;
-  Yushan_AF_ROI_t sYushanAfRoi[5];
-} rawchip_af_params_t;
-
-typedef struct {
-  int update;
-  rawchip_af_params_t af_params;
-} rawchip_update_af_params_t;
-
-typedef struct {
-  uint8_t value;
-}Yushan_DXO_DOP_afStrategy_t;
-
-typedef struct
-{
-	Yushan_AF_Stats_t udwAfStats[5];
-	uint16_t  frameIdx;
-} rawchip_af_stats;
-
-void YushanPrintDxODOPAfStrategy(void);
-void YushanPrintFrameNumber(void);
-void YushanPrintVisibleLineSizeAndRoi(void);
-void YushanPrintImageInformation(void);
-
-void Reset_Yushan(void);
-void ASIC_Test(void);
-
-
-int Yushan_sensor_open_init(struct rawchip_sensor_init_data data);
-void Yushan_dump_register(void);
-void Yushan_dump_all_register(void);
-void Yushan_dump_Dxo(void);
-
-int Yushan_ContextUpdate_Wrapper(Yushan_New_Context_Config_t	sYushanNewContextConfig, Yushan_ImageChar_t	sImageNewChar_context);
-int Yushan_Get_Version(rawchip_dxo_version* dxo_version);
-int Yushan_Set_AF_Strategy(uint8_t afStrategy);
-bool_t Yushan_Dxo_Dop_Af_Run(Yushan_AF_ROI_t	*sYushanAfRoi, uint32_t *pAfStatsGreen, uint8_t	bRoiActiveNumber);
-int Yushan_get_AFSU(rawchip_af_stats* af_stats);
-
-int Yushan_Update_AEC_AWB_Params(rawchip_update_aec_awb_params_t *update_aec_awb_params);
-int Yushan_Update_AF_Params(rawchip_update_af_params_t *update_af_params);
-int Yushan_Update_3A_Params(rawchip_newframe_ack_enable_t enable_newframe_ack);
-
-#endif
diff --git a/drivers/media/video/msm/rawchip/Yushan_Platform_Specific.c b/drivers/media/video/msm/rawchip/Yushan_Platform_Specific.c
deleted file mode 100644
index dfeb6cc..0000000
--- a/drivers/media/video/msm/rawchip/Yushan_Platform_Specific.c
+++ /dev/null
@@ -1,905 +0,0 @@
-#include "yushan_registermap.h"
-#include "DxODOP_regMap.h"
-#include "DxODPP_regMap.h"
-#include "DxOPDP_regMap.h"
-#include "Yushan_API.h"
-#include "Yushan_Platform_Specific.h"
-
-#include <mach/board.h>
-#include <linux/platform_device.h>
-
-#include <mach/gpio.h>
-
-#ifdef YUSHAN_PLATFORM_SPECIFIC_DEBUG
-#define CDBG(fmt, args...) pr_debug(fmt, ##args)
-#else
-#define CDBG(fmt, args...) do { } while (0)
-#endif
-
-struct yushan_int_t {
-	spinlock_t yushan_spin_lock;
-	wait_queue_head_t yushan_wait;
-};
-
-uint32_t	udwProtoInterruptList_Pad0[3];
-uint32_t	udwProtoInterruptList_Pad1[3];
-
-extern int rawchip_intr0, rawchip_intr1;
-extern atomic_t interrupt, interrupt2;
-extern struct yushan_int_t yushan_int;
-
-bool_t Yushan_WaitForInterruptEvent (uint8_t bInterruptId ,uint32_t udwTimeOut)
-{
-
-	int					 counterLimit;
-	
-	bool_t				fStatus = 0; 
-	int rc = 0;
-	int i;
-
-	switch ( udwTimeOut )
-	{
-		case TIME_5MS :
-			counterLimit=100 ;
-			break;
-		case TIME_10MS :
-			counterLimit=200 ;
-			break;
-		case TIME_20MS :
-			counterLimit=400 ;
-			break;
-		case TIME_50MS :
-			counterLimit=1000 ;
-			break;
-		case TIME_100MS :
-			counterLimit=2000 ;
-			break;
-		default :
-			counterLimit=50 ;
-			break;
-	}
-
-	fStatus = Yushan_CheckForInterruptIDInList(bInterruptId, udwProtoInterruptList_Pad0);		
-	CDBG("[CAM] %s Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-	if ((fStatus)) {
-		
-		Yushan_AddnRemoveIDInList(bInterruptId, udwProtoInterruptList_Pad0, DEL_INTR_FROM_LIST); 
-		
-		CDBG("[CAM] %s Del Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-		return SUCCESS;
-	}
-
-	for (i = 0; i < 10; i++) {
-	CDBG("[CAM] %s begin interrupt wait\n",__func__);
-	
-	
-	rc = wait_event_timeout(yushan_int.yushan_wait,
-	atomic_read(&interrupt),
-		counterLimit/200);
-	CDBG("[CAM] %s end interrupt: %d; interrupt id:%d wait rc=%d\n",__func__, atomic_read(&interrupt), bInterruptId, rc);
-	if(atomic_read(&interrupt))
-	{
-		
-		atomic_set(&interrupt, 0);
-		Yushan_Interrupt_Manager_Pad0();
-		fStatus = Yushan_CheckForInterruptIDInList(bInterruptId, udwProtoInterruptList_Pad0);		
-		CDBG("[CAM] %s Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-		if (fStatus) {
-		
-		Yushan_AddnRemoveIDInList(bInterruptId, udwProtoInterruptList_Pad0, DEL_INTR_FROM_LIST); 
-		
-		CDBG("[CAM] %s Del Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-		return SUCCESS;
-		}
-	}
-	mdelay(1);
-	pr_info("retry getting interrupt\n");
-	}
-	return FAILURE;
-}
-
-bool_t Yushan_WaitForInterruptEvent2 (uint8_t bInterruptId ,uint32_t udwTimeOut)
-{
-
-	int					 counterLimit;
-	
-	bool_t				fStatus = 0; 
-	int rc = 0;
-	int i;
-
-	switch ( udwTimeOut )
-	{
-		case TIME_5MS :
-			counterLimit=100 ;
-			break;
-		case TIME_10MS :
-			counterLimit=200 ;
-			break;
-		case TIME_20MS :
-			counterLimit=400 ;
-			break;
-		case TIME_50MS :
-			counterLimit=1000 ;
-			break;
-		case TIME_100MS :
-			counterLimit=2000 ;
-			break;
-		default :
-			counterLimit=50 ;
-			break;
-	}
-
-	fStatus = Yushan_CheckForInterruptIDInList(bInterruptId, udwProtoInterruptList_Pad1);		
-	CDBG("[CAM] %s Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-	if ((fStatus)) {
-		
-		Yushan_AddnRemoveIDInList(bInterruptId, udwProtoInterruptList_Pad1, DEL_INTR_FROM_LIST); 
-		
-		CDBG("[CAM] %s Del Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-		return SUCCESS;
-	}
-
-	for (i = 0; i < 10; i++) {
-	CDBG("[CAM] %s begin interrupt wait\n",__func__);
-	
-	
-	rc = wait_event_timeout(yushan_int.yushan_wait,
-	atomic_read(&interrupt2),
-		counterLimit/200);
-	CDBG("[CAM] %s end interrupt: %d; interrupt id:%d wait  rc=%d\n",__func__, atomic_read(&interrupt2), bInterruptId, rc);
-	if(atomic_read(&interrupt2))
-	{
-		
-		atomic_set(&interrupt2, 0);
-		Yushan_Interrupt_Manager_Pad1();
-		fStatus = Yushan_CheckForInterruptIDInList(bInterruptId, udwProtoInterruptList_Pad1);		
-		CDBG("[CAM] %s Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-		if (fStatus) {
-		
-		Yushan_AddnRemoveIDInList(bInterruptId, udwProtoInterruptList_Pad1, DEL_INTR_FROM_LIST); 
-		
-		CDBG("[CAM] %s Del Yushan_CheckForInterruptIDInList:%d \n",__func__, fStatus);
-		return SUCCESS;
-		}
-	}
-	mdelay(1);
-	pr_info("retry getting interrupt\n");
-	}
-	return FAILURE;
-}
-
-
-
-uint8_t Yushan_parse_interrupt(int intr_pad, int error_times[TOTAL_INTERRUPT_COUNT])
-{
-
-	uint8_t		bCurrentInterruptID = 0;
-	uint8_t		bAssertOrDeassert = 0, bInterruptWord = 0;
-	uint32_t	*udwListOfInterrupts;
-	uint8_t	bSpiData;
-	uint32_t udwSpiBaseIndex;
-	uint8_t interrupt_type = 0;
-
-	udwListOfInterrupts	= kmalloc(96, GFP_KERNEL);
-
-	
-	
-	Yushan_Intr_Status_Read((uint8_t *)udwListOfInterrupts, intr_pad);
-
-	
-	Yushan_Intr_Status_Clear((uint8_t *) udwListOfInterrupts);
-
-	
-	while (bCurrentInterruptID < (TOTAL_INTERRUPT_COUNT)) {
-		bAssertOrDeassert = ((udwListOfInterrupts[bInterruptWord])>>(bCurrentInterruptID%32))&0x01;
-
-		if (bAssertOrDeassert) {
-			CDBG("[CAM] %s:bCurrentInterruptID:%d\n", __func__, bCurrentInterruptID+1);
-			switch (bCurrentInterruptID+1) {
-			case EVENT_PDP_EOF_EXECCMD :
-				CDBG("[CAM] %s:[AF_INT]EVENT_PDP_EOF_EXECCMD\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_PDP_EOF_EXECCMD;
-				break;
-
-			case EVENT_DPP_EOF_EXECCMD :
-				CDBG("[CAM] %s:[AF_INT]EVENT_DPP_EOF_EXECCMD\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_DPP_EOF_EXECCMD;
-				break;
-
-			case EVENT_DOP7_EOF_EXECCMD :
-				CDBG("[CAM] %s:[AF_INT]EVENT_DOP7_EOF_EXECCMD\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_DOP_EOF_EXECCMD;
-				break;
-
-			case EVENT_DXODOP7_NEWFRAMEPROC_ACK :
-				CDBG("[CAM] %s:[AF_INT]EVENT_DXODOP7_NEWFRAMEPROC_ACK\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_NEW_FRAME;
-				break;
-
-			case EVENT_CSI2RX_ECC_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_CSI2RX_ECC_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_CSI2RX_CHKSUM_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_CSI2RX_CHKSUM_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_CSI2RX_SYNCPULSE_MISSED :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_CSI2RX_SYNCPULSE_MISSED\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_DXOPDP_NEWFRAME_ERR :
-				SPI_Read(DXO_PDP_BASE_ADDR+DxOPDP_error_code_7_0, 1, &bSpiData);
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_DXOPDP_NEWFRAME_ERR, error code =%d\n", __func__, bSpiData);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_DXODPP_NEWFRAME_ERR :
-				udwSpiBaseIndex = 0x010000;
-				SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-				SPI_Read(DXO_DPP_BASE_ADDR+DxODPP_error_code_7_0-0x8000, 1, &bSpiData);
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_DXODPP_NEWFRAME_ERR, error code =%d\n", __func__, bSpiData);
-
-				udwSpiBaseIndex = 0x08000;
-				SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_DXODOP7_NEWFRAME_ERR :
-				SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_error_code_7_0, 1, &bSpiData);
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_DXODOP7_NEWFRAME_ERR, error code =%d\n", __func__, bSpiData);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_CSI2TX_SP_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_CSI2TX_SP_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_CSI2TX_LP_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_CSI2TX_LP_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_CSI2TX_DATAINDEX_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_CSI2TX_DATAINDEX_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_SOFT_DL1 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL1\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_HARD_DL1 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL1\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_EOT_DL1 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL1\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_ESC_DL1 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL1\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_CTRL_DL1 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL1\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_SOFT_DL2 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL2\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_HARD_DL2 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL2\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_EOT_DL2 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL2\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_ESC_DL2 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL2\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_CTRL_DL2 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL2\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_SOFT_DL3 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL3\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_HARD_DL3 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL3\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_EOT_DL3 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL3\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_ESC_DL3 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL3\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_CTRL_DL3:
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL3\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_SOFT_DL4 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL4\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_SOT_HARD_DL4 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL4\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_EOT_DL4:
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL4\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_ESC_DL4:
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL4\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_PHY_ERR_CTRL_DL4 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL4\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TXPHY_CTRL_ERR_D1 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D1\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TXPHY_CTRL_ERR_D2 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D2\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TXPHY_CTRL_ERR_D3 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D3\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TXPHY_CTRL_ERR_D4 :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D4\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_UNMATCHED_IMAGE_SIZE_ERROR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_UNMATCHED_IMAGE_SIZE_ERROR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case PRE_DXO_WRAPPER_PROTOCOL_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]PRE_DXO_WRAPPER_PROTOCOL_ERR\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case PRE_DXO_WRAPPER_FIFO_OVERFLOW :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]PRE_DXO_WRAPPER_FIFO_OVERFLOW\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_BAD_FRAME_DETECTION :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_BAD_FRAME_DETECTION\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TX_DATA_FIFO_OVERFLOW :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TX_DATA_FIFO_OVERFLOW\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TX_INDEX_FIFO_OVERFLOW :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TX_INDEX_FIFO_OVERFLOW\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_0_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_0_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_1_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_1_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_2_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_2_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_3_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_3_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_4_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_4_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_5_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_5_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_6_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_6_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_RX_CHAR_COLOR_BAR_7_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_7_ERR\n", __func__);
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_POST_DXO_WRAPPER_PROTOCOL_ERR :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_POST_DXO_WRAPPER_PROTOCOL_ERR\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_POST_DXO_WRAPPER_FIFO_OVERFLOW :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_POST_DXO_WRAPPER_FIFO_OVERFLOW\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TX_DATA_UNDERFLOW :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TX_DATA_UNDERFLOW\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			case EVENT_TX_INDEX_UNDERFLOW :
-				error_times[bCurrentInterruptID]++;
-				if (error_times[bCurrentInterruptID] <= 10 || error_times[bCurrentInterruptID] % 1000 == 0)
-				pr_err("[CAM] %s:[ERR]EVENT_TX_INDEX_UNDERFLOW\n", __func__);
-				
-				interrupt_type |= RAWCHIP_INT_TYPE_ERROR;
-				break;
-
-			}
-		}
-		bCurrentInterruptID++;
-
-		if (bCurrentInterruptID%32 == 0)
-			bInterruptWord++;
-	}
-
-	kfree(udwListOfInterrupts);
-
-	if (intr_pad == INTERRUPT_PAD_0)
-		enable_irq(rawchip_intr0);
-	else if (intr_pad == INTERRUPT_PAD_1)
-		enable_irq(rawchip_intr1);
-
-	return interrupt_type;
-}
-
-void Yushan_Interrupt_Manager_Pad0(void)
-{
-
-	uint8_t		bCurrentInterruptID = 0;
-	uint8_t		bAssertOrDeassert=0, bInterruptWord = 0;
-	uint32_t	*udwListOfInterrupts;
-	uint8_t	bSpiData;
-	uint32_t udwSpiBaseIndex;
-
-	udwListOfInterrupts	= (uint32_t *) kmalloc(96/8, GFP_KERNEL);
-
-	
-	
-	Yushan_Intr_Status_Read ((uint8_t *)udwListOfInterrupts, INTERRUPT_PAD_0);
-
-	
-	Yushan_Intr_Status_Clear((uint8_t *) udwListOfInterrupts);
-
-	
-	while (bCurrentInterruptID < (TOTAL_INTERRUPT_COUNT)) {
-		bAssertOrDeassert = ((udwListOfInterrupts[bInterruptWord])>>(bCurrentInterruptID%32))&0x01;
-
-		if (bAssertOrDeassert) {
-			Yushan_AddnRemoveIDInList((uint8_t)(bCurrentInterruptID+1), udwProtoInterruptList_Pad0, ADD_INTR_TO_LIST);
-
-			CDBG("[CAM] %s:bCurrentInterruptID:%d\n",__func__, bCurrentInterruptID+1);
-			switch (bCurrentInterruptID + 1) {
-				case EVENT_PDP_EOF_EXECCMD :
-					CDBG("[CAM] %s:[AF_INT]EVENT_PDP_EOF_EXECCMD\n", __func__);
-					break;
-
-				case EVENT_DPP_EOF_EXECCMD :
-					CDBG("[CAM] %s:[AF_INT]EVENT_DPP_EOF_EXECCMD\n", __func__);
-					break;
-
-				case EVENT_DOP7_EOF_EXECCMD :
-					CDBG("[CAM] %s:[AF_INT]EVENT_DOP7_EOF_EXECCMD\n", __func__);
-					break;
-
-				case EVENT_DXODOP7_NEWFRAMEPROC_ACK :
-					CDBG("[CAM] %s:[AF_INT]EVENT_DXODOP7_NEWFRAMEPROC_ACK\n", __func__);
-					break;
-				case EVENT_CSI2RX_ECC_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_CSI2RX_ECC_ERR\n",__func__);
-					break;
-				case EVENT_CSI2RX_CHKSUM_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_CSI2RX_CHKSUM_ERR\n",__func__);
-					break;
-				case EVENT_CSI2RX_SYNCPULSE_MISSED :
-					pr_err("[CAM] %s:[ERR]EVENT_CSI2RX_SYNCPULSE_MISSED\n",__func__);
-					break;
-				case EVENT_DXOPDP_NEWFRAME_ERR :
-				{
-					SPI_Read(DXO_PDP_BASE_ADDR+DxOPDP_error_code_7_0,1,&bSpiData);
-					pr_err("[CAM] %s:[ERR]EVENT_DXOPDP_NEWFRAME_ERR, error code =%d\n",__func__, bSpiData);
-					
-					break;
-				}
-				case EVENT_DXODPP_NEWFRAME_ERR :
-				{
-					udwSpiBaseIndex = 0x010000;
-					SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-
-					SPI_Read(DXO_DPP_BASE_ADDR+DxODPP_error_code_7_0-0x8000,1,&bSpiData);
-					pr_err("[CAM] %s:[ERR]EVENT_DXODPP_NEWFRAME_ERR, error code =%d\n",__func__, bSpiData);
-
-					udwSpiBaseIndex = 0x08000;
-					SPI_Write(YUSHAN_HOST_IF_SPI_BASE_ADDRESS, 4, (uint8_t *)(&udwSpiBaseIndex));
-					
-					break;
-				}
-				case EVENT_DXODOP7_NEWFRAME_ERR :
-				{
-					SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_error_code_7_0,1,&bSpiData);
-					pr_err("[CAM] %s:[ERR]EVENT_DXODOP7_NEWFRAME_ERR, error code =%d\n",__func__, bSpiData);
-					
-					break;
-				}
-				case EVENT_CSI2TX_SP_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_CSI2TX_SP_ERR\n",__func__);
-					break;
-				case EVENT_CSI2TX_LP_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_CSI2TX_LP_ERR\n",__func__);
-					break;
-				case EVENT_CSI2TX_DATAINDEX_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_CSI2TX_DATAINDEX_ERR\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_SOFT_DL1 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL1\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_HARD_DL1 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL1\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_EOT_DL1 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL1\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_ESC_DL1 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL1\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_CTRL_DL1 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL1\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_SOFT_DL2 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL2\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_HARD_DL2 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL2\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_EOT_DL2 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL2\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_ESC_DL2 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL2\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_CTRL_DL2 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL2\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_SOFT_DL3 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL3\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_HARD_DL3 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL3\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_EOT_DL3 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL3\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_ESC_DL3 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL3\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_CTRL_DL3:
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL3\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_SOFT_DL4 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_SOFT_DL4\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_SOT_HARD_DL4 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_SOT_HARD_DL4\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_EOT_DL4:
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_EOT_DL4\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_ESC_DL4:
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_ESC_DL4\n",__func__);
-					break;
-				case EVENT_RX_PHY_ERR_CTRL_DL4 :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_PHY_ERR_CTRL_DL4\n",__func__);
-					break;
-				case EVENT_TXPHY_CTRL_ERR_D1 :
-					pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D1\n",__func__);
-					break;
-				case EVENT_TXPHY_CTRL_ERR_D2 :
-					pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D2\n",__func__);
-					break;
-				case EVENT_TXPHY_CTRL_ERR_D3 :
-					pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D3\n",__func__);
-					break;
-				case EVENT_TXPHY_CTRL_ERR_D4 :
-					pr_err("[CAM] %s:[ERR]EVENT_TXPHY_CTRL_ERR_D4\n",__func__);
-					break;
-				case EVENT_UNMATCHED_IMAGE_SIZE_ERROR :
-					pr_err("[CAM] %s:[ERR]EVENT_UNMATCHED_IMAGE_SIZE_ERROR\n",__func__);
-					break;
-				case PRE_DXO_WRAPPER_PROTOCOL_ERR :
-					pr_err("[CAM] %s:[ERR]PRE_DXO_WRAPPER_PROTOCOL_ERR\n",__func__);
-					
-					break;
-				case PRE_DXO_WRAPPER_FIFO_OVERFLOW :
-					pr_err("[CAM] %s:[ERR]PRE_DXO_WRAPPER_FIFO_OVERFLOW\n",__func__);
-					
-					break;
-				case EVENT_BAD_FRAME_DETECTION :
-					pr_err("[CAM] %s:[ERR]EVENT_BAD_FRAME_DETECTION\n",__func__);
-					break;
-				case EVENT_TX_DATA_FIFO_OVERFLOW :
-					pr_err("[CAM] %s:[ERR]EVENT_TX_DATA_FIFO_OVERFLOW\n",__func__);
-					
-					break;
-				case EVENT_TX_INDEX_FIFO_OVERFLOW :
-					pr_err("[CAM] %s:[ERR]EVENT_TX_INDEX_FIFO_OVERFLOW\n",__func__);
-					
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_0_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_0_ERR\n",__func__);
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_1_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_1_ERR\n",__func__);
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_2_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_2_ERR\n",__func__);
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_3_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_3_ERR\n",__func__);
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_4_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_4_ERR\n",__func__);
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_5_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_5_ERR\n",__func__);
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_6_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_6_ERR\n",__func__);
-					break;
-				case EVENT_RX_CHAR_COLOR_BAR_7_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_RX_CHAR_COLOR_BAR_7_ERR\n",__func__);
-					break;
-				case EVENT_POST_DXO_WRAPPER_PROTOCOL_ERR :
-					pr_err("[CAM] %s:[ERR]EVENT_POST_DXO_WRAPPER_PROTOCOL_ERR\n",__func__);
-					
-					break;
-				case EVENT_POST_DXO_WRAPPER_FIFO_OVERFLOW :
-					pr_err("[CAM] %s:[ERR]EVENT_POST_DXO_WRAPPER_FIFO_OVERFLOW\n",__func__);
-					
-					break;
-				case EVENT_TX_DATA_UNDERFLOW :
-					pr_err("[CAM] %s:[ERR]EVENT_TX_DATA_UNDERFLOW\n",__func__);
-					
-					break;
-				case EVENT_TX_INDEX_UNDERFLOW :
-					pr_err("[CAM] %s:[ERR]EVENT_TX_INDEX_UNDERFLOW\n",__func__);
-					
-					break;
-			}
-		}
-		bCurrentInterruptID++;
-
-		if(bCurrentInterruptID%32==0)
-			bInterruptWord++;
-	}
-
-	kfree(udwListOfInterrupts);
-
-	enable_irq(rawchip_intr0);
-
-}
-
-
-void Yushan_Interrupt_Manager_Pad1(void)
-{
-
-	uint8_t		bCurrentInterruptID = 0;
-	uint8_t		bAssertOrDeassert=0, bInterruptWord = 0;
-	uint32_t	*udwListOfInterrupts;
-	uint8_t	bSpiData;
-
-	udwListOfInterrupts	= (uint32_t *) kmalloc(96/8, GFP_KERNEL);
-
-	
-	
-	Yushan_Intr_Status_Read ((uint8_t *)udwListOfInterrupts, INTERRUPT_PAD_1);
-
-
-	
-	Yushan_Intr_Status_Clear((uint8_t *) udwListOfInterrupts);
-#if 1
-
-	
-	while (bCurrentInterruptID < (TOTAL_INTERRUPT_COUNT)) {
-		bAssertOrDeassert = ((udwListOfInterrupts[bInterruptWord])>>(bCurrentInterruptID%32))&0x01;
-
-		if(bAssertOrDeassert)
-		{
-			Yushan_AddnRemoveIDInList((uint8_t)(bCurrentInterruptID+1), udwProtoInterruptList_Pad1, ADD_INTR_TO_LIST);
-#if 1
-			CDBG("[CAM] %s:bCurrentInterruptID:%d\n", __func__, bCurrentInterruptID+1);
-			switch(bCurrentInterruptID+1)
-			{
-				case EVENT_DXODOP7_NEWFRAMEPROC_ACK :
-					pr_info("[CAM] %s:[AF_INT]EVENT_DXODOP7_NEWFRAMEPROC_ACK\n", __func__);
-					break;
-				case EVENT_DXODOP7_NEWFRAME_ERR :
-					{
-						SPI_Read(DXO_DOP_BASE_ADDR+DxODOP_error_code_7_0,1,&bSpiData);
-						pr_err("[CAM] %s:[ERR]EVENT_DXODOP7_NEWFRAME_ERR, error code =%d\n",__func__, bSpiData);
-						
-						break;
-					}
-			}
-#endif
-		}
-		bCurrentInterruptID++;
-
-		if(bCurrentInterruptID%32==0)
-			bInterruptWord++;
-	}
-#endif
-
-	kfree(udwListOfInterrupts);
-
-	
-	enable_irq((rawchip_intr1));
-
-}
diff --git a/drivers/media/video/msm/rawchip/Yushan_Platform_Specific.h b/drivers/media/video/msm/rawchip/Yushan_Platform_Specific.h
deleted file mode 100644
index f135d6a..0000000
--- a/drivers/media/video/msm/rawchip/Yushan_Platform_Specific.h
+++ /dev/null
@@ -1,30 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#define ST_SPECIFIC							1
-#ifndef _YUSHAN_PLATFORM_SPECIFIC_H
-#define _YUSHAN_PLATFORM_SPECIFIC_H
-
-
-#define RAWCHIP_INT_TYPE_ERROR (0x01<<0)
-#define RAWCHIP_INT_TYPE_NEW_FRAME (0x01<<1)
-#define RAWCHIP_INT_TYPE_PDP_EOF_EXECCMD (0x01<<2)
-#define RAWCHIP_INT_TYPE_DPP_EOF_EXECCMD (0x01<<3)
-#define RAWCHIP_INT_TYPE_DOP_EOF_EXECCMD (0x01<<4)
-
-bool_t Yushan_WaitForInterruptEvent (uint8_t bInterruptId ,uint32_t udwTimeOut);
-bool_t Yushan_WaitForInterruptEvent2 (uint8_t bInterruptId ,uint32_t udwTimeOut);
-uint8_t Yushan_parse_interrupt(int intr_pad, int error_times[TOTAL_INTERRUPT_COUNT]);
-void Yushan_Interrupt_Manager_Pad0(void);
-void Yushan_Interrupt_Manager_Pad1(void);
-
-#endif
diff --git a/drivers/media/video/msm/rawchip/rawchip.c b/drivers/media/video/msm/rawchip/rawchip.c
deleted file mode 100644
index ec59cc5..0000000
--- a/drivers/media/video/msm/rawchip/rawchip.c
+++ /dev/null
@@ -1,1005 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include "rawchip.h"
-
-#define MSM_RAWCHIP_NAME "rawchip"
-
-static struct rawchip_id_info_t yushan_id_info = {
-	.rawchip_id_reg_addr = 0x5c04,
-	.rawchip_id = 0x02030200,
-};
-
-static struct rawchip_info_t rawchip_info = {
-	.rawchip_id_info = &yushan_id_info,
-};
-
-static struct rawchip_ctrl *rawchipCtrl = NULL;
-
-static struct class *rawchip_class;
-static dev_t rawchip_devno;
-extern Yushan_ImageChar_t	sImageChar_context;
-
-int rawchip_intr0, rawchip_intr1;
-atomic_t interrupt, interrupt2;
-struct yushan_int_t yushan_int;
-struct yushan_int_t {
-	spinlock_t yushan_spin_lock;
-	wait_queue_head_t yushan_wait;
-};
-
-static irqreturn_t yushan_irq_handler(int irq, void *dev_id){
-
-	unsigned long flags;
-
-	disable_irq_nosync(rawchipCtrl->pdata->rawchip_intr0);
-
-	
-	spin_lock_irqsave(&yushan_int.yushan_spin_lock,flags);
-	
-	
-	
-	
-	atomic_set(&interrupt, 1);
-	CDBG("[CAM] %s after detect INT0, interrupt:%d \n",__func__, atomic_read(&interrupt));
-	
-	
-	
-	
-	wake_up(&yushan_int.yushan_wait);
-	spin_unlock_irqrestore(&yushan_int.yushan_spin_lock,flags);
-
-	return IRQ_HANDLED;
-}
-
-static irqreturn_t yushan_irq_handler2(int irq, void *dev_id){
-
-	unsigned long flags;
-
-	disable_irq_nosync(rawchipCtrl->pdata->rawchip_intr1);
-
-	spin_lock_irqsave(&yushan_int.yushan_spin_lock,flags);
-	atomic_set(&interrupt2, 1);
-	CDBG("[CAM] %s after detect INT1, interrupt:%d \n", __func__, atomic_read(&interrupt2));
-	wake_up(&yushan_int.yushan_wait);
-	spin_unlock_irqrestore(&yushan_int.yushan_spin_lock,flags);
-
-	return IRQ_HANDLED;
-}
-
-int rawchip_set_size(struct rawchip_sensor_data data)
-{
-	int rc = -1;
-	struct msm_camera_rawchip_info *pdata = rawchipCtrl->pdata;
-	struct rawchip_sensor_init_data rawchip_init_data;
-	Yushan_New_Context_Config_t sYushanNewContextConfig;
-	Yushan_ImageChar_t	sImageChar_context;
-	int bit_cnt = 1;
-	static uint32_t pre_pixel_clk = 0;
-	uint8_t orientation;
-	CDBG("%s", __func__);
-
-	if (data.mirror_flip == CAMERA_SENSOR_MIRROR_FLIP)
-		orientation = YUSHAN_ORIENTATION_MIRROR_FLIP;
-	else if (data.mirror_flip == CAMERA_SENSOR_MIRROR)
-		orientation = YUSHAN_ORIENTATION_MIRROR;
-	else if (data.mirror_flip == CAMERA_SENSOR_FLIP)
-		orientation = YUSHAN_ORIENTATION_FLIP;
-	else
-		orientation = YUSHAN_ORIENTATION_NONE;
-
-	if (rawchipCtrl->rawchip_init == 0 || pre_pixel_clk != data.pixel_clk) {
-		pre_pixel_clk = data.pixel_clk;
-		switch (data.datatype) {
-		case CSI_RAW8:
-			bit_cnt = 8;
-			break;
-		case CSI_RAW10:
-			bit_cnt = 10;
-			break;
-		case CSI_RAW12:
-			bit_cnt = 12;
-			break;
-		}
-		rawchip_init_data.sensor_name = data.sensor_name;
-		rawchip_init_data.spi_clk = pdata->rawchip_spi_freq;
-		rawchip_init_data.ext_clk = pdata->rawchip_mclk_freq;
-		rawchip_init_data.lane_cnt = data.lane_cnt;
-		rawchip_init_data.orientation = orientation;
-		rawchip_init_data.use_ext_1v2 = pdata->rawchip_use_ext_1v2();
-		rawchip_init_data.bitrate = (data.pixel_clk * bit_cnt / data.lane_cnt) / 1000000;
-		rawchip_init_data.width = data.width;
-		rawchip_init_data.height = data.height;
-		rawchip_init_data.blk_pixels = data.line_length_pclk - data.width;
-		rawchip_init_data.blk_lines = data.frame_length_lines - data.height;
-		rawchip_init_data.x_addr_start = data.x_addr_start;
-		rawchip_init_data.y_addr_start = data.y_addr_start;
-		rawchip_init_data.x_addr_end = data.x_addr_end;
-		rawchip_init_data.y_addr_end = data.y_addr_end;
-		rawchip_init_data.x_even_inc = data.x_even_inc;
-		rawchip_init_data.x_odd_inc = data.x_odd_inc;
-		rawchip_init_data.y_even_inc = data.y_even_inc;
-		rawchip_init_data.y_odd_inc = data.y_odd_inc;
-		rawchip_init_data.binning_rawchip = data.binning_rawchip;
-
-		pr_info("rawchip init spi_clk=%d ext_clk=%d lane_cnt=%d bitrate=%d %d %d %d %d\n",
-			rawchip_init_data.spi_clk, rawchip_init_data.ext_clk,
-			rawchip_init_data.lane_cnt, rawchip_init_data.bitrate,
-			rawchip_init_data.width, rawchip_init_data.height,
-			rawchip_init_data.blk_pixels, rawchip_init_data.blk_lines);
-		if (rawchipCtrl->rawchip_init) {
-			rc = gpio_request(pdata->rawchip_reset, "rawchip");
-			if (rc < 0) {
-				pr_err("GPIO(%d) request failed\n", pdata->rawchip_reset);
-				return rc;
-			}
-			gpio_direction_output(pdata->rawchip_reset, 0);
-			mdelay(1);
-			gpio_direction_output(pdata->rawchip_reset, 1);
-			gpio_free(pdata->rawchip_reset);
-			
-		}
-		rawchip_init_data.use_rawchip = data.use_rawchip;
-		rc = Yushan_sensor_open_init(rawchip_init_data);
-		rawchipCtrl->rawchip_init = 1;
-		return rc;
-	}
-
-	pr_info("rawchip set size %d %d %d %d\n",
-		data.width, data.height, data.line_length_pclk, data.frame_length_lines);
-
-	sYushanNewContextConfig.uwActivePixels = data.width;
-	sYushanNewContextConfig.uwLineBlank = data.line_length_pclk - data.width;
-	sYushanNewContextConfig.uwActiveFrameLength = data.height;
-	sYushanNewContextConfig.uwPixelFormat = 0x0A0A;
-
-	sImageChar_context.bImageOrientation = orientation;
-	sImageChar_context.uwXAddrStart = data.x_addr_start;
-	sImageChar_context.uwYAddrStart = data.y_addr_start;
-	sImageChar_context.uwXAddrEnd= data.x_addr_end;
-	sImageChar_context.uwYAddrEnd= data.y_addr_end;
-	sImageChar_context.uwXEvenInc = data.x_even_inc;
-	sImageChar_context.uwXOddInc = data.x_odd_inc;
-	sImageChar_context.uwYEvenInc = data.y_even_inc;
-	sImageChar_context.uwYOddInc = data.y_odd_inc;
-	sImageChar_context.bBinning = data.binning_rawchip;
-
-	rc = Yushan_ContextUpdate_Wrapper(sYushanNewContextConfig, sImageChar_context);
-	return rc;
-}
-
-static int rawchip_get_dxoprc_frameSetting(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-	rawchip_dxo_frameSetting frameSetting;
-	int rc = 0;
-	struct rawchip_stats_event_ctrl se;
-	int timeout;
-
-	CDBG("%s\n *should be only once*", __func__);
-
-	frameSetting.orientation	= sImageChar_context.bImageOrientation;
-	frameSetting.xStart	= sImageChar_context.uwXAddrStart;
-	frameSetting.yStart	= sImageChar_context.uwYAddrStart;
-	frameSetting.xEnd		= sImageChar_context.uwXAddrEnd;
-	frameSetting.yEnd		= sImageChar_context.uwYAddrEnd;
-	frameSetting.xEvenInc	= sImageChar_context.uwXEvenInc;
-	frameSetting.yEvenInc  = sImageChar_context.uwYEvenInc;
-	frameSetting.xOddInc	= sImageChar_context.uwXOddInc;
-	frameSetting.yOddInc	= sImageChar_context.uwXOddInc;
-	frameSetting.binning	= sImageChar_context.bBinning;
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-	timeout = (int)se.timeout_ms;
-	CDBG("[CAM] %s: timeout %d\n", __func__, timeout);
-	se.type = 5;
-	se.length = sizeof(frameSetting);
-
-	if (copy_to_user((void *)(se.data),
-			&frameSetting,
-			se.length)) {
-			pr_err("%s, ERR_COPY_TO_USER 1\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-
-	if (copy_to_user((void *)arg, &se, sizeof(se))) {
-		pr_err("%s, ERR_COPY_TO_USER 2\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-end:
-	return rc;
-	
-
-}
-static int rawchip_get_interrupt(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-	int rc = 0;
-	struct rawchip_stats_event_ctrl se;
-	int timeout;
-	uint8_t interrupt_type;
-	uint8_t interrupt0_type = 0;
-	uint8_t interrupt1_type = 0;
-
-	CDBG("%s\n", __func__);
-
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-
-	timeout = (int)se.timeout_ms;
-
-	CDBG("[CAM] %s: timeout %d\n", __func__, timeout);
-
-	if (atomic_read(&rawchipCtrl->check_intr0)) {
-		interrupt0_type = Yushan_parse_interrupt(INTERRUPT_PAD_0, rawchipCtrl->error_interrupt_times);
-		atomic_set(&rawchipCtrl->check_intr0, 0);
-	}
-	if (atomic_read(&rawchipCtrl->check_intr1)) {
-		interrupt1_type = Yushan_parse_interrupt(INTERRUPT_PAD_1, rawchipCtrl->error_interrupt_times);
-		atomic_set(&rawchipCtrl->check_intr1, 0);
-	}
-	interrupt_type = interrupt0_type | interrupt1_type;
-	if (interrupt_type & RAWCHIP_INT_TYPE_ERROR) {
-		rawchipCtrl->total_error_interrupt_times++;
-		if (rawchipCtrl->total_error_interrupt_times <= 10 || rawchipCtrl->total_error_interrupt_times % 1000 == 0) {
-			Yushan_Status_Snapshot();
-			Yushan_dump_Dxo();
-		}
-	}
-	se.type = 10;
-	se.length = sizeof(interrupt_type);
-	if (copy_to_user((void *)(se.data),
-			&interrupt_type,
-			se.length)) {
-			pr_err("%s, ERR_COPY_TO_USER 1\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-
-	if (copy_to_user((void *)arg, &se, sizeof(se))) {
-		pr_err("%s, ERR_COPY_TO_USER 2\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-end:
-	return rc;
-}
-
-static int rawchip_get_af_status(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-	int rc = 0;
-	struct rawchip_stats_event_ctrl se;
-	int timeout;
-	rawchip_af_stats af_stats;
-	CDBG("%s\n", __func__);
-
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-
-	timeout = (int)se.timeout_ms;
-
-	CDBG("[CAM] %s: timeout %d\n", __func__, timeout);
-	rc = Yushan_get_AFSU(&af_stats);
-
-	if (rc < 0) {
-		pr_err("%s, Yushan_get_AFSU failed\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-	se.type = 5;
-	se.length = sizeof(af_stats);
-
-	if (copy_to_user((void *)(se.data),
-			&af_stats,
-			se.length)) {
-			pr_err("%s, ERR_COPY_TO_USER 1\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-
-	if (copy_to_user((void *)arg, &se, sizeof(se))) {
-		pr_err("%s, ERR_COPY_TO_USER 2\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-
-end:
-	return rc;
-}
-
-static int rawchip_get_dxo_version(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-
-	int rc = 0;
-	struct rawchip_stats_event_ctrl se;
-	int timeout;
-	rawchip_dxo_version dxoVersion;
-
-	CDBG("%s\n", __func__);
-
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-	timeout = (int)se.timeout_ms;
-	CDBG("[CAM] %s: timeout %d\n", __func__, timeout);
-
-	Yushan_Get_Version(&dxoVersion);
-
-	se.type = 5 ;
-	se.length = sizeof(dxoVersion);
-
-	if (copy_to_user((void *)(se.data),
-			&dxoVersion,
-			se.length)) {
-			pr_err("%s, ERR_COPY_TO_USER 1\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-	if (copy_to_user((void *)arg, &se, sizeof(se))) {
-		pr_err("%s, ERR_COPY_TO_USER 2\n", __func__);
-		rc = -EFAULT;
-		goto end;
-	}
-
-end:
-	return rc;
-}
-static int rawchip_set_dxo_prc_afStrategy(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-	int rc = 0;
-	struct rawchip_stats_event_ctrl se;
-	uint8_t* afStrategy;
-
-	CDBG("%s\n", __func__);
-
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		return -EFAULT;
-	}
-
-	afStrategy = kmalloc(se.length, GFP_ATOMIC);
-	if (!afStrategy) {
-		pr_err("%s %d: kmalloc failed\n", __func__,
-			__LINE__);
-		return -ENOMEM;
-	}
-	if (copy_from_user(afStrategy,
-		(void __user *)(se.data),
-		se.length)) {
-		pr_err("%s %d: copy_from_user failed\n", __func__,
-			__LINE__);
-		kfree(afStrategy);
-		return -EFAULT;
-	}
-
-	CDBG("%s afStrategy = %d\n", __func__,*afStrategy);
-
-	rc = Yushan_Set_AF_Strategy(*afStrategy);
-	if (rc < 0) {
-		pr_err("%s, Yushan_Set_AF_Strategy failed\n", __func__);
-		kfree(afStrategy);
-		return -EFAULT;
-	}
-
-	kfree(afStrategy);
-	return 0;
-}
-static int rawchip_update_aec_awb_params(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-	struct rawchip_stats_event_ctrl se;
-	rawchip_update_aec_awb_params_t *update_aec_awb_params;
-
-	CDBG("%s\n", __func__);
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		return -EFAULT;
-	}
-
-	update_aec_awb_params = kmalloc(se.length, GFP_ATOMIC);
-	if (!update_aec_awb_params) {
-		pr_err("%s %d: kmalloc failed\n", __func__,
-			__LINE__);
-		return -ENOMEM;
-	}
-	if (copy_from_user(update_aec_awb_params,
-		(void __user *)(se.data),
-		se.length)) {
-		pr_err("%s %d: copy_from_user failed\n", __func__,
-			__LINE__);
-		kfree(update_aec_awb_params);
-		return -EFAULT;
-	}
-
-	CDBG("%s gain=%d dig_gain=%d exp=%d\n", __func__,
-		update_aec_awb_params->aec_params.gain, update_aec_awb_params->aec_params.dig_gain,
-		update_aec_awb_params->aec_params.exp);
-	CDBG("%s rg_ratio=%d bg_ratio=%d\n", __func__,
-		update_aec_awb_params->awb_params.rg_ratio, update_aec_awb_params->awb_params.bg_ratio);
-
-	Yushan_Update_AEC_AWB_Params(update_aec_awb_params);
-
-	kfree(update_aec_awb_params);
-	return 0;
-}
-
-static int rawchip_update_af_params(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-	struct rawchip_stats_event_ctrl se;
-	rawchip_update_af_params_t *update_af_params;
-
-	CDBG("%s\n", __func__);
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		return -EFAULT;
-	}
-
-	update_af_params = kmalloc(se.length, GFP_ATOMIC);
-	if (!update_af_params) {
-		pr_err("%s %d: kmalloc failed\n", __func__,
-			__LINE__);
-		return -ENOMEM;
-	}
-	if (copy_from_user(update_af_params,
-		(void __user *)(se.data),
-		se.length)) {
-		pr_err("%s %d: copy_from_user failed\n", __func__,
-			__LINE__);
-		kfree(update_af_params);
-		return -EFAULT;
-	}
-
-	CDBG("active_number=%d\n", update_af_params->af_params.active_number);
-	CDBG("sYushanAfRoi[0] %d %d %d %d\n",
-		update_af_params->af_params.sYushanAfRoi[0].bXStart,
-		update_af_params->af_params.sYushanAfRoi[0].bXEnd,
-		update_af_params->af_params.sYushanAfRoi[0].bYStart,
-		update_af_params->af_params.sYushanAfRoi[0].bYEnd);
-
-	Yushan_Update_AF_Params(update_af_params);
-
-	kfree(update_af_params);
-	return 0;
-}
-
-static int rawchip_update_3a_params(struct rawchip_ctrl *raw_dev, void __user *arg)
-{
-	struct rawchip_stats_event_ctrl se;
-	rawchip_newframe_ack_enable_t  *enable_newframe_ack;
-
-	CDBG("%s\n", __func__);
-	if (copy_from_user(&se, arg,
-			sizeof(struct rawchip_stats_event_ctrl))) {
-		pr_err("%s, ERR_COPY_FROM_USER\n", __func__);
-		return -EFAULT;
-	}
-
-	enable_newframe_ack = kmalloc(se.length, GFP_ATOMIC);
-	if (!enable_newframe_ack) {
-		pr_err("%s %d: kmalloc failed\n", __func__,
-			__LINE__);
-		return -ENOMEM;
-	}
-	if (copy_from_user(enable_newframe_ack,
-		(void __user *)(se.data),
-		se.length)) {
-		pr_err("%s %d: copy_from_user failed\n", __func__,
-			__LINE__);
-		kfree(enable_newframe_ack);
-		return -EFAULT;
-	}
-
-	CDBG("enable_newframe_ack=%d\n", *enable_newframe_ack);
-	Yushan_Update_3A_Params(*enable_newframe_ack);
-	CDBG("rawchip_update_3a_params done\n");
-
-	kfree(enable_newframe_ack);
-	return 0;
-}
-
-int rawchip_power_up(const struct msm_camera_rawchip_info *pdata)
-{
-	int rc = 0;
-	CDBG("[CAM] %s\n", __func__);
-
-	if (pdata->camera_rawchip_power_on == NULL) {
-		pr_err("rawchip power on platform_data didn't register\n");
-		return -EIO;
-	}
-	rc = pdata->camera_rawchip_power_on();
-	if (rc < 0) {
-		pr_err("rawchip power on failed\n");
-		goto enable_power_on_failed;
-	}
-
-#ifdef CONFIG_RAWCHIP_MCLK
-	rc = msm_camio_clk_enable(CAMIO_CAM_RAWCHIP_MCLK_CLK);
-#else
-	rc = msm_camio_clk_enable(CAMIO_CAM_MCLK_CLK);
-#endif
-
-	if (rc < 0) {
-		pr_err("enable MCLK failed\n");
-		goto enable_mclk_failed;
-	}
-	mdelay(1); 
-
-	rc = gpio_request(pdata->rawchip_reset, "rawchip");
-	if (rc < 0) {
-		pr_err("GPIO(%d) request failed\n", pdata->rawchip_reset);
-		goto enable_reset_failed;
-	}
-	gpio_direction_output(pdata->rawchip_reset, 1);
-	gpio_free(pdata->rawchip_reset);
-	mdelay(1); 
-
-	yushan_spi_write(0x0008, 0x7f);
-	mdelay(1);
-
-	return rc;
-
-enable_reset_failed:
-#ifdef CONFIG_RAWCHIP_MCLK
-	rc = msm_camio_clk_disable(CAMIO_CAM_RAWCHIP_MCLK_CLK);
-#else
-	rc = msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-#endif
-
-enable_mclk_failed:
-	if (pdata->camera_rawchip_power_off == NULL)
-		pr_err("rawchip power off platform_data didn't register\n");
-	else
-		pdata->camera_rawchip_power_off();
-enable_power_on_failed:
-	return rc;
-}
-
-int rawchip_power_down(const struct msm_camera_rawchip_info *pdata)
-{
-	int rc = 0;
-	CDBG("%s\n", __func__);
-
-	rc = gpio_request(pdata->rawchip_reset, "rawchip");
-	if (rc < 0)
-		pr_err("GPIO(%d) request failed\n", pdata->rawchip_reset);
-	gpio_direction_output(pdata->rawchip_reset, 0);
-	gpio_free(pdata->rawchip_reset);
-
-	mdelay(1);
-
-#ifdef CONFIG_RAWCHIP_MCLK
-	rc = msm_camio_clk_disable(CAMIO_CAM_RAWCHIP_MCLK_CLK);
-#else
-	rc = msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-#endif
-
-	if (rc < 0)
-		pr_err("disable MCLK failed\n");
-
-	if (pdata->camera_rawchip_power_off == NULL) {
-		pr_err("rawchip power off platform_data didn't register\n");
-		return -EIO;
-	}
-
-	rc = pdata->camera_rawchip_power_off();
-	if (rc < 0)
-		pr_err("rawchip power off failed\n");
-
-	return rc;
-}
-
-extern uint32_t rawchip_id;
-
-int rawchip_match_id(void)
-{
-	int rc = 0;
-	uint32_t chipid = 0;
-	int retry_spi_cnt = 0, retry_readid_cnt = 0;
-	uint8_t read_byte;
-	int i;
-	CDBG("%s\n", __func__);
-
-	for (retry_spi_cnt = 0, retry_readid_cnt = 0; (retry_spi_cnt < 3 && retry_readid_cnt < 3); ) {
-		chipid = 0;
-		for (i = 0; i < 4; i++) {
-			rc = SPI_Read((rawchip_info.rawchip_id_info->rawchip_id_reg_addr + i), 1, (uint8_t*)(&read_byte));
-			if (rc < 0) {
-				pr_err("%s: read id failed\n", __func__);
-				retry_spi_cnt++;
-				pr_info("%s: retry: %d\n", __func__, retry_spi_cnt);
-				mdelay(5);
-				break;
-			} else
-				*((uint8_t*)(&chipid) + i) = read_byte;
-		}
-		if (rc < 0)
-			continue;
-
-		pr_info("rawchip id: 0x%x requested id: 0x%x\n", chipid, rawchip_info.rawchip_id_info->rawchip_id);
-		if (chipid != rawchip_info.rawchip_id_info->rawchip_id) {
-			pr_err("rawchip_match_id chip id does not match\n");
-			retry_readid_cnt++;
-			pr_info("%s: retry: %d\n", __func__, retry_readid_cnt);
-			mdelay(5);
-			rc = -ENODEV;
-			continue;
-		} else
-			break;
-	}
-
-	rawchip_id = chipid;
-	return rc;
-}
-
-void rawchip_release(void)
-{
-	struct msm_camera_rawchip_info *pdata = rawchipCtrl->pdata;
-
-	pr_info("%s\n", __func__);
-
-	CDBG("[CAM] rawchip free irq");
-	free_irq(pdata->rawchip_intr0, 0);
-	free_irq(pdata->rawchip_intr1, 0);
-
-	rawchip_power_down(pdata);
-}
-
-int rawchip_open_init(void)
-{
-	int rc = 0;
-	struct msm_camera_rawchip_info *pdata = rawchipCtrl->pdata;
-	int read_id_retry = 0;
-	int i;
-
-	pr_info("%s\n", __func__);
-
-open_read_id_retry:
-	rc = rawchip_power_up(pdata);
-	if (rc < 0)
-		return rc;
-
-	rc = rawchip_match_id();
-	if (rc < 0) {
-		if (read_id_retry < 3) {
-			pr_info("retry read rawchip ID: %d\n", read_id_retry);
-			read_id_retry++;
-			rawchip_power_down(pdata);
-			goto open_read_id_retry;
-		}
-		goto open_init_failed;
-	}
-
-	init_waitqueue_head(&yushan_int.yushan_wait);
-	spin_lock_init(&yushan_int.yushan_spin_lock);
-	atomic_set(&interrupt, 0);
-	atomic_set(&interrupt2, 0);
-
-	
-	rc = request_irq(pdata->rawchip_intr0, yushan_irq_handler,
-		IRQF_TRIGGER_HIGH, "yushan_irq", 0);
-	if (rc < 0) {
-		pr_err("request irq intr0 failed\n");
-		goto open_init_failed;
-	}
-
-	rc = request_irq(pdata->rawchip_intr1, yushan_irq_handler2,
-		IRQF_TRIGGER_HIGH, "yushan_irq2", 0);
-	if (rc < 0) {
-		pr_err("request irq intr1 failed\n");
-		free_irq(pdata->rawchip_intr0, 0);
-		goto open_init_failed;
-	}
-
-	rawchipCtrl->rawchip_init = 0;
-	rawchipCtrl->total_error_interrupt_times = 0;
-	for (i = 0; i < TOTAL_INTERRUPT_COUNT; i++)
-		rawchipCtrl->error_interrupt_times[i] = 0;
-	atomic_set(&rawchipCtrl->check_intr0, 0);
-	atomic_set(&rawchipCtrl->check_intr1, 0);
-	rawchip_intr0 = pdata->rawchip_intr0;
-	rawchip_intr1 = pdata->rawchip_intr1;
-
-	return rc;
-
-open_init_failed:
-	pr_err("%s: rawchip_open_init failed\n", __func__);
-	rawchip_power_down(pdata);
-
-	return rc;
-}
-
-int rawchip_probe_init(void)
-{
-	int rc = 0;
-	struct msm_camera_rawchip_info *pdata = NULL;
-	int read_id_retry = 0;
-
-	pr_info("%s\n", __func__);
-
-	if (rawchipCtrl == NULL) {
-		pr_err("already failed in __msm_rawchip_probe\n");
-		return -EINVAL;
-	} else
-		pdata = rawchipCtrl->pdata;
-
-probe_read_id_retry:
-	rc = rawchip_power_up(pdata);
-	if (rc < 0)
-		return rc;
-
-	rc = rawchip_match_id();
-	if (rc < 0) {
-		if (read_id_retry < 3) {
-			pr_info("retry read rawchip ID: %d\n", read_id_retry);
-			read_id_retry++;
-			rawchip_power_down(pdata);
-			goto probe_read_id_retry;
-		}
-		goto probe_init_fail;
-	}
-
-	pr_info("%s: probe_success\n", __func__);
-	return rc;
-
-probe_init_fail:
-	pr_err("%s: rawchip_probe_init failed\n", __func__);
-	rawchip_power_down(pdata);
-	return rc;
-}
-
-void rawchip_probe_deinit(void)
-{
-	struct msm_camera_rawchip_info *pdata = rawchipCtrl->pdata;
-	CDBG("%s\n", __func__);
-
-	rawchip_power_down(pdata);
-}
-
-static int rawchip_fops_open(struct inode *inode, struct file *filp)
-{
-	struct rawchip_ctrl *raw_dev = container_of(inode->i_cdev,
-		struct rawchip_ctrl, cdev);
-
-	filp->private_data = raw_dev;
-
-	return 0;
-}
-
-static unsigned int rawchip_fops_poll(struct file *filp,
-	struct poll_table_struct *pll_table)
-{
-	int rc = 0;
-	unsigned long flags;
-
-	poll_wait(filp, &yushan_int.yushan_wait, pll_table);
-
-	spin_lock_irqsave(&yushan_int.yushan_spin_lock, flags);
-	if (atomic_read(&interrupt)) {
-		atomic_set(&interrupt, 0);
-		atomic_set(&rawchipCtrl->check_intr0, 1);
-		rc = POLLIN | POLLRDNORM;
-	}
-	if (atomic_read(&interrupt2)) {
-		atomic_set(&interrupt2, 0);
-		atomic_set(&rawchipCtrl->check_intr1, 1);
-		rc = POLLIN | POLLRDNORM;
-	}
-	spin_unlock_irqrestore(&yushan_int.yushan_spin_lock, flags);
-
-	return rc;
-}
-
-static long rawchip_fops_ioctl(struct file *filp, unsigned int cmd,
-	unsigned long arg)
-{
-	int rc = 0;
-	struct rawchip_ctrl *raw_dev = filp->private_data;
-	void __user *argp = (void __user *)arg;
-
-	CDBG("%s:%d cmd = %d\n", __func__, __LINE__, _IOC_NR(cmd));
-	mutex_lock(&raw_dev->raw_ioctl_lock);
-	switch (cmd) {
-	case RAWCHIP_IOCTL_GET_INT:
-		CDBG("RAWCHIP_IOCTL_GET_INT\n");
-		rawchip_get_interrupt(raw_dev, argp);
-		break;
-	case RAWCHIP_IOCTL_GET_AF_STATUS:
-		CDBG("RAWCHIP_IOCTL_GET_AF_STATUS\n");
-		rawchip_get_af_status(raw_dev, argp);
-		break;
-	case RAWCHIP_IOCTL_UPDATE_AEC_AWB:
-		CDBG("RAWCHIP_IOCTL_UPDATE_AEC\n");
-		rawchip_update_aec_awb_params(raw_dev, argp);
-		break;
-	case RAWCHIP_IOCTL_UPDATE_AF:
-		CDBG("RAWCHIP_IOCTL_UPDATE_AF\n");
-		rawchip_update_af_params(raw_dev, argp);
-		break;
-	case RAWCHIP_IOCTL_UPDATE_3A:
-		CDBG("RAWCHIP_IOCTL_UPDATE_3A\n");
-		rawchip_update_3a_params(raw_dev, argp);
-		break;
-	case RAWCHIP_IOCTL_SET_DXOPRC_AF_STRATEGY:
-		CDBG("RAWCHIP_IOCTL_SET_DXOPRC_AF_STRATEGY:\n");
-		rawchip_set_dxo_prc_afStrategy(raw_dev, argp);
-		break;
-	case RAWCHIP_IOCTL_GET_DXOPRC_VER:
-		CDBG("RAWCHIP_IOCTL_GET_DXOPRC_VER:\n");
-		rawchip_get_dxo_version(raw_dev, argp);
-		break;
-	case RAWCHIP_IOCTL_GET_DXOPRC_FRAMESETTING:
-		CDBG("RAWCHIP_IOCTL_GET_DXOPRC_FRAMESETTING:\n");
-		rawchip_get_dxoprc_frameSetting(raw_dev, argp);
-		break;
-	}
-	mutex_unlock(&raw_dev->raw_ioctl_lock);
-	return rc;
-}
-
-static  const struct  file_operations rawchip_fops = {
-	.owner	  = THIS_MODULE,
-	.open	   = rawchip_fops_open,
-	.unlocked_ioctl = rawchip_fops_ioctl,
-	.poll  = rawchip_fops_poll,
-};
-
-static int setup_rawchip_cdev(void)
-{
-	int rc = 0;
-	struct device *dev;
-
-	pr_info("%s\n", __func__);
-
-	rc = alloc_chrdev_region(&rawchip_devno, 0, 1, MSM_RAWCHIP_NAME);
-	if (rc < 0) {
-		pr_err("%s: failed to allocate chrdev\n", __func__);
-		goto alloc_chrdev_region_failed;
-	}
-
-	if (!rawchip_class) {
-		rawchip_class = class_create(THIS_MODULE, MSM_RAWCHIP_NAME);
-		if (IS_ERR(rawchip_class)) {
-			rc = PTR_ERR(rawchip_class);
-			pr_err("%s: create device class failed\n",
-				__func__);
-			goto class_create_failed;
-		}
-	}
-
-	dev = device_create(rawchip_class, NULL,
-		MKDEV(MAJOR(rawchip_devno), MINOR(rawchip_devno)), NULL,
-		"%s%d", MSM_RAWCHIP_NAME, 0);
-	if (IS_ERR(dev)) {
-		pr_err("%s: error creating device\n", __func__);
-		rc = -ENODEV;
-		goto device_create_failed;
-	}
-
-	cdev_init(&rawchipCtrl->cdev, &rawchip_fops);
-	rawchipCtrl->cdev.owner = THIS_MODULE;
-	rawchipCtrl->cdev.ops   =
-		(const struct file_operations *) &rawchip_fops;
-	rc = cdev_add(&rawchipCtrl->cdev, rawchip_devno, 1);
-	if (rc < 0) {
-		pr_err("%s: error adding cdev\n", __func__);
-		rc = -ENODEV;
-		goto cdev_add_failed;
-	}
-
-	return rc;
-
-cdev_add_failed:
-	device_destroy(rawchip_class, rawchip_devno);
-device_create_failed:
-	class_destroy(rawchip_class);
-class_create_failed:
-	unregister_chrdev_region(rawchip_devno, 1);
-alloc_chrdev_region_failed:
-	return rc;
-}
-
-static void rawchip_tear_down_cdev(void)
-{
-	cdev_del(&rawchipCtrl->cdev);
-	device_destroy(rawchip_class, rawchip_devno);
-	class_destroy(rawchip_class);
-	unregister_chrdev_region(rawchip_devno, 1);
-}
-
-static int rawchip_driver_probe(struct platform_device *pdev)
-{
-	int rc = 0;
-	pr_info("%s\n", __func__);
-
-	rawchipCtrl = kzalloc(sizeof(struct rawchip_ctrl), GFP_ATOMIC);
-	if (!rawchipCtrl) {
-		pr_err("%s: could not allocate mem for rawchip_dev\n", __func__);
-		return -ENOMEM;
-	}
-
-	rc = setup_rawchip_cdev();
-	if (rc < 0) {
-		kfree(rawchipCtrl);
-		return rc;
-	}
-
-	mutex_init(&rawchipCtrl->raw_ioctl_lock);
-	rawchipCtrl->pdata = pdev->dev.platform_data;
-
-	rc = rawchip_spi_init();
-	if (rc < 0) {
-		pr_err("%s: failed to register spi driver\n", __func__);
-		return rc;
-	}
-
-	msm_rawchip_attr_node();
-
-	return rc;
-}
-
-static int rawchip_driver_remove(struct platform_device *pdev)
-{
-	rawchip_tear_down_cdev();
-
-	mutex_destroy(&rawchipCtrl->raw_ioctl_lock);
-
-	kfree(rawchipCtrl);
-
-	return 0;
-}
-
-static struct  platform_driver rawchip_driver = {
-	.probe  = rawchip_driver_probe,
-	.remove = rawchip_driver_remove,
-	.driver = {
-		.name = "rawchip",
-		.owner = THIS_MODULE,
-	},
-};
-
-static int __init rawchip_driver_init(void)
-{
-	int rc;
-	rc = platform_driver_register(&rawchip_driver);
-	return rc;
-}
-
-static void __exit rawchip_driver_exit(void)
-{
-	platform_driver_unregister(&rawchip_driver);
-}
-
-MODULE_DESCRIPTION("rawchip driver");
-MODULE_VERSION("rawchip 0.1");
-
-module_init(rawchip_driver_init);
-module_exit(rawchip_driver_exit);
-
-
diff --git a/drivers/media/video/msm/rawchip/rawchip.h b/drivers/media/video/msm/rawchip/rawchip.h
deleted file mode 100644
index f8a580e..0000000
--- a/drivers/media/video/msm/rawchip/rawchip.h
+++ /dev/null
@@ -1,107 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_RAWCHIP_H
-#define MSM_RAWCHIP_H
-
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/uaccess.h>
-#include <linux/miscdevice.h>
-#include <linux/earlysuspend.h>
-#include <linux/wakelock.h>
-#include <linux/slab.h>
-#include <linux/fs.h>
-#include <linux/list.h>
-#include <linux/cdev.h>
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/platform_device.h>
-#include <linux/device.h>
-
-#include <mach/camera.h>
-
-
-#include <mach/gpio.h>
-#include <mach/vreg.h>
-#include <asm/mach-types.h>
-#include <mach/board.h>
-
-#include <linux/kernel.h>
-#include <linux/string.h>
-
-
-#include <media/linux_rawchip.h>
-#include "Yushan_API.h"
-#include "Yushan_Platform_Specific.h"
-#include "Yushan_HTC_Functions.h"
-#include "../msm.h"
-
-struct rawchip_ctrl {
-	struct msm_camera_rawchip_info *pdata;
-	struct cdev   cdev;
-
-	struct mutex raw_ioctl_lock;
-	int rawchip_init;
-	atomic_t check_intr0;
-	atomic_t check_intr1;
-
-	int error_interrupt_times[TOTAL_INTERRUPT_COUNT];
-	int total_error_interrupt_times;
-
-};
-
-struct rawchip_sensor_data {
-	const char *sensor_name;
-	uint8_t datatype;
-	uint8_t lane_cnt;
-	uint32_t pixel_clk;
-	uint16_t width;
-	uint16_t height;
-	uint16_t line_length_pclk;
-	uint16_t frame_length_lines;
-	uint16_t fullsize_width;
-	uint16_t fullsize_height;
-	uint16_t fullsize_line_length_pclk;
-	uint16_t fullsize_frame_length_lines;
-	int mirror_flip;
-	uint16_t x_addr_start;
-	uint16_t y_addr_start;
-	uint16_t x_addr_end;
-	uint16_t y_addr_end;
-	uint16_t x_even_inc;
-	uint16_t x_odd_inc;
-	uint16_t y_even_inc;
-	uint16_t y_odd_inc;
-	uint8_t binning_rawchip;
-	uint8_t use_rawchip;
-};
-
-struct rawchip_id_info_t {
-	uint16_t rawchip_id_reg_addr;
-	uint32_t rawchip_id;
-};
-
-struct rawchip_info_t {
-	struct rawchip_id_info_t *rawchip_id_info;
-};
-
-int rawchip_probe_init(void);
-void rawchip_probe_deinit(void);
-void rawchip_release(void);
-int rawchip_open_init(void);
-int rawchip_set_size(struct rawchip_sensor_data data);
-
-static inline void rawchip_dump_register(void) { Yushan_dump_register(); }
-
-#endif
diff --git a/drivers/media/video/msm/rawchip/rawchip_spi.c b/drivers/media/video/msm/rawchip/rawchip_spi.c
deleted file mode 100644
index 571df38..0000000
--- a/drivers/media/video/msm/rawchip/rawchip_spi.c
+++ /dev/null
@@ -1,498 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include "rawchip_spi.h"
-
-#ifdef RAWCHIP_SPI_DEBUG
-#define CDBG(fmt, args...) pr_debug(fmt, ##args)
-#else
-#define CDBG(fmt, args...) do { } while (0)
-#endif
-
-#define yushan_MAX_ALLOCATE 1000
-static DEFINE_MUTEX(spi_lock);
-
-static uint8_t *yushan_spi_write_addr;
-
-static struct spi_device *rawchip_dev;
-
-struct yushan_spi_ctrl_blk {
-	struct spi_device *spi;
-	spinlock_t		spinlock;
-};
-struct yushan_spi_ctrl_blk *yushan_spi_ctrl;
-
-static int
-yushan_spi_sync_write_then_read(uint8_t *txbuf, size_t n_tx,
-	uint8_t *rxbuf, size_t n_rx)
-{
-#if 0
-	struct spi_transfer	tx_t = {
-			.tx_buf		= txbuf,
-			.len		= n_tx,
-		};
-	struct spi_transfer	rx_t = {
-			.rx_buf		= rxbuf,
-			.len		= n_rx,
-		};
-	struct spi_message	m;
-
-	spi_message_init(&m);
-	spi_message_add_tail(&tx_t, &m);
-	spi_message_add_tail(&rx_t, &m);
-#else
-	struct spi_transfer	rx_t = {
-		.tx_buf = txbuf,
-		.rx_buf		= rxbuf,
-		.len		= n_rx,
-		};
-	struct spi_message	m;
-
-	spi_message_init(&m);
-	spi_message_add_tail(&rx_t, &m);
-#endif
-
-	return spi_sync(yushan_spi_ctrl->spi, &m); 
-}
-int yushan_spi_read(uint16_t reg, uint8_t *rval)
-{
-	int rc = 0;
-	uint8_t  rx[6];
-	rx[0] = 0x60;
-	rx[1] = (reg & 0xff00) >> 8;
-	rx[2] = reg & 0x00ff;
-	rx[3] = 0x61;
-	rx[4] = 0;
-	
-
-	rc = yushan_spi_sync_write_then_read(&rx[0], 3,
-		&rx[3], 2);
-#if 0
-	pr_info("%s: rc = %d\n", __func__, rc);
-	pr_info("rx[3] = 0x%x, rx[4] = 0x%x, rx[5] = 0x%x\n",
-		rx[3], rx[4], rx[5]);
-#endif
-	if (rc >= 0)
-		
-		*rval = rx[4];
-	else {
-		pr_err("yushan_spi_sync_write_then_read failed\n");
-		*rval = 0;
-	}
-
-	return rc;
-}
-
-int SPI_Read( uint16_t uwIndex , uint16_t uwCount , uint8_t * pData)
-{
-	uint16_t reg;
-	uint8_t i, val, rc=0;
-	val=0;
-
-	mutex_lock(&spi_lock);
-	for (i=0; i<uwCount; i++)
-	{
-		reg = uwIndex+i;
-		
-		rc = rawchip_spi_read_2B1B(reg,&val);
-		if (rc==0)
-		{
-			*(pData+i)=val;
-			CDBG("[CAM]%s 0x%x[%d]=0x%x SPI_Read OK",__func__, uwIndex, i, *(pData+i));
-		}
-		else
-		{
-			pr_err("[CAM]%s 0x%x[%d]=0x%x " \
-				"SPI_Read Fail",__func__, uwIndex, i, *(pData+i));
-			break;
-		}
-	}
-	mutex_unlock(&spi_lock);
-
-	if(rc==0)
-		return SUCCESS;
-	else
-		return FAILURE;
-}
-
-#if 0
-static int yushan_spi_sync_write_once(uint8_t *tbuf, uint8_t *wbuf)
-{
-	struct spi_message	m;
-
-	struct spi_transfer tx_addr = {
-		.tx_buf	= tbuf,
-		.len = 3,
-	};
-
-	struct spi_transfer tx_buf = {
-		.tx_buf = wbuf,
-		.len = 3,
-	};
-
-	spi_message_init(&m);
-	spi_message_add_tail(&tx_addr, &m);
-	spi_message_add_tail(&tx_buf, &m);
-
-	return yushan_spi_transaction(&m);
-}
-#if 1
-static int yushan_spi_write(uint16_t reg, uint16_t val)
-{
-	uint8_t tx[3], wb[3];
-
-	tx[0] = yushan_REGADDR_WR;
-	tx[1] = (reg & 0xff00) >> 8;
-	tx[2] = reg & 0x00ff;
-
-	wb[0] = yushan_REGVAL_WR;
-	wb[1] = (val & 0xff00) >> 8;
-	wb[2] = val & 0x00ff;
-
-    return yushan_spi_sync_write_once(&tx[0], &wb[0]);
-}
-#endif
-#endif
-
-static void yushan_spi_complete(void *arg)
-{
-	complete(arg);
-}
-
-static int yushan_spi_transaction(struct spi_message *msg)
-{
-	DECLARE_COMPLETION_ONSTACK(yushan_done);
-	
-	static int status = 0;
-	
-
-	msg->complete = yushan_spi_complete;
-	msg->context = &yushan_done;
-
-	CDBG("[CAMSPI] %s spin_lock_irq\n",__func__);
-	spin_lock_irq(&yushan_spi_ctrl->spinlock);
-	if (yushan_spi_ctrl->spi == NULL)
-		status = -ESHUTDOWN;
-	else
-		{
-		CDBG("[CAMSPI] %s spi_async\n",__func__);
-		status = spi_async(yushan_spi_ctrl->spi, msg);
-		}
-	CDBG("[CAMSPI] %s spin_unlock_irq\n",__func__);
-	spin_unlock_irq(&yushan_spi_ctrl->spinlock);
-
-	if (status == 0) {
-		CDBG("[CAMSPI] %s wait_for_completion\n",__func__);
-		wait_for_completion(&yushan_done);
-		CDBG("[CAMSPI] %s wait_for_completion DONE\n",__func__);
-		status = msg->status;
-		if (status == 0)
-			status = msg->actual_length;
-	}
-
-	return status;
-}
-
-static int yushan_spi_sync_write_once(uint8_t *tbuf, uint8_t *wbuf)
-{
-	struct spi_message	m;
-
-	struct spi_transfer tx_addr = {
-		.tx_buf	= tbuf,
-		.len = 4,
-	};
-	spi_message_init(&m);
-	spi_message_add_tail(&tx_addr, &m);
-	return yushan_spi_transaction(&m);
-}
-
-int yushan_spi_write(uint16_t reg, uint8_t val)
-{
-	uint8_t tx[4];
-
-	tx[0] = 0x60;
-	tx[1] = (reg & 0xff00) >> 8;
-	tx[2] = reg & 0x00ff;
-	tx[3] = val;
-
-    return yushan_spi_sync_write_once(&tx[0], NULL);
-}
-
-int SPI_Write(uint16_t uwIndex , uint16_t uwCount , uint8_t *pData)
-{
-	uint16_t reg, i;
-	uint8_t val, rc = 0;
-	val = 0;
-
-	mutex_lock(&spi_lock);
-	for (i = 0; i < uwCount; i++) {
-		reg = uwIndex+i;
-		rc = yushan_spi_write(reg,*(pData+i));
-		if (rc == 0)
-			CDBG("[DxO]%s 0x%x[%d]=0x%x SPI_Write OK",__func__, uwIndex, i, *(pData+i));
-		else {
-			pr_err("[CAM]%s 0x%x[%d]=0x%x " \
-			"SPI_Write Fail",__func__, uwIndex, i, *(pData+i));
-			break;
-		}
-	}
-	mutex_unlock(&spi_lock);
-
-	if (rc == 0)
-		return SUCCESS;
-	else
-		return FAILURE;
-}
-
-static int32_t Yushan_spi_write_table(
-	uint16_t uwIndex , uint16_t uwCount , uint8_t *pData)
-{
-	int i, status;
-	struct spi_message	m;
-	struct spi_transfer	tx_addr;
-	uint16_t transferedIndex = 0;
-
-	if (!yushan_spi_write_addr) {
-		pr_err("Error allocating memory retrying num:%d\n", uwCount);
-		return FAILURE;
-	}
-
-	while (transferedIndex < uwCount) {
-		spi_message_init(&m);
-		memset(&tx_addr, 0, sizeof(struct spi_transfer));
-
-		yushan_spi_write_addr[0] = 0x60;
-		yushan_spi_write_addr[1] = ((uwIndex+transferedIndex) & 0xff00) >> 8;
-		yushan_spi_write_addr[2] = (uwIndex+transferedIndex) & 0x00ff;
-
-		for (i = 0; (i < yushan_MAX_ALLOCATE && transferedIndex < uwCount); i++, transferedIndex++)
-			yushan_spi_write_addr[i+3] = *(pData+transferedIndex);
-
-		tx_addr.tx_buf = yushan_spi_write_addr;
-		tx_addr.len = i+3;
-		tx_addr.cs_change = 0;
-		tx_addr.bits_per_word = 32;
-		spi_message_add_tail(&tx_addr, &m);
-		status = yushan_spi_transaction(&m);
-		if (status != 0) {
-			pr_err("[CAM]%s, spi write status::%d", __func__, status);
-			return FAILURE;
-		}
-	}
-	return SUCCESS;
-}
-
-int SPI_Write_4thByte(uint16_t uwIndex , uint16_t uwCount , uint8_t *pData)
-{
-#if 0
-	uint16_t reg, i;
-	uint8_t val, rc;
-	val=0;
-	for (i = 0; i<uwCount; i++) {
-		reg = uwIndex+i;
-		rc = yushan_spi_write(reg, *(pData+2+4*i));
-		if (rc == 0) {
-			CDBG("[CAM]%s 0x%x=0x%x \
-				SPI_Write OK (%d)", __func__, reg, *(pData+2+4*i), 2+4*i);
-		}
-		else {
-			pr_err("[CAM]%s 0x%x=0x%x\
-				SPI_Write Fail", __func__, reg, *(pData+2+4*i));
-			break;
-		}
-	}
-  if (rc == 0)
-	return SUCCESS;
-  else
-	return FAILURE;
-#else
-	return Yushan_spi_write_table(uwIndex, uwCount, pData);
-#endif
-}
-
-
-int rawchip_spi_write(unsigned char addr, unsigned char data)
-{
-	unsigned char buffer[2];
-	int rc;
-	CDBG("[CAM] rawchip_spi_write+++\n");
-	if (!rawchip_dev)
-		return -1;
-
-	rawchip_dev->bits_per_word = 16;
-	buffer[0] = addr;
-	buffer[1] = data;
-	rc = spi_write(rawchip_dev, buffer, 2);
-	if (rc < 0) {
-		pr_err("[CAM]rawchip_spi_write spi_write failed, rc=%d\n", rc);
-		return rc;
-	}
-	CDBG("[CAM] rawchip_spi_write---, rc=%d\n", rc);
-	return rc;
-}
-
-int rawchip_spi_write_2B1B(uint16_t addr, unsigned char data)
-{
-	unsigned char buffer[4];
-	int rc;
-	
-
-	if (!rawchip_dev)
-		return -1;
-
-	rawchip_dev->bits_per_word = 8;
-	buffer[0] = 0x60;
-	buffer[1] = (addr & 0xff00) >> 8;
-	buffer[2] = addr & 0x00ff;
-	buffer[3] = data;
-	rc = spi_write(rawchip_dev, buffer, 4);
-	if (rc < 0) {
-		pr_err("[CAM]rawchip_spi_write_2B1B spi_write failed, rc=%d\n", rc);
-		return rc;
-	}
-	CDBG("[CAM] rawchip_spi_write_2B1B--\
-		, rc=%d (addr=0x%x, data=0x%x)\n", rc, addr, data);
-
-#if 0
-	msleep(10);
-	rawchip_spi_read_2B1B(addr, &rb);
-	if (data!=rb)
-		pr_info("[CAM]rawchip_spi_write_2B1B!!!!, %d %d\n", data, rb);
-#endif
-
-	return rc;
-}
-
-
-int rawchip_spi_read_2B1B(uint16_t addr, unsigned char *data)
-{
-	unsigned char buffer[4], tx_buf[2], rx_buf[2];
-	int rc;
-	if (!rawchip_dev)
-		return -1;
-
-	rawchip_dev->bits_per_word = 8;
-	buffer[0] = 0x60;
-	buffer[1] = (addr & 0xff00) >> 8;
-	buffer[2] = addr & 0x00ff;
-
-	rc = spi_write(rawchip_dev, buffer, 3);
-	if (rc < 0) {
-		pr_err("[CAM]rawchip_spi_read_2B1B spi_write failed, rc=%d\n", rc);
-		return rc;
-	}
-
-	tx_buf[0] = 0x61;
-	tx_buf[1] = 0x00;
-
-	rx_buf[0] = 0x00;
-	rx_buf[1] = 0x00;
-
-	rc = spi_write_and_read(rawchip_dev, tx_buf, rx_buf, 2);
-	if (rc < 0) {
-		pr_err("[CAM]rawchip_spi_read_2B1B spi_write_and_read failed, rc=%d\n", rc);
-		return rc;
-	}
-	*data = rx_buf[1];
-	CDBG("[CAM]rawchip_spi_read_2B1B---, \
-		rc=%d, (addr=0x%x, data=0x%x)\n", rc, addr, *data);
-
-	return rc;
-}
-
-int rawchip_spi_read_2B2B(uint16_t addr, uint16_t *data)
-{
-	unsigned char buffer[4], tx_buf[2], rx_buf[3];
-	int rc;
-	if (!rawchip_dev)
-		return -1;
-
-	rawchip_dev->bits_per_word = 8;
-	buffer[0] = 0x60;
-	buffer[1] = (addr & 0xff00) >> 8;
-	buffer[2] = addr & 0x00ff;
-
-	rc = spi_write(rawchip_dev, buffer, 3);
-	if (rc < 0) {
-		pr_err("[CAM]rawchip_spi_read_2B2B spi_write failed, rc=%d\n", rc);
-		return rc;
-	}
-
-	tx_buf[0] = 0x61;
-	tx_buf[1] = 0x00;
-
-	rx_buf[0] = 0x00;
-	rx_buf[1] = 0x00;
-	rx_buf[2] = 0x00;
-
-	rc = spi_write_and_read(rawchip_dev, tx_buf, rx_buf, 3);
-	if (rc < 0) {
-		pr_err("[CAM]rawchip_spi_read_2B2B spi_write_and_read failed, rc=%d\n", rc);
-		return rc;
-	}
-	*data = (rx_buf[2]<<8 | rx_buf[1]);
-
-	return rc;
-}
-
-int spi_rawchip_probe(struct spi_device *rawchip)
-{
-	pr_info("[CAM]:%s\n", __func__);
-
-	rawchip_dev = rawchip;
-
-	
-	yushan_spi_ctrl = kzalloc(sizeof(*yushan_spi_ctrl), GFP_KERNEL);
-	if (!yushan_spi_ctrl)
-		return -ENOMEM;
-
-	yushan_spi_ctrl->spi = rawchip;
-	spin_lock_init(&yushan_spi_ctrl->spinlock);
-
-	spi_set_drvdata(rawchip, yushan_spi_ctrl);
-
-	return 0;
-}
-
-static struct spi_driver spi_rawchip = {
-	.driver = {
-		.name = "spi_rawchip",
-		.owner = THIS_MODULE,
-	},
-	.probe = spi_rawchip_probe,
-};
-
-int rawchip_spi_init(void)
-{
-	int rc = -1;
-
-	pr_info("[CAM]%s \n", __func__);
-
-	rc = spi_register_driver(&spi_rawchip);
-	if (rc < 0) {
-		pr_err("[CAM]%s:failed to register \
-			spi driver(%d) for camera\n", __func__, rc);
-		return -EINVAL;
-	}
-
-	if (!yushan_spi_ctrl) {
-		pr_err("yushan_spi_ctrl is NULL!\n");
-		return -EINVAL;
-	}
-
-	if(yushan_spi_write_addr == NULL)
-		yushan_spi_write_addr =
-			kcalloc(yushan_MAX_ALLOCATE+3, sizeof(uint8_t), GFP_KERNEL);
-
-	return 0;
-}
-
diff --git a/drivers/media/video/msm/rawchip/rawchip_spi.h b/drivers/media/video/msm/rawchip/rawchip_spi.h
deleted file mode 100644
index cf4f5ff..0000000
--- a/drivers/media/video/msm/rawchip/rawchip_spi.h
+++ /dev/null
@@ -1,42 +0,0 @@
-/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_RAWCHIP_SPI_H
-#define MSM_RAWCHIP_SPI_H
-
-#include <linux/module.h>
-#include <linux/spi/spi.h>
-#include <linux/spi/spidev.h>
-
-#define TRUE								1
-#define SUCCESS								1
-#define FALSE								0
-#define FAILURE								0
-
-
-int rawchip_spi_write(unsigned char addr, unsigned char data);
-int rawchip_spi_write_2B1B(uint16_t addr, unsigned char data);
-int rawchip_spi_read_2B1B(uint16_t addr, unsigned char *data);
-int rawchip_spi_read_2B2B(uint16_t addr, uint16_t *data);
-int yushan_spi_write(uint16_t reg, uint8_t val);
-
-int	SPI_Read(uint16_t uwIndex , uint16_t uwCount , uint8_t *pData);
-int	SPI_Write(uint16_t uwIndex , uint16_t uwCount , uint8_t *pData);
-
-int	SPI_Write_4thByte(uint16_t uwIndex ,
-		uint16_t uwCount , uint8_t *pData);
-
-int spi_rawchip_probe(struct spi_device *rawchip);
-
-int rawchip_spi_init(void);
-
-#endif
diff --git a/drivers/media/video/msm/rawchip/yushan_reg.c b/drivers/media/video/msm/rawchip/yushan_reg.c
deleted file mode 100644
index 1f9594a..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg.c
+++ /dev/null
@@ -1,37984 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpcode_u[] =
-{
-	0x78,
-	0x64,
-	0x00,
-	0xa0,
-	0xff,
-	0x13,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x13,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0xa0,
-	0x34,
-	0x13,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x9c,
-	0x14,
-	0x1a,
-	0x9c,
-	0x18,
-	0x1a,
-	0x9c,
-	0x20,
-	0x1a,
-	0x9c,
-	0x24,
-	0x1a,
-	0xb8,
-	0xa0,
-	0x04,
-	0x53,
-	0xa1,
-	0x0d,
-	0x00,
-	0x02,
-	0xa0,
-	0x03,
-	0x53,
-	0xd7,
-	0x0d,
-	0x04,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x07,
-	0x02,
-	0xcd,
-	0xd9,
-	0x0d,
-	0xf0,
-	0x04,
-	0xa2,
-	0x02,
-	0x80,
-	0x10,
-	0xa2,
-	0x01,
-	0xad,
-	0x00,
-	0x18,
-	0xc9,
-	0x5b,
-	0xd0,
-	0x07,
-	0xad,
-	0x01,
-	0x18,
-	0xc9,
-	0xe6,
-	0xf0,
-	0x08,
-	0x8e,
-	0x08,
-	0x02,
-	0xee,
-	0x14,
-	0x1a,
-	0x80,
-	0x1b,
-	0xa2,
-	0xff,
-	0x9a,
-	0xa0,
-	0x0e,
-	0x53,
-	0x93,
-	0x0d,
-	0x02,
-	0x00,
-	0xa9,
-	0x03,
-	0x85,
-	0xa0,
-	0x85,
-	0xbf,
-	0xa0,
-	0x05,
-	0x53,
-	0xa5,
-	0x0d,
-	0x2e,
-	0x02,
-	0x58,
-	0xee,
-	0x14,
-	0x1a,
-	0x5c,
-	0x80,
-	0xfd,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0xa9,
-	0x01,
-	0xa0,
-	0x34,
-	0xa6,
-	0xcf,
-	0xf0,
-	0x0b,
-	0x53,
-	0x00,
-	0x02,
-	0x35,
-	0x01,
-	0x8d,
-	0x69,
-	0x01,
-	0x3a,
-	0x80,
-	0x08,
-	0x53,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x8d,
-	0x34,
-	0x01,
-	0x85,
-	0xcf,
-	0x9c,
-	0x08,
-	0x02,
-	0x9c,
-	0x18,
-	0x1a,
-	0xee,
-	0x18,
-	0x1a,
-	0x20,
-	0x6b,
-	0x0d,
-	0x4c,
-	0x40,
-	0x0d,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0xad,
-	0x34,
-	0x18,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x0e,
-	0x9c,
-	0x24,
-	0x1a,
-	0xee,
-	0x24,
-	0x1a,
-	0xad,
-	0x33,
-	0x02,
-	0xf0,
-	0x03,
-	0x20,
-	0x6b,
-	0x0d,
-	0x4c,
-	0x40,
-	0x0d,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0x9c,
-	0x24,
-	0x1a,
-	0xee,
-	0x24,
-	0x1a,
-	0x4c,
-	0x40,
-	0x0d,
-	0x40,
-	0xb9,
-	0x28,
-	0x00,
-	0xd0,
-	0x4d,
-	0xb9,
-	0x27,
-	0x00,
-	0xc9,
-	0x08,
-	0xb0,
-	0x46,
-	0x1a,
-	0x4a,
-	0xb0,
-	0x3f,
-	0x85,
-	0xeb,
-	0x98,
-	0x4a,
-	0xa8,
-	0xb9,
-	0x1d,
-	0x00,
-	0x4a,
-	0xb0,
-	0x40,
-	0xb9,
-	0x21,
-	0x00,
-	0xaa,
-	0x4a,
-	0x90,
-	0x36,
-	0x8a,
-	0xf9,
-	0xda,
-	0x0d,
-	0xb9,
-	0x22,
-	0x00,
-	0xf9,
-	0xdb,
-	0x0d,
-	0xb0,
-	0x27,
-	0x8a,
-	0xf9,
-	0x1d,
-	0x00,
-	0xaa,
-	0xb9,
-	0x22,
-	0x00,
-	0xf9,
-	0x1e,
-	0x00,
-	0x90,
-	0x23,
-	0xe8,
-	0xd0,
-	0x01,
-	0x1a,
-	0xa4,
-	0xeb,
-	0x20,
-	0xff,
-	0x0a,
-	0xe8,
-	0xd0,
-	0x01,
-	0x1a,
-	0x4a,
-	0xa8,
-	0x8a,
-	0x6a,
-	0xa2,
-	0x00,
-	0x60,
-	0xa2,
-	0x13,
-	0x60,
-	0xa9,
-	0x11,
-	0x60,
-	0xa2,
-	0x09,
-	0x60,
-	0xa2,
-	0x0d,
-	0x60,
-	0xa2,
-	0x0b,
-	0x60,
-	0xa2,
-	0x0f,
-	0x60,
-	0xf8,
-	0xa5,
-	0xcf,
-	0x85,
-	0xf7,
-	0xa0,
-	0x34,
-	0xa5,
-	0xf7,
-	0xd0,
-	0x12,
-	0xad,
-	0x69,
-	0x01,
-	0xd0,
-	0x03,
-	0x4c,
-	0x25,
-	0x04,
-	0x53,
-	0x35,
-	0x01,
-	0x10,
-	0x00,
-	0x9c,
-	0x69,
-	0x01,
-	0x80,
-	0x10,
-	0xad,
-	0x34,
-	0x01,
-	0xd0,
-	0x03,
-	0x4c,
-	0x25,
-	0x04,
-	0x53,
-	0x00,
-	0x01,
-	0x10,
-	0x00,
-	0x9c,
-	0x34,
-	0x01,
-	0x64,
-	0x63,
-	0xa0,
-	0x00,
-	0x20,
-	0x0e,
-	0x03,
-	0xf0,
-	0x07,
-	0x64,
-	0x45,
-	0x64,
-	0x46,
-	0x8a,
-	0x80,
-	0x59,
-	0x85,
-	0x45,
-	0x84,
-	0x46,
-	0xa0,
-	0x04,
-	0x20,
-	0x0e,
-	0x03,
-	0xf0,
-	0x08,
-	0x8a,
-	0x1a,
-	0x80,
-	0x4a,
-	0xa9,
-	0x1f,
-	0x80,
-	0x46,
-	0x85,
-	0x47,
-	0x84,
-	0x48,
-	0x38,
-	0xa5,
-	0x2e,
-	0xed,
-	0xdf,
-	0x0d,
-	0xa5,
-	0x2f,
-	0xed,
-	0xe0,
-	0x0d,
-	0x90,
-	0xeb,
-	0xad,
-	0xe1,
-	0x0d,
-	0xe5,
-	0x2e,
-	0xad,
-	0xe2,
-	0x0d,
-	0xe5,
-	0x2f,
-	0x90,
-	0xdf,
-	0xa0,
-	0x02,
-	0x53,
-	0x2e,
-	0x00,
-	0xe6,
-	0x00,
-	0x20,
-	0x1c,
-	0x0c,
-	0xa0,
-	0x02,
-	0x53,
-	0xe6,
-	0x00,
-	0x2e,
-	0x00,
-	0xa5,
-	0x1b,
-	0xaa,
-	0x29,
-	0x01,
-	0xd0,
-	0x04,
-	0xa2,
-	0x38,
-	0x86,
-	0x1b,
-	0x20,
-	0x50,
-	0x06,
-	0xd0,
-	0x08,
-	0x20,
-	0x6b,
-	0x09,
-	0xd0,
-	0x03,
-	0x20,
-	0x0b,
-	0x0a,
-	0x85,
-	0x63,
-	0xa0,
-	0x1f,
-	0xa2,
-	0x03,
-	0xa5,
-	0xf7,
-	0xf0,
-	0x09,
-	0x86,
-	0xbf,
-	0x53,
-	0x45,
-	0x00,
-	0xa1,
-	0x00,
-	0x80,
-	0x07,
-	0x86,
-	0xa0,
-	0x53,
-	0x45,
-	0x00,
-	0x82,
-	0x00,
-	0x9c,
-	0x1c,
-	0x1a,
-	0xee,
-	0x1c,
-	0x1a,
-	0x18,
-	0xad,
-	0x69,
-	0x01,
-	0x6d,
-	0x34,
-	0x01,
-	0xf0,
-	0x0a,
-	0xa5,
-	0xf7,
-	0x3a,
-	0x29,
-	0x01,
-	0x85,
-	0xf7,
-	0x4c,
-	0x74,
-	0x03,
-	0x9c,
-	0x6a,
-	0x01,
-	0xad,
-	0x33,
-	0x02,
-	0xf0,
-	0x10,
-	0xa0,
-	0x02,
-	0x53,
-	0x45,
-	0x00,
-	0x09,
-	0x02,
-	0x0e,
-	0x09,
-	0x02,
-	0x2e,
-	0x0a,
-	0x02,
-	0x20,
-	0x6d,
-	0x04,
-	0x4c,
-	0x5d,
-	0x0d,
-	0xa9,
-	0x01,
-	0xc4,
-	0xf5,
-	0xd0,
-	0x04,
-	0xe4,
-	0xf4,
-	0xf0,
-	0x01,
-	0x1a,
-	0x3a,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0x20,
-	0x6d,
-	0x04,
-	0x4c,
-	0x40,
-	0x0d,
-	0xad,
-	0x0a,
-	0x02,
-	0x4a,
-	0x85,
-	0xf5,
-	0xad,
-	0x09,
-	0x02,
-	0x6a,
-	0xb0,
-	0x46,
-	0x85,
-	0xf4,
-	0x64,
-	0xe4,
-	0xa4,
-	0x83,
-	0xa6,
-	0x82,
-	0x20,
-	0x53,
-	0x04,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe4,
-	0xa4,
-	0xa2,
-	0xa6,
-	0xa1,
-	0x20,
-	0x53,
-	0x04,
-	0xd0,
-	0x04,
-	0xe6,
-	0xe4,
-	0xe6,
-	0xe4,
-	0xa5,
-	0xe4,
-	0xf0,
-	0x26,
-	0xa0,
-	0x1e,
-	0xc9,
-	0x01,
-	0xf0,
-	0x07,
-	0x4a,
-	0x90,
-	0x0f,
-	0xa5,
-	0xcf,
-	0xd0,
-	0x0b,
-	0xa5,
-	0xa0,
-	0xd0,
-	0x17,
-	0x53,
-	0x82,
-	0x00,
-	0x64,
-	0x00,
-	0x80,
-	0x09,
-	0xa5,
-	0xbf,
-	0xd0,
-	0x0c,
-	0x53,
-	0xa1,
-	0x00,
-	0x64,
-	0x00,
-	0x20,
-	0xf8,
-	0x04,
-	0x80,
-	0x02,
-	0xa9,
-	0x04,
-	0x8d,
-	0x08,
-	0x02,
-	0xa2,
-	0x28,
-	0xa8,
-	0xd0,
-	0x0a,
-	0xee,
-	0x31,
-	0x02,
-	0xd0,
-	0x03,
-	0xee,
-	0x32,
-	0x02,
-	0xa2,
-	0x20,
-	0x9e,
-	0x00,
-	0x1a,
-	0xfe,
-	0x00,
-	0x1a,
-	0x60,
-	0x8d,
-	0x50,
-	0x18,
-	0x8e,
-	0x50,
-	0x18,
-	0xd0,
-	0x01,
-	0xca,
-	0x3a,
-	0x99,
-	0x00,
-	0x18,
-	0x48,
-	0x8a,
-	0x99,
-	0x01,
-	0x18,
-	0x68,
-	0x0a,
-	0x1a,
-	0x8d,
-	0x50,
-	0x18,
-	0x8a,
-	0x2a,
-	0x8d,
-	0x50,
-	0x18,
-	0x60,
-	0xa0,
-	0x01,
-	0x8c,
-	0x04,
-	0x18,
-	0x8c,
-	0x10,
-	0x18,
-	0x53,
-	0x7d,
-	0x00,
-	0x78,
-	0x18,
-	0x53,
-	0x7c,
-	0x00,
-	0x7c,
-	0x18,
-	0x53,
-	0x7b,
-	0x00,
-	0x80,
-	0x18,
-	0x53,
-	0x7a,
-	0x00,
-	0x84,
-	0x18,
-	0x53,
-	0x7e,
-	0x00,
-	0x88,
-	0x18,
-	0x53,
-	0x7f,
-	0x00,
-	0x8c,
-	0x18,
-	0x53,
-	0x80,
-	0x00,
-	0x90,
-	0x18,
-	0xa5,
-	0x81,
-	0x8d,
-	0x94,
-	0x18,
-	0x8d,
-	0x14,
-	0x18,
-	0xc8,
-	0x53,
-	0x68,
-	0x00,
-	0x54,
-	0x18,
-	0x53,
-	0x6a,
-	0x00,
-	0x58,
-	0x18,
-	0x53,
-	0x6c,
-	0x00,
-	0x5c,
-	0x18,
-	0x53,
-	0x6e,
-	0x00,
-	0x60,
-	0x18,
-	0x53,
-	0x72,
-	0x00,
-	0x64,
-	0x18,
-	0x53,
-	0x70,
-	0x00,
-	0x68,
-	0x18,
-	0x53,
-	0x76,
-	0x00,
-	0x6c,
-	0x18,
-	0x53,
-	0x74,
-	0x00,
-	0x70,
-	0x18,
-	0x53,
-	0x78,
-	0x00,
-	0x74,
-	0x18,
-	0x9c,
-	0x3c,
-	0x18,
-	0x13,
-	0x3c,
-	0x18,
-	0x28,
-	0x18,
-	0x13,
-	0x3c,
-	0x18,
-	0x2c,
-	0x18,
-	0x9c,
-	0x30,
-	0x18,
-	0x9c,
-	0x20,
-	0x18,
-	0x9c,
-	0x24,
-	0x18,
-	0x9c,
-	0x0c,
-	0x18,
-	0x9c,
-	0x0d,
-	0x18,
-	0xa0,
-	0x18,
-	0xa6,
-	0x65,
-	0xa5,
-	0x64,
-	0x20,
-	0xda,
-	0x04,
-	0xa9,
-	0x04,
-	0x8d,
-	0x0c,
-	0x18,
-	0x9c,
-	0x0d,
-	0x18,
-	0xa0,
-	0x1c,
-	0xa6,
-	0x67,
-	0xa5,
-	0x66,
-	0x20,
-	0xda,
-	0x04,
-	0xa0,
-	0x03,
-	0x43,
-	0xaa,
-	0x0d,
-	0x38,
-	0x18,
-	0xa9,
-	0x00,
-	0x60,
-	0x20,
-	0xa5,
-	0x05,
-	0xe0,
-	0x00,
-	0xf0,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0xc8,
-	0x60,
-	0x85,
-	0xea,
-	0x45,
-	0xec,
-	0x84,
-	0xeb,
-	0xaa,
-	0xa5,
-	0xed,
-	0x45,
-	0xea,
-	0x18,
-	0x65,
-	0xeb,
-	0x90,
-	0x01,
-	0xc8,
-	0x60,
-	0x18,
-	0x65,
-	0xee,
-	0x85,
-	0xee,
-	0x98,
-	0x65,
-	0xef,
-	0x85,
-	0xef,
-	0x38,
-	0xa5,
-	0xee,
-	0xe9,
-	0xff,
-	0xa5,
-	0xef,
-	0xe9,
-	0x07,
-	0x90,
-	0x08,
-	0xa9,
-	0xff,
-	0x85,
-	0xee,
-	0xa9,
-	0x07,
-	0x85,
-	0xef,
-	0x60,
-	0x38,
-	0xa5,
-	0xee,
-	0xe5,
-	0xec,
-	0x85,
-	0xee,
-	0xa5,
-	0xef,
-	0xe5,
-	0xed,
-	0x85,
-	0xef,
-	0xb0,
-	0x04,
-	0x64,
-	0xee,
-	0x64,
-	0xef,
-	0x60,
-	0xa5,
-	0xee,
-	0x0a,
-	0x85,
-	0xec,
-	0xa5,
-	0xef,
-	0x2a,
-	0x85,
-	0xed,
-	0x60,
-	0x20,
-	0xe9,
-	0x05,
-	0xa5,
-	0xf2,
-	0xd0,
-	0x05,
-	0xa6,
-	0xf3,
-	0xd0,
-	0x0b,
-	0x60,
-	0x20,
-	0x99,
-	0x05,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x4c,
-	0xd5,
-	0x05,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa9,
-	0x04,
-	0xe5,
-	0xed,
-	0x85,
-	0xed,
-	0x8a,
-	0x20,
-	0x99,
-	0x05,
-	0x4c,
-	0xb7,
-	0x05,
-	0x20,
-	0xe9,
-	0x05,
-	0xa6,
-	0xf2,
-	0xd0,
-	0x05,
-	0xa6,
-	0xf3,
-	0xd0,
-	0x15,
-	0x60,
-	0x38,
-	0xa9,
-	0xfe,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa9,
-	0x0f,
-	0xe5,
-	0xed,
-	0x85,
-	0xed,
-	0x8a,
-	0x20,
-	0xa5,
-	0x05,
-	0x4c,
-	0xb7,
-	0x05,
-	0x38,
-	0xa5,
-	0xed,
-	0xe9,
-	0x04,
-	0x85,
-	0xed,
-	0x8a,
-	0x20,
-	0xa5,
-	0x05,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x4c,
-	0xd5,
-	0x05,
-	0xa5,
-	0x2d,
-	0xd0,
-	0x02,
-	0xa9,
-	0x11,
-	0xaa,
-	0x49,
-	0x10,
-	0xc0,
-	0x05,
-	0x90,
-	0x03,
-	0xa9,
-	0x1c,
-	0x60,
-	0x84,
-	0xd2,
-	0x8a,
-	0x29,
-	0x0f,
-	0xc9,
-	0x05,
-	0xb0,
-	0xf4,
-	0x45,
-	0xd2,
-	0xaa,
-	0xbd,
-	0xc5,
-	0x0d,
-	0x85,
-	0xd2,
-	0x64,
-	0xe3,
-	0x38,
-	0xad,
-	0x2d,
-	0x0f,
-	0xe5,
-	0xd2,
-	0xb0,
-	0x02,
-	0xe6,
-	0xe3,
-	0x64,
-	0xc2,
-	0x64,
-	0xc3,
-	0xa0,
-	0x02,
-	0x53,
-	0x2e,
-	0x00,
-	0xc0,
-	0x00,
-	0x53,
-	0x34,
-	0x00,
-	0xd0,
-	0x00,
-	0x20,
-	0x58,
-	0x0b,
-	0xa5,
-	0xc4,
-	0x10,
-	0x0a,
-	0xe6,
-	0xc5,
-	0xd0,
-	0x06,
-	0xe6,
-	0xc6,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc7,
-	0xa5,
-	0xc7,
-	0xf0,
-	0x06,
-	0xa9,
-	0xff,
-	0x85,
-	0xc5,
-	0x85,
-	0xc6,
-	0xa0,
-	0x02,
-	0x53,
-	0xc5,
-	0x00,
-	0xcd,
-	0x00,
-	0x53,
-	0xcd,
-	0x00,
-	0xe8,
-	0x00,
-	0xa2,
-	0x2e,
-	0xa0,
-	0x0f,
-	0xa9,
-	0x04,
-	0x20,
-	0x3c,
-	0x0a,
-	0x84,
-	0xd3,
-	0xa5,
-	0xe3,
-	0x49,
-	0x24,
-	0x85,
-	0xc8,
-	0xa5,
-	0xd3,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0xc8,
-	0x85,
-	0xc8,
-	0xc0,
-	0x04,
-	0xf0,
-	0x10,
-	0x38,
-	0xb9,
-	0xfc,
-	0x0f,
-	0xe5,
-	0xcd,
-	0xc8,
-	0xb9,
-	0xfc,
-	0x0f,
-	0xc8,
-	0xe5,
-	0xce,
-	0x90,
-	0xed,
-	0x88,
-	0x98,
-	0x4a,
-	0xa8,
-	0xb9,
-	0x3e,
-	0x00,
-	0x85,
-	0xf2,
-	0xa9,
-	0x80,
-	0x38,
-	0xe5,
-	0xf2,
-	0x85,
-	0xf2,
-	0xb0,
-	0x0b,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xf2,
-	0x64,
-	0xf2,
-	0x85,
-	0xf3,
-	0x80,
-	0x02,
-	0x64,
-	0xf3,
-	0xa9,
-	0x0c,
-	0x85,
-	0xcc,
-	0xa4,
-	0xd3,
-	0xa2,
-	0x00,
-	0xb9,
-	0x2e,
-	0x0f,
-	0x95,
-	0xe6,
-	0xe8,
-	0xc8,
-	0xe0,
-	0x04,
-	0x90,
-	0xf5,
-	0x18,
-	0xa5,
-	0xc8,
-	0x69,
-	0x34,
-	0x85,
-	0xc8,
-	0xa9,
-	0x0f,
-	0x90,
-	0x01,
-	0x1a,
-	0x85,
-	0xc9,
-	0xa5,
-	0xe3,
-	0x49,
-	0x40,
-	0x85,
-	0xca,
-	0xa5,
-	0xd3,
-	0x49,
-	0x10,
-	0x18,
-	0x65,
-	0xca,
-	0x69,
-	0x7c,
-	0x85,
-	0xca,
-	0xa9,
-	0x0f,
-	0x90,
-	0x01,
-	0x1a,
-	0x85,
-	0xcb,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0xf4,
-	0x05,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x49,
-	0x00,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0xf4,
-	0x05,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x4b,
-	0x00,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0x1e,
-	0x06,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x4d,
-	0x00,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0x1e,
-	0x06,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x4f,
-	0x00,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x51,
-	0x64,
-	0x52,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x5f,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x60,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x61,
-	0xa5,
-	0x1b,
-	0x29,
-	0x10,
-	0xf0,
-	0x08,
-	0xa9,
-	0xff,
-	0x85,
-	0x51,
-	0xa9,
-	0x03,
-	0x85,
-	0x52,
-	0xa9,
-	0x00,
-	0x60,
-	0x18,
-	0xa5,
-	0xd4,
-	0x69,
-	0x0a,
-	0x80,
-	0x02,
-	0xa5,
-	0xd5,
-	0xaa,
-	0xa0,
-	0x00,
-	0xbd,
-	0xeb,
-	0x0d,
-	0x99,
-	0xe6,
-	0x00,
-	0xe8,
-	0xc8,
-	0xc0,
-	0x04,
-	0xd0,
-	0xf4,
-	0xa0,
-	0x02,
-	0x60,
-	0x65,
-	0xe2,
-	0x85,
-	0xe2,
-	0x98,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x90,
-	0x07,
-	0xe6,
-	0xdf,
-	0x18,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe0,
-	0x60,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x98,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x90,
-	0x07,
-	0x18,
-	0xe6,
-	0xe0,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe1,
-	0x60,
-	0xa4,
-	0xe3,
-	0xf0,
-	0x03,
-	0x4c,
-	0x65,
-	0x0a,
-	0x4c,
-	0x88,
-	0x0a,
-	0xa9,
-	0x06,
-	0x85,
-	0xcc,
-	0x20,
-	0x94,
-	0x07,
-	0x53,
-	0x34,
-	0x00,
-	0xcd,
-	0x00,
-	0x53,
-	0xda,
-	0x00,
-	0xc8,
-	0x00,
-	0x53,
-	0xdc,
-	0x00,
-	0xca,
-	0x00,
-	0x20,
-	0xd5,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0xf0,
-	0x00,
-	0x53,
-	0xc8,
-	0x00,
-	0xda,
-	0x00,
-	0x53,
-	0xca,
-	0x00,
-	0xdc,
-	0x00,
-	0x20,
-	0x94,
-	0x07,
-	0x53,
-	0xd6,
-	0x00,
-	0xc8,
-	0x00,
-	0x53,
-	0xd8,
-	0x00,
-	0xca,
-	0x00,
-	0x20,
-	0xd5,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0xc8,
-	0x00,
-	0xd6,
-	0x00,
-	0x53,
-	0xca,
-	0x00,
-	0xd8,
-	0x00,
-	0x38,
-	0xa5,
-	0xee,
-	0xe5,
-	0xf0,
-	0xd0,
-	0x09,
-	0xa5,
-	0xef,
-	0xe5,
-	0xf1,
-	0xd0,
-	0x03,
-	0xa5,
-	0xee,
-	0x60,
-	0x20,
-	0x9b,
-	0x07,
-	0x38,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xe6,
-	0x85,
-	0xd0,
-	0xa5,
-	0xe9,
-	0xe5,
-	0xe7,
-	0x85,
-	0xd1,
-	0x4a,
-	0x85,
-	0xeb,
-	0xa5,
-	0xd0,
-	0x6a,
-	0x85,
-	0xea,
-	0x38,
-	0xa5,
-	0xf0,
-	0xe5,
-	0xee,
-	0x85,
-	0xec,
-	0xa5,
-	0xf1,
-	0xe5,
-	0xef,
-	0x85,
-	0xed,
-	0x64,
-	0xe6,
-	0xb0,
-	0x17,
-	0xe6,
-	0xe6,
-	0xa5,
-	0xea,
-	0xe9,
-	0x00,
-	0xb0,
-	0x03,
-	0x38,
-	0xc6,
-	0xeb,
-	0xa9,
-	0x00,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa9,
-	0x00,
-	0xe5,
-	0xed,
-	0x85,
-	0xed,
-	0x64,
-	0xe0,
-	0x64,
-	0xe1,
-	0xa5,
-	0xd5,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x0d,
-	0x45,
-	0xed,
-	0x85,
-	0xe2,
-	0x84,
-	0xde,
-	0xbd,
-	0xfc,
-	0x0d,
-	0x45,
-	0xed,
-	0x18,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x90,
-	0x02,
-	0xc8,
-	0x18,
-	0x84,
-	0xdf,
-	0xbd,
-	0xfc,
-	0x0d,
-	0x45,
-	0xec,
-	0x20,
-	0xaf,
-	0x07,
-	0xbd,
-	0xfd,
-	0x0d,
-	0x45,
-	0xeb,
-	0x20,
-	0xaf,
-	0x07,
-	0xbd,
-	0xfd,
-	0x0d,
-	0x45,
-	0xec,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x98,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x90,
-	0x07,
-	0xe6,
-	0xe0,
-	0x18,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe1,
-	0xbd,
-	0xfd,
-	0x0d,
-	0x45,
-	0xed,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x98,
-	0x65,
-	0xe0,
-	0x85,
-	0xe0,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0xe1,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xea,
-	0x65,
-	0xe2,
-	0x98,
-	0xa0,
-	0x00,
-	0x20,
-	0xc2,
-	0x07,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xeb,
-	0x20,
-	0xc2,
-	0x07,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xec,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x98,
-	0x65,
-	0xe0,
-	0x85,
-	0xe0,
-	0x90,
-	0x03,
-	0xe6,
-	0xe1,
-	0x18,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xed,
-	0x65,
-	0xe0,
-	0x85,
-	0xe0,
-	0x98,
-	0x65,
-	0xe1,
-	0x85,
-	0xe1,
-	0xa0,
-	0x04,
-	0x53,
-	0xde,
-	0x00,
-	0xc0,
-	0x00,
-	0xe6,
-	0xc0,
-	0xd0,
-	0x0a,
-	0xe6,
-	0xc1,
-	0xd0,
-	0x06,
-	0xe6,
-	0xc2,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc3,
-	0x20,
-	0x58,
-	0x0b,
-	0x38,
-	0xa2,
-	0x00,
-	0xa0,
-	0x04,
-	0xb5,
-	0xea,
-	0xf5,
-	0xc4,
-	0xe8,
-	0x88,
-	0xd0,
-	0xf8,
-	0xdc,
-	0x90,
-	0x08,
-	0x53,
-	0xc0,
-	0x00,
-	0xde,
-	0x00,
-	0x4c,
-	0x0d,
-	0x09,
-	0x53,
-	0xde,
-	0x00,
-	0xc0,
-	0x00,
-	0xa5,
-	0xe6,
-	0xf0,
-	0x17,
-	0xa2,
-	0x00,
-	0x38,
-	0x8a,
-	0xe5,
-	0xc0,
-	0x85,
-	0xc0,
-	0x8a,
-	0xe5,
-	0xc1,
-	0x85,
-	0xc1,
-	0x8a,
-	0xe5,
-	0xc2,
-	0x85,
-	0xc2,
-	0x8a,
-	0xe5,
-	0xc3,
-	0x85,
-	0xc3,
-	0x20,
-	0x9b,
-	0x07,
-	0x53,
-	0x2e,
-	0x00,
-	0xcd,
-	0x00,
-	0xa0,
-	0x04,
-	0x53,
-	0xee,
-	0x00,
-	0xea,
-	0x00,
-	0x20,
-	0xb1,
-	0x0a,
-	0xa5,
-	0xee,
-	0x60,
-	0xa5,
-	0x1b,
-	0x29,
-	0x08,
-	0xf0,
-	0x10,
-	0x64,
-	0xe5,
-	0xa0,
-	0x06,
-	0x13,
-	0xe5,
-	0x00,
-	0x59,
-	0x00,
-	0xa9,
-	0xf8,
-	0x85,
-	0x59,
-	0xa9,
-	0x00,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2e,
-	0x00,
-	0xe8,
-	0x00,
-	0xa2,
-	0xeb,
-	0xa0,
-	0x0d,
-	0xa9,
-	0x08,
-	0x20,
-	0x3c,
-	0x0a,
-	0x84,
-	0xd5,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x00,
-	0xe8,
-	0x00,
-	0xa2,
-	0xf5,
-	0xa0,
-	0x0d,
-	0xa9,
-	0x04,
-	0x20,
-	0x3c,
-	0x0a,
-	0x84,
-	0xd4,
-	0xa5,
-	0xd5,
-	0x4a,
-	0x49,
-	0x12,
-	0x85,
-	0xd6,
-	0xa5,
-	0xd4,
-	0x49,
-	0x03,
-	0x65,
-	0xd6,
-	0x69,
-	0x0b,
-	0x85,
-	0xd6,
-	0x98,
-	0x69,
-	0x0e,
-	0x85,
-	0xd7,
-	0xa5,
-	0xd6,
-	0x69,
-	0x12,
-	0x85,
-	0xda,
-	0xa5,
-	0xd7,
-	0x69,
-	0x00,
-	0x85,
-	0xdb,
-	0xa5,
-	0xd5,
-	0x49,
-	0x14,
-	0x69,
-	0x65,
-	0x85,
-	0xd8,
-	0x98,
-	0x69,
-	0x0e,
-	0x85,
-	0xd9,
-	0x18,
-	0xa5,
-	0xd4,
-	0x49,
-	0x0a,
-	0x65,
-	0xd8,
-	0x85,
-	0xd8,
-	0x90,
-	0x03,
-	0xe6,
-	0xd9,
-	0x18,
-	0xa5,
-	0xd8,
-	0x69,
-	0x28,
-	0x85,
-	0xdc,
-	0xa5,
-	0xd9,
-	0x69,
-	0x00,
-	0x85,
-	0xdd,
-	0x64,
-	0xe3,
-	0x20,
-	0xdf,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x59,
-	0x00,
-	0xe6,
-	0xe3,
-	0xa2,
-	0x03,
-	0xda,
-	0x20,
-	0xdf,
-	0x07,
-	0xfa,
-	0x95,
-	0x5b,
-	0xca,
-	0x10,
-	0xf6,
-	0xa9,
-	0x00,
-	0x60,
-	0xa5,
-	0x1c,
-	0xd8,
-	0x4d,
-	0xde,
-	0x0d,
-	0x85,
-	0x62,
-	0xf8,
-	0x29,
-	0xfc,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1d,
-	0x60,
-	0xa6,
-	0x27,
-	0xa5,
-	0x1b,
-	0x29,
-	0x20,
-	0xf0,
-	0x02,
-	0xa2,
-	0x01,
-	0x8a,
-	0x3a,
-	0x49,
-	0x03,
-	0x18,
-	0x69,
-	0xad,
-	0x85,
-	0xe6,
-	0x98,
-	0x69,
-	0x0d,
-	0x85,
-	0xe7,
-	0xa0,
-	0x06,
-	0xd3,
-	0xe6,
-	0x53,
-	0x00,
-	0xa9,
-	0x00,
-	0x60,
-	0x85,
-	0xea,
-	0x86,
-	0xe6,
-	0x84,
-	0xe7,
-	0xa0,
-	0x01,
-	0xc8,
-	0xc4,
-	0xea,
-	0xf0,
-	0x0d,
-	0x38,
-	0xb1,
-	0xe6,
-	0xe5,
-	0xe8,
-	0xc8,
-	0xb1,
-	0xe6,
-	0xe5,
-	0xe9,
-	0x90,
-	0xef,
-	0x88,
-	0x88,
-	0x88,
-	0x60,
-	0xa0,
-	0x04,
-	0xe6,
-	0xca,
-	0xd0,
-	0x02,
-	0xe6,
-	0xcb,
-	0x88,
-	0xd0,
-	0xf7,
-	0x60,
-	0xa0,
-	0x04,
-	0xd3,
-	0xca,
-	0xc0,
-	0x00,
-	0xb2,
-	0xc8,
-	0x85,
-	0xea,
-	0x64,
-	0xeb,
-	0xa4,
-	0xcc,
-	0xb1,
-	0xc8,
-	0x85,
-	0xec,
-	0x64,
-	0xed,
-	0x20,
-	0xb1,
-	0x0a,
-	0x20,
-	0x59,
-	0x0a,
-	0xe6,
-	0xc8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc9,
-	0xa5,
-	0xee,
-	0x60,
-	0xa0,
-	0x04,
-	0xd3,
-	0xca,
-	0xc0,
-	0x00,
-	0xa0,
-	0x02,
-	0xd3,
-	0xc8,
-	0xea,
-	0x00,
-	0xa4,
-	0xcc,
-	0xb1,
-	0xc8,
-	0x85,
-	0xec,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x85,
-	0xed,
-	0x20,
-	0xb1,
-	0x0a,
-	0x20,
-	0x59,
-	0x0a,
-	0xa0,
-	0x02,
-	0xe6,
-	0xc8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc9,
-	0x88,
-	0xd0,
-	0xf7,
-	0x60,
-	0xa0,
-	0x02,
-	0x38,
-	0xa5,
-	0xcd,
-	0xe5,
-	0xe6,
-	0xa5,
-	0xce,
-	0xe5,
-	0xe7,
-	0xb0,
-	0x06,
-	0x53,
-	0xea,
-	0x00,
-	0xee,
-	0x00,
-	0x60,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xcd,
-	0xa5,
-	0xe9,
-	0xe5,
-	0xce,
-	0xb0,
-	0x06,
-	0x53,
-	0xec,
-	0x00,
-	0xee,
-	0x00,
-	0x60,
-	0x38,
-	0xa5,
-	0xcd,
-	0xe5,
-	0xe6,
-	0x85,
-	0xd0,
-	0xa5,
-	0xce,
-	0xe5,
-	0xe7,
-	0x85,
-	0xd1,
-	0x20,
-	0x58,
-	0x0b,
-	0x18,
-	0xa9,
-	0x80,
-	0x65,
-	0xc5,
-	0x90,
-	0x06,
-	0xe6,
-	0xc6,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc7,
-	0x18,
-	0xa5,
-	0xea,
-	0x65,
-	0xc6,
-	0x85,
-	0xee,
-	0xa5,
-	0xeb,
-	0x65,
-	0xc7,
-	0x85,
-	0xef,
-	0x60,
-	0x88,
-	0xd0,
-	0x01,
-	0x60,
-	0x85,
-	0xe6,
-	0x86,
-	0xe7,
-	0x98,
-	0xc8,
-	0x18,
-	0x65,
-	0xe7,
-	0xaa,
-	0x90,
-	0x02,
-	0xe6,
-	0xe6,
-	0x98,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0e,
-	0x29,
-	0x01,
-	0xd0,
-	0x0d,
-	0x46,
-	0xe6,
-	0x8a,
-	0x6a,
-	0xaa,
-	0x98,
-	0x4a,
-	0xa8,
-	0x80,
-	0xee,
-	0xa5,
-	0xe6,
-	0x60,
-	0x8a,
-	0x1a,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe6,
-	0x49,
-	0x55,
-	0x84,
-	0xe8,
-	0x18,
-	0x65,
-	0xe8,
-	0x85,
-	0xe7,
-	0x90,
-	0x03,
-	0xe6,
-	0xe8,
-	0x18,
-	0xa5,
-	0xe6,
-	0x49,
-	0x55,
-	0x84,
-	0xe9,
-	0xaa,
-	0x65,
-	0xe7,
-	0x8a,
-	0x65,
-	0xe8,
-	0x85,
-	0xe8,
-	0xa5,
-	0xe9,
-	0x90,
-	0x03,
-	0xe6,
-	0xe9,
-	0x18,
-	0x65,
-	0xe8,
-	0xaa,
-	0xa5,
-	0xe9,
-	0x69,
-	0x00,
-	0x60,
-	0x64,
-	0xc7,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc0,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0x18,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc1,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x90,
-	0x05,
-	0xc8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc7,
-	0x84,
-	0xc6,
-	0x18,
-	0xa5,
-	0xd1,
-	0x45,
-	0xc0,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x98,
-	0x65,
-	0xc6,
-	0x85,
-	0xc6,
-	0x90,
-	0x03,
-	0xe6,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc2,
-	0x65,
-	0xc6,
-	0x85,
-	0xc6,
-	0x98,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd1,
-	0x45,
-	0xc1,
-	0x65,
-	0xc6,
-	0x85,
-	0xc6,
-	0x98,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc3,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd1,
-	0x45,
-	0xc2,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x60,
-	0xa5,
-	0xe6,
-	0x45,
-	0xe8,
-	0x85,
-	0xea,
-	0x84,
-	0xeb,
-	0xa5,
-	0xe6,
-	0x45,
-	0xe9,
-	0x18,
-	0x65,
-	0xeb,
-	0x85,
-	0xeb,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xec,
-	0x64,
-	0xed,
-	0xa5,
-	0xe7,
-	0x45,
-	0xe8,
-	0x18,
-	0x65,
-	0xeb,
-	0x85,
-	0xeb,
-	0x98,
-	0x65,
-	0xec,
-	0x85,
-	0xec,
-	0x90,
-	0x02,
-	0xe6,
-	0xed,
-	0xa5,
-	0xe7,
-	0x45,
-	0xe9,
-	0x18,
-	0x65,
-	0xec,
-	0x85,
-	0xec,
-	0x98,
-	0x65,
-	0xed,
-	0x85,
-	0xed,
-	0xa5,
-	0xe9,
-	0x10,
-	0x0d,
-	0x38,
-	0xa5,
-	0xec,
-	0xe5,
-	0xe6,
-	0x85,
-	0xec,
-	0xa5,
-	0xed,
-	0xe5,
-	0xe7,
-	0x85,
-	0xed,
-	0x60,
-	0x18,
-	0xa5,
-	0xe8,
-	0x65,
-	0xea,
-	0x85,
-	0xea,
-	0xa2,
-	0x00,
-	0xa5,
-	0xe9,
-	0x10,
-	0x01,
-	0xca,
-	0x65,
-	0xeb,
-	0x85,
-	0xeb,
-	0x8a,
-	0x65,
-	0xec,
-	0x85,
-	0xec,
-	0x8a,
-	0x65,
-	0xed,
-	0x85,
-	0xed,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0xe5,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xb5,
-	0x0b,
-	0xa0,
-	0x02,
-	0x53,
-	0xe9,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xff,
-	0x0b,
-	0xa0,
-	0x04,
-	0x53,
-	0xea,
-	0x00,
-	0xee,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0xe3,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xb5,
-	0x0b,
-	0xa0,
-	0x02,
-	0x53,
-	0xe7,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xff,
-	0x0b,
-	0xa5,
-	0xed,
-	0x10,
-	0x22,
-	0xa2,
-	0x00,
-	0xa9,
-	0x01,
-	0x4a,
-	0xa9,
-	0x00,
-	0xf5,
-	0xea,
-	0x95,
-	0xea,
-	0x2a,
-	0xe8,
-	0xe0,
-	0x04,
-	0x90,
-	0xf3,
-	0xa2,
-	0x00,
-	0xa9,
-	0x01,
-	0x4a,
-	0xa9,
-	0x00,
-	0xf5,
-	0xee,
-	0x95,
-	0xee,
-	0x2a,
-	0xe8,
-	0xe0,
-	0x04,
-	0x90,
-	0xf3,
-	0xa5,
-	0xed,
-	0x05,
-	0xf1,
-	0x30,
-	0x12,
-	0x06,
-	0xea,
-	0x26,
-	0xeb,
-	0x26,
-	0xec,
-	0x26,
-	0xed,
-	0x06,
-	0xee,
-	0x26,
-	0xef,
-	0x26,
-	0xf0,
-	0x26,
-	0xf1,
-	0x80,
-	0xe8,
-	0x64,
-	0xe6,
-	0x64,
-	0xe7,
-	0x64,
-	0xe8,
-	0x64,
-	0xe9,
-	0xa2,
-	0x20,
-	0x06,
-	0xea,
-	0x26,
-	0xeb,
-	0x26,
-	0xec,
-	0x26,
-	0xed,
-	0x26,
-	0xe6,
-	0x26,
-	0xe7,
-	0x26,
-	0xe8,
-	0x26,
-	0xe9,
-	0x38,
-	0xa5,
-	0xe6,
-	0xe5,
-	0xef,
-	0x85,
-	0xc0,
-	0xa5,
-	0xe7,
-	0xe5,
-	0xf0,
-	0x85,
-	0xc1,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xf1,
-	0x85,
-	0xc2,
-	0xa5,
-	0xe9,
-	0xe9,
-	0x00,
-	0x85,
-	0xc3,
-	0x90,
-	0x0b,
-	0xe6,
-	0xea,
-	0x8a,
-	0xa0,
-	0x04,
-	0x53,
-	0xc0,
-	0x00,
-	0xe6,
-	0x00,
-	0xaa,
-	0xca,
-	0xd0,
-	0xc7,
-	0xa6,
-	0xea,
-	0xa4,
-	0xeb,
-	0xa5,
-	0xec,
-	0x05,
-	0xed,
-	0xf0,
-	0x03,
-	0xa2,
-	0xff,
-	0xdc,
-	0x86,
-	0xe6,
-	0x84,
-	0xe7,
-	0x60,
-	0xba,
-	0x08,
-	0x78,
-	0x68,
-	0x48,
-	0x29,
-	0x1c,
-	0x85,
-	0xfa,
-	0x86,
-	0xf8,
-	0xa9,
-	0x01,
-	0x85,
-	0xf9,
-	0xa0,
-	0x06,
-	0xb1,
-	0xf8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc5,
-	0xfa,
-	0x90,
-	0x08,
-	0x7a,
-	0xa0,
-	0x09,
-	0xb1,
-	0xf8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc9,
-	0x00,
-	0xd0,
-	0x38,
-	0xa0,
-	0x03,
-	0xb1,
-	0xf8,
-	0xe0,
-	0xdf,
-	0xb0,
-	0x18,
-	0x8d,
-	0x6b,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x6c,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x6d,
-	0x01,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x6e,
-	0x01,
-	0x80,
-	0x16,
-	0x8d,
-	0x6f,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x70,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x71,
-	0x01,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x72,
-	0x01,
-	0xa9,
-	0x00,
-	0xfa,
-	0x28,
-	0xf8,
-	0x60,
-	0x68,
-	0xf0,
-	0x04,
-	0x68,
-	0xfa,
-	0x7a,
-	0x40,
-	0x08,
-	0x78,
-	0x68,
-	0xad,
-	0x6a,
-	0x01,
-	0xf0,
-	0x0e,
-	0xae,
-	0x6e,
-	0x01,
-	0x9a,
-	0xad,
-	0x6b,
-	0x01,
-	0xae,
-	0x6c,
-	0x01,
-	0xac,
-	0x6d,
-	0x01,
-	0x40,
-	0xae,
-	0x72,
-	0x01,
-	0x9a,
-	0xad,
-	0x6f,
-	0x01,
-	0xae,
-	0x70,
-	0x01,
-	0xac,
-	0x71,
-	0x01,
-	0x40,
-	0x08,
-	0x78,
-	0xad,
-	0x6a,
-	0x01,
-	0xd0,
-	0x1f,
-	0x1a,
-	0x8d,
-	0x6a,
-	0x01,
-	0xa9,
-	0xdc,
-	0x8d,
-	0x6e,
-	0x01,
-	0x9c,
-	0x6b,
-	0x01,
-	0x9c,
-	0x6c,
-	0x01,
-	0x9c,
-	0x6d,
-	0x01,
-	0xa9,
-	0x03,
-	0x8d,
-	0xdf,
-	0x01,
-	0xa9,
-	0x6f,
-	0x8d,
-	0xde,
-	0x01,
-	0x9c,
-	0xdd,
-	0x01,
-	0x28,
-	0x60,
-	0xa9,
-	0x02,
-	0x60,
-	0x04,
-	0xdc,
-	0x02,
-	0xfd,
-	0x02,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x0d,
-	0x03,
-	0x07,
-	0x01,
-	0x5b,
-	0xe6,
-	0x80,
-	0x80,
-	0x80,
-	0xff,
-	0xff,
-	0x02,
-	0x01,
-	0x05,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x03,
-	0x70,
-	0x00,
-	0x10,
-	0x00,
-	0xc7,
-	0x02,
-	0x8e,
-	0x00,
-	0x1c,
-	0x00,
-	0xa4,
-	0x02,
-	0x9c,
-	0x00,
-	0x24,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-
-};
-
-uint8_t pdpclib_u[] =
-{
-	0x02,
-	0x00,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x00,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x04,
-	0x08,
-	0x0c,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x0a,
-	0x10,
-	0x17,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x0e,
-	0x17,
-	0x21,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x02,
-	0x04,
-	0x06,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x05,
-	0x08,
-	0x0b,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x07,
-	0x0c,
-	0x11,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x55,
-	0x01,
-	0x00,
-	0x00,
-	0xd5,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0xe0,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x01,
-	0x00,
-	0x00,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0xab,
-	0x00,
-	0x00,
-	0x00,
-	0xd5,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0xc0,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0x01,
-	0xff,
-	0x05,
-
-};
-
-uint8_t dppcode_u[] =
-{
-	0x78,
-	0xb8,
-	0x18,
-	0xf8,
-	0x9c,
-	0x00,
-	0x02,
-	0xa0,
-	0x36,
-	0x13,
-	0x00,
-	0x02,
-	0x01,
-	0x02,
-	0xa9,
-	0x07,
-	0x8d,
-	0x00,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x01,
-	0x02,
-	0xa9,
-	0xe8,
-	0x8d,
-	0x02,
-	0x02,
-	0xa9,
-	0xeb,
-	0x8d,
-	0x03,
-	0x02,
-	0xa2,
-	0xff,
-	0x8e,
-	0x32,
-	0x02,
-	0x8e,
-	0x1d,
-	0x6b,
-	0xa2,
-	0xff,
-	0x8e,
-	0x33,
-	0x02,
-	0x8e,
-	0x1e,
-	0x6b,
-	0xa0,
-	0x03,
-	0x53,
-	0x27,
-	0xbe,
-	0x04,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x07,
-	0x02,
-	0xcd,
-	0x29,
-	0xbe,
-	0xf0,
-	0x04,
-	0xa2,
-	0x02,
-	0x80,
-	0x10,
-	0xa2,
-	0x01,
-	0xad,
-	0x00,
-	0xc0,
-	0xc9,
-	0xe8,
-	0xd0,
-	0x07,
-	0xad,
-	0x01,
-	0xc0,
-	0xc9,
-	0xeb,
-	0xf0,
-	0x0e,
-	0x8e,
-	0x08,
-	0x02,
-	0xa9,
-	0x01,
-	0x9c,
-	0x14,
-	0xd0,
-	0x8d,
-	0x14,
-	0xd0,
-	0x5c,
-	0x80,
-	0xfd,
-	0x9c,
-	0x08,
-	0x02,
-	0xa0,
-	0x0e,
-	0x53,
-	0x80,
-	0x3f,
-	0x02,
-	0x00,
-	0x9c,
-	0x14,
-	0xd0,
-	0x9c,
-	0x18,
-	0xd0,
-	0x9c,
-	0x1c,
-	0xd0,
-	0x9c,
-	0x20,
-	0xd0,
-	0x9c,
-	0x24,
-	0xd0,
-	0x9c,
-	0x28,
-	0xd0,
-	0xa2,
-	0xff,
-	0x9a,
-	0x20,
-	0x90,
-	0x03,
-	0x58,
-	0xa9,
-	0x01,
-	0x8d,
-	0x14,
-	0xd0,
-	0x4c,
-	0xf8,
-	0x0d,
-	0x9c,
-	0xde,
-	0x5e,
-	0xa9,
-	0x01,
-	0x8d,
-	0xdf,
-	0x5e,
-	0x9c,
-	0x81,
-	0x82,
-	0x9c,
-	0x21,
-	0x5f,
-	0x9c,
-	0x22,
-	0x5f,
-	0x9c,
-	0x23,
-	0x5f,
-	0x9c,
-	0x24,
-	0x5f,
-	0x9c,
-	0x2b,
-	0x5f,
-	0x9c,
-	0x2c,
-	0x5f,
-	0xa0,
-	0x03,
-	0x13,
-	0x81,
-	0x82,
-	0x18,
-	0x5f,
-	0x13,
-	0x81,
-	0x82,
-	0x1b,
-	0x5f,
-	0x20,
-	0xc6,
-	0x03,
-	0x20,
-	0x83,
-	0x1a,
-	0x20,
-	0xc0,
-	0x1a,
-	0x9c,
-	0x75,
-	0x60,
-	0x60,
-	0x9c,
-	0x65,
-	0x5e,
-	0x9c,
-	0x64,
-	0x5e,
-	0x9c,
-	0x66,
-	0x5e,
-	0x9c,
-	0x67,
-	0x5e,
-	0x9c,
-	0x68,
-	0x5e,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0xad,
-	0x08,
-	0xd0,
-	0xc9,
-	0x01,
-	0xd0,
-	0x51,
-	0x08,
-	0x78,
-	0xad,
-	0x64,
-	0x5e,
-	0xc9,
-	0x02,
-	0xb0,
-	0x03,
-	0xee,
-	0x64,
-	0x5e,
-	0xee,
-	0x66,
-	0x5e,
-	0xd0,
-	0x08,
-	0xee,
-	0x67,
-	0x5e,
-	0xd0,
-	0x03,
-	0xee,
-	0x68,
-	0x5e,
-	0xa0,
-	0x37,
-	0xad,
-	0x65,
-	0x5e,
-	0x1a,
-	0x29,
-	0x01,
-	0x8d,
-	0x65,
-	0x5e,
-	0xf0,
-	0x0e,
-	0x53,
-	0x00,
-	0x02,
-	0xa0,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0x66,
-	0x5e,
-	0xda,
-	0x5e,
-	0x80,
-	0x0c,
-	0x53,
-	0x00,
-	0x02,
-	0x69,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0x66,
-	0x5e,
-	0xd7,
-	0x5e,
-	0xad,
-	0x75,
-	0x60,
-	0xd0,
-	0x03,
-	0x20,
-	0x36,
-	0x3f,
-	0x28,
-	0xa9,
-	0x01,
-	0x9c,
-	0x18,
-	0xd0,
-	0x8d,
-	0x18,
-	0xd0,
-	0x4c,
-	0x0b,
-	0x3f,
-	0x8a,
-	0xf0,
-	0x0c,
-	0xa9,
-	0x40,
-	0x8d,
-	0x30,
-	0xc0,
-	0xa9,
-	0x08,
-	0x8d,
-	0x31,
-	0xc0,
-	0x80,
-	0x06,
-	0x9c,
-	0x30,
-	0xc0,
-	0x9c,
-	0x31,
-	0xc0,
-	0xbd,
-	0x2d,
-	0x5f,
-	0x85,
-	0xa9,
-	0x8d,
-	0x78,
-	0xc0,
-	0xbd,
-	0x2f,
-	0x5f,
-	0x8d,
-	0x17,
-	0x6b,
-	0xbd,
-	0x31,
-	0x5f,
-	0x8d,
-	0x68,
-	0xc0,
-	0xbd,
-	0x33,
-	0x5f,
-	0x8d,
-	0x69,
-	0xc0,
-	0xbd,
-	0x35,
-	0x5f,
-	0x0a,
-	0xa8,
-	0xb9,
-	0x9c,
-	0x6a,
-	0x85,
-	0xc0,
-	0xb9,
-	0x9d,
-	0x6a,
-	0x85,
-	0xc1,
-	0xb9,
-	0xf4,
-	0x6a,
-	0x8d,
-	0x58,
-	0xc0,
-	0xb9,
-	0xf5,
-	0x6a,
-	0x8d,
-	0x59,
-	0xc0,
-	0xb9,
-	0x04,
-	0x6b,
-	0x8d,
-	0x60,
-	0xc0,
-	0xb9,
-	0x05,
-	0x6b,
-	0x8d,
-	0x61,
-	0xc0,
-	0xbd,
-	0x37,
-	0x5f,
-	0x0a,
-	0xa8,
-	0xb9,
-	0xa4,
-	0x6a,
-	0x85,
-	0xc2,
-	0xb9,
-	0xa5,
-	0x6a,
-	0x85,
-	0xc3,
-	0xb9,
-	0xfc,
-	0x6a,
-	0x8d,
-	0x5c,
-	0xc0,
-	0xb9,
-	0xfd,
-	0x6a,
-	0x8d,
-	0x5d,
-	0xc0,
-	0xb9,
-	0x0c,
-	0x6b,
-	0x8d,
-	0x64,
-	0xc0,
-	0xb9,
-	0x0d,
-	0x6b,
-	0x8d,
-	0x65,
-	0xc0,
-	0xbd,
-	0x39,
-	0x5f,
-	0x8d,
-	0x14,
-	0xc0,
-	0xbd,
-	0x3b,
-	0x5f,
-	0x8d,
-	0x18,
-	0xc0,
-	0xbd,
-	0x3d,
-	0x5f,
-	0x8d,
-	0x19,
-	0xc0,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0c,
-	0xc0,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0d,
-	0xc0,
-	0xda,
-	0xe0,
-	0x00,
-	0xd0,
-	0x12,
-	0xac,
-	0x6f,
-	0x60,
-	0x43,
-	0x97,
-	0x5f,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x27,
-	0x60,
-	0x79,
-	0x6a,
-	0x80,
-	0x10,
-	0xac,
-	0x70,
-	0x60,
-	0x43,
-	0xbf,
-	0x5f,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x3b,
-	0x60,
-	0x79,
-	0x6a,
-	0xfa,
-	0xbd,
-	0x6b,
-	0x5f,
-	0x8d,
-	0x28,
-	0xc0,
-	0xbd,
-	0x3f,
-	0x5f,
-	0x8d,
-	0x1c,
-	0xc0,
-	0xbd,
-	0x41,
-	0x5f,
-	0x8d,
-	0x1d,
-	0xc0,
-	0xa9,
-	0x50,
-	0x8d,
-	0x0c,
-	0xc0,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0d,
-	0xc0,
-	0xda,
-	0xe0,
-	0x00,
-	0xd0,
-	0x12,
-	0xac,
-	0x71,
-	0x60,
-	0x43,
-	0xe7,
-	0x5f,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x4f,
-	0x60,
-	0x8d,
-	0x6a,
-	0x80,
-	0x10,
-	0xac,
-	0x72,
-	0x60,
-	0x43,
-	0x07,
-	0x60,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x5f,
-	0x60,
-	0x8d,
-	0x6a,
-	0xfa,
-	0xbd,
-	0x6d,
-	0x5f,
-	0x8d,
-	0x2c,
-	0xc0,
-	0xbd,
-	0x47,
-	0x5f,
-	0x85,
-	0xb4,
-	0xbd,
-	0x49,
-	0x5f,
-	0x85,
-	0xb5,
-	0xbd,
-	0x4b,
-	0x5f,
-	0x85,
-	0xbe,
-	0xbd,
-	0x4d,
-	0x5f,
-	0x85,
-	0xbf,
-	0xbd,
-	0x4f,
-	0x5f,
-	0x85,
-	0xaa,
-	0xbd,
-	0x51,
-	0x5f,
-	0x85,
-	0xb9,
-	0xbd,
-	0x53,
-	0x5f,
-	0x85,
-	0xb6,
-	0xbd,
-	0x55,
-	0x5f,
-	0x85,
-	0xbd,
-	0xbd,
-	0x57,
-	0x5f,
-	0x85,
-	0xb7,
-	0xbd,
-	0x59,
-	0x5f,
-	0x85,
-	0xb8,
-	0xbd,
-	0x5b,
-	0x5f,
-	0x85,
-	0xac,
-	0xbd,
-	0x5d,
-	0x5f,
-	0x85,
-	0xad,
-	0xbd,
-	0x5f,
-	0x5f,
-	0x85,
-	0xb2,
-	0xbd,
-	0x61,
-	0x5f,
-	0x85,
-	0xb3,
-	0xbd,
-	0x63,
-	0x5f,
-	0x85,
-	0xae,
-	0xbd,
-	0x65,
-	0x5f,
-	0x85,
-	0xaf,
-	0xbd,
-	0x67,
-	0x5f,
-	0x85,
-	0xb0,
-	0xbd,
-	0x69,
-	0x5f,
-	0x85,
-	0xb1,
-	0xda,
-	0xbd,
-	0x29,
-	0x5f,
-	0x8d,
-	0x76,
-	0x60,
-	0xf0,
-	0x3c,
-	0xbd,
-	0x73,
-	0x60,
-	0x85,
-	0x12,
-	0xbd,
-	0x27,
-	0x5f,
-	0xa2,
-	0x00,
-	0xa8,
-	0xd0,
-	0x04,
-	0xa5,
-	0x25,
-	0xd0,
-	0x29,
-	0xc0,
-	0x00,
-	0xf0,
-	0x0a,
-	0x20,
-	0x5e,
-	0x3f,
-	0xa0,
-	0x06,
-	0x53,
-	0x4c,
-	0x5c,
-	0x79,
-	0x6b,
-	0xa0,
-	0x01,
-	0x84,
-	0x25,
-	0xa0,
-	0x02,
-	0x53,
-	0x32,
-	0x02,
-	0x1b,
-	0x6b,
-	0x20,
-	0x9f,
-	0x3b,
-	0x64,
-	0x24,
-	0xa5,
-	0xbd,
-	0x85,
-	0x23,
-	0xa5,
-	0x12,
-	0x8d,
-	0x19,
-	0x6b,
-	0xa2,
-	0x01,
-	0x86,
-	0xa8,
-	0xfa,
-	0x08,
-	0x78,
-	0x68,
-	0xa9,
-	0x02,
-	0x8d,
-	0x38,
-	0xc0,
-	0xa9,
-	0x01,
-	0x8d,
-	0x38,
-	0xc0,
-	0xa9,
-	0x09,
-	0x8d,
-	0x38,
-	0xc0,
-	0xbd,
-	0x43,
-	0x5f,
-	0xf0,
-	0x0a,
-	0xa9,
-	0x05,
-	0x8d,
-	0x38,
-	0xc0,
-	0xa9,
-	0x0d,
-	0x8d,
-	0x38,
-	0xc0,
-	0xbd,
-	0x45,
-	0x5f,
-	0x85,
-	0xab,
-	0x85,
-	0xba,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0xad,
-	0x0c,
-	0xd0,
-	0xc9,
-	0x01,
-	0xf0,
-	0x05,
-	0xa9,
-	0x05,
-	0x4c,
-	0x82,
-	0x06,
-	0x08,
-	0x78,
-	0xad,
-	0xde,
-	0x5e,
-	0xf0,
-	0x59,
-	0x8d,
-	0x63,
-	0x5e,
-	0xc9,
-	0x02,
-	0xf0,
-	0x0d,
-	0xa2,
-	0x00,
-	0xad,
-	0x21,
-	0x5f,
-	0x0d,
-	0x23,
-	0x5f,
-	0xd0,
-	0x1b,
-	0xe8,
-	0x80,
-	0x18,
-	0x38,
-	0xad,
-	0x1b,
-	0x5f,
-	0xed,
-	0x18,
-	0x5f,
-	0xad,
-	0x1c,
-	0x5f,
-	0xed,
-	0x19,
-	0x5f,
-	0xad,
-	0x1d,
-	0x5f,
-	0xed,
-	0x1a,
-	0x5f,
-	0xa2,
-	0x01,
-	0xb0,
-	0x01,
-	0xca,
-	0xad,
-	0x09,
-	0x02,
-	0xdd,
-	0x21,
-	0x5f,
-	0xd0,
-	0x0d,
-	0xad,
-	0x0a,
-	0x02,
-	0xdd,
-	0x23,
-	0x5f,
-	0xd0,
-	0x05,
-	0xbd,
-	0x25,
-	0x5f,
-	0x80,
-	0x1a,
-	0xce,
-	0x63,
-	0x5e,
-	0xf0,
-	0x0f,
-	0xca,
-	0xf0,
-	0xe3,
-	0xa2,
-	0x01,
-	0x80,
-	0xdf,
-	0xad,
-	0xe0,
-	0x5e,
-	0x9c,
-	0xe0,
-	0x5e,
-	0xd0,
-	0x06,
-	0xa9,
-	0x04,
-	0x80,
-	0x02,
-	0xa9,
-	0x03,
-	0x28,
-	0x8d,
-	0x08,
-	0x02,
-	0xc9,
-	0x00,
-	0xf0,
-	0x0a,
-	0xa0,
-	0x01,
-	0x9c,
-	0x28,
-	0xd0,
-	0x8c,
-	0x28,
-	0xd0,
-	0x80,
-	0x27,
-	0x20,
-	0x38,
-	0x04,
-	0xee,
-	0x32,
-	0x02,
-	0xd0,
-	0x03,
-	0xee,
-	0x33,
-	0x02,
-	0x9c,
-	0x81,
-	0x82,
-	0xa9,
-	0x01,
-	0x8d,
-	0x75,
-	0x60,
-	0x8d,
-	0xdf,
-	0x5e,
-	0x9c,
-	0x2b,
-	0x5f,
-	0x9c,
-	0x2c,
-	0x5f,
-	0x9c,
-	0xde,
-	0x5e,
-	0xa0,
-	0x01,
-	0x9c,
-	0x20,
-	0xd0,
-	0x8c,
-	0x20,
-	0xd0,
-	0x4c,
-	0x0b,
-	0x3f,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0x08,
-	0x78,
-	0x68,
-	0xa5,
-	0x25,
-	0xc9,
-	0x03,
-	0xf0,
-	0x05,
-	0x64,
-	0x25,
-	0x20,
-	0x5e,
-	0x3f,
-	0xa9,
-	0x01,
-	0x9c,
-	0x24,
-	0xd0,
-	0x8d,
-	0x24,
-	0xd0,
-	0x9c,
-	0x75,
-	0x60,
-	0x20,
-	0x36,
-	0x3f,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0xc0,
-	0x4c,
-	0x12,
-	0x3f,
-	0xa9,
-	0x01,
-	0xcc,
-	0x2b,
-	0xbe,
-	0x90,
-	0x08,
-	0xd0,
-	0x05,
-	0xec,
-	0x2a,
-	0xbe,
-	0x90,
-	0x01,
-	0x1a,
-	0x3a,
-	0x60,
-	0xa9,
-	0x01,
-	0xcc,
-	0x2d,
-	0xbe,
-	0x90,
-	0x08,
-	0xd0,
-	0x05,
-	0xec,
-	0x2c,
-	0xbe,
-	0x90,
-	0x01,
-	0x1a,
-	0x3a,
-	0x60,
-	0xa5,
-	0x22,
-	0xf0,
-	0x38,
-	0xa9,
-	0x4a,
-	0x85,
-	0x16,
-	0xa9,
-	0x70,
-	0x85,
-	0x17,
-	0xa9,
-	0x1b,
-	0x85,
-	0x18,
-	0xa9,
-	0x6c,
-	0x85,
-	0x19,
-	0xa0,
-	0x00,
-	0xa9,
-	0x04,
-	0xf3,
-	0x16,
-	0x18,
-	0xe6,
-	0x17,
-	0xe6,
-	0x19,
-	0x3a,
-	0xd0,
-	0xf6,
-	0xa0,
-	0x2f,
-	0xf3,
-	0x16,
-	0x18,
-	0xa0,
-	0x06,
-	0x53,
-	0x7f,
-	0x6b,
-	0x79,
-	0x6b,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x02,
-	0x1d,
-	0x6b,
-	0x53,
-	0x1b,
-	0x6b,
-	0x34,
-	0x02,
-	0x64,
-	0x22,
-	0xf8,
-	0x08,
-	0x78,
-	0xad,
-	0x64,
-	0x5e,
-	0xd0,
-	0x03,
-	0x4c,
-	0x7f,
-	0x08,
-	0xa0,
-	0x03,
-	0x53,
-	0x66,
-	0x5e,
-	0x1e,
-	0x5f,
-	0xad,
-	0x65,
-	0x5e,
-	0x8d,
-	0xdd,
-	0x5e,
-	0xaa,
-	0xd0,
-	0x39,
-	0xbd,
-	0x2b,
-	0x5f,
-	0xf0,
-	0x1e,
-	0xad,
-	0xd7,
-	0x5e,
-	0xcd,
-	0x18,
-	0x5f,
-	0xd0,
-	0x16,
-	0xad,
-	0xd8,
-	0x5e,
-	0xcd,
-	0x19,
-	0x5f,
-	0xd0,
-	0x0e,
-	0xad,
-	0xd9,
-	0x5e,
-	0xcd,
-	0x1a,
-	0x5f,
-	0xd0,
-	0x06,
-	0xac,
-	0xdd,
-	0x5e,
-	0x4c,
-	0x6d,
-	0x08,
-	0x9c,
-	0x30,
-	0xc0,
-	0x9c,
-	0x31,
-	0xc0,
-	0xa0,
-	0x37,
-	0x53,
-	0x69,
-	0x5e,
-	0xe1,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0xd7,
-	0x5e,
-	0x18,
-	0x5f,
-	0x80,
-	0x3b,
-	0xbd,
-	0x2b,
-	0x5f,
-	0xf0,
-	0x1e,
-	0xad,
-	0xda,
-	0x5e,
-	0xcd,
-	0x1b,
-	0x5f,
-	0xd0,
-	0x16,
-	0xad,
-	0xdb,
-	0x5e,
-	0xcd,
-	0x1c,
-	0x5f,
-	0xd0,
-	0x0e,
-	0xad,
-	0xdc,
-	0x5e,
-	0xcd,
-	0x1d,
-	0x5f,
-	0xd0,
-	0x06,
-	0xac,
-	0xdd,
-	0x5e,
-	0x4c,
-	0x6d,
-	0x08,
-	0xa9,
-	0x40,
-	0x8d,
-	0x30,
-	0xc0,
-	0xa9,
-	0x08,
-	0x8d,
-	0x31,
-	0xc0,
-	0xa0,
-	0x37,
-	0x53,
-	0xa0,
-	0x5e,
-	0xe1,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0xda,
-	0x5e,
-	0x1b,
-	0x5f,
-	0xae,
-	0xdd,
-	0x5e,
-	0xa9,
-	0x00,
-	0x9d,
-	0x21,
-	0x5f,
-	0x9d,
-	0x23,
-	0x5f,
-	0x9d,
-	0x3d,
-	0x5f,
-	0x9d,
-	0x3b,
-	0x5f,
-	0xad,
-	0xde,
-	0x5e,
-	0xc9,
-	0x02,
-	0xd0,
-	0x04,
-	0x3a,
-	0x8d,
-	0xde,
-	0x5e,
-	0x28,
-	0xad,
-	0xdf,
-	0x5e,
-	0xf0,
-	0x2b,
-	0x9c,
-	0xdf,
-	0x5e,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0xc0,
-	0xa9,
-	0x01,
-	0x8d,
-	0x10,
-	0xc0,
-	0x9c,
-	0x3c,
-	0xc0,
-	0xad,
-	0x37,
-	0xbe,
-	0xae,
-	0x38,
-	0xbe,
-	0x8d,
-	0x70,
-	0xc0,
-	0x8e,
-	0x6c,
-	0xc0,
-	0x9c,
-	0x29,
-	0xc0,
-	0x9c,
-	0x2d,
-	0xc0,
-	0x9c,
-	0x74,
-	0xc0,
-	0x9c,
-	0x20,
-	0xc0,
-	0x9c,
-	0x24,
-	0xc0,
-	0xad,
-	0xdd,
-	0x5e,
-	0x20,
-	0x9e,
-	0x08,
-	0x08,
-	0x78,
-	0xac,
-	0xdd,
-	0x5e,
-	0x99,
-	0x25,
-	0x5f,
-	0x8d,
-	0xe0,
-	0x5e,
-	0xb9,
-	0x3d,
-	0x5f,
-	0xaa,
-	0xb9,
-	0x3b,
-	0x5f,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0x0a,
-	0x99,
-	0x21,
-	0x5f,
-	0x8a,
-	0x2a,
-	0x99,
-	0x23,
-	0x5f,
-	0xa9,
-	0x01,
-	0x9c,
-	0x1c,
-	0xd0,
-	0x8d,
-	0x1c,
-	0xd0,
-	0xee,
-	0xde,
-	0x5e,
-	0xad,
-	0x66,
-	0x5e,
-	0xcd,
-	0x1e,
-	0x5f,
-	0xd0,
-	0x10,
-	0xad,
-	0x67,
-	0x5e,
-	0xcd,
-	0x1f,
-	0x5f,
-	0xd0,
-	0x08,
-	0xad,
-	0x68,
-	0x5e,
-	0xcd,
-	0x20,
-	0x5f,
-	0xf0,
-	0x03,
-	0x4c,
-	0x51,
-	0x07,
-	0xad,
-	0x64,
-	0x5e,
-	0x3a,
-	0xf0,
-	0x0c,
-	0xcc,
-	0x65,
-	0x5e,
-	0xd0,
-	0x07,
-	0x98,
-	0x1a,
-	0x29,
-	0x01,
-	0x4c,
-	0x5b,
-	0x07,
-	0x9c,
-	0x81,
-	0x82,
-	0xad,
-	0x17,
-	0x5f,
-	0xf0,
-	0x14,
-	0xac,
-	0xdd,
-	0x5e,
-	0xb9,
-	0x23,
-	0x5f,
-	0x8d,
-	0x0a,
-	0x02,
-	0xb9,
-	0x21,
-	0x5f,
-	0x8d,
-	0x09,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x0c,
-	0xd0,
-	0x4c,
-	0x28,
-	0x3f,
-	0xaa,
-	0x85,
-	0x1f,
-	0xad,
-	0xed,
-	0x5e,
-	0xa8,
-	0x29,
-	0x01,
-	0x85,
-	0xb6,
-	0x9d,
-	0x53,
-	0x5f,
-	0x98,
-	0x4a,
-	0x29,
-	0x01,
-	0x85,
-	0xbd,
-	0x9d,
-	0x55,
-	0x5f,
-	0x98,
-	0x29,
-	0x03,
-	0xd8,
-	0x4d,
-	0x2e,
-	0xbe,
-	0xf8,
-	0x9d,
-	0x39,
-	0x5f,
-	0xad,
-	0xf9,
-	0x5e,
-	0xf0,
-	0x03,
-	0xa9,
-	0x04,
-	0x60,
-	0xad,
-	0xf8,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xf5,
-	0x98,
-	0x29,
-	0x01,
-	0xf0,
-	0xf0,
-	0xad,
-	0xf7,
-	0x5e,
-	0xd0,
-	0xeb,
-	0xad,
-	0xf6,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xe3,
-	0x98,
-	0x29,
-	0x01,
-	0xf0,
-	0xde,
-	0x18,
-	0xad,
-	0xf8,
-	0x5e,
-	0x6d,
-	0xf6,
-	0x5e,
-	0x4a,
-	0xc9,
-	0x05,
-	0xb0,
-	0xd2,
-	0xa8,
-	0xb9,
-	0xa3,
-	0x59,
-	0xf0,
-	0xcc,
-	0x98,
-	0x85,
-	0x10,
-	0x9d,
-	0x35,
-	0x5f,
-	0xac,
-	0xef,
-	0x5e,
-	0xae,
-	0xee,
-	0x5e,
-	0x20,
-	0xe8,
-	0x06,
-	0xd0,
-	0xbb,
-	0x98,
-	0x4a,
-	0x85,
-	0x17,
-	0x8a,
-	0x6a,
-	0x85,
-	0x16,
-	0xb0,
-	0xb1,
-	0xac,
-	0xf3,
-	0x5e,
-	0xae,
-	0xf2,
-	0x5e,
-	0x20,
-	0xe8,
-	0x06,
-	0xd0,
-	0xa6,
-	0x98,
-	0x4a,
-	0x85,
-	0x19,
-	0x8a,
-	0x6a,
-	0x85,
-	0x18,
-	0x90,
-	0x9c,
-	0xe5,
-	0x16,
-	0xaa,
-	0xa5,
-	0x19,
-	0xe5,
-	0x17,
-	0x30,
-	0x93,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1a,
-	0x86,
-	0x1b,
-	0xa4,
-	0x1f,
-	0x99,
-	0x3b,
-	0x5f,
-	0x8a,
-	0x99,
-	0x3d,
-	0x5f,
-	0xa0,
-	0x00,
-	0xb9,
-	0xae,
-	0x6a,
-	0x38,
-	0xe5,
-	0x16,
-	0xb9,
-	0xc2,
-	0x6a,
-	0xe5,
-	0x17,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xb4,
-	0xb9,
-	0xae,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0xb9,
-	0xc2,
-	0x6a,
-	0xe5,
-	0x19,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xb5,
-	0xa9,
-	0xff,
-	0x85,
-	0x1e,
-	0x64,
-	0x20,
-	0xa5,
-	0xb6,
-	0xd0,
-	0x3b,
-	0xa4,
-	0xb4,
-	0xc4,
-	0xb5,
-	0xf0,
-	0x79,
-	0x5a,
-	0x38,
-	0xb9,
-	0xae,
-	0x6a,
-	0xe5,
-	0x16,
-	0xaa,
-	0xb9,
-	0xc2,
-	0x6a,
-	0xe5,
-	0x17,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x79,
-	0x6a,
-	0x86,
-	0x1e,
-	0xc8,
-	0x80,
-	0xc7,
-	0xa5,
-	0x18,
-	0xd0,
-	0x02,
-	0xc6,
-	0x19,
-	0x3a,
-	0x85,
-	0x18,
-	0xa4,
-	0xb5,
-	0xc4,
-	0xb4,
-	0xf0,
-	0x35,
-	0x5a,
-	0x38,
-	0xa5,
-	0x18,
-	0xf9,
-	0xad,
-	0x6a,
-	0xaa,
-	0xa5,
-	0x19,
-	0xf9,
-	0xc1,
-	0x6a,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x79,
-	0x6a,
-	0x86,
-	0x1e,
-	0x88,
-	0x80,
-	0xc7,
-	0xa5,
-	0x1a,
-	0xa6,
-	0x1b,
-	0xc5,
-	0x1c,
-	0xd0,
-	0x12,
-	0xe4,
-	0x1d,
-	0xd0,
-	0x0e,
-	0xa5,
-	0x20,
-	0xa6,
-	0xb6,
-	0xd0,
-	0x04,
-	0xc6,
-	0xb5,
-	0x80,
-	0x22,
-	0xe6,
-	0xb4,
-	0x80,
-	0x1e,
-	0x0a,
-	0x08,
-	0x1a,
-	0x5a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x7a,
-	0x6a,
-	0x38,
-	0xe5,
-	0x1e,
-	0x99,
-	0x79,
-	0x6a,
-	0x28,
-	0x8a,
-	0x2a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x98,
-	0xa4,
-	0x1f,
-	0x99,
-	0x6f,
-	0x60,
-	0xa5,
-	0xb6,
-	0xd0,
-	0x0d,
-	0xa5,
-	0x16,
-	0xa4,
-	0xb4,
-	0xf0,
-	0x10,
-	0x38,
-	0xf9,
-	0xad,
-	0x6a,
-	0x3a,
-	0x80,
-	0x09,
-	0xa4,
-	0xb5,
-	0xb9,
-	0xae,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0x3a,
-	0xaa,
-	0xa9,
-	0x00,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0xa4,
-	0x1f,
-	0x99,
-	0x6b,
-	0x5f,
-	0x98,
-	0xd0,
-	0x12,
-	0xac,
-	0x6f,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0x97,
-	0x5f,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x79,
-	0x6a,
-	0x27,
-	0x60,
-	0x80,
-	0x10,
-	0xac,
-	0x70,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0xbf,
-	0x5f,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x79,
-	0x6a,
-	0x3b,
-	0x60,
-	0xa6,
-	0x1f,
-	0xad,
-	0x12,
-	0x5f,
-	0x9d,
-	0x73,
-	0x60,
-	0xad,
-	0xec,
-	0x5e,
-	0xa8,
-	0x29,
-	0x04,
-	0xf0,
-	0x03,
-	0xa9,
-	0x06,
-	0x60,
-	0x98,
-	0x29,
-	0x80,
-	0x9d,
-	0x27,
-	0x5f,
-	0x98,
-	0x29,
-	0x03,
-	0x9d,
-	0x29,
-	0x5f,
-	0xd0,
-	0x03,
-	0x9d,
-	0x27,
-	0x5f,
-	0xa0,
-	0x00,
-	0x29,
-	0x02,
-	0xf0,
-	0x01,
-	0xc8,
-	0x98,
-	0x9d,
-	0x2d,
-	0x5f,
-	0xad,
-	0x0f,
-	0x5f,
-	0xc9,
-	0x81,
-	0x90,
-	0x03,
-	0xa9,
-	0x1b,
-	0x60,
-	0x9d,
-	0x2f,
-	0x5f,
-	0xa9,
-	0xdf,
-	0x9d,
-	0x31,
-	0x5f,
-	0xa9,
-	0x03,
-	0x9d,
-	0x33,
-	0x5f,
-	0xad,
-	0xfd,
-	0x5e,
-	0xf0,
-	0x03,
-	0xa9,
-	0x12,
-	0x60,
-	0xad,
-	0xfc,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xf5,
-	0x98,
-	0x29,
-	0x01,
-	0xd0,
-	0x03,
-	0xa9,
-	0x14,
-	0x60,
-	0xad,
-	0xfb,
-	0x5e,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1a,
-	0x60,
-	0xad,
-	0xfa,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xf5,
-	0x98,
-	0x29,
-	0x01,
-	0xd0,
-	0x03,
-	0xa9,
-	0x18,
-	0x60,
-	0x18,
-	0xad,
-	0xfc,
-	0x5e,
-	0x6d,
-	0xfa,
-	0x5e,
-	0x4a,
-	0xc9,
-	0x05,
-	0x90,
-	0x03,
-	0xa9,
-	0x16,
-	0x60,
-	0xa8,
-	0xb9,
-	0xa3,
-	0x59,
-	0xf0,
-	0xf7,
-	0x98,
-	0x85,
-	0x11,
-	0x9d,
-	0x37,
-	0x5f,
-	0xac,
-	0xf1,
-	0x5e,
-	0xae,
-	0xf0,
-	0x5e,
-	0x20,
-	0xf9,
-	0x06,
-	0xf0,
-	0x03,
-	0xa9,
-	0x08,
-	0x60,
-	0x98,
-	0x4a,
-	0x85,
-	0x17,
-	0x8a,
-	0x6a,
-	0x85,
-	0x16,
-	0x90,
-	0x03,
-	0xa9,
-	0x0c,
-	0x60,
-	0xac,
-	0xf5,
-	0x5e,
-	0xae,
-	0xf4,
-	0x5e,
-	0x20,
-	0xe8,
-	0x06,
-	0xf0,
-	0x03,
-	0xa9,
-	0x0a,
-	0x60,
-	0x98,
-	0x4a,
-	0x85,
-	0x19,
-	0x8a,
-	0x6a,
-	0x85,
-	0x18,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0e,
-	0x60,
-	0xe5,
-	0x16,
-	0x85,
-	0x1a,
-	0xa5,
-	0x19,
-	0xe5,
-	0x17,
-	0x85,
-	0x1b,
-	0x10,
-	0x03,
-	0xa9,
-	0x10,
-	0x60,
-	0xa0,
-	0x00,
-	0xb9,
-	0xd6,
-	0x6a,
-	0x38,
-	0xe5,
-	0x16,
-	0xb9,
-	0xe6,
-	0x6a,
-	0xe5,
-	0x17,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xbe,
-	0xb9,
-	0xd6,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0xb9,
-	0xe6,
-	0x6a,
-	0xe5,
-	0x19,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xbf,
-	0xa6,
-	0x1a,
-	0xa5,
-	0x1b,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1a,
-	0x86,
-	0x1b,
-	0xa4,
-	0x1f,
-	0x99,
-	0x3f,
-	0x5f,
-	0x8a,
-	0x99,
-	0x41,
-	0x5f,
-	0xa9,
-	0xff,
-	0x85,
-	0x1e,
-	0x64,
-	0x20,
-	0xa5,
-	0xbd,
-	0xd0,
-	0x3b,
-	0xa4,
-	0xbe,
-	0xc4,
-	0xbf,
-	0xf0,
-	0x79,
-	0x5a,
-	0x38,
-	0xb9,
-	0xd6,
-	0x6a,
-	0xe5,
-	0x16,
-	0xaa,
-	0xb9,
-	0xe6,
-	0x6a,
-	0xe5,
-	0x17,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x8d,
-	0x6a,
-	0x86,
-	0x1e,
-	0xc8,
-	0x80,
-	0xc7,
-	0xa5,
-	0x18,
-	0xd0,
-	0x02,
-	0xc6,
-	0x19,
-	0x3a,
-	0x85,
-	0x18,
-	0xa4,
-	0xbf,
-	0xc4,
-	0xbe,
-	0xf0,
-	0x35,
-	0x5a,
-	0x38,
-	0xa5,
-	0x18,
-	0xf9,
-	0xd5,
-	0x6a,
-	0xaa,
-	0xa5,
-	0x19,
-	0xf9,
-	0xe5,
-	0x6a,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x8d,
-	0x6a,
-	0x86,
-	0x1e,
-	0x88,
-	0x80,
-	0xc7,
-	0xa5,
-	0x1a,
-	0xa6,
-	0x1b,
-	0xc5,
-	0x1c,
-	0xd0,
-	0x1a,
-	0xe4,
-	0x1d,
-	0xd0,
-	0x16,
-	0xa5,
-	0xbe,
-	0xc5,
-	0xbf,
-	0xf0,
-	0x0e,
-	0xa5,
-	0x20,
-	0xa6,
-	0xbd,
-	0xd0,
-	0x04,
-	0xc6,
-	0xbf,
-	0x80,
-	0x25,
-	0xe6,
-	0xbe,
-	0x80,
-	0x21,
-	0xa5,
-	0x1a,
-	0x0a,
-	0x08,
-	0x1a,
-	0x5a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x7a,
-	0x6a,
-	0x38,
-	0xe5,
-	0x1e,
-	0x99,
-	0x8d,
-	0x6a,
-	0x28,
-	0xa5,
-	0x1b,
-	0x2a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x98,
-	0xa4,
-	0x1f,
-	0x99,
-	0x71,
-	0x60,
-	0xa5,
-	0xbd,
-	0xd0,
-	0x0d,
-	0xa5,
-	0x16,
-	0xa4,
-	0xbe,
-	0xf0,
-	0x10,
-	0x38,
-	0xf9,
-	0xd5,
-	0x6a,
-	0x3a,
-	0x80,
-	0x09,
-	0xa4,
-	0xbf,
-	0xb9,
-	0xd6,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0x3a,
-	0xaa,
-	0xa9,
-	0x00,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0xa4,
-	0x1f,
-	0x99,
-	0x6d,
-	0x5f,
-	0x98,
-	0xd0,
-	0x12,
-	0xac,
-	0x71,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0xe7,
-	0x5f,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x8d,
-	0x6a,
-	0x4f,
-	0x60,
-	0x80,
-	0x10,
-	0xac,
-	0x72,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0x07,
-	0x60,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x8d,
-	0x6a,
-	0x5f,
-	0x60,
-	0x38,
-	0xa5,
-	0xbf,
-	0xe5,
-	0xbe,
-	0x85,
-	0x1e,
-	0x1a,
-	0x85,
-	0xab,
-	0xa5,
-	0xbe,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x02,
-	0xa5,
-	0xbf,
-	0x85,
-	0xb9,
-	0x85,
-	0xaa,
-	0xa5,
-	0xbe,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x02,
-	0xa5,
-	0xbf,
-	0x49,
-	0x3c,
-	0x18,
-	0x69,
-	0x77,
-	0x85,
-	0xb7,
-	0x98,
-	0x69,
-	0x60,
-	0x85,
-	0xb8,
-	0xa5,
-	0xb4,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x02,
-	0xa5,
-	0xb5,
-	0x49,
-	0x03,
-	0x18,
-	0x65,
-	0xb7,
-	0x85,
-	0xb7,
-	0x98,
-	0x65,
-	0xb8,
-	0x85,
-	0xb8,
-	0xa0,
-	0x02,
-	0x53,
-	0xb7,
-	0x00,
-	0xac,
-	0x00,
-	0x53,
-	0xb7,
-	0x00,
-	0xb2,
-	0x00,
-	0x53,
-	0xb7,
-	0x00,
-	0xae,
-	0x00,
-	0xa5,
-	0x1e,
-	0xd0,
-	0x07,
-	0x53,
-	0xb7,
-	0x00,
-	0xb0,
-	0x00,
-	0x80,
-	0x20,
-	0xa5,
-	0xbd,
-	0xd0,
-	0x0f,
-	0x18,
-	0xa5,
-	0xb7,
-	0x69,
-	0x3c,
-	0x85,
-	0xb0,
-	0xa5,
-	0xb8,
-	0x69,
-	0x00,
-	0x85,
-	0xb1,
-	0x80,
-	0x0d,
-	0x38,
-	0xa5,
-	0xb7,
-	0xe9,
-	0x3c,
-	0x85,
-	0xb0,
-	0xa5,
-	0xb8,
-	0xe9,
-	0x00,
-	0x85,
-	0xb1,
-	0xa6,
-	0x1f,
-	0xbd,
-	0x29,
-	0x5f,
-	0x8d,
-	0x76,
-	0x60,
-	0xa9,
-	0x00,
-	0xaa,
-	0x20,
-	0xc5,
-	0x39,
-	0xa5,
-	0xab,
-	0xf0,
-	0x06,
-	0xa9,
-	0x01,
-	0xaa,
-	0x20,
-	0xc5,
-	0x39,
-	0x8a,
-	0xa6,
-	0x1f,
-	0x9d,
-	0x43,
-	0x5f,
-	0xa9,
-	0x01,
-	0x9d,
-	0x2b,
-	0x5f,
-	0xa5,
-	0xab,
-	0x9d,
-	0x45,
-	0x5f,
-	0xa5,
-	0xb7,
-	0x9d,
-	0x57,
-	0x5f,
-	0xa5,
-	0xb8,
-	0x9d,
-	0x59,
-	0x5f,
-	0xa5,
-	0xac,
-	0x9d,
-	0x5b,
-	0x5f,
-	0xa5,
-	0xad,
-	0x9d,
-	0x5d,
-	0x5f,
-	0xa5,
-	0xb2,
-	0x9d,
-	0x5f,
-	0x5f,
-	0xa5,
-	0xb3,
-	0x9d,
-	0x61,
-	0x5f,
-	0xa5,
-	0xae,
-	0x9d,
-	0x63,
-	0x5f,
-	0xa5,
-	0xaf,
-	0x9d,
-	0x65,
-	0x5f,
-	0xa5,
-	0xb0,
-	0x9d,
-	0x67,
-	0x5f,
-	0xa5,
-	0xb1,
-	0x9d,
-	0x69,
-	0x5f,
-	0xa5,
-	0xb4,
-	0x9d,
-	0x47,
-	0x5f,
-	0xa5,
-	0xb5,
-	0x9d,
-	0x49,
-	0x5f,
-	0xa5,
-	0xbe,
-	0x9d,
-	0x4b,
-	0x5f,
-	0xa5,
-	0xbf,
-	0x9d,
-	0x4d,
-	0x5f,
-	0xa5,
-	0xaa,
-	0x9d,
-	0x4f,
-	0x5f,
-	0xa5,
-	0xb9,
-	0x9d,
-	0x51,
-	0x5f,
-	0xa9,
-	0x00,
-	0x60,
-	0xc0,
-	0x01,
-	0xd0,
-	0x04,
-	0xa8,
-	0x8a,
-	0xfc,
-	0x60,
-	0x85,
-	0x12,
-	0x98,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0e,
-	0x29,
-	0x01,
-	0xd0,
-	0x0e,
-	0x46,
-	0x12,
-	0x8a,
-	0x6a,
-	0xaa,
-	0x98,
-	0x4a,
-	0xa8,
-	0x80,
-	0xee,
-	0x8a,
-	0xa6,
-	0x12,
-	0x60,
-	0x8a,
-	0x1a,
-	0xd0,
-	0x02,
-	0xe6,
-	0x12,
-	0x49,
-	0x55,
-	0x84,
-	0x14,
-	0x18,
-	0x65,
-	0x14,
-	0x85,
-	0x13,
-	0x90,
-	0x03,
-	0xe6,
-	0x14,
-	0x18,
-	0xa5,
-	0x12,
-	0x49,
-	0x55,
-	0x84,
-	0x15,
-	0xaa,
-	0x65,
-	0x13,
-	0x8a,
-	0x65,
-	0x14,
-	0x85,
-	0x14,
-	0xa5,
-	0x15,
-	0x90,
-	0x03,
-	0xe6,
-	0x15,
-	0x18,
-	0x65,
-	0x14,
-	0xa6,
-	0x15,
-	0x90,
-	0x01,
-	0xe8,
-	0x60,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0xc0,
-	0x4c,
-	0x00,
-	0x03,
-	0x08,
-	0x68,
-	0x8d,
-	0x16,
-	0x6b,
-	0x64,
-	0x25,
-	0x80,
-	0x06,
-	0xa5,
-	0x25,
-	0xc9,
-	0x01,
-	0xf0,
-	0x03,
-	0x5c,
-	0x80,
-	0xf7,
-	0x20,
-	0xa5,
-	0x0e,
-	0xa5,
-	0x24,
-	0xd0,
-	0x03,
-	0x5c,
-	0x80,
-	0xf9,
-	0xc6,
-	0x24,
-	0xa5,
-	0x60,
-	0x85,
-	0x67,
-	0x20,
-	0x22,
-	0x1d,
-	0xa5,
-	0x60,
-	0xa6,
-	0x23,
-	0xf0,
-	0x07,
-	0xc5,
-	0x27,
-	0xf0,
-	0x0d,
-	0x1a,
-	0x80,
-	0x05,
-	0xc5,
-	0x26,
-	0xf0,
-	0x06,
-	0x3a,
-	0x85,
-	0x67,
-	0x20,
-	0x53,
-	0x1f,
-	0xa5,
-	0x27,
-	0xa6,
-	0x23,
-	0xf0,
-	0x02,
-	0xa5,
-	0x26,
-	0xc5,
-	0x60,
-	0xf0,
-	0x0b,
-	0x8a,
-	0xf0,
-	0x04,
-	0xc6,
-	0x60,
-	0x80,
-	0xc6,
-	0xe6,
-	0x60,
-	0x80,
-	0xc2,
-	0x85,
-	0x67,
-	0x20,
-	0x53,
-	0x1f,
-	0x20,
-	0xd3,
-	0x29,
-	0x80,
-	0xac,
-	0x18,
-	0x69,
-	0x14,
-	0x90,
-	0x01,
-	0xc8,
-	0xda,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0x49,
-	0x66,
-	0x84,
-	0x34,
-	0xa5,
-	0x33,
-	0x49,
-	0x66,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x35,
-	0xa5,
-	0x32,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0x34,
-	0xaa,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xa5,
-	0x33,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0x35,
-	0xe0,
-	0xfa,
-	0x90,
-	0x01,
-	0x1a,
-	0xfa,
-	0x60,
-	0x18,
-	0x69,
-	0x10,
-	0x90,
-	0x01,
-	0xc8,
-	0x84,
-	0x32,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x60,
-	0xa0,
-	0x12,
-	0x64,
-	0x6e,
-	0x64,
-	0x6f,
-	0x64,
-	0x70,
-	0x64,
-	0x71,
-	0x13,
-	0x6e,
-	0x00,
-	0xc3,
-	0x80,
-	0x64,
-	0x72,
-	0x64,
-	0x73,
-	0xa0,
-	0x48,
-	0x13,
-	0x6e,
-	0x00,
-	0xd5,
-	0x80,
-	0x13,
-	0x6e,
-	0x00,
-	0x1d,
-	0x81,
-	0x13,
-	0x6e,
-	0x00,
-	0x65,
-	0x81,
-	0xad,
-	0x19,
-	0x6b,
-	0xae,
-	0x18,
-	0x6b,
-	0xd0,
-	0x05,
-	0xcd,
-	0x1a,
-	0x6b,
-	0xf0,
-	0x0f,
-	0x20,
-	0xa7,
-	0x0f,
-	0x20,
-	0x92,
-	0x10,
-	0xad,
-	0x19,
-	0x6b,
-	0x8d,
-	0x1a,
-	0x6b,
-	0x9c,
-	0x18,
-	0x6b,
-	0xa6,
-	0x26,
-	0x9e,
-	0x79,
-	0x74,
-	0x9e,
-	0x8b,
-	0x74,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe4,
-	0x27,
-	0xf0,
-	0x19,
-	0x9d,
-	0x7a,
-	0x74,
-	0x48,
-	0x98,
-	0x9d,
-	0x8c,
-	0x74,
-	0x68,
-	0xc9,
-	0x28,
-	0xf0,
-	0x06,
-	0x18,
-	0x69,
-	0x14,
-	0xc8,
-	0x80,
-	0x03,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe8,
-	0x80,
-	0xe3,
-	0x9d,
-	0x7a,
-	0x74,
-	0x9d,
-	0x7b,
-	0x74,
-	0x98,
-	0x9d,
-	0x8c,
-	0x74,
-	0x9d,
-	0x8d,
-	0x74,
-	0x38,
-	0xa5,
-	0x29,
-	0xe5,
-	0x28,
-	0xaa,
-	0x1a,
-	0x85,
-	0x2e,
-	0xbd,
-	0xa8,
-	0x59,
-	0x85,
-	0x2c,
-	0xa2,
-	0x00,
-	0x8a,
-	0x0a,
-	0x1a,
-	0x45,
-	0x2e,
-	0x20,
-	0x5b,
-	0x0e,
-	0x9d,
-	0x1b,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x14,
-	0x90,
-	0xf0,
-	0xa2,
-	0x00,
-	0xbd,
-	0x1b,
-	0x7d,
-	0xdd,
-	0x1c,
-	0x7d,
-	0xd0,
-	0x05,
-	0x09,
-	0x80,
-	0x9d,
-	0x1b,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x13,
-	0x90,
-	0xee,
-	0x38,
-	0xa5,
-	0x27,
-	0xe5,
-	0x26,
-	0xaa,
-	0x1a,
-	0x85,
-	0x2e,
-	0xbd,
-	0xbc,
-	0x59,
-	0x85,
-	0x2d,
-	0xa2,
-	0x00,
-	0x8a,
-	0x0a,
-	0x1a,
-	0x45,
-	0x2e,
-	0x20,
-	0x93,
-	0x0e,
-	0x9d,
-	0x2f,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x10,
-	0x90,
-	0xf0,
-	0xa5,
-	0x23,
-	0xf0,
-	0x14,
-	0xa2,
-	0x0f,
-	0xbd,
-	0x2f,
-	0x7d,
-	0xdd,
-	0x2e,
-	0x7d,
-	0xd0,
-	0x05,
-	0x09,
-	0x80,
-	0x9d,
-	0x2f,
-	0x7d,
-	0xca,
-	0xd0,
-	0xf0,
-	0x80,
-	0x14,
-	0xa2,
-	0x00,
-	0xbd,
-	0x2f,
-	0x7d,
-	0xdd,
-	0x30,
-	0x7d,
-	0xd0,
-	0x05,
-	0x09,
-	0x80,
-	0x9d,
-	0x2f,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x0f,
-	0x90,
-	0xee,
-	0xa9,
-	0x00,
-	0xa6,
-	0x23,
-	0xf0,
-	0x02,
-	0xa9,
-	0x0f,
-	0x85,
-	0x8a,
-	0xe6,
-	0x25,
-	0x60,
-	0x85,
-	0x2e,
-	0xa9,
-	0x39,
-	0x85,
-	0x4a,
-	0xa9,
-	0xbe,
-	0x85,
-	0x4b,
-	0xa2,
-	0x00,
-	0xa0,
-	0x5a,
-	0xa5,
-	0x2e,
-	0xd1,
-	0x4a,
-	0x90,
-	0x19,
-	0xe0,
-	0x04,
-	0xf0,
-	0x0e,
-	0xe8,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x5b,
-	0x85,
-	0x4a,
-	0x90,
-	0xec,
-	0xe6,
-	0x4b,
-	0x80,
-	0xe8,
-	0xa0,
-	0x5a,
-	0xd3,
-	0x4a,
-	0x1f,
-	0x6b,
-	0x60,
-	0x8a,
-	0xf0,
-	0xf6,
-	0xb1,
-	0x4a,
-	0x85,
-	0x30,
-	0x38,
-	0xa5,
-	0x4a,
-	0xe9,
-	0x5b,
-	0x85,
-	0x4c,
-	0xa5,
-	0x4b,
-	0xe9,
-	0x00,
-	0x85,
-	0x4d,
-	0xb1,
-	0x4c,
-	0x85,
-	0x2f,
-	0xc5,
-	0x2e,
-	0xd0,
-	0x07,
-	0xa0,
-	0x5a,
-	0xd3,
-	0x4c,
-	0x1f,
-	0x6b,
-	0x60,
-	0x38,
-	0xa5,
-	0x30,
-	0xe5,
-	0x2e,
-	0x85,
-	0x33,
-	0x64,
-	0x32,
-	0x38,
-	0xa5,
-	0x30,
-	0xe5,
-	0x2f,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x20,
-	0x0b,
-	0x39,
-	0xa5,
-	0x32,
-	0x85,
-	0x2e,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x2f,
-	0xa9,
-	0x06,
-	0x85,
-	0x34,
-	0xa2,
-	0x00,
-	0x64,
-	0x35,
-	0xdc,
-	0xb1,
-	0x4c,
-	0x85,
-	0x30,
-	0xb1,
-	0x4a,
-	0x10,
-	0x20,
-	0xa4,
-	0x35,
-	0xf0,
-	0x1c,
-	0x85,
-	0x31,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x31,
-	0x45,
-	0x2f,
-	0x85,
-	0x31,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x31,
-	0x85,
-	0x32,
-	0x84,
-	0x31,
-	0xa9,
-	0x00,
-	0xe5,
-	0x31,
-	0x85,
-	0x33,
-	0x80,
-	0x06,
-	0x45,
-	0x2f,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0xa5,
-	0x30,
-	0x10,
-	0x1e,
-	0xa4,
-	0x35,
-	0xf0,
-	0x1a,
-	0x85,
-	0x31,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x31,
-	0x45,
-	0x2e,
-	0x85,
-	0x31,
-	0x38,
-	0xa5,
-	0x32,
-	0xe5,
-	0x31,
-	0x85,
-	0x32,
-	0x84,
-	0x31,
-	0xa5,
-	0x33,
-	0xe5,
-	0x31,
-	0x80,
-	0x0a,
-	0x45,
-	0x2e,
-	0x18,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x65,
-	0x33,
-	0xa8,
-	0xa5,
-	0x32,
-	0x10,
-	0x01,
-	0xc8,
-	0x98,
-	0x9d,
-	0x1f,
-	0x6b,
-	0xe8,
-	0xe6,
-	0x35,
-	0xa5,
-	0x35,
-	0xc9,
-	0x0f,
-	0xd0,
-	0x92,
-	0xc6,
-	0x34,
-	0xd0,
-	0x8c,
-	0x60,
-	0xa9,
-	0x9d,
-	0x85,
-	0x4a,
-	0xa9,
-	0x74,
-	0x85,
-	0x4b,
-	0xa9,
-	0xdc,
-	0x85,
-	0x4c,
-	0xa9,
-	0x3f,
-	0x85,
-	0x4d,
-	0x64,
-	0x38,
-	0xa0,
-	0x11,
-	0x13,
-	0x38,
-	0x00,
-	0x39,
-	0x00,
-	0xa9,
-	0x11,
-	0x85,
-	0x30,
-	0xa9,
-	0x15,
-	0x85,
-	0x31,
-	0xa0,
-	0x0e,
-	0xd3,
-	0x4c,
-	0x50,
-	0x00,
-	0x64,
-	0x4e,
-	0xa2,
-	0x00,
-	0xa9,
-	0x06,
-	0x85,
-	0x2e,
-	0x18,
-	0xbd,
-	0x20,
-	0x6b,
-	0x3c,
-	0x45,
-	0x50,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x09,
-	0x7d,
-	0x1f,
-	0x6b,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x80,
-	0x07,
-	0x7d,
-	0x1f,
-	0x6b,
-	0x85,
-	0x33,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0x34,
-	0x18,
-	0xbd,
-	0x21,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x51,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x22,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x52,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x23,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x53,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x24,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x54,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x25,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x55,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x26,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x56,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x27,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x57,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x28,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x58,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x29,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x59,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2a,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x5a,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2b,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x5b,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2c,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x5c,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2d,
-	0x6b,
-	0x3c,
-	0x45,
-	0x5d,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x08,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x80,
-	0x06,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0x00,
-	0x65,
-	0x34,
-	0xf0,
-	0x0a,
-	0x10,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x0e,
-	0xa9,
-	0xff,
-	0x80,
-	0x0a,
-	0xa5,
-	0x33,
-	0xa4,
-	0x32,
-	0x10,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0x3a,
-	0x92,
-	0x4a,
-	0xda,
-	0xa6,
-	0x4e,
-	0x18,
-	0x75,
-	0x38,
-	0x95,
-	0x38,
-	0x90,
-	0x07,
-	0x18,
-	0xf6,
-	0x39,
-	0xd0,
-	0x02,
-	0xf6,
-	0x3a,
-	0xe8,
-	0xe8,
-	0xe8,
-	0x86,
-	0x4e,
-	0xe6,
-	0x4a,
-	0xd0,
-	0x02,
-	0xe6,
-	0x4b,
-	0x68,
-	0x69,
-	0x0f,
-	0xaa,
-	0xc6,
-	0x2e,
-	0xf0,
-	0x03,
-	0x4c,
-	0xc2,
-	0x10,
-	0xa5,
-	0x4c,
-	0x69,
-	0x0e,
-	0x85,
-	0x4c,
-	0x90,
-	0x02,
-	0xe6,
-	0x4d,
-	0xc6,
-	0x31,
-	0xf0,
-	0x03,
-	0x4c,
-	0xb3,
-	0x10,
-	0xc6,
-	0x30,
-	0xf0,
-	0x03,
-	0x4c,
-	0xaf,
-	0x10,
-	0x64,
-	0x2e,
-	0xa5,
-	0x2e,
-	0x49,
-	0x09,
-	0xa8,
-	0xa2,
-	0x00,
-	0xa9,
-	0x03,
-	0x85,
-	0x2f,
-	0xb9,
-	0x38,
-	0x00,
-	0x0a,
-	0x48,
-	0xb9,
-	0x39,
-	0x00,
-	0x2a,
-	0x95,
-	0x50,
-	0xb9,
-	0x3a,
-	0x00,
-	0x2a,
-	0x95,
-	0x51,
-	0x68,
-	0x0a,
-	0x90,
-	0x06,
-	0xf6,
-	0x50,
-	0xd0,
-	0x02,
-	0xf6,
-	0x51,
-	0xc8,
-	0xc8,
-	0xc8,
-	0xe8,
-	0xe8,
-	0xc6,
-	0x2f,
-	0xd0,
-	0xdc,
-	0xa0,
-	0x00,
-	0x38,
-	0xa5,
-	0x50,
-	0xe5,
-	0x52,
-	0x85,
-	0x2f,
-	0xa5,
-	0x51,
-	0xe5,
-	0x53,
-	0x08,
-	0x05,
-	0x2f,
-	0x85,
-	0x2f,
-	0xd0,
-	0x01,
-	0xc8,
-	0x38,
-	0xa5,
-	0x52,
-	0xe5,
-	0x54,
-	0x85,
-	0x30,
-	0xa5,
-	0x53,
-	0xe5,
-	0x55,
-	0x08,
-	0x05,
-	0x30,
-	0x85,
-	0x30,
-	0xd0,
-	0x01,
-	0xc8,
-	0x38,
-	0xa5,
-	0x54,
-	0xe5,
-	0x50,
-	0x85,
-	0x31,
-	0xa5,
-	0x55,
-	0xe5,
-	0x51,
-	0x08,
-	0x05,
-	0x31,
-	0x85,
-	0x31,
-	0xd0,
-	0x01,
-	0xc8,
-	0xa6,
-	0x2e,
-	0x98,
-	0x95,
-	0xdc,
-	0xa9,
-	0x00,
-	0xa8,
-	0x28,
-	0xb0,
-	0x03,
-	0x69,
-	0x04,
-	0xc8,
-	0x28,
-	0xb0,
-	0x03,
-	0x1a,
-	0x1a,
-	0xc8,
-	0x28,
-	0xb0,
-	0x02,
-	0x1a,
-	0xc8,
-	0xc0,
-	0x01,
-	0xd0,
-	0x26,
-	0xc9,
-	0x01,
-	0xd0,
-	0x08,
-	0xa4,
-	0x30,
-	0xd0,
-	0x1e,
-	0xa9,
-	0x00,
-	0x80,
-	0x1a,
-	0xc9,
-	0x02,
-	0xd0,
-	0x08,
-	0xa4,
-	0x2f,
-	0xd0,
-	0x12,
-	0xa9,
-	0x00,
-	0x80,
-	0x0e,
-	0xa4,
-	0x2f,
-	0xd0,
-	0x04,
-	0xa9,
-	0x05,
-	0x80,
-	0x06,
-	0xa4,
-	0x30,
-	0xd0,
-	0x02,
-	0xa9,
-	0x06,
-	0x49,
-	0x03,
-	0xa8,
-	0xb9,
-	0xa3,
-	0x3f,
-	0x85,
-	0x5d,
-	0xb9,
-	0xa4,
-	0x3f,
-	0x85,
-	0x5e,
-	0xb9,
-	0xa5,
-	0x3f,
-	0x85,
-	0x5f,
-	0xa6,
-	0x5e,
-	0xa4,
-	0x5d,
-	0x98,
-	0x0a,
-	0xa8,
-	0xb9,
-	0x50,
-	0x00,
-	0x85,
-	0x32,
-	0xb9,
-	0x51,
-	0x00,
-	0x85,
-	0x33,
-	0xa5,
-	0x2e,
-	0x49,
-	0x06,
-	0xaa,
-	0xa0,
-	0x00,
-	0x38,
-	0xb9,
-	0x50,
-	0x00,
-	0xe5,
-	0x32,
-	0x9d,
-	0xfb,
-	0x7c,
-	0xb9,
-	0x51,
-	0x00,
-	0xe5,
-	0x33,
-	0x9d,
-	0xfc,
-	0x7c,
-	0xe8,
-	0xe8,
-	0xc8,
-	0xc8,
-	0xc0,
-	0x06,
-	0xd0,
-	0xe7,
-	0xa5,
-	0x2e,
-	0x49,
-	0x03,
-	0xaa,
-	0xa5,
-	0x5d,
-	0x9d,
-	0x07,
-	0x7d,
-	0xa5,
-	0x5e,
-	0x9d,
-	0x08,
-	0x7d,
-	0xa5,
-	0x5f,
-	0x9d,
-	0x09,
-	0x7d,
-	0xa5,
-	0x2e,
-	0x49,
-	0x06,
-	0xa8,
-	0x18,
-	0x65,
-	0x5f,
-	0x65,
-	0x5f,
-	0xaa,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x6b,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x6a,
-	0x98,
-	0x18,
-	0x65,
-	0x5e,
-	0x65,
-	0x5e,
-	0xaa,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x69,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x68,
-	0x49,
-	0x10,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0x18,
-	0xa5,
-	0x69,
-	0x49,
-	0x10,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x38,
-	0xa5,
-	0x6a,
-	0xe5,
-	0x68,
-	0x85,
-	0x34,
-	0xa5,
-	0x6b,
-	0xe5,
-	0x69,
-	0x85,
-	0x35,
-	0x20,
-	0x2f,
-	0x39,
-	0xa0,
-	0x02,
-	0x53,
-	0x32,
-	0x00,
-	0x56,
-	0x00,
-	0x18,
-	0xa5,
-	0x68,
-	0x65,
-	0x6a,
-	0x85,
-	0x58,
-	0xa5,
-	0x69,
-	0x65,
-	0x6b,
-	0x85,
-	0x59,
-	0xa5,
-	0x56,
-	0x45,
-	0x68,
-	0x85,
-	0x5a,
-	0x84,
-	0x5b,
-	0xa5,
-	0x57,
-	0x45,
-	0x68,
-	0x18,
-	0x65,
-	0x5b,
-	0x85,
-	0x5b,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x5c,
-	0xa5,
-	0x56,
-	0x45,
-	0x69,
-	0x18,
-	0x65,
-	0x5b,
-	0x85,
-	0x5b,
-	0x98,
-	0x65,
-	0x5c,
-	0x85,
-	0x5c,
-	0xa5,
-	0x57,
-	0x45,
-	0x69,
-	0x18,
-	0x65,
-	0x5c,
-	0x85,
-	0x5c,
-	0xa5,
-	0x2e,
-	0x49,
-	0x07,
-	0x18,
-	0x69,
-	0x0d,
-	0x85,
-	0x4c,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x4d,
-	0xa0,
-	0x07,
-	0x73,
-	0x56,
-	0x00,
-	0x4c,
-	0xa5,
-	0x2e,
-	0x1a,
-	0xc9,
-	0x02,
-	0xf0,
-	0x05,
-	0x85,
-	0x2e,
-	0x4c,
-	0x14,
-	0x13,
-	0x60,
-	0xa2,
-	0x00,
-	0xa8,
-	0x30,
-	0x04,
-	0xe8,
-	0x0a,
-	0x10,
-	0xfc,
-	0xbd,
-	0xb8,
-	0x3f,
-	0xaa,
-	0x60,
-	0xa5,
-	0x9a,
-	0x05,
-	0x9e,
-	0x05,
-	0xa2,
-	0x05,
-	0xa6,
-	0xf0,
-	0x33,
-	0x20,
-	0xc0,
-	0x14,
-	0x45,
-	0x99,
-	0x84,
-	0xea,
-	0x8a,
-	0x45,
-	0x9a,
-	0x05,
-	0xea,
-	0x85,
-	0xea,
-	0x8a,
-	0x45,
-	0x9d,
-	0x84,
-	0xeb,
-	0x8a,
-	0x45,
-	0x9e,
-	0x05,
-	0xeb,
-	0x85,
-	0xeb,
-	0x8a,
-	0x45,
-	0xa1,
-	0x84,
-	0xec,
-	0x8a,
-	0x45,
-	0xa2,
-	0x05,
-	0xec,
-	0x85,
-	0xec,
-	0x8a,
-	0x45,
-	0xa5,
-	0x84,
-	0xed,
-	0x8a,
-	0x45,
-	0xa6,
-	0x05,
-	0xed,
-	0x85,
-	0xed,
-	0x60,
-	0xa5,
-	0x99,
-	0x05,
-	0x9d,
-	0x05,
-	0xa1,
-	0x05,
-	0xa5,
-	0xf0,
-	0x33,
-	0x20,
-	0xc0,
-	0x14,
-	0x45,
-	0x98,
-	0x84,
-	0xea,
-	0x8a,
-	0x45,
-	0x99,
-	0x05,
-	0xea,
-	0x85,
-	0xea,
-	0x8a,
-	0x45,
-	0x9c,
-	0x84,
-	0xeb,
-	0x8a,
-	0x45,
-	0x9d,
-	0x05,
-	0xeb,
-	0x85,
-	0xeb,
-	0x8a,
-	0x45,
-	0xa0,
-	0x84,
-	0xec,
-	0x8a,
-	0x45,
-	0xa1,
-	0x05,
-	0xec,
-	0x85,
-	0xec,
-	0x8a,
-	0x45,
-	0xa4,
-	0x84,
-	0xed,
-	0x8a,
-	0x45,
-	0xa5,
-	0x05,
-	0xed,
-	0x85,
-	0xed,
-	0x60,
-	0xa5,
-	0x98,
-	0x85,
-	0xea,
-	0xa5,
-	0x9c,
-	0x85,
-	0xeb,
-	0xa5,
-	0xa0,
-	0x85,
-	0xec,
-	0xa5,
-	0xa4,
-	0x85,
-	0xed,
-	0x60,
-	0xaa,
-	0x45,
-	0xc8,
-	0x84,
-	0xcb,
-	0x8a,
-	0x45,
-	0xc9,
-	0x18,
-	0x65,
-	0xcb,
-	0x90,
-	0x01,
-	0xc8,
-	0x84,
-	0xe7,
-	0x8a,
-	0x45,
-	0xcc,
-	0x84,
-	0xcf,
-	0x8a,
-	0x45,
-	0xcd,
-	0x18,
-	0x65,
-	0xcf,
-	0x90,
-	0x01,
-	0xc8,
-	0x98,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x85,
-	0xe8,
-	0x8a,
-	0x45,
-	0xc4,
-	0x84,
-	0xc7,
-	0x8a,
-	0x45,
-	0xc5,
-	0x18,
-	0x65,
-	0xc7,
-	0x90,
-	0x02,
-	0x18,
-	0xc8,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0x8a,
-	0x45,
-	0xc6,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xd0,
-	0x84,
-	0xd3,
-	0x8a,
-	0x45,
-	0xd1,
-	0x18,
-	0x65,
-	0xd3,
-	0x90,
-	0x02,
-	0x18,
-	0xc8,
-	0x85,
-	0xd0,
-	0x84,
-	0xd1,
-	0x8a,
-	0x45,
-	0xd2,
-	0x65,
-	0xd1,
-	0x85,
-	0xd1,
-	0x18,
-	0xa5,
-	0xc4,
-	0x65,
-	0xd0,
-	0xa5,
-	0xc5,
-	0x65,
-	0xd1,
-	0x6a,
-	0xa8,
-	0x90,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0x3a,
-	0x85,
-	0xe9,
-	0x98,
-	0x4a,
-	0x4a,
-	0x49,
-	0x20,
-	0x05,
-	0xe7,
-	0x85,
-	0xe7,
-	0x98,
-	0x05,
-	0xe8,
-	0x85,
-	0xe8,
-	0x38,
-	0xa5,
-	0xc4,
-	0xe5,
-	0xd0,
-	0xaa,
-	0xa5,
-	0xc5,
-	0xe5,
-	0xd1,
-	0xb0,
-	0x52,
-	0x38,
-	0xa5,
-	0xd0,
-	0xe5,
-	0xc4,
-	0x85,
-	0xca,
-	0xa5,
-	0xd1,
-	0xe5,
-	0xc5,
-	0x85,
-	0xcb,
-	0xa4,
-	0xe9,
-	0xb9,
-	0xcc,
-	0x59,
-	0xaa,
-	0x45,
-	0xca,
-	0x84,
-	0xc4,
-	0x8a,
-	0x45,
-	0xcb,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x69,
-	0x00,
-	0xa4,
-	0xe9,
-	0xbe,
-	0xcc,
-	0x5a,
-	0xf0,
-	0x14,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xca,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xcb,
-	0x65,
-	0xc5,
-	0xa6,
-	0xc4,
-	0x10,
-	0x01,
-	0x1a,
-	0xc9,
-	0x27,
-	0x90,
-	0x02,
-	0xa9,
-	0x26,
-	0x85,
-	0xe6,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0xe6,
-	0x85,
-	0xe6,
-	0x60,
-	0x86,
-	0xca,
-	0x85,
-	0xcb,
-	0xa4,
-	0xe9,
-	0xb9,
-	0xcc,
-	0x59,
-	0xaa,
-	0x45,
-	0xca,
-	0x84,
-	0xc4,
-	0x8a,
-	0x45,
-	0xcb,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x69,
-	0x00,
-	0xa4,
-	0xe9,
-	0xbe,
-	0xcc,
-	0x5a,
-	0xf0,
-	0x14,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xca,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xcb,
-	0x65,
-	0xc5,
-	0xa6,
-	0xc4,
-	0x10,
-	0x01,
-	0x1a,
-	0xc9,
-	0x27,
-	0x90,
-	0x02,
-	0xa9,
-	0x26,
-	0x85,
-	0xe6,
-	0x60,
-	0xa5,
-	0xc4,
-	0x0a,
-	0xa5,
-	0xc5,
-	0x2a,
-	0x85,
-	0xc4,
-	0xa5,
-	0xc6,
-	0x2a,
-	0x85,
-	0xc5,
-	0xa5,
-	0xc7,
-	0x2a,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc9,
-	0x4a,
-	0x4a,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x49,
-	0x40,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x49,
-	0x40,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcd,
-	0x4a,
-	0x4a,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x49,
-	0x40,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x49,
-	0x40,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0xa5,
-	0xd0,
-	0x0a,
-	0xa5,
-	0xd1,
-	0x2a,
-	0x85,
-	0xd0,
-	0xa5,
-	0xd2,
-	0x2a,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd3,
-	0x2a,
-	0x85,
-	0xd2,
-	0x60,
-	0xa5,
-	0xc4,
-	0x49,
-	0x04,
-	0x84,
-	0xc4,
-	0xa5,
-	0xc5,
-	0x49,
-	0x04,
-	0x05,
-	0xc4,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0xa5,
-	0xc6,
-	0x49,
-	0x04,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x84,
-	0xc6,
-	0xa5,
-	0xc9,
-	0x4a,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x49,
-	0x80,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x49,
-	0x80,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcd,
-	0x4a,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x49,
-	0x80,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x49,
-	0x80,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0xa5,
-	0xd0,
-	0x49,
-	0x04,
-	0x84,
-	0xd0,
-	0xa5,
-	0xd1,
-	0x49,
-	0x04,
-	0x05,
-	0xd0,
-	0x85,
-	0xd0,
-	0x84,
-	0xd1,
-	0xa5,
-	0xd2,
-	0x49,
-	0x04,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x84,
-	0xd2,
-	0x60,
-	0xa5,
-	0xc4,
-	0x49,
-	0x08,
-	0x84,
-	0xc4,
-	0xa5,
-	0xc5,
-	0x49,
-	0x08,
-	0x05,
-	0xc4,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0xa5,
-	0xc6,
-	0x49,
-	0x08,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x84,
-	0xc6,
-	0xa5,
-	0xc9,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x85,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x85,
-	0xca,
-	0xa5,
-	0xcd,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x85,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x85,
-	0xce,
-	0xa5,
-	0xd0,
-	0x49,
-	0x08,
-	0x84,
-	0xd0,
-	0xa5,
-	0xd1,
-	0x49,
-	0x08,
-	0x05,
-	0xd0,
-	0x85,
-	0xd0,
-	0x84,
-	0xd1,
-	0xa5,
-	0xd2,
-	0x49,
-	0x08,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x84,
-	0xd2,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0xa5,
-	0xc8,
-	0x0a,
-	0xa5,
-	0xc9,
-	0x2a,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x2a,
-	0x85,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x2a,
-	0x85,
-	0xca,
-	0xa5,
-	0xcc,
-	0x0a,
-	0xa5,
-	0xcd,
-	0x2a,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x2a,
-	0x85,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x2a,
-	0x85,
-	0xce,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0xa5,
-	0xc8,
-	0x49,
-	0x04,
-	0x84,
-	0xc8,
-	0xa5,
-	0xc9,
-	0x49,
-	0x04,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xca,
-	0x49,
-	0x04,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcc,
-	0x49,
-	0x04,
-	0x84,
-	0xcc,
-	0xa5,
-	0xcd,
-	0x49,
-	0x04,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xce,
-	0x49,
-	0x04,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0xa5,
-	0xc8,
-	0x49,
-	0x08,
-	0x84,
-	0xc8,
-	0xa5,
-	0xc9,
-	0x49,
-	0x08,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xca,
-	0x49,
-	0x08,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcc,
-	0x49,
-	0x08,
-	0x84,
-	0xcc,
-	0xa5,
-	0xcd,
-	0x49,
-	0x08,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xce,
-	0x49,
-	0x08,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0xa5,
-	0xc7,
-	0x49,
-	0x20,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc6,
-	0x49,
-	0x20,
-	0x85,
-	0xc6,
-	0x98,
-	0x05,
-	0xc7,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc5,
-	0x49,
-	0x20,
-	0x85,
-	0xc5,
-	0x98,
-	0x05,
-	0xc6,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc4,
-	0x49,
-	0x20,
-	0x85,
-	0xc4,
-	0x98,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0xa5,
-	0xd3,
-	0x49,
-	0x20,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd2,
-	0x49,
-	0x20,
-	0x85,
-	0xd2,
-	0x98,
-	0x05,
-	0xd3,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd1,
-	0x49,
-	0x20,
-	0x85,
-	0xd1,
-	0x98,
-	0x05,
-	0xd2,
-	0x85,
-	0xd2,
-	0xa5,
-	0xd0,
-	0x49,
-	0x20,
-	0x85,
-	0xd0,
-	0x98,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x60,
-	0xa5,
-	0xc7,
-	0x49,
-	0x40,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc6,
-	0x49,
-	0x40,
-	0x85,
-	0xc6,
-	0x98,
-	0x05,
-	0xc7,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc5,
-	0x49,
-	0x40,
-	0x85,
-	0xc5,
-	0x98,
-	0x05,
-	0xc6,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc4,
-	0x49,
-	0x40,
-	0x85,
-	0xc4,
-	0x98,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0xa5,
-	0xd3,
-	0x49,
-	0x40,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd2,
-	0x49,
-	0x40,
-	0x85,
-	0xd2,
-	0x98,
-	0x05,
-	0xd3,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd1,
-	0x49,
-	0x40,
-	0x85,
-	0xd1,
-	0x98,
-	0x05,
-	0xd2,
-	0x85,
-	0xd2,
-	0xa5,
-	0xd0,
-	0x49,
-	0x40,
-	0x85,
-	0xd0,
-	0x98,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x60,
-	0x20,
-	0x7b,
-	0x3b,
-	0x46,
-	0xe5,
-	0x66,
-	0xe4,
-	0x90,
-	0x06,
-	0xe6,
-	0xe4,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe5,
-	0x38,
-	0xa5,
-	0xe6,
-	0xe5,
-	0xe4,
-	0xa5,
-	0xe7,
-	0xe5,
-	0xe5,
-	0x30,
-	0x06,
-	0xe6,
-	0xe2,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe3,
-	0x60,
-	0x64,
-	0x22,
-	0x64,
-	0xa8,
-	0x9c,
-	0x9d,
-	0x6a,
-	0xa9,
-	0x77,
-	0x85,
-	0xe2,
-	0xa9,
-	0x60,
-	0x85,
-	0xe3,
-	0xa2,
-	0xc0,
-	0xa9,
-	0x03,
-	0x20,
-	0x90,
-	0x3e,
-	0xa9,
-	0x80,
-	0x85,
-	0xde,
-	0xa9,
-	0x1b,
-	0x85,
-	0xe2,
-	0xa9,
-	0x6c,
-	0x85,
-	0xe3,
-	0xa2,
-	0x94,
-	0xa9,
-	0x05,
-	0x20,
-	0x92,
-	0x3e,
-	0xa0,
-	0x06,
-	0x53,
-	0x4c,
-	0x5c,
-	0x79,
-	0x6b,
-	0xa0,
-	0x96,
-	0x13,
-	0xa8,
-	0x00,
-	0x85,
-	0x6b,
-	0xa9,
-	0x01,
-	0x8d,
-	0x18,
-	0x6b,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2a,
-	0xbe,
-	0xe8,
-	0x00,
-	0x88,
-	0x98,
-	0x0a,
-	0xaa,
-	0xb9,
-	0xa3,
-	0x59,
-	0xd0,
-	0x14,
-	0x9e,
-	0x9c,
-	0x6a,
-	0x9e,
-	0x9d,
-	0x6a,
-	0x9e,
-	0xf4,
-	0x6a,
-	0x9e,
-	0xf5,
-	0x6a,
-	0x9e,
-	0x04,
-	0x6b,
-	0x9e,
-	0x05,
-	0x6b,
-	0x80,
-	0x6d,
-	0x5a,
-	0xda,
-	0xa5,
-	0xe9,
-	0xa6,
-	0xe8,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0xea,
-	0x86,
-	0xeb,
-	0xdc,
-	0x20,
-	0x5b,
-	0x0e,
-	0xfa,
-	0x9d,
-	0x9c,
-	0x6a,
-	0x9d,
-	0x9d,
-	0x6a,
-	0x49,
-	0x28,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x38,
-	0xa5,
-	0xea,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa5,
-	0xeb,
-	0xe5,
-	0xed,
-	0x05,
-	0xec,
-	0xf0,
-	0x03,
-	0xfe,
-	0x9d,
-	0x6a,
-	0xbd,
-	0x9d,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x80,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0xf5,
-	0x6a,
-	0xa5,
-	0xe2,
-	0x9d,
-	0xf4,
-	0x6a,
-	0xbd,
-	0x9d,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x40,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0x05,
-	0x6b,
-	0xa5,
-	0xe2,
-	0x9d,
-	0x04,
-	0x6b,
-	0x7a,
-	0xc8,
-	0xc0,
-	0x05,
-	0xb0,
-	0x03,
-	0x4c,
-	0xc8,
-	0x1a,
-	0xad,
-	0x9e,
-	0x6a,
-	0x49,
-	0x28,
-	0x85,
-	0xde,
-	0x38,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xde,
-	0x4a,
-	0x85,
-	0xde,
-	0x64,
-	0xdf,
-	0xa9,
-	0xff,
-	0x85,
-	0xe8,
-	0x85,
-	0xe9,
-	0xa2,
-	0x01,
-	0x18,
-	0xa5,
-	0xe8,
-	0x6d,
-	0x9e,
-	0x6a,
-	0x85,
-	0xe8,
-	0x90,
-	0x02,
-	0xe6,
-	0xe9,
-	0x8a,
-	0x0a,
-	0x45,
-	0xde,
-	0x20,
-	0x55,
-	0x0e,
-	0xc5,
-	0xdf,
-	0xf0,
-	0x06,
-	0xe6,
-	0xe8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe9,
-	0x85,
-	0xdf,
-	0xa5,
-	0xe8,
-	0x9d,
-	0xad,
-	0x6a,
-	0xa5,
-	0xe9,
-	0x9d,
-	0xc1,
-	0x6a,
-	0xe8,
-	0xe0,
-	0x15,
-	0x90,
-	0xd2,
-	0xa0,
-	0x02,
-	0x53,
-	0x2c,
-	0xbe,
-	0xe8,
-	0x00,
-	0x88,
-	0x98,
-	0x0a,
-	0xaa,
-	0xb9,
-	0xa3,
-	0x59,
-	0xd0,
-	0x14,
-	0x9e,
-	0xa4,
-	0x6a,
-	0x9e,
-	0xa5,
-	0x6a,
-	0x9e,
-	0xfc,
-	0x6a,
-	0x9e,
-	0xfd,
-	0x6a,
-	0x9e,
-	0x0c,
-	0x6b,
-	0x9e,
-	0x0d,
-	0x6b,
-	0x80,
-	0x6d,
-	0x5a,
-	0xda,
-	0xa5,
-	0xe9,
-	0xa6,
-	0xe8,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0xea,
-	0x86,
-	0xeb,
-	0xdc,
-	0x20,
-	0x93,
-	0x0e,
-	0xfa,
-	0x9d,
-	0xa4,
-	0x6a,
-	0x9d,
-	0xa5,
-	0x6a,
-	0x49,
-	0x20,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x38,
-	0xa5,
-	0xea,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa5,
-	0xeb,
-	0xe5,
-	0xed,
-	0x05,
-	0xec,
-	0xf0,
-	0x03,
-	0xfe,
-	0xa5,
-	0x6a,
-	0xbd,
-	0xa5,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x80,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0xfd,
-	0x6a,
-	0xa5,
-	0xe2,
-	0x9d,
-	0xfc,
-	0x6a,
-	0xbd,
-	0xa5,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x40,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0x0d,
-	0x6b,
-	0xa5,
-	0xe2,
-	0x9d,
-	0x0c,
-	0x6b,
-	0x7a,
-	0xc8,
-	0xc0,
-	0x05,
-	0xb0,
-	0x03,
-	0x4c,
-	0xa8,
-	0x1b,
-	0xad,
-	0xa6,
-	0x6a,
-	0x49,
-	0x20,
-	0x85,
-	0xde,
-	0x38,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xde,
-	0x4a,
-	0x85,
-	0xde,
-	0x64,
-	0xdf,
-	0xa9,
-	0xff,
-	0x85,
-	0xe8,
-	0x85,
-	0xe9,
-	0xa2,
-	0x01,
-	0x18,
-	0xa5,
-	0xe8,
-	0x6d,
-	0xa6,
-	0x6a,
-	0x85,
-	0xe8,
-	0x90,
-	0x02,
-	0xe6,
-	0xe9,
-	0x8a,
-	0x0a,
-	0x45,
-	0xde,
-	0x20,
-	0x8d,
-	0x0e,
-	0xc5,
-	0xdf,
-	0xf0,
-	0x06,
-	0xe6,
-	0xe8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe9,
-	0x85,
-	0xdf,
-	0xa5,
-	0xe8,
-	0x9d,
-	0xd5,
-	0x6a,
-	0xa5,
-	0xe9,
-	0x9d,
-	0xe5,
-	0x6a,
-	0xe8,
-	0xe0,
-	0x11,
-	0x90,
-	0xd2,
-	0xa9,
-	0x01,
-	0x8d,
-	0x9d,
-	0x6a,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0xad,
-	0x34,
-	0xc0,
-	0xaa,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x07,
-	0xad,
-	0x76,
-	0x60,
-	0xd0,
-	0x07,
-	0x80,
-	0x38,
-	0x8a,
-	0x29,
-	0xf8,
-	0xf0,
-	0x1b,
-	0xac,
-	0x76,
-	0x60,
-	0xf0,
-	0x06,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x20,
-	0x47,
-	0x3c,
-	0xa5,
-	0xba,
-	0xf0,
-	0x24,
-	0x8a,
-	0x29,
-	0x04,
-	0x09,
-	0x09,
-	0x8d,
-	0x38,
-	0xc0,
-	0xc6,
-	0xba,
-	0x80,
-	0x18,
-	0xa5,
-	0xab,
-	0xf0,
-	0x14,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x20,
-	0xc5,
-	0x39,
-	0xa0,
-	0x01,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x01,
-	0xf0,
-	0x02,
-	0xa0,
-	0x05,
-	0x8c,
-	0x38,
-	0xc0,
-	0x8a,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x42,
-	0xa5,
-	0xbe,
-	0xf0,
-	0x0f,
-	0x49,
-	0x3c,
-	0xaa,
-	0xa9,
-	0x77,
-	0x85,
-	0xe2,
-	0xa9,
-	0x60,
-	0x85,
-	0xe3,
-	0x98,
-	0x20,
-	0x90,
-	0x3e,
-	0x38,
-	0xa9,
-	0x0f,
-	0xe5,
-	0xbf,
-	0xf0,
-	0x1a,
-	0x49,
-	0x3c,
-	0x85,
-	0xe4,
-	0x84,
-	0xe5,
-	0x38,
-	0xa9,
-	0x37,
-	0xe5,
-	0xe4,
-	0x85,
-	0xe2,
-	0xa9,
-	0x64,
-	0xe5,
-	0xe5,
-	0x85,
-	0xe3,
-	0xa6,
-	0xe4,
-	0xa5,
-	0xe5,
-	0x20,
-	0x90,
-	0x3e,
-	0xa9,
-	0x01,
-	0x9c,
-	0x24,
-	0xd0,
-	0x8d,
-	0x24,
-	0xd0,
-	0x9c,
-	0x75,
-	0x60,
-	0x20,
-	0x36,
-	0x3f,
-	0x4c,
-	0x0b,
-	0x3f,
-	0xa6,
-	0x67,
-	0xbd,
-	0x7a,
-	0x74,
-	0xaa,
-	0x18,
-	0x69,
-	0xb7,
-	0x85,
-	0x50,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x51,
-	0x8a,
-	0x0a,
-	0xaa,
-	0x69,
-	0xf3,
-	0x85,
-	0x4a,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x4b,
-	0x8a,
-	0x69,
-	0x6b,
-	0x85,
-	0x4c,
-	0xa9,
-	0x7e,
-	0x69,
-	0x00,
-	0x85,
-	0x4d,
-	0x8a,
-	0x69,
-	0x3f,
-	0x85,
-	0x4e,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x4f,
-	0xa6,
-	0x67,
-	0xbd,
-	0x8c,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x56,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x57,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x58,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x59,
-	0xa5,
-	0x67,
-	0x49,
-	0x7e,
-	0x18,
-	0x69,
-	0x9d,
-	0x85,
-	0x52,
-	0x98,
-	0x69,
-	0x74,
-	0x85,
-	0x53,
-	0xa5,
-	0x28,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0x52,
-	0x85,
-	0x52,
-	0x98,
-	0x65,
-	0x53,
-	0x85,
-	0x53,
-	0xa0,
-	0x02,
-	0x53,
-	0x2a,
-	0x00,
-	0x3a,
-	0x00,
-	0xa5,
-	0x28,
-	0x85,
-	0x66,
-	0x0a,
-	0x85,
-	0x31,
-	0xa0,
-	0x05,
-	0xd3,
-	0x3a,
-	0x3e,
-	0x00,
-	0x18,
-	0xa5,
-	0x3f,
-	0x65,
-	0x42,
-	0x6a,
-	0x69,
-	0x00,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5d,
-	0x85,
-	0x33,
-	0xbd,
-	0x52,
-	0x5c,
-	0x85,
-	0x32,
-	0xa6,
-	0x40,
-	0x38,
-	0xfd,
-	0x52,
-	0x5c,
-	0xa8,
-	0xa5,
-	0x33,
-	0xfd,
-	0x52,
-	0x5d,
-	0xaa,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa0,
-	0x00,
-	0xa2,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa0,
-	0xff,
-	0xa2,
-	0x0f,
-	0x98,
-	0xa4,
-	0x31,
-	0x91,
-	0x4a,
-	0xc8,
-	0x8a,
-	0x91,
-	0x4a,
-	0xa6,
-	0x41,
-	0x38,
-	0xa5,
-	0x32,
-	0xfd,
-	0x52,
-	0x5c,
-	0xa8,
-	0xa5,
-	0x33,
-	0xfd,
-	0x52,
-	0x5d,
-	0xaa,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa0,
-	0x00,
-	0xa2,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa0,
-	0xff,
-	0xa2,
-	0x0f,
-	0x98,
-	0xa4,
-	0x31,
-	0x91,
-	0x4c,
-	0xc8,
-	0x8a,
-	0x91,
-	0x4c,
-	0xa6,
-	0x3f,
-	0xbd,
-	0x52,
-	0x5d,
-	0x48,
-	0xbd,
-	0x52,
-	0x5c,
-	0xa6,
-	0x42,
-	0x38,
-	0xfd,
-	0x52,
-	0x5c,
-	0xa8,
-	0x68,
-	0xfd,
-	0x52,
-	0x5d,
-	0xaa,
-	0x10,
-	0x0c,
-	0x29,
-	0xf8,
-	0xc9,
-	0xf8,
-	0xf0,
-	0x0e,
-	0xa0,
-	0x00,
-	0xa2,
-	0xf8,
-	0x80,
-	0x08,
-	0x29,
-	0xf8,
-	0xf0,
-	0x04,
-	0xa0,
-	0xff,
-	0xa2,
-	0x07,
-	0x98,
-	0xa4,
-	0x31,
-	0x91,
-	0x4e,
-	0xc8,
-	0x8a,
-	0x91,
-	0x4e,
-	0xa2,
-	0x01,
-	0xa5,
-	0x3e,
-	0xcd,
-	0x2f,
-	0xbe,
-	0x90,
-	0x07,
-	0xcd,
-	0x30,
-	0xbe,
-	0x90,
-	0x03,
-	0xf0,
-	0x01,
-	0xca,
-	0x8a,
-	0xa4,
-	0x66,
-	0x91,
-	0x50,
-	0x64,
-	0x30,
-	0xa9,
-	0x00,
-	0x85,
-	0x6d,
-	0x49,
-	0x03,
-	0x85,
-	0x38,
-	0x64,
-	0x34,
-	0x64,
-	0x35,
-	0xa9,
-	0x03,
-	0x85,
-	0x6c,
-	0x18,
-	0xa5,
-	0x38,
-	0xa6,
-	0x30,
-	0x7d,
-	0x07,
-	0x7d,
-	0x65,
-	0x52,
-	0x85,
-	0x36,
-	0xa5,
-	0x53,
-	0x69,
-	0x00,
-	0x85,
-	0x37,
-	0xa2,
-	0x00,
-	0xb2,
-	0x36,
-	0xa0,
-	0x06,
-	0x71,
-	0x36,
-	0x90,
-	0x02,
-	0xe8,
-	0x18,
-	0xa0,
-	0x7e,
-	0x71,
-	0x36,
-	0x90,
-	0x02,
-	0xe8,
-	0x18,
-	0xa0,
-	0x84,
-	0x71,
-	0x36,
-	0x90,
-	0x01,
-	0xe8,
-	0x86,
-	0x2e,
-	0x46,
-	0x2e,
-	0x6a,
-	0x46,
-	0x2e,
-	0x6a,
-	0x69,
-	0x00,
-	0x92,
-	0x56,
-	0xa4,
-	0x30,
-	0x59,
-	0x79,
-	0x6b,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xe6,
-	0x56,
-	0xd0,
-	0x02,
-	0xe6,
-	0x57,
-	0xe6,
-	0x30,
-	0xc6,
-	0x6c,
-	0xd0,
-	0xad,
-	0xa5,
-	0x34,
-	0x0a,
-	0xaa,
-	0xa5,
-	0x35,
-	0x2a,
-	0xe0,
-	0x80,
-	0x90,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0x3a,
-	0x92,
-	0x58,
-	0xe6,
-	0x58,
-	0xd0,
-	0x02,
-	0xe6,
-	0x59,
-	0xa5,
-	0x6d,
-	0x1a,
-	0xc9,
-	0x02,
-	0xd0,
-	0x80,
-	0xa5,
-	0x52,
-	0x18,
-	0x69,
-	0x06,
-	0x85,
-	0x52,
-	0x90,
-	0x02,
-	0xe6,
-	0x53,
-	0xa6,
-	0x66,
-	0xe4,
-	0x29,
-	0xf0,
-	0x0f,
-	0xa5,
-	0x3a,
-	0x69,
-	0x05,
-	0x85,
-	0x3a,
-	0x90,
-	0x02,
-	0xe6,
-	0x3b,
-	0x8a,
-	0x1a,
-	0x4c,
-	0x96,
-	0x1d,
-	0xa5,
-	0x2a,
-	0xa6,
-	0x23,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x64,
-	0x85,
-	0x2a,
-	0xb0,
-	0x0d,
-	0xc6,
-	0x2b,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x64,
-	0x85,
-	0x2a,
-	0x90,
-	0x02,
-	0xe6,
-	0x2b,
-	0x60,
-	0xa4,
-	0x28,
-	0x84,
-	0x61,
-	0x84,
-	0x62,
-	0xc4,
-	0x29,
-	0xf0,
-	0x02,
-	0xe6,
-	0x62,
-	0xb1,
-	0x5a,
-	0xf0,
-	0x20,
-	0x31,
-	0x5c,
-	0x31,
-	0x5e,
-	0xfc,
-	0xa4,
-	0x61,
-	0x31,
-	0x5c,
-	0x31,
-	0x5a,
-	0x31,
-	0x5e,
-	0xa4,
-	0x62,
-	0x31,
-	0x5c,
-	0x31,
-	0x5a,
-	0x31,
-	0x5e,
-	0xdc,
-	0x29,
-	0x01,
-	0xd0,
-	0x04,
-	0xb1,
-	0x5a,
-	0x80,
-	0x02,
-	0x09,
-	0x02,
-	0x91,
-	0x5a,
-	0x84,
-	0x61,
-	0xc8,
-	0xc4,
-	0x29,
-	0x90,
-	0xd1,
-	0xf0,
-	0xd1,
-	0x60,
-	0xa2,
-	0x01,
-	0xa5,
-	0x67,
-	0xc5,
-	0x26,
-	0xf0,
-	0x06,
-	0xc5,
-	0x27,
-	0xf0,
-	0x02,
-	0xa2,
-	0x00,
-	0x86,
-	0x88,
-	0x85,
-	0x64,
-	0x1a,
-	0x85,
-	0x63,
-	0x1a,
-	0x85,
-	0x65,
-	0x18,
-	0xa6,
-	0x67,
-	0xa9,
-	0xb7,
-	0xa8,
-	0x7d,
-	0x79,
-	0x74,
-	0x85,
-	0x5c,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x5d,
-	0x98,
-	0x7d,
-	0x7a,
-	0x74,
-	0x85,
-	0x5a,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x5b,
-	0x98,
-	0x7d,
-	0x7b,
-	0x74,
-	0x85,
-	0x5e,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x5f,
-	0x20,
-	0x17,
-	0x1f,
-	0xa6,
-	0x63,
-	0xbd,
-	0x8b,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x4a,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x4b,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x52,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x53,
-	0xa5,
-	0x28,
-	0xc5,
-	0x29,
-	0xf0,
-	0x1b,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x06,
-	0x85,
-	0x4c,
-	0xa5,
-	0x4b,
-	0x69,
-	0x00,
-	0x85,
-	0x4d,
-	0xa5,
-	0x52,
-	0x69,
-	0x02,
-	0x85,
-	0x54,
-	0xa5,
-	0x53,
-	0x69,
-	0x00,
-	0x85,
-	0x55,
-	0x80,
-	0x0c,
-	0xa0,
-	0x02,
-	0x53,
-	0x4a,
-	0x00,
-	0x4c,
-	0x00,
-	0x53,
-	0x52,
-	0x00,
-	0x54,
-	0x00,
-	0xa6,
-	0x64,
-	0xbd,
-	0x8b,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x4e,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x4f,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x56,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x57,
-	0xa6,
-	0x65,
-	0xbd,
-	0x8b,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x50,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x51,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x58,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x59,
-	0xa0,
-	0x02,
-	0x53,
-	0x5a,
-	0x00,
-	0x3c,
-	0x00,
-	0x18,
-	0xa6,
-	0x67,
-	0xbd,
-	0x79,
-	0x74,
-	0x0a,
-	0x69,
-	0x3f,
-	0x85,
-	0x5c,
-	0xa9,
-	0x7d,
-	0xa8,
-	0x69,
-	0x00,
-	0x85,
-	0x5d,
-	0xbd,
-	0x7a,
-	0x74,
-	0x0a,
-	0x69,
-	0x3f,
-	0x85,
-	0x5a,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x5b,
-	0xbd,
-	0x7b,
-	0x74,
-	0x0a,
-	0x69,
-	0x3f,
-	0x85,
-	0x5e,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x5f,
-	0xa5,
-	0x28,
-	0xaa,
-	0x85,
-	0x66,
-	0x0a,
-	0x85,
-	0x61,
-	0x8a,
-	0xa0,
-	0x01,
-	0x64,
-	0x89,
-	0xc5,
-	0x29,
-	0xf0,
-	0x01,
-	0x1a,
-	0x0a,
-	0x85,
-	0x62,
-	0x84,
-	0x87,
-	0xa4,
-	0x66,
-	0xb1,
-	0x3c,
-	0x29,
-	0x02,
-	0xf0,
-	0x0b,
-	0x20,
-	0x19,
-	0x21,
-	0x20,
-	0x0d,
-	0x22,
-	0x20,
-	0x98,
-	0x24,
-	0x80,
-	0x0e,
-	0x64,
-	0x93,
-	0x64,
-	0x94,
-	0x64,
-	0x95,
-	0x64,
-	0x96,
-	0x20,
-	0x0d,
-	0x22,
-	0x20,
-	0x98,
-	0x24,
-	0xa6,
-	0x89,
-	0xbd,
-	0x1b,
-	0x7d,
-	0xe8,
-	0x29,
-	0x80,
-	0xd0,
-	0xf8,
-	0x86,
-	0x89,
-	0x18,
-	0xa5,
-	0x4e,
-	0x69,
-	0x06,
-	0x85,
-	0x4e,
-	0x90,
-	0x03,
-	0xe6,
-	0x4f,
-	0x18,
-	0xa5,
-	0x50,
-	0x69,
-	0x06,
-	0x85,
-	0x50,
-	0x90,
-	0x03,
-	0xe6,
-	0x51,
-	0x18,
-	0xa5,
-	0x56,
-	0x69,
-	0x02,
-	0x85,
-	0x56,
-	0x90,
-	0x03,
-	0xe6,
-	0x57,
-	0x18,
-	0xa5,
-	0x58,
-	0x69,
-	0x02,
-	0x85,
-	0x58,
-	0x90,
-	0x02,
-	0xe6,
-	0x59,
-	0xa5,
-	0x66,
-	0xaa,
-	0x0a,
-	0x85,
-	0x61,
-	0xe4,
-	0x28,
-	0xf0,
-	0x16,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x06,
-	0x85,
-	0x4a,
-	0x90,
-	0x03,
-	0xe6,
-	0x4b,
-	0x18,
-	0xa5,
-	0x52,
-	0x69,
-	0x02,
-	0x85,
-	0x52,
-	0x90,
-	0x02,
-	0xe6,
-	0x53,
-	0xa0,
-	0x00,
-	0xe8,
-	0x86,
-	0x66,
-	0xe4,
-	0x29,
-	0xf0,
-	0x16,
-	0x18,
-	0xa5,
-	0x4c,
-	0x69,
-	0x06,
-	0x85,
-	0x4c,
-	0x90,
-	0x03,
-	0xe6,
-	0x4d,
-	0x18,
-	0xa5,
-	0x54,
-	0x69,
-	0x02,
-	0x85,
-	0x54,
-	0x90,
-	0x02,
-	0xe6,
-	0x55,
-	0x8a,
-	0xe4,
-	0x29,
-	0xb0,
-	0x03,
-	0x4c,
-	0x59,
-	0x20,
-	0xd0,
-	0x04,
-	0xc8,
-	0x4c,
-	0x5d,
-	0x20,
-	0xa6,
-	0x8a,
-	0xbd,
-	0x2f,
-	0x7d,
-	0xa4,
-	0x23,
-	0xf0,
-	0x03,
-	0xca,
-	0x80,
-	0x01,
-	0xe8,
-	0x29,
-	0x80,
-	0xd0,
-	0xf1,
-	0x86,
-	0x8a,
-	0x60,
-	0xa4,
-	0x62,
-	0xb1,
-	0x5a,
-	0xc8,
-	0x0a,
-	0xaa,
-	0xb1,
-	0x5a,
-	0x88,
-	0x2a,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5c,
-	0xc8,
-	0xaa,
-	0x68,
-	0x71,
-	0x5c,
-	0x88,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5e,
-	0xc8,
-	0xaa,
-	0x68,
-	0x71,
-	0x5e,
-	0x48,
-	0xda,
-	0xa4,
-	0x61,
-	0xb1,
-	0x5a,
-	0xc8,
-	0x0a,
-	0xaa,
-	0xb1,
-	0x5a,
-	0x88,
-	0x2a,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5c,
-	0xc8,
-	0xaa,
-	0x68,
-	0x71,
-	0x5c,
-	0x88,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5e,
-	0x85,
-	0x93,
-	0xc8,
-	0x68,
-	0x71,
-	0x5e,
-	0x85,
-	0x94,
-	0x38,
-	0x68,
-	0xe5,
-	0x93,
-	0x85,
-	0x93,
-	0x68,
-	0xe5,
-	0x94,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x93,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x93,
-	0xa6,
-	0x87,
-	0xd0,
-	0x05,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x93,
-	0x90,
-	0x05,
-	0xe6,
-	0x93,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x94,
-	0xa5,
-	0x66,
-	0x0a,
-	0xa8,
-	0x38,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0x85,
-	0x96,
-	0x8a,
-	0x0a,
-	0x85,
-	0x95,
-	0x26,
-	0x96,
-	0xa4,
-	0x61,
-	0x38,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xa8,
-	0x8a,
-	0x18,
-	0x65,
-	0x95,
-	0x85,
-	0x95,
-	0x98,
-	0x65,
-	0x96,
-	0x85,
-	0x96,
-	0xa4,
-	0x62,
-	0x38,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xa8,
-	0x8a,
-	0x18,
-	0x65,
-	0x95,
-	0x85,
-	0x95,
-	0x98,
-	0x65,
-	0x96,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x95,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x95,
-	0xa6,
-	0x88,
-	0xd0,
-	0x05,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x95,
-	0x90,
-	0x05,
-	0xe6,
-	0x95,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x96,
-	0xa5,
-	0x66,
-	0x0a,
-	0xa8,
-	0xb1,
-	0x5a,
-	0x65,
-	0x6e,
-	0x85,
-	0x6e,
-	0xc8,
-	0xa2,
-	0xff,
-	0xb1,
-	0x5a,
-	0x30,
-	0x01,
-	0xe8,
-	0x65,
-	0x6f,
-	0x85,
-	0x6f,
-	0x8a,
-	0x65,
-	0x70,
-	0x85,
-	0x70,
-	0x8a,
-	0x65,
-	0x71,
-	0x85,
-	0x71,
-	0xe6,
-	0x72,
-	0xd0,
-	0x02,
-	0xe6,
-	0x73,
-	0x60,
-	0xa5,
-	0x66,
-	0x0a,
-	0x85,
-	0x2e,
-	0x64,
-	0x2f,
-	0x64,
-	0x38,
-	0x64,
-	0x39,
-	0x64,
-	0x6d,
-	0xa9,
-	0xf3,
-	0xa2,
-	0x7d,
-	0x80,
-	0x04,
-	0xa9,
-	0x6b,
-	0xa2,
-	0x7e,
-	0x85,
-	0x32,
-	0x86,
-	0x33,
-	0xa4,
-	0x67,
-	0xb9,
-	0x7a,
-	0x74,
-	0x0a,
-	0x65,
-	0x32,
-	0x85,
-	0x34,
-	0xa5,
-	0x33,
-	0x69,
-	0x00,
-	0x85,
-	0x35,
-	0xa4,
-	0x62,
-	0xb1,
-	0x34,
-	0xa4,
-	0x61,
-	0x38,
-	0xf1,
-	0x34,
-	0xaa,
-	0xa4,
-	0x62,
-	0xc8,
-	0xb1,
-	0x34,
-	0xa4,
-	0x61,
-	0xc8,
-	0xf1,
-	0x34,
-	0xa4,
-	0x87,
-	0xd0,
-	0x11,
-	0xc9,
-	0x80,
-	0x6a,
-	0x85,
-	0x69,
-	0x8a,
-	0x6a,
-	0x69,
-	0x00,
-	0x85,
-	0x68,
-	0x90,
-	0x1f,
-	0xaa,
-	0xa5,
-	0x69,
-	0x1a,
-	0xa8,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa2,
-	0x00,
-	0xa0,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa2,
-	0xff,
-	0xa0,
-	0x0f,
-	0x86,
-	0x68,
-	0x84,
-	0x69,
-	0xa4,
-	0x65,
-	0xb9,
-	0x79,
-	0x74,
-	0x0a,
-	0x65,
-	0x32,
-	0x85,
-	0x34,
-	0xa5,
-	0x33,
-	0xaa,
-	0x69,
-	0x00,
-	0x85,
-	0x35,
-	0xa4,
-	0x64,
-	0xb9,
-	0x79,
-	0x74,
-	0x0a,
-	0x65,
-	0x32,
-	0x85,
-	0x36,
-	0x8a,
-	0x69,
-	0x00,
-	0x85,
-	0x37,
-	0xa4,
-	0x2e,
-	0xb1,
-	0x34,
-	0x38,
-	0xf1,
-	0x36,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x34,
-	0xf1,
-	0x36,
-	0xa4,
-	0x88,
-	0xd0,
-	0x11,
-	0xc9,
-	0x80,
-	0x6a,
-	0x85,
-	0x6b,
-	0x8a,
-	0x6a,
-	0x69,
-	0x00,
-	0x85,
-	0x6a,
-	0x90,
-	0x1f,
-	0xaa,
-	0xa5,
-	0x6b,
-	0x1a,
-	0xa8,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa2,
-	0x00,
-	0xa0,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa2,
-	0xff,
-	0xa0,
-	0x0f,
-	0x86,
-	0x6a,
-	0x84,
-	0x6b,
-	0xa9,
-	0x03,
-	0x85,
-	0x6c,
-	0xa4,
-	0x2f,
-	0xb1,
-	0x4a,
-	0xaa,
-	0xb1,
-	0x4c,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x32,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x87,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x32,
-	0x90,
-	0x05,
-	0xe6,
-	0x32,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x33,
-	0xaa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x68,
-	0x85,
-	0x32,
-	0x8a,
-	0x65,
-	0x69,
-	0x85,
-	0x33,
-	0x10,
-	0x0d,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x32,
-	0x85,
-	0x32,
-	0xa9,
-	0x00,
-	0xe5,
-	0x33,
-	0x85,
-	0x33,
-	0xa4,
-	0x2f,
-	0xb1,
-	0x4e,
-	0xaa,
-	0xb1,
-	0x50,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x34,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x88,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x34,
-	0x90,
-	0x05,
-	0xe6,
-	0x34,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x35,
-	0xaa,
-	0x18,
-	0xa5,
-	0x34,
-	0x65,
-	0x6a,
-	0x85,
-	0x34,
-	0x8a,
-	0x65,
-	0x6b,
-	0x85,
-	0x35,
-	0x10,
-	0x0d,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x34,
-	0x85,
-	0x34,
-	0xa9,
-	0x00,
-	0xe5,
-	0x35,
-	0x85,
-	0x35,
-	0xc5,
-	0x33,
-	0x90,
-	0x11,
-	0xf0,
-	0x09,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x00,
-	0x32,
-	0x00,
-	0x80,
-	0x06,
-	0xa5,
-	0x34,
-	0xc5,
-	0x32,
-	0xb0,
-	0xf1,
-	0xa5,
-	0x2f,
-	0x49,
-	0x03,
-	0xaa,
-	0x18,
-	0xa5,
-	0x32,
-	0x7d,
-	0xc3,
-	0x80,
-	0x9d,
-	0xc3,
-	0x80,
-	0xa5,
-	0x33,
-	0x7d,
-	0xc4,
-	0x80,
-	0x9d,
-	0xc4,
-	0x80,
-	0x90,
-	0x03,
-	0xfe,
-	0xc5,
-	0x80,
-	0xe6,
-	0x2f,
-	0xc6,
-	0x6c,
-	0xf0,
-	0x03,
-	0x4c,
-	0xdd,
-	0x22,
-	0xa4,
-	0x6d,
-	0xb1,
-	0x52,
-	0xaa,
-	0xb1,
-	0x54,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x32,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x87,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x32,
-	0x90,
-	0x05,
-	0xe6,
-	0x32,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x33,
-	0xaa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x68,
-	0x85,
-	0x32,
-	0x8a,
-	0x65,
-	0x69,
-	0x85,
-	0x33,
-	0x10,
-	0x1a,
-	0x18,
-	0xa5,
-	0x38,
-	0x65,
-	0x32,
-	0xa5,
-	0x39,
-	0x65,
-	0x33,
-	0xb0,
-	0x21,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x32,
-	0x85,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x33,
-	0x85,
-	0x39,
-	0x80,
-	0x12,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x32,
-	0xa5,
-	0x39,
-	0xe5,
-	0x33,
-	0xb0,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0x32,
-	0x00,
-	0x38,
-	0x00,
-	0xa4,
-	0x6d,
-	0xb1,
-	0x56,
-	0xaa,
-	0xb1,
-	0x58,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x34,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x88,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x34,
-	0x90,
-	0x05,
-	0xe6,
-	0x34,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x35,
-	0xaa,
-	0x18,
-	0xa5,
-	0x34,
-	0x65,
-	0x6a,
-	0x85,
-	0x34,
-	0x8a,
-	0x65,
-	0x6b,
-	0x85,
-	0x35,
-	0x10,
-	0x1a,
-	0x18,
-	0xa5,
-	0x38,
-	0x65,
-	0x34,
-	0xa5,
-	0x39,
-	0x65,
-	0x35,
-	0xb0,
-	0x21,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x34,
-	0x85,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x35,
-	0x85,
-	0x39,
-	0x80,
-	0x12,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x34,
-	0xa5,
-	0x39,
-	0xe5,
-	0x35,
-	0xb0,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x00,
-	0x38,
-	0x00,
-	0xa0,
-	0x04,
-	0xa5,
-	0x6d,
-	0xd0,
-	0x07,
-	0x53,
-	0x32,
-	0x00,
-	0x8b,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0x32,
-	0x00,
-	0x8f,
-	0x00,
-	0xd0,
-	0x05,
-	0xe6,
-	0x6d,
-	0x4c,
-	0x20,
-	0x22,
-	0x38,
-	0xa5,
-	0x38,
-	0xed,
-	0x31,
-	0xbe,
-	0xa5,
-	0x39,
-	0xed,
-	0x32,
-	0xbe,
-	0x90,
-	0x09,
-	0x64,
-	0x8b,
-	0xa0,
-	0x07,
-	0x13,
-	0x8b,
-	0x00,
-	0x8c,
-	0x00,
-	0x60,
-	0xa2,
-	0x00,
-	0xa5,
-	0x94,
-	0x10,
-	0x0f,
-	0x85,
-	0x42,
-	0x38,
-	0x8a,
-	0xe5,
-	0x93,
-	0x85,
-	0x93,
-	0x8a,
-	0xe5,
-	0x94,
-	0x85,
-	0x94,
-	0x80,
-	0x08,
-	0x05,
-	0x93,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x42,
-	0xa5,
-	0x2c,
-	0xf0,
-	0x14,
-	0x45,
-	0x93,
-	0x84,
-	0x93,
-	0xa5,
-	0x94,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2c,
-	0x18,
-	0x65,
-	0x93,
-	0x85,
-	0x93,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x94,
-	0xa5,
-	0x96,
-	0x10,
-	0x0f,
-	0x85,
-	0x43,
-	0x38,
-	0x8a,
-	0xe5,
-	0x95,
-	0x85,
-	0x95,
-	0x8a,
-	0xe5,
-	0x96,
-	0x85,
-	0x96,
-	0x80,
-	0x08,
-	0x05,
-	0x95,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x43,
-	0xa5,
-	0x2d,
-	0xf0,
-	0x14,
-	0x45,
-	0x95,
-	0x84,
-	0x95,
-	0xa5,
-	0x96,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2d,
-	0x18,
-	0x65,
-	0x95,
-	0x85,
-	0x95,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x96,
-	0xa5,
-	0x8c,
-	0x10,
-	0x0f,
-	0x85,
-	0x46,
-	0x38,
-	0x8a,
-	0xe5,
-	0x8b,
-	0x85,
-	0x8b,
-	0x8a,
-	0xe5,
-	0x8c,
-	0x85,
-	0x8c,
-	0x80,
-	0x08,
-	0x05,
-	0x8b,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x46,
-	0xa5,
-	0x2c,
-	0xf0,
-	0x14,
-	0x45,
-	0x8b,
-	0x84,
-	0x8b,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2c,
-	0x18,
-	0x65,
-	0x8b,
-	0x85,
-	0x8b,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x8c,
-	0xa5,
-	0x90,
-	0x10,
-	0x0f,
-	0x85,
-	0x47,
-	0x38,
-	0x8a,
-	0xe5,
-	0x8f,
-	0x85,
-	0x8f,
-	0x8a,
-	0xe5,
-	0x90,
-	0x85,
-	0x90,
-	0x80,
-	0x08,
-	0x05,
-	0x8f,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x47,
-	0xa5,
-	0x2c,
-	0xf0,
-	0x14,
-	0x45,
-	0x8f,
-	0x84,
-	0x8f,
-	0xa5,
-	0x90,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2c,
-	0x18,
-	0x65,
-	0x8f,
-	0x85,
-	0x8f,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x90,
-	0xa5,
-	0x8e,
-	0x10,
-	0x0f,
-	0x85,
-	0x48,
-	0x38,
-	0x8a,
-	0xe5,
-	0x8d,
-	0x85,
-	0x8d,
-	0x8a,
-	0xe5,
-	0x8e,
-	0x85,
-	0x8e,
-	0x80,
-	0x08,
-	0x05,
-	0x8d,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x48,
-	0xa5,
-	0x2d,
-	0xf0,
-	0x14,
-	0x45,
-	0x8d,
-	0x84,
-	0x8d,
-	0xa5,
-	0x8e,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2d,
-	0x18,
-	0x65,
-	0x8d,
-	0x85,
-	0x8d,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x8e,
-	0xa5,
-	0x92,
-	0x10,
-	0x0f,
-	0x85,
-	0x49,
-	0x38,
-	0x8a,
-	0xe5,
-	0x91,
-	0x85,
-	0x91,
-	0x8a,
-	0xe5,
-	0x92,
-	0x85,
-	0x92,
-	0x80,
-	0x08,
-	0x05,
-	0x91,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x49,
-	0xa5,
-	0x2d,
-	0xf0,
-	0x14,
-	0x45,
-	0x91,
-	0x84,
-	0x91,
-	0xa5,
-	0x92,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2d,
-	0x18,
-	0x65,
-	0x91,
-	0x85,
-	0x91,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x92,
-	0xa4,
-	0x8a,
-	0x5a,
-	0x84,
-	0x45,
-	0xa4,
-	0x89,
-	0x5a,
-	0x84,
-	0x44,
-	0xa2,
-	0x00,
-	0x64,
-	0x30,
-	0x18,
-	0xa5,
-	0x45,
-	0x69,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0x18,
-	0xa5,
-	0x44,
-	0x69,
-	0x06,
-	0x85,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0xe6,
-	0x30,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x38,
-	0xa5,
-	0x32,
-	0xe9,
-	0x0a,
-	0x20,
-	0xad,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x30,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0x01,
-	0x85,
-	0x30,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x7a,
-	0xb9,
-	0x1b,
-	0x7d,
-	0x10,
-	0x04,
-	0xc8,
-	0x4c,
-	0xd3,
-	0x25,
-	0x7a,
-	0xb9,
-	0x2f,
-	0x7d,
-	0x10,
-	0x0c,
-	0xa6,
-	0x23,
-	0xf0,
-	0x04,
-	0x88,
-	0x4c,
-	0xce,
-	0x25,
-	0xc8,
-	0x4c,
-	0xce,
-	0x25,
-	0x60,
-	0x38,
-	0xa5,
-	0x32,
-	0xe9,
-	0x05,
-	0x85,
-	0x32,
-	0xda,
-	0x64,
-	0x2e,
-	0x64,
-	0x2f,
-	0xa6,
-	0x33,
-	0xa8,
-	0x30,
-	0x31,
-	0xc9,
-	0x0c,
-	0xb0,
-	0x2d,
-	0x8a,
-	0x30,
-	0x2a,
-	0xc9,
-	0x08,
-	0xb0,
-	0x26,
-	0xa5,
-	0x44,
-	0xd0,
-	0x09,
-	0xa5,
-	0x31,
-	0xd0,
-	0x0d,
-	0xbd,
-	0xaa,
-	0x55,
-	0x80,
-	0x17,
-	0xc9,
-	0x13,
-	0xd0,
-	0x09,
-	0xa5,
-	0x31,
-	0x10,
-	0xf3,
-	0xbd,
-	0xa2,
-	0x55,
-	0x80,
-	0x0a,
-	0x8a,
-	0x49,
-	0x0c,
-	0x18,
-	0x65,
-	0x32,
-	0xa8,
-	0xb9,
-	0xb2,
-	0x55,
-	0x85,
-	0x2e,
-	0xe8,
-	0x30,
-	0x35,
-	0xe0,
-	0x0a,
-	0xb0,
-	0x31,
-	0xa5,
-	0x32,
-	0x3a,
-	0x30,
-	0x2c,
-	0xc9,
-	0x0a,
-	0xb0,
-	0x28,
-	0xa4,
-	0x45,
-	0xd0,
-	0x0a,
-	0xaa,
-	0xa5,
-	0x30,
-	0xd0,
-	0x0e,
-	0xbd,
-	0x1c,
-	0x56,
-	0x80,
-	0x18,
-	0xc0,
-	0x0f,
-	0xd0,
-	0x0a,
-	0xaa,
-	0xa5,
-	0x30,
-	0x30,
-	0xf2,
-	0xbd,
-	0x12,
-	0x56,
-	0x80,
-	0x0a,
-	0x8a,
-	0x49,
-	0x0a,
-	0x18,
-	0x65,
-	0x32,
-	0xaa,
-	0xbd,
-	0x25,
-	0x56,
-	0x85,
-	0x2f,
-	0xfa,
-	0xa5,
-	0x2e,
-	0xd0,
-	0x03,
-	0x4c,
-	0x79,
-	0x28,
-	0xa8,
-	0x10,
-	0x05,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x36,
-	0x98,
-	0x3c,
-	0x45,
-	0x42,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x93,
-	0x85,
-	0x37,
-	0xbd,
-	0xd5,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd5,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0xb0,
-	0x04,
-	0xde,
-	0xd7,
-	0x80,
-	0x38,
-	0xa5,
-	0x94,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd7,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd7,
-	0x80,
-	0x80,
-	0x28,
-	0x45,
-	0x93,
-	0x7d,
-	0xd5,
-	0x80,
-	0x9d,
-	0xd5,
-	0x80,
-	0x98,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x90,
-	0x04,
-	0xfe,
-	0xd7,
-	0x80,
-	0x18,
-	0xa5,
-	0x94,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x98,
-	0x7d,
-	0xd7,
-	0x80,
-	0x9d,
-	0xd7,
-	0x80,
-	0xa5,
-	0x46,
-	0xf0,
-	0x69,
-	0x3c,
-	0x45,
-	0x2e,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x8b,
-	0x85,
-	0x37,
-	0xbd,
-	0x1d,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1d,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x1f,
-	0x81,
-	0x38,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1f,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1f,
-	0x81,
-	0x80,
-	0x28,
-	0x45,
-	0x8b,
-	0x7d,
-	0x1d,
-	0x81,
-	0x9d,
-	0x1d,
-	0x81,
-	0x98,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x1f,
-	0x81,
-	0x18,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x98,
-	0x7d,
-	0x1f,
-	0x81,
-	0x9d,
-	0x1f,
-	0x81,
-	0xa5,
-	0x47,
-	0xf0,
-	0x6a,
-	0x3c,
-	0x45,
-	0x2e,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x8f,
-	0x85,
-	0x37,
-	0xbd,
-	0x65,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x65,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x67,
-	0x81,
-	0x38,
-	0xa5,
-	0x90,
-	0xf0,
-	0x41,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x67,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x67,
-	0x81,
-	0x80,
-	0x29,
-	0x45,
-	0x8f,
-	0x18,
-	0x7d,
-	0x65,
-	0x81,
-	0x9d,
-	0x65,
-	0x81,
-	0x98,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x67,
-	0x81,
-	0x18,
-	0xa5,
-	0x90,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x98,
-	0x7d,
-	0x67,
-	0x81,
-	0x9d,
-	0x67,
-	0x81,
-	0xa5,
-	0x2f,
-	0xd0,
-	0x03,
-	0x4c,
-	0xcf,
-	0x29,
-	0xa8,
-	0x10,
-	0x05,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x36,
-	0x98,
-	0x3c,
-	0x45,
-	0x43,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x39,
-	0x45,
-	0x95,
-	0x85,
-	0x37,
-	0xbd,
-	0xd5,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd5,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0xb0,
-	0x04,
-	0xde,
-	0xd7,
-	0x80,
-	0x38,
-	0xa5,
-	0x96,
-	0xf0,
-	0x41,
-	0x45,
-	0x36,
-	0x38,
-	0x85,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd7,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd7,
-	0x80,
-	0x80,
-	0x28,
-	0x45,
-	0x95,
-	0x7d,
-	0xd5,
-	0x80,
-	0x9d,
-	0xd5,
-	0x80,
-	0x98,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x90,
-	0x04,
-	0xfe,
-	0xd7,
-	0x80,
-	0x18,
-	0xa5,
-	0x96,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x98,
-	0x7d,
-	0xd7,
-	0x80,
-	0x9d,
-	0xd7,
-	0x80,
-	0xa5,
-	0x48,
-	0xf0,
-	0x69,
-	0x3c,
-	0x45,
-	0x2f,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x8d,
-	0x85,
-	0x37,
-	0xbd,
-	0x1d,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1d,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x1f,
-	0x81,
-	0x38,
-	0xa5,
-	0x8e,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1f,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1f,
-	0x81,
-	0x80,
-	0x28,
-	0x45,
-	0x8d,
-	0x7d,
-	0x1d,
-	0x81,
-	0x9d,
-	0x1d,
-	0x81,
-	0x98,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x1f,
-	0x81,
-	0x18,
-	0xa5,
-	0x8e,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x98,
-	0x7d,
-	0x1f,
-	0x81,
-	0x9d,
-	0x1f,
-	0x81,
-	0xa5,
-	0x49,
-	0xf0,
-	0x69,
-	0x3c,
-	0x45,
-	0x2f,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x91,
-	0x85,
-	0x37,
-	0xbd,
-	0x65,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x65,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x67,
-	0x81,
-	0x38,
-	0xa5,
-	0x92,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x67,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x67,
-	0x81,
-	0x80,
-	0x28,
-	0x45,
-	0x91,
-	0x7d,
-	0x65,
-	0x81,
-	0x9d,
-	0x65,
-	0x81,
-	0x98,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x67,
-	0x81,
-	0x18,
-	0xa5,
-	0x92,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x98,
-	0x7d,
-	0x67,
-	0x81,
-	0x9d,
-	0x67,
-	0x81,
-	0xe8,
-	0xe8,
-	0xe8,
-	0x60,
-	0xe6,
-	0x25,
-	0x20,
-	0xdb,
-	0x2a,
-	0x20,
-	0x16,
-	0x2e,
-	0x20,
-	0xff,
-	0x2f,
-	0x20,
-	0x2e,
-	0x31,
-	0x20,
-	0x92,
-	0x34,
-	0x64,
-	0x25,
-	0x60,
-	0xa5,
-	0x41,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0x60,
-	0xa5,
-	0x34,
-	0x45,
-	0x32,
-	0x85,
-	0x37,
-	0x84,
-	0x38,
-	0xa5,
-	0x35,
-	0x45,
-	0x32,
-	0x18,
-	0x65,
-	0x38,
-	0x85,
-	0x38,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x39,
-	0xa5,
-	0x34,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x38,
-	0x85,
-	0x38,
-	0x98,
-	0x65,
-	0x39,
-	0x85,
-	0x39,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0x3a,
-	0xa5,
-	0x35,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x39,
-	0x85,
-	0x39,
-	0x98,
-	0x65,
-	0x3a,
-	0x85,
-	0x3a,
-	0xa5,
-	0x36,
-	0x45,
-	0x32,
-	0x18,
-	0x65,
-	0x39,
-	0x85,
-	0x39,
-	0x98,
-	0x65,
-	0x3a,
-	0x85,
-	0x3a,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0x3b,
-	0xa5,
-	0x36,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x3a,
-	0x85,
-	0x3a,
-	0x98,
-	0x65,
-	0x3b,
-	0x85,
-	0x3b,
-	0xa5,
-	0x33,
-	0x10,
-	0x13,
-	0x38,
-	0xa5,
-	0x39,
-	0xe5,
-	0x34,
-	0x85,
-	0x39,
-	0xa5,
-	0x3a,
-	0xe5,
-	0x35,
-	0x85,
-	0x3a,
-	0xa5,
-	0x3b,
-	0xe5,
-	0x36,
-	0x85,
-	0x3b,
-	0x64,
-	0x32,
-	0xa5,
-	0x37,
-	0x29,
-	0x0f,
-	0xc9,
-	0x08,
-	0xd0,
-	0x02,
-	0xe6,
-	0x32,
-	0xa2,
-	0x04,
-	0xa5,
-	0x3b,
-	0xc9,
-	0x80,
-	0x66,
-	0x3b,
-	0x66,
-	0x3a,
-	0x66,
-	0x39,
-	0x66,
-	0x38,
-	0x66,
-	0x37,
-	0xca,
-	0xd0,
-	0xef,
-	0xa5,
-	0x3b,
-	0xf0,
-	0x22,
-	0x10,
-	0x13,
-	0x1a,
-	0xd0,
-	0x04,
-	0xa5,
-	0x3a,
-	0x30,
-	0x1d,
-	0x64,
-	0x3e,
-	0x64,
-	0x3f,
-	0x64,
-	0x40,
-	0xa9,
-	0x80,
-	0x85,
-	0x41,
-	0x18,
-	0x60,
-	0xa9,
-	0xff,
-	0x85,
-	0x3e,
-	0x85,
-	0x3f,
-	0x85,
-	0x40,
-	0x4a,
-	0x85,
-	0x41,
-	0x18,
-	0x60,
-	0xa5,
-	0x3a,
-	0x30,
-	0xef,
-	0xa0,
-	0x04,
-	0x53,
-	0x37,
-	0x00,
-	0x3e,
-	0x00,
-	0xa5,
-	0x32,
-	0xd0,
-	0x03,
-	0x2a,
-	0x1a,
-	0x6a,
-	0x60,
-	0xa9,
-	0x80,
-	0x38,
-	0xed,
-	0x17,
-	0x6b,
-	0x85,
-	0x74,
-	0x64,
-	0x6d,
-	0xa0,
-	0x09,
-	0x53,
-	0xc3,
-	0x80,
-	0x7b,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0x0d,
-	0x7d,
-	0x32,
-	0x00,
-	0xad,
-	0x07,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x75,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x76,
-	0xad,
-	0x08,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x77,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x78,
-	0xad,
-	0x09,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x79,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x7a,
-	0x64,
-	0x84,
-	0x64,
-	0x85,
-	0x64,
-	0x86,
-	0xa6,
-	0x6d,
-	0xb5,
-	0xdc,
-	0xf0,
-	0x07,
-	0xa9,
-	0x80,
-	0x85,
-	0x86,
-	0x4c,
-	0x7c,
-	0x2d,
-	0x38,
-	0xa5,
-	0x7b,
-	0xe5,
-	0x7e,
-	0x85,
-	0x7b,
-	0xa5,
-	0x7c,
-	0xe5,
-	0x7f,
-	0x85,
-	0x7c,
-	0xa5,
-	0x7d,
-	0xe5,
-	0x80,
-	0xa8,
-	0xa5,
-	0x7c,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xf0,
-	0x12,
-	0x98,
-	0x30,
-	0x09,
-	0xa9,
-	0xff,
-	0x85,
-	0x7b,
-	0x4a,
-	0x85,
-	0x7c,
-	0x80,
-	0x06,
-	0xa9,
-	0x80,
-	0x85,
-	0x7c,
-	0x64,
-	0x7b,
-	0x38,
-	0xa5,
-	0x81,
-	0xe5,
-	0x7e,
-	0x85,
-	0x81,
-	0xa5,
-	0x82,
-	0xe5,
-	0x7f,
-	0x85,
-	0x82,
-	0xa5,
-	0x83,
-	0xe5,
-	0x80,
-	0xa8,
-	0xa5,
-	0x82,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xf0,
-	0x12,
-	0x98,
-	0x30,
-	0x09,
-	0xa9,
-	0xff,
-	0x85,
-	0x81,
-	0x4a,
-	0x85,
-	0x82,
-	0x80,
-	0x06,
-	0xa9,
-	0x80,
-	0x85,
-	0x82,
-	0x64,
-	0x81,
-	0xa0,
-	0x02,
-	0x53,
-	0x81,
-	0x00,
-	0x34,
-	0x00,
-	0x20,
-	0x50,
-	0x39,
-	0x20,
-	0xe7,
-	0x29,
-	0x90,
-	0x0e,
-	0xe6,
-	0x3e,
-	0xd0,
-	0x0a,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x06,
-	0xe6,
-	0x40,
-	0xd0,
-	0x02,
-	0xe6,
-	0x41,
-	0xa2,
-	0x00,
-	0xa5,
-	0x7b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x42,
-	0xa5,
-	0x7c,
-	0x10,
-	0x01,
-	0xca,
-	0x65,
-	0x3f,
-	0x85,
-	0x43,
-	0x8a,
-	0x65,
-	0x40,
-	0x85,
-	0x44,
-	0x8a,
-	0x65,
-	0x41,
-	0x85,
-	0x45,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x7b,
-	0x85,
-	0x34,
-	0xa9,
-	0x00,
-	0xe5,
-	0x7c,
-	0x85,
-	0x35,
-	0xa5,
-	0x6d,
-	0x49,
-	0x07,
-	0xaa,
-	0xda,
-	0xbd,
-	0x0f,
-	0x7d,
-	0x85,
-	0x32,
-	0xbd,
-	0x10,
-	0x7d,
-	0x85,
-	0x33,
-	0xa5,
-	0x7c,
-	0x10,
-	0x05,
-	0x20,
-	0x93,
-	0x39,
-	0x80,
-	0x03,
-	0x20,
-	0x50,
-	0x39,
-	0xa0,
-	0x04,
-	0x53,
-	0x3e,
-	0x00,
-	0x46,
-	0x00,
-	0xfa,
-	0xbd,
-	0x11,
-	0x7d,
-	0x85,
-	0x34,
-	0xbd,
-	0x12,
-	0x7d,
-	0x85,
-	0x35,
-	0xbd,
-	0x13,
-	0x7d,
-	0x85,
-	0x36,
-	0xa0,
-	0x02,
-	0x53,
-	0x81,
-	0x00,
-	0x32,
-	0x00,
-	0x20,
-	0x12,
-	0x2a,
-	0xa5,
-	0x46,
-	0xe5,
-	0x3e,
-	0x85,
-	0x46,
-	0xa5,
-	0x47,
-	0xe5,
-	0x3f,
-	0x85,
-	0x47,
-	0xa5,
-	0x48,
-	0xe5,
-	0x40,
-	0x85,
-	0x48,
-	0xa2,
-	0x00,
-	0xa5,
-	0x49,
-	0x10,
-	0x01,
-	0xca,
-	0xe5,
-	0x41,
-	0x85,
-	0x49,
-	0x8a,
-	0xa6,
-	0x41,
-	0x30,
-	0x04,
-	0xe9,
-	0x00,
-	0x80,
-	0x02,
-	0xe9,
-	0xff,
-	0x10,
-	0x0f,
-	0xc9,
-	0xff,
-	0xd0,
-	0x04,
-	0xa5,
-	0x49,
-	0x30,
-	0x19,
-	0xa9,
-	0x80,
-	0x85,
-	0x49,
-	0x0a,
-	0x80,
-	0x0c,
-	0xd0,
-	0x04,
-	0xa5,
-	0x49,
-	0x10,
-	0x0c,
-	0xa9,
-	0x7f,
-	0x85,
-	0x49,
-	0xa9,
-	0xff,
-	0x85,
-	0x48,
-	0x85,
-	0x47,
-	0x85,
-	0x46,
-	0xa9,
-	0x00,
-	0xa8,
-	0x38,
-	0xe5,
-	0x46,
-	0x85,
-	0x46,
-	0x98,
-	0xe5,
-	0x47,
-	0x85,
-	0x47,
-	0x98,
-	0xe5,
-	0x48,
-	0x85,
-	0x48,
-	0x98,
-	0xe5,
-	0x49,
-	0x85,
-	0x49,
-	0xa5,
-	0x45,
-	0x30,
-	0x32,
-	0x06,
-	0x42,
-	0x26,
-	0x43,
-	0x26,
-	0x44,
-	0x26,
-	0x45,
-	0xa5,
-	0x42,
-	0x05,
-	0x43,
-	0x05,
-	0x44,
-	0x05,
-	0x45,
-	0xd0,
-	0x06,
-	0x64,
-	0x32,
-	0x64,
-	0x33,
-	0x80,
-	0x34,
-	0xa5,
-	0x49,
-	0x30,
-	0x18,
-	0xa5,
-	0x45,
-	0x30,
-	0x14,
-	0x06,
-	0x42,
-	0x26,
-	0x43,
-	0x26,
-	0x44,
-	0x26,
-	0x45,
-	0x06,
-	0x46,
-	0x26,
-	0x47,
-	0x26,
-	0x48,
-	0x26,
-	0x49,
-	0x80,
-	0xe6,
-	0x80,
-	0x6e,
-	0xa0,
-	0x02,
-	0x53,
-	0x48,
-	0x00,
-	0x32,
-	0x00,
-	0x53,
-	0x44,
-	0x00,
-	0x34,
-	0x00,
-	0xa5,
-	0x34,
-	0x05,
-	0x35,
-	0xd0,
-	0x03,
-	0x4c,
-	0x3d,
-	0x2d,
-	0x20,
-	0x2f,
-	0x39,
-	0x38,
-	0xa5,
-	0x75,
-	0xe5,
-	0x32,
-	0xa5,
-	0x76,
-	0xe5,
-	0x33,
-	0xb0,
-	0x4b,
-	0x38,
-	0xa5,
-	0x32,
-	0xe5,
-	0x79,
-	0xa5,
-	0x33,
-	0xe5,
-	0x7a,
-	0xb0,
-	0x40,
-	0x38,
-	0xa5,
-	0x32,
-	0xe5,
-	0x77,
-	0xa5,
-	0x33,
-	0xe5,
-	0x78,
-	0xb0,
-	0x62,
-	0xa0,
-	0x02,
-	0x53,
-	0x77,
-	0x00,
-	0x34,
-	0x00,
-	0x38,
-	0xa5,
-	0x77,
-	0xe5,
-	0x32,
-	0xaa,
-	0x64,
-	0x32,
-	0xa5,
-	0x78,
-	0xe5,
-	0x33,
-	0x86,
-	0x33,
-	0x4a,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x4a,
-	0x90,
-	0x08,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x20,
-	0x2f,
-	0x39,
-	0xa5,
-	0x32,
-	0x85,
-	0x84,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0x84,
-	0x85,
-	0x85,
-	0x80,
-	0x66,
-	0xa2,
-	0x00,
-	0xa5,
-	0x82,
-	0x10,
-	0x01,
-	0xca,
-	0x86,
-	0x83,
-	0xa2,
-	0x00,
-	0xa5,
-	0x7c,
-	0x10,
-	0x01,
-	0xca,
-	0x86,
-	0x7d,
-	0x38,
-	0xa5,
-	0x81,
-	0xe5,
-	0x7b,
-	0xa5,
-	0x82,
-	0xe5,
-	0x7c,
-	0xa5,
-	0x83,
-	0xe5,
-	0x7d,
-	0x10,
-	0x06,
-	0xa9,
-	0x80,
-	0x85,
-	0x86,
-	0x80,
-	0x3f,
-	0xa9,
-	0x80,
-	0x85,
-	0x84,
-	0x80,
-	0x39,
-	0x38,
-	0xa5,
-	0x79,
-	0xe5,
-	0x77,
-	0x85,
-	0x34,
-	0xa5,
-	0x7a,
-	0xe5,
-	0x78,
-	0x85,
-	0x35,
-	0x38,
-	0xa5,
-	0x79,
-	0xe5,
-	0x32,
-	0xaa,
-	0x64,
-	0x32,
-	0xa5,
-	0x7a,
-	0xe5,
-	0x33,
-	0x86,
-	0x33,
-	0x4a,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x4a,
-	0x90,
-	0x08,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x20,
-	0x2f,
-	0x39,
-	0xa5,
-	0x32,
-	0x85,
-	0x85,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0x85,
-	0x85,
-	0x86,
-	0x64,
-	0x2e,
-	0x64,
-	0x6c,
-	0xa6,
-	0x6c,
-	0xb5,
-	0x84,
-	0x45,
-	0x74,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0xa5,
-	0x6d,
-	0x49,
-	0x03,
-	0x18,
-	0x65,
-	0x6c,
-	0xaa,
-	0xbd,
-	0x79,
-	0x6b,
-	0x4d,
-	0x17,
-	0x6b,
-	0x18,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x65,
-	0x33,
-	0x06,
-	0x32,
-	0x2a,
-	0xc5,
-	0x2e,
-	0x90,
-	0x06,
-	0xf0,
-	0x04,
-	0x85,
-	0x2e,
-	0x86,
-	0x2f,
-	0x9d,
-	0x7f,
-	0x6b,
-	0xe6,
-	0x6c,
-	0xa5,
-	0x6c,
-	0xc9,
-	0x03,
-	0xd0,
-	0xc8,
-	0x38,
-	0xa9,
-	0x80,
-	0xfd,
-	0x7d,
-	0x6b,
-	0xfd,
-	0x7e,
-	0x6b,
-	0xfd,
-	0x7f,
-	0x6b,
-	0xf0,
-	0x09,
-	0xa6,
-	0x2f,
-	0x18,
-	0x7d,
-	0x7f,
-	0x6b,
-	0x9d,
-	0x7f,
-	0x6b,
-	0xe6,
-	0x6d,
-	0xa5,
-	0x6d,
-	0xc9,
-	0x02,
-	0xf0,
-	0x3e,
-	0xa0,
-	0x09,
-	0x53,
-	0xcc,
-	0x80,
-	0x7b,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0x14,
-	0x7d,
-	0x32,
-	0x00,
-	0xad,
-	0x0a,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x01,
-	0x7d,
-	0x85,
-	0x75,
-	0xbd,
-	0x02,
-	0x7d,
-	0x85,
-	0x76,
-	0xad,
-	0x0b,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x01,
-	0x7d,
-	0x85,
-	0x77,
-	0xbd,
-	0x02,
-	0x7d,
-	0x85,
-	0x78,
-	0xad,
-	0x0c,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x01,
-	0x7d,
-	0x85,
-	0x79,
-	0xbd,
-	0x02,
-	0x7d,
-	0x85,
-	0x7a,
-	0x4c,
-	0x20,
-	0x2b,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x33,
-	0xbe,
-	0x36,
-	0x00,
-	0x53,
-	0x35,
-	0xbe,
-	0x38,
-	0x00,
-	0xa0,
-	0x00,
-	0xfc,
-	0xbd,
-	0xd5,
-	0x80,
-	0x0a,
-	0xbd,
-	0xd6,
-	0x80,
-	0x69,
-	0x00,
-	0x99,
-	0xd5,
-	0x80,
-	0xbd,
-	0xd7,
-	0x80,
-	0x69,
-	0x00,
-	0x99,
-	0xd6,
-	0x80,
-	0xbd,
-	0x1d,
-	0x81,
-	0x0a,
-	0xbd,
-	0x1e,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x1d,
-	0x81,
-	0xbd,
-	0x1f,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x1e,
-	0x81,
-	0xbd,
-	0x65,
-	0x81,
-	0x0a,
-	0xbd,
-	0x66,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x65,
-	0x81,
-	0xbd,
-	0x67,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x66,
-	0x81,
-	0xc8,
-	0xc8,
-	0xe8,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x48,
-	0xd0,
-	0xbb,
-	0xa9,
-	0x62,
-	0x85,
-	0x50,
-	0xa9,
-	0x53,
-	0x85,
-	0x51,
-	0x64,
-	0x2e,
-	0xa2,
-	0x00,
-	0x64,
-	0x3e,
-	0x64,
-	0x3f,
-	0x64,
-	0x40,
-	0x64,
-	0x42,
-	0x64,
-	0x43,
-	0x64,
-	0x44,
-	0x64,
-	0x46,
-	0x64,
-	0x47,
-	0x64,
-	0x48,
-	0xb2,
-	0x50,
-	0x85,
-	0x2f,
-	0x5d,
-	0xd5,
-	0x80,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xd6,
-	0x80,
-	0xf0,
-	0x12,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x40,
-	0xa5,
-	0x2f,
-	0x5d,
-	0x1d,
-	0x81,
-	0x18,
-	0x65,
-	0x42,
-	0x85,
-	0x42,
-	0x98,
-	0x65,
-	0x43,
-	0x85,
-	0x43,
-	0x90,
-	0x03,
-	0xe6,
-	0x44,
-	0x18,
-	0xbd,
-	0x1e,
-	0x81,
-	0xf0,
-	0x12,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x43,
-	0x85,
-	0x43,
-	0x98,
-	0x65,
-	0x44,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x44,
-	0xa5,
-	0x2f,
-	0x5d,
-	0x65,
-	0x81,
-	0x18,
-	0x65,
-	0x46,
-	0x85,
-	0x46,
-	0x98,
-	0x65,
-	0x47,
-	0x85,
-	0x47,
-	0x90,
-	0x03,
-	0xe6,
-	0x48,
-	0x18,
-	0xbd,
-	0x66,
-	0x81,
-	0xf0,
-	0x12,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x47,
-	0x85,
-	0x47,
-	0x98,
-	0x65,
-	0x48,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x48,
-	0xe6,
-	0x50,
-	0xd0,
-	0x02,
-	0xe6,
-	0x51,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x30,
-	0xf0,
-	0x03,
-	0x4c,
-	0x88,
-	0x2e,
-	0xa6,
-	0x2e,
-	0x06,
-	0x3e,
-	0x26,
-	0x3f,
-	0x26,
-	0x40,
-	0x06,
-	0x3e,
-	0xa9,
-	0x00,
-	0x65,
-	0x3f,
-	0x9d,
-	0xad,
-	0x81,
-	0xa9,
-	0x00,
-	0x65,
-	0x40,
-	0x9d,
-	0xae,
-	0x81,
-	0x06,
-	0x42,
-	0x26,
-	0x43,
-	0x26,
-	0x44,
-	0x06,
-	0x42,
-	0xa9,
-	0x00,
-	0x65,
-	0x43,
-	0x85,
-	0x42,
-	0xa9,
-	0x00,
-	0x65,
-	0x44,
-	0x85,
-	0x43,
-	0x38,
-	0xa5,
-	0x42,
-	0xe5,
-	0x38,
-	0xa5,
-	0x43,
-	0xe5,
-	0x39,
-	0x30,
-	0x06,
-	0xa5,
-	0x38,
-	0xa4,
-	0x39,
-	0x80,
-	0x15,
-	0x38,
-	0xa5,
-	0x42,
-	0xe5,
-	0x36,
-	0xa5,
-	0x43,
-	0xe5,
-	0x37,
-	0x30,
-	0x06,
-	0xa5,
-	0x42,
-	0xa4,
-	0x43,
-	0x80,
-	0x04,
-	0xa5,
-	0x36,
-	0xa4,
-	0x37,
-	0x9d,
-	0xdf,
-	0x81,
-	0x98,
-	0x9d,
-	0xe0,
-	0x81,
-	0x06,
-	0x46,
-	0x26,
-	0x47,
-	0x26,
-	0x48,
-	0x06,
-	0x46,
-	0xa9,
-	0x00,
-	0x65,
-	0x47,
-	0x85,
-	0x46,
-	0xa9,
-	0x00,
-	0x65,
-	0x48,
-	0x85,
-	0x47,
-	0x38,
-	0xa5,
-	0x46,
-	0xe5,
-	0x38,
-	0xa5,
-	0x47,
-	0xe5,
-	0x39,
-	0x30,
-	0x06,
-	0xa5,
-	0x38,
-	0xa4,
-	0x39,
-	0x80,
-	0x15,
-	0x38,
-	0xa5,
-	0x46,
-	0xe5,
-	0x36,
-	0xa5,
-	0x47,
-	0xe5,
-	0x37,
-	0x30,
-	0x06,
-	0xa5,
-	0x46,
-	0xa4,
-	0x47,
-	0x80,
-	0x04,
-	0xa5,
-	0x36,
-	0xa4,
-	0x37,
-	0x9d,
-	0x11,
-	0x82,
-	0x98,
-	0x9d,
-	0x12,
-	0x82,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x18,
-	0xd0,
-	0x3b,
-	0x9e,
-	0xad,
-	0x81,
-	0x9e,
-	0xae,
-	0x81,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x39,
-	0x30,
-	0x06,
-	0xa5,
-	0x38,
-	0xa4,
-	0x39,
-	0x80,
-	0x15,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x36,
-	0xa9,
-	0x00,
-	0xe5,
-	0x37,
-	0x30,
-	0x06,
-	0xa9,
-	0x00,
-	0xa0,
-	0x00,
-	0x80,
-	0x04,
-	0xa5,
-	0x36,
-	0xa4,
-	0x37,
-	0x9d,
-	0xdf,
-	0x81,
-	0x9d,
-	0x11,
-	0x82,
-	0x98,
-	0x9d,
-	0xe0,
-	0x81,
-	0x9d,
-	0x12,
-	0x82,
-	0xe8,
-	0xe8,
-	0x86,
-	0x2e,
-	0xe0,
-	0x32,
-	0xb0,
-	0x03,
-	0x4c,
-	0x74,
-	0x2e,
-	0x60,
-	0xa5,
-	0x72,
-	0x64,
-	0x38,
-	0x64,
-	0x39,
-	0x05,
-	0x73,
-	0xd0,
-	0x05,
-	0x64,
-	0x32,
-	0x64,
-	0x33,
-	0x60,
-	0x64,
-	0x2f,
-	0x64,
-	0x3e,
-	0x64,
-	0x3f,
-	0x64,
-	0x40,
-	0xa2,
-	0x00,
-	0xa0,
-	0x00,
-	0xa5,
-	0x2f,
-	0xf0,
-	0x05,
-	0xc9,
-	0x04,
-	0xf0,
-	0x01,
-	0xc8,
-	0x84,
-	0x30,
-	0x64,
-	0x2e,
-	0xa4,
-	0x30,
-	0xa5,
-	0x2e,
-	0xf0,
-	0x05,
-	0xc9,
-	0x04,
-	0xf0,
-	0x01,
-	0xc8,
-	0xbd,
-	0xae,
-	0x81,
-	0x85,
-	0x31,
-	0xbd,
-	0xad,
-	0x81,
-	0xc0,
-	0x01,
-	0x90,
-	0x08,
-	0xf0,
-	0x03,
-	0x0a,
-	0x26,
-	0x31,
-	0x0a,
-	0x26,
-	0x31,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0xa5,
-	0x31,
-	0xa8,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x30,
-	0x06,
-	0x90,
-	0x08,
-	0xe6,
-	0x40,
-	0x80,
-	0x04,
-	0xb0,
-	0x02,
-	0xc6,
-	0x40,
-	0xe8,
-	0xe8,
-	0xa5,
-	0x2e,
-	0x1a,
-	0x85,
-	0x2e,
-	0xc9,
-	0x05,
-	0xd0,
-	0xbd,
-	0xa5,
-	0x2f,
-	0x1a,
-	0x85,
-	0x2f,
-	0xc9,
-	0x05,
-	0xd0,
-	0xa5,
-	0xa2,
-	0x06,
-	0xa5,
-	0x40,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xca,
-	0xd0,
-	0xf6,
-	0xa5,
-	0x3f,
-	0x85,
-	0x39,
-	0xa5,
-	0x3e,
-	0x90,
-	0x05,
-	0x1a,
-	0xd0,
-	0x02,
-	0xe6,
-	0x39,
-	0x85,
-	0x38,
-	0xa5,
-	0x72,
-	0x85,
-	0x34,
-	0xa6,
-	0x73,
-	0x86,
-	0x35,
-	0xa6,
-	0x70,
-	0x10,
-	0x30,
-	0xa0,
-	0x00,
-	0x98,
-	0x38,
-	0xe5,
-	0x6e,
-	0x85,
-	0x32,
-	0x98,
-	0xe5,
-	0x6f,
-	0x85,
-	0x33,
-	0x98,
-	0xe5,
-	0x70,
-	0xf0,
-	0x0c,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x4a,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0xaa,
-	0xd0,
-	0xf4,
-	0x20,
-	0x2f,
-	0x39,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x38,
-	0x85,
-	0x32,
-	0xa5,
-	0x33,
-	0x65,
-	0x39,
-	0x85,
-	0x33,
-	0x80,
-	0x26,
-	0x8a,
-	0xf0,
-	0x0c,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x4a,
-	0x66,
-	0x6f,
-	0x66,
-	0x6e,
-	0xaa,
-	0xd0,
-	0xf4,
-	0xa0,
-	0x02,
-	0x53,
-	0x6e,
-	0x00,
-	0x32,
-	0x00,
-	0x20,
-	0x2f,
-	0x39,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x32,
-	0x85,
-	0x32,
-	0xa5,
-	0x39,
-	0xe5,
-	0x33,
-	0x85,
-	0x33,
-	0xa2,
-	0x00,
-	0x38,
-	0xbd,
-	0xad,
-	0x81,
-	0xe5,
-	0x32,
-	0xa8,
-	0xbd,
-	0xae,
-	0x81,
-	0xe5,
-	0x33,
-	0x30,
-	0x10,
-	0xc9,
-	0x03,
-	0x90,
-	0x1a,
-	0xd0,
-	0x04,
-	0xc0,
-	0xff,
-	0x90,
-	0x14,
-	0xa0,
-	0xff,
-	0xa9,
-	0x03,
-	0x80,
-	0x0e,
-	0xc9,
-	0xfc,
-	0x90,
-	0x06,
-	0xd0,
-	0x08,
-	0xc0,
-	0x00,
-	0xb0,
-	0x04,
-	0xa0,
-	0x00,
-	0xa9,
-	0xfc,
-	0x9d,
-	0xae,
-	0x81,
-	0x98,
-	0x9d,
-	0xad,
-	0x81,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x32,
-	0xd0,
-	0xc7,
-	0x60,
-	0x20,
-	0x6e,
-	0x31,
-	0xa9,
-	0xad,
-	0x85,
-	0x4a,
-	0xa9,
-	0x81,
-	0x85,
-	0x4b,
-	0x20,
-	0xc1,
-	0x32,
-	0xa0,
-	0x32,
-	0x53,
-	0x43,
-	0x82,
-	0xad,
-	0x81,
-	0xa9,
-	0xdf,
-	0x85,
-	0x4a,
-	0xa9,
-	0x81,
-	0x85,
-	0x4b,
-	0x20,
-	0xc1,
-	0x32,
-	0x20,
-	0xfe,
-	0x33,
-	0xa0,
-	0x32,
-	0x53,
-	0x43,
-	0x82,
-	0xdf,
-	0x81,
-	0xa9,
-	0x11,
-	0x85,
-	0x4a,
-	0xa9,
-	0x82,
-	0x85,
-	0x4b,
-	0x20,
-	0xc1,
-	0x32,
-	0x20,
-	0xfe,
-	0x33,
-	0xa0,
-	0x32,
-	0x53,
-	0x43,
-	0x82,
-	0x11,
-	0x82,
-	0x60,
-	0xa5,
-	0x28,
-	0x49,
-	0x04,
-	0x85,
-	0x2e,
-	0x38,
-	0xa5,
-	0x29,
-	0x1a,
-	0xe5,
-	0x28,
-	0x49,
-	0x14,
-	0x85,
-	0x38,
-	0x84,
-	0x39,
-	0x64,
-	0x3a,
-	0x64,
-	0x3b,
-	0xa2,
-	0x00,
-	0xa5,
-	0x3a,
-	0x85,
-	0x32,
-	0xa5,
-	0x3b,
-	0x85,
-	0x33,
-	0xa9,
-	0x14,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0xda,
-	0x20,
-	0x0b,
-	0x39,
-	0xfa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x2e,
-	0x9d,
-	0x75,
-	0x82,
-	0x18,
-	0xa5,
-	0x3a,
-	0x65,
-	0x38,
-	0x85,
-	0x3a,
-	0xa5,
-	0x3b,
-	0x65,
-	0x39,
-	0x85,
-	0x3b,
-	0xe8,
-	0xe0,
-	0x05,
-	0xd0,
-	0xd3,
-	0xbd,
-	0x74,
-	0x82,
-	0x1a,
-	0x9d,
-	0x75,
-	0x82,
-	0xa5,
-	0x26,
-	0x49,
-	0x04,
-	0x85,
-	0x2e,
-	0x38,
-	0xa5,
-	0x27,
-	0x1a,
-	0xe5,
-	0x26,
-	0x49,
-	0x10,
-	0x85,
-	0x38,
-	0x84,
-	0x39,
-	0x64,
-	0x3a,
-	0x64,
-	0x3b,
-	0xa2,
-	0x00,
-	0xa5,
-	0x3a,
-	0x85,
-	0x32,
-	0xa5,
-	0x3b,
-	0x85,
-	0x33,
-	0xa9,
-	0x10,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0xda,
-	0x20,
-	0x0b,
-	0x39,
-	0xfa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x2e,
-	0x9d,
-	0x7b,
-	0x82,
-	0x18,
-	0xa5,
-	0x3a,
-	0x65,
-	0x38,
-	0x85,
-	0x3a,
-	0xa5,
-	0x3b,
-	0x65,
-	0x39,
-	0x85,
-	0x3b,
-	0xe8,
-	0xe0,
-	0x05,
-	0xd0,
-	0xd3,
-	0xbd,
-	0x7a,
-	0x82,
-	0x1a,
-	0x9d,
-	0x7b,
-	0x82,
-	0x60,
-	0xa5,
-	0x2e,
-	0xa2,
-	0x00,
-	0xe8,
-	0xdd,
-	0x75,
-	0x82,
-	0xb0,
-	0xfa,
-	0xca,
-	0x8a,
-	0x0a,
-	0x18,
-	0x60,
-	0xa5,
-	0x2f,
-	0xa2,
-	0x00,
-	0xe8,
-	0xdd,
-	0x7b,
-	0x82,
-	0xb0,
-	0xfa,
-	0xca,
-	0x8a,
-	0x0a,
-	0x18,
-	0x60,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x38,
-	0xa5,
-	0x2e,
-	0xfd,
-	0x75,
-	0x82,
-	0x85,
-	0x31,
-	0xf0,
-	0x0f,
-	0xc8,
-	0x38,
-	0xbd,
-	0x76,
-	0x82,
-	0xfd,
-	0x75,
-	0x82,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x20,
-	0x6f,
-	0x32,
-	0x60,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x38,
-	0xa5,
-	0x2f,
-	0xfd,
-	0x7b,
-	0x82,
-	0x85,
-	0x31,
-	0xf0,
-	0x13,
-	0x18,
-	0x98,
-	0x69,
-	0x09,
-	0xa8,
-	0x38,
-	0xbd,
-	0x7c,
-	0x82,
-	0xfd,
-	0x7b,
-	0x82,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x20,
-	0x6f,
-	0x32,
-	0x60,
-	0x38,
-	0xb1,
-	0x4a,
-	0xe5,
-	0x38,
-	0x85,
-	0x32,
-	0xc8,
-	0xb1,
-	0x4a,
-	0xa0,
-	0x00,
-	0xe5,
-	0x39,
-	0x85,
-	0x33,
-	0x10,
-	0x0c,
-	0x38,
-	0x98,
-	0xe5,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0xe5,
-	0x33,
-	0x85,
-	0x33,
-	0xc8,
-	0x5a,
-	0xa5,
-	0x32,
-	0x45,
-	0x31,
-	0x85,
-	0x32,
-	0x84,
-	0x4c,
-	0xa5,
-	0x33,
-	0x45,
-	0x31,
-	0x18,
-	0x65,
-	0x4c,
-	0x85,
-	0x33,
-	0x20,
-	0x2f,
-	0x39,
-	0x7a,
-	0xf0,
-	0x0e,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x32,
-	0x85,
-	0x38,
-	0xa5,
-	0x39,
-	0xe5,
-	0x33,
-	0x85,
-	0x39,
-	0x60,
-	0x18,
-	0xa5,
-	0x38,
-	0x65,
-	0x32,
-	0x85,
-	0x38,
-	0xa5,
-	0x39,
-	0x65,
-	0x33,
-	0x85,
-	0x39,
-	0x60,
-	0x64,
-	0x30,
-	0x64,
-	0x2f,
-	0x64,
-	0x2e,
-	0xa5,
-	0x2f,
-	0xcd,
-	0x7b,
-	0x82,
-	0xb0,
-	0x33,
-	0xa5,
-	0x2e,
-	0xcd,
-	0x75,
-	0x82,
-	0xb0,
-	0x0d,
-	0xb2,
-	0x4a,
-	0x85,
-	0x38,
-	0xa0,
-	0x01,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x79,
-	0x82,
-	0xf0,
-	0x10,
-	0x90,
-	0x0e,
-	0xa0,
-	0x08,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0x20,
-	0x07,
-	0x32,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x7f,
-	0x82,
-	0xf0,
-	0x38,
-	0x90,
-	0x36,
-	0xa5,
-	0x2e,
-	0xcd,
-	0x75,
-	0x82,
-	0xb0,
-	0x0e,
-	0xa0,
-	0x28,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x79,
-	0x82,
-	0xf0,
-	0x10,
-	0x90,
-	0x0e,
-	0xa0,
-	0x30,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0x20,
-	0x07,
-	0x32,
-	0x69,
-	0x28,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0x4c,
-	0xd1,
-	0x33,
-	0xa5,
-	0x2e,
-	0xcd,
-	0x75,
-	0x82,
-	0xb0,
-	0x0c,
-	0x20,
-	0x16,
-	0x32,
-	0x49,
-	0x05,
-	0xa8,
-	0x20,
-	0x48,
-	0x32,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x79,
-	0x82,
-	0xf0,
-	0x0f,
-	0x90,
-	0x0d,
-	0x20,
-	0x16,
-	0x32,
-	0x49,
-	0x05,
-	0x69,
-	0x08,
-	0xa8,
-	0x20,
-	0x48,
-	0x32,
-	0x80,
-	0x6c,
-	0x20,
-	0x16,
-	0x32,
-	0x86,
-	0x3d,
-	0x49,
-	0x05,
-	0x85,
-	0x4d,
-	0x20,
-	0x07,
-	0x32,
-	0x86,
-	0x3c,
-	0x65,
-	0x4d,
-	0x85,
-	0x4d,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0xa6,
-	0x3d,
-	0x38,
-	0xa5,
-	0x2f,
-	0xfd,
-	0x7b,
-	0x82,
-	0xf0,
-	0x4c,
-	0xa6,
-	0x31,
-	0xd0,
-	0x09,
-	0xa6,
-	0x3d,
-	0xa4,
-	0x4d,
-	0x20,
-	0x48,
-	0x32,
-	0x80,
-	0x3f,
-	0x48,
-	0xa5,
-	0x38,
-	0x85,
-	0x3a,
-	0xa5,
-	0x39,
-	0x85,
-	0x3b,
-	0xa6,
-	0x3c,
-	0x18,
-	0xa5,
-	0x4d,
-	0x69,
-	0x0a,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0xa6,
-	0x3d,
-	0x38,
-	0xbd,
-	0x7c,
-	0x82,
-	0xfd,
-	0x7b,
-	0x82,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x68,
-	0x85,
-	0x31,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x3a,
-	0x85,
-	0x32,
-	0xa5,
-	0x39,
-	0xe5,
-	0x3b,
-	0x85,
-	0x33,
-	0xa0,
-	0x02,
-	0x53,
-	0x3a,
-	0x00,
-	0x38,
-	0x00,
-	0xa0,
-	0x00,
-	0xa5,
-	0x33,
-	0x20,
-	0x7f,
-	0x32,
-	0xa6,
-	0x30,
-	0xa5,
-	0x38,
-	0x9d,
-	0x43,
-	0x82,
-	0xa5,
-	0x39,
-	0xe8,
-	0x9d,
-	0x43,
-	0x82,
-	0xe8,
-	0x86,
-	0x30,
-	0x18,
-	0xa5,
-	0x2e,
-	0x69,
-	0x14,
-	0x85,
-	0x2e,
-	0xc9,
-	0x51,
-	0xb0,
-	0x03,
-	0x4c,
-	0xc7,
-	0x32,
-	0x18,
-	0xa5,
-	0x2f,
-	0x69,
-	0x10,
-	0x85,
-	0x2f,
-	0xc9,
-	0x41,
-	0xb0,
-	0x03,
-	0x4c,
-	0xc5,
-	0x32,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x5b,
-	0x82,
-	0x32,
-	0x00,
-	0xa2,
-	0x00,
-	0x38,
-	0xbd,
-	0x43,
-	0x82,
-	0xe5,
-	0x32,
-	0x9d,
-	0x43,
-	0x82,
-	0xe8,
-	0xbd,
-	0x43,
-	0x82,
-	0xe5,
-	0x33,
-	0x9d,
-	0x43,
-	0x82,
-	0xe8,
-	0xe0,
-	0x32,
-	0xd0,
-	0xe9,
-	0x60,
-	0x85,
-	0x4c,
-	0x86,
-	0x4d,
-	0xa2,
-	0x00,
-	0xdc,
-	0xb1,
-	0x4a,
-	0x45,
-	0x2e,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xdc,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x48,
-	0x45,
-	0x2e,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x40,
-	0xdc,
-	0xb1,
-	0x4c,
-	0x45,
-	0x2f,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xdc,
-	0xc8,
-	0xb1,
-	0x4c,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x40,
-	0x06,
-	0x3e,
-	0xa5,
-	0x3f,
-	0x2a,
-	0xdc,
-	0x91,
-	0x4a,
-	0xa5,
-	0x40,
-	0x2a,
-	0xc8,
-	0x91,
-	0x4a,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x32,
-	0xd0,
-	0xa2,
-	0x60,
-	0xc9,
-	0xa7,
-	0x90,
-	0x03,
-	0xa9,
-	0xa6,
-	0x60,
-	0xc9,
-	0x5a,
-	0xb0,
-	0x02,
-	0xa9,
-	0x5a,
-	0x60,
-	0xad,
-	0x17,
-	0x6b,
-	0x85,
-	0x2e,
-	0xa9,
-	0x80,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x2f,
-	0xa9,
-	0x85,
-	0x85,
-	0x4a,
-	0xa9,
-	0x6b,
-	0x85,
-	0x4b,
-	0xa9,
-	0xdf,
-	0xa2,
-	0x81,
-	0x20,
-	0x1f,
-	0x34,
-	0xa9,
-	0xb7,
-	0x85,
-	0x4a,
-	0xa9,
-	0x6b,
-	0x85,
-	0x4b,
-	0xa9,
-	0x11,
-	0xa2,
-	0x82,
-	0x20,
-	0x1f,
-	0x34,
-	0xa9,
-	0xe9,
-	0x85,
-	0x4a,
-	0xa9,
-	0x6b,
-	0x85,
-	0x4b,
-	0xa9,
-	0xad,
-	0xa2,
-	0x81,
-	0x20,
-	0x1f,
-	0x34,
-	0xa9,
-	0x9d,
-	0x85,
-	0x4a,
-	0xa9,
-	0x74,
-	0x85,
-	0x4b,
-	0xa9,
-	0x4a,
-	0x85,
-	0x4c,
-	0xa9,
-	0x70,
-	0x85,
-	0x4d,
-	0xa9,
-	0xda,
-	0x85,
-	0x4e,
-	0xa9,
-	0x56,
-	0x85,
-	0x4f,
-	0xa2,
-	0x02,
-	0xbd,
-	0x7f,
-	0x6b,
-	0xbc,
-	0x07,
-	0x7d,
-	0x99,
-	0x7e,
-	0x00,
-	0xbd,
-	0x82,
-	0x6b,
-	0xbc,
-	0x0a,
-	0x7d,
-	0x99,
-	0x81,
-	0x00,
-	0xca,
-	0x10,
-	0xeb,
-	0xa9,
-	0x11,
-	0x85,
-	0x2e,
-	0xa9,
-	0x15,
-	0x85,
-	0x2f,
-	0xa0,
-	0x06,
-	0xd3,
-	0x4a,
-	0x75,
-	0x00,
-	0xa0,
-	0x02,
-	0xd3,
-	0x4e,
-	0x30,
-	0x00,
-	0xa6,
-	0x31,
-	0xa4,
-	0x30,
-	0xb9,
-	0x8a,
-	0x56,
-	0x85,
-	0x50,
-	0xd0,
-	0x0d,
-	0xbd,
-	0x85,
-	0x6b,
-	0x85,
-	0x3f,
-	0xbd,
-	0x86,
-	0x6b,
-	0x85,
-	0x40,
-	0x4c,
-	0xdf,
-	0x35,
-	0xb9,
-	0x8b,
-	0x56,
-	0x85,
-	0x51,
-	0xb9,
-	0x8c,
-	0x56,
-	0x85,
-	0x52,
-	0xb9,
-	0x8d,
-	0x56,
-	0x85,
-	0x53,
-	0xbd,
-	0x85,
-	0x6b,
-	0x45,
-	0x50,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xbd,
-	0x86,
-	0x6b,
-	0x48,
-	0x45,
-	0x50,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x50,
-	0x85,
-	0x40,
-	0xa5,
-	0x51,
-	0xf0,
-	0x27,
-	0x5d,
-	0x87,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0x88,
-	0x6b,
-	0x48,
-	0x45,
-	0x51,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x51,
-	0x85,
-	0x40,
-	0xa5,
-	0x52,
-	0xf0,
-	0x27,
-	0x5d,
-	0x8f,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0x90,
-	0x6b,
-	0x48,
-	0x45,
-	0x52,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x52,
-	0x85,
-	0x40,
-	0xa5,
-	0x53,
-	0xf0,
-	0x27,
-	0x5d,
-	0x91,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0x92,
-	0x6b,
-	0x48,
-	0x45,
-	0x53,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x53,
-	0x85,
-	0x40,
-	0xa5,
-	0x3e,
-	0x10,
-	0x06,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x02,
-	0xe6,
-	0x40,
-	0xa5,
-	0x40,
-	0x30,
-	0x15,
-	0x49,
-	0x0b,
-	0x18,
-	0x69,
-	0x80,
-	0x85,
-	0x33,
-	0xa5,
-	0x3f,
-	0x49,
-	0x0b,
-	0x85,
-	0x32,
-	0x98,
-	0x18,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x80,
-	0x2b,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x3f,
-	0xa8,
-	0xa9,
-	0x00,
-	0xe5,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x3e,
-	0x85,
-	0x32,
-	0x84,
-	0x3e,
-	0xa9,
-	0x80,
-	0xe5,
-	0x3e,
-	0x48,
-	0xa5,
-	0x40,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0x68,
-	0xe5,
-	0x3e,
-	0x85,
-	0x33,
-	0xa5,
-	0x75,
-	0x45,
-	0x7e,
-	0x85,
-	0x34,
-	0x84,
-	0x35,
-	0xa5,
-	0x76,
-	0x45,
-	0x7f,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xa5,
-	0x77,
-	0x45,
-	0x80,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x06,
-	0x34,
-	0x2a,
-	0x06,
-	0x34,
-	0x69,
-	0x00,
-	0x85,
-	0x34,
-	0x45,
-	0x32,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x34,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x06,
-	0x3f,
-	0x2a,
-	0xb0,
-	0x0a,
-	0x06,
-	0x3f,
-	0x69,
-	0x00,
-	0xb0,
-	0x04,
-	0xc9,
-	0xf4,
-	0x90,
-	0x04,
-	0xa9,
-	0xf3,
-	0x80,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x02,
-	0xa9,
-	0x40,
-	0x92,
-	0x4c,
-	0xa6,
-	0x31,
-	0xa5,
-	0x50,
-	0xd0,
-	0x0d,
-	0xbd,
-	0xb7,
-	0x6b,
-	0x85,
-	0x3f,
-	0xbd,
-	0xb8,
-	0x6b,
-	0x85,
-	0x40,
-	0x4c,
-	0x38,
-	0x37,
-	0xbd,
-	0xb7,
-	0x6b,
-	0x45,
-	0x50,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xbd,
-	0xb8,
-	0x6b,
-	0x48,
-	0x45,
-	0x50,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x50,
-	0x85,
-	0x40,
-	0xa5,
-	0x51,
-	0xf0,
-	0x27,
-	0x5d,
-	0xb9,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xba,
-	0x6b,
-	0x48,
-	0x45,
-	0x51,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x51,
-	0x85,
-	0x40,
-	0xa5,
-	0x52,
-	0xf0,
-	0x27,
-	0x5d,
-	0xc1,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xc2,
-	0x6b,
-	0x48,
-	0x45,
-	0x52,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x52,
-	0x85,
-	0x40,
-	0xa5,
-	0x53,
-	0xf0,
-	0x27,
-	0x5d,
-	0xc3,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xc4,
-	0x6b,
-	0x48,
-	0x45,
-	0x53,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x53,
-	0x85,
-	0x40,
-	0xa5,
-	0x3e,
-	0x10,
-	0x06,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x02,
-	0xe6,
-	0x40,
-	0xa5,
-	0x40,
-	0x30,
-	0x15,
-	0x49,
-	0x0b,
-	0x18,
-	0x69,
-	0x80,
-	0x85,
-	0x33,
-	0xa5,
-	0x3f,
-	0x49,
-	0x0b,
-	0x85,
-	0x32,
-	0x98,
-	0x18,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x80,
-	0x2b,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x3f,
-	0xa8,
-	0xa9,
-	0x00,
-	0xe5,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x3e,
-	0x85,
-	0x32,
-	0x84,
-	0x3e,
-	0xa9,
-	0x80,
-	0xe5,
-	0x3e,
-	0x48,
-	0xa5,
-	0x40,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0x68,
-	0xe5,
-	0x3e,
-	0x85,
-	0x33,
-	0xa5,
-	0x81,
-	0x45,
-	0x78,
-	0x85,
-	0x34,
-	0x84,
-	0x35,
-	0xa5,
-	0x82,
-	0x45,
-	0x79,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xa5,
-	0x83,
-	0x45,
-	0x7a,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x06,
-	0x34,
-	0x2a,
-	0x06,
-	0x34,
-	0x69,
-	0x00,
-	0x85,
-	0x34,
-	0x45,
-	0x32,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x34,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x06,
-	0x3f,
-	0x2a,
-	0xb0,
-	0x0a,
-	0x06,
-	0x3f,
-	0x69,
-	0x00,
-	0xb0,
-	0x04,
-	0xc9,
-	0xf4,
-	0x90,
-	0x04,
-	0xa9,
-	0xf3,
-	0x80,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x02,
-	0xa9,
-	0x40,
-	0xa0,
-	0x01,
-	0x91,
-	0x4c,
-	0xa6,
-	0x31,
-	0xa5,
-	0x50,
-	0xd0,
-	0x0d,
-	0xbd,
-	0xe9,
-	0x6b,
-	0x85,
-	0x3f,
-	0xbd,
-	0xea,
-	0x6b,
-	0x85,
-	0x40,
-	0x4c,
-	0x93,
-	0x38,
-	0xbd,
-	0xe9,
-	0x6b,
-	0x45,
-	0x50,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xbd,
-	0xea,
-	0x6b,
-	0x48,
-	0x45,
-	0x50,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x50,
-	0x85,
-	0x40,
-	0xa5,
-	0x51,
-	0xf0,
-	0x27,
-	0x5d,
-	0xeb,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xec,
-	0x6b,
-	0x48,
-	0x45,
-	0x51,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x51,
-	0x85,
-	0x40,
-	0xa5,
-	0x52,
-	0xf0,
-	0x27,
-	0x5d,
-	0xf3,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xf4,
-	0x6b,
-	0x48,
-	0x45,
-	0x52,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x52,
-	0x85,
-	0x40,
-	0xa5,
-	0x53,
-	0xf0,
-	0x27,
-	0x5d,
-	0xf5,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xf6,
-	0x6b,
-	0x48,
-	0x45,
-	0x53,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x53,
-	0x85,
-	0x40,
-	0xa5,
-	0x3e,
-	0x10,
-	0x06,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x02,
-	0xe6,
-	0x40,
-	0xa2,
-	0x00,
-	0xa5,
-	0x40,
-	0x10,
-	0x0e,
-	0xe8,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x3f,
-	0x85,
-	0x3f,
-	0xa9,
-	0x00,
-	0xe5,
-	0x40,
-	0x85,
-	0x40,
-	0xda,
-	0xa5,
-	0x3f,
-	0x49,
-	0x0b,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0xa5,
-	0x40,
-	0x49,
-	0x0b,
-	0x18,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x46,
-	0x33,
-	0x66,
-	0x32,
-	0x10,
-	0x02,
-	0xe6,
-	0x33,
-	0x18,
-	0xa5,
-	0x33,
-	0x69,
-	0x80,
-	0xaa,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0x33,
-	0x7a,
-	0xf0,
-	0x01,
-	0x8a,
-	0x20,
-	0x84,
-	0x34,
-	0xa0,
-	0x02,
-	0x91,
-	0x4c,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x06,
-	0x85,
-	0x4a,
-	0x90,
-	0x03,
-	0xe6,
-	0x4b,
-	0x18,
-	0xa5,
-	0x4c,
-	0x69,
-	0x03,
-	0x85,
-	0x4c,
-	0x90,
-	0x03,
-	0xe6,
-	0x4d,
-	0x18,
-	0xa5,
-	0x4e,
-	0x69,
-	0x02,
-	0x85,
-	0x4e,
-	0x90,
-	0x02,
-	0xe6,
-	0x4f,
-	0xc6,
-	0x2f,
-	0xf0,
-	0x03,
-	0x4c,
-	0x02,
-	0x35,
-	0xc6,
-	0x2e,
-	0xf0,
-	0x03,
-	0x4c,
-	0xfe,
-	0x34,
-	0xa9,
-	0x01,
-	0x85,
-	0x22,
-	0x60,
-	0x64,
-	0x36,
-	0x64,
-	0x37,
-	0xa2,
-	0x10,
-	0x06,
-	0x32,
-	0x26,
-	0x33,
-	0x26,
-	0x36,
-	0x26,
-	0x37,
-	0xa5,
-	0x36,
-	0x38,
-	0xe5,
-	0x34,
-	0xa8,
-	0xa5,
-	0x37,
-	0xe5,
-	0x35,
-	0x90,
-	0x06,
-	0x85,
-	0x37,
-	0x84,
-	0x36,
-	0xe6,
-	0x32,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0x20,
-	0x0b,
-	0x39,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x90,
-	0x06,
-	0xe6,
-	0x34,
-	0xd0,
-	0x02,
-	0xe6,
-	0x35,
-	0x38,
-	0xa5,
-	0x36,
-	0xe5,
-	0x34,
-	0xa5,
-	0x37,
-	0xe5,
-	0x35,
-	0x30,
-	0x06,
-	0xe6,
-	0x32,
-	0xd0,
-	0x02,
-	0xe6,
-	0x33,
-	0x60,
-	0xa5,
-	0x32,
-	0x45,
-	0x34,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x32,
-	0x45,
-	0x35,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x34,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x35,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x41,
-	0xa5,
-	0x35,
-	0x10,
-	0x0d,
-	0x38,
-	0xa5,
-	0x40,
-	0xe5,
-	0x32,
-	0x85,
-	0x40,
-	0xa5,
-	0x41,
-	0xe5,
-	0x33,
-	0x85,
-	0x41,
-	0x60,
-	0xa5,
-	0x32,
-	0x45,
-	0x34,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x32,
-	0x45,
-	0x35,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x34,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x35,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x41,
-	0x60,
-	0xda,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa9,
-	0x68,
-	0xa0,
-	0x04,
-	0x80,
-	0x04,
-	0xa9,
-	0x90,
-	0xa0,
-	0x00,
-	0x85,
-	0xe6,
-	0x84,
-	0xe7,
-	0x38,
-	0xa5,
-	0xb5,
-	0xe5,
-	0xb4,
-	0x1a,
-	0x1a,
-	0x85,
-	0xde,
-	0xa0,
-	0x02,
-	0x53,
-	0xac,
-	0x00,
-	0xea,
-	0x00,
-	0xa5,
-	0xb4,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x02,
-	0xa5,
-	0xb5,
-	0xaa,
-	0x85,
-	0xdf,
-	0x8a,
-	0x18,
-	0x65,
-	0xb6,
-	0x49,
-	0x03,
-	0x85,
-	0xe8,
-	0xa5,
-	0xaa,
-	0x48,
-	0x18,
-	0x65,
-	0xbd,
-	0x49,
-	0x3f,
-	0x65,
-	0xe8,
-	0x90,
-	0x02,
-	0xc8,
-	0x18,
-	0x69,
-	0x1b,
-	0x85,
-	0xe2,
-	0x98,
-	0x69,
-	0x6c,
-	0x85,
-	0xe3,
-	0x68,
-	0x1a,
-	0x38,
-	0xe5,
-	0xbd,
-	0x49,
-	0x3f,
-	0x18,
-	0x65,
-	0xe8,
-	0x90,
-	0x02,
-	0xc8,
-	0x18,
-	0x69,
-	0x1b,
-	0x85,
-	0xe4,
-	0x98,
-	0x69,
-	0x6c,
-	0x85,
-	0xe5,
-	0xa0,
-	0x03,
-	0xd3,
-	0xe2,
-	0xd4,
-	0x00,
-	0xd3,
-	0xe4,
-	0xd8,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0xe6,
-	0x00,
-	0x0c,
-	0xc0,
-	0xad,
-	0x76,
-	0x60,
-	0xa8,
-	0x29,
-	0x01,
-	0xd0,
-	0x0a,
-	0xa2,
-	0x80,
-	0x86,
-	0xd4,
-	0x86,
-	0xd5,
-	0x86,
-	0xd8,
-	0x86,
-	0xd9,
-	0x98,
-	0x29,
-	0x02,
-	0xd0,
-	0x06,
-	0xa2,
-	0x80,
-	0x86,
-	0xd6,
-	0x86,
-	0xda,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xd6,
-	0x85,
-	0xd7,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xda,
-	0x85,
-	0xdb,
-	0xa0,
-	0x08,
-	0x43,
-	0xd4,
-	0x00,
-	0x54,
-	0xc0,
-	0xc6,
-	0xde,
-	0xd0,
-	0x03,
-	0x4c,
-	0x25,
-	0x3b,
-	0xa4,
-	0xb6,
-	0xd0,
-	0x04,
-	0xe6,
-	0xdf,
-	0x80,
-	0x02,
-	0xc6,
-	0xdf,
-	0xa0,
-	0x03,
-	0xc3,
-	0xea,
-	0x54,
-	0xc0,
-	0xc3,
-	0xae,
-	0x54,
-	0xc0,
-	0xc3,
-	0xb0,
-	0x54,
-	0xc0,
-	0xc3,
-	0xb2,
-	0x54,
-	0xc0,
-	0xa5,
-	0xdf,
-	0xa6,
-	0xb6,
-	0xd0,
-	0x18,
-	0x18,
-	0xa5,
-	0xe2,
-	0x69,
-	0x03,
-	0x85,
-	0xe2,
-	0x90,
-	0x03,
-	0xe6,
-	0xe3,
-	0x18,
-	0xa5,
-	0xe4,
-	0x69,
-	0x03,
-	0x85,
-	0xe4,
-	0x90,
-	0x02,
-	0xe6,
-	0xe5,
-	0x80,
-	0x16,
-	0x38,
-	0xa5,
-	0xe2,
-	0xe9,
-	0x03,
-	0x85,
-	0xe2,
-	0xb0,
-	0x03,
-	0xc6,
-	0xe3,
-	0x38,
-	0xa5,
-	0xe4,
-	0xe9,
-	0x03,
-	0x85,
-	0xe4,
-	0xb0,
-	0x02,
-	0xc6,
-	0xe5,
-	0xa5,
-	0xde,
-	0x3a,
-	0xf0,
-	0x4f,
-	0xa0,
-	0x02,
-	0x53,
-	0xea,
-	0x00,
-	0xb2,
-	0x00,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x23,
-	0x38,
-	0xa5,
-	0xae,
-	0xe9,
-	0x03,
-	0x85,
-	0xae,
-	0xb0,
-	0x03,
-	0xc6,
-	0xaf,
-	0x38,
-	0xa5,
-	0xea,
-	0xe9,
-	0x03,
-	0x85,
-	0xea,
-	0xb0,
-	0x03,
-	0xc6,
-	0xeb,
-	0x38,
-	0xa5,
-	0xb0,
-	0xe9,
-	0x03,
-	0x85,
-	0xb0,
-	0xb0,
-	0x25,
-	0xc6,
-	0xb1,
-	0x80,
-	0x21,
-	0x18,
-	0xa5,
-	0xae,
-	0x69,
-	0x03,
-	0x85,
-	0xae,
-	0x90,
-	0x03,
-	0xe6,
-	0xaf,
-	0x18,
-	0xa5,
-	0xea,
-	0x69,
-	0x03,
-	0x85,
-	0xea,
-	0x90,
-	0x03,
-	0xe6,
-	0xeb,
-	0x18,
-	0xa5,
-	0xb0,
-	0x69,
-	0x03,
-	0x85,
-	0xb0,
-	0x90,
-	0x02,
-	0xe6,
-	0xb1,
-	0x18,
-	0xa5,
-	0xe6,
-	0x69,
-	0x18,
-	0x85,
-	0xe6,
-	0x90,
-	0x02,
-	0xe6,
-	0xe7,
-	0x4c,
-	0x29,
-	0x3a,
-	0xa0,
-	0x03,
-	0xc3,
-	0xea,
-	0x54,
-	0xc0,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x04,
-	0xc6,
-	0xaa,
-	0x80,
-	0x02,
-	0xe6,
-	0xaa,
-	0xc6,
-	0xab,
-	0xf0,
-	0x40,
-	0xa5,
-	0xac,
-	0xa4,
-	0xad,
-	0x85,
-	0xae,
-	0x84,
-	0xaf,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x08,
-	0x38,
-	0xe9,
-	0x3c,
-	0xb0,
-	0x09,
-	0x88,
-	0x80,
-	0x06,
-	0x18,
-	0x69,
-	0x3c,
-	0x90,
-	0x01,
-	0xc8,
-	0x85,
-	0xac,
-	0x84,
-	0xad,
-	0xa6,
-	0xab,
-	0xca,
-	0xf0,
-	0x12,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x08,
-	0x38,
-	0xe9,
-	0x3c,
-	0xb0,
-	0x09,
-	0x88,
-	0x80,
-	0x06,
-	0x18,
-	0x69,
-	0x3c,
-	0x90,
-	0x01,
-	0xc8,
-	0x85,
-	0xb0,
-	0x84,
-	0xb1,
-	0xa0,
-	0x02,
-	0x53,
-	0xac,
-	0x00,
-	0xb2,
-	0x00,
-	0xfa,
-	0x60,
-	0x64,
-	0xe6,
-	0x64,
-	0xe7,
-	0xa2,
-	0x10,
-	0x06,
-	0xe2,
-	0x26,
-	0xe3,
-	0x26,
-	0xe6,
-	0x26,
-	0xe7,
-	0xa5,
-	0xe6,
-	0x38,
-	0xe5,
-	0xe4,
-	0xa8,
-	0xa5,
-	0xe7,
-	0xe5,
-	0xe5,
-	0x90,
-	0x06,
-	0x85,
-	0xe7,
-	0x84,
-	0xe6,
-	0xe6,
-	0xe2,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0xa5,
-	0xc0,
-	0x49,
-	0x1a,
-	0x84,
-	0x17,
-	0xa6,
-	0xb4,
-	0xbd,
-	0x79,
-	0x6a,
-	0xc5,
-	0x17,
-	0xb0,
-	0x01,
-	0xe8,
-	0x86,
-	0x28,
-	0xa6,
-	0xb5,
-	0xbd,
-	0x79,
-	0x6a,
-	0xc5,
-	0x17,
-	0xb0,
-	0x01,
-	0xca,
-	0x86,
-	0x29,
-	0x8a,
-	0xa5,
-	0xc2,
-	0x49,
-	0x1a,
-	0x84,
-	0xe3,
-	0xa6,
-	0xbe,
-	0xbd,
-	0x8d,
-	0x6a,
-	0xc5,
-	0xe3,
-	0xb0,
-	0x01,
-	0xe8,
-	0x86,
-	0x26,
-	0xa6,
-	0xbf,
-	0xbd,
-	0x8d,
-	0x6a,
-	0xc5,
-	0xe3,
-	0xb0,
-	0x01,
-	0xca,
-	0x86,
-	0x27,
-	0xa4,
-	0xbd,
-	0xd0,
-	0x02,
-	0xa6,
-	0x26,
-	0x86,
-	0x60,
-	0xa5,
-	0x26,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x02,
-	0xa5,
-	0x27,
-	0x49,
-	0x64,
-	0x18,
-	0x69,
-	0x37,
-	0x85,
-	0xbb,
-	0x85,
-	0x2a,
-	0x98,
-	0x69,
-	0x64,
-	0x85,
-	0xbc,
-	0x85,
-	0x2b,
-	0xa5,
-	0x28,
-	0x49,
-	0x05,
-	0x65,
-	0x2a,
-	0x85,
-	0x2a,
-	0x90,
-	0x03,
-	0xe6,
-	0x2b,
-	0x18,
-	0xa5,
-	0x28,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x02,
-	0xa5,
-	0x29,
-	0x49,
-	0x05,
-	0x65,
-	0xbb,
-	0x85,
-	0xbb,
-	0x90,
-	0x02,
-	0xe6,
-	0xbc,
-	0x60,
-	0xfc,
-	0xf0,
-	0x11,
-	0xa2,
-	0x07,
-	0x85,
-	0xe3,
-	0x98,
-	0x80,
-	0x02,
-	0x66,
-	0xe3,
-	0xe8,
-	0x4a,
-	0xd0,
-	0xfa,
-	0x66,
-	0xe3,
-	0x80,
-	0x0b,
-	0xa2,
-	0x07,
-	0xa8,
-	0x30,
-	0x04,
-	0xca,
-	0x0a,
-	0x10,
-	0xfc,
-	0x85,
-	0xe3,
-	0x8a,
-	0x0a,
-	0xaa,
-	0xa5,
-	0xe3,
-	0x29,
-	0x7f,
-	0xa8,
-	0x60,
-	0x7c,
-	0xc0,
-	0x3f,
-	0xda,
-	0xa0,
-	0x02,
-	0x53,
-	0xbb,
-	0x00,
-	0xd4,
-	0x00,
-	0x53,
-	0xb7,
-	0x00,
-	0xd6,
-	0x00,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa9,
-	0xd0,
-	0xa2,
-	0x0a,
-	0x80,
-	0x04,
-	0xa9,
-	0x40,
-	0xa2,
-	0x08,
-	0x8d,
-	0x0c,
-	0xc0,
-	0x8e,
-	0x0d,
-	0xc0,
-	0xa5,
-	0xb4,
-	0xf0,
-	0x17,
-	0x49,
-	0x03,
-	0x5a,
-	0x48,
-	0xa5,
-	0xb9,
-	0x49,
-	0x3c,
-	0x18,
-	0x69,
-	0x77,
-	0x85,
-	0xe2,
-	0x98,
-	0x69,
-	0x60,
-	0x85,
-	0xe3,
-	0xfa,
-	0x68,
-	0x20,
-	0x90,
-	0x3e,
-	0x38,
-	0xa9,
-	0x13,
-	0xe5,
-	0xb5,
-	0xf0,
-	0x24,
-	0x49,
-	0x03,
-	0x5a,
-	0x48,
-	0xa5,
-	0xb9,
-	0x49,
-	0x3c,
-	0x18,
-	0x69,
-	0x77,
-	0x85,
-	0xe2,
-	0x98,
-	0x69,
-	0x60,
-	0x85,
-	0xe3,
-	0xa5,
-	0xb5,
-	0x1a,
-	0x49,
-	0x03,
-	0x65,
-	0xe2,
-	0x85,
-	0xe2,
-	0x90,
-	0x02,
-	0xe6,
-	0xe3,
-	0xfa,
-	0x68,
-	0x20,
-	0x90,
-	0x3e,
-	0x38,
-	0xa5,
-	0xb5,
-	0xaa,
-	0xa4,
-	0xb6,
-	0xd0,
-	0x02,
-	0xa6,
-	0xb4,
-	0x86,
-	0xdf,
-	0xe5,
-	0xb4,
-	0x1a,
-	0x85,
-	0xde,
-	0x64,
-	0xf3,
-	0xa2,
-	0x00,
-	0xa4,
-	0xb9,
-	0xb9,
-	0x8d,
-	0x6a,
-	0x85,
-	0xe1,
-	0xa5,
-	0xc2,
-	0x49,
-	0x1a,
-	0xa2,
-	0x01,
-	0xc4,
-	0xe1,
-	0xf0,
-	0x03,
-	0x90,
-	0x01,
-	0xca,
-	0x86,
-	0xee,
-	0xa6,
-	0x28,
-	0xa4,
-	0x29,
-	0xa5,
-	0xb6,
-	0xf0,
-	0x03,
-	0x8a,
-	0xfc,
-	0xa8,
-	0x86,
-	0xf2,
-	0x84,
-	0xef,
-	0xa6,
-	0x26,
-	0xa4,
-	0x27,
-	0xa5,
-	0xbd,
-	0xf0,
-	0x03,
-	0x8a,
-	0xfc,
-	0xa8,
-	0x86,
-	0xf0,
-	0x84,
-	0xf1,
-	0xa0,
-	0x10,
-	0x13,
-	0x54,
-	0xc0,
-	0xc4,
-	0x00,
-	0xa4,
-	0xdf,
-	0xa2,
-	0x00,
-	0xa5,
-	0xa8,
-	0xf0,
-	0x0f,
-	0xa5,
-	0xee,
-	0xf0,
-	0x0b,
-	0xc4,
-	0x28,
-	0x90,
-	0x07,
-	0xc4,
-	0x29,
-	0xf0,
-	0x02,
-	0xb0,
-	0x01,
-	0xe8,
-	0x86,
-	0x97,
-	0xb9,
-	0x79,
-	0x6a,
-	0x85,
-	0xe2,
-	0xaa,
-	0x45,
-	0xe1,
-	0x84,
-	0x9a,
-	0x49,
-	0x20,
-	0x85,
-	0x98,
-	0x84,
-	0x99,
-	0xa5,
-	0x9a,
-	0x49,
-	0x20,
-	0x18,
-	0x65,
-	0x99,
-	0x85,
-	0x99,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x9a,
-	0x38,
-	0xa5,
-	0xc4,
-	0xe5,
-	0x98,
-	0x85,
-	0xc4,
-	0xa5,
-	0xc5,
-	0xe5,
-	0x99,
-	0x85,
-	0xc5,
-	0xa5,
-	0xc6,
-	0xe5,
-	0x9a,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc7,
-	0xe9,
-	0x00,
-	0x85,
-	0xc7,
-	0x10,
-	0x08,
-	0x64,
-	0xc4,
-	0x64,
-	0xc5,
-	0x64,
-	0xc6,
-	0x64,
-	0xc7,
-	0x38,
-	0xa5,
-	0xc8,
-	0xe5,
-	0x98,
-	0x85,
-	0xc8,
-	0xa5,
-	0xc9,
-	0xe5,
-	0x99,
-	0x85,
-	0xc9,
-	0xa5,
-	0xca,
-	0xe5,
-	0x9a,
-	0x85,
-	0xca,
-	0xa5,
-	0xcb,
-	0xe9,
-	0x00,
-	0x85,
-	0xcb,
-	0x10,
-	0x08,
-	0x64,
-	0xc8,
-	0x64,
-	0xc9,
-	0x64,
-	0xca,
-	0x64,
-	0xcb,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0x98,
-	0x85,
-	0xcc,
-	0xa5,
-	0xcd,
-	0xe5,
-	0x99,
-	0x85,
-	0xcd,
-	0xa5,
-	0xce,
-	0xe5,
-	0x9a,
-	0x85,
-	0xce,
-	0xa5,
-	0xcf,
-	0xe9,
-	0x00,
-	0x85,
-	0xcf,
-	0x10,
-	0x08,
-	0x64,
-	0xcc,
-	0x64,
-	0xcd,
-	0x64,
-	0xce,
-	0x64,
-	0xcf,
-	0x38,
-	0xa5,
-	0xd0,
-	0xe5,
-	0x98,
-	0x85,
-	0xd0,
-	0xa5,
-	0xd1,
-	0xe5,
-	0x99,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd2,
-	0xe5,
-	0x9a,
-	0x85,
-	0xd2,
-	0xa5,
-	0xd3,
-	0xe9,
-	0x00,
-	0x85,
-	0xd3,
-	0x10,
-	0x08,
-	0x64,
-	0xd0,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0x64,
-	0xd3,
-	0x8a,
-	0xa6,
-	0x97,
-	0xf0,
-	0x07,
-	0xa0,
-	0x10,
-	0x53,
-	0xc4,
-	0x00,
-	0x98,
-	0x00,
-	0xa5,
-	0xe1,
-	0x45,
-	0xe2,
-	0x20,
-	0x1c,
-	0x3c,
-	0x5a,
-	0x20,
-	0x44,
-	0x3c,
-	0x7a,
-	0xb9,
-	0xcc,
-	0x5b,
-	0x20,
-	0x59,
-	0x15,
-	0xa0,
-	0x03,
-	0x73,
-	0xe6,
-	0x00,
-	0xd6,
-	0xa5,
-	0x97,
-	0xd0,
-	0x02,
-	0x80,
-	0x27,
-	0xa5,
-	0xdf,
-	0x20,
-	0xce,
-	0x14,
-	0xa0,
-	0x05,
-	0x73,
-	0xe9,
-	0x00,
-	0xd4,
-	0x84,
-	0xf3,
-	0xa5,
-	0xd4,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x05,
-	0x85,
-	0xd4,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xd5,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x05,
-	0x85,
-	0xd4,
-	0x90,
-	0x02,
-	0xe6,
-	0xd5,
-	0xa5,
-	0xd6,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x03,
-	0x85,
-	0xd6,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xd7,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x03,
-	0x85,
-	0xd6,
-	0x90,
-	0x02,
-	0xe6,
-	0xd7,
-	0xc6,
-	0xde,
-	0xf0,
-	0x0e,
-	0xa5,
-	0xb6,
-	0xf0,
-	0x05,
-	0xc6,
-	0xdf,
-	0x4c,
-	0xf7,
-	0x3c,
-	0xe6,
-	0xdf,
-	0x4c,
-	0xf7,
-	0x3c,
-	0xa5,
-	0xb7,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x3c,
-	0x85,
-	0xb7,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xb8,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x3c,
-	0x85,
-	0xb7,
-	0x90,
-	0x02,
-	0xe6,
-	0xb8,
-	0xa6,
-	0xb9,
-	0xe4,
-	0xf1,
-	0xd0,
-	0x02,
-	0x64,
-	0xa8,
-	0xa5,
-	0xee,
-	0xf0,
-	0x1a,
-	0xa5,
-	0xbb,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x64,
-	0x85,
-	0xbb,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xbc,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x64,
-	0x85,
-	0xbb,
-	0x90,
-	0x02,
-	0xe6,
-	0xbc,
-	0xa5,
-	0xf3,
-	0xf0,
-	0x02,
-	0xe6,
-	0x24,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x04,
-	0xc6,
-	0xb9,
-	0x80,
-	0x02,
-	0xe6,
-	0xb9,
-	0xfa,
-	0x60,
-	0x64,
-	0xde,
-	0xda,
-	0xaa,
-	0xf0,
-	0x0b,
-	0xa0,
-	0x00,
-	0x33,
-	0xde,
-	0x00,
-	0xe2,
-	0xe6,
-	0xe3,
-	0x3a,
-	0xd0,
-	0xf7,
-	0x7a,
-	0xf0,
-	0x04,
-	0x33,
-	0xde,
-	0x00,
-	0xe2,
-	0x60,
-	0xba,
-	0x08,
-	0x78,
-	0x68,
-	0x48,
-	0x29,
-	0x1c,
-	0x85,
-	0xf6,
-	0x86,
-	0xf4,
-	0xa9,
-	0x01,
-	0x85,
-	0xf5,
-	0xa0,
-	0x06,
-	0xb1,
-	0xf4,
-	0x48,
-	0x29,
-	0x1c,
-	0xc5,
-	0xf6,
-	0x90,
-	0x08,
-	0x7a,
-	0xa0,
-	0x09,
-	0xb1,
-	0xf4,
-	0x48,
-	0x29,
-	0x1c,
-	0xc9,
-	0x00,
-	0xd0,
-	0x38,
-	0xa0,
-	0x03,
-	0xb1,
-	0xf4,
-	0xe0,
-	0x7f,
-	0xb0,
-	0x18,
-	0x8d,
-	0x82,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x83,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x84,
-	0x82,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x85,
-	0x82,
-	0x80,
-	0x16,
-	0x8d,
-	0x86,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x87,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x88,
-	0x82,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x89,
-	0x82,
-	0xa9,
-	0x00,
-	0xfa,
-	0x28,
-	0xf8,
-	0x60,
-	0x68,
-	0xf0,
-	0x04,
-	0x68,
-	0xfa,
-	0x7a,
-	0x40,
-	0x08,
-	0x78,
-	0x68,
-	0xad,
-	0x81,
-	0x82,
-	0xf0,
-	0x0e,
-	0xae,
-	0x85,
-	0x82,
-	0x9a,
-	0xad,
-	0x82,
-	0x82,
-	0xae,
-	0x83,
-	0x82,
-	0xac,
-	0x84,
-	0x82,
-	0x40,
-	0xae,
-	0x89,
-	0x82,
-	0x9a,
-	0xad,
-	0x86,
-	0x82,
-	0xae,
-	0x87,
-	0x82,
-	0xac,
-	0x88,
-	0x82,
-	0x40,
-	0x08,
-	0x78,
-	0xad,
-	0x81,
-	0x82,
-	0xd0,
-	0x1f,
-	0x1a,
-	0x8d,
-	0x81,
-	0x82,
-	0xa9,
-	0x7c,
-	0x8d,
-	0x85,
-	0x82,
-	0x9c,
-	0x82,
-	0x82,
-	0x9c,
-	0x83,
-	0x82,
-	0x9c,
-	0x84,
-	0x82,
-	0xa9,
-	0x07,
-	0x8d,
-	0x7f,
-	0x01,
-	0xa9,
-	0x0a,
-	0x8d,
-	0x7e,
-	0x01,
-	0x9c,
-	0x7d,
-	0x01,
-	0x28,
-	0x60,
-	0x08,
-	0x78,
-	0xa9,
-	0x0e,
-	0x8d,
-	0xfe,
-	0x01,
-	0xa9,
-	0x07,
-	0x8d,
-	0xfd,
-	0x01,
-	0xad,
-	0x16,
-	0x6b,
-	0x8d,
-	0xfc,
-	0x01,
-	0xa9,
-	0xfb,
-	0x8d,
-	0x89,
-	0x82,
-	0x9c,
-	0x86,
-	0x82,
-	0x9c,
-	0x87,
-	0x82,
-	0x9c,
-	0x88,
-	0x82,
-	0x28,
-	0x60,
-	0xd6,
-	0x03,
-	0x0c,
-	0x06,
-	0x86,
-	0x1c,
-	0xbd,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xf0,
-	0x0d,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x00,
-	0x04,
-	0x08,
-	0x0d,
-	0x11,
-	0x15,
-	0x1a,
-	0x1e,
-	0x23,
-	0x27,
-	0x00,
-	0x04,
-	0x09,
-	0x0d,
-	0x12,
-	0x17,
-	0x1b,
-	0x00,
-	0x01,
-	0x02,
-	0x00,
-	0x02,
-	0x01,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x02,
-	0x02,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x01,
-	0x02,
-	0x00,
-	0x01,
-	0x02,
-	0x04,
-	0x08,
-	0x10,
-	0x20,
-	0x40,
-	0x80,
-	0xef,
-	0x19,
-	0x88,
-	0x19,
-	0x4b,
-	0x19,
-	0x26,
-	0x19,
-	0x01,
-	0x19,
-	0xdc,
-	0x18,
-	0xb7,
-	0x18,
-	0x7a,
-	0x18,
-	0x2d,
-	0x18,
-	0xd4,
-	0x17,
-	0x7f,
-	0x17,
-	0x32,
-	0x17,
-	0xcb,
-	0x16,
-	0x72,
-	0x16,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x8e,
-	0x73,
-	0x8e,
-	0x73,
-	0x4f,
-	0xb2,
-	0x4f,
-	0xe5,
-	0x1c,
-	0xe3,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x9b,
-	0x66,
-	0x9b,
-	0x66,
-	0x24,
-	0xdd,
-	0x24,
-	0x2d,
-	0xd4,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xa7,
-	0x5a,
-	0xa7,
-	0x5a,
-	0xfe,
-	0x03,
-	0xfe,
-	0x5d,
-	0xa4,
-	0x81,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xb4,
-	0x4d,
-	0xb4,
-	0x4d,
-	0xdd,
-	0x24,
-	0xdd,
-	0x78,
-	0x89,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xc1,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0x7f,
-	0x81,
-	0xc1,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xce,
-	0x33,
-	0xce,
-	0x33,
-	0xaa,
-	0x57,
-	0xaa,
-	0x79,
-	0x88,
-	0xf7,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xdb,
-	0x26,
-	0xdb,
-	0x26,
-	0x98,
-	0x69,
-	0x98,
-	0x65,
-	0x9c,
-	0x2c,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xe7,
-	0x1a,
-	0xe7,
-	0x1a,
-	0x8b,
-	0x76,
-	0x8b,
-	0x49,
-	0xb8,
-	0x59,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xf4,
-	0x0d,
-	0xf4,
-	0x0d,
-	0x84,
-	0x7d,
-	0x84,
-	0x26,
-	0xdb,
-	0x76,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x7f,
-	0x81,
-	0x00,
-	0x00,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x0d,
-	0xf4,
-	0x0d,
-	0xf4,
-	0x84,
-	0x7d,
-	0x84,
-	0xdb,
-	0x26,
-	0x76,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x1a,
-	0xe7,
-	0x1a,
-	0xe7,
-	0x8b,
-	0x76,
-	0x8b,
-	0xb8,
-	0x49,
-	0x59,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x26,
-	0xdb,
-	0x26,
-	0xdb,
-	0x98,
-	0x69,
-	0x98,
-	0x9c,
-	0x65,
-	0x2c,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x33,
-	0xce,
-	0x33,
-	0xce,
-	0xaa,
-	0x57,
-	0xaa,
-	0x88,
-	0x79,
-	0xf7,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0xc1,
-	0x40,
-	0xc1,
-	0x81,
-	0x7f,
-	0xc1,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x4d,
-	0xb4,
-	0x4d,
-	0xb4,
-	0xdd,
-	0x24,
-	0xdd,
-	0x89,
-	0x78,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x5a,
-	0xa7,
-	0x5a,
-	0xa7,
-	0xfe,
-	0x03,
-	0xfe,
-	0xa4,
-	0x5d,
-	0x81,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x66,
-	0x9b,
-	0x66,
-	0x9b,
-	0x24,
-	0xdd,
-	0x24,
-	0xd4,
-	0x2d,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x73,
-	0x8e,
-	0x73,
-	0x8e,
-	0x4f,
-	0xb2,
-	0x4f,
-	0x1c,
-	0xe5,
-	0xe3,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x81,
-	0x70,
-	0xbd,
-	0x07,
-	0x7f,
-	0x91,
-	0x44,
-	0x81,
-	0x70,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x8e,
-	0x65,
-	0xc4,
-	0x06,
-	0x4f,
-	0xbc,
-	0x2a,
-	0xe5,
-	0x18,
-	0xe3,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x9b,
-	0x5a,
-	0xcb,
-	0x06,
-	0x24,
-	0xe2,
-	0x13,
-	0x2d,
-	0xda,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xa7,
-	0x4e,
-	0xd1,
-	0x05,
-	0xfe,
-	0x02,
-	0x00,
-	0x5d,
-	0xaf,
-	0x81,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xb4,
-	0x43,
-	0xd8,
-	0x04,
-	0xdd,
-	0x1f,
-	0xee,
-	0x78,
-	0x98,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xc1,
-	0x38,
-	0xdf,
-	0x04,
-	0xc1,
-	0x38,
-	0xdf,
-	0x7f,
-	0x91,
-	0xc1,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xce,
-	0x2d,
-	0xe6,
-	0x03,
-	0xaa,
-	0x4c,
-	0xd3,
-	0x79,
-	0x97,
-	0xf7,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xdb,
-	0x22,
-	0xed,
-	0x02,
-	0x98,
-	0x5c,
-	0xc9,
-	0x65,
-	0xa8,
-	0x2c,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xe7,
-	0x16,
-	0xf3,
-	0x01,
-	0x8b,
-	0x67,
-	0xc2,
-	0x49,
-	0xc1,
-	0x59,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xf4,
-	0x0b,
-	0xfa,
-	0x01,
-	0x84,
-	0x6e,
-	0xbe,
-	0x26,
-	0xe0,
-	0x76,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x70,
-	0xbd,
-	0x00,
-	0x00,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x0d,
-	0xf6,
-	0x07,
-	0x00,
-	0x84,
-	0x6e,
-	0xbe,
-	0xdb,
-	0x21,
-	0x76,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x1a,
-	0xeb,
-	0x0e,
-	0x00,
-	0x8b,
-	0x67,
-	0xc2,
-	0xb8,
-	0x40,
-	0x59,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x26,
-	0xdf,
-	0x14,
-	0xff,
-	0x98,
-	0x5c,
-	0xc9,
-	0x9c,
-	0x59,
-	0x2c,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x33,
-	0xd4,
-	0x1b,
-	0xfe,
-	0xaa,
-	0x4c,
-	0xd3,
-	0x88,
-	0x6a,
-	0xf7,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x40,
-	0xc9,
-	0x22,
-	0xfd,
-	0xc1,
-	0x38,
-	0xdf,
-	0x81,
-	0x70,
-	0xc1,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x4d,
-	0xbe,
-	0x29,
-	0xfd,
-	0xdd,
-	0x1f,
-	0xee,
-	0x89,
-	0x69,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x5a,
-	0xb3,
-	0x30,
-	0xfc,
-	0xfe,
-	0x02,
-	0x00,
-	0xa4,
-	0x52,
-	0x81,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x66,
-	0xa7,
-	0x36,
-	0xfb,
-	0x24,
-	0xe2,
-	0x13,
-	0xd4,
-	0x27,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x73,
-	0x9c,
-	0x3d,
-	0xfb,
-	0x4f,
-	0xbc,
-	0x2a,
-	0x1c,
-	0xe9,
-	0xe3,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0x7f,
-	0x91,
-	0x44,
-	0x7f,
-	0x91,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x81,
-	0x60,
-	0xf1,
-	0xb9,
-	0x7f,
-	0xa1,
-	0x10,
-	0x81,
-	0x60,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x8e,
-	0x56,
-	0xf3,
-	0xc0,
-	0x4f,
-	0xc5,
-	0x0a,
-	0xe5,
-	0x15,
-	0xe3,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x9b,
-	0x4d,
-	0xf4,
-	0xc7,
-	0x24,
-	0xe6,
-	0x04,
-	0x2d,
-	0xdf,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xa7,
-	0x43,
-	0xf6,
-	0xcf,
-	0xfe,
-	0x02,
-	0x00,
-	0x5d,
-	0xbb,
-	0x81,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xb4,
-	0x3a,
-	0xf7,
-	0xd6,
-	0xdd,
-	0x1b,
-	0xfd,
-	0x78,
-	0xa7,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xc1,
-	0x30,
-	0xf9,
-	0xdd,
-	0xc1,
-	0x30,
-	0xf9,
-	0x7f,
-	0xa1,
-	0xc1,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xce,
-	0x26,
-	0xfb,
-	0xe4,
-	0xaa,
-	0x41,
-	0xf6,
-	0x79,
-	0xa6,
-	0xf7,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xdb,
-	0x1d,
-	0xfc,
-	0xeb,
-	0x98,
-	0x4f,
-	0xf4,
-	0x65,
-	0xb5,
-	0x2c,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xe7,
-	0x13,
-	0xfe,
-	0xf3,
-	0x8b,
-	0x58,
-	0xf2,
-	0x49,
-	0xca,
-	0x59,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xf4,
-	0x0a,
-	0xff,
-	0xfa,
-	0x84,
-	0x5e,
-	0xf1,
-	0x26,
-	0xe5,
-	0x76,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x60,
-	0xf1,
-	0x00,
-	0x00,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x0d,
-	0xf7,
-	0x02,
-	0x07,
-	0x84,
-	0x5e,
-	0xf1,
-	0xdb,
-	0x1c,
-	0x76,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x1a,
-	0xee,
-	0x03,
-	0x0e,
-	0x8b,
-	0x58,
-	0xf2,
-	0xb8,
-	0x37,
-	0x59,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x26,
-	0xe4,
-	0x05,
-	0x16,
-	0x98,
-	0x4f,
-	0xf4,
-	0x9c,
-	0x4c,
-	0x2c,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x33,
-	0xdb,
-	0x06,
-	0x1d,
-	0xaa,
-	0x41,
-	0xf6,
-	0x88,
-	0x5b,
-	0xf7,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x40,
-	0xd1,
-	0x08,
-	0x24,
-	0xc1,
-	0x30,
-	0xf9,
-	0x81,
-	0x60,
-	0xc1,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x4d,
-	0xc7,
-	0x0a,
-	0x2b,
-	0xdd,
-	0x1b,
-	0xfd,
-	0x89,
-	0x5a,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x5a,
-	0xbe,
-	0x0b,
-	0x32,
-	0xfe,
-	0x02,
-	0x00,
-	0xa4,
-	0x46,
-	0x81,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x66,
-	0xb4,
-	0x0d,
-	0x3a,
-	0x24,
-	0xe6,
-	0x04,
-	0xd4,
-	0x22,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x73,
-	0xab,
-	0x0e,
-	0x41,
-	0x4f,
-	0xc5,
-	0x0a,
-	0x1c,
-	0xec,
-	0xe3,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x7f,
-	0xa1,
-	0x10,
-	0x7f,
-	0xa1,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x81,
-	0x50,
-	0x1c,
-	0x8e,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x81,
-	0x50,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x8e,
-	0x48,
-	0x19,
-	0x9a,
-	0x4f,
-	0xcf,
-	0xf0,
-	0xe5,
-	0x11,
-	0xe3,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x9b,
-	0x40,
-	0x16,
-	0xa5,
-	0x24,
-	0xeb,
-	0xf9,
-	0x2d,
-	0xe5,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xa7,
-	0x38,
-	0x14,
-	0xb0,
-	0xfe,
-	0x02,
-	0x01,
-	0x5d,
-	0xc7,
-	0x81,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xb4,
-	0x30,
-	0x11,
-	0xbc,
-	0xdd,
-	0x16,
-	0x08,
-	0x78,
-	0xb6,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xc1,
-	0x28,
-	0x0e,
-	0xc7,
-	0xc1,
-	0x28,
-	0x0e,
-	0x7f,
-	0xb1,
-	0xc1,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xce,
-	0x20,
-	0x0b,
-	0xd3,
-	0xaa,
-	0x36,
-	0x13,
-	0x79,
-	0xb5,
-	0xf7,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xdb,
-	0x18,
-	0x08,
-	0xdf,
-	0x98,
-	0x42,
-	0x17,
-	0x65,
-	0xc2,
-	0x2c,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xe7,
-	0x10,
-	0x06,
-	0xea,
-	0x8b,
-	0x4a,
-	0x1a,
-	0x49,
-	0xd4,
-	0x59,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xf4,
-	0x08,
-	0x03,
-	0xf6,
-	0x84,
-	0x4e,
-	0x1b,
-	0x26,
-	0xe9,
-	0x76,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x50,
-	0x1c,
-	0x00,
-	0x00,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x0d,
-	0xf9,
-	0xfe,
-	0x0c,
-	0x84,
-	0x4e,
-	0x1b,
-	0xdb,
-	0x18,
-	0x76,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x1a,
-	0xf1,
-	0xfb,
-	0x17,
-	0x8b,
-	0x4a,
-	0x1a,
-	0xb8,
-	0x2d,
-	0x59,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x26,
-	0xe9,
-	0xf9,
-	0x23,
-	0x98,
-	0x42,
-	0x17,
-	0x9c,
-	0x3f,
-	0x2c,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x33,
-	0xe1,
-	0xf6,
-	0x2e,
-	0xaa,
-	0x36,
-	0x13,
-	0x88,
-	0x4c,
-	0xf7,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x40,
-	0xd9,
-	0xf3,
-	0x3a,
-	0xc1,
-	0x28,
-	0x0e,
-	0x81,
-	0x50,
-	0xc1,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x4d,
-	0xd1,
-	0xf0,
-	0x45,
-	0xdd,
-	0x16,
-	0x08,
-	0x89,
-	0x4b,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x5a,
-	0xc9,
-	0xed,
-	0x50,
-	0xfe,
-	0x02,
-	0x01,
-	0xa4,
-	0x3a,
-	0x81,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x66,
-	0xc1,
-	0xeb,
-	0x5c,
-	0x24,
-	0xeb,
-	0xf9,
-	0xd4,
-	0x1c,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x73,
-	0xb9,
-	0xe8,
-	0x67,
-	0x4f,
-	0xcf,
-	0xf0,
-	0x1c,
-	0xf0,
-	0xe3,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x7f,
-	0xb1,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x81,
-	0x40,
-	0x40,
-	0x81,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x81,
-	0x40,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x8e,
-	0x3a,
-	0x3a,
-	0x8e,
-	0x4f,
-	0xd9,
-	0xd9,
-	0xe5,
-	0x0e,
-	0xe3,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x9b,
-	0x33,
-	0x33,
-	0x9b,
-	0x24,
-	0xef,
-	0xef,
-	0x2d,
-	0xea,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xa7,
-	0x2d,
-	0x2d,
-	0xa7,
-	0xfe,
-	0x01,
-	0x01,
-	0x5d,
-	0xd2,
-	0x81,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xb4,
-	0x26,
-	0x26,
-	0xb4,
-	0xdd,
-	0x12,
-	0x12,
-	0x78,
-	0xc5,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x20,
-	0x20,
-	0xc1,
-	0xc1,
-	0x20,
-	0x20,
-	0x7f,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xce,
-	0x1a,
-	0x1a,
-	0xce,
-	0xaa,
-	0x2c,
-	0x2c,
-	0x79,
-	0xc5,
-	0xf7,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xdb,
-	0x13,
-	0x13,
-	0xdb,
-	0x98,
-	0x34,
-	0x34,
-	0x65,
-	0xce,
-	0x2c,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xe7,
-	0x0d,
-	0x0d,
-	0xe7,
-	0x8b,
-	0x3b,
-	0x3b,
-	0x49,
-	0xdd,
-	0x59,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xf4,
-	0x06,
-	0x06,
-	0xf4,
-	0x84,
-	0x3f,
-	0x3f,
-	0x26,
-	0xee,
-	0x76,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x0d,
-	0xfb,
-	0xfb,
-	0x0d,
-	0x84,
-	0x3f,
-	0x3f,
-	0xdb,
-	0x13,
-	0x76,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x1a,
-	0xf4,
-	0xf4,
-	0x1a,
-	0x8b,
-	0x3b,
-	0x3b,
-	0xb8,
-	0x24,
-	0x59,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x26,
-	0xee,
-	0xee,
-	0x26,
-	0x98,
-	0x34,
-	0x34,
-	0x9c,
-	0x33,
-	0x2c,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x33,
-	0xe7,
-	0xe7,
-	0x33,
-	0xaa,
-	0x2c,
-	0x2c,
-	0x88,
-	0x3c,
-	0xf7,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x40,
-	0xe1,
-	0xe1,
-	0x40,
-	0xc1,
-	0x20,
-	0x20,
-	0x81,
-	0x40,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x4d,
-	0xdb,
-	0xdb,
-	0x4d,
-	0xdd,
-	0x12,
-	0x12,
-	0x89,
-	0x3c,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x5a,
-	0xd4,
-	0xd4,
-	0x5a,
-	0xfe,
-	0x01,
-	0x01,
-	0xa4,
-	0x2f,
-	0x81,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x66,
-	0xce,
-	0xce,
-	0x66,
-	0x24,
-	0xef,
-	0xef,
-	0xd4,
-	0x17,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x73,
-	0xc7,
-	0xc7,
-	0x73,
-	0x4f,
-	0xd9,
-	0xd9,
-	0x1c,
-	0xf3,
-	0xe3,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x81,
-	0x30,
-	0x5c,
-	0x8c,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x81,
-	0x30,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x8e,
-	0x2b,
-	0x53,
-	0x98,
-	0x4f,
-	0xe3,
-	0xc8,
-	0xe5,
-	0x0a,
-	0xe3,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x9b,
-	0x26,
-	0x4a,
-	0xa3,
-	0x24,
-	0xf4,
-	0xe7,
-	0x2d,
-	0xf0,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xa7,
-	0x22,
-	0x40,
-	0xaf,
-	0xfe,
-	0x01,
-	0x02,
-	0x5d,
-	0xde,
-	0x81,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xb4,
-	0x1d,
-	0x37,
-	0xbb,
-	0xdd,
-	0x0d,
-	0x1a,
-	0x78,
-	0xd4,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xc1,
-	0x18,
-	0x2e,
-	0xc6,
-	0xc1,
-	0x18,
-	0x2e,
-	0x7f,
-	0xd1,
-	0xc1,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xce,
-	0x13,
-	0x25,
-	0xd2,
-	0xaa,
-	0x21,
-	0x3f,
-	0x79,
-	0xd4,
-	0xf7,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xdb,
-	0x0e,
-	0x1c,
-	0xde,
-	0x98,
-	0x27,
-	0x4b,
-	0x65,
-	0xdb,
-	0x2c,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xe7,
-	0x0a,
-	0x12,
-	0xea,
-	0x8b,
-	0x2c,
-	0x55,
-	0x49,
-	0xe6,
-	0x59,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xf4,
-	0x05,
-	0x09,
-	0xf5,
-	0x84,
-	0x2f,
-	0x5a,
-	0x26,
-	0xf3,
-	0x76,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x30,
-	0x5c,
-	0x00,
-	0x00,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x0d,
-	0xfc,
-	0xf8,
-	0x0c,
-	0x84,
-	0x2f,
-	0x5a,
-	0xdb,
-	0x0e,
-	0x76,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x1a,
-	0xf7,
-	0xef,
-	0x17,
-	0x8b,
-	0x2c,
-	0x55,
-	0xb8,
-	0x1b,
-	0x59,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x26,
-	0xf3,
-	0xe5,
-	0x23,
-	0x98,
-	0x27,
-	0x4b,
-	0x9c,
-	0x26,
-	0x2c,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x33,
-	0xee,
-	0xdc,
-	0x2f,
-	0xaa,
-	0x21,
-	0x3f,
-	0x88,
-	0x2d,
-	0xf7,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x40,
-	0xe9,
-	0xd3,
-	0x3b,
-	0xc1,
-	0x18,
-	0x2e,
-	0x81,
-	0x30,
-	0xc1,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x4d,
-	0xe4,
-	0xca,
-	0x46,
-	0xdd,
-	0x0d,
-	0x1a,
-	0x89,
-	0x2d,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x5a,
-	0xdf,
-	0xc1,
-	0x52,
-	0xfe,
-	0x01,
-	0x02,
-	0xa4,
-	0x23,
-	0x81,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x66,
-	0xdb,
-	0xb7,
-	0x5e,
-	0x24,
-	0xf4,
-	0xe7,
-	0xd4,
-	0x11,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x73,
-	0xd6,
-	0xae,
-	0x69,
-	0x4f,
-	0xe3,
-	0xc8,
-	0x1c,
-	0xf7,
-	0xe3,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x7f,
-	0xd1,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x81,
-	0x20,
-	0x70,
-	0xa9,
-	0x7f,
-	0xe1,
-	0x91,
-	0x81,
-	0x20,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x8e,
-	0x1d,
-	0x65,
-	0xb2,
-	0x4f,
-	0xed,
-	0xbc,
-	0xe5,
-	0x07,
-	0xe3,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x9b,
-	0x1a,
-	0x5a,
-	0xbb,
-	0x24,
-	0xf8,
-	0xe2,
-	0x2d,
-	0xf6,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xa7,
-	0x16,
-	0x4e,
-	0xc3,
-	0xfe,
-	0x01,
-	0x02,
-	0x5d,
-	0xea,
-	0x81,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xb4,
-	0x13,
-	0x43,
-	0xcc,
-	0xdd,
-	0x09,
-	0x1f,
-	0x78,
-	0xe3,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xc1,
-	0x10,
-	0x38,
-	0xd5,
-	0xc1,
-	0x10,
-	0x38,
-	0x7f,
-	0xe1,
-	0xc1,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xce,
-	0x0d,
-	0x2d,
-	0xde,
-	0xaa,
-	0x16,
-	0x4c,
-	0x79,
-	0xe3,
-	0xf7,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xdb,
-	0x0a,
-	0x22,
-	0xe7,
-	0x98,
-	0x1a,
-	0x5c,
-	0x65,
-	0xe8,
-	0x2c,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xe7,
-	0x06,
-	0x16,
-	0xef,
-	0x8b,
-	0x1d,
-	0x67,
-	0x49,
-	0xef,
-	0x59,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xf4,
-	0x03,
-	0x0b,
-	0xf8,
-	0x84,
-	0x1f,
-	0x6e,
-	0x26,
-	0xf8,
-	0x76,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x20,
-	0x70,
-	0x00,
-	0x00,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x0d,
-	0xfe,
-	0xf6,
-	0x09,
-	0x84,
-	0x1f,
-	0x6e,
-	0xdb,
-	0x09,
-	0x76,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x1a,
-	0xfb,
-	0xeb,
-	0x12,
-	0x8b,
-	0x1d,
-	0x67,
-	0xb8,
-	0x12,
-	0x59,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x26,
-	0xf7,
-	0xdf,
-	0x1a,
-	0x98,
-	0x1a,
-	0x5c,
-	0x9c,
-	0x19,
-	0x2c,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x33,
-	0xf4,
-	0xd4,
-	0x23,
-	0xaa,
-	0x16,
-	0x4c,
-	0x88,
-	0x1e,
-	0xf7,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x40,
-	0xf1,
-	0xc9,
-	0x2c,
-	0xc1,
-	0x10,
-	0x38,
-	0x81,
-	0x20,
-	0xc1,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x4d,
-	0xee,
-	0xbe,
-	0x35,
-	0xdd,
-	0x09,
-	0x1f,
-	0x89,
-	0x1e,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x5a,
-	0xeb,
-	0xb3,
-	0x3e,
-	0xfe,
-	0x01,
-	0x02,
-	0xa4,
-	0x17,
-	0x81,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x66,
-	0xe7,
-	0xa7,
-	0x46,
-	0x24,
-	0xf8,
-	0xe2,
-	0xd4,
-	0x0b,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x73,
-	0xe4,
-	0x9c,
-	0x4f,
-	0x4f,
-	0xed,
-	0xbc,
-	0x1c,
-	0xfa,
-	0xe3,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x7f,
-	0xe1,
-	0x91,
-	0x7f,
-	0xe1,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x81,
-	0x10,
-	0x7c,
-	0xd2,
-	0x7f,
-	0xf1,
-	0x85,
-	0x81,
-	0x10,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x8e,
-	0x0e,
-	0x70,
-	0xd7,
-	0x4f,
-	0xf7,
-	0xb4,
-	0xe5,
-	0x03,
-	0xe3,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x9b,
-	0x0d,
-	0x63,
-	0xdb,
-	0x24,
-	0xfd,
-	0xde,
-	0x2d,
-	0xfb,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xa7,
-	0x0b,
-	0x57,
-	0xe0,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0xf5,
-	0x81,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xb4,
-	0x0a,
-	0x4a,
-	0xe5,
-	0xdd,
-	0x04,
-	0x23,
-	0x78,
-	0xf2,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xc1,
-	0x08,
-	0x3e,
-	0xe9,
-	0xc1,
-	0x08,
-	0x3e,
-	0x7f,
-	0xf1,
-	0xc1,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xce,
-	0x06,
-	0x32,
-	0xee,
-	0xaa,
-	0x0b,
-	0x54,
-	0x79,
-	0xf2,
-	0xf7,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xdb,
-	0x05,
-	0x25,
-	0xf3,
-	0x98,
-	0x0d,
-	0x66,
-	0x65,
-	0xf4,
-	0x2c,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xe7,
-	0x03,
-	0x19,
-	0xf8,
-	0x8b,
-	0x0f,
-	0x72,
-	0x49,
-	0xf8,
-	0x59,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xf4,
-	0x02,
-	0x0c,
-	0xfc,
-	0x84,
-	0x10,
-	0x7a,
-	0x26,
-	0xfc,
-	0x76,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x10,
-	0x7c,
-	0x00,
-	0x00,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x0d,
-	0xff,
-	0xf5,
-	0x05,
-	0x84,
-	0x10,
-	0x7a,
-	0xdb,
-	0x05,
-	0x76,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x1a,
-	0xfe,
-	0xe8,
-	0x09,
-	0x8b,
-	0x0f,
-	0x72,
-	0xb8,
-	0x09,
-	0x59,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x26,
-	0xfc,
-	0xdc,
-	0x0e,
-	0x98,
-	0x0d,
-	0x66,
-	0x9c,
-	0x0d,
-	0x2c,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x33,
-	0xfb,
-	0xcf,
-	0x13,
-	0xaa,
-	0x0b,
-	0x54,
-	0x88,
-	0x0f,
-	0xf7,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x40,
-	0xf9,
-	0xc3,
-	0x18,
-	0xc1,
-	0x08,
-	0x3e,
-	0x81,
-	0x10,
-	0xc1,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x4d,
-	0xf7,
-	0xb7,
-	0x1c,
-	0xdd,
-	0x04,
-	0x23,
-	0x89,
-	0x0f,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x5a,
-	0xf6,
-	0xaa,
-	0x21,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0x0c,
-	0x81,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x66,
-	0xf4,
-	0x9e,
-	0x26,
-	0x24,
-	0xfd,
-	0xde,
-	0xd4,
-	0x06,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x73,
-	0xf3,
-	0x91,
-	0x2a,
-	0x4f,
-	0xf7,
-	0xb4,
-	0x1c,
-	0xfe,
-	0xe3,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x7f,
-	0xf1,
-	0x85,
-	0x7f,
-	0xf1,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x8e,
-	0x00,
-	0x73,
-	0x00,
-	0x4f,
-	0x00,
-	0xb2,
-	0xe5,
-	0x00,
-	0xe3,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x9b,
-	0x00,
-	0x66,
-	0x00,
-	0x24,
-	0x00,
-	0xdd,
-	0x2d,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xa7,
-	0x00,
-	0x5a,
-	0x00,
-	0xfe,
-	0x00,
-	0x03,
-	0x5d,
-	0x00,
-	0x81,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xb4,
-	0x00,
-	0x4d,
-	0x00,
-	0xdd,
-	0x00,
-	0x24,
-	0x78,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xc1,
-	0x00,
-	0x40,
-	0x00,
-	0xc1,
-	0x00,
-	0x40,
-	0x7f,
-	0x00,
-	0xc1,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xce,
-	0x00,
-	0x33,
-	0x00,
-	0xaa,
-	0x00,
-	0x57,
-	0x79,
-	0x00,
-	0xf7,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xdb,
-	0x00,
-	0x26,
-	0x00,
-	0x98,
-	0x00,
-	0x69,
-	0x65,
-	0x00,
-	0x2c,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xe7,
-	0x00,
-	0x1a,
-	0x00,
-	0x8b,
-	0x00,
-	0x76,
-	0x49,
-	0x00,
-	0x59,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xf4,
-	0x00,
-	0x0d,
-	0x00,
-	0x84,
-	0x00,
-	0x7d,
-	0x26,
-	0x00,
-	0x76,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x0d,
-	0x00,
-	0xf4,
-	0x00,
-	0x84,
-	0x00,
-	0x7d,
-	0xdb,
-	0x00,
-	0x76,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x1a,
-	0x00,
-	0xe7,
-	0x00,
-	0x8b,
-	0x00,
-	0x76,
-	0xb8,
-	0x00,
-	0x59,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x26,
-	0x00,
-	0xdb,
-	0x00,
-	0x98,
-	0x00,
-	0x69,
-	0x9c,
-	0x00,
-	0x2c,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x33,
-	0x00,
-	0xce,
-	0x00,
-	0xaa,
-	0x00,
-	0x57,
-	0x88,
-	0x00,
-	0xf7,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x40,
-	0x00,
-	0xc1,
-	0x00,
-	0xc1,
-	0x00,
-	0x40,
-	0x81,
-	0x00,
-	0xc1,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x4d,
-	0x00,
-	0xb4,
-	0x00,
-	0xdd,
-	0x00,
-	0x24,
-	0x89,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x5a,
-	0x00,
-	0xa7,
-	0x00,
-	0xfe,
-	0x00,
-	0x03,
-	0xa4,
-	0x00,
-	0x81,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x66,
-	0x00,
-	0x9b,
-	0x00,
-	0x24,
-	0x00,
-	0xdd,
-	0xd4,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x73,
-	0x00,
-	0x8e,
-	0x00,
-	0x4f,
-	0x00,
-	0xb2,
-	0x1c,
-	0x00,
-	0xe3,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x7f,
-	0x00,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x81,
-	0xf1,
-	0x7c,
-	0x2f,
-	0x7f,
-	0x10,
-	0x85,
-	0x81,
-	0xf1,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x8e,
-	0xf3,
-	0x70,
-	0x2a,
-	0x4f,
-	0x0a,
-	0xb4,
-	0xe5,
-	0xfe,
-	0xe3,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x9b,
-	0xf4,
-	0x63,
-	0x26,
-	0x24,
-	0x04,
-	0xde,
-	0x2d,
-	0x06,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xa7,
-	0xf6,
-	0x57,
-	0x21,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0x0c,
-	0x81,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xb4,
-	0xf7,
-	0x4a,
-	0x1c,
-	0xdd,
-	0xfd,
-	0x23,
-	0x78,
-	0x0f,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xc1,
-	0xf9,
-	0x3e,
-	0x17,
-	0xc1,
-	0xf9,
-	0x3e,
-	0x7f,
-	0x10,
-	0xc1,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xce,
-	0xfb,
-	0x32,
-	0x13,
-	0xaa,
-	0xf6,
-	0x54,
-	0x79,
-	0x0f,
-	0xf7,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xdb,
-	0xfc,
-	0x25,
-	0x0e,
-	0x98,
-	0xf4,
-	0x66,
-	0x65,
-	0x0d,
-	0x2c,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xe7,
-	0xfe,
-	0x19,
-	0x09,
-	0x8b,
-	0xf2,
-	0x72,
-	0x49,
-	0x09,
-	0x59,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xf4,
-	0xff,
-	0x0c,
-	0x05,
-	0x84,
-	0xf1,
-	0x7a,
-	0x26,
-	0x05,
-	0x76,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xf1,
-	0x7c,
-	0x00,
-	0x00,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x0d,
-	0x02,
-	0xf5,
-	0xfc,
-	0x84,
-	0xf1,
-	0x7a,
-	0xdb,
-	0xfc,
-	0x76,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x1a,
-	0x03,
-	0xe8,
-	0xf8,
-	0x8b,
-	0xf2,
-	0x72,
-	0xb8,
-	0xf8,
-	0x59,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x26,
-	0x05,
-	0xdc,
-	0xf3,
-	0x98,
-	0xf4,
-	0x66,
-	0x9c,
-	0xf4,
-	0x2c,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x33,
-	0x06,
-	0xcf,
-	0xee,
-	0xaa,
-	0xf6,
-	0x54,
-	0x88,
-	0xf2,
-	0xf7,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x40,
-	0x08,
-	0xc3,
-	0xea,
-	0xc1,
-	0xf9,
-	0x3e,
-	0x81,
-	0xf1,
-	0xc1,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x4d,
-	0x0a,
-	0xb7,
-	0xe5,
-	0xdd,
-	0xfd,
-	0x23,
-	0x89,
-	0xf2,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x5a,
-	0x0b,
-	0xaa,
-	0xe0,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0xf5,
-	0x81,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x66,
-	0x0d,
-	0x9e,
-	0xdb,
-	0x24,
-	0x04,
-	0xde,
-	0xd4,
-	0xfb,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x73,
-	0x0e,
-	0x91,
-	0xd7,
-	0x4f,
-	0x0a,
-	0xb4,
-	0x1c,
-	0x03,
-	0xe3,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x7f,
-	0x10,
-	0x85,
-	0x7f,
-	0x10,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x81,
-	0xe1,
-	0x70,
-	0x58,
-	0x7f,
-	0x20,
-	0x91,
-	0x81,
-	0xe1,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x8e,
-	0xe4,
-	0x65,
-	0x4f,
-	0x4f,
-	0x14,
-	0xbc,
-	0xe5,
-	0xfa,
-	0xe3,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x9b,
-	0xe7,
-	0x5a,
-	0x46,
-	0x24,
-	0x09,
-	0xe2,
-	0x2d,
-	0x0b,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xa7,
-	0xeb,
-	0x4e,
-	0x3e,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0x17,
-	0x81,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xb4,
-	0xee,
-	0x43,
-	0x35,
-	0xdd,
-	0xf8,
-	0x1f,
-	0x78,
-	0x1e,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xc1,
-	0xf1,
-	0x38,
-	0x2c,
-	0xc1,
-	0xf1,
-	0x38,
-	0x7f,
-	0x20,
-	0xc1,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xce,
-	0xf4,
-	0x2d,
-	0x23,
-	0xaa,
-	0xeb,
-	0x4c,
-	0x79,
-	0x1e,
-	0xf7,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xdb,
-	0xf7,
-	0x22,
-	0x1a,
-	0x98,
-	0xe7,
-	0x5c,
-	0x65,
-	0x19,
-	0x2c,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xe7,
-	0xfb,
-	0x16,
-	0x12,
-	0x8b,
-	0xe4,
-	0x67,
-	0x49,
-	0x12,
-	0x59,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xf4,
-	0xfe,
-	0x0b,
-	0x09,
-	0x84,
-	0xe2,
-	0x6e,
-	0x26,
-	0x09,
-	0x76,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xe1,
-	0x70,
-	0x00,
-	0x00,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x0d,
-	0x03,
-	0xf6,
-	0xf8,
-	0x84,
-	0xe2,
-	0x6e,
-	0xdb,
-	0xf8,
-	0x76,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x1a,
-	0x06,
-	0xeb,
-	0xef,
-	0x8b,
-	0xe4,
-	0x67,
-	0xb8,
-	0xef,
-	0x59,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x26,
-	0x0a,
-	0xdf,
-	0xe7,
-	0x98,
-	0xe7,
-	0x5c,
-	0x9c,
-	0xe8,
-	0x2c,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x33,
-	0x0d,
-	0xd4,
-	0xde,
-	0xaa,
-	0xeb,
-	0x4c,
-	0x88,
-	0xe3,
-	0xf7,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x40,
-	0x10,
-	0xc9,
-	0xd5,
-	0xc1,
-	0xf1,
-	0x38,
-	0x81,
-	0xe1,
-	0xc1,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x4d,
-	0x13,
-	0xbe,
-	0xcc,
-	0xdd,
-	0xf8,
-	0x1f,
-	0x89,
-	0xe3,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x5a,
-	0x16,
-	0xb3,
-	0xc3,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0xea,
-	0x81,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x66,
-	0x1a,
-	0xa7,
-	0xbb,
-	0x24,
-	0x09,
-	0xe2,
-	0xd4,
-	0xf6,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x73,
-	0x1d,
-	0x9c,
-	0xb2,
-	0x4f,
-	0x14,
-	0xbc,
-	0x1c,
-	0x07,
-	0xe3,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x7f,
-	0x20,
-	0x91,
-	0x7f,
-	0x20,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x81,
-	0xd1,
-	0x5c,
-	0x75,
-	0x7f,
-	0x30,
-	0xa5,
-	0x81,
-	0xd1,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x8e,
-	0xd6,
-	0x53,
-	0x69,
-	0x4f,
-	0x1e,
-	0xc8,
-	0xe5,
-	0xf7,
-	0xe3,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x9b,
-	0xdb,
-	0x4a,
-	0x5e,
-	0x24,
-	0x0d,
-	0xe7,
-	0x2d,
-	0x11,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xa7,
-	0xdf,
-	0x40,
-	0x52,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0x23,
-	0x81,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xb4,
-	0xe4,
-	0x37,
-	0x46,
-	0xdd,
-	0xf4,
-	0x1a,
-	0x78,
-	0x2d,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xc1,
-	0xe9,
-	0x2e,
-	0x3b,
-	0xc1,
-	0xe9,
-	0x2e,
-	0x7f,
-	0x30,
-	0xc1,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xce,
-	0xee,
-	0x25,
-	0x2f,
-	0xaa,
-	0xe0,
-	0x3f,
-	0x79,
-	0x2d,
-	0xf7,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xdb,
-	0xf3,
-	0x1c,
-	0x23,
-	0x98,
-	0xda,
-	0x4b,
-	0x65,
-	0x26,
-	0x2c,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xe7,
-	0xf7,
-	0x12,
-	0x17,
-	0x8b,
-	0xd5,
-	0x55,
-	0x49,
-	0x1b,
-	0x59,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xf4,
-	0xfc,
-	0x09,
-	0x0c,
-	0x84,
-	0xd2,
-	0x5a,
-	0x26,
-	0x0e,
-	0x76,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xd1,
-	0x5c,
-	0x00,
-	0x00,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x0d,
-	0x05,
-	0xf8,
-	0xf5,
-	0x84,
-	0xd2,
-	0x5a,
-	0xdb,
-	0xf3,
-	0x76,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x1a,
-	0x0a,
-	0xef,
-	0xea,
-	0x8b,
-	0xd5,
-	0x55,
-	0xb8,
-	0xe6,
-	0x59,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x26,
-	0x0e,
-	0xe5,
-	0xde,
-	0x98,
-	0xda,
-	0x4b,
-	0x9c,
-	0xdb,
-	0x2c,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x33,
-	0x13,
-	0xdc,
-	0xd2,
-	0xaa,
-	0xe0,
-	0x3f,
-	0x88,
-	0xd4,
-	0xf7,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x40,
-	0x18,
-	0xd3,
-	0xc6,
-	0xc1,
-	0xe9,
-	0x2e,
-	0x81,
-	0xd1,
-	0xc1,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x4d,
-	0x1d,
-	0xca,
-	0xbb,
-	0xdd,
-	0xf4,
-	0x1a,
-	0x89,
-	0xd4,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x5a,
-	0x22,
-	0xc1,
-	0xaf,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0xde,
-	0x81,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x66,
-	0x26,
-	0xb7,
-	0xa3,
-	0x24,
-	0x0d,
-	0xe7,
-	0xd4,
-	0xf0,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x73,
-	0x2b,
-	0xae,
-	0x98,
-	0x4f,
-	0x1e,
-	0xc8,
-	0x1c,
-	0x0a,
-	0xe3,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x7f,
-	0x30,
-	0xa5,
-	0x7f,
-	0x30,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x81,
-	0xc1,
-	0x40,
-	0x7f,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x8e,
-	0xc7,
-	0x3a,
-	0x73,
-	0x4f,
-	0x28,
-	0xd9,
-	0xe5,
-	0xf3,
-	0xe3,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x9b,
-	0xce,
-	0x33,
-	0x66,
-	0x24,
-	0x12,
-	0xef,
-	0x2d,
-	0x17,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xa7,
-	0xd4,
-	0x2d,
-	0x5a,
-	0xfe,
-	0x00,
-	0x01,
-	0x5d,
-	0x2f,
-	0x81,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xb4,
-	0xdb,
-	0x26,
-	0x4d,
-	0xdd,
-	0xef,
-	0x12,
-	0x78,
-	0x3c,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xc1,
-	0xe1,
-	0x20,
-	0x40,
-	0xc1,
-	0xe1,
-	0x20,
-	0x7f,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xce,
-	0xe7,
-	0x1a,
-	0x33,
-	0xaa,
-	0xd5,
-	0x2c,
-	0x79,
-	0x3c,
-	0xf7,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xdb,
-	0xee,
-	0x13,
-	0x26,
-	0x98,
-	0xcd,
-	0x34,
-	0x65,
-	0x33,
-	0x2c,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xe7,
-	0xf4,
-	0x0d,
-	0x1a,
-	0x8b,
-	0xc6,
-	0x3b,
-	0x49,
-	0x24,
-	0x59,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xf4,
-	0xfb,
-	0x06,
-	0x0d,
-	0x84,
-	0xc2,
-	0x3f,
-	0x26,
-	0x13,
-	0x76,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xc1,
-	0x40,
-	0x00,
-	0x00,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x0d,
-	0x06,
-	0xfb,
-	0xf4,
-	0x84,
-	0xc2,
-	0x3f,
-	0xdb,
-	0xee,
-	0x76,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x1a,
-	0x0d,
-	0xf4,
-	0xe7,
-	0x8b,
-	0xc6,
-	0x3b,
-	0xb8,
-	0xdd,
-	0x59,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x26,
-	0x13,
-	0xee,
-	0xdb,
-	0x98,
-	0xcd,
-	0x34,
-	0x9c,
-	0xce,
-	0x2c,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x33,
-	0x1a,
-	0xe7,
-	0xce,
-	0xaa,
-	0xd5,
-	0x2c,
-	0x88,
-	0xc5,
-	0xf7,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x40,
-	0x20,
-	0xe1,
-	0xc1,
-	0xc1,
-	0xe1,
-	0x20,
-	0x81,
-	0xc1,
-	0xc1,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x4d,
-	0x26,
-	0xdb,
-	0xb4,
-	0xdd,
-	0xef,
-	0x12,
-	0x89,
-	0xc5,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x5a,
-	0x2d,
-	0xd4,
-	0xa7,
-	0xfe,
-	0x00,
-	0x01,
-	0xa4,
-	0xd2,
-	0x81,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x66,
-	0x33,
-	0xce,
-	0x9b,
-	0x24,
-	0x12,
-	0xef,
-	0xd4,
-	0xea,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x73,
-	0x3a,
-	0xc7,
-	0x8e,
-	0x4f,
-	0x28,
-	0xd9,
-	0x1c,
-	0x0e,
-	0xe3,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0x7f,
-	0x40,
-	0xc1,
-	0x7f,
-	0x40,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x81,
-	0xb1,
-	0x1c,
-	0x73,
-	0x7f,
-	0x50,
-	0xe5,
-	0x81,
-	0xb1,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x8e,
-	0xb9,
-	0x19,
-	0x68,
-	0x4f,
-	0x32,
-	0xf0,
-	0xe5,
-	0xf0,
-	0xe3,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x9b,
-	0xc1,
-	0x16,
-	0x5c,
-	0x24,
-	0x16,
-	0xf9,
-	0x2d,
-	0x1c,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xa7,
-	0xc9,
-	0x14,
-	0x51,
-	0xfe,
-	0xff,
-	0x01,
-	0x5d,
-	0x3a,
-	0x81,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xb4,
-	0xd1,
-	0x11,
-	0x45,
-	0xdd,
-	0xeb,
-	0x08,
-	0x78,
-	0x4b,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xc1,
-	0xd9,
-	0x0e,
-	0x3a,
-	0xc1,
-	0xd9,
-	0x0e,
-	0x7f,
-	0x50,
-	0xc1,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xce,
-	0xe1,
-	0x0b,
-	0x2e,
-	0xaa,
-	0xcb,
-	0x13,
-	0x79,
-	0x4c,
-	0xf7,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xdb,
-	0xe9,
-	0x08,
-	0x23,
-	0x98,
-	0xbf,
-	0x17,
-	0x65,
-	0x3f,
-	0x2c,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xe7,
-	0xf1,
-	0x06,
-	0x17,
-	0x8b,
-	0xb7,
-	0x1a,
-	0x49,
-	0x2d,
-	0x59,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xf4,
-	0xf9,
-	0x03,
-	0x0b,
-	0x84,
-	0xb3,
-	0x1b,
-	0x26,
-	0x18,
-	0x76,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xb1,
-	0x1c,
-	0x00,
-	0x00,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x0d,
-	0x08,
-	0xfe,
-	0xf5,
-	0x84,
-	0xb3,
-	0x1b,
-	0xdb,
-	0xe9,
-	0x76,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x1a,
-	0x10,
-	0xfb,
-	0xea,
-	0x8b,
-	0xb7,
-	0x1a,
-	0xb8,
-	0xd4,
-	0x59,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x26,
-	0x18,
-	0xf9,
-	0xde,
-	0x98,
-	0xbf,
-	0x17,
-	0x9c,
-	0xc2,
-	0x2c,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x33,
-	0x20,
-	0xf6,
-	0xd3,
-	0xaa,
-	0xcb,
-	0x13,
-	0x88,
-	0xb5,
-	0xf7,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x40,
-	0x28,
-	0xf3,
-	0xc7,
-	0xc1,
-	0xd9,
-	0x0e,
-	0x81,
-	0xb1,
-	0xc1,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x4d,
-	0x30,
-	0xf0,
-	0xbc,
-	0xdd,
-	0xeb,
-	0x08,
-	0x89,
-	0xb6,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x5a,
-	0x38,
-	0xed,
-	0xb0,
-	0xfe,
-	0xff,
-	0x01,
-	0xa4,
-	0xc7,
-	0x81,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x66,
-	0x40,
-	0xeb,
-	0xa5,
-	0x24,
-	0x16,
-	0xf9,
-	0xd4,
-	0xe5,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x73,
-	0x48,
-	0xe8,
-	0x99,
-	0x4f,
-	0x32,
-	0xf0,
-	0x1c,
-	0x11,
-	0xe3,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x7f,
-	0x50,
-	0xe5,
-	0x7f,
-	0x50,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x81,
-	0xa1,
-	0xf1,
-	0x48,
-	0x7f,
-	0x60,
-	0x10,
-	0x81,
-	0xa1,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x8e,
-	0xab,
-	0xf3,
-	0x41,
-	0x4f,
-	0x3c,
-	0x0a,
-	0xe5,
-	0xec,
-	0xe3,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x9b,
-	0xb4,
-	0xf4,
-	0x3a,
-	0x24,
-	0x1b,
-	0x04,
-	0x2d,
-	0x22,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xa7,
-	0xbe,
-	0xf6,
-	0x32,
-	0xfe,
-	0xff,
-	0x00,
-	0x5d,
-	0x46,
-	0x81,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xb4,
-	0xc7,
-	0xf7,
-	0x2b,
-	0xdd,
-	0xe6,
-	0xfd,
-	0x78,
-	0x5a,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xc1,
-	0xd1,
-	0xf9,
-	0x24,
-	0xc1,
-	0xd1,
-	0xf9,
-	0x7f,
-	0x60,
-	0xc1,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xce,
-	0xdb,
-	0xfb,
-	0x1d,
-	0xaa,
-	0xc0,
-	0xf6,
-	0x79,
-	0x5b,
-	0xf7,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xdb,
-	0xe4,
-	0xfc,
-	0x16,
-	0x98,
-	0xb2,
-	0xf4,
-	0x65,
-	0x4c,
-	0x2c,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xe7,
-	0xee,
-	0xfe,
-	0x0e,
-	0x8b,
-	0xa9,
-	0xf2,
-	0x49,
-	0x37,
-	0x59,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xf4,
-	0xf7,
-	0xff,
-	0x07,
-	0x84,
-	0xa3,
-	0xf1,
-	0x26,
-	0x1c,
-	0x76,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xa1,
-	0xf1,
-	0x00,
-	0x00,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x0d,
-	0x0a,
-	0x02,
-	0xfa,
-	0x84,
-	0xa3,
-	0xf1,
-	0xdb,
-	0xe5,
-	0x76,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x1a,
-	0x13,
-	0x03,
-	0xf3,
-	0x8b,
-	0xa9,
-	0xf2,
-	0xb8,
-	0xca,
-	0x59,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x26,
-	0x1d,
-	0x05,
-	0xeb,
-	0x98,
-	0xb2,
-	0xf4,
-	0x9c,
-	0xb5,
-	0x2c,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x33,
-	0x26,
-	0x06,
-	0xe4,
-	0xaa,
-	0xc0,
-	0xf6,
-	0x88,
-	0xa6,
-	0xf7,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x40,
-	0x30,
-	0x08,
-	0xdd,
-	0xc1,
-	0xd1,
-	0xf9,
-	0x81,
-	0xa1,
-	0xc1,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x4d,
-	0x3a,
-	0x0a,
-	0xd6,
-	0xdd,
-	0xe6,
-	0xfd,
-	0x89,
-	0xa7,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x5a,
-	0x43,
-	0x0b,
-	0xcf,
-	0xfe,
-	0xff,
-	0x00,
-	0xa4,
-	0xbb,
-	0x81,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x66,
-	0x4d,
-	0x0d,
-	0xc7,
-	0x24,
-	0x1b,
-	0x04,
-	0xd4,
-	0xdf,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x73,
-	0x56,
-	0x0e,
-	0xc0,
-	0x4f,
-	0x3c,
-	0x0a,
-	0x1c,
-	0x15,
-	0xe3,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x7f,
-	0x60,
-	0x10,
-	0x7f,
-	0x60,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x81,
-	0x91,
-	0xbd,
-	0xfa,
-	0x7f,
-	0x70,
-	0x44,
-	0x81,
-	0x91,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x8e,
-	0x9c,
-	0xc4,
-	0xfb,
-	0x4f,
-	0x45,
-	0x2a,
-	0xe5,
-	0xe9,
-	0xe3,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x9b,
-	0xa7,
-	0xcb,
-	0xfb,
-	0x24,
-	0x1f,
-	0x13,
-	0x2d,
-	0x27,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xa7,
-	0xb3,
-	0xd1,
-	0xfc,
-	0xfe,
-	0xff,
-	0x00,
-	0x5d,
-	0x52,
-	0x81,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xb4,
-	0xbe,
-	0xd8,
-	0xfd,
-	0xdd,
-	0xe2,
-	0xee,
-	0x78,
-	0x69,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xc1,
-	0xc9,
-	0xdf,
-	0xfe,
-	0xc1,
-	0xc9,
-	0xdf,
-	0x7f,
-	0x70,
-	0xc1,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xce,
-	0xd4,
-	0xe6,
-	0xfe,
-	0xaa,
-	0xb5,
-	0xd3,
-	0x79,
-	0x6a,
-	0xf7,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xdb,
-	0xdf,
-	0xed,
-	0xff,
-	0x98,
-	0xa5,
-	0xc9,
-	0x65,
-	0x59,
-	0x2c,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xe7,
-	0xeb,
-	0xf3,
-	0x00,
-	0x8b,
-	0x9a,
-	0xc2,
-	0x49,
-	0x40,
-	0x59,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xf4,
-	0xf6,
-	0xfa,
-	0x00,
-	0x84,
-	0x93,
-	0xbe,
-	0x26,
-	0x21,
-	0x76,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x91,
-	0xbd,
-	0x00,
-	0x00,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x0d,
-	0x0b,
-	0x07,
-	0x01,
-	0x84,
-	0x93,
-	0xbe,
-	0xdb,
-	0xe0,
-	0x76,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x1a,
-	0x16,
-	0x0e,
-	0x01,
-	0x8b,
-	0x9a,
-	0xc2,
-	0xb8,
-	0xc1,
-	0x59,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x26,
-	0x22,
-	0x14,
-	0x02,
-	0x98,
-	0xa5,
-	0xc9,
-	0x9c,
-	0xa8,
-	0x2c,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x33,
-	0x2d,
-	0x1b,
-	0x03,
-	0xaa,
-	0xb5,
-	0xd3,
-	0x88,
-	0x97,
-	0xf7,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x40,
-	0x38,
-	0x22,
-	0x03,
-	0xc1,
-	0xc9,
-	0xdf,
-	0x81,
-	0x91,
-	0xc1,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x4d,
-	0x43,
-	0x29,
-	0x04,
-	0xdd,
-	0xe2,
-	0xee,
-	0x89,
-	0x98,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x5a,
-	0x4e,
-	0x30,
-	0x05,
-	0xfe,
-	0xff,
-	0x00,
-	0xa4,
-	0xaf,
-	0x81,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x66,
-	0x5a,
-	0x36,
-	0x06,
-	0x24,
-	0x1f,
-	0x13,
-	0xd4,
-	0xda,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x73,
-	0x65,
-	0x3d,
-	0x06,
-	0x4f,
-	0x45,
-	0x2a,
-	0x1c,
-	0x18,
-	0xe3,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0x7f,
-	0x70,
-	0x44,
-	0x7f,
-	0x70,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x81,
-	0x81,
-	0x81,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x81,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x8e,
-	0x8e,
-	0x8e,
-	0x8e,
-	0x4f,
-	0x4f,
-	0x4f,
-	0xe5,
-	0xe5,
-	0xe3,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x9b,
-	0x9b,
-	0x9b,
-	0x9b,
-	0x24,
-	0x24,
-	0x24,
-	0x2d,
-	0x2d,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xa7,
-	0xa7,
-	0xa7,
-	0xa7,
-	0xfe,
-	0xfe,
-	0xfe,
-	0x5d,
-	0x5d,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xb4,
-	0xb4,
-	0xb4,
-	0xb4,
-	0xdd,
-	0xdd,
-	0xdd,
-	0x78,
-	0x78,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x7f,
-	0x7f,
-	0xc1,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xce,
-	0xce,
-	0xce,
-	0xce,
-	0xaa,
-	0xaa,
-	0xaa,
-	0x79,
-	0x79,
-	0xf7,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xdb,
-	0xdb,
-	0xdb,
-	0xdb,
-	0x98,
-	0x98,
-	0x98,
-	0x65,
-	0x65,
-	0x2c,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xe7,
-	0xe7,
-	0xe7,
-	0xe7,
-	0x8b,
-	0x8b,
-	0x8b,
-	0x49,
-	0x49,
-	0x59,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xf4,
-	0xf4,
-	0xf4,
-	0xf4,
-	0x84,
-	0x84,
-	0x84,
-	0x26,
-	0x26,
-	0x76,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x81,
-	0x81,
-	0x00,
-	0x00,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x84,
-	0x84,
-	0x84,
-	0xdb,
-	0xdb,
-	0x76,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x1a,
-	0x1a,
-	0x1a,
-	0x1a,
-	0x8b,
-	0x8b,
-	0x8b,
-	0xb8,
-	0xb8,
-	0x59,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x26,
-	0x26,
-	0x26,
-	0x26,
-	0x98,
-	0x98,
-	0x98,
-	0x9c,
-	0x9c,
-	0x2c,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0xaa,
-	0xaa,
-	0xaa,
-	0x88,
-	0x88,
-	0xf7,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x81,
-	0x81,
-	0xc1,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x4d,
-	0x4d,
-	0x4d,
-	0x4d,
-	0xdd,
-	0xdd,
-	0xdd,
-	0x89,
-	0x89,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x5a,
-	0x5a,
-	0x5a,
-	0x5a,
-	0xfe,
-	0xfe,
-	0xfe,
-	0xa4,
-	0xa4,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x66,
-	0x66,
-	0x66,
-	0x66,
-	0x24,
-	0x24,
-	0x24,
-	0xd4,
-	0xd4,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x73,
-	0x73,
-	0x73,
-	0x73,
-	0x4f,
-	0x4f,
-	0x4f,
-	0x1c,
-	0x1c,
-	0xe3,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xa2,
-	0x36,
-	0x24,
-	0x1b,
-	0x19,
-	0x45,
-	0x39,
-	0x20,
-	0x19,
-	0x19,
-	0x30,
-	0x2a,
-	0x19,
-	0x17,
-	0x26,
-	0x21,
-	0x19,
-	0x15,
-	0x17,
-	0x23,
-	0x20,
-	0x19,
-	0x17,
-	0x16,
-	0x36,
-	0x66,
-	0x23,
-	0x1e,
-	0x1b,
-	0x3b,
-	0x32,
-	0x25,
-	0x1a,
-	0x1b,
-	0x29,
-	0x28,
-	0x1a,
-	0x18,
-	0x23,
-	0x1e,
-	0x18,
-	0x15,
-	0x17,
-	0x20,
-	0x1e,
-	0x18,
-	0x17,
-	0x17,
-	0x24,
-	0x23,
-	0x5a,
-	0x23,
-	0x24,
-	0x21,
-	0x24,
-	0x28,
-	0x24,
-	0x21,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x1a,
-	0x17,
-	0x16,
-	0x17,
-	0x1a,
-	0x19,
-	0x18,
-	0x15,
-	0x18,
-	0x19,
-	0x1b,
-	0x1e,
-	0x23,
-	0x66,
-	0x36,
-	0x1b,
-	0x1a,
-	0x25,
-	0x32,
-	0x3b,
-	0x18,
-	0x1a,
-	0x28,
-	0x29,
-	0x17,
-	0x15,
-	0x18,
-	0x1e,
-	0x23,
-	0x17,
-	0x17,
-	0x18,
-	0x1e,
-	0x20,
-	0x19,
-	0x1b,
-	0x24,
-	0x36,
-	0xa2,
-	0x19,
-	0x19,
-	0x20,
-	0x39,
-	0x45,
-	0x17,
-	0x19,
-	0x2a,
-	0x30,
-	0x17,
-	0x15,
-	0x19,
-	0x21,
-	0x26,
-	0x16,
-	0x17,
-	0x19,
-	0x20,
-	0x23,
-	0x45,
-	0x3b,
-	0x21,
-	0x1b,
-	0x19,
-	0x6e,
-	0x30,
-	0x21,
-	0x18,
-	0x19,
-	0x32,
-	0x2e,
-	0x19,
-	0x17,
-	0x2a,
-	0x23,
-	0x1a,
-	0x16,
-	0x17,
-	0x26,
-	0x23,
-	0x1a,
-	0x17,
-	0x17,
-	0x39,
-	0x32,
-	0x24,
-	0x1a,
-	0x19,
-	0x30,
-	0x45,
-	0x1e,
-	0x18,
-	0x18,
-	0x2b,
-	0x27,
-	0x18,
-	0x16,
-	0x23,
-	0x1e,
-	0x17,
-	0x14,
-	0x16,
-	0x21,
-	0x1e,
-	0x17,
-	0x15,
-	0x15,
-	0x20,
-	0x25,
-	0x28,
-	0x25,
-	0x20,
-	0x21,
-	0x1e,
-	0x3c,
-	0x1e,
-	0x21,
-	0x1b,
-	0x1e,
-	0x1e,
-	0x1b,
-	0x1a,
-	0x17,
-	0x17,
-	0x17,
-	0x1a,
-	0x19,
-	0x18,
-	0x16,
-	0x18,
-	0x19,
-	0x19,
-	0x1a,
-	0x24,
-	0x32,
-	0x39,
-	0x18,
-	0x18,
-	0x1e,
-	0x45,
-	0x30,
-	0x16,
-	0x18,
-	0x27,
-	0x2b,
-	0x16,
-	0x14,
-	0x17,
-	0x1e,
-	0x23,
-	0x15,
-	0x15,
-	0x17,
-	0x1e,
-	0x21,
-	0x19,
-	0x1b,
-	0x21,
-	0x3b,
-	0x45,
-	0x19,
-	0x18,
-	0x21,
-	0x30,
-	0x6e,
-	0x17,
-	0x19,
-	0x2e,
-	0x32,
-	0x17,
-	0x16,
-	0x1a,
-	0x23,
-	0x2a,
-	0x17,
-	0x17,
-	0x1a,
-	0x23,
-	0x26,
-	0x30,
-	0x29,
-	0x1d,
-	0x18,
-	0x17,
-	0x32,
-	0x2b,
-	0x1b,
-	0x16,
-	0x17,
-	0x67,
-	0x2b,
-	0x18,
-	0x16,
-	0x32,
-	0x2b,
-	0x1b,
-	0x16,
-	0x17,
-	0x30,
-	0x29,
-	0x1d,
-	0x18,
-	0x17,
-	0x2a,
-	0x28,
-	0x1d,
-	0x1a,
-	0x19,
-	0x2e,
-	0x27,
-	0x1e,
-	0x18,
-	0x19,
-	0x2b,
-	0x45,
-	0x1a,
-	0x18,
-	0x2e,
-	0x27,
-	0x1e,
-	0x18,
-	0x19,
-	0x2a,
-	0x28,
-	0x1d,
-	0x1a,
-	0x19,
-	0x19,
-	0x1a,
-	0x1d,
-	0x28,
-	0x2a,
-	0x19,
-	0x18,
-	0x1e,
-	0x27,
-	0x2e,
-	0x18,
-	0x1a,
-	0x45,
-	0x2b,
-	0x19,
-	0x18,
-	0x1e,
-	0x27,
-	0x2e,
-	0x19,
-	0x1a,
-	0x1d,
-	0x28,
-	0x2a,
-	0x17,
-	0x18,
-	0x1d,
-	0x29,
-	0x30,
-	0x17,
-	0x16,
-	0x1b,
-	0x2b,
-	0x32,
-	0x16,
-	0x18,
-	0x2b,
-	0x67,
-	0x17,
-	0x16,
-	0x1b,
-	0x2b,
-	0x32,
-	0x17,
-	0x18,
-	0x1d,
-	0x29,
-	0x30,
-	0x26,
-	0x23,
-	0x1a,
-	0x17,
-	0x17,
-	0x2a,
-	0x23,
-	0x1a,
-	0x16,
-	0x17,
-	0x32,
-	0x2e,
-	0x19,
-	0x17,
-	0x6e,
-	0x30,
-	0x21,
-	0x18,
-	0x19,
-	0x45,
-	0x3b,
-	0x21,
-	0x1b,
-	0x19,
-	0x21,
-	0x1e,
-	0x17,
-	0x15,
-	0x15,
-	0x23,
-	0x1e,
-	0x17,
-	0x14,
-	0x16,
-	0x2b,
-	0x27,
-	0x18,
-	0x16,
-	0x30,
-	0x45,
-	0x1e,
-	0x18,
-	0x18,
-	0x39,
-	0x32,
-	0x24,
-	0x1a,
-	0x19,
-	0x19,
-	0x18,
-	0x16,
-	0x18,
-	0x19,
-	0x1a,
-	0x17,
-	0x17,
-	0x17,
-	0x1a,
-	0x1b,
-	0x1e,
-	0x1e,
-	0x1b,
-	0x21,
-	0x1e,
-	0x3c,
-	0x1e,
-	0x21,
-	0x20,
-	0x25,
-	0x28,
-	0x25,
-	0x20,
-	0x15,
-	0x15,
-	0x17,
-	0x1e,
-	0x21,
-	0x16,
-	0x14,
-	0x17,
-	0x1e,
-	0x23,
-	0x16,
-	0x18,
-	0x27,
-	0x2b,
-	0x18,
-	0x18,
-	0x1e,
-	0x45,
-	0x30,
-	0x19,
-	0x1a,
-	0x24,
-	0x32,
-	0x39,
-	0x17,
-	0x17,
-	0x1a,
-	0x23,
-	0x26,
-	0x17,
-	0x16,
-	0x1a,
-	0x23,
-	0x2a,
-	0x17,
-	0x19,
-	0x2e,
-	0x32,
-	0x19,
-	0x18,
-	0x21,
-	0x30,
-	0x6e,
-	0x19,
-	0x1b,
-	0x21,
-	0x3b,
-	0x45,
-	0x23,
-	0x20,
-	0x19,
-	0x17,
-	0x16,
-	0x26,
-	0x21,
-	0x19,
-	0x15,
-	0x17,
-	0x30,
-	0x2a,
-	0x19,
-	0x17,
-	0x45,
-	0x39,
-	0x20,
-	0x19,
-	0x19,
-	0xa2,
-	0x36,
-	0x24,
-	0x1b,
-	0x19,
-	0x20,
-	0x1e,
-	0x18,
-	0x17,
-	0x17,
-	0x23,
-	0x1e,
-	0x18,
-	0x15,
-	0x17,
-	0x29,
-	0x28,
-	0x1a,
-	0x18,
-	0x3b,
-	0x32,
-	0x25,
-	0x1a,
-	0x1b,
-	0x36,
-	0x66,
-	0x23,
-	0x1e,
-	0x1b,
-	0x19,
-	0x18,
-	0x15,
-	0x18,
-	0x19,
-	0x1a,
-	0x17,
-	0x16,
-	0x17,
-	0x1a,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x21,
-	0x24,
-	0x28,
-	0x24,
-	0x21,
-	0x24,
-	0x23,
-	0x5a,
-	0x23,
-	0x24,
-	0x17,
-	0x17,
-	0x18,
-	0x1e,
-	0x20,
-	0x17,
-	0x15,
-	0x18,
-	0x1e,
-	0x23,
-	0x18,
-	0x1a,
-	0x28,
-	0x29,
-	0x1b,
-	0x1a,
-	0x25,
-	0x32,
-	0x3b,
-	0x1b,
-	0x1e,
-	0x23,
-	0x66,
-	0x36,
-	0x16,
-	0x17,
-	0x19,
-	0x20,
-	0x23,
-	0x17,
-	0x15,
-	0x19,
-	0x21,
-	0x26,
-	0x17,
-	0x19,
-	0x2a,
-	0x30,
-	0x19,
-	0x19,
-	0x20,
-	0x39,
-	0x45,
-	0x19,
-	0x1b,
-	0x24,
-	0x36,
-	0xa2,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0x03,
-	0x0a,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x06,
-	0xfa,
-	0xf3,
-	0xf3,
-	0xf3,
-	0xf6,
-	0xfd,
-	0x0a,
-	0x1d,
-	0x26,
-	0x26,
-	0x26,
-	0x13,
-	0xed,
-	0xda,
-	0xda,
-	0xda,
-	0xe3,
-	0xf6,
-	0x10,
-	0x30,
-	0x40,
-	0x40,
-	0x40,
-	0x20,
-	0xe0,
-	0xc0,
-	0xc0,
-	0xc0,
-	0xd0,
-	0xf0,
-	0x16,
-	0x43,
-	0x5a,
-	0x5a,
-	0x5a,
-	0x2d,
-	0xd3,
-	0xa6,
-	0xa6,
-	0xa6,
-	0xbd,
-	0xea,
-	0x16,
-	0x43,
-	0x5a,
-	0x5a,
-	0x5a,
-	0x2d,
-	0xd3,
-	0xa6,
-	0xa6,
-	0xa6,
-	0xbd,
-	0xea,
-	0x10,
-	0x30,
-	0x40,
-	0x40,
-	0x40,
-	0x20,
-	0xe0,
-	0xc0,
-	0xc0,
-	0xc0,
-	0xd0,
-	0xf0,
-	0x0a,
-	0x1d,
-	0x26,
-	0x26,
-	0x26,
-	0x13,
-	0xed,
-	0xda,
-	0xda,
-	0xda,
-	0xe3,
-	0xf6,
-	0x03,
-	0x0a,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x06,
-	0xfa,
-	0xf3,
-	0xf3,
-	0xf3,
-	0xf6,
-	0xfd,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x73,
-	0x73,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0x8d,
-	0x8d,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0x03,
-	0x0a,
-	0x10,
-	0x16,
-	0x1d,
-	0x1d,
-	0x16,
-	0x10,
-	0x0a,
-	0x03,
-	0x0a,
-	0x1d,
-	0x30,
-	0x43,
-	0x56,
-	0x56,
-	0x43,
-	0x30,
-	0x1d,
-	0x0a,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x73,
-	0x73,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x73,
-	0x73,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0x06,
-	0x13,
-	0x20,
-	0x2d,
-	0x3a,
-	0x3a,
-	0x2d,
-	0x20,
-	0x13,
-	0x06,
-	0xfa,
-	0xed,
-	0xe0,
-	0xd3,
-	0xc6,
-	0xc6,
-	0xd3,
-	0xe0,
-	0xed,
-	0xfa,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0x8d,
-	0x8d,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0x8d,
-	0x8d,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0xf6,
-	0xe3,
-	0xd0,
-	0xbd,
-	0xaa,
-	0xaa,
-	0xbd,
-	0xd0,
-	0xe3,
-	0xf6,
-	0xfd,
-	0xf6,
-	0xf0,
-	0xea,
-	0xe3,
-	0xe3,
-	0xea,
-	0xf0,
-	0xf6,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xcd,
-	0x33,
-	0x00,
-	0x00,
-	0x9a,
-	0x66,
-	0x00,
-	0x00,
-	0x66,
-	0x9a,
-	0x00,
-	0x00,
-	0x33,
-	0xcd,
-	0x00,
-	0x00,
-	0xc0,
-	0x00,
-	0x40,
-	0x00,
-	0x9a,
-	0x26,
-	0x33,
-	0x0d,
-	0x73,
-	0x4d,
-	0x26,
-	0x1a,
-	0x4d,
-	0x73,
-	0x1a,
-	0x26,
-	0x26,
-	0x9a,
-	0x0d,
-	0x33,
-	0x80,
-	0x00,
-	0x80,
-	0x00,
-	0x66,
-	0x1a,
-	0x66,
-	0x1a,
-	0x4d,
-	0x33,
-	0x4d,
-	0x33,
-	0x33,
-	0x4d,
-	0x33,
-	0x4d,
-	0x1a,
-	0x66,
-	0x1a,
-	0x66,
-	0x40,
-	0x00,
-	0xc0,
-	0x00,
-	0x33,
-	0x0d,
-	0x9a,
-	0x26,
-	0x26,
-	0x1a,
-	0x73,
-	0x4d,
-	0x1a,
-	0x26,
-	0x4d,
-	0x73,
-	0x0d,
-	0x33,
-	0x26,
-	0x9a,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x0c,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x02,
-	0x04,
-	0x02,
-	0x08,
-	0x02,
-	0x0c,
-	0x02,
-	0x10,
-	0x02,
-	0x00,
-	0x04,
-	0x04,
-	0x04,
-	0x08,
-	0x04,
-	0x0c,
-	0x04,
-	0x10,
-	0x04,
-	0x00,
-	0x06,
-	0x04,
-	0x06,
-	0x08,
-	0x06,
-	0x0c,
-	0x06,
-	0x10,
-	0x06,
-	0x00,
-	0x08,
-	0x14,
-	0x00,
-	0x18,
-	0x00,
-	0x1c,
-	0x00,
-	0x20,
-	0x00,
-	0x24,
-	0x00,
-	0x14,
-	0x02,
-	0x18,
-	0x02,
-	0x1c,
-	0x02,
-	0x20,
-	0x02,
-	0x24,
-	0x02,
-	0x14,
-	0x04,
-	0x18,
-	0x04,
-	0x1c,
-	0x04,
-	0x20,
-	0x04,
-	0x24,
-	0x04,
-	0x14,
-	0x06,
-	0x18,
-	0x06,
-	0x1c,
-	0x06,
-	0x20,
-	0x06,
-	0x24,
-	0x06,
-	0x14,
-	0x08,
-	0x28,
-	0x00,
-	0x2c,
-	0x00,
-	0x30,
-	0x00,
-	0x34,
-	0x00,
-	0x38,
-	0x00,
-	0x28,
-	0x02,
-	0x2c,
-	0x02,
-	0x30,
-	0x02,
-	0x34,
-	0x02,
-	0x38,
-	0x02,
-	0x28,
-	0x04,
-	0x2c,
-	0x04,
-	0x30,
-	0x04,
-	0x34,
-	0x04,
-	0x38,
-	0x04,
-	0x28,
-	0x06,
-	0x2c,
-	0x06,
-	0x30,
-	0x06,
-	0x34,
-	0x06,
-	0x38,
-	0x06,
-	0x28,
-	0x08,
-	0x3c,
-	0x00,
-	0x40,
-	0x00,
-	0x44,
-	0x00,
-	0x48,
-	0x00,
-	0x4c,
-	0x00,
-	0x3c,
-	0x02,
-	0x40,
-	0x02,
-	0x44,
-	0x02,
-	0x48,
-	0x02,
-	0x4c,
-	0x02,
-	0x3c,
-	0x04,
-	0x40,
-	0x04,
-	0x44,
-	0x04,
-	0x48,
-	0x04,
-	0x4c,
-	0x04,
-	0x3c,
-	0x06,
-	0x40,
-	0x06,
-	0x44,
-	0x06,
-	0x48,
-	0x06,
-	0x4c,
-	0x06,
-	0x3c,
-	0x08,
-	0x00,
-	0x0a,
-	0x04,
-	0x0a,
-	0x08,
-	0x0a,
-	0x0c,
-	0x0a,
-	0x10,
-	0x0a,
-	0x00,
-	0x0c,
-	0x04,
-	0x0c,
-	0x08,
-	0x0c,
-	0x0c,
-	0x0c,
-	0x10,
-	0x0c,
-	0x00,
-	0x0e,
-	0x04,
-	0x0e,
-	0x08,
-	0x0e,
-	0x0c,
-	0x0e,
-	0x10,
-	0x0e,
-	0x00,
-	0x10,
-	0x04,
-	0x10,
-	0x08,
-	0x10,
-	0x0c,
-	0x10,
-	0x10,
-	0x10,
-	0x00,
-	0x12,
-	0x14,
-	0x0a,
-	0x18,
-	0x0a,
-	0x1c,
-	0x0a,
-	0x20,
-	0x0a,
-	0x24,
-	0x0a,
-	0x14,
-	0x0c,
-	0x18,
-	0x0c,
-	0x1c,
-	0x0c,
-	0x20,
-	0x0c,
-	0x24,
-	0x0c,
-	0x14,
-	0x0e,
-	0x18,
-	0x0e,
-	0x1c,
-	0x0e,
-	0x20,
-	0x0e,
-	0x24,
-	0x0e,
-	0x14,
-	0x10,
-	0x18,
-	0x10,
-	0x1c,
-	0x10,
-	0x20,
-	0x10,
-	0x24,
-	0x10,
-	0x14,
-	0x12,
-	0x28,
-	0x0a,
-	0x2c,
-	0x0a,
-	0x30,
-	0x0a,
-	0x34,
-	0x0a,
-	0x38,
-	0x0a,
-	0x28,
-	0x0c,
-	0x2c,
-	0x0c,
-	0x30,
-	0x0c,
-	0x34,
-	0x0c,
-	0x38,
-	0x0c,
-	0x28,
-	0x0e,
-	0x2c,
-	0x0e,
-	0x30,
-	0x0e,
-	0x34,
-	0x0e,
-	0x38,
-	0x0e,
-	0x28,
-	0x10,
-	0x2c,
-	0x10,
-	0x30,
-	0x10,
-	0x34,
-	0x10,
-	0x38,
-	0x10,
-	0x28,
-	0x12,
-	0x3c,
-	0x0a,
-	0x40,
-	0x0a,
-	0x44,
-	0x0a,
-	0x48,
-	0x0a,
-	0x4c,
-	0x0a,
-	0x3c,
-	0x0c,
-	0x40,
-	0x0c,
-	0x44,
-	0x0c,
-	0x48,
-	0x0c,
-	0x4c,
-	0x0c,
-	0x3c,
-	0x0e,
-	0x40,
-	0x0e,
-	0x44,
-	0x0e,
-	0x48,
-	0x0e,
-	0x4c,
-	0x0e,
-	0x3c,
-	0x10,
-	0x40,
-	0x10,
-	0x44,
-	0x10,
-	0x48,
-	0x10,
-	0x4c,
-	0x10,
-	0x3c,
-	0x12,
-	0x00,
-	0x14,
-	0x04,
-	0x14,
-	0x08,
-	0x14,
-	0x0c,
-	0x14,
-	0x10,
-	0x14,
-	0x00,
-	0x16,
-	0x04,
-	0x16,
-	0x08,
-	0x16,
-	0x0c,
-	0x16,
-	0x10,
-	0x16,
-	0x00,
-	0x18,
-	0x04,
-	0x18,
-	0x08,
-	0x18,
-	0x0c,
-	0x18,
-	0x10,
-	0x18,
-	0x00,
-	0x1a,
-	0x04,
-	0x1a,
-	0x08,
-	0x1a,
-	0x0c,
-	0x1a,
-	0x10,
-	0x1a,
-	0x00,
-	0x1c,
-	0x14,
-	0x14,
-	0x18,
-	0x14,
-	0x1c,
-	0x14,
-	0x20,
-	0x14,
-	0x24,
-	0x14,
-	0x14,
-	0x16,
-	0x18,
-	0x16,
-	0x1c,
-	0x16,
-	0x20,
-	0x16,
-	0x24,
-	0x16,
-	0x14,
-	0x18,
-	0x18,
-	0x18,
-	0x1c,
-	0x18,
-	0x20,
-	0x18,
-	0x24,
-	0x18,
-	0x14,
-	0x1a,
-	0x18,
-	0x1a,
-	0x1c,
-	0x1a,
-	0x20,
-	0x1a,
-	0x24,
-	0x1a,
-	0x14,
-	0x1c,
-	0x28,
-	0x14,
-	0x2c,
-	0x14,
-	0x30,
-	0x14,
-	0x34,
-	0x14,
-	0x38,
-	0x14,
-	0x28,
-	0x16,
-	0x2c,
-	0x16,
-	0x30,
-	0x16,
-	0x34,
-	0x16,
-	0x38,
-	0x16,
-	0x28,
-	0x18,
-	0x2c,
-	0x18,
-	0x30,
-	0x18,
-	0x34,
-	0x18,
-	0x38,
-	0x18,
-	0x28,
-	0x1a,
-	0x2c,
-	0x1a,
-	0x30,
-	0x1a,
-	0x34,
-	0x1a,
-	0x38,
-	0x1a,
-	0x28,
-	0x1c,
-	0x3c,
-	0x14,
-	0x40,
-	0x14,
-	0x44,
-	0x14,
-	0x48,
-	0x14,
-	0x4c,
-	0x14,
-	0x3c,
-	0x16,
-	0x40,
-	0x16,
-	0x44,
-	0x16,
-	0x48,
-	0x16,
-	0x4c,
-	0x16,
-	0x3c,
-	0x18,
-	0x40,
-	0x18,
-	0x44,
-	0x18,
-	0x48,
-	0x18,
-	0x4c,
-	0x18,
-	0x3c,
-	0x1a,
-	0x40,
-	0x1a,
-	0x44,
-	0x1a,
-	0x48,
-	0x1a,
-	0x4c,
-	0x1a,
-	0x3c,
-	0x1c,
-	0x00,
-	0x1e,
-	0x04,
-	0x1e,
-	0x08,
-	0x1e,
-	0x0c,
-	0x1e,
-	0x10,
-	0x1e,
-	0x00,
-	0x20,
-	0x04,
-	0x20,
-	0x08,
-	0x20,
-	0x0c,
-	0x20,
-	0x10,
-	0x20,
-	0x00,
-	0x22,
-	0x04,
-	0x22,
-	0x08,
-	0x22,
-	0x0c,
-	0x22,
-	0x10,
-	0x22,
-	0x00,
-	0x24,
-	0x04,
-	0x24,
-	0x08,
-	0x24,
-	0x0c,
-	0x24,
-	0x10,
-	0x24,
-	0x00,
-	0x26,
-	0x14,
-	0x1e,
-	0x18,
-	0x1e,
-	0x1c,
-	0x1e,
-	0x20,
-	0x1e,
-	0x24,
-	0x1e,
-	0x14,
-	0x20,
-	0x18,
-	0x20,
-	0x1c,
-	0x20,
-	0x20,
-	0x20,
-	0x24,
-	0x20,
-	0x14,
-	0x22,
-	0x18,
-	0x22,
-	0x1c,
-	0x22,
-	0x20,
-	0x22,
-	0x24,
-	0x22,
-	0x14,
-	0x24,
-	0x18,
-	0x24,
-	0x1c,
-	0x24,
-	0x20,
-	0x24,
-	0x24,
-	0x24,
-	0x14,
-	0x26,
-	0x28,
-	0x1e,
-	0x2c,
-	0x1e,
-	0x30,
-	0x1e,
-	0x34,
-	0x1e,
-	0x38,
-	0x1e,
-	0x28,
-	0x20,
-	0x2c,
-	0x20,
-	0x30,
-	0x20,
-	0x34,
-	0x20,
-	0x38,
-	0x20,
-	0x28,
-	0x22,
-	0x2c,
-	0x22,
-	0x30,
-	0x22,
-	0x34,
-	0x22,
-	0x38,
-	0x22,
-	0x28,
-	0x24,
-	0x2c,
-	0x24,
-	0x30,
-	0x24,
-	0x34,
-	0x24,
-	0x38,
-	0x24,
-	0x28,
-	0x26,
-	0x3c,
-	0x1e,
-	0x40,
-	0x1e,
-	0x44,
-	0x1e,
-	0x48,
-	0x1e,
-	0x4c,
-	0x1e,
-	0x3c,
-	0x20,
-	0x40,
-	0x20,
-	0x44,
-	0x20,
-	0x48,
-	0x20,
-	0x4c,
-	0x20,
-	0x3c,
-	0x22,
-	0x40,
-	0x22,
-	0x44,
-	0x22,
-	0x48,
-	0x22,
-	0x4c,
-	0x22,
-	0x3c,
-	0x24,
-	0x40,
-	0x24,
-	0x44,
-	0x24,
-	0x48,
-	0x24,
-	0x4c,
-	0x24,
-	0x3c,
-	0x26,
-	0x00,
-	0x28,
-	0x04,
-	0x28,
-	0x08,
-	0x28,
-	0x0c,
-	0x28,
-	0x10,
-	0x28,
-	0x00,
-	0x2a,
-	0x04,
-	0x2a,
-	0x08,
-	0x2a,
-	0x0c,
-	0x2a,
-	0x10,
-	0x2a,
-	0x00,
-	0x2c,
-	0x04,
-	0x2c,
-	0x08,
-	0x2c,
-	0x0c,
-	0x2c,
-	0x10,
-	0x2c,
-	0x00,
-	0x2e,
-	0x04,
-	0x2e,
-	0x08,
-	0x2e,
-	0x0c,
-	0x2e,
-	0x10,
-	0x2e,
-	0x00,
-	0x30,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x0c,
-	0x1a,
-	0x26,
-	0x34,
-	0x40,
-	0x4c,
-	0x5a,
-	0x66,
-	0x74,
-	0x80,
-	0x8c,
-	0x9a,
-	0xa6,
-	0xb4,
-	0xc0,
-	0xcc,
-	0xda,
-	0xe6,
-	0xf4,
-	0x00,
-	0x10,
-	0x20,
-	0x30,
-	0x40,
-	0x50,
-	0x60,
-	0x70,
-	0x80,
-	0x90,
-	0xa0,
-	0xb0,
-	0xc0,
-	0xd0,
-	0xe0,
-	0xf0,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x55,
-	0x00,
-	0xcc,
-	0xaa,
-	0x24,
-	0x00,
-	0x1c,
-	0x66,
-	0xd1,
-	0x55,
-	0xec,
-	0x92,
-	0x44,
-	0x00,
-	0xc3,
-	0x8e,
-	0x5e,
-	0x33,
-	0x0c,
-	0xe8,
-	0xc8,
-	0xaa,
-	0x8f,
-	0x76,
-	0x5e,
-	0x49,
-	0x34,
-	0x22,
-	0x10,
-	0x00,
-	0xf0,
-	0xe1,
-	0xd4,
-	0xc7,
-	0xba,
-	0xaf,
-	0xa4,
-	0x99,
-	0x8f,
-	0x86,
-	0x7d,
-	0x74,
-	0x6c,
-	0x64,
-	0x5c,
-	0x55,
-	0x4e,
-	0x47,
-	0x41,
-	0x3b,
-	0x35,
-	0x2f,
-	0x29,
-	0x24,
-	0x1f,
-	0x1a,
-	0x15,
-	0x11,
-	0x0c,
-	0x08,
-	0x04,
-	0x00,
-	0xfc,
-	0xf8,
-	0xf4,
-	0xf0,
-	0xed,
-	0xea,
-	0xe6,
-	0xe3,
-	0xe0,
-	0xdd,
-	0xda,
-	0xd7,
-	0xd4,
-	0xd2,
-	0xcf,
-	0xcc,
-	0xca,
-	0xc7,
-	0xc5,
-	0xc3,
-	0xc0,
-	0xbe,
-	0xbc,
-	0xba,
-	0xb8,
-	0xb6,
-	0xb4,
-	0xb2,
-	0xb0,
-	0xae,
-	0xac,
-	0xaa,
-	0xa8,
-	0xa7,
-	0xa5,
-	0xa3,
-	0xa2,
-	0xa0,
-	0x9f,
-	0x9d,
-	0x9c,
-	0x9a,
-	0x99,
-	0x97,
-	0x96,
-	0x94,
-	0x93,
-	0x92,
-	0x90,
-	0x8f,
-	0x8e,
-	0x8d,
-	0x8c,
-	0x8a,
-	0x89,
-	0x88,
-	0x87,
-	0x86,
-	0x85,
-	0x84,
-	0x83,
-	0x82,
-	0x81,
-	0x80,
-	0x7f,
-	0x7e,
-	0x7d,
-	0x7c,
-	0x7b,
-	0x7a,
-	0x79,
-	0x78,
-	0x77,
-	0x76,
-	0x75,
-	0x75,
-	0x74,
-	0x73,
-	0x72,
-	0x71,
-	0x70,
-	0x70,
-	0x6f,
-	0x6e,
-	0x6d,
-	0x6d,
-	0x6c,
-	0x6b,
-	0x6b,
-	0x6a,
-	0x69,
-	0x69,
-	0x68,
-	0x67,
-	0x67,
-	0x66,
-	0x65,
-	0x65,
-	0x64,
-	0x63,
-	0x63,
-	0x62,
-	0x62,
-	0x61,
-	0x60,
-	0x60,
-	0x5f,
-	0x5f,
-	0x5e,
-	0x5e,
-	0x5d,
-	0x5d,
-	0x5c,
-	0x5c,
-	0x5b,
-	0x5b,
-	0x5a,
-	0x5a,
-	0x59,
-	0x59,
-	0x58,
-	0x58,
-	0x57,
-	0x57,
-	0x56,
-	0x56,
-	0x55,
-	0x55,
-	0x54,
-	0x54,
-	0x54,
-	0x53,
-	0x53,
-	0x52,
-	0x52,
-	0x51,
-	0x51,
-	0x51,
-	0x50,
-	0x50,
-	0x4f,
-	0x4f,
-	0x4f,
-	0x4e,
-	0x4e,
-	0x4e,
-	0x4d,
-	0x4d,
-	0x4c,
-	0x4c,
-	0x4c,
-	0x4b,
-	0x4b,
-	0x4b,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x49,
-	0x49,
-	0x49,
-	0x48,
-	0x48,
-	0x48,
-	0x47,
-	0x47,
-	0x47,
-	0x46,
-	0x46,
-	0x46,
-	0x46,
-	0x45,
-	0x45,
-	0x45,
-	0x44,
-	0x44,
-	0x44,
-	0x43,
-	0x43,
-	0x43,
-	0x43,
-	0x42,
-	0x42,
-	0x42,
-	0x42,
-	0x41,
-	0x41,
-	0x41,
-	0x41,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x20,
-	0x15,
-	0x10,
-	0x0c,
-	0x0a,
-	0x09,
-	0x08,
-	0x07,
-	0x06,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xfe,
-	0xfc,
-	0xfa,
-	0xf8,
-	0xf6,
-	0xf4,
-	0xf2,
-	0xf0,
-	0xef,
-	0xed,
-	0xeb,
-	0xe9,
-	0xe8,
-	0xe6,
-	0xe4,
-	0xe3,
-	0xe1,
-	0xe0,
-	0xde,
-	0xdd,
-	0xdb,
-	0xda,
-	0xd8,
-	0xd7,
-	0xd5,
-	0xd4,
-	0xd3,
-	0xd1,
-	0xd0,
-	0xcf,
-	0xcd,
-	0xcc,
-	0xcb,
-	0xc9,
-	0xc8,
-	0xc7,
-	0xc6,
-	0xc5,
-	0xc3,
-	0xc2,
-	0xc1,
-	0xc0,
-	0xbf,
-	0xbe,
-	0xbd,
-	0xbb,
-	0xba,
-	0xb9,
-	0xb8,
-	0xb7,
-	0xb6,
-	0xb5,
-	0xb4,
-	0xb3,
-	0xb2,
-	0xb1,
-	0xb0,
-	0xaf,
-	0xae,
-	0xad,
-	0xac,
-	0xac,
-	0xab,
-	0xaa,
-	0xa9,
-	0xa8,
-	0xa7,
-	0xa6,
-	0xa5,
-	0xa5,
-	0xa4,
-	0xa3,
-	0xa2,
-	0xa1,
-	0xa0,
-	0xa0,
-	0x9f,
-	0x9e,
-	0x9d,
-	0x9d,
-	0x9c,
-	0x9b,
-	0x9a,
-	0x9a,
-	0x99,
-	0x98,
-	0x97,
-	0x97,
-	0x96,
-	0x95,
-	0x95,
-	0x94,
-	0x93,
-	0x93,
-	0x92,
-	0x91,
-	0x91,
-	0x90,
-	0x8f,
-	0x8f,
-	0x8e,
-	0x8d,
-	0x8d,
-	0x8c,
-	0x8c,
-	0x8b,
-	0x8a,
-	0x8a,
-	0x89,
-	0x89,
-	0x88,
-	0x88,
-	0x87,
-	0x86,
-	0x86,
-	0x85,
-	0x85,
-	0x84,
-	0x84,
-	0x83,
-	0x83,
-	0x82,
-	0x82,
-	0x81,
-	0x81,
-	0x80,
-	0x80,
-	0x7f,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xae,
-	0x00,
-	0x93,
-	0xae,
-	0x75,
-	0x00,
-	0x5c,
-	0x93,
-	0xad,
-	0xae,
-	0x9b,
-	0x75,
-	0x41,
-	0x00,
-	0xb3,
-	0x5c,
-	0xfc,
-	0x93,
-	0x23,
-	0xad,
-	0x30,
-	0xae,
-	0x27,
-	0x9b,
-	0x0a,
-	0x75,
-	0xdd,
-	0x41,
-	0xa2,
-	0x00,
-	0x5b,
-	0xb3,
-	0x09,
-	0x5c,
-	0xad,
-	0xfc,
-	0x49,
-	0x93,
-	0xdc,
-	0x23,
-	0x69,
-	0xad,
-	0xef,
-	0x30,
-	0x70,
-	0xae,
-	0xeb,
-	0x27,
-	0x61,
-	0x9b,
-	0xd3,
-	0x0a,
-	0x40,
-	0x75,
-	0xaa,
-	0xdd,
-	0x10,
-	0x41,
-	0x72,
-	0xa2,
-	0xd1,
-	0x00,
-	0x2e,
-	0x5b,
-	0x87,
-	0xb3,
-	0xde,
-	0x09,
-	0x33,
-	0x5c,
-	0x85,
-	0xad,
-	0xd5,
-	0xfc,
-	0x22,
-	0x49,
-	0x6e,
-	0x93,
-	0xb8,
-	0xdc,
-	0x00,
-	0x23,
-	0x46,
-	0x69,
-	0x8b,
-	0xad,
-	0xce,
-	0xef,
-	0x10,
-	0x30,
-	0x50,
-	0x70,
-	0x8f,
-	0xae,
-	0xcd,
-	0xeb,
-	0x09,
-	0x27,
-	0x44,
-	0x61,
-	0x7e,
-	0x9b,
-	0xb7,
-	0xd3,
-	0xef,
-	0x0a,
-	0x25,
-	0x40,
-	0x5b,
-	0x75,
-	0x90,
-	0xaa,
-	0xc4,
-	0xdd,
-	0xf7,
-	0x10,
-	0x29,
-	0x41,
-	0x5a,
-	0x72,
-	0x8a,
-	0xa2,
-	0xba,
-	0xd1,
-	0xe9,
-	0x00,
-	0x17,
-	0x2e,
-	0x44,
-	0x5b,
-	0x71,
-	0x87,
-	0x9d,
-	0xb3,
-	0xc9,
-	0xde,
-	0xf4,
-	0x09,
-	0x1e,
-	0x33,
-	0x47,
-	0x5c,
-	0x70,
-	0x85,
-	0x99,
-	0xad,
-	0xc1,
-	0xd5,
-	0xe8,
-	0xfc,
-	0x0f,
-	0x22,
-	0x36,
-	0x49,
-	0x5b,
-	0x6e,
-	0x81,
-	0x93,
-	0xa6,
-	0xb8,
-	0xca,
-	0xdc,
-	0xee,
-	0x00,
-	0x12,
-	0x23,
-	0x35,
-	0x46,
-	0x58,
-	0x69,
-	0x7a,
-	0x8b,
-	0x9c,
-	0xad,
-	0xbe,
-	0xce,
-	0xdf,
-	0xef,
-	0x00,
-	0x10,
-	0x20,
-	0x30,
-	0x40,
-	0x50,
-	0x60,
-	0x70,
-	0x7f,
-	0x8f,
-	0x9f,
-	0xae,
-	0xbd,
-	0xcd,
-	0xdc,
-	0xeb,
-	0xfa,
-	0x09,
-	0x18,
-	0x27,
-	0x35,
-	0x44,
-	0x53,
-	0x61,
-	0x70,
-	0x7e,
-	0x8c,
-	0x9b,
-	0xa9,
-	0xb7,
-	0xc5,
-	0xd3,
-	0xe1,
-	0xef,
-	0xfc,
-	0x0a,
-	0x18,
-	0x25,
-	0x33,
-	0x40,
-	0x4e,
-	0x5b,
-	0x68,
-	0x75,
-	0x83,
-	0x90,
-	0x9d,
-	0xaa,
-	0xb7,
-	0xc4,
-	0xd0,
-	0xdd,
-	0xea,
-	0xf7,
-	0x03,
-	0x10,
-	0x1c,
-	0x29,
-	0x35,
-	0x41,
-	0x4e,
-	0x5a,
-	0x66,
-	0x72,
-	0x7e,
-	0x8a,
-	0x96,
-	0xa2,
-	0xae,
-	0xba,
-	0xc6,
-	0xd1,
-	0xdd,
-	0xe9,
-	0xf4,
-	0x00,
-	0x00,
-	0x08,
-	0x0c,
-	0x10,
-	0x12,
-	0x14,
-	0x16,
-	0x18,
-	0x19,
-	0x1a,
-	0x1b,
-	0x1c,
-	0x1d,
-	0x1e,
-	0x1f,
-	0x20,
-	0x20,
-	0x21,
-	0x21,
-	0x22,
-	0x23,
-	0x23,
-	0x24,
-	0x24,
-	0x25,
-	0x25,
-	0x26,
-	0x26,
-	0x26,
-	0x27,
-	0x27,
-	0x28,
-	0x28,
-	0x28,
-	0x29,
-	0x29,
-	0x29,
-	0x29,
-	0x2a,
-	0x2a,
-	0x2a,
-	0x2b,
-	0x2b,
-	0x2b,
-	0x2b,
-	0x2c,
-	0x2c,
-	0x2c,
-	0x2c,
-	0x2d,
-	0x2d,
-	0x2d,
-	0x2d,
-	0x2e,
-	0x2e,
-	0x2e,
-	0x2e,
-	0x2e,
-	0x2f,
-	0x2f,
-	0x2f,
-	0x2f,
-	0x2f,
-	0x30,
-	0x30,
-	0x30,
-	0x30,
-	0x30,
-	0x30,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x32,
-	0x32,
-	0x32,
-	0x32,
-	0x32,
-	0x32,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0xe3,
-	0x7e,
-	0x5b,
-	0x7f,
-	0xd3,
-	0x7f,
-	0x4b,
-	0x80,
-	0x73,
-	0x80,
-	0x9b,
-	0x80,
-
-};
-
-uint8_t dppclib_u[] =
-{
-	0x03,
-	0x00,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x00,
-	0x05,
-	0xfa,
-	0x7b,
-	0x00,
-	0x20,
-	0xfe,
-	0x1a,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x91,
-	0x02,
-	0x0a,
-	0xff,
-	0xff,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x0e,
-	0xff,
-	0xfb,
-	0x00,
-	0x00,
-	0xfc,
-	0x87,
-	0x03,
-	0x06,
-	0x00,
-	0xff,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x01,
-	0xff,
-	0x00,
-	0x00,
-	0xff,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x74,
-	0x01,
-	0xfd,
-	0x01,
-	0x01,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0xf7,
-	0x04,
-	0x07,
-	0x00,
-	0x00,
-	0x03,
-	0x78,
-	0x00,
-	0xfe,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xfa,
-	0x02,
-	0x05,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-
-};
-
-uint8_t dopcode_u[] =
-{
-	0x78,
-	0xb8,
-	0x18,
-	0x64,
-	0x10,
-	0x64,
-	0x11,
-	0x64,
-	0x13,
-	0xa9,
-	0x01,
-	0x85,
-	0x12,
-	0xa0,
-	0x52,
-	0x13,
-	0x10,
-	0x00,
-	0x00,
-	0x02,
-	0xa9,
-	0x11,
-	0x8d,
-	0xa4,
-	0x02,
-	0xa9,
-	0x80,
-	0x8d,
-	0x4a,
-	0x02,
-	0x8d,
-	0x4b,
-	0x02,
-	0x8d,
-	0x4c,
-	0x02,
-	0x8d,
-	0x4d,
-	0x02,
-	0x8d,
-	0x4e,
-	0x02,
-	0x8d,
-	0x4f,
-	0x02,
-	0x8d,
-	0x50,
-	0x02,
-	0xa9,
-	0x00,
-	0x8d,
-	0x00,
-	0x02,
-	0xa9,
-	0x02,
-	0x8d,
-	0x01,
-	0x02,
-	0xa9,
-	0xed,
-	0x8d,
-	0x02,
-	0x02,
-	0xa9,
-	0xb4,
-	0x8d,
-	0x03,
-	0x02,
-	0xa9,
-	0xff,
-	0x8d,
-	0xa2,
-	0x02,
-	0x8d,
-	0xa3,
-	0x02,
-	0xa0,
-	0x03,
-	0x53,
-	0xcc,
-	0x3b,
-	0x04,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x07,
-	0x02,
-	0xcd,
-	0xce,
-	0x3b,
-	0xf0,
-	0x04,
-	0xa2,
-	0x02,
-	0x80,
-	0x10,
-	0xa2,
-	0x01,
-	0xad,
-	0x00,
-	0x60,
-	0xc9,
-	0xed,
-	0xd0,
-	0x07,
-	0xad,
-	0x01,
-	0x60,
-	0xc9,
-	0xb4,
-	0xf0,
-	0x0e,
-	0x8e,
-	0x08,
-	0x02,
-	0xa9,
-	0x01,
-	0x9c,
-	0x14,
-	0x68,
-	0x8d,
-	0x14,
-	0x68,
-	0x5c,
-	0x80,
-	0xfd,
-	0x9c,
-	0x14,
-	0x68,
-	0x9c,
-	0x18,
-	0x68,
-	0x9c,
-	0x20,
-	0x68,
-	0x9c,
-	0x24,
-	0x68,
-	0x9c,
-	0x28,
-	0x68,
-	0xa2,
-	0xff,
-	0x9a,
-	0xa9,
-	0xd7,
-	0x85,
-	0x0e,
-	0xa9,
-	0x22,
-	0x85,
-	0x0f,
-	0xa9,
-	0x88,
-	0x85,
-	0x02,
-	0xa9,
-	0x22,
-	0x85,
-	0x03,
-	0xa9,
-	0xf1,
-	0x85,
-	0x04,
-	0xa9,
-	0x24,
-	0x85,
-	0x05,
-	0xa9,
-	0xe8,
-	0x85,
-	0x06,
-	0xa9,
-	0x22,
-	0x85,
-	0x07,
-	0xa9,
-	0x5b,
-	0x85,
-	0x08,
-	0xa9,
-	0x23,
-	0x85,
-	0x09,
-	0xa0,
-	0x0e,
-	0x13,
-	0x10,
-	0x00,
-	0xa5,
-	0x02,
-	0x9c,
-	0xbb,
-	0x02,
-	0x9c,
-	0xbc,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0xb3,
-	0x02,
-	0xa9,
-	0x02,
-	0x8d,
-	0xb4,
-	0x02,
-	0x8d,
-	0xb5,
-	0x02,
-	0xa0,
-	0x02,
-	0x53,
-	0xa2,
-	0x3c,
-	0xb6,
-	0x02,
-	0x53,
-	0xa4,
-	0x3c,
-	0xb8,
-	0x02,
-	0x13,
-	0x10,
-	0x00,
-	0x58,
-	0x2c,
-	0x13,
-	0x10,
-	0x00,
-	0xbb,
-	0x2c,
-	0x13,
-	0x10,
-	0x00,
-	0x71,
-	0x00,
-	0xa0,
-	0x02,
-	0x13,
-	0x10,
-	0x00,
-	0xac,
-	0x2c,
-	0x13,
-	0x10,
-	0x00,
-	0x0f,
-	0x2d,
-	0x13,
-	0x10,
-	0x00,
-	0xc5,
-	0x00,
-	0x9c,
-	0xba,
-	0x02,
-	0xa9,
-	0x03,
-	0x8d,
-	0xae,
-	0x2c,
-	0x8d,
-	0x11,
-	0x2d,
-	0x64,
-	0xc7,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0x60,
-	0x9c,
-	0xe9,
-	0x27,
-	0x58,
-	0x8d,
-	0x14,
-	0x68,
-	0x4c,
-	0x7c,
-	0x03,
-	0xf0,
-	0x30,
-	0xad,
-	0xb4,
-	0x2b,
-	0xaa,
-	0x29,
-	0x03,
-	0x85,
-	0x7b,
-	0xd0,
-	0x0a,
-	0xa9,
-	0x01,
-	0x85,
-	0x75,
-	0x85,
-	0x76,
-	0x85,
-	0x77,
-	0x80,
-	0x16,
-	0x8a,
-	0x4a,
-	0x4a,
-	0xaa,
-	0x29,
-	0x01,
-	0x85,
-	0x75,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x29,
-	0x01,
-	0x85,
-	0x76,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x29,
-	0x01,
-	0x85,
-	0x77,
-	0x20,
-	0xd6,
-	0x0c,
-	0xf0,
-	0x01,
-	0x60,
-	0xad,
-	0xfb,
-	0x2b,
-	0xd0,
-	0x02,
-	0xa9,
-	0x11,
-	0x85,
-	0xc6,
-	0xcd,
-	0xbb,
-	0x02,
-	0xf0,
-	0x12,
-	0x29,
-	0xf0,
-	0xf0,
-	0x08,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x85,
-	0xc5,
-	0x80,
-	0x0e,
-	0xa9,
-	0x10,
-	0x85,
-	0xc5,
-	0x80,
-	0x08,
-	0xad,
-	0xbc,
-	0x02,
-	0x85,
-	0xc5,
-	0x20,
-	0x3f,
-	0x18,
-	0xad,
-	0xfa,
-	0x2b,
-	0x85,
-	0x81,
-	0xa0,
-	0x02,
-	0x53,
-	0xc7,
-	0x2b,
-	0xcf,
-	0x00,
-	0x53,
-	0xcd,
-	0x2b,
-	0xdb,
-	0x00,
-	0x20,
-	0x0c,
-	0x12,
-	0xf0,
-	0x01,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2d,
-	0x00,
-	0x6d,
-	0x00,
-	0xa5,
-	0x6e,
-	0xcd,
-	0xf6,
-	0x3f,
-	0x90,
-	0x09,
-	0xd0,
-	0x0f,
-	0xa5,
-	0x6d,
-	0xcd,
-	0xf5,
-	0x3f,
-	0xb0,
-	0x08,
-	0xad,
-	0xf4,
-	0x2b,
-	0xae,
-	0xf7,
-	0x2b,
-	0x80,
-	0x1e,
-	0xa5,
-	0x6e,
-	0xcd,
-	0xf8,
-	0x3f,
-	0x90,
-	0x09,
-	0xd0,
-	0x0f,
-	0xa5,
-	0x6d,
-	0xcd,
-	0xf7,
-	0x3f,
-	0xb0,
-	0x08,
-	0xad,
-	0xf5,
-	0x2b,
-	0xae,
-	0xf8,
-	0x2b,
-	0x80,
-	0x06,
-	0xad,
-	0xf6,
-	0x2b,
-	0xae,
-	0xf9,
-	0x2b,
-	0x85,
-	0x84,
-	0x86,
-	0x86,
-	0xad,
-	0xf3,
-	0x2b,
-	0x85,
-	0x85,
-	0xa5,
-	0x7c,
-	0xd0,
-	0x4e,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x02,
-	0xd0,
-	0x48,
-	0xad,
-	0xb1,
-	0x02,
-	0xc5,
-	0x85,
-	0x90,
-	0x11,
-	0x38,
-	0xe5,
-	0x85,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0x85,
-	0x80,
-	0x16,
-	0xa5,
-	0x85,
-	0x38,
-	0xed,
-	0xb1,
-	0x02,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x38,
-	0xa5,
-	0x85,
-	0xe5,
-	0xcb,
-	0x85,
-	0x85,
-	0xad,
-	0xb0,
-	0x02,
-	0xc5,
-	0x84,
-	0x90,
-	0x13,
-	0x38,
-	0xe5,
-	0x84,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0x84,
-	0x80,
-	0x18,
-	0x80,
-	0x48,
-	0xa5,
-	0x84,
-	0x38,
-	0xed,
-	0xb0,
-	0x02,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x38,
-	0xa5,
-	0x84,
-	0xe5,
-	0xcb,
-	0x85,
-	0x84,
-	0xad,
-	0xb2,
-	0x02,
-	0xc5,
-	0x86,
-	0x90,
-	0x11,
-	0x38,
-	0xe5,
-	0x86,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0x86,
-	0x80,
-	0x16,
-	0xa5,
-	0x86,
-	0x38,
-	0xed,
-	0xb2,
-	0x02,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x38,
-	0xa5,
-	0x86,
-	0xe5,
-	0xcb,
-	0x85,
-	0x86,
-	0xa0,
-	0x02,
-	0xad,
-	0x0b,
-	0x3c,
-	0xd0,
-	0x07,
-	0x53,
-	0xc7,
-	0x2b,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xcb,
-	0x2b,
-	0xcf,
-	0x00,
-	0x53,
-	0xd1,
-	0x2b,
-	0xdb,
-	0x00,
-	0x20,
-	0x0c,
-	0x12,
-	0xf0,
-	0x01,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2d,
-	0x00,
-	0x2b,
-	0x00,
-	0x18,
-	0xad,
-	0xd7,
-	0x2b,
-	0x69,
-	0x02,
-	0xb0,
-	0x10,
-	0x4a,
-	0x4a,
-	0xc9,
-	0x08,
-	0x90,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x06,
-	0x80,
-	0x06,
-	0xa9,
-	0x08,
-	0x80,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x88,
-	0x18,
-	0xad,
-	0xd8,
-	0x2b,
-	0x69,
-	0x02,
-	0xb0,
-	0x10,
-	0x4a,
-	0x4a,
-	0xc9,
-	0x08,
-	0x90,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x06,
-	0x80,
-	0x06,
-	0xa9,
-	0x08,
-	0x80,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x89,
-	0xa4,
-	0x88,
-	0xb9,
-	0x93,
-	0x27,
-	0x85,
-	0x8a,
-	0x45,
-	0x89,
-	0x20,
-	0x6e,
-	0x21,
-	0x85,
-	0x30,
-	0xa4,
-	0x89,
-	0xb9,
-	0x93,
-	0x27,
-	0x85,
-	0x8b,
-	0x45,
-	0x88,
-	0x20,
-	0x6e,
-	0x21,
-	0x85,
-	0x2f,
-	0xa0,
-	0x02,
-	0xad,
-	0xda,
-	0x2b,
-	0xd0,
-	0x0c,
-	0xad,
-	0xd9,
-	0x2b,
-	0xd0,
-	0x07,
-	0x53,
-	0xb6,
-	0x02,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xd9,
-	0x2b,
-	0xcf,
-	0x00,
-	0x20,
-	0x7f,
-	0x0c,
-	0x85,
-	0x82,
-	0xa0,
-	0x02,
-	0xad,
-	0xdc,
-	0x2b,
-	0xd0,
-	0x0c,
-	0xad,
-	0xdb,
-	0x2b,
-	0xd0,
-	0x07,
-	0x53,
-	0xb8,
-	0x02,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xdb,
-	0x2b,
-	0xcf,
-	0x00,
-	0x20,
-	0x7f,
-	0x0c,
-	0x85,
-	0x83,
-	0xa5,
-	0x76,
-	0xf0,
-	0x04,
-	0x64,
-	0x8e,
-	0x80,
-	0x10,
-	0xa5,
-	0x83,
-	0xc9,
-	0x02,
-	0xb0,
-	0x05,
-	0xad,
-	0xa6,
-	0x3c,
-	0x80,
-	0x03,
-	0xad,
-	0xa7,
-	0x3c,
-	0x85,
-	0x8e,
-	0xad,
-	0xa9,
-	0x3c,
-	0x49,
-	0x10,
-	0x84,
-	0xd0,
-	0x85,
-	0xcf,
-	0xa5,
-	0x89,
-	0x85,
-	0xd1,
-	0x64,
-	0xd2,
-	0x20,
-	0x16,
-	0x27,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x8f,
-	0xad,
-	0xa8,
-	0x3c,
-	0x45,
-	0x88,
-	0x84,
-	0xd0,
-	0x85,
-	0xcf,
-	0xa5,
-	0x89,
-	0x85,
-	0xd1,
-	0x64,
-	0xd2,
-	0x20,
-	0x16,
-	0x27,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x90,
-	0xa9,
-	0x00,
-	0xa6,
-	0x82,
-	0xe0,
-	0x02,
-	0xb0,
-	0x08,
-	0xa9,
-	0x01,
-	0xe4,
-	0x83,
-	0xf0,
-	0x02,
-	0xa9,
-	0x02,
-	0x85,
-	0x91,
-	0xa0,
-	0x00,
-	0xa5,
-	0x6e,
-	0xd9,
-	0xb9,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0xb8,
-	0x3c,
-	0x90,
-	0x08,
-	0xc8,
-	0xc8,
-	0xc0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe8,
-	0x98,
-	0x4a,
-	0x49,
-	0x03,
-	0xa8,
-	0xb9,
-	0xbe,
-	0x3c,
-	0x85,
-	0x92,
-	0xb9,
-	0xbf,
-	0x3c,
-	0x85,
-	0x93,
-	0xb9,
-	0xc0,
-	0x3c,
-	0x85,
-	0x94,
-	0xa5,
-	0x82,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xf7,
-	0x3c,
-	0x85,
-	0x95,
-	0x29,
-	0x01,
-	0xf0,
-	0x1e,
-	0xa0,
-	0x02,
-	0xad,
-	0x0b,
-	0x3c,
-	0xd0,
-	0x07,
-	0x53,
-	0xc7,
-	0x2b,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xc9,
-	0x2b,
-	0xcf,
-	0x00,
-	0x53,
-	0xcf,
-	0x2b,
-	0xdb,
-	0x00,
-	0x20,
-	0x0c,
-	0x12,
-	0xf0,
-	0x01,
-	0x60,
-	0xa5,
-	0x2d,
-	0x49,
-	0x10,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0x2e,
-	0x49,
-	0x10,
-	0x05,
-	0xd4,
-	0x85,
-	0xd4,
-	0x84,
-	0xd5,
-	0x64,
-	0xd6,
-	0xa0,
-	0x02,
-	0x53,
-	0x6d,
-	0x00,
-	0xcf,
-	0x00,
-	0x20,
-	0x81,
-	0x21,
-	0xa5,
-	0xd5,
-	0xd0,
-	0x0e,
-	0xa5,
-	0xd4,
-	0xd0,
-	0x0a,
-	0xa4,
-	0xd3,
-	0xc0,
-	0x08,
-	0x90,
-	0x08,
-	0xc0,
-	0x3f,
-	0x90,
-	0x06,
-	0xa0,
-	0x3f,
-	0x80,
-	0x02,
-	0xa0,
-	0x08,
-	0xb9,
-	0x93,
-	0x27,
-	0x85,
-	0x96,
-	0xa5,
-	0x83,
-	0xc9,
-	0x02,
-	0x90,
-	0x05,
-	0x20,
-	0xf8,
-	0x12,
-	0x80,
-	0x19,
-	0xad,
-	0xf6,
-	0x3c,
-	0x85,
-	0x99,
-	0xad,
-	0xf5,
-	0x3c,
-	0x45,
-	0x88,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x97,
-	0xad,
-	0xf4,
-	0x3c,
-	0x45,
-	0x89,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x98,
-	0x20,
-	0xd1,
-	0x13,
-	0x20,
-	0x17,
-	0x14,
-	0xa5,
-	0x86,
-	0xaa,
-	0x20,
-	0x6e,
-	0x14,
-	0x85,
-	0xcc,
-	0x8a,
-	0x20,
-	0x88,
-	0x14,
-	0x85,
-	0xcd,
-	0xa5,
-	0x32,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9a,
-	0xa5,
-	0x33,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9b,
-	0xa5,
-	0x36,
-	0x0a,
-	0x45,
-	0xcd,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0xa8,
-	0xb9,
-	0x53,
-	0x27,
-	0xaa,
-	0x29,
-	0x0f,
-	0x85,
-	0xa1,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x85,
-	0xa0,
-	0xa5,
-	0x31,
-	0x85,
-	0xa2,
-	0xa5,
-	0x77,
-	0xf0,
-	0x08,
-	0x64,
-	0x9c,
-	0x64,
-	0x9d,
-	0xa9,
-	0x3f,
-	0x80,
-	0x5f,
-	0xa5,
-	0x34,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x0a,
-	0x45,
-	0x84,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9c,
-	0xa5,
-	0x35,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x0a,
-	0x45,
-	0x84,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9d,
-	0xa5,
-	0x84,
-	0x20,
-	0x9b,
-	0x14,
-	0x85,
-	0xce,
-	0xa5,
-	0x36,
-	0x0a,
-	0x45,
-	0xcd,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x0a,
-	0x45,
-	0xce,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0xa8,
-	0xb9,
-	0x53,
-	0x27,
-	0xaa,
-	0x29,
-	0x0f,
-	0x85,
-	0x9f,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x85,
-	0x9e,
-	0xa5,
-	0x78,
-	0xc9,
-	0x02,
-	0xb0,
-	0x04,
-	0xa2,
-	0x00,
-	0x80,
-	0x02,
-	0xa2,
-	0x36,
-	0x86,
-	0xcb,
-	0xbd,
-	0x88,
-	0x3f,
-	0x85,
-	0xa4,
-	0xa2,
-	0x00,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0x8a,
-	0x3f,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0x89,
-	0x3f,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x08,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0x8a,
-	0x4a,
-	0x49,
-	0x09,
-	0x18,
-	0x65,
-	0xcb,
-	0xaa,
-	0xbd,
-	0x91,
-	0x3f,
-	0x85,
-	0xa5,
-	0xbd,
-	0x92,
-	0x3f,
-	0x85,
-	0xa6,
-	0xbd,
-	0x93,
-	0x3f,
-	0x85,
-	0xa7,
-	0xbd,
-	0x94,
-	0x3f,
-	0x85,
-	0xa8,
-	0xbd,
-	0x98,
-	0x3f,
-	0x85,
-	0xac,
-	0xbd,
-	0x99,
-	0x3f,
-	0x85,
-	0xad,
-	0xbd,
-	0x95,
-	0x3f,
-	0x85,
-	0xa9,
-	0xbd,
-	0x96,
-	0x3f,
-	0x85,
-	0xaa,
-	0xbd,
-	0x97,
-	0x3f,
-	0x85,
-	0xab,
-	0xa5,
-	0x77,
-	0xf0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x72,
-	0xa5,
-	0x84,
-	0x30,
-	0x0f,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x85,
-	0xcb,
-	0xa9,
-	0x20,
-	0x85,
-	0xcc,
-	0x80,
-	0x06,
-	0x29,
-	0x7f,
-	0x85,
-	0xcb,
-	0x64,
-	0xcc,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xa9,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xa9,
-	0x85,
-	0xa9,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xaa,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xaa,
-	0x85,
-	0xaa,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xab,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xab,
-	0x85,
-	0xab,
-	0xa9,
-	0x01,
-	0x85,
-	0xa3,
-	0xa5,
-	0x88,
-	0x85,
-	0xcb,
-	0x4a,
-	0x85,
-	0xcf,
-	0xa9,
-	0x08,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xb3,
-	0xa5,
-	0x89,
-	0x85,
-	0xcb,
-	0x4a,
-	0x85,
-	0xcf,
-	0xa9,
-	0x08,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xb2,
-	0xa5,
-	0x88,
-	0x85,
-	0xcb,
-	0x4a,
-	0x18,
-	0x69,
-	0xf0,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xc9,
-	0x03,
-	0x90,
-	0x10,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0xdf,
-	0x90,
-	0x08,
-	0xa9,
-	0xdf,
-	0x85,
-	0xcf,
-	0xa9,
-	0x03,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x20,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x46,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x6a,
-	0x85,
-	0xb0,
-	0xa5,
-	0x89,
-	0x85,
-	0xcb,
-	0x4a,
-	0x18,
-	0x69,
-	0xf0,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xc9,
-	0x03,
-	0x90,
-	0x10,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0xdf,
-	0x90,
-	0x08,
-	0xa9,
-	0xdf,
-	0x85,
-	0xcf,
-	0xa9,
-	0x03,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x20,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x46,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x6a,
-	0x85,
-	0xae,
-	0x64,
-	0xb1,
-	0x64,
-	0xcb,
-	0xa5,
-	0x88,
-	0xc9,
-	0x10,
-	0xb0,
-	0x06,
-	0x85,
-	0xcb,
-	0xa9,
-	0x01,
-	0x85,
-	0xb1,
-	0xa5,
-	0x89,
-	0xc9,
-	0x10,
-	0xb0,
-	0x10,
-	0xa5,
-	0xb1,
-	0x09,
-	0x02,
-	0x85,
-	0xb1,
-	0xa5,
-	0x89,
-	0xc5,
-	0xcb,
-	0x90,
-	0x08,
-	0x85,
-	0xcb,
-	0x80,
-	0x04,
-	0xa5,
-	0xb1,
-	0xf0,
-	0x45,
-	0xa5,
-	0xcb,
-	0x49,
-	0xdf,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0xa5,
-	0xcb,
-	0x49,
-	0x03,
-	0x18,
-	0x65,
-	0xd0,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x08,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x49,
-	0x10,
-	0x84,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x49,
-	0x10,
-	0x18,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x20,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x46,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x6a,
-	0x85,
-	0xaf,
-	0x80,
-	0x02,
-	0x64,
-	0xaf,
-	0xa5,
-	0x82,
-	0x49,
-	0x03,
-	0xaa,
-	0xbd,
-	0x58,
-	0x3f,
-	0x85,
-	0xb6,
-	0xbd,
-	0x59,
-	0x3f,
-	0x85,
-	0xb5,
-	0xbd,
-	0x5a,
-	0x3f,
-	0x85,
-	0xb4,
-	0xa5,
-	0x83,
-	0x49,
-	0x03,
-	0xa8,
-	0xb9,
-	0x64,
-	0x3f,
-	0x85,
-	0xb9,
-	0xb9,
-	0x65,
-	0x3f,
-	0x85,
-	0xb8,
-	0xb9,
-	0x66,
-	0x3f,
-	0x85,
-	0xb7,
-	0xa5,
-	0x77,
-	0xf0,
-	0x06,
-	0x64,
-	0xba,
-	0x64,
-	0xbb,
-	0x80,
-	0x5a,
-	0x20,
-	0xe6,
-	0x14,
-	0xa5,
-	0x84,
-	0x30,
-	0x0f,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x85,
-	0xcb,
-	0x64,
-	0xcc,
-	0x64,
-	0xcd,
-	0x80,
-	0x0a,
-	0x29,
-	0x7f,
-	0x85,
-	0xcb,
-	0x64,
-	0xcc,
-	0xa9,
-	0x39,
-	0x85,
-	0xcd,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xba,
-	0x85,
-	0xcc,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcc,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xba,
-	0x85,
-	0xba,
-	0x38,
-	0xa5,
-	0xcd,
-	0xe5,
-	0xbb,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xbb,
-	0x85,
-	0xbb,
-	0xa5,
-	0x75,
-	0xf0,
-	0x0c,
-	0xa0,
-	0x92,
-	0x9c,
-	0x18,
-	0x29,
-	0x13,
-	0x18,
-	0x29,
-	0x19,
-	0x29,
-	0x80,
-	0x3d,
-	0xa5,
-	0x79,
-	0xc9,
-	0x02,
-	0xb0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0xf0,
-	0x85,
-	0xd9,
-	0xad,
-	0x77,
-	0x3d,
-	0x1a,
-	0x49,
-	0x15,
-	0x85,
-	0xcd,
-	0xa5,
-	0x83,
-	0x20,
-	0xb1,
-	0x15,
-	0xa9,
-	0x18,
-	0x85,
-	0xd1,
-	0xa9,
-	0x29,
-	0x85,
-	0xd2,
-	0xa9,
-	0x00,
-	0x20,
-	0xe9,
-	0x15,
-	0xa5,
-	0x82,
-	0x20,
-	0xcc,
-	0x15,
-	0xa9,
-	0x24,
-	0x85,
-	0xd1,
-	0xa9,
-	0x29,
-	0x85,
-	0xd2,
-	0xa9,
-	0x01,
-	0x20,
-	0xe9,
-	0x15,
-	0x20,
-	0xc9,
-	0x16,
-	0xad,
-	0x53,
-	0x3c,
-	0x85,
-	0xbf,
-	0x85,
-	0xcd,
-	0xa5,
-	0xc5,
-	0x29,
-	0xf0,
-	0xf0,
-	0x08,
-	0x64,
-	0xbe,
-	0x64,
-	0xc0,
-	0xa5,
-	0xc6,
-	0x80,
-	0x12,
-	0xa5,
-	0xcd,
-	0xa6,
-	0x88,
-	0x20,
-	0xee,
-	0x16,
-	0x85,
-	0xbe,
-	0xa5,
-	0xcd,
-	0xa6,
-	0x89,
-	0x20,
-	0xee,
-	0x16,
-	0x85,
-	0xc0,
-	0x20,
-	0x22,
-	0x17,
-	0xa4,
-	0x79,
-	0xb9,
-	0x59,
-	0x3c,
-	0x85,
-	0xc3,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x00,
-	0xf0,
-	0x04,
-	0xa5,
-	0x7a,
-	0xd0,
-	0x04,
-	0xa9,
-	0x02,
-	0x85,
-	0x7f,
-	0xa9,
-	0x00,
-	0x60,
-	0xad,
-	0xb5,
-	0x2b,
-	0x29,
-	0xfc,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1d,
-	0x60,
-	0xae,
-	0xce,
-	0x2b,
-	0xad,
-	0xcd,
-	0x2b,
-	0x20,
-	0x3f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x22,
-	0x60,
-	0xae,
-	0xd0,
-	0x2b,
-	0xad,
-	0xcf,
-	0x2b,
-	0x20,
-	0x3f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x23,
-	0x60,
-	0xae,
-	0xd2,
-	0x2b,
-	0xad,
-	0xd1,
-	0x2b,
-	0x20,
-	0x3f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x24,
-	0x60,
-	0xae,
-	0xc8,
-	0x2b,
-	0xad,
-	0xc7,
-	0x2b,
-	0x20,
-	0x5f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1f,
-	0x60,
-	0xae,
-	0xca,
-	0x2b,
-	0xad,
-	0xc9,
-	0x2b,
-	0x20,
-	0x5f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x20,
-	0x60,
-	0xae,
-	0xcc,
-	0x2b,
-	0xad,
-	0xcb,
-	0x2b,
-	0x20,
-	0x5f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x21,
-	0x60,
-	0xae,
-	0xdd,
-	0x2b,
-	0xa9,
-	0x08,
-	0x20,
-	0x30,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x25,
-	0x60,
-	0xad,
-	0xd7,
-	0x2b,
-	0xc9,
-	0x10,
-	0xb0,
-	0x03,
-	0xa9,
-	0x26,
-	0x60,
-	0xad,
-	0xd8,
-	0x2b,
-	0xc9,
-	0x10,
-	0xb0,
-	0x03,
-	0xa9,
-	0x27,
-	0x60,
-	0xad,
-	0xde,
-	0x2b,
-	0xc9,
-	0x06,
-	0x90,
-	0x03,
-	0xa9,
-	0x29,
-	0x60,
-	0xf0,
-	0x54,
-	0x49,
-	0x04,
-	0x85,
-	0xcb,
-	0xa2,
-	0x00,
-	0xbd,
-	0xdf,
-	0x2b,
-	0xcd,
-	0x0c,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2a,
-	0x60,
-	0xbd,
-	0xe0,
-	0x2b,
-	0xcd,
-	0x0d,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2b,
-	0x60,
-	0xbd,
-	0xe1,
-	0x2b,
-	0xcd,
-	0x0c,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2c,
-	0x60,
-	0xbd,
-	0xe2,
-	0x2b,
-	0xcd,
-	0x0d,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2d,
-	0x60,
-	0xbd,
-	0xe1,
-	0x2b,
-	0xdd,
-	0xdf,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x2e,
-	0x60,
-	0xbd,
-	0xe2,
-	0x2b,
-	0xdd,
-	0xe0,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x2f,
-	0x60,
-	0x18,
-	0x8a,
-	0x69,
-	0x04,
-	0xc5,
-	0xcb,
-	0xb0,
-	0x04,
-	0xaa,
-	0x4c,
-	0xc9,
-	0x0b,
-	0xa9,
-	0x00,
-	0x60,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0f,
-	0xc9,
-	0x03,
-	0xf0,
-	0x0b,
-	0xc9,
-	0x05,
-	0xf0,
-	0x07,
-	0xc9,
-	0x07,
-	0xf0,
-	0x03,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0x86,
-	0xcb,
-	0xc5,
-	0xcb,
-	0xf0,
-	0x06,
-	0x4a,
-	0xd0,
-	0xf9,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0xec,
-	0xda,
-	0x3b,
-	0x90,
-	0x09,
-	0xd0,
-	0x13,
-	0xcd,
-	0xd9,
-	0x3b,
-	0xf0,
-	0x02,
-	0xb0,
-	0x0c,
-	0xec,
-	0xd8,
-	0x3b,
-	0x90,
-	0x07,
-	0xd0,
-	0x08,
-	0xcd,
-	0xd7,
-	0x3b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0xec,
-	0xe2,
-	0x3b,
-	0x90,
-	0x09,
-	0xd0,
-	0x13,
-	0xcd,
-	0xe1,
-	0x3b,
-	0xf0,
-	0x02,
-	0xb0,
-	0x0c,
-	0xec,
-	0xe0,
-	0x3b,
-	0x90,
-	0x07,
-	0xd0,
-	0x08,
-	0xcd,
-	0xdf,
-	0x3b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0xa0,
-	0x00,
-	0x18,
-	0xb9,
-	0x94,
-	0x3c,
-	0x79,
-	0x96,
-	0x3c,
-	0x85,
-	0xd1,
-	0xb9,
-	0x95,
-	0x3c,
-	0x79,
-	0x97,
-	0x3c,
-	0x6a,
-	0x85,
-	0xd2,
-	0x66,
-	0xd1,
-	0xa5,
-	0xd0,
-	0xc5,
-	0xd2,
-	0x90,
-	0x10,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc5,
-	0xd1,
-	0x90,
-	0x08,
-	0xc8,
-	0xc8,
-	0xc0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xd6,
-	0x98,
-	0x4a,
-	0x60,
-	0xc9,
-	0x00,
-	0xf0,
-	0x1d,
-	0xc9,
-	0x01,
-	0xf0,
-	0x12,
-	0xc9,
-	0x02,
-	0xf0,
-	0x07,
-	0xad,
-	0x9a,
-	0x3c,
-	0xae,
-	0x9b,
-	0x3c,
-	0x60,
-	0xad,
-	0x98,
-	0x3c,
-	0xae,
-	0x99,
-	0x3c,
-	0x60,
-	0xad,
-	0x96,
-	0x3c,
-	0xae,
-	0x97,
-	0x3c,
-	0x60,
-	0xad,
-	0x94,
-	0x3c,
-	0xae,
-	0x95,
-	0x3c,
-	0x60,
-	0x64,
-	0x71,
-	0x64,
-	0x72,
-	0xad,
-	0x0c,
-	0x3c,
-	0x85,
-	0x73,
-	0xad,
-	0x0d,
-	0x3c,
-	0x85,
-	0x74,
-	0xa9,
-	0x01,
-	0x85,
-	0x7a,
-	0x85,
-	0x7d,
-	0x85,
-	0x7e,
-	0x38,
-	0xad,
-	0xba,
-	0x2b,
-	0xed,
-	0xe3,
-	0x3b,
-	0xad,
-	0xbb,
-	0x2b,
-	0xed,
-	0xe4,
-	0x3b,
-	0x90,
-	0x03,
-	0xa9,
-	0x09,
-	0x60,
-	0xad,
-	0xc1,
-	0x2b,
-	0xd0,
-	0x10,
-	0xad,
-	0xc0,
-	0x2b,
-	0xaa,
-	0x4a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x13,
-	0x60,
-	0x8a,
-	0x20,
-	0x1a,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x11,
-	0x60,
-	0x8a,
-	0x1a,
-	0x4a,
-	0x85,
-	0x17,
-	0x64,
-	0xc2,
-	0xc9,
-	0x01,
-	0xf0,
-	0x02,
-	0xe6,
-	0xc2,
-	0x38,
-	0xad,
-	0xba,
-	0x2b,
-	0x6a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0d,
-	0x60,
-	0x2a,
-	0xed,
-	0xb6,
-	0x2b,
-	0xa8,
-	0x6a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0b,
-	0x60,
-	0x2a,
-	0xad,
-	0xbb,
-	0x2b,
-	0xed,
-	0xb7,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0f,
-	0x60,
-	0xc8,
-	0xd0,
-	0x01,
-	0x1a,
-	0x84,
-	0x19,
-	0x85,
-	0x1a,
-	0xa5,
-	0x19,
-	0xa6,
-	0x1a,
-	0xa4,
-	0x17,
-	0x20,
-	0xb3,
-	0x0f,
-	0x48,
-	0xda,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0x29,
-	0xfe,
-	0x85,
-	0x71,
-	0x86,
-	0x72,
-	0xa8,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x98,
-	0x6a,
-	0xd0,
-	0x01,
-	0xca,
-	0x3a,
-	0x85,
-	0x65,
-	0x86,
-	0x66,
-	0x68,
-	0x4a,
-	0x85,
-	0xd0,
-	0x68,
-	0x6a,
-	0x85,
-	0xcf,
-	0xad,
-	0x0c,
-	0x3c,
-	0x85,
-	0xcb,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xcf,
-	0x85,
-	0xd3,
-	0xc9,
-	0x14,
-	0xb0,
-	0x08,
-	0x46,
-	0x73,
-	0x06,
-	0x7d,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x07,
-	0xa5,
-	0xcf,
-	0xcd,
-	0xa0,
-	0x3c,
-	0xb0,
-	0x00,
-	0xad,
-	0xb4,
-	0x2b,
-	0xaa,
-	0xc9,
-	0x03,
-	0xd0,
-	0x03,
-	0xa9,
-	0x06,
-	0x60,
-	0x8a,
-	0x29,
-	0xe0,
-	0xd0,
-	0xf8,
-	0x8a,
-	0x29,
-	0x04,
-	0xf0,
-	0x02,
-	0x64,
-	0x7a,
-	0x38,
-	0xad,
-	0xbc,
-	0x2b,
-	0xed,
-	0xe5,
-	0x3b,
-	0xad,
-	0xbd,
-	0x2b,
-	0xed,
-	0xe6,
-	0x3b,
-	0x90,
-	0x03,
-	0xa9,
-	0x0a,
-	0x60,
-	0xad,
-	0xc5,
-	0x2b,
-	0xd0,
-	0x10,
-	0xad,
-	0xc4,
-	0x2b,
-	0xaa,
-	0x4a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x14,
-	0x60,
-	0x8a,
-	0x20,
-	0x1a,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x12,
-	0x60,
-	0x8a,
-	0x1a,
-	0x4a,
-	0x85,
-	0x18,
-	0x64,
-	0xc2,
-	0xc9,
-	0x01,
-	0xf0,
-	0x02,
-	0xe6,
-	0xc2,
-	0xad,
-	0xbc,
-	0x2b,
-	0x4a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0e,
-	0x60,
-	0x2a,
-	0x38,
-	0xed,
-	0xb8,
-	0x2b,
-	0xa8,
-	0x6a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0c,
-	0x60,
-	0x2a,
-	0xad,
-	0xbd,
-	0x2b,
-	0xed,
-	0xb9,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x10,
-	0x60,
-	0xc8,
-	0xd0,
-	0x01,
-	0x1a,
-	0x84,
-	0x1b,
-	0x85,
-	0x1c,
-	0xa5,
-	0x1b,
-	0xa6,
-	0x1c,
-	0xa4,
-	0x18,
-	0x20,
-	0xb3,
-	0x0f,
-	0x48,
-	0xda,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0xa8,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x98,
-	0x6a,
-	0xd0,
-	0x01,
-	0xca,
-	0x3a,
-	0x85,
-	0x67,
-	0x86,
-	0x68,
-	0x68,
-	0x4a,
-	0x85,
-	0xd0,
-	0x68,
-	0x6a,
-	0x85,
-	0xcf,
-	0xad,
-	0x0d,
-	0x3c,
-	0x85,
-	0xcb,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xcf,
-	0x85,
-	0xd4,
-	0xc9,
-	0x14,
-	0xb0,
-	0x08,
-	0x46,
-	0x74,
-	0x06,
-	0x7e,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x09,
-	0xa5,
-	0xcf,
-	0xcd,
-	0xa1,
-	0x3c,
-	0xb0,
-	0x02,
-	0x64,
-	0x7a,
-	0xa2,
-	0x00,
-	0xa5,
-	0x72,
-	0xcd,
-	0xa8,
-	0x02,
-	0xd0,
-	0x09,
-	0xa5,
-	0x71,
-	0xcd,
-	0xa7,
-	0x02,
-	0xd0,
-	0x02,
-	0x80,
-	0x01,
-	0xe8,
-	0x86,
-	0x7c,
-	0xa5,
-	0x18,
-	0xc5,
-	0x17,
-	0xb0,
-	0x02,
-	0xa5,
-	0x17,
-	0x85,
-	0x79,
-	0xc9,
-	0x03,
-	0x90,
-	0x0c,
-	0xa2,
-	0x01,
-	0x86,
-	0x75,
-	0xc9,
-	0x05,
-	0x90,
-	0x04,
-	0x86,
-	0x76,
-	0x86,
-	0x77,
-	0xad,
-	0x9f,
-	0x3c,
-	0xc5,
-	0x79,
-	0xb0,
-	0x02,
-	0x64,
-	0x7a,
-	0xa2,
-	0x01,
-	0xad,
-	0xc6,
-	0x2b,
-	0xf0,
-	0x21,
-	0xa8,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0xaa,
-	0xa9,
-	0x04,
-	0x20,
-	0x30,
-	0x0c,
-	0xd0,
-	0x0c,
-	0x98,
-	0x29,
-	0x0f,
-	0xdc,
-	0xaa,
-	0xa9,
-	0x04,
-	0x20,
-	0x30,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1c,
-	0x60,
-	0xc4,
-	0xcb,
-	0xb0,
-	0x01,
-	0xfc,
-	0x86,
-	0x78,
-	0x64,
-	0x7f,
-	0x64,
-	0x69,
-	0x64,
-	0x6a,
-	0x64,
-	0x6b,
-	0x64,
-	0x6c,
-	0xad,
-	0xb5,
-	0x2b,
-	0x85,
-	0x87,
-	0xd8,
-	0x4d,
-	0x0e,
-	0x3c,
-	0xf8,
-	0x85,
-	0x80,
-	0x85,
-	0xc1,
-	0xad,
-	0xb5,
-	0x2b,
-	0x29,
-	0x01,
-	0xd0,
-	0x0a,
-	0x64,
-	0x1f,
-	0x64,
-	0x20,
-	0xa9,
-	0x01,
-	0x85,
-	0x22,
-	0x80,
-	0x0b,
-	0xa5,
-	0x73,
-	0x3a,
-	0x85,
-	0x1f,
-	0x85,
-	0x20,
-	0xa9,
-	0xff,
-	0x85,
-	0x22,
-	0xa0,
-	0x02,
-	0x53,
-	0x19,
-	0x00,
-	0x23,
-	0x00,
-	0x53,
-	0xb6,
-	0x2b,
-	0x25,
-	0x00,
-	0xa9,
-	0xef,
-	0x85,
-	0xdd,
-	0xa9,
-	0x3b,
-	0x85,
-	0xde,
-	0xa9,
-	0xe7,
-	0x85,
-	0xdf,
-	0xa9,
-	0x3b,
-	0x85,
-	0xe0,
-	0xa9,
-	0xd7,
-	0x85,
-	0xdb,
-	0xa9,
-	0x2a,
-	0x85,
-	0xdc,
-	0xa9,
-	0x9f,
-	0x85,
-	0x1d,
-	0xa9,
-	0x2a,
-	0x85,
-	0x1e,
-	0xa5,
-	0x73,
-	0x85,
-	0x27,
-	0xa5,
-	0x17,
-	0x85,
-	0x29,
-	0x20,
-	0x10,
-	0x10,
-	0x20,
-	0x38,
-	0x0b,
-	0xf0,
-	0x01,
-	0x60,
-	0xad,
-	0xde,
-	0x2b,
-	0x85,
-	0xc4,
-	0xf0,
-	0x12,
-	0xa5,
-	0x7d,
-	0x3a,
-	0x85,
-	0x28,
-	0xa9,
-	0xf3,
-	0x85,
-	0xdf,
-	0xa9,
-	0x2a,
-	0x85,
-	0xe0,
-	0xa9,
-	0x00,
-	0x20,
-	0xb3,
-	0x11,
-	0xad,
-	0xb5,
-	0x2b,
-	0x29,
-	0x02,
-	0xd0,
-	0x0a,
-	0x64,
-	0x1f,
-	0x64,
-	0x20,
-	0xa9,
-	0x01,
-	0x85,
-	0x22,
-	0x80,
-	0x0b,
-	0xa5,
-	0x74,
-	0x3a,
-	0x85,
-	0x1f,
-	0x85,
-	0x20,
-	0xa9,
-	0xff,
-	0x85,
-	0x22,
-	0xa0,
-	0x02,
-	0x53,
-	0x1b,
-	0x00,
-	0x23,
-	0x00,
-	0x53,
-	0xb8,
-	0x2b,
-	0x25,
-	0x00,
-	0xa9,
-	0xff,
-	0x85,
-	0xdd,
-	0xa9,
-	0x3b,
-	0x85,
-	0xde,
-	0xa9,
-	0xeb,
-	0x85,
-	0xdf,
-	0xa9,
-	0x3b,
-	0x85,
-	0xe0,
-	0xa9,
-	0xe7,
-	0x85,
-	0xdb,
-	0xa9,
-	0x2a,
-	0x85,
-	0xdc,
-	0xa9,
-	0xbf,
-	0x85,
-	0x1d,
-	0xa9,
-	0x2a,
-	0x85,
-	0x1e,
-	0xa5,
-	0x74,
-	0x85,
-	0x27,
-	0xa5,
-	0x18,
-	0x85,
-	0x29,
-	0x20,
-	0x10,
-	0x10,
-	0xa5,
-	0xc4,
-	0xf0,
-	0x12,
-	0xa5,
-	0x7e,
-	0x3a,
-	0x85,
-	0x28,
-	0xa9,
-	0x03,
-	0x85,
-	0xdf,
-	0xa9,
-	0x2b,
-	0x85,
-	0xe0,
-	0xa9,
-	0x01,
-	0x20,
-	0xb3,
-	0x11,
-	0xa9,
-	0x00,
-	0x60,
-	0x88,
-	0x84,
-	0xcb,
-	0xc8,
-	0x18,
-	0x65,
-	0xcb,
-	0x90,
-	0x01,
-	0xe8,
-	0x20,
-	0xc1,
-	0x0f,
-	0x60,
-	0xc0,
-	0x01,
-	0xd0,
-	0x01,
-	0x60,
-	0x85,
-	0xcb,
-	0x98,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0e,
-	0x29,
-	0x01,
-	0xd0,
-	0x0d,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x66,
-	0xcb,
-	0x98,
-	0x4a,
-	0xa8,
-	0x80,
-	0xee,
-	0xa5,
-	0xcb,
-	0x60,
-	0xa5,
-	0xcb,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0x49,
-	0x55,
-	0x84,
-	0xcd,
-	0x18,
-	0x65,
-	0xcd,
-	0x85,
-	0xcc,
-	0x90,
-	0x03,
-	0xe6,
-	0xcd,
-	0x18,
-	0x8a,
-	0x49,
-	0x55,
-	0x84,
-	0xce,
-	0xaa,
-	0x65,
-	0xcc,
-	0x8a,
-	0x65,
-	0xcd,
-	0x85,
-	0xcd,
-	0xa5,
-	0xce,
-	0x90,
-	0x03,
-	0xe6,
-	0xce,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0xa5,
-	0xce,
-	0x69,
-	0x00,
-	0xaa,
-	0x98,
-	0x60,
-	0xa5,
-	0x27,
-	0x85,
-	0xcb,
-	0x3a,
-	0x4a,
-	0x85,
-	0xce,
-	0x38,
-	0xe5,
-	0x27,
-	0x85,
-	0xce,
-	0xa0,
-	0x02,
-	0x53,
-	0x23,
-	0x00,
-	0xcf,
-	0x00,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x18,
-	0xa9,
-	0x02,
-	0x65,
-	0xcf,
-	0x85,
-	0xd3,
-	0xa9,
-	0x00,
-	0x65,
-	0xd0,
-	0x85,
-	0xd4,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x00,
-	0xbb,
-	0x29,
-	0x53,
-	0xd3,
-	0x00,
-	0xbd,
-	0x29,
-	0xa5,
-	0x27,
-	0x1a,
-	0x4a,
-	0x3a,
-	0x85,
-	0xcd,
-	0xa2,
-	0x00,
-	0xda,
-	0xe4,
-	0xcd,
-	0xd0,
-	0x02,
-	0xe6,
-	0xce,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0xd1,
-	0x85,
-	0xce,
-	0x30,
-	0x09,
-	0x38,
-	0xe5,
-	0x27,
-	0x85,
-	0xce,
-	0xa9,
-	0x02,
-	0x80,
-	0x02,
-	0xa9,
-	0x00,
-	0xfa,
-	0x9d,
-	0xab,
-	0x29,
-	0xe8,
-	0xe4,
-	0x27,
-	0xf0,
-	0x03,
-	0xda,
-	0x80,
-	0xda,
-	0xa5,
-	0x29,
-	0x85,
-	0xcb,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x00,
-	0xd7,
-	0x00,
-	0xa5,
-	0x29,
-	0x85,
-	0xcb,
-	0x45,
-	0xd7,
-	0x85,
-	0xd9,
-	0xfc,
-	0xa5,
-	0xcb,
-	0x45,
-	0xd8,
-	0x85,
-	0xda,
-	0x8a,
-	0x18,
-	0x65,
-	0xda,
-	0x85,
-	0xda,
-	0x38,
-	0xa5,
-	0xd7,
-	0xe9,
-	0x01,
-	0x85,
-	0xd7,
-	0xa5,
-	0xd8,
-	0xe9,
-	0x00,
-	0x85,
-	0xd8,
-	0xe6,
-	0xcd,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0x64,
-	0xcf,
-	0x64,
-	0xd0,
-	0x64,
-	0xd3,
-	0x64,
-	0xd4,
-	0x64,
-	0xce,
-	0xa2,
-	0x00,
-	0x86,
-	0xcc,
-	0xbd,
-	0xab,
-	0x29,
-	0xaa,
-	0xe8,
-	0xbd,
-	0xbb,
-	0x29,
-	0x4a,
-	0x85,
-	0xd6,
-	0xca,
-	0xbd,
-	0xbb,
-	0x29,
-	0x6a,
-	0x85,
-	0xd5,
-	0x18,
-	0xa5,
-	0xd1,
-	0x65,
-	0xd9,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd2,
-	0x65,
-	0xda,
-	0x85,
-	0xd2,
-	0x38,
-	0xa5,
-	0xd1,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd2,
-	0xe5,
-	0xd6,
-	0x85,
-	0xd2,
-	0x18,
-	0x10,
-	0x0d,
-	0xa5,
-	0x29,
-	0x65,
-	0xd1,
-	0x85,
-	0xd1,
-	0xa9,
-	0x00,
-	0x65,
-	0xd2,
-	0x85,
-	0xd2,
-	0x38,
-	0xa5,
-	0xd7,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd8,
-	0x65,
-	0xd0,
-	0x85,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x0a,
-	0x09,
-	0x01,
-	0x92,
-	0x1d,
-	0xa5,
-	0xd0,
-	0x2a,
-	0xa0,
-	0x01,
-	0x91,
-	0x1d,
-	0x18,
-	0xa5,
-	0x1d,
-	0x69,
-	0x02,
-	0x85,
-	0x1d,
-	0xa5,
-	0x1e,
-	0x69,
-	0x00,
-	0x85,
-	0x1e,
-	0xe6,
-	0xcf,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd0,
-	0xa6,
-	0xcc,
-	0xbd,
-	0xab,
-	0x29,
-	0xaa,
-	0xbd,
-	0xbb,
-	0x29,
-	0x85,
-	0xd5,
-	0xe8,
-	0xbd,
-	0xbb,
-	0x29,
-	0x85,
-	0xd6,
-	0xa5,
-	0xcc,
-	0xc5,
-	0xcd,
-	0xb0,
-	0x0d,
-	0x38,
-	0xa5,
-	0xd5,
-	0xe9,
-	0x01,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd6,
-	0xe9,
-	0x00,
-	0x85,
-	0xd6,
-	0x46,
-	0xd6,
-	0x66,
-	0xd5,
-	0x18,
-	0xa5,
-	0x25,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0x26,
-	0x65,
-	0xd6,
-	0x85,
-	0xd6,
-	0xa6,
-	0xcc,
-	0xbd,
-	0xab,
-	0x29,
-	0xaa,
-	0x18,
-	0xbd,
-	0xbb,
-	0x29,
-	0x65,
-	0x25,
-	0x85,
-	0x25,
-	0xe8,
-	0xbd,
-	0xbb,
-	0x29,
-	0x65,
-	0x26,
-	0x85,
-	0x26,
-	0xa5,
-	0xd6,
-	0xc5,
-	0xd4,
-	0x90,
-	0x1f,
-	0xd0,
-	0x06,
-	0xa5,
-	0xd5,
-	0xc5,
-	0xd3,
-	0x90,
-	0x17,
-	0xa4,
-	0xce,
-	0xb1,
-	0xdd,
-	0xa8,
-	0xb1,
-	0xdf,
-	0x18,
-	0x65,
-	0xd3,
-	0x85,
-	0xd3,
-	0xc8,
-	0xb1,
-	0xdf,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0xe6,
-	0xce,
-	0x80,
-	0xdb,
-	0xa5,
-	0xce,
-	0x3a,
-	0xa4,
-	0x1f,
-	0x91,
-	0xdb,
-	0x18,
-	0x98,
-	0x65,
-	0x22,
-	0x85,
-	0x1f,
-	0xa6,
-	0xcc,
-	0xe8,
-	0xe4,
-	0x27,
-	0xb0,
-	0x05,
-	0x86,
-	0xcc,
-	0x4c,
-	0xc0,
-	0x10,
-	0x60,
-	0xaa,
-	0x64,
-	0xcb,
-	0xa9,
-	0x01,
-	0x85,
-	0xcc,
-	0x64,
-	0xcd,
-	0xa4,
-	0x20,
-	0xbd,
-	0xdf,
-	0x2b,
-	0x85,
-	0xce,
-	0xbd,
-	0xe1,
-	0x2b,
-	0x85,
-	0xcf,
-	0xa5,
-	0x28,
-	0xf0,
-	0x04,
-	0x46,
-	0xce,
-	0x46,
-	0xcf,
-	0xa5,
-	0xcb,
-	0xd0,
-	0x02,
-	0x91,
-	0xdf,
-	0xa5,
-	0xcd,
-	0xc5,
-	0xce,
-	0x90,
-	0x0c,
-	0xc5,
-	0xcf,
-	0xf0,
-	0x02,
-	0xb0,
-	0x06,
-	0xb1,
-	0xdf,
-	0x05,
-	0xcc,
-	0x91,
-	0xdf,
-	0xa5,
-	0xcd,
-	0x1a,
-	0xc5,
-	0x27,
-	0xb0,
-	0x09,
-	0x85,
-	0xcd,
-	0x18,
-	0x98,
-	0x65,
-	0x22,
-	0xa8,
-	0x80,
-	0xd8,
-	0xa5,
-	0xcb,
-	0x1a,
-	0xcd,
-	0xde,
-	0x2b,
-	0xb0,
-	0x0b,
-	0x85,
-	0xcb,
-	0x8a,
-	0x18,
-	0x69,
-	0x04,
-	0xaa,
-	0x06,
-	0xcc,
-	0x80,
-	0xaf,
-	0x60,
-	0xad,
-	0xcf,
-	0x3b,
-	0x0d,
-	0xd0,
-	0x3b,
-	0xf0,
-	0x2d,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x3b,
-	0xd1,
-	0x00,
-	0x20,
-	0x3d,
-	0x21,
-	0xa0,
-	0x02,
-	0x53,
-	0xd1,
-	0x3b,
-	0xcf,
-	0x00,
-	0x20,
-	0xe2,
-	0x20,
-	0xa0,
-	0x02,
-	0x53,
-	0xd5,
-	0x3b,
-	0xd7,
-	0x00,
-	0xa5,
-	0xd8,
-	0x10,
-	0x08,
-	0xa2,
-	0xff,
-	0x86,
-	0xd9,
-	0x86,
-	0xda,
-	0x80,
-	0x38,
-	0x64,
-	0xd9,
-	0x64,
-	0xda,
-	0x80,
-	0x32,
-	0xa0,
-	0x02,
-	0x53,
-	0xd3,
-	0x3b,
-	0xd1,
-	0x00,
-	0x20,
-	0x3d,
-	0x21,
-	0xa0,
-	0x02,
-	0x53,
-	0xd5,
-	0x3b,
-	0xcf,
-	0x00,
-	0x20,
-	0xe2,
-	0x20,
-	0xa0,
-	0x04,
-	0x53,
-	0xd3,
-	0x00,
-	0xd7,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0xd1,
-	0x3b,
-	0xd3,
-	0x00,
-	0xa5,
-	0xd4,
-	0x10,
-	0x08,
-	0xa2,
-	0xff,
-	0x86,
-	0xd5,
-	0x86,
-	0xd6,
-	0x80,
-	0x04,
-	0x64,
-	0xd5,
-	0x64,
-	0xd6,
-	0xd8,
-	0xa5,
-	0xd6,
-	0x45,
-	0xda,
-	0xf8,
-	0x10,
-	0x03,
-	0xa9,
-	0x1e,
-	0x60,
-	0xa5,
-	0xd6,
-	0x10,
-	0x03,
-	0x20,
-	0xda,
-	0x21,
-	0x20,
-	0x07,
-	0x22,
-	0x64,
-	0xd3,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x00,
-	0xd4,
-	0x00,
-	0x64,
-	0xd6,
-	0x53,
-	0xd1,
-	0x00,
-	0xcf,
-	0x00,
-	0x20,
-	0x81,
-	0x21,
-	0xa5,
-	0xd5,
-	0xf0,
-	0x06,
-	0xa9,
-	0xff,
-	0x85,
-	0xd3,
-	0x85,
-	0xd4,
-	0xa5,
-	0xd3,
-	0x45,
-	0xdb,
-	0x85,
-	0xd7,
-	0x84,
-	0xd8,
-	0xa5,
-	0xd3,
-	0x45,
-	0xdc,
-	0x18,
-	0x65,
-	0xd8,
-	0x85,
-	0xd8,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd4,
-	0x45,
-	0xdb,
-	0x18,
-	0x65,
-	0xd8,
-	0x85,
-	0xd8,
-	0x98,
-	0x65,
-	0xd9,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd4,
-	0x45,
-	0xdc,
-	0x65,
-	0xd9,
-	0x85,
-	0xd9,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xda,
-	0xa5,
-	0xd7,
-	0x10,
-	0x08,
-	0xe6,
-	0xd8,
-	0xd0,
-	0x04,
-	0xe6,
-	0xd9,
-	0xf0,
-	0x0d,
-	0xa5,
-	0xda,
-	0xd0,
-	0x09,
-	0xa0,
-	0x02,
-	0x53,
-	0xd8,
-	0x00,
-	0x2d,
-	0x00,
-	0x80,
-	0x06,
-	0xa9,
-	0xff,
-	0x85,
-	0x2d,
-	0x85,
-	0x2e,
-	0xa9,
-	0x00,
-	0x60,
-	0xa2,
-	0x02,
-	0xa5,
-	0x6e,
-	0xdd,
-	0xcb,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xdd,
-	0xca,
-	0x3c,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe8,
-	0xca,
-	0xca,
-	0xda,
-	0x38,
-	0xa5,
-	0x6d,
-	0xfd,
-	0xca,
-	0x3c,
-	0x85,
-	0xcf,
-	0xa5,
-	0x6e,
-	0xfd,
-	0xcb,
-	0x3c,
-	0x85,
-	0xd0,
-	0xbd,
-	0xe5,
-	0x3c,
-	0x85,
-	0xd1,
-	0xbd,
-	0xe6,
-	0x3c,
-	0x85,
-	0xd2,
-	0x20,
-	0x04,
-	0x21,
-	0x8a,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xf1,
-	0x3c,
-	0xf0,
-	0x12,
-	0x38,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x98,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0xbd,
-	0xd6,
-	0x3c,
-	0x18,
-	0x65,
-	0xd5,
-	0x85,
-	0x99,
-	0xfa,
-	0xda,
-	0xbd,
-	0xdf,
-	0x3c,
-	0x85,
-	0xd1,
-	0xbd,
-	0xe0,
-	0x3c,
-	0x85,
-	0xd2,
-	0x20,
-	0x04,
-	0x21,
-	0x8a,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xee,
-	0x3c,
-	0xf0,
-	0x12,
-	0x38,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x98,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0xbd,
-	0xd3,
-	0x3c,
-	0x18,
-	0x65,
-	0xd5,
-	0x45,
-	0x88,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x97,
-	0xfa,
-	0xbd,
-	0xd9,
-	0x3c,
-	0x85,
-	0xd1,
-	0xbd,
-	0xda,
-	0x3c,
-	0x85,
-	0xd2,
-	0x20,
-	0x04,
-	0x21,
-	0x8a,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xeb,
-	0x3c,
-	0xf0,
-	0x12,
-	0x38,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x98,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0xbd,
-	0xd0,
-	0x3c,
-	0x18,
-	0x65,
-	0xd5,
-	0x45,
-	0x89,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x98,
-	0x60,
-	0xa5,
-	0x78,
-	0xc9,
-	0x02,
-	0xb0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0x33,
-	0x85,
-	0xcb,
-	0xa2,
-	0x00,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0xfa,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0xf9,
-	0x3c,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0x8a,
-	0x4a,
-	0x49,
-	0x05,
-	0x18,
-	0x65,
-	0xcb,
-	0x18,
-	0x69,
-	0xff,
-	0x85,
-	0xd1,
-	0xa9,
-	0x3c,
-	0x69,
-	0x00,
-	0x85,
-	0xd2,
-	0xa0,
-	0x05,
-	0xd3,
-	0xd1,
-	0x31,
-	0x00,
-	0x60,
-	0xa2,
-	0x02,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0x14,
-	0x3d,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0x13,
-	0x3d,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x0a,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0xca,
-	0xca,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0x38,
-	0xa5,
-	0x6d,
-	0xf9,
-	0x13,
-	0x3d,
-	0x85,
-	0xcf,
-	0xa5,
-	0x6e,
-	0xf9,
-	0x14,
-	0x3d,
-	0x85,
-	0xd0,
-	0xb9,
-	0x1d,
-	0x3d,
-	0x85,
-	0xd1,
-	0xb9,
-	0x1e,
-	0x3d,
-	0x85,
-	0xd2,
-	0x20,
-	0x3d,
-	0x21,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0x8a,
-	0x4a,
-	0x18,
-	0x65,
-	0xcb,
-	0xa8,
-	0x18,
-	0xb9,
-	0x27,
-	0x3d,
-	0x65,
-	0xd5,
-	0x85,
-	0x36,
-	0x60,
-	0x38,
-	0x30,
-	0x0b,
-	0x85,
-	0xcb,
-	0xa9,
-	0x00,
-	0xe5,
-	0xcb,
-	0xd0,
-	0x02,
-	0xa9,
-	0xff,
-	0x60,
-	0xe9,
-	0x80,
-	0x4a,
-	0x4a,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x60,
-	0x38,
-	0xe9,
-	0x80,
-	0xaa,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0xd8,
-	0x49,
-	0x01,
-	0xf8,
-	0x4a,
-	0x8a,
-	0x6a,
-	0x18,
-	0x69,
-	0x80,
-	0x60,
-	0x38,
-	0x30,
-	0x0b,
-	0x85,
-	0xcb,
-	0xa9,
-	0x00,
-	0xe5,
-	0xcb,
-	0xd0,
-	0x02,
-	0xa9,
-	0xff,
-	0x60,
-	0xe9,
-	0x80,
-	0x4a,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x60,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xcb,
-	0x8a,
-	0x3c,
-	0x45,
-	0xcb,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xdc,
-	0x10,
-	0x01,
-	0x1a,
-	0x18,
-	0x69,
-	0x80,
-	0x60,
-	0x0a,
-	0x85,
-	0xcb,
-	0x8a,
-	0x45,
-	0xcb,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0x60,
-	0x0a,
-	0x85,
-	0xcb,
-	0x8a,
-	0x45,
-	0xcb,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x7f,
-	0xb0,
-	0x01,
-	0x60,
-	0xa9,
-	0x7f,
-	0x60,
-	0xa2,
-	0x02,
-	0xa5,
-	0x6e,
-	0xdd,
-	0x71,
-	0x3f,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xdd,
-	0x70,
-	0x3f,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe8,
-	0xca,
-	0xca,
-	0xda,
-	0x38,
-	0xa5,
-	0x6d,
-	0xfd,
-	0x70,
-	0x3f,
-	0x85,
-	0xcf,
-	0xa5,
-	0x6e,
-	0xfd,
-	0x71,
-	0x3f,
-	0x85,
-	0xd0,
-	0xbd,
-	0x76,
-	0x3f,
-	0x85,
-	0xd1,
-	0xbd,
-	0x77,
-	0x3f,
-	0x85,
-	0xd2,
-	0x20,
-	0x3d,
-	0x21,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x18,
-	0xbd,
-	0x82,
-	0x3f,
-	0x65,
-	0xd5,
-	0x85,
-	0xba,
-	0xfa,
-	0xbd,
-	0x7c,
-	0x3f,
-	0x85,
-	0xd1,
-	0xbd,
-	0x7d,
-	0x3f,
-	0x85,
-	0xd2,
-	0x20,
-	0x3d,
-	0x21,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x18,
-	0xbd,
-	0x85,
-	0x3f,
-	0x65,
-	0xd5,
-	0x85,
-	0xbb,
-	0x60,
-	0x5a,
-	0x86,
-	0xcb,
-	0x45,
-	0xcb,
-	0xaa,
-	0x98,
-	0x29,
-	0x30,
-	0xd0,
-	0x12,
-	0x98,
-	0x49,
-	0x08,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x10,
-	0x98,
-	0x4a,
-	0x05,
-	0xcb,
-	0x69,
-	0x00,
-	0x30,
-	0x02,
-	0x7a,
-	0x60,
-	0xa9,
-	0x7f,
-	0x7a,
-	0x60,
-	0x5a,
-	0x86,
-	0xcb,
-	0x45,
-	0xcb,
-	0xaa,
-	0x98,
-	0x29,
-	0x38,
-	0xd0,
-	0x12,
-	0x98,
-	0x49,
-	0x10,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x20,
-	0x98,
-	0x4a,
-	0x05,
-	0xcb,
-	0x69,
-	0x00,
-	0x30,
-	0x02,
-	0x7a,
-	0x60,
-	0xa9,
-	0x7f,
-	0x7a,
-	0x60,
-	0x5a,
-	0x86,
-	0xcb,
-	0x45,
-	0xcb,
-	0xaa,
-	0x98,
-	0x29,
-	0xf8,
-	0xd0,
-	0x10,
-	0x98,
-	0x49,
-	0x10,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x20,
-	0x98,
-	0x4a,
-	0x05,
-	0xcb,
-	0x69,
-	0x00,
-	0x10,
-	0x02,
-	0xa9,
-	0x7f,
-	0x7a,
-	0x60,
-	0x49,
-	0x3c,
-	0x18,
-	0x65,
-	0xd9,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0xd0,
-	0x18,
-	0xa5,
-	0xcf,
-	0x69,
-	0x78,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x60,
-	0xf0,
-	0x02,
-	0xa9,
-	0x3c,
-	0x18,
-	0x65,
-	0xd9,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0xd0,
-	0x18,
-	0xa5,
-	0xcf,
-	0x69,
-	0x78,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x60,
-	0x85,
-	0xd8,
-	0xa9,
-	0x04,
-	0x48,
-	0x80,
-	0x1a,
-	0xfa,
-	0xfa,
-	0x48,
-	0xa9,
-	0x0f,
-	0x18,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0xd0,
-	0xa5,
-	0xcd,
-	0x65,
-	0xd1,
-	0x85,
-	0xd1,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0xd2,
-	0xa0,
-	0x0f,
-	0xd3,
-	0xcf,
-	0x56,
-	0x00,
-	0xa6,
-	0x62,
-	0xa5,
-	0x85,
-	0x20,
-	0xb4,
-	0x14,
-	0x85,
-	0xcc,
-	0xa6,
-	0x63,
-	0xa5,
-	0x85,
-	0x20,
-	0xb4,
-	0x14,
-	0x85,
-	0xce,
-	0xa6,
-	0x64,
-	0xa5,
-	0x85,
-	0x20,
-	0xb4,
-	0x14,
-	0x85,
-	0xd3,
-	0xa5,
-	0x56,
-	0xa6,
-	0xce,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x89,
-	0x20,
-	0x71,
-	0x15,
-	0x85,
-	0x56,
-	0xa5,
-	0x57,
-	0xa6,
-	0xd3,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x30,
-	0x20,
-	0x92,
-	0x15,
-	0x85,
-	0x57,
-	0xa5,
-	0x58,
-	0xa6,
-	0xcc,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x58,
-	0xa5,
-	0x59,
-	0xa6,
-	0xcc,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x59,
-	0xa5,
-	0x5a,
-	0xa6,
-	0xcc,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x8b,
-	0x20,
-	0x50,
-	0x15,
-	0x85,
-	0x5a,
-	0xa5,
-	0x5b,
-	0xa6,
-	0xd3,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x8a,
-	0x20,
-	0x50,
-	0x15,
-	0x85,
-	0x5b,
-	0xa5,
-	0x5c,
-	0xa6,
-	0xce,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x5c,
-	0xa5,
-	0x5d,
-	0xa6,
-	0xce,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x5d,
-	0xa5,
-	0x5e,
-	0xa6,
-	0xd3,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x5e,
-	0xa0,
-	0x09,
-	0xa5,
-	0xd8,
-	0xd0,
-	0x27,
-	0xa5,
-	0x5f,
-	0xa6,
-	0xcc,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x2f,
-	0x20,
-	0x92,
-	0x15,
-	0x85,
-	0x5f,
-	0xa5,
-	0x60,
-	0xa6,
-	0xce,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x88,
-	0x20,
-	0x71,
-	0x15,
-	0x85,
-	0x60,
-	0xa5,
-	0x61,
-	0xa6,
-	0xd3,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x61,
-	0xa0,
-	0x0c,
-	0x73,
-	0x56,
-	0x00,
-	0xd1,
-	0x68,
-	0x3a,
-	0xd0,
-	0x01,
-	0x60,
-	0x20,
-	0xf0,
-	0x15,
-	0xa9,
-	0x03,
-	0x48,
-	0xa2,
-	0x00,
-	0x80,
-	0x06,
-	0x48,
-	0x18,
-	0x8a,
-	0x69,
-	0x15,
-	0xaa,
-	0xa0,
-	0x15,
-	0x18,
-	0xbd,
-	0x18,
-	0x29,
-	0x7d,
-	0x42,
-	0x29,
-	0x4a,
-	0x69,
-	0x00,
-	0x9d,
-	0x2d,
-	0x29,
-	0xe8,
-	0x88,
-	0xd0,
-	0xef,
-	0x68,
-	0x3a,
-	0xd0,
-	0xe3,
-	0x60,
-	0xbc,
-	0x93,
-	0x27,
-	0x84,
-	0xcb,
-	0x45,
-	0xcb,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xb0,
-	0x15,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xb0,
-	0x0f,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xb0,
-	0x09,
-	0xa9,
-	0xc0,
-	0x25,
-	0xd0,
-	0xd0,
-	0x03,
-	0xa5,
-	0xd0,
-	0x60,
-	0xa9,
-	0x3f,
-	0x60,
-	0xa5,
-	0x2b,
-	0x49,
-	0x10,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0x2c,
-	0x49,
-	0x10,
-	0x05,
-	0xd4,
-	0x85,
-	0xd4,
-	0x84,
-	0xd5,
-	0x64,
-	0xd6,
-	0xa0,
-	0x02,
-	0x53,
-	0x6d,
-	0x00,
-	0xcf,
-	0x00,
-	0x20,
-	0x81,
-	0x21,
-	0xa5,
-	0xd5,
-	0xd0,
-	0x0a,
-	0xa5,
-	0xd4,
-	0xd0,
-	0x06,
-	0xa5,
-	0xd3,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x45,
-	0x89,
-	0x18,
-	0x69,
-	0x08,
-	0x85,
-	0xcb,
-	0x98,
-	0x69,
-	0x00,
-	0x49,
-	0x10,
-	0xc0,
-	0x00,
-	0xd0,
-	0x0f,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x49,
-	0x10,
-	0x84,
-	0xcb,
-	0x8a,
-	0x05,
-	0xcb,
-	0xcd,
-	0x62,
-	0x3c,
-	0x90,
-	0x05,
-	0xad,
-	0x64,
-	0x3c,
-	0x80,
-	0x03,
-	0xad,
-	0x63,
-	0x3c,
-	0x18,
-	0x69,
-	0x20,
-	0x29,
-	0x3f,
-	0x85,
-	0xcb,
-	0xa4,
-	0x78,
-	0xb9,
-	0x5d,
-	0x3c,
-	0x18,
-	0x69,
-	0x20,
-	0x29,
-	0x3f,
-	0x85,
-	0xcc,
-	0xa4,
-	0x79,
-	0xb9,
-	0x55,
-	0x3c,
-	0x45,
-	0xcc,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x06,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x2a,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x2a,
-	0x85,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x45,
-	0xcb,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd0,
-	0xf0,
-	0x05,
-	0x18,
-	0x98,
-	0x65,
-	0xcb,
-	0xa8,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x64,
-	0xcb,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xcb,
-	0x06,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x2a,
-	0x85,
-	0xd1,
-	0xa5,
-	0xcb,
-	0x2a,
-	0x85,
-	0xd2,
-	0xa0,
-	0x00,
-	0x5a,
-	0xb9,
-	0x28,
-	0x3c,
-	0x18,
-	0x69,
-	0x20,
-	0x29,
-	0x3f,
-	0x85,
-	0xcb,
-	0xa5,
-	0xcb,
-	0x45,
-	0xd1,
-	0x85,
-	0xcf,
-	0xfc,
-	0xa5,
-	0xcb,
-	0x45,
-	0xd2,
-	0x85,
-	0xd0,
-	0x8a,
-	0x18,
-	0x65,
-	0xd0,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x64,
-	0xcb,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xcb,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xcb,
-	0x06,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x2a,
-	0xa8,
-	0xa5,
-	0xcb,
-	0x2a,
-	0xd0,
-	0x05,
-	0x98,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x7a,
-	0x99,
-	0x1d,
-	0x2b,
-	0xc8,
-	0xc0,
-	0x07,
-	0x90,
-	0xae,
-	0xa9,
-	0x00,
-	0x60,
-	0xa5,
-	0xc6,
-	0xa8,
-	0x29,
-	0x0f,
-	0xf0,
-	0x28,
-	0x98,
-	0x29,
-	0xf0,
-	0xf0,
-	0x23,
-	0xa5,
-	0xc5,
-	0xaa,
-	0x29,
-	0x0f,
-	0x3a,
-	0xd0,
-	0x11,
-	0xd8,
-	0x8a,
-	0x49,
-	0x10,
-	0xaa,
-	0xd0,
-	0x07,
-	0x98,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x80,
-	0x03,
-	0x98,
-	0x29,
-	0x0f,
-	0xf8,
-	0x85,
-	0xc5,
-	0x8a,
-	0x29,
-	0x10,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x60,
-	0xa9,
-	0x01,
-	0x8d,
-	0x10,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0xad,
-	0x3c,
-	0x58,
-	0x60,
-	0x53,
-	0x65,
-	0x00,
-	0x18,
-	0x60,
-	0x53,
-	0x67,
-	0x00,
-	0x1c,
-	0x60,
-	0x53,
-	0x69,
-	0x00,
-	0x28,
-	0x60,
-	0x53,
-	0x6b,
-	0x00,
-	0x2c,
-	0x60,
-	0x53,
-	0x6f,
-	0x00,
-	0x30,
-	0x60,
-	0xa0,
-	0x01,
-	0x53,
-	0xb3,
-	0x3c,
-	0x20,
-	0x61,
-	0x53,
-	0xb4,
-	0x3c,
-	0x24,
-	0x61,
-	0x53,
-	0xb5,
-	0x3c,
-	0x28,
-	0x61,
-	0x53,
-	0xaf,
-	0x3c,
-	0x2c,
-	0x61,
-	0x53,
-	0xb0,
-	0x3c,
-	0x30,
-	0x61,
-	0x53,
-	0xb1,
-	0x3c,
-	0x34,
-	0x61,
-	0x53,
-	0xb2,
-	0x3c,
-	0x38,
-	0x61,
-	0x53,
-	0xb6,
-	0x3c,
-	0x3c,
-	0x61,
-	0x53,
-	0xb7,
-	0x3c,
-	0x40,
-	0x61,
-	0x53,
-	0xf4,
-	0x3f,
-	0x74,
-	0x60,
-	0x53,
-	0xaa,
-	0x3c,
-	0x0c,
-	0x61,
-	0x53,
-	0xab,
-	0x3c,
-	0x44,
-	0x61,
-	0x53,
-	0xac,
-	0x3c,
-	0x88,
-	0x60,
-	0x53,
-	0x54,
-	0x3c,
-	0xdc,
-	0x60,
-	0x53,
-	0x55,
-	0x3c,
-	0x68,
-	0x61,
-	0x53,
-	0x80,
-	0x00,
-	0x14,
-	0x60,
-	0x53,
-	0x7f,
-	0x00,
-	0x3c,
-	0x60,
-	0x53,
-	0x88,
-	0x00,
-	0xec,
-	0x60,
-	0x53,
-	0x89,
-	0x00,
-	0xe0,
-	0x60,
-	0x53,
-	0x8a,
-	0x00,
-	0xe8,
-	0x60,
-	0x53,
-	0x8b,
-	0x00,
-	0xe4,
-	0x60,
-	0x53,
-	0x8e,
-	0x00,
-	0x64,
-	0x61,
-	0x53,
-	0x8f,
-	0x00,
-	0x80,
-	0x60,
-	0x53,
-	0x90,
-	0x00,
-	0x84,
-	0x60,
-	0x53,
-	0x91,
-	0x00,
-	0x58,
-	0x61,
-	0x53,
-	0x92,
-	0x00,
-	0xf0,
-	0x60,
-	0x53,
-	0x93,
-	0x00,
-	0xf4,
-	0x60,
-	0x53,
-	0x94,
-	0x00,
-	0xf8,
-	0x60,
-	0x53,
-	0x95,
-	0x00,
-	0x5c,
-	0x61,
-	0x53,
-	0x96,
-	0x00,
-	0xac,
-	0x60,
-	0x53,
-	0x97,
-	0x00,
-	0x7c,
-	0x60,
-	0x53,
-	0x98,
-	0x00,
-	0x78,
-	0x60,
-	0x53,
-	0x99,
-	0x00,
-	0x10,
-	0x61,
-	0x53,
-	0x9a,
-	0x00,
-	0xfc,
-	0x60,
-	0x53,
-	0x9b,
-	0x00,
-	0x00,
-	0x61,
-	0x53,
-	0x9c,
-	0x00,
-	0x04,
-	0x61,
-	0x53,
-	0x9d,
-	0x00,
-	0x08,
-	0x61,
-	0x53,
-	0x9e,
-	0x00,
-	0x1c,
-	0x61,
-	0x53,
-	0x9f,
-	0x00,
-	0x4c,
-	0x61,
-	0x53,
-	0xa0,
-	0x00,
-	0x18,
-	0x61,
-	0x53,
-	0xa1,
-	0x00,
-	0x48,
-	0x61,
-	0x53,
-	0xa2,
-	0x00,
-	0x14,
-	0x61,
-	0x53,
-	0xa3,
-	0x00,
-	0x6c,
-	0x61,
-	0x53,
-	0xa4,
-	0x00,
-	0x5c,
-	0x60,
-	0x53,
-	0xa5,
-	0x00,
-	0xbc,
-	0x60,
-	0x53,
-	0xa6,
-	0x00,
-	0xc0,
-	0x60,
-	0x53,
-	0xa7,
-	0x00,
-	0xc4,
-	0x60,
-	0x53,
-	0xa8,
-	0x00,
-	0xc8,
-	0x60,
-	0x53,
-	0xa9,
-	0x00,
-	0xcc,
-	0x60,
-	0x53,
-	0xaa,
-	0x00,
-	0xd0,
-	0x60,
-	0x53,
-	0xab,
-	0x00,
-	0xd4,
-	0x60,
-	0x53,
-	0xac,
-	0x00,
-	0xd8,
-	0x60,
-	0x53,
-	0xad,
-	0x00,
-	0x50,
-	0x61,
-	0x53,
-	0xae,
-	0x00,
-	0x60,
-	0x60,
-	0x53,
-	0xaf,
-	0x00,
-	0x64,
-	0x60,
-	0x53,
-	0xb0,
-	0x00,
-	0x68,
-	0x60,
-	0x53,
-	0xb1,
-	0x00,
-	0x60,
-	0x61,
-	0x53,
-	0xb2,
-	0x00,
-	0x6c,
-	0x60,
-	0x53,
-	0xb3,
-	0x00,
-	0x70,
-	0x60,
-	0x53,
-	0xb4,
-	0x00,
-	0xa8,
-	0x60,
-	0x53,
-	0xb5,
-	0x00,
-	0xa4,
-	0x60,
-	0x53,
-	0xb6,
-	0x00,
-	0xa0,
-	0x60,
-	0x53,
-	0xb7,
-	0x00,
-	0x9c,
-	0x60,
-	0x53,
-	0xb8,
-	0x00,
-	0x98,
-	0x60,
-	0x53,
-	0xb9,
-	0x00,
-	0x94,
-	0x60,
-	0x53,
-	0xba,
-	0x00,
-	0x8c,
-	0x60,
-	0x53,
-	0xbb,
-	0x00,
-	0x90,
-	0x60,
-	0x53,
-	0xbe,
-	0x00,
-	0xb8,
-	0x60,
-	0x53,
-	0xbf,
-	0x00,
-	0xb4,
-	0x60,
-	0x53,
-	0xc0,
-	0x00,
-	0xb0,
-	0x60,
-	0x53,
-	0xc1,
-	0x00,
-	0x54,
-	0x61,
-	0x53,
-	0xc2,
-	0x00,
-	0x70,
-	0x61,
-	0x9c,
-	0x20,
-	0x60,
-	0x9c,
-	0x24,
-	0x60,
-	0x60,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa2,
-	0xb8,
-	0xa9,
-	0x01,
-	0x80,
-	0x04,
-	0xa2,
-	0x38,
-	0xa9,
-	0x00,
-	0x8e,
-	0x0c,
-	0x60,
-	0x8d,
-	0x0d,
-	0x60,
-	0x85,
-	0xd4,
-	0x86,
-	0xd3,
-	0xa4,
-	0x8d,
-	0xb9,
-	0xe7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x47,
-	0x27,
-	0x49,
-	0x04,
-	0x18,
-	0x69,
-	0x5f,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0xa5,
-	0x73,
-	0x85,
-	0xcb,
-	0xa0,
-	0x00,
-	0x5a,
-	0xb9,
-	0xd7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x37,
-	0x27,
-	0x4a,
-	0xa8,
-	0xb1,
-	0xcf,
-	0xb0,
-	0x04,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x0f,
-	0x18,
-	0x49,
-	0x15,
-	0x69,
-	0x18,
-	0x85,
-	0xd1,
-	0xa9,
-	0x29,
-	0x69,
-	0x00,
-	0x85,
-	0xd2,
-	0xa0,
-	0x15,
-	0xc3,
-	0xd1,
-	0x54,
-	0x60,
-	0x18,
-	0xa5,
-	0xd3,
-	0x69,
-	0x18,
-	0x85,
-	0xd3,
-	0x90,
-	0x02,
-	0xe6,
-	0xd4,
-	0xa0,
-	0x02,
-	0x53,
-	0xd3,
-	0x00,
-	0x0c,
-	0x60,
-	0x7a,
-	0xc6,
-	0xcb,
-	0xf0,
-	0x03,
-	0xc8,
-	0x80,
-	0xbf,
-	0xe6,
-	0x8d,
-	0x60,
-	0xa5,
-	0x7a,
-	0xf0,
-	0x06,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x00,
-	0xd0,
-	0x12,
-	0xa0,
-	0x02,
-	0x53,
-	0xa2,
-	0x3c,
-	0xb6,
-	0x02,
-	0x53,
-	0xa4,
-	0x3c,
-	0xb8,
-	0x02,
-	0x9c,
-	0xa9,
-	0x02,
-	0x4c,
-	0x55,
-	0x1d,
-	0xa9,
-	0x03,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x42,
-	0x00,
-	0xcf,
-	0x00,
-	0xa5,
-	0x3f,
-	0xc5,
-	0xd0,
-	0x90,
-	0x13,
-	0xd0,
-	0x06,
-	0xa5,
-	0x3e,
-	0xc5,
-	0xcf,
-	0x90,
-	0x0b,
-	0xa9,
-	0x01,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x3e,
-	0x00,
-	0xcf,
-	0x00,
-	0xa5,
-	0x3d,
-	0xc5,
-	0xd0,
-	0x90,
-	0x13,
-	0xd0,
-	0x06,
-	0xa5,
-	0x3c,
-	0xc5,
-	0xcf,
-	0x90,
-	0x0b,
-	0xa9,
-	0x00,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x3c,
-	0x00,
-	0xcf,
-	0x00,
-	0xa5,
-	0x41,
-	0xc5,
-	0xd0,
-	0x90,
-	0x13,
-	0xd0,
-	0x06,
-	0xa5,
-	0x40,
-	0xc5,
-	0xcf,
-	0x90,
-	0x0b,
-	0xa9,
-	0x02,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x40,
-	0x00,
-	0xcf,
-	0x00,
-	0xa6,
-	0x7b,
-	0xe0,
-	0x02,
-	0xf0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0x16,
-	0x85,
-	0xcb,
-	0xa2,
-	0x00,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0x69,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0x68,
-	0x3c,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x08,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0x8a,
-	0x4a,
-	0x49,
-	0x04,
-	0x18,
-	0x65,
-	0xcb,
-	0x48,
-	0xa5,
-	0x37,
-	0x85,
-	0xcb,
-	0xd0,
-	0x08,
-	0x64,
-	0xd3,
-	0x64,
-	0xd4,
-	0x64,
-	0xd5,
-	0x80,
-	0x48,
-	0x4a,
-	0x85,
-	0xda,
-	0xa5,
-	0x38,
-	0x85,
-	0xd0,
-	0xa5,
-	0xda,
-	0x85,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd3,
-	0xa5,
-	0x39,
-	0x85,
-	0xd0,
-	0xa5,
-	0xda,
-	0x85,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd4,
-	0xa5,
-	0x3b,
-	0x85,
-	0xd0,
-	0xa5,
-	0xda,
-	0x85,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd5,
-	0xa5,
-	0x7c,
-	0xf0,
-	0x03,
-	0x4c,
-	0x41,
-	0x1c,
-	0xad,
-	0xaa,
-	0x02,
-	0xc5,
-	0xd3,
-	0x90,
-	0x16,
-	0x38,
-	0xe5,
-	0xd3,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0xd3,
-	0x80,
-	0x21,
-	0xa5,
-	0xd3,
-	0x38,
-	0xed,
-	0xaa,
-	0x02,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xdf,
-	0x98,
-	0xe9,
-	0x00,
-	0x85,
-	0xe0,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xdf,
-	0xa5,
-	0xd3,
-	0xe5,
-	0xe0,
-	0x85,
-	0xd3,
-	0xad,
-	0xab,
-	0x02,
-	0xc5,
-	0xd4,
-	0x90,
-	0x16,
-	0x38,
-	0xe5,
-	0xd4,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0xd4,
-	0x80,
-	0x21,
-	0xa5,
-	0xd4,
-	0x38,
-	0xed,
-	0xab,
-	0x02,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xdf,
-	0x98,
-	0xe9,
-	0x00,
-	0x85,
-	0xe0,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xdf,
-	0xa5,
-	0xd4,
-	0xe5,
-	0xe0,
-	0x85,
-	0xd4,
-	0xad,
-	0xac,
-	0x02,
-	0xc5,
-	0xd5,
-	0x90,
-	0x16,
-	0x38,
-	0xe5,
-	0xd5,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0xd5,
-	0x80,
-	0x21,
-	0xa5,
-	0xd5,
-	0x38,
-	0xed,
-	0xac,
-	0x02,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xdf,
-	0x98,
-	0xe9,
-	0x00,
-	0x85,
-	0xe0,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xdf,
-	0xa5,
-	0xd5,
-	0xe5,
-	0xe0,
-	0x85,
-	0xd5,
-	0xa0,
-	0x03,
-	0x53,
-	0xd3,
-	0x00,
-	0xaa,
-	0x02,
-	0x18,
-	0xa5,
-	0xd4,
-	0x65,
-	0xd3,
-	0xb0,
-	0x02,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd6,
-	0xfa,
-	0xa5,
-	0xd3,
-	0xdd,
-	0x71,
-	0x3c,
-	0x90,
-	0x16,
-	0xa9,
-	0x00,
-	0x85,
-	0xd8,
-	0xa5,
-	0xd3,
-	0xdd,
-	0x70,
-	0x3c,
-	0x90,
-	0x02,
-	0x80,
-	0x2a,
-	0xa5,
-	0xd6,
-	0xdd,
-	0x70,
-	0x3c,
-	0x90,
-	0x2f,
-	0x80,
-	0x27,
-	0xa5,
-	0xd6,
-	0xdd,
-	0x6f,
-	0x3c,
-	0x90,
-	0x2c,
-	0xa9,
-	0x01,
-	0x85,
-	0xd8,
-	0xa5,
-	0xd6,
-	0xdd,
-	0x70,
-	0x3c,
-	0x90,
-	0x02,
-	0x80,
-	0x13,
-	0xa5,
-	0xd5,
-	0xdd,
-	0x6e,
-	0x3c,
-	0x90,
-	0x12,
-	0xa9,
-	0x03,
-	0x85,
-	0xd9,
-	0x80,
-	0x27,
-	0xa9,
-	0x00,
-	0x85,
-	0xd9,
-	0x80,
-	0x21,
-	0xa9,
-	0x01,
-	0x85,
-	0xd9,
-	0x80,
-	0x1b,
-	0xa9,
-	0x02,
-	0x85,
-	0xd9,
-	0x80,
-	0x15,
-	0xa5,
-	0xd5,
-	0xdd,
-	0x6e,
-	0x3c,
-	0x90,
-	0x08,
-	0xa9,
-	0x03,
-	0x85,
-	0xd8,
-	0x85,
-	0xd9,
-	0x80,
-	0x06,
-	0xa9,
-	0x02,
-	0x85,
-	0xd8,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd7,
-	0xc5,
-	0xd8,
-	0xf0,
-	0x02,
-	0xb0,
-	0x0c,
-	0xa5,
-	0xd8,
-	0xf0,
-	0x1a,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd7,
-	0x85,
-	0xd8,
-	0x80,
-	0x12,
-	0xa5,
-	0xd8,
-	0xc9,
-	0x02,
-	0xd0,
-	0x08,
-	0xa5,
-	0xd7,
-	0x85,
-	0xd9,
-	0x85,
-	0xd8,
-	0x80,
-	0x04,
-	0xa5,
-	0xd7,
-	0x85,
-	0xd9,
-	0xa5,
-	0x7c,
-	0xd0,
-	0x05,
-	0xad,
-	0xa9,
-	0x02,
-	0xd0,
-	0x14,
-	0xa9,
-	0x01,
-	0x8d,
-	0xae,
-	0x02,
-	0x8d,
-	0xaf,
-	0x02,
-	0xa5,
-	0xd8,
-	0x8d,
-	0xb4,
-	0x02,
-	0xa5,
-	0xd9,
-	0x8d,
-	0xb5,
-	0x02,
-	0x80,
-	0x3c,
-	0xa5,
-	0xd8,
-	0xcd,
-	0xb4,
-	0x02,
-	0xd0,
-	0x0d,
-	0xad,
-	0xae,
-	0x02,
-	0xcd,
-	0x9e,
-	0x3c,
-	0xb0,
-	0x0f,
-	0xee,
-	0xae,
-	0x02,
-	0x80,
-	0x06,
-	0x8d,
-	0xb4,
-	0x02,
-	0x9c,
-	0xae,
-	0x02,
-	0xa5,
-	0x82,
-	0x85,
-	0xd8,
-	0xa5,
-	0xd9,
-	0xcd,
-	0xb5,
-	0x02,
-	0xd0,
-	0x0d,
-	0xad,
-	0xaf,
-	0x02,
-	0xcd,
-	0x9e,
-	0x3c,
-	0xb0,
-	0x0f,
-	0xee,
-	0xaf,
-	0x02,
-	0x80,
-	0x06,
-	0x8d,
-	0xb5,
-	0x02,
-	0x9c,
-	0xaf,
-	0x02,
-	0xa5,
-	0x83,
-	0x85,
-	0xd9,
-	0xa9,
-	0x01,
-	0x8d,
-	0xa9,
-	0x02,
-	0xa5,
-	0xd8,
-	0x20,
-	0xae,
-	0x0c,
-	0x8d,
-	0xb6,
-	0x02,
-	0x8e,
-	0xb7,
-	0x02,
-	0xa5,
-	0xd9,
-	0x20,
-	0xae,
-	0x0c,
-	0x8d,
-	0xb8,
-	0x02,
-	0x8e,
-	0xb9,
-	0x02,
-	0xa2,
-	0x00,
-	0xa0,
-	0x00,
-	0xc4,
-	0xc4,
-	0xb0,
-	0x1e,
-	0xa5,
-	0xc5,
-	0x29,
-	0x10,
-	0xf0,
-	0x03,
-	0x38,
-	0x80,
-	0x01,
-	0x18,
-	0x3e,
-	0x08,
-	0x2c,
-	0x3e,
-	0x09,
-	0x2c,
-	0x3e,
-	0x0a,
-	0x2c,
-	0x3e,
-	0x0b,
-	0x2c,
-	0xc8,
-	0x18,
-	0x8a,
-	0x69,
-	0x10,
-	0xaa,
-	0x80,
-	0xde,
-	0xa0,
-	0x50,
-	0x53,
-	0xfc,
-	0x2b,
-	0x52,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0x60,
-	0x60,
-	0xa5,
-	0x4c,
-	0x45,
-	0xd0,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0x4d,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd5,
-	0xa5,
-	0x4e,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd6,
-	0xa5,
-	0x4f,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xd6,
-	0x85,
-	0xd6,
-	0x60,
-	0xa0,
-	0x04,
-	0x13,
-	0x54,
-	0x60,
-	0x4c,
-	0x00,
-	0xa0,
-	0x04,
-	0x13,
-	0x54,
-	0x60,
-	0x44,
-	0x00,
-	0xa0,
-	0x04,
-	0x13,
-	0x54,
-	0x60,
-	0x48,
-	0x00,
-	0xa0,
-	0x02,
-	0x13,
-	0x54,
-	0x60,
-	0x54,
-	0x00,
-	0x38,
-	0xa5,
-	0x44,
-	0xe5,
-	0x48,
-	0x85,
-	0x50,
-	0xa5,
-	0x45,
-	0xe5,
-	0x49,
-	0x85,
-	0x51,
-	0xa5,
-	0x46,
-	0xe5,
-	0x4a,
-	0x85,
-	0x52,
-	0xa5,
-	0x47,
-	0xe5,
-	0x4b,
-	0x85,
-	0x53,
-	0x18,
-	0xa5,
-	0xd1,
-	0x69,
-	0x10,
-	0x85,
-	0xd1,
-	0x90,
-	0x02,
-	0xe6,
-	0xd2,
-	0xa0,
-	0x02,
-	0x53,
-	0xd1,
-	0x00,
-	0x0c,
-	0x60,
-	0xad,
-	0x9d,
-	0x3c,
-	0xc5,
-	0x55,
-	0x90,
-	0x0c,
-	0xd0,
-	0x07,
-	0xad,
-	0x9c,
-	0x3c,
-	0xc5,
-	0x54,
-	0x90,
-	0x03,
-	0x4c,
-	0x9d,
-	0x1f,
-	0xa5,
-	0x4f,
-	0xd0,
-	0x2b,
-	0xa5,
-	0x54,
-	0x45,
-	0xc3,
-	0x85,
-	0xdb,
-	0x84,
-	0xdc,
-	0xa5,
-	0x55,
-	0x45,
-	0xc3,
-	0x18,
-	0x65,
-	0xdc,
-	0x85,
-	0xdc,
-	0x98,
-	0x69,
-	0x00,
-	0xc5,
-	0x4e,
-	0x90,
-	0x13,
-	0xd0,
-	0x0e,
-	0xa5,
-	0xdc,
-	0xc5,
-	0x4d,
-	0x90,
-	0x0b,
-	0xd0,
-	0x06,
-	0xa5,
-	0xdb,
-	0xc5,
-	0x4c,
-	0x90,
-	0x03,
-	0x4c,
-	0x9d,
-	0x1f,
-	0xe6,
-	0x37,
-	0xa5,
-	0x87,
-	0x29,
-	0x01,
-	0xf0,
-	0x07,
-	0x18,
-	0xa5,
-	0x73,
-	0xe5,
-	0xcb,
-	0x80,
-	0x02,
-	0xa5,
-	0xcb,
-	0x45,
-	0x7d,
-	0xa8,
-	0xb9,
-	0x37,
-	0x27,
-	0x4a,
-	0xa8,
-	0xb1,
-	0xd9,
-	0xb0,
-	0x04,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x0f,
-	0xa8,
-	0xad,
-	0xdd,
-	0x2b,
-	0xc9,
-	0x08,
-	0xf0,
-	0x17,
-	0xc9,
-	0x02,
-	0xf0,
-	0x09,
-	0xc9,
-	0x04,
-	0xf0,
-	0x0a,
-	0xb9,
-	0x50,
-	0x3c,
-	0x80,
-	0x0d,
-	0xb9,
-	0x4d,
-	0x3c,
-	0x80,
-	0x08,
-	0xb9,
-	0x4a,
-	0x3c,
-	0x80,
-	0x03,
-	0xb9,
-	0x47,
-	0x3c,
-	0x85,
-	0xce,
-	0xa5,
-	0x53,
-	0x29,
-	0x80,
-	0x85,
-	0xcd,
-	0xf0,
-	0x17,
-	0x38,
-	0xa9,
-	0x00,
-	0xaa,
-	0xe5,
-	0x50,
-	0x85,
-	0x50,
-	0x8a,
-	0xe5,
-	0x51,
-	0x85,
-	0x51,
-	0x8a,
-	0xe5,
-	0x52,
-	0x85,
-	0x52,
-	0x8a,
-	0xe5,
-	0x53,
-	0x85,
-	0x53,
-	0xa4,
-	0xcb,
-	0xb9,
-	0xd7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x37,
-	0x27,
-	0x4a,
-	0xa8,
-	0xb1,
-	0xd7,
-	0xb0,
-	0x04,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x0f,
-	0xa8,
-	0xb9,
-	0x1d,
-	0x2b,
-	0x85,
-	0xd0,
-	0xa5,
-	0x50,
-	0x45,
-	0xd0,
-	0x85,
-	0x50,
-	0x84,
-	0xdf,
-	0xa5,
-	0x51,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xdf,
-	0x85,
-	0x51,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xdf,
-	0xa5,
-	0x52,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xdf,
-	0x85,
-	0x52,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xdf,
-	0xa5,
-	0x53,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xdf,
-	0x85,
-	0x53,
-	0xa5,
-	0xcd,
-	0xf0,
-	0x6a,
-	0xad,
-	0x65,
-	0x3c,
-	0x85,
-	0xd0,
-	0x20,
-	0x88,
-	0x1d,
-	0xa5,
-	0x53,
-	0xc5,
-	0xd6,
-	0x90,
-	0x27,
-	0xd0,
-	0x16,
-	0xa5,
-	0x52,
-	0xc5,
-	0xd5,
-	0x90,
-	0x1f,
-	0xd0,
-	0x0e,
-	0xa5,
-	0x51,
-	0xc5,
-	0xd4,
-	0x90,
-	0x17,
-	0xd0,
-	0x06,
-	0xa5,
-	0x50,
-	0xc5,
-	0xd3,
-	0x90,
-	0x0f,
-	0xe6,
-	0x38,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x3c,
-	0x85,
-	0x3c,
-	0x90,
-	0x7b,
-	0xe6,
-	0x3d,
-	0x80,
-	0x77,
-	0xad,
-	0x66,
-	0x3c,
-	0x85,
-	0xd0,
-	0x20,
-	0x88,
-	0x1d,
-	0xa5,
-	0x53,
-	0xc5,
-	0xd6,
-	0x90,
-	0x4d,
-	0xd0,
-	0x16,
-	0xa5,
-	0x52,
-	0xc5,
-	0xd5,
-	0x90,
-	0x45,
-	0xd0,
-	0x0e,
-	0xa5,
-	0x51,
-	0xc5,
-	0xd4,
-	0x90,
-	0x3d,
-	0xd0,
-	0x06,
-	0xa5,
-	0x50,
-	0xc5,
-	0xd3,
-	0x90,
-	0x35,
-	0xe6,
-	0x39,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x90,
-	0x46,
-	0xe6,
-	0x3f,
-	0x80,
-	0x42,
-	0xad,
-	0x67,
-	0x3c,
-	0x85,
-	0xd0,
-	0x20,
-	0x88,
-	0x1d,
-	0xa5,
-	0xd6,
-	0xc5,
-	0x53,
-	0x90,
-	0x27,
-	0xd0,
-	0x16,
-	0xa5,
-	0xd5,
-	0xc5,
-	0x52,
-	0x90,
-	0x1f,
-	0xd0,
-	0x0e,
-	0xa5,
-	0xd4,
-	0xc5,
-	0x51,
-	0x90,
-	0x17,
-	0xd0,
-	0x06,
-	0xa5,
-	0xd3,
-	0xc5,
-	0x50,
-	0x90,
-	0x0f,
-	0xe6,
-	0x3a,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0x90,
-	0x11,
-	0xe6,
-	0x41,
-	0x80,
-	0x0d,
-	0xe6,
-	0x3b,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x42,
-	0x85,
-	0x42,
-	0x90,
-	0x02,
-	0xe6,
-	0x43,
-	0xa5,
-	0xc4,
-	0xd0,
-	0x01,
-	0x60,
-	0xa6,
-	0xcb,
-	0xbd,
-	0xf3,
-	0x2a,
-	0x25,
-	0x21,
-	0xd0,
-	0x01,
-	0x60,
-	0x85,
-	0xdd,
-	0xa2,
-	0x00,
-	0xa0,
-	0x00,
-	0xa9,
-	0x01,
-	0x85,
-	0xde,
-	0x25,
-	0xdd,
-	0xd0,
-	0x03,
-	0x4c,
-	0x36,
-	0x20,
-	0x18,
-	0xa5,
-	0x4c,
-	0x7d,
-	0xfc,
-	0x2b,
-	0x9d,
-	0xfc,
-	0x2b,
-	0xa5,
-	0x4d,
-	0x7d,
-	0xfd,
-	0x2b,
-	0x9d,
-	0xfd,
-	0x2b,
-	0xa5,
-	0x4e,
-	0x7d,
-	0xfe,
-	0x2b,
-	0x9d,
-	0xfe,
-	0x2b,
-	0xa5,
-	0x4f,
-	0x7d,
-	0xff,
-	0x2b,
-	0x9d,
-	0xff,
-	0x2b,
-	0x18,
-	0xa5,
-	0x44,
-	0x7d,
-	0x00,
-	0x2c,
-	0x9d,
-	0x00,
-	0x2c,
-	0xa5,
-	0x45,
-	0x7d,
-	0x01,
-	0x2c,
-	0x9d,
-	0x01,
-	0x2c,
-	0xa5,
-	0x46,
-	0x7d,
-	0x02,
-	0x2c,
-	0x9d,
-	0x02,
-	0x2c,
-	0xa5,
-	0x47,
-	0x7d,
-	0x03,
-	0x2c,
-	0x9d,
-	0x03,
-	0x2c,
-	0x18,
-	0xa5,
-	0x48,
-	0x7d,
-	0x04,
-	0x2c,
-	0x9d,
-	0x04,
-	0x2c,
-	0xa5,
-	0x49,
-	0x7d,
-	0x05,
-	0x2c,
-	0x9d,
-	0x05,
-	0x2c,
-	0xa5,
-	0x4a,
-	0x7d,
-	0x06,
-	0x2c,
-	0x9d,
-	0x06,
-	0x2c,
-	0xa5,
-	0x4b,
-	0x7d,
-	0x07,
-	0x2c,
-	0x9d,
-	0x07,
-	0x2c,
-	0x18,
-	0xa5,
-	0x54,
-	0x7d,
-	0x08,
-	0x2c,
-	0x9d,
-	0x08,
-	0x2c,
-	0xa5,
-	0x55,
-	0x7d,
-	0x09,
-	0x2c,
-	0x9d,
-	0x09,
-	0x2c,
-	0x90,
-	0x03,
-	0xfe,
-	0x0a,
-	0x2c,
-	0xc8,
-	0xc4,
-	0xc4,
-	0xb0,
-	0x0b,
-	0x18,
-	0x8a,
-	0x69,
-	0x10,
-	0xaa,
-	0xa5,
-	0xde,
-	0x0a,
-	0x4c,
-	0xb4,
-	0x1f,
-	0x60,
-	0xaa,
-	0xa5,
-	0x7a,
-	0xd0,
-	0x02,
-	0x80,
-	0x6d,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x00,
-	0xf0,
-	0x67,
-	0x8a,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa2,
-	0x38,
-	0xa9,
-	0x04,
-	0x80,
-	0x04,
-	0xa2,
-	0x38,
-	0xa9,
-	0x03,
-	0x8e,
-	0x0c,
-	0x60,
-	0x8d,
-	0x0d,
-	0x60,
-	0x85,
-	0xd2,
-	0x86,
-	0xd1,
-	0xa4,
-	0xbd,
-	0xb9,
-	0x03,
-	0x2b,
-	0x85,
-	0x21,
-	0xb9,
-	0xe7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x47,
-	0x27,
-	0x49,
-	0x04,
-	0x18,
-	0x69,
-	0x10,
-	0x85,
-	0xd7,
-	0xa9,
-	0x00,
-	0x69,
-	0x3c,
-	0x85,
-	0xd8,
-	0xa5,
-	0x87,
-	0x29,
-	0x02,
-	0xf0,
-	0x07,
-	0x18,
-	0xa5,
-	0x74,
-	0xe5,
-	0xbd,
-	0x80,
-	0x02,
-	0xa5,
-	0xbd,
-	0x45,
-	0x7e,
-	0xa8,
-	0xb9,
-	0x47,
-	0x27,
-	0x49,
-	0x04,
-	0x18,
-	0x69,
-	0x2f,
-	0x85,
-	0xd9,
-	0xa9,
-	0x00,
-	0x69,
-	0x3c,
-	0x85,
-	0xda,
-	0x64,
-	0xcb,
-	0xa6,
-	0x73,
-	0x86,
-	0xcc,
-	0x80,
-	0x02,
-	0xe6,
-	0xcb,
-	0x20,
-	0xb6,
-	0x1d,
-	0xc6,
-	0xcc,
-	0xd0,
-	0xf7,
-	0xe6,
-	0xbd,
-	0x60,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0xa2,
-	0x10,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0xa5,
-	0xd1,
-	0x38,
-	0xe5,
-	0xcb,
-	0xa8,
-	0xa5,
-	0xd2,
-	0xe9,
-	0x00,
-	0x90,
-	0x06,
-	0x85,
-	0xd2,
-	0x84,
-	0xd1,
-	0xe6,
-	0xcf,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0x18,
-	0xa5,
-	0xcf,
-	0x65,
-	0xd3,
-	0x85,
-	0xd3,
-	0xa2,
-	0x00,
-	0xa5,
-	0xd0,
-	0x10,
-	0x02,
-	0xa2,
-	0xff,
-	0x86,
-	0xcb,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0xa5,
-	0xd5,
-	0x65,
-	0xcb,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd6,
-	0x65,
-	0xcb,
-	0x85,
-	0xd6,
-	0x60,
-	0xa5,
-	0xcf,
-	0x45,
-	0xd1,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0xcf,
-	0x45,
-	0xd2,
-	0x18,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd5,
-	0x64,
-	0xd6,
-	0xa5,
-	0xd0,
-	0x45,
-	0xd1,
-	0x18,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0x90,
-	0x02,
-	0xe6,
-	0xd6,
-	0xa5,
-	0xd0,
-	0x45,
-	0xd2,
-	0x18,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0x98,
-	0x65,
-	0xd6,
-	0x85,
-	0xd6,
-	0x60,
-	0x20,
-	0x04,
-	0x21,
-	0xa5,
-	0xd2,
-	0x10,
-	0x0d,
-	0x38,
-	0xa5,
-	0xd5,
-	0xe5,
-	0xcf,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd6,
-	0xe5,
-	0xd0,
-	0x85,
-	0xd6,
-	0x60,
-	0xfc,
-	0x49,
-	0x20,
-	0x98,
-	0x4a,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x10,
-	0xc0,
-	0x00,
-	0xd0,
-	0x09,
-	0x18,
-	0x65,
-	0xcb,
-	0xb0,
-	0x04,
-	0xc9,
-	0x7f,
-	0x90,
-	0x02,
-	0xa9,
-	0x7f,
-	0x60,
-	0xfc,
-	0x49,
-	0x10,
-	0x98,
-	0x4a,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x08,
-	0x18,
-	0x65,
-	0xcb,
-	0xd0,
-	0x01,
-	0x3a,
-	0x60,
-	0x20,
-	0xa6,
-	0x21,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x90,
-	0x06,
-	0xe6,
-	0xcf,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd0,
-	0x38,
-	0xa5,
-	0xd1,
-	0xe5,
-	0xcf,
-	0xa5,
-	0xd2,
-	0xe5,
-	0xd0,
-	0x30,
-	0x0a,
-	0xe6,
-	0xd3,
-	0xd0,
-	0x06,
-	0xe6,
-	0xd4,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd5,
-	0x60,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0x64,
-	0xcb,
-	0xa2,
-	0x18,
-	0x06,
-	0xd3,
-	0x26,
-	0xd4,
-	0x26,
-	0xd5,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x26,
-	0xcb,
-	0xa5,
-	0xd1,
-	0x38,
-	0xe5,
-	0xcf,
-	0xa8,
-	0xa5,
-	0xd2,
-	0xe5,
-	0xd0,
-	0x85,
-	0xcc,
-	0xa5,
-	0xcb,
-	0xe9,
-	0x00,
-	0x90,
-	0x0a,
-	0x85,
-	0xcb,
-	0xa5,
-	0xcc,
-	0x85,
-	0xd2,
-	0x84,
-	0xd1,
-	0xe6,
-	0xd3,
-	0xca,
-	0xd0,
-	0xd5,
-	0x60,
-	0xa9,
-	0x00,
-	0xaa,
-	0x38,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x8a,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x8a,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0x8a,
-	0xe5,
-	0xd6,
-	0x85,
-	0xd6,
-	0x8a,
-	0x38,
-	0xe5,
-	0xd7,
-	0x85,
-	0xd7,
-	0x8a,
-	0xe5,
-	0xd8,
-	0x85,
-	0xd8,
-	0x8a,
-	0xe5,
-	0xd9,
-	0x85,
-	0xd9,
-	0x8a,
-	0xe5,
-	0xda,
-	0x85,
-	0xda,
-	0x60,
-	0xa5,
-	0xd6,
-	0x05,
-	0xda,
-	0xf0,
-	0x2b,
-	0x38,
-	0xa5,
-	0xd6,
-	0xe5,
-	0xda,
-	0x30,
-	0x04,
-	0xa5,
-	0xd6,
-	0x80,
-	0x11,
-	0xa5,
-	0xda,
-	0x80,
-	0x0d,
-	0x26,
-	0xd4,
-	0x26,
-	0xd5,
-	0x26,
-	0xd6,
-	0x26,
-	0xd8,
-	0x26,
-	0xd9,
-	0x26,
-	0xda,
-	0x0a,
-	0x10,
-	0xf1,
-	0xa0,
-	0x02,
-	0x53,
-	0xd5,
-	0x00,
-	0xcf,
-	0x00,
-	0x53,
-	0xd9,
-	0x00,
-	0xd1,
-	0x00,
-	0x60,
-	0xa5,
-	0xd5,
-	0x05,
-	0xd9,
-	0xf0,
-	0x2b,
-	0x38,
-	0xa5,
-	0xd5,
-	0xe5,
-	0xd9,
-	0x30,
-	0x04,
-	0xa5,
-	0xd5,
-	0x80,
-	0x11,
-	0xa5,
-	0xd9,
-	0x80,
-	0x0d,
-	0x26,
-	0xd3,
-	0x26,
-	0xd4,
-	0x26,
-	0xd5,
-	0x26,
-	0xd7,
-	0x26,
-	0xd8,
-	0x26,
-	0xd9,
-	0x0a,
-	0x10,
-	0xf1,
-	0xa0,
-	0x02,
-	0x53,
-	0xd4,
-	0x00,
-	0xcf,
-	0x00,
-	0x53,
-	0xd8,
-	0x00,
-	0xd1,
-	0x00,
-	0x60,
-	0xa5,
-	0xd4,
-	0x30,
-	0x0e,
-	0xa5,
-	0xd8,
-	0x30,
-	0x0a,
-	0x06,
-	0xd3,
-	0x26,
-	0xd4,
-	0x06,
-	0xd7,
-	0x26,
-	0xd8,
-	0x80,
-	0xee,
-	0xa0,
-	0x02,
-	0x53,
-	0xd3,
-	0x00,
-	0xcf,
-	0x00,
-	0x53,
-	0xd7,
-	0x00,
-	0xd1,
-	0x00,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xf8,
-	0xad,
-	0x08,
-	0x68,
-	0xc9,
-	0x01,
-	0xd0,
-	0x3d,
-	0xa5,
-	0x12,
-	0xf0,
-	0x17,
-	0x64,
-	0x12,
-	0xa5,
-	0x11,
-	0x09,
-	0x03,
-	0x85,
-	0x11,
-	0xa0,
-	0x48,
-	0x53,
-	0x0b,
-	0x02,
-	0x24,
-	0x2b,
-	0xad,
-	0xa4,
-	0x02,
-	0x8d,
-	0x6b,
-	0x2b,
-	0x80,
-	0x15,
-	0xe6,
-	0x12,
-	0xa5,
-	0x11,
-	0x09,
-	0x30,
-	0x85,
-	0x11,
-	0xa0,
-	0x48,
-	0x53,
-	0x0b,
-	0x02,
-	0x6c,
-	0x2b,
-	0xad,
-	0xa4,
-	0x02,
-	0x8d,
-	0xb3,
-	0x2b,
-	0x9c,
-	0x18,
-	0x68,
-	0xee,
-	0x18,
-	0x68,
-	0xa5,
-	0x10,
-	0xd0,
-	0x03,
-	0x20,
-	0xca,
-	0x26,
-	0x4c,
-	0x9f,
-	0x26,
-	0xa9,
-	0x01,
-	0x8d,
-	0x18,
-	0x68,
-	0x68,
-	0x68,
-	0x68,
-	0xa9,
-	0x03,
-	0x48,
-	0xa9,
-	0x00,
-	0x48,
-	0xba,
-	0xda,
-	0x40,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xf8,
-	0xad,
-	0x34,
-	0x60,
-	0xaa,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x0f,
-	0xda,
-	0x64,
-	0x10,
-	0x20,
-	0xca,
-	0x26,
-	0xfa,
-	0xa5,
-	0x7f,
-	0x29,
-	0x02,
-	0xf0,
-	0x07,
-	0x80,
-	0x26,
-	0x8a,
-	0x29,
-	0xf8,
-	0xf0,
-	0x2b,
-	0x8a,
-	0x29,
-	0x04,
-	0x48,
-	0x4a,
-	0x4a,
-	0x20,
-	0x47,
-	0x20,
-	0xa5,
-	0xbc,
-	0xf0,
-	0x13,
-	0xc6,
-	0xbc,
-	0x68,
-	0xd0,
-	0x07,
-	0xa9,
-	0x09,
-	0x8d,
-	0x38,
-	0x60,
-	0x80,
-	0x31,
-	0xa9,
-	0x0d,
-	0x8d,
-	0x38,
-	0x60,
-	0x80,
-	0x2a,
-	0x68,
-	0x20,
-	0x7d,
-	0x1a,
-	0xa9,
-	0x01,
-	0x8d,
-	0x24,
-	0x68,
-	0x80,
-	0x1f,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x1b,
-	0x3a,
-	0x85,
-	0x8c,
-	0x8a,
-	0x29,
-	0x04,
-	0x48,
-	0x4a,
-	0x4a,
-	0x20,
-	0x05,
-	0x1a,
-	0x68,
-	0xd0,
-	0x07,
-	0xa9,
-	0x01,
-	0x8d,
-	0x38,
-	0x60,
-	0x80,
-	0x05,
-	0xa9,
-	0x05,
-	0x8d,
-	0x38,
-	0x60,
-	0x4c,
-	0x9f,
-	0x26,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xee,
-	0xa5,
-	0x02,
-	0xd0,
-	0x03,
-	0xee,
-	0xa6,
-	0x02,
-	0xa0,
-	0x4f,
-	0x9c,
-	0x52,
-	0x02,
-	0x13,
-	0x52,
-	0x02,
-	0x53,
-	0x02,
-	0x9c,
-	0x24,
-	0x68,
-	0xee,
-	0x24,
-	0x68,
-	0x64,
-	0x10,
-	0x20,
-	0xca,
-	0x26,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0x60,
-	0x4c,
-	0xa6,
-	0x26,
-	0x08,
-	0x78,
-	0x68,
-	0x8a,
-	0x29,
-	0xf0,
-	0xf0,
-	0x09,
-	0x8a,
-	0x29,
-	0x0f,
-	0xf0,
-	0x22,
-	0xa5,
-	0x12,
-	0xd0,
-	0x1e,
-	0x8a,
-	0x29,
-	0xf0,
-	0x85,
-	0x11,
-	0x64,
-	0x14,
-	0x8a,
-	0x29,
-	0x02,
-	0x85,
-	0x15,
-	0xa9,
-	0x28,
-	0x8d,
-	0xae,
-	0x2c,
-	0x64,
-	0x6f,
-	0x64,
-	0x70,
-	0xa0,
-	0x48,
-	0x53,
-	0x24,
-	0x2b,
-	0xb4,
-	0x2b,
-	0x80,
-	0x22,
-	0x8a,
-	0x29,
-	0x0f,
-	0x85,
-	0x11,
-	0xa9,
-	0x01,
-	0x85,
-	0x14,
-	0x8a,
-	0x29,
-	0x20,
-	0x85,
-	0x15,
-	0xa9,
-	0x28,
-	0x8d,
-	0x11,
-	0x2d,
-	0xa9,
-	0x38,
-	0x85,
-	0x6f,
-	0xa9,
-	0x03,
-	0x85,
-	0x70,
-	0xa0,
-	0x48,
-	0x53,
-	0x6c,
-	0x2b,
-	0xb4,
-	0x2b,
-	0x58,
-	0xa5,
-	0x15,
-	0xd0,
-	0x38,
-	0xa0,
-	0x70,
-	0xa5,
-	0x14,
-	0xd0,
-	0x0e,
-	0x53,
-	0xbf,
-	0x29,
-	0x9f,
-	0x2a,
-	0xa0,
-	0x63,
-	0x53,
-	0x4c,
-	0x2c,
-	0x65,
-	0x00,
-	0x80,
-	0x0c,
-	0x53,
-	0x2f,
-	0x2a,
-	0x9f,
-	0x2a,
-	0xa0,
-	0x63,
-	0x53,
-	0xaf,
-	0x2c,
-	0x65,
-	0x00,
-	0xa5,
-	0x72,
-	0xcd,
-	0xa8,
-	0x02,
-	0xd0,
-	0x0b,
-	0xa5,
-	0x71,
-	0xcd,
-	0xa7,
-	0x02,
-	0xd0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x7c,
-	0xa5,
-	0x15,
-	0x20,
-	0x1b,
-	0x04,
-	0x85,
-	0xc7,
-	0xf0,
-	0x03,
-	0x4c,
-	0xa5,
-	0x24,
-	0x64,
-	0x8d,
-	0x64,
-	0xbd,
-	0xa0,
-	0x02,
-	0x53,
-	0x6f,
-	0x00,
-	0x30,
-	0x60,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0c,
-	0x60,
-	0x9c,
-	0x0d,
-	0x60,
-	0xa5,
-	0x73,
-	0x0a,
-	0xa8,
-	0x43,
-	0x9f,
-	0x2a,
-	0x54,
-	0x60,
-	0xa9,
-	0x20,
-	0x8d,
-	0x0c,
-	0x60,
-	0x9c,
-	0x0d,
-	0x60,
-	0xa5,
-	0x74,
-	0x0a,
-	0xa8,
-	0x43,
-	0xbf,
-	0x2a,
-	0x54,
-	0x60,
-	0xa5,
-	0x74,
-	0x85,
-	0x8c,
-	0x3a,
-	0x85,
-	0xbc,
-	0xa9,
-	0x02,
-	0x48,
-	0x20,
-	0x05,
-	0x1a,
-	0x68,
-	0xc6,
-	0x8c,
-	0xf0,
-	0x03,
-	0x3a,
-	0xd0,
-	0xf4,
-	0xa5,
-	0x14,
-	0xd0,
-	0x20,
-	0xa0,
-	0x93,
-	0x53,
-	0x18,
-	0x29,
-	0xf2,
-	0x27,
-	0xa0,
-	0x07,
-	0x53,
-	0x1d,
-	0x2b,
-	0x0f,
-	0x2b,
-	0xa0,
-	0x70,
-	0x53,
-	0x9f,
-	0x2a,
-	0xbf,
-	0x29,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0x4c,
-	0x2c,
-	0xa2,
-	0x00,
-	0x80,
-	0x38,
-	0xa0,
-	0x93,
-	0x53,
-	0x18,
-	0x29,
-	0x85,
-	0x28,
-	0xa0,
-	0x07,
-	0x53,
-	0x1d,
-	0x2b,
-	0x16,
-	0x2b,
-	0xa0,
-	0x70,
-	0x53,
-	0x9f,
-	0x2a,
-	0x2f,
-	0x2a,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0xaf,
-	0x2c,
-	0xa2,
-	0x01,
-	0x80,
-	0x18,
-	0xa6,
-	0x14,
-	0xd0,
-	0x0b,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0x4c,
-	0x2c,
-	0xa2,
-	0x00,
-	0x80,
-	0x09,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0xaf,
-	0x2c,
-	0xa2,
-	0x01,
-	0xa5,
-	0x15,
-	0xf0,
-	0x04,
-	0x86,
-	0x13,
-	0x64,
-	0x15,
-	0x9c,
-	0x1c,
-	0x68,
-	0xee,
-	0x1c,
-	0x68,
-	0x60,
-	0xf8,
-	0xa6,
-	0x11,
-	0xda,
-	0xa6,
-	0x11,
-	0xf0,
-	0x05,
-	0x20,
-	0x87,
-	0x23,
-	0x80,
-	0xf7,
-	0xfa,
-	0xf0,
-	0x0f,
-	0xad,
-	0xba,
-	0x02,
-	0xf0,
-	0x0a,
-	0xa0,
-	0x02,
-	0x53,
-	0x71,
-	0x00,
-	0x09,
-	0x02,
-	0x20,
-	0x06,
-	0x25,
-	0x9c,
-	0xe9,
-	0x27,
-	0x4c,
-	0xbc,
-	0x26,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xf8,
-	0xad,
-	0x0c,
-	0x68,
-	0xc9,
-	0x01,
-	0xd0,
-	0x03,
-	0x20,
-	0x06,
-	0x25,
-	0x4c,
-	0x9f,
-	0x26,
-	0x9c,
-	0x20,
-	0x68,
-	0x9c,
-	0x24,
-	0x68,
-	0x9c,
-	0x28,
-	0x68,
-	0xa2,
-	0x00,
-	0xad,
-	0x0a,
-	0x02,
-	0xcd,
-	0x59,
-	0x2c,
-	0xd0,
-	0x09,
-	0xad,
-	0x09,
-	0x02,
-	0xcd,
-	0x58,
-	0x2c,
-	0xd0,
-	0x01,
-	0xe8,
-	0xad,
-	0x0a,
-	0x02,
-	0xcd,
-	0xbc,
-	0x2c,
-	0xd0,
-	0x0a,
-	0xad,
-	0x09,
-	0x02,
-	0xcd,
-	0xbb,
-	0x2c,
-	0xd0,
-	0x02,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x00,
-	0xd0,
-	0x06,
-	0xa9,
-	0x04,
-	0x85,
-	0xc7,
-	0x80,
-	0x46,
-	0xe0,
-	0x01,
-	0xf0,
-	0x08,
-	0xe0,
-	0x02,
-	0xf0,
-	0x22,
-	0xa5,
-	0x13,
-	0xd0,
-	0x1e,
-	0xa0,
-	0x63,
-	0x53,
-	0x4c,
-	0x2c,
-	0x65,
-	0x00,
-	0xa0,
-	0x93,
-	0x53,
-	0xf2,
-	0x27,
-	0x18,
-	0x29,
-	0xa0,
-	0x07,
-	0x53,
-	0x0f,
-	0x2b,
-	0x1d,
-	0x2b,
-	0xa0,
-	0x38,
-	0x53,
-	0xf7,
-	0x29,
-	0xd7,
-	0x2a,
-	0x80,
-	0x1c,
-	0xa0,
-	0x63,
-	0x53,
-	0xaf,
-	0x2c,
-	0x65,
-	0x00,
-	0xa0,
-	0x93,
-	0x53,
-	0x85,
-	0x28,
-	0x18,
-	0x29,
-	0xa0,
-	0x07,
-	0x53,
-	0x16,
-	0x2b,
-	0x1d,
-	0x2b,
-	0xa0,
-	0x38,
-	0x53,
-	0x67,
-	0x2a,
-	0xd7,
-	0x2a,
-	0xa5,
-	0x11,
-	0xae,
-	0xae,
-	0x2c,
-	0xe0,
-	0x00,
-	0xf0,
-	0x0c,
-	0xe0,
-	0x28,
-	0xd0,
-	0x0a,
-	0xa6,
-	0x15,
-	0xe0,
-	0x00,
-	0xf0,
-	0x02,
-	0x09,
-	0x03,
-	0x09,
-	0x01,
-	0xae,
-	0x11,
-	0x2d,
-	0xe0,
-	0x00,
-	0xf0,
-	0x0c,
-	0xe0,
-	0x28,
-	0xd0,
-	0x0a,
-	0xa6,
-	0x15,
-	0xe0,
-	0x00,
-	0xf0,
-	0x02,
-	0x09,
-	0x30,
-	0x09,
-	0x10,
-	0x85,
-	0x11,
-	0xa5,
-	0xc7,
-	0xf0,
-	0x0f,
-	0xc9,
-	0x28,
-	0xd0,
-	0x02,
-	0xa9,
-	0x04,
-	0x8d,
-	0x08,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x28,
-	0x68,
-	0x60,
-	0x8d,
-	0x08,
-	0x02,
-	0xa0,
-	0x03,
-	0x53,
-	0x84,
-	0x00,
-	0xb0,
-	0x02,
-	0xa0,
-	0x02,
-	0x53,
-	0x71,
-	0x00,
-	0xa7,
-	0x02,
-	0xa5,
-	0xc5,
-	0x8d,
-	0xbc,
-	0x02,
-	0xa5,
-	0xc6,
-	0x8d,
-	0xbb,
-	0x02,
-	0x20,
-	0x6f,
-	0x18,
-	0xa9,
-	0x02,
-	0x8d,
-	0x38,
-	0x60,
-	0xa9,
-	0x01,
-	0x8d,
-	0x38,
-	0x60,
-	0xa9,
-	0x05,
-	0x8d,
-	0x38,
-	0x60,
-	0xa9,
-	0x09,
-	0x8d,
-	0x38,
-	0x60,
-	0xa5,
-	0x7f,
-	0x29,
-	0x02,
-	0xd0,
-	0x0e,
-	0xa9,
-	0x0d,
-	0x8d,
-	0x38,
-	0x60,
-	0xa0,
-	0x0c,
-	0x64,
-	0x37,
-	0x13,
-	0x37,
-	0x00,
-	0x38,
-	0x00,
-	0x18,
-	0xad,
-	0xa2,
-	0x02,
-	0x69,
-	0x01,
-	0x8d,
-	0xa2,
-	0x02,
-	0xad,
-	0xa3,
-	0x02,
-	0x69,
-	0x00,
-	0x8d,
-	0xa3,
-	0x02,
-	0xa5,
-	0x7a,
-	0x8d,
-	0xad,
-	0x02,
-	0xa5,
-	0x7c,
-	0x8d,
-	0xb3,
-	0x02,
-	0xa0,
-	0x4f,
-	0x9c,
-	0xfc,
-	0x2b,
-	0x13,
-	0xfc,
-	0x2b,
-	0xfd,
-	0x2b,
-	0x9c,
-	0xe9,
-	0x27,
-	0xa9,
-	0x01,
-	0x8d,
-	0x20,
-	0x68,
-	0x85,
-	0x10,
-	0x64,
-	0xc7,
-	0x60,
-	0xba,
-	0x08,
-	0x78,
-	0x68,
-	0x48,
-	0x29,
-	0x1c,
-	0x85,
-	0xca,
-	0x86,
-	0xc8,
-	0xa9,
-	0x01,
-	0x85,
-	0xc9,
-	0xa0,
-	0x06,
-	0xb1,
-	0xc8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc5,
-	0xca,
-	0x90,
-	0x08,
-	0x7a,
-	0xa0,
-	0x09,
-	0xb1,
-	0xc8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc9,
-	0x00,
-	0xd0,
-	0x38,
-	0xa0,
-	0x03,
-	0xb1,
-	0xc8,
-	0xe0,
-	0x7f,
-	0xb0,
-	0x18,
-	0x8d,
-	0xea,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xeb,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xec,
-	0x27,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0xed,
-	0x27,
-	0x80,
-	0x16,
-	0x8d,
-	0xee,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xef,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xf0,
-	0x27,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0xf1,
-	0x27,
-	0xa9,
-	0x00,
-	0xfa,
-	0x28,
-	0xf8,
-	0x60,
-	0x68,
-	0xf0,
-	0x04,
-	0x68,
-	0xfa,
-	0x7a,
-	0x40,
-	0x08,
-	0x78,
-	0x68,
-	0xad,
-	0xe9,
-	0x27,
-	0xf0,
-	0x0e,
-	0xae,
-	0xed,
-	0x27,
-	0x9a,
-	0xad,
-	0xea,
-	0x27,
-	0xae,
-	0xeb,
-	0x27,
-	0xac,
-	0xec,
-	0x27,
-	0x40,
-	0xae,
-	0xf1,
-	0x27,
-	0x9a,
-	0xad,
-	0xee,
-	0x27,
-	0xae,
-	0xef,
-	0x27,
-	0xac,
-	0xf0,
-	0x27,
-	0x40,
-	0x08,
-	0x78,
-	0xad,
-	0xe9,
-	0x27,
-	0xd0,
-	0x1f,
-	0x1a,
-	0x8d,
-	0xe9,
-	0x27,
-	0xa9,
-	0x7c,
-	0x8d,
-	0xed,
-	0x27,
-	0x9c,
-	0xea,
-	0x27,
-	0x9c,
-	0xeb,
-	0x27,
-	0x9c,
-	0xec,
-	0x27,
-	0xa9,
-	0x24,
-	0x8d,
-	0x7f,
-	0x01,
-	0xa9,
-	0xcc,
-	0x8d,
-	0x7e,
-	0x01,
-	0x9c,
-	0x7d,
-	0x01,
-	0x28,
-	0x60,
-	0x64,
-	0xd3,
-	0x64,
-	0xd4,
-	0xa2,
-	0x10,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xd3,
-	0x26,
-	0xd4,
-	0xa5,
-	0xd3,
-	0x38,
-	0xe5,
-	0xd1,
-	0xa8,
-	0xa5,
-	0xd4,
-	0xe5,
-	0xd2,
-	0x90,
-	0x06,
-	0x85,
-	0xd4,
-	0x84,
-	0xd3,
-	0xe6,
-	0xcf,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0x20,
-	0xf2,
-	0x26,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x90,
-	0x06,
-	0xe6,
-	0xd1,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd2,
-	0x38,
-	0xa5,
-	0xd3,
-	0xe5,
-	0xd1,
-	0xa5,
-	0xd4,
-	0xe5,
-	0xd2,
-	0x30,
-	0x06,
-	0xe6,
-	0xcf,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd0,
-	0x60,
-	0x00,
-	0x01,
-	0x02,
-	0x03,
-	0x04,
-	0x05,
-	0x06,
-	0x07,
-	0x07,
-	0x06,
-	0x05,
-	0x04,
-	0x03,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x02,
-	0x03,
-	0x04,
-	0x05,
-	0x05,
-	0x04,
-	0x03,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x81,
-	0x02,
-	0x42,
-	0x82,
-	0xc2,
-	0x03,
-	0x23,
-	0x43,
-	0x63,
-	0x83,
-	0xa3,
-	0xc3,
-	0xe3,
-	0x04,
-	0x14,
-	0x24,
-	0x34,
-	0x44,
-	0x54,
-	0x64,
-	0x74,
-	0x84,
-	0x94,
-	0xa4,
-	0xb4,
-	0xc4,
-	0xd4,
-	0xe4,
-	0xf4,
-	0x05,
-	0x05,
-	0x15,
-	0x15,
-	0x25,
-	0x25,
-	0x35,
-	0x35,
-	0x45,
-	0x45,
-	0x55,
-	0x55,
-	0x65,
-	0x65,
-	0x75,
-	0x75,
-	0x85,
-	0x85,
-	0x95,
-	0x95,
-	0xa5,
-	0xa5,
-	0xb5,
-	0xb5,
-	0xc5,
-	0xc5,
-	0xd5,
-	0xd5,
-	0xe5,
-	0xe5,
-	0xf5,
-	0xf5,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x39,
-	0x33,
-	0x2f,
-	0x2b,
-	0x27,
-	0x25,
-	0x22,
-	0x20,
-	0x1e,
-	0x1c,
-	0x1b,
-	0x1a,
-	0x18,
-	0x17,
-	0x16,
-	0x15,
-	0x14,
-	0x14,
-	0x13,
-	0x12,
-	0x12,
-	0x11,
-	0x11,
-	0x10,
-	0x10,
-	0x0f,
-	0x0f,
-	0x0e,
-	0x0e,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x0c,
-	0x0c,
-	0x0c,
-	0x0c,
-	0x0b,
-	0x0b,
-	0x0b,
-	0x0b,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x08,
-	0x08,
-	0x08,
-};
-
-uint8_t dopclib_u[] =
-{
-	0x03,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x00,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x07,
-	0x0d,
-	0x13,
-	0x19,
-	0x1d,
-	0x1f,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x17,
-	0x14,
-	0x1f,
-	0x2e,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x07,
-	0x0f,
-	0x14,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0x80,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0d,
-	0x0d,
-	0x08,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfb,
-	0xc0,
-	0xfe,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x15,
-	0x10,
-	0x0c,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x07,
-	0x0d,
-	0x09,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x5d,
-	0x1a,
-	0x12,
-	0x11,
-	0x17,
-	0x19,
-	0x0d,
-	0x00,
-	0x08,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x16,
-	0x0e,
-	0x14,
-	0x17,
-	0x0b,
-	0x00,
-	0x07,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x23,
-	0x1a,
-	0x15,
-	0x0a,
-	0x10,
-	0x09,
-	0x10,
-	0x00,
-	0x05,
-	0x00,
-	0x03,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x1a,
-	0x15,
-	0x04,
-	0x09,
-	0x06,
-	0x01,
-	0x01,
-	0x09,
-	0x02,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x18,
-	0x07,
-	0x10,
-	0x0a,
-	0x09,
-	0x09,
-	0x10,
-	0x07,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x26,
-	0x20,
-	0x06,
-	0x0c,
-	0x08,
-	0x0d,
-	0x00,
-	0x06,
-	0x06,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x21,
-	0x06,
-	0x0c,
-	0x06,
-	0x0d,
-	0x00,
-	0x07,
-	0x05,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x06,
-	0x05,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x18,
-	0x40,
-	0x28,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x07,
-	0x09,
-	0x09,
-	0x01,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x40,
-	0x25,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x09,
-	0x08,
-	0x03,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x43,
-	0x40,
-	0x2f,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0b,
-	0x0b,
-	0x0e,
-	0x02,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x33,
-	0x40,
-	0x30,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x0b,
-	0x04,
-	0x09,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x64,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0b,
-	0x05,
-	0x08,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x16,
-	0x40,
-	0x35,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0d,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x03,
-	0x01,
-	0x00,
-	0x26,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x01,
-	0x14,
-	0x02,
-	0x03,
-	0x04,
-	0x01,
-	0x0f,
-	0x2a,
-	0x40,
-	0x3c,
-	0x02,
-	0x04,
-	0x03,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0d,
-	0x05,
-	0x07,
-	0x0f,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x30,
-	0x1a,
-	0x13,
-	0x05,
-	0x09,
-	0x0f,
-	0x05,
-	0x00,
-	0x03,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1f,
-	0x1a,
-	0x16,
-	0x04,
-	0x08,
-	0x0f,
-	0x04,
-	0x00,
-	0x03,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x14,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x01,
-	0x03,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x12,
-	0x02,
-	0x06,
-	0x0b,
-	0x01,
-	0x01,
-	0x06,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x4d,
-	0x26,
-	0x1c,
-	0x03,
-	0x07,
-	0x09,
-	0x04,
-	0x04,
-	0x07,
-	0x18,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x21,
-	0x02,
-	0x06,
-	0x0a,
-	0x03,
-	0x03,
-	0x06,
-	0x1a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x06,
-	0x03,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x24,
-	0x40,
-	0x39,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x09,
-	0x0b,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x4c,
-	0x40,
-	0x32,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x44,
-	0x40,
-	0x36,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x42,
-	0x40,
-	0x37,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0a,
-	0x03,
-	0x07,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x23,
-	0x40,
-	0x4e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x04,
-	0x06,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x3e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x3c,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x33,
-	0x40,
-	0x3e,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x29,
-	0x33,
-	0x35,
-	0x2f,
-	0x16,
-	0x18,
-	0x16,
-	0x2e,
-	0x07,
-	0x1f,
-	0x33,
-	0x35,
-	0x2e,
-	0x11,
-	0x15,
-	0x11,
-	0x2d,
-	0x04,
-	0x16,
-	0x2e,
-	0x31,
-	0x28,
-	0x0e,
-	0x13,
-	0x0e,
-	0x27,
-	0x03,
-	0x10,
-	0x34,
-	0x3a,
-	0x32,
-	0x09,
-	0x10,
-	0x09,
-	0x32,
-	0x01,
-	0x0b,
-	0x2f,
-	0x38,
-	0x32,
-	0x04,
-	0x0e,
-	0x04,
-	0x33,
-	0x00,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x38,
-	0x3b,
-	0x34,
-	0x11,
-	0x15,
-	0x11,
-	0x33,
-	0x05,
-	0x3a,
-	0x33,
-	0x36,
-	0x30,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2e,
-	0x04,
-	0x29,
-	0x2a,
-	0x31,
-	0x28,
-	0x09,
-	0x10,
-	0x09,
-	0x27,
-	0x03,
-	0x1d,
-	0x24,
-	0x30,
-	0x27,
-	0x04,
-	0x0e,
-	0x04,
-	0x28,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-
-struct yushan_reg_t yushan_regs = {
-	.pdpcode_first_addr = 0x0234,
-	.pdpcode = &pdpcode_u[0],
-	.pdpcode_size = ARRAY_SIZE(pdpcode_u),
-
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u),
-
-	.pdpBootAddr  = 0x1a00,
-	.pdpStartAddr = 0x0234,
-
-	.dppcode_first_addr = 0x0300,
-	.dppcode = &dppcode_u[0],
-	.dppcode_size = ARRAY_SIZE(dppcode_u),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u),
-
-	.dppBootAddr  = 0xd000,
-	.dppStartAddr = 0x0300,
-
-	.dopcode_first_addr = 0x0300,
-	.dopcode = &dopcode_u[0],
-	.dopcode_size = ARRAY_SIZE(dopcode_u),
-
-	.dopclib_first_addr = 0x3bcc,
-	.dopclib = &dopclib_u[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u),
-
-	.dopBootAddr  = 0x6800,
-	.dopStartAddr = 0x0300,
-
-
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_reg_ar0260.c b/drivers/media/video/msm/rawchip/yushan_reg_ar0260.c
deleted file mode 100644
index 6d41eb1..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg_ar0260.c
+++ /dev/null
@@ -1,2157 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpclib_u_ar0260[] =
-{
-	0x01,
-	0x01,
-	0x01,
-	0x88,
-	0x07,
-	0x40,
-	0x04,
-	0x00,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0xf9,
-	0x00,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x03,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x03,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x03,
-	0x02,
-	0x02,
-	0xf9,
-	0x00,
-	0x02,
-	0x03,
-	0x03,
-	0x03,
-	0xf9,
-	0x00,
-	0x02,
-	0x03,
-	0x03,
-	0x03,
-	0xf9,
-	0x00,
-	0x02,
-	0x03,
-	0x03,
-	0x03,
-	0xfa,
-	0x00,
-	0x04,
-	0x06,
-	0x05,
-	0x05,
-	0xfa,
-	0x00,
-	0x04,
-	0x06,
-	0x05,
-	0x05,
-	0xfa,
-	0x00,
-	0x04,
-	0x06,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x01,
-	0x11,
-	0x21,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x04,
-	0x1f,
-	0x3a,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x01,
-	0x2c,
-	0x57,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x00,
-	0x08,
-	0x10,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x02,
-	0x10,
-	0x1d,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x01,
-	0x16,
-	0x2b,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x55,
-	0x02,
-	0x00,
-	0x00,
-	0x2b,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xa0,
-	0xff,
-	0xff,
-	0xff,
-	0xa0,
-	0x01,
-	0x00,
-	0x00,
-	0xa0,
-	0x03,
-	0x00,
-	0x00,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x55,
-	0x00,
-	0x00,
-	0x00,
-	0x55,
-	0x01,
-	0x00,
-	0x00,
-	0x2b,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xe0,
-	0xff,
-	0xff,
-	0xff,
-	0xc0,
-	0x00,
-	0x00,
-	0x00,
-	0xc0,
-	0x01,
-	0x00,
-	0x00,
-	0xff,
-	0x01,
-	0xff,
-	0x05,
-
-};
-
-uint8_t dppclib_u_ar0260[] =
-{
-	0x01,
-	0x01,
-	0x01,
-	0x88,
-	0x07,
-	0x40,
-	0x04,
-	0x00,
-	0x05,
-	0xfa,
-	0x84,
-	0x00,
-	0xbc,
-	0xfe,
-	0x32,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x1b,
-	0x00,
-	0xfb,
-	0x00,
-	0x00,
-	0xfc,
-	0x00,
-	0xfe,
-	0x00,
-	0x00,
-	0x9c,
-	0x04,
-	0x0d,
-	0x01,
-	0xff,
-	0x1c,
-	0x12,
-	0xfa,
-	0xff,
-	0x17,
-	0xfc,
-	0xf6,
-	0xff,
-	0xfb,
-	0xf8,
-	0x8a,
-	0x04,
-	0x09,
-	0x01,
-	0xff,
-	0x1a,
-	0x10,
-	0xfb,
-	0xff,
-	0x04,
-	0xfc,
-	0xfc,
-	0xfe,
-	0xfb,
-	0xfe,
-	0x80,
-	0xfe,
-	0x00,
-	0xff,
-	0x00,
-	0xf4,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0x6d,
-	0xfd,
-	0xfe,
-	0xff,
-	0x01,
-	0xf2,
-	0x0c,
-	0x02,
-	0x00,
-	0xee,
-	0x00,
-	0x09,
-	0xff,
-	0xfc,
-	0x08,
-	0x74,
-	0xff,
-	0xff,
-	0xff,
-	0x01,
-	0xf6,
-	0x0f,
-	0x03,
-	0xff,
-	0xf4,
-	0x00,
-	0x05,
-	0x00,
-	0xfc,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-
-};
-
-uint8_t dopclib_u_ar0260[] =
-{
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0x88,
-	0x07,
-	0x40,
-	0x04,
-	0x78,
-	0x00,
-	0x7a,
-	0x00,
-	0x5a,
-	0x00,
-	0x5c,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x10,
-	0x0c,
-	0x00,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x02,
-	0x03,
-	0x01,
-	0x01,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfe,
-	0xc0,
-	0xff,
-	0xc0,
-	0xff,
-	0x00,
-	0x00,
-	0x0b,
-	0x0b,
-	0x07,
-	0x06,
-	0x04,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x01,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfc,
-	0x00,
-	0xff,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x1d,
-	0x1d,
-	0x13,
-	0x0f,
-	0x0b,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x1a,
-	0x0f,
-	0x01,
-	0x01,
-	0x0b,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x1a,
-	0x14,
-	0x02,
-	0x05,
-	0x0c,
-	0x07,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0d,
-	0x1a,
-	0x14,
-	0x02,
-	0x04,
-	0x0d,
-	0x05,
-	0x00,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0c,
-	0x1a,
-	0x13,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x02,
-	0x03,
-	0x06,
-	0x03,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x26,
-	0x1f,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x07,
-	0x05,
-	0x05,
-	0x02,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x15,
-	0x26,
-	0x1e,
-	0x00,
-	0x03,
-	0x04,
-	0x06,
-	0x06,
-	0x05,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x11,
-	0x26,
-	0x1a,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x08,
-	0x04,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1d,
-	0x40,
-	0x3a,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0a,
-	0x07,
-	0x08,
-	0x02,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x27,
-	0x40,
-	0x34,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x09,
-	0x07,
-	0x08,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x20,
-	0x40,
-	0x2e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x22,
-	0x40,
-	0x32,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x04,
-	0x04,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x20,
-	0x40,
-	0x3b,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x09,
-	0x07,
-	0x08,
-	0x00,
-	0x04,
-	0x03,
-	0x01,
-	0x00,
-	0x20,
-	0x40,
-	0x31,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x07,
-	0x08,
-	0x01,
-	0x03,
-	0x03,
-	0x01,
-	0x00,
-	0x24,
-	0x40,
-	0x32,
-	0x01,
-	0x01,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x1a,
-	0x12,
-	0x01,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0d,
-	0x1a,
-	0x17,
-	0x01,
-	0x02,
-	0x08,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x1a,
-	0x14,
-	0x01,
-	0x01,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0c,
-	0x1a,
-	0x15,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0e,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x06,
-	0x05,
-	0x09,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x19,
-	0x26,
-	0x22,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x06,
-	0x04,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x16,
-	0x26,
-	0x22,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x03,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x25,
-	0x40,
-	0x2d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x03,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x40,
-	0x3d,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x06,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x30,
-	0x40,
-	0x3b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x06,
-	0x08,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2f,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x03,
-	0x03,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x33,
-	0x40,
-	0x39,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x03,
-	0x04,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x3e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x06,
-	0x09,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x32,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x05,
-	0x08,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x32,
-	0x40,
-	0x3d,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x36,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x23,
-	0x2d,
-	0x31,
-	0x29,
-	0x16,
-	0x18,
-	0x16,
-	0x2a,
-	0x07,
-	0x1b,
-	0x2e,
-	0x32,
-	0x2a,
-	0x11,
-	0x15,
-	0x11,
-	0x2a,
-	0x04,
-	0x14,
-	0x36,
-	0x3d,
-	0x35,
-	0x0e,
-	0x13,
-	0x0e,
-	0x36,
-	0x02,
-	0x0e,
-	0x2a,
-	0x36,
-	0x30,
-	0x09,
-	0x10,
-	0x09,
-	0x32,
-	0x01,
-	0x0a,
-	0x29,
-	0x35,
-	0x2f,
-	0x04,
-	0x0e,
-	0x04,
-	0x31,
-	0x00,
-	0x36,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x33,
-	0x37,
-	0x31,
-	0x11,
-	0x15,
-	0x11,
-	0x31,
-	0x05,
-	0x33,
-	0x2c,
-	0x33,
-	0x2b,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2c,
-	0x04,
-	0x24,
-	0x31,
-	0x3c,
-	0x35,
-	0x09,
-	0x10,
-	0x09,
-	0x37,
-	0x02,
-	0x19,
-	0x30,
-	0x3b,
-	0x34,
-	0x04,
-	0x0e,
-	0x04,
-	0x36,
-	0x01,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-
-
-struct yushan_reg_clib_t yushan_regs_clib_ar0260 = {
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u_ar0260[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u_ar0260),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u_ar0260[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u_ar0260),
-
-#if 1 
-	.dopclib_first_addr = 0x3bcc,
-#else
-	.dopclib_first_addr = 0x3bcc,
-#endif
-	.dopclib = &dopclib_u_ar0260[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u_ar0260),
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_reg_imx175.c b/drivers/media/video/msm/rawchip/yushan_reg_imx175.c
deleted file mode 100644
index 506eb3e..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg_imx175.c
+++ /dev/null
@@ -1,3238 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpclib_u_imx175[] =
-{
-	0x02,
-	0x01,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0xe0,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0xff,
-	0x00,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x09,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x09,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x3f,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x3f,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x41,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x40,
-	0x41,
-	0x40,
-	0x40,
-	0x09,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x09,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x09,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x05,
-	0x0f,
-	0x18,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x08,
-	0x1c,
-	0x31,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x0a,
-	0x29,
-	0x47,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x03,
-	0x07,
-	0x0c,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x04,
-	0x0e,
-	0x18,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x05,
-	0x14,
-	0x24,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x2b,
-	0x02,
-	0x00,
-	0x00,
-	0x2b,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0xa0,
-	0x01,
-	0x00,
-	0x00,
-	0xc0,
-	0x02,
-	0x00,
-	0x00,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2b,
-	0x00,
-	0x00,
-	0x00,
-	0x2b,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0xc0,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x01,
-	0x00,
-	0x00,
-	0xff,
-	0x01,
-	0xff,
-	0x05,
-
-};
-
-uint8_t dppclib_u_imx175[] =
-{
-	0x02,
-	0x01,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x01,
-	0x05,
-	0xfa,
-	0x4e,
-	0x00,
-	0xca,
-	0xfe,
-	0x1a,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x8e,
-	0xff,
-	0x06,
-	0x00,
-	0xff,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x0c,
-	0x00,
-	0xfa,
-	0x00,
-	0x00,
-	0xfd,
-	0x86,
-	0xff,
-	0x03,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x06,
-	0x01,
-	0xfe,
-	0x00,
-	0x00,
-	0xff,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7a,
-	0x00,
-	0xff,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0xfe,
-	0x00,
-	0x05,
-	0x00,
-	0x00,
-	0x02,
-	0x7b,
-	0x00,
-	0xff,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0xfe,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-
-};
-
-uint8_t dopclib_u_imx175[] =
-#if 1 
-{
-	0x02,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0xff,
-	0xff,
-	0x00,
-	0x01,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xe0,
-	0x00,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x01,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x00,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x01,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0xc0,
-	0xff,
-	0xc0,
-	0xff,
-	0x00,
-	0x00,
-	0x0c,
-	0x0c,
-	0x07,
-	0x06,
-	0x04,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x00,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x01,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfb,
-	0x00,
-	0xff,
-	0xa0,
-	0xff,
-	0x00,
-	0x00,
-	0x20,
-	0x20,
-	0x13,
-	0x0f,
-	0x0c,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x04,
-	0x0a,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0b,
-	0x06,
-	0x0c,
-	0x08,
-	0x04,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x32,
-	0x1a,
-	0x0f,
-	0x0a,
-	0x0e,
-	0x09,
-	0x09,
-	0x00,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x24,
-	0x1a,
-	0x15,
-	0x08,
-	0x0c,
-	0x0a,
-	0x07,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x27,
-	0x1a,
-	0x16,
-	0x03,
-	0x0a,
-	0x01,
-	0x01,
-	0x00,
-	0x0a,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x12,
-	0x03,
-	0x0b,
-	0x05,
-	0x04,
-	0x04,
-	0x0b,
-	0x17,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x39,
-	0x26,
-	0x1a,
-	0x05,
-	0x0b,
-	0x08,
-	0x08,
-	0x07,
-	0x0b,
-	0x05,
-	0x05,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x26,
-	0x20,
-	0x04,
-	0x09,
-	0x0a,
-	0x07,
-	0x00,
-	0x08,
-	0x04,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x3b,
-	0x26,
-	0x21,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x06,
-	0x06,
-	0x02,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x40,
-	0x0c,
-	0x00,
-	0x00,
-	0x04,
-	0x02,
-	0x04,
-	0x0a,
-	0x0b,
-	0x01,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x40,
-	0x25,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0b,
-	0x0b,
-	0x07,
-	0x02,
-	0x08,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x23,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x0e,
-	0x0d,
-	0x0c,
-	0x04,
-	0x07,
-	0x00,
-	0x00,
-	0x00,
-	0x35,
-	0x40,
-	0x37,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x0c,
-	0x01,
-	0x0a,
-	0x01,
-	0x01,
-	0x06,
-	0x01,
-	0x00,
-	0x18,
-	0x40,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x01,
-	0x12,
-	0x01,
-	0x01,
-	0x04,
-	0x01,
-	0x07,
-	0x25,
-	0x40,
-	0x50,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x0a,
-	0x09,
-	0x01,
-	0x04,
-	0x04,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x25,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x10,
-	0x01,
-	0x1b,
-	0x03,
-	0x04,
-	0x06,
-	0x00,
-	0x0d,
-	0x2b,
-	0x40,
-	0x4d,
-	0x01,
-	0x04,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x07,
-	0x02,
-	0x04,
-	0x06,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x4a,
-	0x1a,
-	0x0d,
-	0x03,
-	0x05,
-	0x07,
-	0x03,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1f,
-	0x1a,
-	0x14,
-	0x03,
-	0x05,
-	0x07,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x14,
-	0x01,
-	0x04,
-	0x01,
-	0x01,
-	0x01,
-	0x04,
-	0x09,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x67,
-	0x26,
-	0x13,
-	0x01,
-	0x04,
-	0x06,
-	0x00,
-	0x00,
-	0x04,
-	0x12,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x35,
-	0x26,
-	0x1a,
-	0x01,
-	0x05,
-	0x05,
-	0x03,
-	0x03,
-	0x05,
-	0x0f,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x1f,
-	0x01,
-	0x05,
-	0x05,
-	0x03,
-	0x03,
-	0x05,
-	0x10,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2f,
-	0x26,
-	0x1f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x04,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x29,
-	0x40,
-	0x30,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x07,
-	0x08,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x3c,
-	0x40,
-	0x31,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x07,
-	0x01,
-	0x0b,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x07,
-	0x3a,
-	0x40,
-	0x36,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x09,
-	0x09,
-	0x0f,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x3b,
-	0x40,
-	0x39,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x03,
-	0x07,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x22,
-	0x40,
-	0x4d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x05,
-	0x08,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x2c,
-	0x40,
-	0x41,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x0c,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x07,
-	0x32,
-	0x40,
-	0x43,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x02,
-	0x10,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x09,
-	0x35,
-	0x40,
-	0x42,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x2f,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x27,
-	0x35,
-	0x35,
-	0x2e,
-	0x16,
-	0x18,
-	0x16,
-	0x2b,
-	0x07,
-	0x1c,
-	0x34,
-	0x34,
-	0x2c,
-	0x11,
-	0x15,
-	0x11,
-	0x2a,
-	0x04,
-	0x15,
-	0x30,
-	0x31,
-	0x27,
-	0x0e,
-	0x13,
-	0x0e,
-	0x25,
-	0x03,
-	0x0f,
-	0x39,
-	0x39,
-	0x32,
-	0x09,
-	0x10,
-	0x09,
-	0x30,
-	0x01,
-	0x0b,
-	0x35,
-	0x39,
-	0x31,
-	0x04,
-	0x0e,
-	0x04,
-	0x30,
-	0x00,
-	0x2f,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x3a,
-	0x3a,
-	0x32,
-	0x11,
-	0x15,
-	0x11,
-	0x31,
-	0x05,
-	0x36,
-	0x35,
-	0x35,
-	0x2e,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2b,
-	0x04,
-	0x28,
-	0x30,
-	0x30,
-	0x27,
-	0x09,
-	0x10,
-	0x09,
-	0x25,
-	0x03,
-	0x1c,
-	0x2b,
-	0x30,
-	0x26,
-	0x04,
-	0x0e,
-	0x04,
-	0x25,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#else
-{
-	0x02,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x00,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x07,
-	0x0d,
-	0x13,
-	0x19,
-	0x1d,
-	0x1f,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x17,
-	0x14,
-	0x1f,
-	0x2e,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x07,
-	0x0f,
-	0x14,
-	0x1e,
-	0x00,
-	0x06,
-	0x04,
-	0x02,
-	0x04,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0x80,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0d,
-	0x0d,
-	0x08,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfb,
-	0xc0,
-	0xfe,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x15,
-	0x10,
-	0x0c,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x07,
-	0x0d,
-	0x09,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x5d,
-	0x1a,
-	0x12,
-	0x11,
-	0x17,
-	0x19,
-	0x0d,
-	0x00,
-	0x08,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x16,
-	0x0e,
-	0x14,
-	0x17,
-	0x0b,
-	0x00,
-	0x07,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x23,
-	0x1a,
-	0x15,
-	0x0a,
-	0x10,
-	0x09,
-	0x10,
-	0x00,
-	0x05,
-	0x00,
-	0x03,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x1a,
-	0x15,
-	0x04,
-	0x09,
-	0x06,
-	0x01,
-	0x01,
-	0x09,
-	0x02,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x18,
-	0x07,
-	0x10,
-	0x0a,
-	0x09,
-	0x09,
-	0x10,
-	0x07,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x26,
-	0x20,
-	0x06,
-	0x0c,
-	0x08,
-	0x0d,
-	0x00,
-	0x06,
-	0x06,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x21,
-	0x06,
-	0x0c,
-	0x06,
-	0x0d,
-	0x00,
-	0x07,
-	0x05,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x06,
-	0x05,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x18,
-	0x40,
-	0x28,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x07,
-	0x09,
-	0x09,
-	0x01,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x40,
-	0x25,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x09,
-	0x08,
-	0x03,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x43,
-	0x40,
-	0x2f,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0b,
-	0x0b,
-	0x0e,
-	0x02,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x33,
-	0x40,
-	0x30,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x0b,
-	0x04,
-	0x09,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x64,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0b,
-	0x05,
-	0x08,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x16,
-	0x40,
-	0x35,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0d,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x03,
-	0x01,
-	0x00,
-	0x26,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x01,
-	0x14,
-	0x02,
-	0x03,
-	0x04,
-	0x01,
-	0x0f,
-	0x2a,
-	0x40,
-	0x3c,
-	0x02,
-	0x04,
-	0x03,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0d,
-	0x05,
-	0x07,
-	0x0f,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x30,
-	0x1a,
-	0x13,
-	0x05,
-	0x09,
-	0x0f,
-	0x05,
-	0x00,
-	0x03,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1f,
-	0x1a,
-	0x16,
-	0x04,
-	0x08,
-	0x0f,
-	0x04,
-	0x00,
-	0x03,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x14,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x01,
-	0x03,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x12,
-	0x02,
-	0x06,
-	0x0b,
-	0x01,
-	0x01,
-	0x06,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x4d,
-	0x26,
-	0x1c,
-	0x03,
-	0x07,
-	0x09,
-	0x04,
-	0x04,
-	0x07,
-	0x18,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x21,
-	0x02,
-	0x06,
-	0x0a,
-	0x03,
-	0x03,
-	0x06,
-	0x1a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x06,
-	0x03,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x24,
-	0x40,
-	0x39,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x09,
-	0x0b,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x4c,
-	0x40,
-	0x32,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x44,
-	0x40,
-	0x36,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x42,
-	0x40,
-	0x37,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0a,
-	0x03,
-	0x07,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x23,
-	0x40,
-	0x4e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x04,
-	0x06,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x3e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x3c,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x33,
-	0x40,
-	0x3e,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x29,
-	0x33,
-	0x35,
-	0x2f,
-	0x16,
-	0x18,
-	0x16,
-	0x2e,
-	0x07,
-	0x1f,
-	0x33,
-	0x35,
-	0x2e,
-	0x11,
-	0x15,
-	0x11,
-	0x2d,
-	0x04,
-	0x16,
-	0x2e,
-	0x31,
-	0x28,
-	0x0e,
-	0x13,
-	0x0e,
-	0x27,
-	0x03,
-	0x10,
-	0x34,
-	0x3a,
-	0x32,
-	0x09,
-	0x10,
-	0x09,
-	0x32,
-	0x01,
-	0x0b,
-	0x2f,
-	0x38,
-	0x32,
-	0x04,
-	0x0e,
-	0x04,
-	0x33,
-	0x00,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x38,
-	0x3b,
-	0x34,
-	0x11,
-	0x15,
-	0x11,
-	0x33,
-	0x05,
-	0x3a,
-	0x33,
-	0x36,
-	0x30,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2e,
-	0x04,
-	0x29,
-	0x2a,
-	0x31,
-	0x28,
-	0x09,
-	0x10,
-	0x09,
-	0x27,
-	0x03,
-	0x1d,
-	0x24,
-	0x30,
-	0x27,
-	0x04,
-	0x0e,
-	0x04,
-	0x28,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#endif
-
-struct yushan_reg_clib_t yushan_regs_clib_imx175 = {
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u_imx175[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u_imx175),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u_imx175[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u_imx175),
-
-#if 1 
-	.dopclib_first_addr = 0x3bcc,
-#else
-	.dopclib_first_addr = 0x3bcc,
-#endif
-	.dopclib = &dopclib_u_imx175[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u_imx175),
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_reg_ov2722.c b/drivers/media/video/msm/rawchip/yushan_reg_ov2722.c
deleted file mode 100644
index 9b72b9e..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg_ov2722.c
+++ /dev/null
@@ -1,2157 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpclib_u_ov2722[] =
-{
-0x02, 
-0x03, 
-0x01, 
-0x88, 
-0x07, 
-0x40, 
-0x04, 
-0x02, 
-0x10, 
-0x00, 
-0x00, 
-0x01, 
-0x01, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x10, 
-0x00, 
-0x00, 
-0x01, 
-0x00, 
-0x02, 
-0x00, 
-0x04, 
-0x00, 
-0x08, 
-0x00, 
-0x10, 
-0x80, 
-0x00, 
-0x00, 
-0x01, 
-0x00, 
-0x02, 
-0x00, 
-0x00, 
-0x00, 
-0x01, 
-0x00, 
-0x00, 
-0x80, 
-0x00, 
-0x00, 
-0x00, 
-0x40, 
-0x00, 
-0x00, 
-0x00, 
-0x20, 
-0x00, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x42, 
-0x42, 
-0x42, 
-0x42, 
-0x0a, 
-0x01, 
-0x42, 
-0x42, 
-0x42, 
-0x42, 
-0x0a, 
-0x01, 
-0x42, 
-0x42, 
-0x42, 
-0x42, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x43, 
-0x43, 
-0x43, 
-0x0a, 
-0x01, 
-0x43, 
-0x45, 
-0x43, 
-0x45, 
-0x0a, 
-0x01, 
-0x43, 
-0x45, 
-0x43, 
-0x45, 
-0x0a, 
-0x01, 
-0x43, 
-0x45, 
-0x43, 
-0x45, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x01, 
-0x00, 
-0x02, 
-0x00, 
-0x08, 
-0x00, 
-0x10, 
-0x78, 
-0x01, 
-0x00, 
-0x01, 
-0x60, 
-0x02, 
-0x50, 
-0x03, 
-0x04, 
-0x05, 
-0x0f, 
-0x19, 
-0xd6, 
-0x01, 
-0x40, 
-0x01, 
-0x60, 
-0x02, 
-0x50, 
-0x03, 
-0x04, 
-0x00, 
-0x1b, 
-0x36, 
-0xd6, 
-0x01, 
-0x40, 
-0x01, 
-0x60, 
-0x02, 
-0x50, 
-0x03, 
-0x04, 
-0x00, 
-0x23, 
-0x48, 
-0x78, 
-0x01, 
-0x00, 
-0x01, 
-0x60, 
-0x02, 
-0x50, 
-0x03, 
-0x04, 
-0x02, 
-0x08, 
-0x0d, 
-0xd6, 
-0x01, 
-0x40, 
-0x01, 
-0x60, 
-0x02, 
-0x50, 
-0x03, 
-0x04, 
-0x00, 
-0x0d, 
-0x1b, 
-0xd6, 
-0x01, 
-0x40, 
-0x01, 
-0x60, 
-0x02, 
-0x50, 
-0x03, 
-0x04, 
-0x00, 
-0x12, 
-0x24, 
-0xab, 
-0x0f, 
-0x00, 
-0x00, 
-0xab, 
-0x0a, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x2b, 
-0xff, 
-0xff, 
-0xff, 
-0x00, 
-0x02, 
-0x00, 
-0x00, 
-0xd5, 
-0x04, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x01, 
-0x00, 
-0x00, 
-0x40, 
-0x02, 
-0x00, 
-0x00, 
-0xab, 
-0x0f, 
-0x00, 
-0x00, 
-0xab, 
-0x0a, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0xab, 
-0xff, 
-0xff, 
-0xff, 
-0xd5, 
-0x00, 
-0x00, 
-0x00, 
-0x55, 
-0x02, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0x00, 
-0xa0, 
-0x00, 
-0x00, 
-0x00, 
-0x20, 
-0x01, 
-0x00, 
-0x00, 
-0xff, 
-0x01, 
-0xff, 
-0x05, 
-
-};
-
-uint8_t dppclib_u_ov2722[] =
-{
-	0x02,
-	0x03,
-	0x01,
-	0x88,
-	0x07,
-	0x40,
-	0x04,
-	0x02,
-	0x05,
-	0xfa,
-	0x44,
-	0x00,
-	0xca,
-	0xfe,
-	0x1a,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x9d,
-	0x00,
-	0x0d,
-	0x01,
-	0x01,
-	0xfb,
-	0xfe,
-	0x01,
-	0x00,
-	0x1f,
-	0x01,
-	0xf9,
-	0xff,
-	0x00,
-	0xf9,
-	0x95,
-	0x01,
-	0x0a,
-	0x01,
-	0x00,
-	0xfa,
-	0xfd,
-	0x01,
-	0x00,
-	0x17,
-	0x01,
-	0xfb,
-	0xff,
-	0x00,
-	0xfc,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7c,
-	0xff,
-	0xfd,
-	0xff,
-	0x00,
-	0x00,
-	0x02,
-	0xff,
-	0x01,
-	0xfd,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x02,
-	0x7a,
-	0xff,
-	0xfd,
-	0xff,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0xfa,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-
-};
-
-uint8_t dopclib_u_ov2722[] =
-{
-	0x02,
-	0x03,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x10,
-	0x00,
-	0x00,
-	0x01,
-	0x88,
-	0x07,
-	0x40,
-	0x04,
-	0x78,
-	0x00,
-	0x7a,
-	0x00,
-	0x5a,
-	0x00,
-	0x5c,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x10,
-	0x0c,
-	0x02,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x02,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x06,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfe,
-	0xc0,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0c,
-	0x0c,
-	0x08,
-	0x07,
-	0x06,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x02,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x06,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfc,
-	0x00,
-	0xff,
-	0xc0,
-	0xff,
-	0x00,
-	0x00,
-	0x20,
-	0x20,
-	0x15,
-	0x11,
-	0x0f,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x15,
-	0x1a,
-	0x21,
-	0x01,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x16,
-	0x1a,
-	0x00,
-	0x01,
-	0x01,
-	0x02,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x1a,
-	0x55,
-	0x01,
-	0x01,
-	0x01,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x1a,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x23,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x3c,
-	0x40,
-	0x50,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x03,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x3c,
-	0x40,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x03,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0c,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x04,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x28,
-	0x40,
-	0x69,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x3d,
-	0x40,
-	0x47,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x01,
-	0x04,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x3d,
-	0x40,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x03,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x75,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x16,
-	0x1a,
-	0x1c,
-	0x01,
-	0x01,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x19,
-	0x1a,
-	0x3e,
-	0x01,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x1a,
-	0x24,
-	0x01,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0c,
-	0x1a,
-	0x22,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x25,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x13,
-	0x26,
-	0x7f,
-	0x00,
-	0x00,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0d,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x02,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x3c,
-	0x40,
-	0x43,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x02,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x3f,
-	0x40,
-	0x5b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x02,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x34,
-	0x40,
-	0x52,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x02,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2d,
-	0x40,
-	0x4e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x02,
-	0x04,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x3d,
-	0x40,
-	0x42,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x02,
-	0x05,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x3f,
-	0x40,
-	0x50,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x02,
-	0x04,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x36,
-	0x40,
-	0x4d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x02,
-	0x04,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x48,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x39,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x27,
-	0x2d,
-	0x33,
-	0x2c,
-	0x16,
-	0x18,
-	0x16,
-	0x2d,
-	0x07,
-	0x1d,
-	0x2d,
-	0x33,
-	0x2c,
-	0x11,
-	0x15,
-	0x11,
-	0x2d,
-	0x04,
-	0x15,
-	0x23,
-	0x30,
-	0x27,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2a,
-	0x03,
-	0x10,
-	0x2b,
-	0x3a,
-	0x33,
-	0x09,
-	0x10,
-	0x09,
-	0x36,
-	0x01,
-	0x0d,
-	0x2a,
-	0x3b,
-	0x34,
-	0x04,
-	0x0e,
-	0x04,
-	0x38,
-	0x00,
-	0x39,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x33,
-	0x38,
-	0x32,
-	0x11,
-	0x15,
-	0x11,
-	0x33,
-	0x05,
-	0x37,
-	0x28,
-	0x34,
-	0x2e,
-	0x0e,
-	0x13,
-	0x0e,
-	0x31,
-	0x04,
-	0x2a,
-	0x21,
-	0x30,
-	0x28,
-	0x09,
-	0x10,
-	0x09,
-	0x2c,
-	0x03,
-	0x21,
-	0x21,
-	0x31,
-	0x2a,
-	0x04,
-	0x0e,
-	0x04,
-	0x30,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-
-
-struct yushan_reg_clib_t yushan_regs_clib_ov2722 = {
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u_ov2722[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u_ov2722),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u_ov2722[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u_ov2722),
-
-#if 1 
-	.dopclib_first_addr = 0x3bcc,
-#else
-	.dopclib_first_addr = 0x3bcc,
-#endif
-	.dopclib = &dopclib_u_ov2722[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u_ov2722),
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_reg_ov5693.c b/drivers/media/video/msm/rawchip/yushan_reg_ov5693.c
deleted file mode 100644
index 3ae2e84..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg_ov5693.c
+++ /dev/null
@@ -1,3236 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpclib_u_ov5693[] =
-{
-	0x01,
-	0x01,
-	0x01,
-	0x20,
-	0x0a,
-	0xa0,
-	0x07,
-	0x02,
-	0x10,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0xfc,
-	0x00,
-	0x10,
-	0x10,
-	0x10,
-	0x10,
-	0xfc,
-	0x00,
-	0x10,
-	0x10,
-	0x10,
-	0x10,
-	0xfc,
-	0x00,
-	0x10,
-	0x10,
-	0x10,
-	0x10,
-	0xfd,
-	0x00,
-	0x11,
-	0x11,
-	0x11,
-	0x11,
-	0xfd,
-	0x00,
-	0x11,
-	0x11,
-	0x11,
-	0x11,
-	0xfd,
-	0x00,
-	0x11,
-	0x11,
-	0x11,
-	0x11,
-	0xfd,
-	0x00,
-	0x11,
-	0x12,
-	0x13,
-	0x12,
-	0xfd,
-	0x00,
-	0x11,
-	0x12,
-	0x13,
-	0x12,
-	0xfd,
-	0x00,
-	0x11,
-	0x12,
-	0x13,
-	0x12,
-	0xfd,
-	0x00,
-	0x12,
-	0x13,
-	0x13,
-	0x13,
-	0xfd,
-	0x00,
-	0x12,
-	0x13,
-	0x13,
-	0x13,
-	0xfd,
-	0x00,
-	0x12,
-	0x13,
-	0x13,
-	0x13,
-	0xfd,
-	0x00,
-	0x12,
-	0x14,
-	0x13,
-	0x12,
-	0xfd,
-	0x00,
-	0x12,
-	0x14,
-	0x13,
-	0x12,
-	0xfd,
-	0x00,
-	0x12,
-	0x14,
-	0x13,
-	0x12,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x04,
-	0x0f,
-	0x1a,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x01,
-	0x1b,
-	0x35,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x04,
-	0x24,
-	0x43,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x02,
-	0x07,
-	0x0d,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x00,
-	0x0d,
-	0x1b,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x02,
-	0x12,
-	0x22,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x80,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x60,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x01,
-	0x00,
-	0x00,
-	0xc0,
-	0x01,
-	0x00,
-	0x00,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xab,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x55,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0xa0,
-	0x00,
-	0x00,
-	0x00,
-	0xe0,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0x01,
-	0xff,
-	0x05,
-};
-
-uint8_t dppclib_u_ov5693[] =
-{
-	0x01,
-	0x01,
-	0x01,
-	0x20,
-	0x0a,
-	0xa0,
-	0x07,
-	0x02,
-	0x05,
-	0xfa,
-	0x50,
-	0x00,
-	0xca,
-	0xfe,
-	0x1a,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0xfe,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xa6,
-	0x01,
-	0x17,
-	0x00,
-	0x00,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0xff,
-	0xf7,
-	0x00,
-	0x00,
-	0xfc,
-	0x95,
-	0x01,
-	0x0d,
-	0x00,
-	0x01,
-	0xfe,
-	0x00,
-	0x00,
-	0x00,
-	0x18,
-	0x00,
-	0xfd,
-	0x00,
-	0x00,
-	0xff,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7c,
-	0xfe,
-	0xfe,
-	0x00,
-	0x00,
-	0xfd,
-	0xff,
-	0x00,
-	0x00,
-	0xfd,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x7f,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0xfe,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-};
-
-uint8_t dopclib_u_ov5693[] =
-#if 1 
-{
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x10,
-	0x00,
-	0x00,
-	0x01,
-	0x20,
-	0x0a,
-	0xa0,
-	0x07,
-	0xa2,
-	0x00,
-	0xa4,
-	0x00,
-	0xa2,
-	0x00,
-	0xa4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x10,
-	0x0c,
-	0x02,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x01,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x02,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0xc0,
-	0xff,
-	0xc0,
-	0xff,
-	0x00,
-	0x00,
-	0x0d,
-	0x0d,
-	0x08,
-	0x07,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x01,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x02,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0xfc,
-	0x00,
-	0xff,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x21,
-	0x21,
-	0x15,
-	0x11,
-	0x0d,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x0a,
-	0x11,
-	0x0a,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x57,
-	0x1a,
-	0x13,
-	0x0a,
-	0x10,
-	0x0b,
-	0x06,
-	0x00,
-	0x05,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x1a,
-	0x13,
-	0x0c,
-	0x12,
-	0x15,
-	0x07,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x29,
-	0x1a,
-	0x14,
-	0x0b,
-	0x11,
-	0x15,
-	0x06,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x1a,
-	0x13,
-	0x01,
-	0x08,
-	0x04,
-	0x01,
-	0x01,
-	0x08,
-	0x15,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x65,
-	0x26,
-	0x13,
-	0x02,
-	0x07,
-	0x06,
-	0x03,
-	0x03,
-	0x07,
-	0x11,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x18,
-	0x03,
-	0x09,
-	0x0e,
-	0x04,
-	0x00,
-	0x09,
-	0x03,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x30,
-	0x26,
-	0x18,
-	0x02,
-	0x08,
-	0x07,
-	0x04,
-	0x04,
-	0x08,
-	0x19,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x30,
-	0x26,
-	0x18,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0b,
-	0x04,
-	0x04,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0x40,
-	0x2b,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x0f,
-	0x01,
-	0x0d,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x1d,
-	0x40,
-	0x5c,
-	0x00,
-	0x00,
-	0x11,
-	0x06,
-	0x0f,
-	0x01,
-	0x15,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x07,
-	0x1c,
-	0x40,
-	0x63,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x15,
-	0x01,
-	0x1a,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x0b,
-	0x26,
-	0x40,
-	0x4b,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x02,
-	0x08,
-	0x01,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x17,
-	0x40,
-	0x65,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x10,
-	0x01,
-	0x19,
-	0x01,
-	0x01,
-	0x06,
-	0x01,
-	0x06,
-	0x22,
-	0x40,
-	0x6f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x13,
-	0x01,
-	0x20,
-	0x00,
-	0x01,
-	0x09,
-	0x02,
-	0x0c,
-	0x23,
-	0x40,
-	0x7a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0x01,
-	0x20,
-	0x01,
-	0x02,
-	0x08,
-	0x02,
-	0x10,
-	0x27,
-	0x40,
-	0x55,
-	0x03,
-	0x06,
-	0x05,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0d,
-	0x03,
-	0x05,
-	0x09,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x3d,
-	0x1a,
-	0x10,
-	0x03,
-	0x06,
-	0x0a,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x1a,
-	0x0f,
-	0x03,
-	0x05,
-	0x09,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x38,
-	0x1a,
-	0x10,
-	0x01,
-	0x03,
-	0x01,
-	0x01,
-	0x01,
-	0x03,
-	0x08,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x4c,
-	0x26,
-	0x14,
-	0x01,
-	0x02,
-	0x05,
-	0x00,
-	0x00,
-	0x02,
-	0x09,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x1a,
-	0x01,
-	0x03,
-	0x06,
-	0x01,
-	0x01,
-	0x03,
-	0x0b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2a,
-	0x26,
-	0x1b,
-	0x01,
-	0x03,
-	0x06,
-	0x00,
-	0x00,
-	0x03,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2a,
-	0x26,
-	0x1b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x03,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x40,
-	0x35,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x04,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x40,
-	0x42,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x06,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2b,
-	0x40,
-	0x3e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x05,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2b,
-	0x40,
-	0x42,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x02,
-	0x05,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x14,
-	0x40,
-	0x52,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x04,
-	0x09,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x28,
-	0x40,
-	0x50,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x02,
-	0x0c,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x04,
-	0x2b,
-	0x40,
-	0x4d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x06,
-	0x0c,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x2c,
-	0x40,
-	0x49,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x37,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x28,
-	0x30,
-	0x34,
-	0x2d,
-	0x16,
-	0x18,
-	0x16,
-	0x2e,
-	0x07,
-	0x1e,
-	0x30,
-	0x34,
-	0x2d,
-	0x11,
-	0x15,
-	0x11,
-	0x2e,
-	0x04,
-	0x16,
-	0x26,
-	0x30,
-	0x28,
-	0x0e,
-	0x13,
-	0x0e,
-	0x29,
-	0x03,
-	0x10,
-	0x2c,
-	0x3a,
-	0x33,
-	0x09,
-	0x10,
-	0x09,
-	0x36,
-	0x01,
-	0x0d,
-	0x32,
-	0x3b,
-	0x34,
-	0x04,
-	0x0e,
-	0x04,
-	0x35,
-	0x00,
-	0x37,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x34,
-	0x3a,
-	0x33,
-	0x11,
-	0x15,
-	0x11,
-	0x33,
-	0x05,
-	0x38,
-	0x2c,
-	0x35,
-	0x2e,
-	0x0e,
-	0x13,
-	0x0e,
-	0x30,
-	0x04,
-	0x2a,
-	0x22,
-	0x31,
-	0x29,
-	0x09,
-	0x10,
-	0x09,
-	0x2c,
-	0x03,
-	0x21,
-	0x27,
-	0x32,
-	0x2a,
-	0x04,
-	0x0e,
-	0x04,
-	0x2c,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#else
-{
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x10,
-	0x00,
-	0x00,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x01,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x02,
-	0x03,
-	0x01,
-	0x02,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x06,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x05,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfe,
-	0xc0,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0b,
-	0x0b,
-	0x07,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x02,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x06,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x05,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfc,
-	0x40,
-	0xff,
-	0xa0,
-	0xff,
-	0x00,
-	0x00,
-	0x1e,
-	0x1e,
-	0x13,
-	0x10,
-	0x0d,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x27,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x38,
-	0x1a,
-	0x41,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x5f,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x5b,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x46,
-	0x40,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x4a,
-	0x40,
-	0x70,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x02,
-	0x02,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x56,
-	0x40,
-	0x6f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x43,
-	0x40,
-	0x59,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x43,
-	0x40,
-	0x61,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x04,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x42,
-	0x40,
-	0x68,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x06,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x4d,
-	0x40,
-	0x76,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x16,
-	0x1a,
-	0x1b,
-	0x01,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x15,
-	0x1a,
-	0x20,
-	0x01,
-	0x01,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x1a,
-	0x7f,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x1a,
-	0x69,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x02,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2f,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x02,
-	0x01,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x34,
-	0x40,
-	0x7d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x35,
-	0x40,
-	0x59,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x37,
-	0x40,
-	0x61,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x39,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x23,
-	0x2b,
-	0x31,
-	0x29,
-	0x16,
-	0x18,
-	0x16,
-	0x2b,
-	0x07,
-	0x1b,
-	0x2b,
-	0x31,
-	0x29,
-	0x11,
-	0x15,
-	0x11,
-	0x2b,
-	0x04,
-	0x13,
-	0x31,
-	0x3c,
-	0x35,
-	0x0e,
-	0x13,
-	0x0e,
-	0x37,
-	0x02,
-	0x0e,
-	0x25,
-	0x36,
-	0x31,
-	0x09,
-	0x10,
-	0x09,
-	0x35,
-	0x01,
-	0x0c,
-	0x29,
-	0x39,
-	0x32,
-	0x04,
-	0x0e,
-	0x04,
-	0x36,
-	0x00,
-	0x39,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x31,
-	0x36,
-	0x30,
-	0x11,
-	0x15,
-	0x11,
-	0x31,
-	0x05,
-	0x32,
-	0x27,
-	0x32,
-	0x2b,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2e,
-	0x04,
-	0x25,
-	0x2b,
-	0x3d,
-	0x36,
-	0x09,
-	0x10,
-	0x09,
-	0x3a,
-	0x02,
-	0x1e,
-	0x20,
-	0x30,
-	0x28,
-	0x04,
-	0x0e,
-	0x04,
-	0x2c,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#endif
-
-struct yushan_reg_clib_t yushan_regs_clib_ov5693 = {
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u_ov5693[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u_ov5693),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u_ov5693[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u_ov5693),
-
-#if 1 
-	.dopclib_first_addr = 0x3bcc,
-#else
-	.dopclib_first_addr = 0x3bcc,
-#endif
-	.dopclib = &dopclib_u_ov5693[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u_ov5693),
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_reg_ov8838.c b/drivers/media/video/msm/rawchip/yushan_reg_ov8838.c
deleted file mode 100644
index 5aaa09e..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg_ov8838.c
+++ /dev/null
@@ -1,3236 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpclib_u_ov8838[] =
-{
-	0x02,    
-	0x01,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x02,
-	0x10,
-	0x00,
-	0xf8,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x0b,
-	0x01,
-	0x47,
-	0x49,
-	0x45,
-	0x4a,
-	0x0b,
-	0x01,
-	0x47,
-	0x49,
-	0x45,
-	0x4a,
-	0x0b,
-	0x01,
-	0x47,
-	0x49,
-	0x45,
-	0x4a,
-	0x0a,
-	0x01,
-	0x46,
-	0x49,
-	0x44,
-	0x49,
-	0x0a,
-	0x01,
-	0x46,
-	0x49,
-	0x44,
-	0x49,
-	0x0a,
-	0x01,
-	0x46,
-	0x49,
-	0x44,
-	0x49,
-	0x0b,
-	0x01,
-	0x46,
-	0x49,
-	0x45,
-	0x48,
-	0x0b,
-	0x01,
-	0x46,
-	0x49,
-	0x45,
-	0x48,
-	0x0b,
-	0x01,
-	0x46,
-	0x49,
-	0x45,
-	0x48,
-	0x0a,
-	0x01,
-	0x46,
-	0x49,
-	0x43,
-	0x49,
-	0x0a,
-	0x01,
-	0x46,
-	0x49,
-	0x43,
-	0x49,
-	0x0a,
-	0x01,
-	0x46,
-	0x49,
-	0x43,
-	0x49,
-	0x0a,
-	0x01,
-	0x46,
-	0x48,
-	0x44,
-	0x47,
-	0x0a,
-	0x01,
-	0x46,
-	0x48,
-	0x44,
-	0x47,
-	0x0a,
-	0x01,
-	0x46,
-	0x48,
-	0x44,
-	0x47,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x0a,
-	0x13,
-	0x1c,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x0f,
-	0x23,
-	0x36,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x12,
-	0x2d,
-	0x47,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x05,
-	0x09,
-	0x0e,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x07,
-	0x11,
-	0x1b,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x09,
-	0x16,
-	0x24,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xd5,
-	0x00,
-	0x00,
-	0x00,
-	0xab,
-	0x02,
-	0x00,
-	0x00,
-	0x55,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x60,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x01,
-	0x00,
-	0x00,
-	0x20,
-	0x02,
-	0x00,
-	0x00,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x55,
-	0x00,
-	0x00,
-	0x00,
-	0x55,
-	0x01,
-	0x00,
-	0x00,
-	0x2b,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0xa0,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x01,
-	0x00,
-	0x00,
-	0xff,
-	0x01,
-	0xff,
-	0x05,
-};
-
-uint8_t dppclib_u_ov8838[] =
-{
-	0x02,
-	0x01,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x02,
-	0x05,
-	0xfa,
-	0x5e,
-	0x00,
-	0x39,
-	0xfe,
-	0x1a,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0xfd,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x83,
-	0xff,
-	0x02,
-	0x00,
-	0xff,
-	0xfc,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0xfe,
-	0x7a,
-	0x00,
-	0xfe,
-	0x00,
-	0x00,
-	0xfe,
-	0x00,
-	0x01,
-	0x00,
-	0xff,
-	0x01,
-	0x08,
-	0x01,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0xfe,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x7a,
-	0x03,
-	0xfe,
-	0x00,
-	0x01,
-	0xfd,
-	0xff,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x01,
-	0x00,
-	0x03,
-	0x7b,
-	0x01,
-	0xfe,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xfd,
-	0x01,
-	0x03,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-};
-
-uint8_t dopclib_u_ov8838[] =
-#if 1 
-{
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x10,
-	0x00,
-	0xf8,
-	0x00,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x02,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x02,
-	0x03,
-	0x01,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x05,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x05,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0xc0,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0c,
-	0x0c,
-	0x07,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x05,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x05,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0xfc,
-	0x40,
-	0xff,
-	0xc0,
-	0xff,
-	0x00,
-	0x00,
-	0x1e,
-	0x1e,
-	0x12,
-	0x0f,
-	0x0d,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x0b,
-	0x12,
-	0x0d,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x58,
-	0x1a,
-	0x14,
-	0x0b,
-	0x11,
-	0x0e,
-	0x08,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x1a,
-	0x13,
-	0x0b,
-	0x14,
-	0x10,
-	0x10,
-	0x00,
-	0x07,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x1a,
-	0x15,
-	0x0e,
-	0x14,
-	0x0e,
-	0x0e,
-	0x00,
-	0x07,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x1a,
-	0x15,
-	0x01,
-	0x08,
-	0x02,
-	0x01,
-	0x01,
-	0x08,
-	0x17,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x5d,
-	0x26,
-	0x14,
-	0x02,
-	0x07,
-	0x03,
-	0x04,
-	0x04,
-	0x07,
-	0x0e,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x32,
-	0x26,
-	0x1b,
-	0x05,
-	0x09,
-	0x04,
-	0x07,
-	0x07,
-	0x09,
-	0x0a,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x23,
-	0x26,
-	0x1a,
-	0x05,
-	0x0b,
-	0x08,
-	0x08,
-	0x08,
-	0x0b,
-	0x18,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x26,
-	0x1e,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x06,
-	0x03,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x15,
-	0x40,
-	0x1e,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0a,
-	0x07,
-	0x0a,
-	0x01,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x27,
-	0x40,
-	0x3b,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x0e,
-	0x09,
-	0x09,
-	0x03,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x31,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x12,
-	0x14,
-	0x12,
-	0x04,
-	0x09,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x40,
-	0x34,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0b,
-	0x03,
-	0x07,
-	0x01,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x5f,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x01,
-	0x0f,
-	0x02,
-	0x03,
-	0x05,
-	0x01,
-	0x08,
-	0x29,
-	0x40,
-	0x53,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x11,
-	0x0e,
-	0x0d,
-	0x04,
-	0x07,
-	0x07,
-	0x01,
-	0x00,
-	0x2a,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x10,
-	0x0b,
-	0x14,
-	0x04,
-	0x06,
-	0x06,
-	0x01,
-	0x05,
-	0x34,
-	0x40,
-	0x46,
-	0x03,
-	0x06,
-	0x05,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0e,
-	0x03,
-	0x06,
-	0x0b,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x36,
-	0x1a,
-	0x0f,
-	0x04,
-	0x07,
-	0x0f,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x1a,
-	0x13,
-	0x05,
-	0x07,
-	0x0d,
-	0x03,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x13,
-	0x01,
-	0x03,
-	0x01,
-	0x01,
-	0x01,
-	0x03,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x49,
-	0x26,
-	0x14,
-	0x01,
-	0x03,
-	0x05,
-	0x01,
-	0x01,
-	0x03,
-	0x0b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x1b,
-	0x01,
-	0x03,
-	0x08,
-	0x01,
-	0x01,
-	0x03,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x26,
-	0x1f,
-	0x01,
-	0x04,
-	0x08,
-	0x01,
-	0x01,
-	0x04,
-	0x13,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x26,
-	0x1d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x03,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x32,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x06,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x33,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x09,
-	0x08,
-	0x0c,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x32,
-	0x40,
-	0x37,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0a,
-	0x0a,
-	0x11,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x39,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x02,
-	0x05,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x25,
-	0x40,
-	0x48,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x06,
-	0x0a,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x2e,
-	0x40,
-	0x42,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x09,
-	0x0e,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x3b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x0b,
-	0x11,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x37,
-	0x40,
-	0x3c,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x3c,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x23,
-	0x27,
-	0x30,
-	0x29,
-	0x16,
-	0x18,
-	0x16,
-	0x2b,
-	0x07,
-	0x19,
-	0x24,
-	0x30,
-	0x28,
-	0x11,
-	0x15,
-	0x11,
-	0x2b,
-	0x04,
-	0x12,
-	0x2c,
-	0x3a,
-	0x33,
-	0x0e,
-	0x13,
-	0x0e,
-	0x37,
-	0x02,
-	0x0e,
-	0x24,
-	0x35,
-	0x30,
-	0x09,
-	0x10,
-	0x09,
-	0x33,
-	0x01,
-	0x0b,
-	0x25,
-	0x37,
-	0x31,
-	0x04,
-	0x0e,
-	0x04,
-	0x35,
-	0x00,
-	0x3c,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3d,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x2a,
-	0x35,
-	0x2f,
-	0x11,
-	0x15,
-	0x11,
-	0x31,
-	0x05,
-	0x2f,
-	0x22,
-	0x31,
-	0x29,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2d,
-	0x04,
-	0x23,
-	0x2a,
-	0x3b,
-	0x34,
-	0x09,
-	0x10,
-	0x09,
-	0x39,
-	0x02,
-	0x1c,
-	0x2b,
-	0x3d,
-	0x36,
-	0x04,
-	0x0e,
-	0x04,
-	0x3b,
-	0x01,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#else
-{
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x10,
-	0x00,
-	0xf8,
-	0x00,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x02,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x02,
-	0x03,
-	0x01,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x05,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x05,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0xc0,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0c,
-	0x0c,
-	0x07,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x05,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x05,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0xfc,
-	0x40,
-	0xff,
-	0xc0,
-	0xff,
-	0x00,
-	0x00,
-	0x1e,
-	0x1e,
-	0x12,
-	0x0f,
-	0x0d,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x0b,
-	0x12,
-	0x0d,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x58,
-	0x1a,
-	0x14,
-	0x0b,
-	0x11,
-	0x0e,
-	0x08,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x1a,
-	0x13,
-	0x0b,
-	0x14,
-	0x10,
-	0x10,
-	0x00,
-	0x07,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x1a,
-	0x15,
-	0x0e,
-	0x14,
-	0x0e,
-	0x0e,
-	0x00,
-	0x07,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x1a,
-	0x15,
-	0x01,
-	0x08,
-	0x02,
-	0x01,
-	0x01,
-	0x08,
-	0x17,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x5d,
-	0x26,
-	0x14,
-	0x02,
-	0x07,
-	0x03,
-	0x04,
-	0x04,
-	0x07,
-	0x0e,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x32,
-	0x26,
-	0x1b,
-	0x05,
-	0x09,
-	0x04,
-	0x07,
-	0x07,
-	0x09,
-	0x0a,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x23,
-	0x26,
-	0x1a,
-	0x05,
-	0x0b,
-	0x08,
-	0x08,
-	0x08,
-	0x0b,
-	0x18,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x26,
-	0x1e,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x06,
-	0x03,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x15,
-	0x40,
-	0x1e,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0a,
-	0x07,
-	0x0a,
-	0x01,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x27,
-	0x40,
-	0x3b,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x0e,
-	0x09,
-	0x09,
-	0x03,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x31,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x12,
-	0x14,
-	0x12,
-	0x04,
-	0x09,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x40,
-	0x34,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0b,
-	0x03,
-	0x07,
-	0x01,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x5f,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x01,
-	0x0f,
-	0x02,
-	0x03,
-	0x05,
-	0x01,
-	0x08,
-	0x29,
-	0x40,
-	0x53,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x11,
-	0x0e,
-	0x0d,
-	0x04,
-	0x07,
-	0x07,
-	0x01,
-	0x00,
-	0x2a,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x10,
-	0x0b,
-	0x14,
-	0x04,
-	0x06,
-	0x06,
-	0x01,
-	0x05,
-	0x34,
-	0x40,
-	0x46,
-	0x03,
-	0x06,
-	0x05,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0e,
-	0x03,
-	0x06,
-	0x0b,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x36,
-	0x1a,
-	0x0f,
-	0x04,
-	0x07,
-	0x0f,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x1a,
-	0x13,
-	0x05,
-	0x07,
-	0x0d,
-	0x03,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x13,
-	0x01,
-	0x03,
-	0x01,
-	0x01,
-	0x01,
-	0x03,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x49,
-	0x26,
-	0x14,
-	0x01,
-	0x03,
-	0x05,
-	0x01,
-	0x01,
-	0x03,
-	0x0b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x1b,
-	0x01,
-	0x03,
-	0x08,
-	0x01,
-	0x01,
-	0x03,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x26,
-	0x1f,
-	0x01,
-	0x04,
-	0x08,
-	0x01,
-	0x01,
-	0x04,
-	0x13,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x28,
-	0x26,
-	0x1d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x03,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x32,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x07,
-	0x06,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x33,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x09,
-	0x08,
-	0x0c,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x32,
-	0x40,
-	0x37,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0a,
-	0x0a,
-	0x11,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x39,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x02,
-	0x05,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x25,
-	0x40,
-	0x48,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x06,
-	0x0a,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x2e,
-	0x40,
-	0x42,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x09,
-	0x0e,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x3b,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x0b,
-	0x11,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x37,
-	0x40,
-	0x3c,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x3c,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x23,
-	0x27,
-	0x30,
-	0x29,
-	0x16,
-	0x18,
-	0x16,
-	0x2b,
-	0x07,
-	0x19,
-	0x24,
-	0x30,
-	0x28,
-	0x11,
-	0x15,
-	0x11,
-	0x2b,
-	0x04,
-	0x12,
-	0x2c,
-	0x3a,
-	0x33,
-	0x0e,
-	0x13,
-	0x0e,
-	0x37,
-	0x02,
-	0x0e,
-	0x24,
-	0x35,
-	0x30,
-	0x09,
-	0x10,
-	0x09,
-	0x33,
-	0x01,
-	0x0b,
-	0x25,
-	0x37,
-	0x31,
-	0x04,
-	0x0e,
-	0x04,
-	0x35,
-	0x00,
-	0x3c,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3d,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x2a,
-	0x35,
-	0x2f,
-	0x11,
-	0x15,
-	0x11,
-	0x31,
-	0x05,
-	0x2f,
-	0x22,
-	0x31,
-	0x29,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2d,
-	0x04,
-	0x23,
-	0x2a,
-	0x3b,
-	0x34,
-	0x09,
-	0x10,
-	0x09,
-	0x39,
-	0x02,
-	0x1c,
-	0x2b,
-	0x3d,
-	0x36,
-	0x04,
-	0x0e,
-	0x04,
-	0x3b,
-	0x01,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#endif
-
-struct yushan_reg_clib_t yushan_regs_clib_ov8838 = {
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u_ov8838[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u_ov8838),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u_ov8838[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u_ov8838),
-
-#if 1 
-	.dopclib_first_addr = 0x3bcc,
-#else
-	.dopclib_first_addr = 0x3bcc,
-#endif
-	.dopclib = &dopclib_u_ov8838[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u_ov8838),
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_reg_s5k3h2yx.c b/drivers/media/video/msm/rawchip/yushan_reg_s5k3h2yx.c
deleted file mode 100644
index ff237d2..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg_s5k3h2yx.c
+++ /dev/null
@@ -1,3238 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpclib_u_s5k3h2yx[] =
-{
-	0x02,
-	0x00,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x00,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xff,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x08,
-	0x01,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x12,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x04,
-	0x08,
-	0x0c,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x0a,
-	0x10,
-	0x17,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x0e,
-	0x17,
-	0x21,
-	0x78,
-	0x01,
-	0x00,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x02,
-	0x04,
-	0x06,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x05,
-	0x08,
-	0x0b,
-	0xd6,
-	0x01,
-	0x40,
-	0x01,
-	0x60,
-	0x02,
-	0x50,
-	0x03,
-	0x04,
-	0x07,
-	0x0c,
-	0x11,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x55,
-	0x01,
-	0x00,
-	0x00,
-	0xd5,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0xe0,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x01,
-	0x00,
-	0x00,
-	0xab,
-	0x0f,
-	0x00,
-	0x00,
-	0xab,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0xab,
-	0x00,
-	0x00,
-	0x00,
-	0xd5,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0xc0,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0x01,
-	0xff,
-	0x05,
-
-};
-
-uint8_t dppclib_u_s5k3h2yx[] =
-{
-	0x03,
-	0x00,
-	0x01,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0x00,
-	0x05,
-	0xfa,
-	0x7b,
-	0x00,
-	0x20,
-	0xfe,
-	0x1a,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x91,
-	0x02,
-	0x0a,
-	0xff,
-	0xff,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x0e,
-	0xff,
-	0xfb,
-	0x00,
-	0x00,
-	0xfc,
-	0x87,
-	0x03,
-	0x06,
-	0x00,
-	0xff,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x01,
-	0xff,
-	0x00,
-	0x00,
-	0xff,
-	0x80,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x74,
-	0x01,
-	0xfd,
-	0x01,
-	0x01,
-	0xfe,
-	0xff,
-	0x00,
-	0x00,
-	0xf7,
-	0x04,
-	0x07,
-	0x00,
-	0x00,
-	0x03,
-	0x78,
-	0x00,
-	0xfe,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xfa,
-	0x02,
-	0x05,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-
-};
-
-uint8_t dopclib_u_s5k3h2yx[] =
-#if 1 
-{
-	0x03,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x00,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x07,
-	0x0d,
-	0x13,
-	0x19,
-	0x1d,
-	0x1f,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x17,
-	0x14,
-	0x1f,
-	0x2e,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x07,
-	0x0f,
-	0x14,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0x80,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0d,
-	0x0d,
-	0x08,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfb,
-	0xc0,
-	0xfe,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x15,
-	0x10,
-	0x0c,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x07,
-	0x0d,
-	0x09,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x5d,
-	0x1a,
-	0x12,
-	0x11,
-	0x17,
-	0x19,
-	0x0d,
-	0x00,
-	0x08,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x16,
-	0x0e,
-	0x14,
-	0x17,
-	0x0b,
-	0x00,
-	0x07,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x23,
-	0x1a,
-	0x15,
-	0x0a,
-	0x10,
-	0x09,
-	0x10,
-	0x00,
-	0x05,
-	0x00,
-	0x03,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x1a,
-	0x15,
-	0x04,
-	0x09,
-	0x06,
-	0x01,
-	0x01,
-	0x09,
-	0x02,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x18,
-	0x07,
-	0x10,
-	0x0a,
-	0x09,
-	0x09,
-	0x10,
-	0x07,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x26,
-	0x20,
-	0x06,
-	0x0c,
-	0x08,
-	0x0d,
-	0x00,
-	0x06,
-	0x06,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x21,
-	0x06,
-	0x0c,
-	0x06,
-	0x0d,
-	0x00,
-	0x07,
-	0x05,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x06,
-	0x05,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x18,
-	0x40,
-	0x28,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x07,
-	0x09,
-	0x09,
-	0x01,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x40,
-	0x25,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x09,
-	0x08,
-	0x03,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x43,
-	0x40,
-	0x2f,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0b,
-	0x0b,
-	0x0e,
-	0x02,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x33,
-	0x40,
-	0x30,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x0b,
-	0x04,
-	0x09,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x64,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0b,
-	0x05,
-	0x08,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x16,
-	0x40,
-	0x35,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0d,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x03,
-	0x01,
-	0x00,
-	0x26,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x01,
-	0x14,
-	0x02,
-	0x03,
-	0x04,
-	0x01,
-	0x0f,
-	0x2a,
-	0x40,
-	0x3c,
-	0x02,
-	0x04,
-	0x03,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0d,
-	0x05,
-	0x07,
-	0x0f,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x30,
-	0x1a,
-	0x13,
-	0x05,
-	0x09,
-	0x0f,
-	0x05,
-	0x00,
-	0x03,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1f,
-	0x1a,
-	0x16,
-	0x04,
-	0x08,
-	0x0f,
-	0x04,
-	0x00,
-	0x03,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x14,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x01,
-	0x03,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x12,
-	0x02,
-	0x06,
-	0x0b,
-	0x01,
-	0x01,
-	0x06,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x4d,
-	0x26,
-	0x1c,
-	0x03,
-	0x07,
-	0x09,
-	0x04,
-	0x04,
-	0x07,
-	0x18,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x21,
-	0x02,
-	0x06,
-	0x0a,
-	0x03,
-	0x03,
-	0x06,
-	0x1a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x06,
-	0x03,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x24,
-	0x40,
-	0x39,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x09,
-	0x0b,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x4c,
-	0x40,
-	0x32,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x44,
-	0x40,
-	0x36,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x42,
-	0x40,
-	0x37,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0a,
-	0x03,
-	0x07,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x23,
-	0x40,
-	0x4e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x04,
-	0x06,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x3e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x3c,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x33,
-	0x40,
-	0x3e,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x29,
-	0x33,
-	0x35,
-	0x2f,
-	0x16,
-	0x18,
-	0x16,
-	0x2e,
-	0x07,
-	0x1f,
-	0x33,
-	0x35,
-	0x2e,
-	0x11,
-	0x15,
-	0x11,
-	0x2d,
-	0x04,
-	0x16,
-	0x2e,
-	0x31,
-	0x28,
-	0x0e,
-	0x13,
-	0x0e,
-	0x27,
-	0x03,
-	0x10,
-	0x34,
-	0x3a,
-	0x32,
-	0x09,
-	0x10,
-	0x09,
-	0x32,
-	0x01,
-	0x0b,
-	0x2f,
-	0x38,
-	0x32,
-	0x04,
-	0x0e,
-	0x04,
-	0x33,
-	0x00,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x38,
-	0x3b,
-	0x34,
-	0x11,
-	0x15,
-	0x11,
-	0x33,
-	0x05,
-	0x3a,
-	0x33,
-	0x36,
-	0x30,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2e,
-	0x04,
-	0x29,
-	0x2a,
-	0x31,
-	0x28,
-	0x09,
-	0x10,
-	0x09,
-	0x27,
-	0x03,
-	0x1d,
-	0x24,
-	0x30,
-	0x27,
-	0x04,
-	0x0e,
-	0x04,
-	0x28,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#else
-{
-	0x02,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0xd0,
-	0x0c,
-	0xa0,
-	0x09,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0xcc,
-	0x00,
-	0xce,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x02,
-	0x00,
-	0x10,
-	0x0c,
-	0x00,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x07,
-	0x0d,
-	0x13,
-	0x19,
-	0x1d,
-	0x1f,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x17,
-	0x14,
-	0x1f,
-	0x2e,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x07,
-	0x0f,
-	0x14,
-	0x1e,
-	0x00,
-	0x06,
-	0x04,
-	0x02,
-	0x04,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0x80,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0d,
-	0x0d,
-	0x08,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0xab,
-	0xfb,
-	0xc0,
-	0xfe,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x15,
-	0x10,
-	0x0c,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x07,
-	0x0d,
-	0x09,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x5d,
-	0x1a,
-	0x12,
-	0x11,
-	0x17,
-	0x19,
-	0x0d,
-	0x00,
-	0x08,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x16,
-	0x0e,
-	0x14,
-	0x17,
-	0x0b,
-	0x00,
-	0x07,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x23,
-	0x1a,
-	0x15,
-	0x0a,
-	0x10,
-	0x09,
-	0x10,
-	0x00,
-	0x05,
-	0x00,
-	0x03,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x1a,
-	0x15,
-	0x04,
-	0x09,
-	0x06,
-	0x01,
-	0x01,
-	0x09,
-	0x02,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x18,
-	0x07,
-	0x10,
-	0x0a,
-	0x09,
-	0x09,
-	0x10,
-	0x07,
-	0x07,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x26,
-	0x20,
-	0x06,
-	0x0c,
-	0x08,
-	0x0d,
-	0x00,
-	0x06,
-	0x06,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x21,
-	0x06,
-	0x0c,
-	0x06,
-	0x0d,
-	0x00,
-	0x07,
-	0x05,
-	0x06,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x2e,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x06,
-	0x05,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x18,
-	0x40,
-	0x28,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x07,
-	0x09,
-	0x09,
-	0x01,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x37,
-	0x40,
-	0x25,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x09,
-	0x08,
-	0x03,
-	0x09,
-	0x01,
-	0x00,
-	0x00,
-	0x43,
-	0x40,
-	0x2f,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0b,
-	0x0b,
-	0x0e,
-	0x02,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x33,
-	0x40,
-	0x30,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x0b,
-	0x04,
-	0x09,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x64,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0b,
-	0x05,
-	0x08,
-	0x00,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x16,
-	0x40,
-	0x35,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0d,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x03,
-	0x01,
-	0x00,
-	0x26,
-	0x40,
-	0x38,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x0e,
-	0x01,
-	0x14,
-	0x02,
-	0x03,
-	0x04,
-	0x01,
-	0x0f,
-	0x2a,
-	0x40,
-	0x3c,
-	0x02,
-	0x04,
-	0x03,
-	0x01,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1a,
-	0x0d,
-	0x05,
-	0x07,
-	0x0f,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x30,
-	0x1a,
-	0x13,
-	0x05,
-	0x09,
-	0x0f,
-	0x05,
-	0x00,
-	0x03,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1f,
-	0x1a,
-	0x16,
-	0x04,
-	0x08,
-	0x0f,
-	0x04,
-	0x00,
-	0x03,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x1a,
-	0x14,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x01,
-	0x03,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7f,
-	0x26,
-	0x12,
-	0x02,
-	0x06,
-	0x0b,
-	0x01,
-	0x01,
-	0x06,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x4d,
-	0x26,
-	0x1c,
-	0x03,
-	0x07,
-	0x09,
-	0x04,
-	0x04,
-	0x07,
-	0x18,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x21,
-	0x02,
-	0x06,
-	0x0a,
-	0x03,
-	0x03,
-	0x06,
-	0x1a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2c,
-	0x26,
-	0x20,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x06,
-	0x03,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x24,
-	0x40,
-	0x39,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x09,
-	0x0b,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x4c,
-	0x40,
-	0x32,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x44,
-	0x40,
-	0x36,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x08,
-	0x09,
-	0x0e,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x42,
-	0x40,
-	0x37,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x0a,
-	0x03,
-	0x07,
-	0x01,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x23,
-	0x40,
-	0x4e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x04,
-	0x06,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x30,
-	0x40,
-	0x3e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x08,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x3c,
-	0x40,
-	0x3c,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x09,
-	0x07,
-	0x0b,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x33,
-	0x40,
-	0x3e,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x29,
-	0x33,
-	0x35,
-	0x2f,
-	0x16,
-	0x18,
-	0x16,
-	0x2e,
-	0x07,
-	0x1f,
-	0x33,
-	0x35,
-	0x2e,
-	0x11,
-	0x15,
-	0x11,
-	0x2d,
-	0x04,
-	0x16,
-	0x2e,
-	0x31,
-	0x28,
-	0x0e,
-	0x13,
-	0x0e,
-	0x27,
-	0x03,
-	0x10,
-	0x34,
-	0x3a,
-	0x32,
-	0x09,
-	0x10,
-	0x09,
-	0x32,
-	0x01,
-	0x0b,
-	0x2f,
-	0x38,
-	0x32,
-	0x04,
-	0x0e,
-	0x04,
-	0x33,
-	0x00,
-	0x33,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x38,
-	0x3b,
-	0x34,
-	0x11,
-	0x15,
-	0x11,
-	0x33,
-	0x05,
-	0x3a,
-	0x33,
-	0x36,
-	0x30,
-	0x0e,
-	0x13,
-	0x0e,
-	0x2e,
-	0x04,
-	0x29,
-	0x2a,
-	0x31,
-	0x28,
-	0x09,
-	0x10,
-	0x09,
-	0x27,
-	0x03,
-	0x1d,
-	0x24,
-	0x30,
-	0x27,
-	0x04,
-	0x0e,
-	0x04,
-	0x28,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-
-};
-#endif
-
-struct yushan_reg_clib_t yushan_regs_clib_s5k3h2yx = {
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u_s5k3h2yx[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u_s5k3h2yx),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u_s5k3h2yx[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u_s5k3h2yx),
-
-#if 1 
-	.dopclib_first_addr = 0x3bcc,
-#else
-	.dopclib_first_addr = 0x3bcc,
-#endif
-	.dopclib = &dopclib_u_s5k3h2yx[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u_s5k3h2yx),
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_reg_s5k6a2ya.c b/drivers/media/video/msm/rawchip/yushan_reg_s5k6a2ya.c
deleted file mode 100644
index 7dfde38..0000000
--- a/drivers/media/video/msm/rawchip/yushan_reg_s5k6a2ya.c
+++ /dev/null
@@ -1,2150 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpclib_u_s5k6a2ya[] =
-{
-		0x02,
-		0x01,
-		0x01,
-		0xc0,
-		0x05,
-		0x50,
-		0x04,
-		0x00,
-		0x20,
-		0x00,
-		0x00,
-		0x02,
-		0x01,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x20,
-		0x00,
-		0x00,
-		0x01,
-		0x00,
-		0x02,
-		0x00,
-		0x04,
-		0x00,
-		0x08,
-		0x00,
-		0x10,
-		0x80,
-		0x00,
-		0x00,
-		0x01,
-		0x00,
-		0x02,
-		0x00,
-		0x00,
-		0x00,
-		0x01,
-		0x00,
-		0x00,
-		0x80,
-		0x00,
-		0x00,
-		0x00,
-		0x40,
-		0x00,
-		0x00,
-		0x00,
-		0x20,
-		0x00,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x43,
-		0x43,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x43,
-		0x43,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x43,
-		0x43,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x42,
-		0x43,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x42,
-		0x43,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x42,
-		0x43,
-		0x09,
-		0x01,
-		0x43,
-		0x43,
-		0x43,
-		0x43,
-		0x09,
-		0x01,
-		0x43,
-		0x43,
-		0x43,
-		0x43,
-		0x09,
-		0x01,
-		0x43,
-		0x43,
-		0x43,
-		0x43,
-		0x09,
-		0x01,
-		0x43,
-		0x43,
-		0x43,
-		0x44,
-		0x09,
-		0x01,
-		0x43,
-		0x43,
-		0x43,
-		0x44,
-		0x09,
-		0x01,
-		0x43,
-		0x43,
-		0x43,
-		0x44,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x42,
-		0x43,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x42,
-		0x43,
-		0x09,
-		0x01,
-		0x42,
-		0x43,
-		0x42,
-		0x43,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x01,
-		0x00,
-		0x02,
-		0x00,
-		0x08,
-		0x00,
-		0x10,
-		0x78,
-		0x01,
-		0x00,
-		0x01,
-		0x60,
-		0x02,
-		0x50,
-		0x03,
-		0x04,
-		0x09,
-		0x0e,
-		0x13,
-		0xd6,
-		0x01,
-		0x40,
-		0x01,
-		0x60,
-		0x02,
-		0x50,
-		0x03,
-		0x04,
-		0x10,
-		0x1c,
-		0x27,
-		0xd6,
-		0x01,
-		0x40,
-		0x01,
-		0x60,
-		0x02,
-		0x50,
-		0x03,
-		0x04,
-		0x17,
-		0x27,
-		0x36,
-		0x78,
-		0x01,
-		0x00,
-		0x01,
-		0x60,
-		0x02,
-		0x50,
-		0x03,
-		0x04,
-		0x04,
-		0x07,
-		0x0a,
-		0xd6,
-		0x01,
-		0x40,
-		0x01,
-		0x60,
-		0x02,
-		0x50,
-		0x03,
-		0x04,
-		0x08,
-		0x0e,
-		0x13,
-		0xd6,
-		0x01,
-		0x40,
-		0x01,
-		0x60,
-		0x02,
-		0x50,
-		0x03,
-		0x04,
-		0x0b,
-		0x13,
-		0x1b,
-		0xab,
-		0x0f,
-		0x00,
-		0x00,
-		0xab,
-		0x0a,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x2b,
-		0x01,
-		0x00,
-		0x00,
-		0x55,
-		0x02,
-		0x00,
-		0x00,
-		0x55,
-		0x03,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0xe0,
-		0x00,
-		0x00,
-		0x00,
-		0x60,
-		0x01,
-		0x00,
-		0x00,
-		0xe0,
-		0x01,
-		0x00,
-		0x00,
-		0xab,
-		0x0f,
-		0x00,
-		0x00,
-		0xab,
-		0x0a,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0xab,
-		0x00,
-		0x00,
-		0x00,
-		0x2b,
-		0x01,
-		0x00,
-		0x00,
-		0x80,
-		0x01,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x60,
-		0x00,
-		0x00,
-		0x00,
-		0xa0,
-		0x00,
-		0x00,
-		0x00,
-		0x00,
-		0x01,
-		0x00,
-		0x00,
-		0xff,
-		0x01,
-		0xff,
-		0x05,
-};
-
-uint8_t dppclib_u_s5k6a2ya[] =
-{
-	0x02,
-	0x01,
-	0x01,
-	0xc0,
-	0x05,
-	0x50,
-	0x04,
-	0x00,
-	0x05,
-	0xfa,
-	0x36,
-	0x00,
-	0xca,
-	0xfe,
-	0x1a,
-	0x01,
-	0x02,
-	0x05,
-	0x80,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0xff,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0xa5,
-	0xfe,
-	0x11,
-	0x00,
-	0xfd,
-	0x02,
-	0x01,
-	0xff,
-	0x00,
-	0x1c,
-	0xff,
-	0xef,
-	0xff,
-	0x00,
-	0xf7,
-	0x99,
-	0x00,
-	0x0c,
-	0x00,
-	0xfd,
-	0x02,
-	0x01,
-	0xff,
-	0x00,
-	0x12,
-	0xff,
-	0xf5,
-	0xff,
-	0x00,
-	0xfa,
-	0x80,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x7b,
-	0x02,
-	0xfd,
-	0x00,
-	0x00,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0xfb,
-	0xff,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x7a,
-	0x01,
-	0xfd,
-	0x00,
-	0x00,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0xfb,
-	0xff,
-	0x02,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-};
-
-uint8_t dopclib_u_s5k6a2ya[] =
-{
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x20,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x01,
-	0x00,
-	0x08,
-	0x20,
-	0x00,
-	0x00,
-	0x02,
-	0xc0,
-	0x05,
-	0x50,
-	0x04,
-	0x5c,
-	0x00,
-	0x5e,
-	0x00,
-	0x5c,
-	0x00,
-	0x5e,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x0c,
-	0x00,
-	0xe6,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x65,
-	0x43,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x43,
-	0x21,
-	0x10,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x11,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x22,
-	0x21,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x00,
-	0x03,
-	0x02,
-	0x01,
-	0x0b,
-	0x38,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x1e,
-	0x00,
-	0x06,
-	0x0e,
-	0x08,
-	0x08,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x33,
-	0x9f,
-	0x52,
-	0x9f,
-	0x43,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0a,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x66,
-	0x9f,
-	0x4d,
-	0x9f,
-	0x76,
-	0x0c,
-	0x00,
-	0x14,
-	0x00,
-	0x3c,
-	0x00,
-	0x10,
-	0x27,
-	0x04,
-	0x00,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x64,
-	0x00,
-	0x4c,
-	0x04,
-	0x00,
-	0x01,
-	0x12,
-	0x12,
-	0x0d,
-	0x06,
-	0x10,
-	0x84,
-	0x03,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x04,
-	0x03,
-	0x04,
-	0x03,
-	0x02,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x07,
-	0x0c,
-	0x11,
-	0x06,
-	0x0f,
-	0x11,
-	0x06,
-	0x14,
-	0x11,
-	0x05,
-	0x1a,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x80,
-	0x02,
-	0x23,
-	0x23,
-	0x7f,
-	0x1d,
-	0x1d,
-	0x7f,
-	0x05,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xb8,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xc4,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x01,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x01,
-	0x03,
-	0x01,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x04,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfe,
-	0x80,
-	0xff,
-	0xe0,
-	0xff,
-	0x00,
-	0x00,
-	0x0d,
-	0x0d,
-	0x08,
-	0x06,
-	0x05,
-	0x80,
-	0x02,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x00,
-	0x04,
-	0x05,
-	0x03,
-	0x04,
-	0x00,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x01,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x04,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x55,
-	0xfb,
-	0xc0,
-	0xfe,
-	0xa0,
-	0xff,
-	0x00,
-	0x00,
-	0x23,
-	0x23,
-	0x15,
-	0x10,
-	0x0d,
-	0x65,
-	0x54,
-	0x33,
-	0x32,
-	0x65,
-	0x43,
-	0x32,
-	0x22,
-	0x54,
-	0x33,
-	0x22,
-	0x11,
-	0x54,
-	0x32,
-	0x21,
-	0x11,
-	0x43,
-	0x32,
-	0x11,
-	0x10,
-	0x43,
-	0x22,
-	0x11,
-	0x00,
-	0x01,
-	0x01,
-	0x01,
-	0x0f,
-	0x05,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x1a,
-	0x00,
-	0x01,
-	0x01,
-	0x0b,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x1a,
-	0x00,
-	0x01,
-	0x01,
-	0x0a,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x1a,
-	0x25,
-	0x01,
-	0x01,
-	0x07,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x1a,
-	0x0f,
-	0x00,
-	0x00,
-	0x17,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x06,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x26,
-	0x40,
-	0x00,
-	0x01,
-	0x00,
-	0x04,
-	0x05,
-	0x02,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x26,
-	0x11,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x0a,
-	0x01,
-	0x06,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x19,
-	0x40,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x08,
-	0x00,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x15,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x07,
-	0x02,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0b,
-	0x40,
-	0x61,
-	0x00,
-	0x00,
-	0x00,
-	0x03,
-	0x06,
-	0x00,
-	0x03,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x1a,
-	0x40,
-	0x30,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x09,
-	0x01,
-	0x05,
-	0x00,
-	0x01,
-	0x02,
-	0x00,
-	0x00,
-	0x0f,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x07,
-	0x01,
-	0x02,
-	0x01,
-	0x01,
-	0x02,
-	0x01,
-	0x00,
-	0x1a,
-	0x40,
-	0x66,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x07,
-	0x01,
-	0x03,
-	0x01,
-	0x01,
-	0x02,
-	0x01,
-	0x00,
-	0x1c,
-	0x40,
-	0x46,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x06,
-	0x00,
-	0x03,
-	0x01,
-	0x00,
-	0x02,
-	0x01,
-	0x04,
-	0x1f,
-	0x40,
-	0x34,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x1a,
-	0x42,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x1a,
-	0x22,
-	0x01,
-	0x01,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x1a,
-	0x1d,
-	0x01,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0c,
-	0x1a,
-	0x18,
-	0x00,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x0a,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x26,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x04,
-	0x02,
-	0x03,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x26,
-	0x25,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x05,
-	0x01,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x27,
-	0x40,
-	0x58,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x05,
-	0x02,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x25,
-	0x40,
-	0x4a,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x05,
-	0x02,
-	0x04,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x26,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x05,
-	0x04,
-	0x05,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x2b,
-	0x40,
-	0x3f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x06,
-	0x01,
-	0x04,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x2b,
-	0x40,
-	0x50,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x01,
-	0x03,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x29,
-	0x40,
-	0x46,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x02,
-	0x04,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x2b,
-	0x40,
-	0x41,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x05,
-	0x03,
-	0x05,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x2f,
-	0x40,
-	0x3f,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x14,
-	0x2b,
-	0x3f,
-	0x14,
-	0x1b,
-	0x3f,
-	0x3f,
-	0x0f,
-	0x3f,
-	0x3f,
-	0x20,
-	0x14,
-	0x00,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x00,
-	0xc0,
-	0xfa,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x40,
-	0x07,
-	0x00,
-	0x00,
-	0x15,
-	0x15,
-	0x00,
-	0x1c,
-	0x1c,
-	0x39,
-	0x34,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x2a,
-	0x33,
-	0x36,
-	0x30,
-	0x16,
-	0x18,
-	0x16,
-	0x2f,
-	0x07,
-	0x20,
-	0x33,
-	0x36,
-	0x30,
-	0x11,
-	0x15,
-	0x11,
-	0x2f,
-	0x04,
-	0x17,
-	0x2c,
-	0x31,
-	0x29,
-	0x0e,
-	0x13,
-	0x0e,
-	0x29,
-	0x03,
-	0x11,
-	0x34,
-	0x3a,
-	0x33,
-	0x09,
-	0x10,
-	0x09,
-	0x33,
-	0x01,
-	0x0c,
-	0x2d,
-	0x3a,
-	0x33,
-	0x04,
-	0x0e,
-	0x04,
-	0x35,
-	0x00,
-	0x34,
-	0x80,
-	0x01,
-	0x00,
-	0x03,
-	0x00,
-	0x06,
-	0x00,
-	0x0c,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x16,
-	0x18,
-	0x16,
-	0x3f,
-	0x07,
-	0x3f,
-	0x38,
-	0x3c,
-	0x34,
-	0x11,
-	0x15,
-	0x11,
-	0x34,
-	0x05,
-	0x3c,
-	0x32,
-	0x36,
-	0x30,
-	0x0e,
-	0x13,
-	0x0e,
-	0x30,
-	0x04,
-	0x2b,
-	0x2a,
-	0x31,
-	0x28,
-	0x09,
-	0x10,
-	0x09,
-	0x28,
-	0x03,
-	0x1e,
-	0x23,
-	0x31,
-	0x28,
-	0x04,
-	0x0e,
-	0x04,
-	0x2b,
-	0x02,
-	0x40,
-	0x00,
-	0x02,
-	0x00,
-	0x06,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-};
-
-
-struct yushan_reg_clib_t yushan_regs_clib_s5k6a2ya = {
-	.pdpclib_first_addr = 0x0dd7,
-	.pdpclib = &pdpclib_u_s5k6a2ya[0],
-	.pdpclib_size = ARRAY_SIZE(pdpclib_u_s5k6a2ya),
-
-	.dppclib_first_addr = 0xbe27,
-	.dppclib = &dppclib_u_s5k6a2ya[0],
-	.dppclib_size = ARRAY_SIZE(dppclib_u_s5k6a2ya),
-
-	.dopclib_first_addr = 0x3bcc,
-	.dopclib = &dopclib_u_s5k6a2ya[0],
-	.dopclib_size = ARRAY_SIZE(dopclib_u_s5k6a2ya),
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_registermap.h b/drivers/media/video/msm/rawchip/yushan_registermap.h
deleted file mode 100644
index 39cac6f..0000000
--- a/drivers/media/video/msm/rawchip/yushan_registermap.h
+++ /dev/null
@@ -1,405 +0,0 @@
-/*   Header file is automatically generated by Spirit2RegBank (version 3.14) at 06/08/11 on 12:16:54
-*
-*    STMicroelectronics reserves the rights to make changes without
-*    notice at any time. STMicroelectronics makes no warranty,
-*    expressed, implied or statutary, including but  limited to any
-*    implied warranty or merchantability or fitness for any particular
-*    purpose, or that the use will not infringe any third party patent,
-*    copyright or trademark. STMicroelectronics shall not be liable
-*    for any loss or damage arising from the use of its libraries or
-*    software.
-*
-*    This file may be used and  copied  with the  inclusion of the  above
-*    copyright notice. This file or any other copies thereof may not be
-*    provided or otherwise made available to  any other person. No title to
-*    and ownership of this file is hereby transferred.} */
-
-#ifndef __yushan_registermap_H
-#define __yushan_registermap_H
-
-#define         YUSHAN_CLK_DIV_FACTOR	0x0
-#define         YUSHAN_CLK_DIV_FACTOR_2	0x4
-#define         YUSHAN_CLK_CTRL	0x8
-#define         YUSHAN_RESET_CTRL	0xc
-#define         YUSHAN_PLL_CTRL_MAIN	0x10
-#define         YUSHAN_PLL_LOOP_OUT_DF	0x14
-#define         YUSHAN_PLL_SSCG_CTRL	0x18
-#define         YUSHAN_HOST_IF_SPI_CTRL	0x800
-#define         YUSHAN_HOST_IF_SPI_DEVADDR	0x804
-#define         YUSHAN_HOST_IF_SPI_BASE_ADDRESS	0x808
-#define         YUSHAN_ITM_CSI2RX_STATUS	0xc00
-#define         YUSHAN_ITM_CSI2RX_EN_STATUS	0xc04
-#define         YUSHAN_ITM_CSI2RX_STATUS_BCLR	0xc08
-#define         YUSHAN_ITM_CSI2RX_STATUS_BSET	0xc0c
-#define         YUSHAN_ITM_CSI2RX_EN_STATUS_BCLR	0xc10
-#define         YUSHAN_ITM_CSI2RX_EN_STATUS_BSET	0xc14
-#define         YUSHAN_ITM_PDP_STATUS	0xc18
-#define         YUSHAN_ITM_PDP_EN_STATUS	0xc1c
-#define         YUSHAN_ITM_PDP_STATUS_BCLR	0xc20
-#define         YUSHAN_ITM_PDP_STATUS_BSET	0xc24
-#define         YUSHAN_ITM_PDP_EN_STATUS_BCLR	0xc28
-#define         YUSHAN_ITM_PDP_EN_STATUS_BSET	0xc2c
-#define         YUSHAN_ITM_DPP_STATUS	0xc30
-#define         YUSHAN_ITM_DPP_EN_STATUS	0xc34
-#define         YUSHAN_ITM_DPP_STATUS_BCLR	0xc38
-#define         YUSHAN_ITM_DPP_STATUS_BSET	0xc3c
-#define         YUSHAN_ITM_DPP_EN_STATUS_BCLR	0xc40
-#define         YUSHAN_ITM_DPP_EN_STATUS_BSET	0xc44
-#define         YUSHAN_ITM_DOP7_STATUS	0xc48
-#define         YUSHAN_ITM_DOP7_EN_STATUS	0xc4c
-#define         YUSHAN_ITM_DOP7_STATUS_BCLR	0xc50
-#define         YUSHAN_ITM_DOP7_STATUS_BSET	0xc54
-#define         YUSHAN_ITM_DOP7_EN_STATUS_BCLR	0xc58
-#define         YUSHAN_ITM_DOP7_EN_STATUS_BSET	0xc5c
-#define         YUSHAN_ITM_CSI2TX_STATUS	0xc60
-#define         YUSHAN_ITM_CSI2TX_EN_STATUS	0xc64
-#define         YUSHAN_ITM_CSI2TX_STATUS_BCLR	0xc68
-#define         YUSHAN_ITM_CSI2TX_STATUS_BSET	0xc6c
-#define         YUSHAN_ITM_CSI2TX_EN_STATUS_BCLR	0xc70
-#define         YUSHAN_ITM_CSI2TX_EN_STATUS_BSET	0xc74
-#define         YUSHAN_ITM_RX_PHY_STATUS	0xc78
-#define         YUSHAN_ITM_RX_PHY_EN_STATUS	0xc7c
-#define         YUSHAN_ITM_RX_PHY_STATUS_BCLR	0xc80
-#define         YUSHAN_ITM_RX_PHY_STATUS_BSET	0xc84
-#define         YUSHAN_ITM_RX_PHY_EN_STATUS_BCLR	0xc88
-#define         YUSHAN_ITM_RX_PHY_EN_STATUS_BSET	0xc8c
-#define         YUSHAN_ITM_TX_PHY_STATUS	0xc90
-#define         YUSHAN_ITM_TX_PHY_EN_STATUS	0xc94
-#define         YUSHAN_ITM_TX_PHY_STATUS_BCLR	0xc98
-#define         YUSHAN_ITM_TX_PHY_STATUS_BSET	0xc9c
-#define         YUSHAN_ITM_TX_PHY_EN_STATUS_BCLR	0xca0
-#define         YUSHAN_ITM_TX_PHY_EN_STATUS_BSET	0xca4
-#define         YUSHAN_ITM_IDP_STATUS	0xca8
-#define         YUSHAN_ITM_IDP_EN_STATUS	0xcac
-#define         YUSHAN_ITM_IDP_STATUS_BCLR	0xcb0
-#define         YUSHAN_ITM_IDP_STATUS_BSET	0xcb4
-#define         YUSHAN_ITM_IDP_EN_STATUS_BCLR	0xcb8
-#define         YUSHAN_ITM_IDP_EN_STATUS_BSET	0xcbc
-#define         YUSHAN_ITM_RX_CHAR_STATUS	0xcc0
-#define         YUSHAN_ITM_RX_CHAR_EN_STATUS	0xcc4
-#define         YUSHAN_ITM_RX_CHAR_STATUS_BCLR	0xcc8
-#define         YUSHAN_ITM_RX_CHAR_STATUS_BSET	0xccc
-#define         YUSHAN_ITM_RX_CHAR_EN_STATUS_BCLR	0xcd0
-#define         YUSHAN_ITM_RX_CHAR_EN_STATUS_BSET	0xcd4
-#define         YUSHAN_ITM_LBE_POST_DXO_STATUS	0xcd8
-#define         YUSHAN_ITM_LBE_POST_DXO_EN_STATUS	0xcdc
-#define         YUSHAN_ITM_LBE_POST_DXO_STATUS_BCLR	0xce0
-#define         YUSHAN_ITM_LBE_POST_DXO_STATUS_BSET 	0xce4
-#define         YUSHAN_ITM_LBE_POST_DXO_EN_STATUS_BCLR	0xce8
-#define         YUSHAN_ITM_LBE_POST_DXO_EN_STATUS_BSET	0xcec
-#define         YUSHAN_ITM_SYS_DOMAIN_STATUS	0xcf0
-#define         YUSHAN_ITM_SYS_DOMAIN_EN_STATUS	0xcf4
-#define         YUSHAN_ITM_SYS_DOMAIN_STATUS_BCLR	0xcf8
-#define         YUSHAN_ITM_SYS_DOMAIN_STATUS_BSET	0xcfc
-#define         YUSHAN_ITM_SYS_DOMAIN_EN_STATUS_BCLR	0xd00
-#define         YUSHAN_ITM_SYS_DOMAIN_EN_STATUS_BSET	0xd04
-#define         YUSHAN_ITM_ITPOINT_STATUS	0xd08
-#define         YUSHAN_ITM_ITPOINT_EN_STATUS	0xd0c
-#define         YUSHAN_ITM_ITPOINT_STATUS_BCLR	0xd10
-#define         YUSHAN_ITM_ITPOINT_STATUS_BSET	0xd14
-#define         YUSHAN_ITM_ITPOINT_EN_STATUS_BCLR	0xd18
-#define         YUSHAN_ITM_ITPOINT_EN_STATUS_BSET	0xd1c
-#define         YUSHAN_ITM_P2W_UFLOW_STATUS	0xd20
-#define         YUSHAN_ITM_P2W_UFLOW_EN_STATUS	0xd24
-#define         YUSHAN_ITM_P2W_UFLOW_STATUS_BCLR	0xd28
-#define         YUSHAN_ITM_P2W_UFLOW_STATUS_BSET	0xd2c
-#define         YUSHAN_ITM_P2W_UFLOW_EN_STATUS_BCLR	0xd30
-#define         YUSHAN_ITM_P2W_UFLOW_EN_STATUS_BSET	0xd34
-#define         YUSHAN_IOR_NVM_CTRL 0x1000
-#define         YUSHAN_IOR_NVM_STATUS                                                     0x1004
-#define         YUSHAN_IOR_NVM_DATA_WORD_0                                                0x1008
-#define         YUSHAN_IOR_NVM_DATA_WORD_1                                                0x100c
-#define         YUSHAN_IOR_NVM_DATA_WORD_2                                                0x1010
-#define         YUSHAN_IOR_NVM_DATA_WORD_3                                                0x1014
-#define         YUSHAN_IOR_NVM_HYST                                                       0x1018
-#define         YUSHAN_IOR_NVM_PDN                                                        0x101c
-#define         YUSHAN_IOR_NVM_PUN                                                        0x1020
-#define         YUSHAN_IOR_NVM_LOWEMI                                                     0x1024
-#define         YUSHAN_IOR_NVM_PAD_IN                                                     0x1028
-#define         YUSHAN_IOR_NVM_RATIO_PAD                                                  0x102c
-#define         YUSHAN_IOR_NVM_SEND_ITR_PAD1                                              0x1030
-#define         YUSHAN_IOR_NVM_INTR_STATUS                                                0x1034
-#define         YUSHAN_IOR_NVM_LDO_STS_REG                                                0x1038
-#define		 YUSHAN_PRIVATE_TEST_LDO_CTRL											   0x1405
-#define		 YUSHAN_PRIVATE_TEST_LDO_NVM_CTRL										   0x1406
-#define         YUSHAN_T1_DMA_REG_ENABLE                                                  0x1a00
-#define         YUSHAN_T1_DMA_REG_VERSION                                                 0x1a04
-#define         YUSHAN_T1_DMA_REG_STATUS                                                  0x1a08
-#define         YUSHAN_T1_DMA_REG_REFILL_ELT_NB                                           0x1a0c
-#define         YUSHAN_T1_DMA_REG_REFILL_ERROR                                            0x1a10
-#define         YUSHAN_T1_DMA_REG_DFV_CONTROL                                             0x1a14
-#define         YUSHAN_T1_DMA_MEM_PAGE                                                    0x1c00
-#define         YUSHAN_T1_DMA_MEM_LOWER_ELT                                               0x1c04
-#define         YUSHAN_T1_DMA_MEM_UPPER_ELT                                               0x1c08
-#define         YUSHAN_MIPI_RX_ENABLE                                                     0x2000
-#define         YUSHAN_MIPI_RX_UIX4                                                       0x2004
-#define         YUSHAN_MIPI_RX_SWAP_PINS                                                  0x2008
-#define         YUSHAN_MIPI_RX_INVERT_HS                                                  0x200c
-#define         YUSHAN_MIPI_RX_STOP_STATE                                                 0x2010
-#define         YUSHAN_MIPI_RX_ULP_STATE                                                  0x2014
-#define         YUSHAN_MIPI_RX_CLK_ACTIVE                                                 0x2018
-#define         YUSHAN_MIPI_RX_FORCE_RX_MODE_DL                                           0x201c
-#define         YUSHAN_MIPI_RX_TEST_RESERVED                                              0x2020
-#define         YUSHAN_MIPI_RX_ESC_DL_STS                                                 0x2024
-#define         YUSHAN_MIPI_RX_EOT_BYPASS                                                 0x2028
-#define         YUSHAN_MIPI_RX_HSRX_SHIFT_CL                                              0x202c
-#define         YUSHAN_MIPI_RX_HS_RX_SHIFT_DL                                             0x2030
-#define         YUSHAN_MIPI_RX_VIL_CL                                                     0x2034
-#define         YUSHAN_MIPI_RX_VIL_DL                                                     0x2038
-#define         YUSHAN_MIPI_RX_OVERSAMPLE_BYPASS                                          0x203c
-#define         YUSHAN_MIPI_RX_OVERSAMPLE_FLAG1                                           0x2040
-#define         YUSHAN_MIPI_RX_SKEW_OFFSET_1                                              0x2044
-#define         YUSHAN_MIPI_RX_SKEW_OFFSET_2                                              0x2048
-#define         YUSHAN_MIPI_RX_SKEW_OFFSET_3                                              0x204c
-#define         YUSHAN_MIPI_RX_SKEW_OFFSET_4                                              0x2050
-#define         YUSHAN_MIPI_RX_OFFSET_CL                                                  0x2054
-#define         YUSHAN_MIPI_RX_CALIBRATE                                                  0x2058
-#define         YUSHAN_MIPI_RX_SPECS                                                      0x205c
-#define         YUSHAN_MIPI_RX_COMP                                                       0x2060
-#define         YUSHAN_MIPI_RX_MIPI_IN_SHORT                                              0x2064
-#define         YUSHAN_MIPI_RX_LANE_CTRL                                                  0x2068
-#define         YUSHAN_CSI2_RX_ENABLE                                                     0x2400
-#define         YUSHAN_CSI2_RX_VER_CTRL                                                   0x2404
-#define         YUSHAN_CSI2_RX_NB_DATA_LANES                                              0x2408
-#define         YUSHAN_CSI2_RX_IMG_UNPACKING_FORMAT                                       0x240c
-#define         YUSHAN_CSI2_RX_WAIT_AFTER_PACKET_END                                      0x2410
-#define         YUSHAN_CSI2_RX_MULTIPLE_OF_5_HSYNC_EXTENSION_ENABLE                       0x2414
-#define         YUSHAN_CSI2_RX_MULTIPLE_OF_5_HSYNC_EXTENSION_PADDING_DATA                 0x2418
-#define         YUSHAN_CSI2_RX_CHARACTERIZATION_MODE                                      0x241c
-#define         YUSHAN_CSI2_RX_BYTE2PIXEL_READ_TH                                         0x2420
-#define         YUSHAN_CSI2_RX_VIRTUAL_CHANNEL                                            0x2424
-#define         YUSHAN_CSI2_RX_DATA_TYPE                                                  0x2428
-#define         YUSHAN_CSI2_RX_FRAME_NUMBER                                               0x242c
-#define         YUSHAN_CSI2_RX_LINE_NUMBER                                                0x2430
-#define         YUSHAN_CSI2_RX_DATA_FIELD                                                 0x2434
-#define         YUSHAN_CSI2_RX_WORD_COUNT                                                 0x2438
-#define         YUSHAN_CSI2_RX_ECC_ERROR_STATUS                                           0x243c
-#define         YUSHAN_CSI2_RX_DFV                                                        0x2440
-#define         YUSHAN_ITPOINT_ENABLE                                                     0x2800
-#define         YUSHAN_ITPOINT_VERSION                                                    0x2804
-#define         YUSHAN_ITPOINT_PIX_POS                                                    0x2808
-#define         YUSHAN_ITPOINT_LINE_POS                                                   0x280c
-#define         YUSHAN_ITPOINT_PIX_CNT                                                    0x2810
-#define         YUSHAN_ITPOINT_LINE_CNT                                                   0x2814
-#define         YUSHAN_ITPOINT_FRAME_CNT                                                  0x2818
-#define         YUSHAN_ITPOINT_DFV                                                        0x281c
-#define         YUSHAN_IDP_GEN_AUTO_RUN                                                   0x2c00
-#define         YUSHAN_IDP_GEN_VERSION                                                    0x2c04
-#define         YUSHAN_IDP_GEN_CONTROL                                                    0x2c08
-#define         YUSHAN_IDP_GEN_LINE_LENGTH                                                0x2c0c
-#define         YUSHAN_IDP_GEN_FRAME_LENGTH                                               0x2c10
-#define         YUSHAN_IDP_GEN_ERROR_LINES_EOF_GAP                                        0x2c14
-#define         YUSHAN_IDP_GEN_WC_DI_0                                                    0x2c18
-#define         YUSHAN_IDP_GEN_WC_DI_1                                                    0x2c1c
-#define         YUSHAN_IDP_GEN_WC_DI_2                                                    0x2c20
-#define         YUSHAN_IDP_GEN_WC_DI_3                                                    0x2c24
-#define         YUSHAN_IDP_GEN_WC_DI_4                                                    0x2c28
-#define         YUSHAN_IDP_GEN_WC_DI_5                                                    0x2c2c
-#define         YUSHAN_IDP_GEN_WC_DI_6                                                    0x2c30
-#define         YUSHAN_IDP_GEN_WC_DI_7                                                    0x2c34
-#define         YUSHAN_IDP_GEN_WC_DI_8                                                    0x2c38
-#define         YUSHAN_IDP_GEN_WC_DI_9                                                    0x2c3c
-#define         YUSHAN_IDP_GEN_WC_DI_10                                                   0x2c40
-#define         YUSHAN_IDP_GEN_WC_DI_11                                                   0x2c44
-#define         YUSHAN_IDP_GEN_WC_DI_12                                                   0x2c48
-#define         YUSHAN_IDP_GEN_WC_DI_13                                                   0x2c4c
-#define         YUSHAN_IDP_GEN_WC_DI_14                                                   0x2c50
-#define         YUSHAN_IDP_GEN_DFV                                                        0x2c54
-#define         YUSHAN_MIPI_RX_DTCHK_ENABLE                                               0x3000
-#define         YUSHAN_MIPI_RX_DTCHK_VERSION_CTRL                                         0x3004
-#define         YUSHAN_MIPI_RX_DTCHK_COLORBAR_WIDTH_BY4_M1                                0x3008
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_0                                      0x300c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_1                                      0x3010
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_2                                      0x3014
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_3                                      0x3018
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_4                                      0x301c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_5                                      0x3020
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_6                                      0x3024
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_VAL_7                                      0x3028
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_0                           0x302c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_1                           0x3030
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_2                           0x3034
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_3                           0x3038
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_4                           0x303c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_5                           0x3040
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_6                           0x3044
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_IGNORE_ERR_CNT_7                           0x3048
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_0                                   0x304c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_1                                   0x3050
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_2                                   0x3054
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_3                                   0x3058
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_4                                   0x305c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_5                                   0x3060
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_6                                   0x3064
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERRVAL_7                                   0x3068
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_0                                  0x306c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_1                                  0x3070
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_2                                  0x3074
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_3                                  0x3078
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_4                                  0x307c
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_5                                  0x3080
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_6                                  0x3084
-#define         YUSHAN_MIPI_RX_DTCHK_COLOR_BAR_ERR_POS_7                                  0x3088
-#define         YUSHAN_MIPI_RX_DTCHK_DFV                                                  0x308c
-#define         YUSHAN_PATTERN_GEN_ENABLE                                                 0x3400
-#define         YUSHAN_PATTERN_GEN_VERSION                                                0x3404
-#define         YUSHAN_PATTERN_GEN_PATTERN_TYPE_REQ                                       0x3408
-#define         YUSHAN_PATTERN_GEN_TPAT_DATA_RG                                           0x340c
-#define         YUSHAN_PATTERN_GEN_TPAT_DATA_BG                                           0x3410
-#define         YUSHAN_PATTERN_GEN_TPAT_HCUR_WP                                           0x3414
-#define         YUSHAN_PATTERN_GEN_TPAT_VCUR_WP                                           0x3418
-#define         YUSHAN_PATTERN_GEN_PATTERN_TYPE_STATUS                                    0x341c
-#define         YUSHAN_SMIA_DCPX_ENABLE                                                   0x3800
-#define         YUSHAN_SMIA_DCPX_VERSION                                                  0x3804
-#define         YUSHAN_SMIA_DCPX_ENABLE_STATUS                                            0x3808
-#define         YUSHAN_SMIA_DCPX_MODE_REQ                                                 0x380c
-#define         YUSHAN_SMIA_DCPX_MODE_STATUS                                              0x3810
-#define         YUSHAN_SMIA_CPX_CTRL_REQ                                                  0x4000
-#define         YUSHAN_SMIA_CPX_MODE_REQ                                                  0x4004
-#define         YUSHAN_SMIA_CPX_CTRL_STATUS                                               0x4008
-#define         YUSHAN_SMIA_CPX_MODE_STATUS                                               0x400c
-#define         YUSHAN_SMIA_FM_CTRL                                                       0x4400
-#define         YUSHAN_SMIA_FM_PIX_WIDTH                                                  0x4404
-#define         YUSHAN_SMIA_FM_GROUPED_PARAMETER_HOLD                                     0x4408
-#define         YUSHAN_SMIA_FM_EOF_INT_EN                                                 0x440c
-#define         YUSHAN_SMIA_FM_EOF_INT_CTRL                                               0x4410
-#define         YUSHAN_P2W_FIFO_WR_CTRL                                                   0x4800
-#define         YUSHAN_P2W_FIFO_WR_STATUS                                                 0x4804
-#define         YUSHAN_P2W_FIFO_RD_CTRL                                                   0x4900
-#define         YUSHAN_P2W_FIFO_RD_STATUS                                                 0x4904
-#define         YUSHAN_CSI2_TX_WRAPPER_CTRL                                               0x4a00
-#define         YUSHAN_CSI2_TX_WRAPPER_THRESH                                             0x4a04
-#define         YUSHAN_CSI2_TX_WRAPPER_CHAR_EN                                            0x4a08
-#define         YUSHAN_CSI2_TX_ENABLE                                                     0x4c00
-#define         YUSHAN_CSI2_TX_VERSION_CTRL                                               0x4c04
-#define         YUSHAN_CSI2_TX_NUMBER_OF_LANES                                            0x4c08
-#define         YUSHAN_CSI2_TX_LANE_MAPPING                                               0x4c0c
-#define         YUSHAN_CSI2_TX_PACKET_CONTROL                                             0x4c10
-#define         YUSHAN_CSI2_TX_INTERPACKET_DELAY                                          0x4c14
-#define         YUSHAN_CSI2_TX_STATUS_LINE_SIZE                                           0x4c18
-#define         YUSHAN_CSI2_TX_STATUS_LINE_CTRL                                           0x4c1c
-#define         YUSHAN_CSI2_TX_VC_CTRL_0                                                  0x4c20
-#define         YUSHAN_CSI2_TX_VC_CTRL_1                                                  0x4c24
-#define         YUSHAN_CSI2_TX_VC_CTRL_2                                                  0x4c28
-#define         YUSHAN_CSI2_TX_VC_CTRL_3                                                  0x4c2c
-#define         YUSHAN_CSI2_TX_FRAME_NO_0                                                 0x4c30
-#define         YUSHAN_CSI2_TX_FRAME_NO_1                                                 0x4c34
-#define         YUSHAN_CSI2_TX_FRAME_NO_2                                                 0x4c38
-#define         YUSHAN_CSI2_TX_FRAME_NO_3                                                 0x4c3c
-#define         YUSHAN_CSI2_TX_BYTE_COUNT                                                 0x4c40
-#define         YUSHAN_CSI2_TX_CURRENT_DATA_IDENTIFIER                                    0x4c44
-#define         YUSHAN_CSI2_TX_DFV                                                        0x4c48
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_0                                              0x4c4c
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_0                                            0x4c50
-#define         YUSHAN_CSI2_TX_LINE_NO_0                                                  0x4c54
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_1                                              0x4c58
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_1                                            0x4c5c
-#define         YUSHAN_CSI2_TX_LINE_NO_1                                                  0x4c60
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_2                                              0x4c64
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_2                                            0x4c68
-#define         YUSHAN_CSI2_TX_LINE_NO_2                                                  0x4c6c
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_3                                              0x4c70
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_3                                            0x4c74
-#define         YUSHAN_CSI2_TX_LINE_NO_3                                                  0x4c78
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_4                                              0x4c7c
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_4                                            0x4c80
-#define         YUSHAN_CSI2_TX_LINE_NO_4                                                  0x4c84
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_5                                              0x4c88
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_5                                            0x4c8c
-#define         YUSHAN_CSI2_TX_LINE_NO_5                                                  0x4c90
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_6                                              0x4c94
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_6                                            0x4c98
-#define         YUSHAN_CSI2_TX_LINE_NO_6                                                  0x4c9c
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_7                                              0x4ca0
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_7                                            0x4ca4
-#define         YUSHAN_CSI2_TX_LINE_NO_7                                                  0x4ca8
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_8                                              0x4cac
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_8                                            0x4cb0
-#define         YUSHAN_CSI2_TX_LINE_NO_8                                                  0x4cb4
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_9                                              0x4cb8
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_9                                            0x4cbc
-#define         YUSHAN_CSI2_TX_LINE_NO_9                                                  0x4cc0
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_10                                             0x4cc4
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_10                                           0x4cc8
-#define         YUSHAN_CSI2_TX_LINE_NO_10                                                 0x4ccc
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_11                                             0x4cd0
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_11                                           0x4cd4
-#define         YUSHAN_CSI2_TX_LINE_NO_11                                                 0x4cd8
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_12                                             0x4cdc
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_12                                           0x4ce0
-#define         YUSHAN_CSI2_TX_LINE_NO_12                                                 0x4ce4
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_13                                             0x4ce8
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_13                                           0x4cec
-#define         YUSHAN_CSI2_TX_LINE_NO_13                                                 0x4cf0
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_14                                             0x4cf4
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_14                                           0x4cf8
-#define         YUSHAN_CSI2_TX_LINE_NO_14                                                 0x4cfc
-#define         YUSHAN_CSI2_TX_PACKET_SIZE_15                                             0x4d00
-#define         YUSHAN_CSI2_TX_DI_INDEX_CTRL_15                                           0x4d04
-#define         YUSHAN_CSI2_TX_LINE_NO_15                                                 0x4d08
-#define         YUSHAN_MIPI_TX_ENABLE                                                     0x5000
-#define         YUSHAN_MIPI_TX_UIX4                                                       0x5004
-#define         YUSHAN_MIPI_TX_SWAP_PINS                                                  0x5008
-#define         YUSHAN_MIPI_TX_INVERT_HS                                                  0x500c
-#define         YUSHAN_MIPI_TX_STOP_STATE                                                 0x5010
-#define         YUSHAN_MIPI_TX_FORCE_TX_MODE_DL                                           0x5014
-#define         YUSHAN_MIPI_TX_ULP_STATE                                                  0x5018
-#define         YUSHAN_MIPI_TX_ULP_EXIT                                                   0x501c
-#define         YUSHAN_MIPI_TX_ESC_DL                                                     0x5020
-#define         YUSHAN_MIPI_TX_HSTX_SLEW                                                  0x5024
-#define         YUSHAN_MIPI_TX_SKEW                                                       0x5028
-#define         YUSHAN_MIPI_TX_GPIO_CL                                                    0x502c
-#define         YUSHAN_MIPI_TX_GPIO_DL1                                                   0x5030
-#define         YUSHAN_MIPI_TX_GPIO_DL2                                                   0x5034
-#define         YUSHAN_MIPI_TX_GPIO_DL3                                                   0x5038
-#define         YUSHAN_MIPI_TX_GPIO_DL4                                                   0x503c
-#define         YUSHAN_MIPI_TX_SPECS                                                      0x5040
-#define         YUSHAN_MIPI_TX_SLEW_RATE                                                  0x5044
-#define         YUSHAN_MIPI_TX_TEST_RESERVED                                              0x5048
-#define         YUSHAN_MIPI_TX_TCLK_ENABLE                                                0x504c
-#define         YUSHAN_MIPI_TX_TCLK_POST_DELAY                                            0x5050
-#define         YUSHAN_LINE_FILTER_BYPASS_ENABLE                                          0x5800
-#define         YUSHAN_LINE_FILTER_BYPASS_VERSION                                         0x5804
-#define         YUSHAN_LINE_FILTER_BYPASS_LSTART_LEVEL                                    0x5808
-#define         YUSHAN_LINE_FILTER_BYPASS_LSTOP_LEVEL                                     0x580c
-#define         YUSHAN_DTFILTER_BYPASS_ENABLE                                             0x5820
-#define         YUSHAN_DTFILTER_BYPASS_VERSION                                            0x5824
-#define         YUSHAN_DTFILTER_BYPASS_MATCH0                                             0x5828
-#define         YUSHAN_DTFILTER_BYPASS_MATCH1                                             0x582c
-#define         YUSHAN_DTFILTER_BYPASS_MATCH2                                             0x5830
-#define         YUSHAN_DTFILTER_BYPASS_MATCH3                                             0x5834
-#define         YUSHAN_LINE_FILTER_DXO_ENABLE                                             0x5840
-#define         YUSHAN_LINE_FILTER_DXO_VERSION                                            0x5844
-#define         YUSHAN_LINE_FILTER_DXO_LSTART_LEVEL                                       0x5848
-#define         YUSHAN_LINE_FILTER_DXO_LSTOP_LEVEL                                        0x584c
-#define         YUSHAN_DTFILTER_DXO_ENABLE                                                0x5860
-#define         YUSHAN_DTFILTER_DXO_VERSION                                               0x5864
-#define         YUSHAN_DTFILTER_DXO_MATCH0                                                0x5868
-#define         YUSHAN_DTFILTER_DXO_MATCH1                                                0x586c
-#define         YUSHAN_DTFILTER_DXO_MATCH2                                                0x5870
-#define         YUSHAN_DTFILTER_DXO_MATCH3                                                0x5874
-#define         YUSHAN_EOF_RESIZE_PRE_DXO_ENABLE                                          0x5880
-#define         YUSHAN_EOF_RESIZE_PRE_DXO_VERSION                                         0x5884
-#define         YUSHAN_EOF_RESIZE_PRE_DXO_AUTOMATIC_CONTROL                               0x5888
-#define         YUSHAN_EOF_RESIZE_PRE_DXO_H_SIZE                                          0x588c
-#define         YUSHAN_LBE_PRE_DXO_ENABLE                                                 0x58a0
-#define         YUSHAN_LBE_PRE_DXO_VERSION                                                0x58a4
-#define         YUSHAN_LBE_PRE_DXO_DFV                                                    0x58a8
-#define         YUSHAN_LBE_PRE_DXO_H_SIZE                                                 0x58ac
-#define         YUSHAN_LBE_PRE_DXO_READ_START                                             0x58b0
-#define         YUSHAN_EOF_RESIZE_POST_DXO_ENABLE                                         0x58c0
-#define         YUSHAN_EOF_RESIZE_POST_DXO_VERSION                                        0x58c4
-#define         YUSHAN_EOF_RESIZE_POST_DXO_AUTOMATIC_CONTROL                              0x58c8
-#define         YUSHAN_EOF_RESIZE_POST_DXO_H_SIZE                                         0x58cc
-#define         YUSHAN_LECCI_ENABLE                                                       0x5c00
-#define         YUSHAN_LECCI_VERSION                                                      0x5c04
-#define         YUSHAN_LECCI_MIN_INTERLINE                                                0x5c08
-#define         YUSHAN_LECCI_OUT_BURST_CTRL                                               0x5c0c
-#define         YUSHAN_LECCI_LINE_SIZE                                                    0x5c10
-#define         YUSHAN_LECCI_BYPASS_CTRL                                                  0x5c14
-#define         YUSHAN_LBE_POST_DXO_ENABLE                                                0x5c20
-#define         YUSHAN_LBE_POST_DXO_VERSION                                               0x5c24
-#define         YUSHAN_LBE_POST_DXO_DFV                                                   0x5c28
-#define         YUSHAN_LBE_POST_DXO_H_SIZE                                                0x5c2c
-#define         YUSHAN_LBE_POST_DXO_READ_START                                            0x5c30
-#endif
diff --git a/drivers/media/video/msm/rawchip/yushan_u_code_r2.c b/drivers/media/video/msm/rawchip/yushan_u_code_r2.c
deleted file mode 100644
index a8f18b4..0000000
--- a/drivers/media/video/msm/rawchip/yushan_u_code_r2.c
+++ /dev/null
@@ -1,35855 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpcode_u_1_7[] =
-{
-	0x78,
-	0x64,
-	0x00,
-	0xa0,
-	0xff,
-	0x13,
-	0x00,
-	0x00,
-	0x01,
-	0x00,
-	0x13,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0xa0,
-	0x34,
-	0x13,
-	0x00,
-	0x00,
-	0x00,
-	0x02,
-	0x9c,
-	0x14,
-	0x1a,
-	0x9c,
-	0x18,
-	0x1a,
-	0x9c,
-	0x20,
-	0x1a,
-	0x9c,
-	0x24,
-	0x1a,
-	0xb8,
-	0xa0,
-	0x04,
-	0x53,
-	0xa1,
-	0x0d,
-	0x00,
-	0x02,
-	0xa0,
-	0x03,
-	0x53,
-	0xd7,
-	0x0d,
-	0x04,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x07,
-	0x02,
-	0xcd,
-	0xd9,
-	0x0d,
-	0xf0,
-	0x04,
-	0xa2,
-	0x02,
-	0x80,
-	0x10,
-	0xa2,
-	0x01,
-	0xad,
-	0x00,
-	0x18,
-	0xc9,
-	0x5b,
-	0xd0,
-	0x07,
-	0xad,
-	0x01,
-	0x18,
-	0xc9,
-	0xe6,
-	0xf0,
-	0x08,
-	0x8e,
-	0x08,
-	0x02,
-	0xee,
-	0x14,
-	0x1a,
-	0x80,
-	0x1b,
-	0xa2,
-	0xff,
-	0x9a,
-	0xa0,
-	0x0e,
-	0x53,
-	0x93,
-	0x0d,
-	0x02,
-	0x00,
-	0xa9,
-	0x03,
-	0x85,
-	0xa0,
-	0x85,
-	0xbf,
-	0xa0,
-	0x05,
-	0x53,
-	0xa5,
-	0x0d,
-	0x2e,
-	0x02,
-	0x58,
-	0xee,
-	0x14,
-	0x1a,
-	0x5c,
-	0x80,
-	0xfd,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0xa9,
-	0x01,
-	0xa0,
-	0x34,
-	0xa6,
-	0xcf,
-	0xf0,
-	0x0b,
-	0x53,
-	0x00,
-	0x02,
-	0x35,
-	0x01,
-	0x8d,
-	0x69,
-	0x01,
-	0x3a,
-	0x80,
-	0x08,
-	0x53,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x8d,
-	0x34,
-	0x01,
-	0x85,
-	0xcf,
-	0x9c,
-	0x08,
-	0x02,
-	0x9c,
-	0x18,
-	0x1a,
-	0xee,
-	0x18,
-	0x1a,
-	0x20,
-	0x6b,
-	0x0d,
-	0x4c,
-	0x40,
-	0x0d,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0xad,
-	0x34,
-	0x18,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x0e,
-	0x9c,
-	0x24,
-	0x1a,
-	0xee,
-	0x24,
-	0x1a,
-	0xad,
-	0x33,
-	0x02,
-	0xf0,
-	0x03,
-	0x20,
-	0x6b,
-	0x0d,
-	0x4c,
-	0x40,
-	0x0d,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0x9c,
-	0x24,
-	0x1a,
-	0xee,
-	0x24,
-	0x1a,
-	0x4c,
-	0x40,
-	0x0d,
-	0x40,
-	0xb9,
-	0x28,
-	0x00,
-	0xd0,
-	0x4d,
-	0xb9,
-	0x27,
-	0x00,
-	0xc9,
-	0x08,
-	0xb0,
-	0x46,
-	0x1a,
-	0x4a,
-	0xb0,
-	0x3f,
-	0x85,
-	0xeb,
-	0x98,
-	0x4a,
-	0xa8,
-	0xb9,
-	0x1d,
-	0x00,
-	0x4a,
-	0xb0,
-	0x40,
-	0xb9,
-	0x21,
-	0x00,
-	0xaa,
-	0x4a,
-	0x90,
-	0x36,
-	0x8a,
-	0xf9,
-	0xda,
-	0x0d,
-	0xb9,
-	0x22,
-	0x00,
-	0xf9,
-	0xdb,
-	0x0d,
-	0xb0,
-	0x27,
-	0x8a,
-	0xf9,
-	0x1d,
-	0x00,
-	0xaa,
-	0xb9,
-	0x22,
-	0x00,
-	0xf9,
-	0x1e,
-	0x00,
-	0x90,
-	0x23,
-	0xe8,
-	0xd0,
-	0x01,
-	0x1a,
-	0xa4,
-	0xeb,
-	0x20,
-	0xff,
-	0x0a,
-	0xe8,
-	0xd0,
-	0x01,
-	0x1a,
-	0x4a,
-	0xa8,
-	0x8a,
-	0x6a,
-	0xa2,
-	0x00,
-	0x60,
-	0xa2,
-	0x13,
-	0x60,
-	0xa9,
-	0x11,
-	0x60,
-	0xa2,
-	0x09,
-	0x60,
-	0xa2,
-	0x0d,
-	0x60,
-	0xa2,
-	0x0b,
-	0x60,
-	0xa2,
-	0x0f,
-	0x60,
-	0xf8,
-	0xa5,
-	0xcf,
-	0x85,
-	0xf7,
-	0xa0,
-	0x34,
-	0xa5,
-	0xf7,
-	0xd0,
-	0x12,
-	0xad,
-	0x69,
-	0x01,
-	0xd0,
-	0x03,
-	0x4c,
-	0x25,
-	0x04,
-	0x53,
-	0x35,
-	0x01,
-	0x10,
-	0x00,
-	0x9c,
-	0x69,
-	0x01,
-	0x80,
-	0x10,
-	0xad,
-	0x34,
-	0x01,
-	0xd0,
-	0x03,
-	0x4c,
-	0x25,
-	0x04,
-	0x53,
-	0x00,
-	0x01,
-	0x10,
-	0x00,
-	0x9c,
-	0x34,
-	0x01,
-	0x64,
-	0x63,
-	0xa0,
-	0x00,
-	0x20,
-	0x0e,
-	0x03,
-	0xf0,
-	0x07,
-	0x64,
-	0x45,
-	0x64,
-	0x46,
-	0x8a,
-	0x80,
-	0x59,
-	0x85,
-	0x45,
-	0x84,
-	0x46,
-	0xa0,
-	0x04,
-	0x20,
-	0x0e,
-	0x03,
-	0xf0,
-	0x08,
-	0x8a,
-	0x1a,
-	0x80,
-	0x4a,
-	0xa9,
-	0x1f,
-	0x80,
-	0x46,
-	0x85,
-	0x47,
-	0x84,
-	0x48,
-	0x38,
-	0xa5,
-	0x2e,
-	0xed,
-	0xdf,
-	0x0d,
-	0xa5,
-	0x2f,
-	0xed,
-	0xe0,
-	0x0d,
-	0x90,
-	0xeb,
-	0xad,
-	0xe1,
-	0x0d,
-	0xe5,
-	0x2e,
-	0xad,
-	0xe2,
-	0x0d,
-	0xe5,
-	0x2f,
-	0x90,
-	0xdf,
-	0xa0,
-	0x02,
-	0x53,
-	0x2e,
-	0x00,
-	0xe6,
-	0x00,
-	0x20,
-	0x1c,
-	0x0c,
-	0xa0,
-	0x02,
-	0x53,
-	0xe6,
-	0x00,
-	0x2e,
-	0x00,
-	0xa5,
-	0x1b,
-	0xaa,
-	0x29,
-	0x01,
-	0xd0,
-	0x04,
-	0xa2,
-	0x38,
-	0x86,
-	0x1b,
-	0x20,
-	0x50,
-	0x06,
-	0xd0,
-	0x08,
-	0x20,
-	0x6b,
-	0x09,
-	0xd0,
-	0x03,
-	0x20,
-	0x0b,
-	0x0a,
-	0x85,
-	0x63,
-	0xa0,
-	0x1f,
-	0xa2,
-	0x03,
-	0xa5,
-	0xf7,
-	0xf0,
-	0x09,
-	0x86,
-	0xbf,
-	0x53,
-	0x45,
-	0x00,
-	0xa1,
-	0x00,
-	0x80,
-	0x07,
-	0x86,
-	0xa0,
-	0x53,
-	0x45,
-	0x00,
-	0x82,
-	0x00,
-	0x9c,
-	0x1c,
-	0x1a,
-	0xee,
-	0x1c,
-	0x1a,
-	0x18,
-	0xad,
-	0x69,
-	0x01,
-	0x6d,
-	0x34,
-	0x01,
-	0xf0,
-	0x0a,
-	0xa5,
-	0xf7,
-	0x3a,
-	0x29,
-	0x01,
-	0x85,
-	0xf7,
-	0x4c,
-	0x74,
-	0x03,
-	0x9c,
-	0x6a,
-	0x01,
-	0xad,
-	0x33,
-	0x02,
-	0xf0,
-	0x10,
-	0xa0,
-	0x02,
-	0x53,
-	0x45,
-	0x00,
-	0x09,
-	0x02,
-	0x0e,
-	0x09,
-	0x02,
-	0x2e,
-	0x0a,
-	0x02,
-	0x20,
-	0x6d,
-	0x04,
-	0x4c,
-	0x5d,
-	0x0d,
-	0xa9,
-	0x01,
-	0xc4,
-	0xf5,
-	0xd0,
-	0x04,
-	0xe4,
-	0xf4,
-	0xf0,
-	0x01,
-	0x1a,
-	0x3a,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xde,
-	0x0c,
-	0x48,
-	0x20,
-	0x6d,
-	0x04,
-	0x4c,
-	0x40,
-	0x0d,
-	0xad,
-	0x0a,
-	0x02,
-	0x4a,
-	0x85,
-	0xf5,
-	0xad,
-	0x09,
-	0x02,
-	0x6a,
-	0xb0,
-	0x46,
-	0x85,
-	0xf4,
-	0x64,
-	0xe4,
-	0xa4,
-	0x83,
-	0xa6,
-	0x82,
-	0x20,
-	0x53,
-	0x04,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe4,
-	0xa4,
-	0xa2,
-	0xa6,
-	0xa1,
-	0x20,
-	0x53,
-	0x04,
-	0xd0,
-	0x04,
-	0xe6,
-	0xe4,
-	0xe6,
-	0xe4,
-	0xa5,
-	0xe4,
-	0xf0,
-	0x26,
-	0xa0,
-	0x1e,
-	0xc9,
-	0x01,
-	0xf0,
-	0x07,
-	0x4a,
-	0x90,
-	0x0f,
-	0xa5,
-	0xcf,
-	0xd0,
-	0x0b,
-	0xa5,
-	0xa0,
-	0xd0,
-	0x17,
-	0x53,
-	0x82,
-	0x00,
-	0x64,
-	0x00,
-	0x80,
-	0x09,
-	0xa5,
-	0xbf,
-	0xd0,
-	0x0c,
-	0x53,
-	0xa1,
-	0x00,
-	0x64,
-	0x00,
-	0x20,
-	0xf8,
-	0x04,
-	0x80,
-	0x02,
-	0xa9,
-	0x04,
-	0x8d,
-	0x08,
-	0x02,
-	0xa2,
-	0x28,
-	0xa8,
-	0xd0,
-	0x0a,
-	0xee,
-	0x31,
-	0x02,
-	0xd0,
-	0x03,
-	0xee,
-	0x32,
-	0x02,
-	0xa2,
-	0x20,
-	0x9e,
-	0x00,
-	0x1a,
-	0xfe,
-	0x00,
-	0x1a,
-	0x60,
-	0x8d,
-	0x50,
-	0x18,
-	0x8e,
-	0x50,
-	0x18,
-	0xd0,
-	0x01,
-	0xca,
-	0x3a,
-	0x99,
-	0x00,
-	0x18,
-	0x48,
-	0x8a,
-	0x99,
-	0x01,
-	0x18,
-	0x68,
-	0x0a,
-	0x1a,
-	0x8d,
-	0x50,
-	0x18,
-	0x8a,
-	0x2a,
-	0x8d,
-	0x50,
-	0x18,
-	0x60,
-	0xa0,
-	0x01,
-	0x8c,
-	0x04,
-	0x18,
-	0x8c,
-	0x10,
-	0x18,
-	0x53,
-	0x7d,
-	0x00,
-	0x78,
-	0x18,
-	0x53,
-	0x7c,
-	0x00,
-	0x7c,
-	0x18,
-	0x53,
-	0x7b,
-	0x00,
-	0x80,
-	0x18,
-	0x53,
-	0x7a,
-	0x00,
-	0x84,
-	0x18,
-	0x53,
-	0x7e,
-	0x00,
-	0x88,
-	0x18,
-	0x53,
-	0x7f,
-	0x00,
-	0x8c,
-	0x18,
-	0x53,
-	0x80,
-	0x00,
-	0x90,
-	0x18,
-	0xa5,
-	0x81,
-	0x8d,
-	0x94,
-	0x18,
-	0x8d,
-	0x14,
-	0x18,
-	0xc8,
-	0x53,
-	0x68,
-	0x00,
-	0x54,
-	0x18,
-	0x53,
-	0x6a,
-	0x00,
-	0x58,
-	0x18,
-	0x53,
-	0x6c,
-	0x00,
-	0x5c,
-	0x18,
-	0x53,
-	0x6e,
-	0x00,
-	0x60,
-	0x18,
-	0x53,
-	0x72,
-	0x00,
-	0x64,
-	0x18,
-	0x53,
-	0x70,
-	0x00,
-	0x68,
-	0x18,
-	0x53,
-	0x76,
-	0x00,
-	0x6c,
-	0x18,
-	0x53,
-	0x74,
-	0x00,
-	0x70,
-	0x18,
-	0x53,
-	0x78,
-	0x00,
-	0x74,
-	0x18,
-	0x9c,
-	0x3c,
-	0x18,
-	0x13,
-	0x3c,
-	0x18,
-	0x28,
-	0x18,
-	0x13,
-	0x3c,
-	0x18,
-	0x2c,
-	0x18,
-	0x9c,
-	0x30,
-	0x18,
-	0x9c,
-	0x20,
-	0x18,
-	0x9c,
-	0x24,
-	0x18,
-	0x9c,
-	0x0c,
-	0x18,
-	0x9c,
-	0x0d,
-	0x18,
-	0xa0,
-	0x18,
-	0xa6,
-	0x65,
-	0xa5,
-	0x64,
-	0x20,
-	0xda,
-	0x04,
-	0xa9,
-	0x04,
-	0x8d,
-	0x0c,
-	0x18,
-	0x9c,
-	0x0d,
-	0x18,
-	0xa0,
-	0x1c,
-	0xa6,
-	0x67,
-	0xa5,
-	0x66,
-	0x20,
-	0xda,
-	0x04,
-	0xa0,
-	0x03,
-	0x43,
-	0xaa,
-	0x0d,
-	0x38,
-	0x18,
-	0xa9,
-	0x00,
-	0x60,
-	0x20,
-	0xa5,
-	0x05,
-	0xe0,
-	0x00,
-	0xf0,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0xc8,
-	0x60,
-	0x85,
-	0xea,
-	0x45,
-	0xec,
-	0x84,
-	0xeb,
-	0xaa,
-	0xa5,
-	0xed,
-	0x45,
-	0xea,
-	0x18,
-	0x65,
-	0xeb,
-	0x90,
-	0x01,
-	0xc8,
-	0x60,
-	0x18,
-	0x65,
-	0xee,
-	0x85,
-	0xee,
-	0x98,
-	0x65,
-	0xef,
-	0x85,
-	0xef,
-	0x38,
-	0xa5,
-	0xee,
-	0xe9,
-	0xff,
-	0xa5,
-	0xef,
-	0xe9,
-	0x07,
-	0x90,
-	0x08,
-	0xa9,
-	0xff,
-	0x85,
-	0xee,
-	0xa9,
-	0x07,
-	0x85,
-	0xef,
-	0x60,
-	0x38,
-	0xa5,
-	0xee,
-	0xe5,
-	0xec,
-	0x85,
-	0xee,
-	0xa5,
-	0xef,
-	0xe5,
-	0xed,
-	0x85,
-	0xef,
-	0xb0,
-	0x04,
-	0x64,
-	0xee,
-	0x64,
-	0xef,
-	0x60,
-	0xa5,
-	0xee,
-	0x0a,
-	0x85,
-	0xec,
-	0xa5,
-	0xef,
-	0x2a,
-	0x85,
-	0xed,
-	0x60,
-	0x20,
-	0xe9,
-	0x05,
-	0xa5,
-	0xf2,
-	0xd0,
-	0x05,
-	0xa6,
-	0xf3,
-	0xd0,
-	0x0b,
-	0x60,
-	0x20,
-	0x99,
-	0x05,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x4c,
-	0xd5,
-	0x05,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa9,
-	0x04,
-	0xe5,
-	0xed,
-	0x85,
-	0xed,
-	0x8a,
-	0x20,
-	0x99,
-	0x05,
-	0x4c,
-	0xb7,
-	0x05,
-	0x20,
-	0xe9,
-	0x05,
-	0xa6,
-	0xf2,
-	0xd0,
-	0x05,
-	0xa6,
-	0xf3,
-	0xd0,
-	0x15,
-	0x60,
-	0x38,
-	0xa9,
-	0xfe,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa9,
-	0x0f,
-	0xe5,
-	0xed,
-	0x85,
-	0xed,
-	0x8a,
-	0x20,
-	0xa5,
-	0x05,
-	0x4c,
-	0xb7,
-	0x05,
-	0x38,
-	0xa5,
-	0xed,
-	0xe9,
-	0x04,
-	0x85,
-	0xed,
-	0x8a,
-	0x20,
-	0xa5,
-	0x05,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x4c,
-	0xd5,
-	0x05,
-	0xa5,
-	0x2d,
-	0xd0,
-	0x02,
-	0xa9,
-	0x11,
-	0xaa,
-	0x49,
-	0x10,
-	0xc0,
-	0x05,
-	0x90,
-	0x03,
-	0xa9,
-	0x1c,
-	0x60,
-	0x84,
-	0xd2,
-	0x8a,
-	0x29,
-	0x0f,
-	0xc9,
-	0x05,
-	0xb0,
-	0xf4,
-	0x45,
-	0xd2,
-	0xaa,
-	0xbd,
-	0xc5,
-	0x0d,
-	0x85,
-	0xd2,
-	0x64,
-	0xe3,
-	0x38,
-	0xad,
-	0x2d,
-	0x0f,
-	0xe5,
-	0xd2,
-	0xb0,
-	0x02,
-	0xe6,
-	0xe3,
-	0x64,
-	0xc2,
-	0x64,
-	0xc3,
-	0xa0,
-	0x02,
-	0x53,
-	0x2e,
-	0x00,
-	0xc0,
-	0x00,
-	0x53,
-	0x34,
-	0x00,
-	0xd0,
-	0x00,
-	0x20,
-	0x58,
-	0x0b,
-	0xa5,
-	0xc4,
-	0x10,
-	0x0a,
-	0xe6,
-	0xc5,
-	0xd0,
-	0x06,
-	0xe6,
-	0xc6,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc7,
-	0xa5,
-	0xc7,
-	0xf0,
-	0x06,
-	0xa9,
-	0xff,
-	0x85,
-	0xc5,
-	0x85,
-	0xc6,
-	0xa0,
-	0x02,
-	0x53,
-	0xc5,
-	0x00,
-	0xcd,
-	0x00,
-	0x53,
-	0xcd,
-	0x00,
-	0xe8,
-	0x00,
-	0xa2,
-	0x2e,
-	0xa0,
-	0x0f,
-	0xa9,
-	0x04,
-	0x20,
-	0x3c,
-	0x0a,
-	0x84,
-	0xd3,
-	0xa5,
-	0xe3,
-	0x49,
-	0x24,
-	0x85,
-	0xc8,
-	0xa5,
-	0xd3,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0xc8,
-	0x85,
-	0xc8,
-	0xc0,
-	0x04,
-	0xf0,
-	0x10,
-	0x38,
-	0xb9,
-	0xfc,
-	0x0f,
-	0xe5,
-	0xcd,
-	0xc8,
-	0xb9,
-	0xfc,
-	0x0f,
-	0xc8,
-	0xe5,
-	0xce,
-	0x90,
-	0xed,
-	0x88,
-	0x98,
-	0x4a,
-	0xa8,
-	0xb9,
-	0x3e,
-	0x00,
-	0x85,
-	0xf2,
-	0xa9,
-	0x80,
-	0x38,
-	0xe5,
-	0xf2,
-	0x85,
-	0xf2,
-	0xb0,
-	0x0b,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xf2,
-	0x64,
-	0xf2,
-	0x85,
-	0xf3,
-	0x80,
-	0x02,
-	0x64,
-	0xf3,
-	0xa9,
-	0x0c,
-	0x85,
-	0xcc,
-	0xa4,
-	0xd3,
-	0xa2,
-	0x00,
-	0xb9,
-	0x2e,
-	0x0f,
-	0x95,
-	0xe6,
-	0xe8,
-	0xc8,
-	0xe0,
-	0x04,
-	0x90,
-	0xf5,
-	0x18,
-	0xa5,
-	0xc8,
-	0x69,
-	0x34,
-	0x85,
-	0xc8,
-	0xa9,
-	0x0f,
-	0x90,
-	0x01,
-	0x1a,
-	0x85,
-	0xc9,
-	0xa5,
-	0xe3,
-	0x49,
-	0x40,
-	0x85,
-	0xca,
-	0xa5,
-	0xd3,
-	0x49,
-	0x10,
-	0x18,
-	0x65,
-	0xca,
-	0x69,
-	0x7c,
-	0x85,
-	0xca,
-	0xa9,
-	0x0f,
-	0x90,
-	0x01,
-	0x1a,
-	0x85,
-	0xcb,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0xf4,
-	0x05,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x49,
-	0x00,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0xf4,
-	0x05,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x4b,
-	0x00,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0x1e,
-	0x06,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x4d,
-	0x00,
-	0x20,
-	0x88,
-	0x0a,
-	0x20,
-	0x1e,
-	0x06,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x4f,
-	0x00,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x51,
-	0x64,
-	0x52,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x5f,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x60,
-	0x20,
-	0x65,
-	0x0a,
-	0x85,
-	0x61,
-	0xa5,
-	0x1b,
-	0x29,
-	0x10,
-	0xf0,
-	0x08,
-	0xa9,
-	0xff,
-	0x85,
-	0x51,
-	0xa9,
-	0x03,
-	0x85,
-	0x52,
-	0xa9,
-	0x00,
-	0x60,
-	0x18,
-	0xa5,
-	0xd4,
-	0x69,
-	0x0a,
-	0x80,
-	0x02,
-	0xa5,
-	0xd5,
-	0xaa,
-	0xa0,
-	0x00,
-	0xbd,
-	0xeb,
-	0x0d,
-	0x99,
-	0xe6,
-	0x00,
-	0xe8,
-	0xc8,
-	0xc0,
-	0x04,
-	0xd0,
-	0xf4,
-	0xa0,
-	0x02,
-	0x60,
-	0x65,
-	0xe2,
-	0x85,
-	0xe2,
-	0x98,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x90,
-	0x07,
-	0xe6,
-	0xdf,
-	0x18,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe0,
-	0x60,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x98,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x90,
-	0x07,
-	0x18,
-	0xe6,
-	0xe0,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe1,
-	0x60,
-	0xa4,
-	0xe3,
-	0xf0,
-	0x03,
-	0x4c,
-	0x65,
-	0x0a,
-	0x4c,
-	0x88,
-	0x0a,
-	0xa9,
-	0x06,
-	0x85,
-	0xcc,
-	0x20,
-	0x94,
-	0x07,
-	0x53,
-	0x34,
-	0x00,
-	0xcd,
-	0x00,
-	0x53,
-	0xda,
-	0x00,
-	0xc8,
-	0x00,
-	0x53,
-	0xdc,
-	0x00,
-	0xca,
-	0x00,
-	0x20,
-	0xd5,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0xf0,
-	0x00,
-	0x53,
-	0xc8,
-	0x00,
-	0xda,
-	0x00,
-	0x53,
-	0xca,
-	0x00,
-	0xdc,
-	0x00,
-	0x20,
-	0x94,
-	0x07,
-	0x53,
-	0xd6,
-	0x00,
-	0xc8,
-	0x00,
-	0x53,
-	0xd8,
-	0x00,
-	0xca,
-	0x00,
-	0x20,
-	0xd5,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0xc8,
-	0x00,
-	0xd6,
-	0x00,
-	0x53,
-	0xca,
-	0x00,
-	0xd8,
-	0x00,
-	0x38,
-	0xa5,
-	0xee,
-	0xe5,
-	0xf0,
-	0xd0,
-	0x09,
-	0xa5,
-	0xef,
-	0xe5,
-	0xf1,
-	0xd0,
-	0x03,
-	0xa5,
-	0xee,
-	0x60,
-	0x20,
-	0x9b,
-	0x07,
-	0x38,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xe6,
-	0x85,
-	0xd0,
-	0xa5,
-	0xe9,
-	0xe5,
-	0xe7,
-	0x85,
-	0xd1,
-	0x4a,
-	0x85,
-	0xeb,
-	0xa5,
-	0xd0,
-	0x6a,
-	0x85,
-	0xea,
-	0x38,
-	0xa5,
-	0xf0,
-	0xe5,
-	0xee,
-	0x85,
-	0xec,
-	0xa5,
-	0xf1,
-	0xe5,
-	0xef,
-	0x85,
-	0xed,
-	0x64,
-	0xe6,
-	0xb0,
-	0x17,
-	0xe6,
-	0xe6,
-	0xa5,
-	0xea,
-	0xe9,
-	0x00,
-	0xb0,
-	0x03,
-	0x38,
-	0xc6,
-	0xeb,
-	0xa9,
-	0x00,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa9,
-	0x00,
-	0xe5,
-	0xed,
-	0x85,
-	0xed,
-	0x64,
-	0xe0,
-	0x64,
-	0xe1,
-	0xa5,
-	0xd5,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x0d,
-	0x45,
-	0xed,
-	0x85,
-	0xe2,
-	0x84,
-	0xde,
-	0xbd,
-	0xfc,
-	0x0d,
-	0x45,
-	0xed,
-	0x18,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x90,
-	0x02,
-	0xc8,
-	0x18,
-	0x84,
-	0xdf,
-	0xbd,
-	0xfc,
-	0x0d,
-	0x45,
-	0xec,
-	0x20,
-	0xaf,
-	0x07,
-	0xbd,
-	0xfd,
-	0x0d,
-	0x45,
-	0xeb,
-	0x20,
-	0xaf,
-	0x07,
-	0xbd,
-	0xfd,
-	0x0d,
-	0x45,
-	0xec,
-	0x65,
-	0xde,
-	0x85,
-	0xde,
-	0x98,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x90,
-	0x07,
-	0xe6,
-	0xe0,
-	0x18,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe1,
-	0xbd,
-	0xfd,
-	0x0d,
-	0x45,
-	0xed,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x98,
-	0x65,
-	0xe0,
-	0x85,
-	0xe0,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0xe1,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xea,
-	0x65,
-	0xe2,
-	0x98,
-	0xa0,
-	0x00,
-	0x20,
-	0xc2,
-	0x07,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xeb,
-	0x20,
-	0xc2,
-	0x07,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xec,
-	0x65,
-	0xdf,
-	0x85,
-	0xdf,
-	0x98,
-	0x65,
-	0xe0,
-	0x85,
-	0xe0,
-	0x90,
-	0x03,
-	0xe6,
-	0xe1,
-	0x18,
-	0xbd,
-	0xfe,
-	0x0d,
-	0x45,
-	0xed,
-	0x65,
-	0xe0,
-	0x85,
-	0xe0,
-	0x98,
-	0x65,
-	0xe1,
-	0x85,
-	0xe1,
-	0xa0,
-	0x04,
-	0x53,
-	0xde,
-	0x00,
-	0xc0,
-	0x00,
-	0xe6,
-	0xc0,
-	0xd0,
-	0x0a,
-	0xe6,
-	0xc1,
-	0xd0,
-	0x06,
-	0xe6,
-	0xc2,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc3,
-	0x20,
-	0x58,
-	0x0b,
-	0x38,
-	0xa2,
-	0x00,
-	0xa0,
-	0x04,
-	0xb5,
-	0xea,
-	0xf5,
-	0xc4,
-	0xe8,
-	0x88,
-	0xd0,
-	0xf8,
-	0xdc,
-	0x90,
-	0x08,
-	0x53,
-	0xc0,
-	0x00,
-	0xde,
-	0x00,
-	0x4c,
-	0x0d,
-	0x09,
-	0x53,
-	0xde,
-	0x00,
-	0xc0,
-	0x00,
-	0xa5,
-	0xe6,
-	0xf0,
-	0x17,
-	0xa2,
-	0x00,
-	0x38,
-	0x8a,
-	0xe5,
-	0xc0,
-	0x85,
-	0xc0,
-	0x8a,
-	0xe5,
-	0xc1,
-	0x85,
-	0xc1,
-	0x8a,
-	0xe5,
-	0xc2,
-	0x85,
-	0xc2,
-	0x8a,
-	0xe5,
-	0xc3,
-	0x85,
-	0xc3,
-	0x20,
-	0x9b,
-	0x07,
-	0x53,
-	0x2e,
-	0x00,
-	0xcd,
-	0x00,
-	0xa0,
-	0x04,
-	0x53,
-	0xee,
-	0x00,
-	0xea,
-	0x00,
-	0x20,
-	0xb1,
-	0x0a,
-	0xa5,
-	0xee,
-	0x60,
-	0xa5,
-	0x1b,
-	0x29,
-	0x08,
-	0xf0,
-	0x10,
-	0x64,
-	0xe5,
-	0xa0,
-	0x06,
-	0x13,
-	0xe5,
-	0x00,
-	0x59,
-	0x00,
-	0xa9,
-	0xf8,
-	0x85,
-	0x59,
-	0xa9,
-	0x00,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2e,
-	0x00,
-	0xe8,
-	0x00,
-	0xa2,
-	0xeb,
-	0xa0,
-	0x0d,
-	0xa9,
-	0x08,
-	0x20,
-	0x3c,
-	0x0a,
-	0x84,
-	0xd5,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x00,
-	0xe8,
-	0x00,
-	0xa2,
-	0xf5,
-	0xa0,
-	0x0d,
-	0xa9,
-	0x04,
-	0x20,
-	0x3c,
-	0x0a,
-	0x84,
-	0xd4,
-	0xa5,
-	0xd5,
-	0x4a,
-	0x49,
-	0x12,
-	0x85,
-	0xd6,
-	0xa5,
-	0xd4,
-	0x49,
-	0x03,
-	0x65,
-	0xd6,
-	0x69,
-	0x0b,
-	0x85,
-	0xd6,
-	0x98,
-	0x69,
-	0x0e,
-	0x85,
-	0xd7,
-	0xa5,
-	0xd6,
-	0x69,
-	0x12,
-	0x85,
-	0xda,
-	0xa5,
-	0xd7,
-	0x69,
-	0x00,
-	0x85,
-	0xdb,
-	0xa5,
-	0xd5,
-	0x49,
-	0x14,
-	0x69,
-	0x65,
-	0x85,
-	0xd8,
-	0x98,
-	0x69,
-	0x0e,
-	0x85,
-	0xd9,
-	0x18,
-	0xa5,
-	0xd4,
-	0x49,
-	0x0a,
-	0x65,
-	0xd8,
-	0x85,
-	0xd8,
-	0x90,
-	0x03,
-	0xe6,
-	0xd9,
-	0x18,
-	0xa5,
-	0xd8,
-	0x69,
-	0x28,
-	0x85,
-	0xdc,
-	0xa5,
-	0xd9,
-	0x69,
-	0x00,
-	0x85,
-	0xdd,
-	0x64,
-	0xe3,
-	0x20,
-	0xdf,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0xee,
-	0x00,
-	0x59,
-	0x00,
-	0xe6,
-	0xe3,
-	0xa2,
-	0x03,
-	0xda,
-	0x20,
-	0xdf,
-	0x07,
-	0xfa,
-	0x95,
-	0x5b,
-	0xca,
-	0x10,
-	0xf6,
-	0xa9,
-	0x00,
-	0x60,
-	0xa5,
-	0x1c,
-	0xd8,
-	0x4d,
-	0xde,
-	0x0d,
-	0x85,
-	0x62,
-	0xf8,
-	0x29,
-	0xfc,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1d,
-	0x60,
-	0xa6,
-	0x27,
-	0xa5,
-	0x1b,
-	0x29,
-	0x20,
-	0xf0,
-	0x02,
-	0xa2,
-	0x01,
-	0x8a,
-	0x3a,
-	0x49,
-	0x03,
-	0x18,
-	0x69,
-	0xad,
-	0x85,
-	0xe6,
-	0x98,
-	0x69,
-	0x0d,
-	0x85,
-	0xe7,
-	0xa0,
-	0x06,
-	0xd3,
-	0xe6,
-	0x53,
-	0x00,
-	0xa9,
-	0x00,
-	0x60,
-	0x85,
-	0xea,
-	0x86,
-	0xe6,
-	0x84,
-	0xe7,
-	0xa0,
-	0x01,
-	0xc8,
-	0xc4,
-	0xea,
-	0xf0,
-	0x0d,
-	0x38,
-	0xb1,
-	0xe6,
-	0xe5,
-	0xe8,
-	0xc8,
-	0xb1,
-	0xe6,
-	0xe5,
-	0xe9,
-	0x90,
-	0xef,
-	0x88,
-	0x88,
-	0x88,
-	0x60,
-	0xa0,
-	0x04,
-	0xe6,
-	0xca,
-	0xd0,
-	0x02,
-	0xe6,
-	0xcb,
-	0x88,
-	0xd0,
-	0xf7,
-	0x60,
-	0xa0,
-	0x04,
-	0xd3,
-	0xca,
-	0xc0,
-	0x00,
-	0xb2,
-	0xc8,
-	0x85,
-	0xea,
-	0x64,
-	0xeb,
-	0xa4,
-	0xcc,
-	0xb1,
-	0xc8,
-	0x85,
-	0xec,
-	0x64,
-	0xed,
-	0x20,
-	0xb1,
-	0x0a,
-	0x20,
-	0x59,
-	0x0a,
-	0xe6,
-	0xc8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc9,
-	0xa5,
-	0xee,
-	0x60,
-	0xa0,
-	0x04,
-	0xd3,
-	0xca,
-	0xc0,
-	0x00,
-	0xa0,
-	0x02,
-	0xd3,
-	0xc8,
-	0xea,
-	0x00,
-	0xa4,
-	0xcc,
-	0xb1,
-	0xc8,
-	0x85,
-	0xec,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x85,
-	0xed,
-	0x20,
-	0xb1,
-	0x0a,
-	0x20,
-	0x59,
-	0x0a,
-	0xa0,
-	0x02,
-	0xe6,
-	0xc8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc9,
-	0x88,
-	0xd0,
-	0xf7,
-	0x60,
-	0xa0,
-	0x02,
-	0x38,
-	0xa5,
-	0xcd,
-	0xe5,
-	0xe6,
-	0xa5,
-	0xce,
-	0xe5,
-	0xe7,
-	0xb0,
-	0x06,
-	0x53,
-	0xea,
-	0x00,
-	0xee,
-	0x00,
-	0x60,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xcd,
-	0xa5,
-	0xe9,
-	0xe5,
-	0xce,
-	0xb0,
-	0x06,
-	0x53,
-	0xec,
-	0x00,
-	0xee,
-	0x00,
-	0x60,
-	0x38,
-	0xa5,
-	0xcd,
-	0xe5,
-	0xe6,
-	0x85,
-	0xd0,
-	0xa5,
-	0xce,
-	0xe5,
-	0xe7,
-	0x85,
-	0xd1,
-	0x20,
-	0x58,
-	0x0b,
-	0x18,
-	0xa9,
-	0x80,
-	0x65,
-	0xc5,
-	0x90,
-	0x06,
-	0xe6,
-	0xc6,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc7,
-	0x18,
-	0xa5,
-	0xea,
-	0x65,
-	0xc6,
-	0x85,
-	0xee,
-	0xa5,
-	0xeb,
-	0x65,
-	0xc7,
-	0x85,
-	0xef,
-	0x60,
-	0x88,
-	0xd0,
-	0x01,
-	0x60,
-	0x85,
-	0xe6,
-	0x86,
-	0xe7,
-	0x98,
-	0xc8,
-	0x18,
-	0x65,
-	0xe7,
-	0xaa,
-	0x90,
-	0x02,
-	0xe6,
-	0xe6,
-	0x98,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0e,
-	0x29,
-	0x01,
-	0xd0,
-	0x0d,
-	0x46,
-	0xe6,
-	0x8a,
-	0x6a,
-	0xaa,
-	0x98,
-	0x4a,
-	0xa8,
-	0x80,
-	0xee,
-	0xa5,
-	0xe6,
-	0x60,
-	0x8a,
-	0x1a,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe6,
-	0x49,
-	0x55,
-	0x84,
-	0xe8,
-	0x18,
-	0x65,
-	0xe8,
-	0x85,
-	0xe7,
-	0x90,
-	0x03,
-	0xe6,
-	0xe8,
-	0x18,
-	0xa5,
-	0xe6,
-	0x49,
-	0x55,
-	0x84,
-	0xe9,
-	0xaa,
-	0x65,
-	0xe7,
-	0x8a,
-	0x65,
-	0xe8,
-	0x85,
-	0xe8,
-	0xa5,
-	0xe9,
-	0x90,
-	0x03,
-	0xe6,
-	0xe9,
-	0x18,
-	0x65,
-	0xe8,
-	0xaa,
-	0xa5,
-	0xe9,
-	0x69,
-	0x00,
-	0x60,
-	0x64,
-	0xc7,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc0,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0x18,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc1,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x90,
-	0x05,
-	0xc8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xc7,
-	0x84,
-	0xc6,
-	0x18,
-	0xa5,
-	0xd1,
-	0x45,
-	0xc0,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x98,
-	0x65,
-	0xc6,
-	0x85,
-	0xc6,
-	0x90,
-	0x03,
-	0xe6,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc2,
-	0x65,
-	0xc6,
-	0x85,
-	0xc6,
-	0x98,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd1,
-	0x45,
-	0xc1,
-	0x65,
-	0xc6,
-	0x85,
-	0xc6,
-	0x98,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd0,
-	0x45,
-	0xc3,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x18,
-	0xa5,
-	0xd1,
-	0x45,
-	0xc2,
-	0x65,
-	0xc7,
-	0x85,
-	0xc7,
-	0x60,
-	0xa5,
-	0xe6,
-	0x45,
-	0xe8,
-	0x85,
-	0xea,
-	0x84,
-	0xeb,
-	0xa5,
-	0xe6,
-	0x45,
-	0xe9,
-	0x18,
-	0x65,
-	0xeb,
-	0x85,
-	0xeb,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xec,
-	0x64,
-	0xed,
-	0xa5,
-	0xe7,
-	0x45,
-	0xe8,
-	0x18,
-	0x65,
-	0xeb,
-	0x85,
-	0xeb,
-	0x98,
-	0x65,
-	0xec,
-	0x85,
-	0xec,
-	0x90,
-	0x02,
-	0xe6,
-	0xed,
-	0xa5,
-	0xe7,
-	0x45,
-	0xe9,
-	0x18,
-	0x65,
-	0xec,
-	0x85,
-	0xec,
-	0x98,
-	0x65,
-	0xed,
-	0x85,
-	0xed,
-	0xa5,
-	0xe9,
-	0x10,
-	0x0d,
-	0x38,
-	0xa5,
-	0xec,
-	0xe5,
-	0xe6,
-	0x85,
-	0xec,
-	0xa5,
-	0xed,
-	0xe5,
-	0xe7,
-	0x85,
-	0xed,
-	0x60,
-	0x18,
-	0xa5,
-	0xe8,
-	0x65,
-	0xea,
-	0x85,
-	0xea,
-	0xa2,
-	0x00,
-	0xa5,
-	0xe9,
-	0x10,
-	0x01,
-	0xca,
-	0x65,
-	0xeb,
-	0x85,
-	0xeb,
-	0x8a,
-	0x65,
-	0xec,
-	0x85,
-	0xec,
-	0x8a,
-	0x65,
-	0xed,
-	0x85,
-	0xed,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0xe5,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xb5,
-	0x0b,
-	0xa0,
-	0x02,
-	0x53,
-	0xe9,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xff,
-	0x0b,
-	0xa0,
-	0x04,
-	0x53,
-	0xea,
-	0x00,
-	0xee,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0xe3,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xb5,
-	0x0b,
-	0xa0,
-	0x02,
-	0x53,
-	0xe7,
-	0x0d,
-	0xe8,
-	0x00,
-	0x20,
-	0xff,
-	0x0b,
-	0xa5,
-	0xed,
-	0x10,
-	0x22,
-	0xa2,
-	0x00,
-	0xa9,
-	0x01,
-	0x4a,
-	0xa9,
-	0x00,
-	0xf5,
-	0xea,
-	0x95,
-	0xea,
-	0x2a,
-	0xe8,
-	0xe0,
-	0x04,
-	0x90,
-	0xf3,
-	0xa2,
-	0x00,
-	0xa9,
-	0x01,
-	0x4a,
-	0xa9,
-	0x00,
-	0xf5,
-	0xee,
-	0x95,
-	0xee,
-	0x2a,
-	0xe8,
-	0xe0,
-	0x04,
-	0x90,
-	0xf3,
-	0xa5,
-	0xed,
-	0x05,
-	0xf1,
-	0x30,
-	0x12,
-	0x06,
-	0xea,
-	0x26,
-	0xeb,
-	0x26,
-	0xec,
-	0x26,
-	0xed,
-	0x06,
-	0xee,
-	0x26,
-	0xef,
-	0x26,
-	0xf0,
-	0x26,
-	0xf1,
-	0x80,
-	0xe8,
-	0x64,
-	0xe6,
-	0x64,
-	0xe7,
-	0x64,
-	0xe8,
-	0x64,
-	0xe9,
-	0xa2,
-	0x20,
-	0x06,
-	0xea,
-	0x26,
-	0xeb,
-	0x26,
-	0xec,
-	0x26,
-	0xed,
-	0x26,
-	0xe6,
-	0x26,
-	0xe7,
-	0x26,
-	0xe8,
-	0x26,
-	0xe9,
-	0x38,
-	0xa5,
-	0xe6,
-	0xe5,
-	0xef,
-	0x85,
-	0xc0,
-	0xa5,
-	0xe7,
-	0xe5,
-	0xf0,
-	0x85,
-	0xc1,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xf1,
-	0x85,
-	0xc2,
-	0xa5,
-	0xe9,
-	0xe9,
-	0x00,
-	0x85,
-	0xc3,
-	0x90,
-	0x0b,
-	0xe6,
-	0xea,
-	0x8a,
-	0xa0,
-	0x04,
-	0x53,
-	0xc0,
-	0x00,
-	0xe6,
-	0x00,
-	0xaa,
-	0xca,
-	0xd0,
-	0xc7,
-	0xa6,
-	0xea,
-	0xa4,
-	0xeb,
-	0xa5,
-	0xec,
-	0x05,
-	0xed,
-	0xf0,
-	0x03,
-	0xa2,
-	0xff,
-	0xdc,
-	0x86,
-	0xe6,
-	0x84,
-	0xe7,
-	0x60,
-	0xba,
-	0x08,
-	0x78,
-	0x68,
-	0x48,
-	0x29,
-	0x1c,
-	0x85,
-	0xfa,
-	0x86,
-	0xf8,
-	0xa9,
-	0x01,
-	0x85,
-	0xf9,
-	0xa0,
-	0x06,
-	0xb1,
-	0xf8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc5,
-	0xfa,
-	0x90,
-	0x08,
-	0x7a,
-	0xa0,
-	0x09,
-	0xb1,
-	0xf8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc9,
-	0x00,
-	0xd0,
-	0x38,
-	0xa0,
-	0x03,
-	0xb1,
-	0xf8,
-	0xe0,
-	0xdf,
-	0xb0,
-	0x18,
-	0x8d,
-	0x6b,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x6c,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x6d,
-	0x01,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x6e,
-	0x01,
-	0x80,
-	0x16,
-	0x8d,
-	0x6f,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x70,
-	0x01,
-	0xc8,
-	0xb1,
-	0xf8,
-	0x8d,
-	0x71,
-	0x01,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x72,
-	0x01,
-	0xa9,
-	0x00,
-	0xfa,
-	0x28,
-	0xf8,
-	0x60,
-	0x68,
-	0xf0,
-	0x04,
-	0x68,
-	0xfa,
-	0x7a,
-	0x40,
-	0x08,
-	0x78,
-	0x68,
-	0xad,
-	0x6a,
-	0x01,
-	0xf0,
-	0x0e,
-	0xae,
-	0x6e,
-	0x01,
-	0x9a,
-	0xad,
-	0x6b,
-	0x01,
-	0xae,
-	0x6c,
-	0x01,
-	0xac,
-	0x6d,
-	0x01,
-	0x40,
-	0xae,
-	0x72,
-	0x01,
-	0x9a,
-	0xad,
-	0x6f,
-	0x01,
-	0xae,
-	0x70,
-	0x01,
-	0xac,
-	0x71,
-	0x01,
-	0x40,
-	0x08,
-	0x78,
-	0xad,
-	0x6a,
-	0x01,
-	0xd0,
-	0x1f,
-	0x1a,
-	0x8d,
-	0x6a,
-	0x01,
-	0xa9,
-	0xdc,
-	0x8d,
-	0x6e,
-	0x01,
-	0x9c,
-	0x6b,
-	0x01,
-	0x9c,
-	0x6c,
-	0x01,
-	0x9c,
-	0x6d,
-	0x01,
-	0xa9,
-	0x03,
-	0x8d,
-	0xdf,
-	0x01,
-	0xa9,
-	0x6f,
-	0x8d,
-	0xde,
-	0x01,
-	0x9c,
-	0xdd,
-	0x01,
-	0x28,
-	0x60,
-	0xa9,
-	0x02,
-	0x60,
-	0x04,
-	0xdc,
-	0x02,
-	0xfd,
-	0x02,
-	0xff,
-	0xff,
-	0xff,
-	0xff,
-	0x0d,
-	0x03,
-	0x07,
-	0x01,
-	0x5b,
-	0xe6,
-	0x80,
-	0x80,
-	0x80,
-	0xff,
-	0xff,
-	0x02,
-	0x01,
-	0x05,
-	0x00,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x10,
-	0x03,
-	0x70,
-	0x00,
-	0x10,
-	0x00,
-	0xc7,
-	0x02,
-	0x8e,
-	0x00,
-	0x1c,
-	0x00,
-	0xa4,
-	0x02,
-	0x9c,
-	0x00,
-	0x24,
-	0x00,
-	0x00,
-	0x01,
-	0x01,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-
-};
-
-uint8_t dppcode_u_1_7[] =
-{
-	0x78,
-	0xb8,
-	0x18,
-	0xf8,
-	0x9c,
-	0x00,
-	0x02,
-	0xa0,
-	0x36,
-	0x13,
-	0x00,
-	0x02,
-	0x01,
-	0x02,
-	0xa9,
-	0x07,
-	0x8d,
-	0x00,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x01,
-	0x02,
-	0xa9,
-	0xe8,
-	0x8d,
-	0x02,
-	0x02,
-	0xa9,
-	0xeb,
-	0x8d,
-	0x03,
-	0x02,
-	0xa2,
-	0xff,
-	0x8e,
-	0x32,
-	0x02,
-	0x8e,
-	0x1d,
-	0x6b,
-	0xa2,
-	0xff,
-	0x8e,
-	0x33,
-	0x02,
-	0x8e,
-	0x1e,
-	0x6b,
-	0xa0,
-	0x03,
-	0x53,
-	0x27,
-	0xbe,
-	0x04,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x07,
-	0x02,
-	0xcd,
-	0x29,
-	0xbe,
-	0xf0,
-	0x04,
-	0xa2,
-	0x02,
-	0x80,
-	0x10,
-	0xa2,
-	0x01,
-	0xad,
-	0x00,
-	0xc0,
-	0xc9,
-	0xe8,
-	0xd0,
-	0x07,
-	0xad,
-	0x01,
-	0xc0,
-	0xc9,
-	0xeb,
-	0xf0,
-	0x0e,
-	0x8e,
-	0x08,
-	0x02,
-	0xa9,
-	0x01,
-	0x9c,
-	0x14,
-	0xd0,
-	0x8d,
-	0x14,
-	0xd0,
-	0x5c,
-	0x80,
-	0xfd,
-	0x9c,
-	0x08,
-	0x02,
-	0xa0,
-	0x0e,
-	0x53,
-	0x80,
-	0x3f,
-	0x02,
-	0x00,
-	0x9c,
-	0x14,
-	0xd0,
-	0x9c,
-	0x18,
-	0xd0,
-	0x9c,
-	0x1c,
-	0xd0,
-	0x9c,
-	0x20,
-	0xd0,
-	0x9c,
-	0x24,
-	0xd0,
-	0x9c,
-	0x28,
-	0xd0,
-	0xa2,
-	0xff,
-	0x9a,
-	0x20,
-	0x90,
-	0x03,
-	0x58,
-	0xa9,
-	0x01,
-	0x8d,
-	0x14,
-	0xd0,
-	0x4c,
-	0xf8,
-	0x0d,
-	0x9c,
-	0xde,
-	0x5e,
-	0xa9,
-	0x01,
-	0x8d,
-	0xdf,
-	0x5e,
-	0x9c,
-	0x81,
-	0x82,
-	0x9c,
-	0x21,
-	0x5f,
-	0x9c,
-	0x22,
-	0x5f,
-	0x9c,
-	0x23,
-	0x5f,
-	0x9c,
-	0x24,
-	0x5f,
-	0x9c,
-	0x2b,
-	0x5f,
-	0x9c,
-	0x2c,
-	0x5f,
-	0xa0,
-	0x03,
-	0x13,
-	0x81,
-	0x82,
-	0x18,
-	0x5f,
-	0x13,
-	0x81,
-	0x82,
-	0x1b,
-	0x5f,
-	0x20,
-	0xc6,
-	0x03,
-	0x20,
-	0x83,
-	0x1a,
-	0x20,
-	0xc0,
-	0x1a,
-	0x9c,
-	0x75,
-	0x60,
-	0x60,
-	0x9c,
-	0x65,
-	0x5e,
-	0x9c,
-	0x64,
-	0x5e,
-	0x9c,
-	0x66,
-	0x5e,
-	0x9c,
-	0x67,
-	0x5e,
-	0x9c,
-	0x68,
-	0x5e,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0xad,
-	0x08,
-	0xd0,
-	0xc9,
-	0x01,
-	0xd0,
-	0x51,
-	0x08,
-	0x78,
-	0xad,
-	0x64,
-	0x5e,
-	0xc9,
-	0x02,
-	0xb0,
-	0x03,
-	0xee,
-	0x64,
-	0x5e,
-	0xee,
-	0x66,
-	0x5e,
-	0xd0,
-	0x08,
-	0xee,
-	0x67,
-	0x5e,
-	0xd0,
-	0x03,
-	0xee,
-	0x68,
-	0x5e,
-	0xa0,
-	0x37,
-	0xad,
-	0x65,
-	0x5e,
-	0x1a,
-	0x29,
-	0x01,
-	0x8d,
-	0x65,
-	0x5e,
-	0xf0,
-	0x0e,
-	0x53,
-	0x00,
-	0x02,
-	0xa0,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0x66,
-	0x5e,
-	0xda,
-	0x5e,
-	0x80,
-	0x0c,
-	0x53,
-	0x00,
-	0x02,
-	0x69,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0x66,
-	0x5e,
-	0xd7,
-	0x5e,
-	0xad,
-	0x75,
-	0x60,
-	0xd0,
-	0x03,
-	0x20,
-	0x36,
-	0x3f,
-	0x28,
-	0xa9,
-	0x01,
-	0x9c,
-	0x18,
-	0xd0,
-	0x8d,
-	0x18,
-	0xd0,
-	0x4c,
-	0x0b,
-	0x3f,
-	0x8a,
-	0xf0,
-	0x0c,
-	0xa9,
-	0x40,
-	0x8d,
-	0x30,
-	0xc0,
-	0xa9,
-	0x08,
-	0x8d,
-	0x31,
-	0xc0,
-	0x80,
-	0x06,
-	0x9c,
-	0x30,
-	0xc0,
-	0x9c,
-	0x31,
-	0xc0,
-	0xbd,
-	0x2d,
-	0x5f,
-	0x85,
-	0xa9,
-	0x8d,
-	0x78,
-	0xc0,
-	0xbd,
-	0x2f,
-	0x5f,
-	0x8d,
-	0x17,
-	0x6b,
-	0xbd,
-	0x31,
-	0x5f,
-	0x8d,
-	0x68,
-	0xc0,
-	0xbd,
-	0x33,
-	0x5f,
-	0x8d,
-	0x69,
-	0xc0,
-	0xbd,
-	0x35,
-	0x5f,
-	0x0a,
-	0xa8,
-	0xb9,
-	0x9c,
-	0x6a,
-	0x85,
-	0xc0,
-	0xb9,
-	0x9d,
-	0x6a,
-	0x85,
-	0xc1,
-	0xb9,
-	0xf4,
-	0x6a,
-	0x8d,
-	0x58,
-	0xc0,
-	0xb9,
-	0xf5,
-	0x6a,
-	0x8d,
-	0x59,
-	0xc0,
-	0xb9,
-	0x04,
-	0x6b,
-	0x8d,
-	0x60,
-	0xc0,
-	0xb9,
-	0x05,
-	0x6b,
-	0x8d,
-	0x61,
-	0xc0,
-	0xbd,
-	0x37,
-	0x5f,
-	0x0a,
-	0xa8,
-	0xb9,
-	0xa4,
-	0x6a,
-	0x85,
-	0xc2,
-	0xb9,
-	0xa5,
-	0x6a,
-	0x85,
-	0xc3,
-	0xb9,
-	0xfc,
-	0x6a,
-	0x8d,
-	0x5c,
-	0xc0,
-	0xb9,
-	0xfd,
-	0x6a,
-	0x8d,
-	0x5d,
-	0xc0,
-	0xb9,
-	0x0c,
-	0x6b,
-	0x8d,
-	0x64,
-	0xc0,
-	0xb9,
-	0x0d,
-	0x6b,
-	0x8d,
-	0x65,
-	0xc0,
-	0xbd,
-	0x39,
-	0x5f,
-	0x8d,
-	0x14,
-	0xc0,
-	0xbd,
-	0x3b,
-	0x5f,
-	0x8d,
-	0x18,
-	0xc0,
-	0xbd,
-	0x3d,
-	0x5f,
-	0x8d,
-	0x19,
-	0xc0,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0c,
-	0xc0,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0d,
-	0xc0,
-	0xda,
-	0xe0,
-	0x00,
-	0xd0,
-	0x12,
-	0xac,
-	0x6f,
-	0x60,
-	0x43,
-	0x97,
-	0x5f,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x27,
-	0x60,
-	0x79,
-	0x6a,
-	0x80,
-	0x10,
-	0xac,
-	0x70,
-	0x60,
-	0x43,
-	0xbf,
-	0x5f,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x3b,
-	0x60,
-	0x79,
-	0x6a,
-	0xfa,
-	0xbd,
-	0x6b,
-	0x5f,
-	0x8d,
-	0x28,
-	0xc0,
-	0xbd,
-	0x3f,
-	0x5f,
-	0x8d,
-	0x1c,
-	0xc0,
-	0xbd,
-	0x41,
-	0x5f,
-	0x8d,
-	0x1d,
-	0xc0,
-	0xa9,
-	0x50,
-	0x8d,
-	0x0c,
-	0xc0,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0d,
-	0xc0,
-	0xda,
-	0xe0,
-	0x00,
-	0xd0,
-	0x12,
-	0xac,
-	0x71,
-	0x60,
-	0x43,
-	0xe7,
-	0x5f,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x4f,
-	0x60,
-	0x8d,
-	0x6a,
-	0x80,
-	0x10,
-	0xac,
-	0x72,
-	0x60,
-	0x43,
-	0x07,
-	0x60,
-	0x54,
-	0xc0,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x5f,
-	0x60,
-	0x8d,
-	0x6a,
-	0xfa,
-	0xbd,
-	0x6d,
-	0x5f,
-	0x8d,
-	0x2c,
-	0xc0,
-	0xbd,
-	0x47,
-	0x5f,
-	0x85,
-	0xb4,
-	0xbd,
-	0x49,
-	0x5f,
-	0x85,
-	0xb5,
-	0xbd,
-	0x4b,
-	0x5f,
-	0x85,
-	0xbe,
-	0xbd,
-	0x4d,
-	0x5f,
-	0x85,
-	0xbf,
-	0xbd,
-	0x4f,
-	0x5f,
-	0x85,
-	0xaa,
-	0xbd,
-	0x51,
-	0x5f,
-	0x85,
-	0xb9,
-	0xbd,
-	0x53,
-	0x5f,
-	0x85,
-	0xb6,
-	0xbd,
-	0x55,
-	0x5f,
-	0x85,
-	0xbd,
-	0xbd,
-	0x57,
-	0x5f,
-	0x85,
-	0xb7,
-	0xbd,
-	0x59,
-	0x5f,
-	0x85,
-	0xb8,
-	0xbd,
-	0x5b,
-	0x5f,
-	0x85,
-	0xac,
-	0xbd,
-	0x5d,
-	0x5f,
-	0x85,
-	0xad,
-	0xbd,
-	0x5f,
-	0x5f,
-	0x85,
-	0xb2,
-	0xbd,
-	0x61,
-	0x5f,
-	0x85,
-	0xb3,
-	0xbd,
-	0x63,
-	0x5f,
-	0x85,
-	0xae,
-	0xbd,
-	0x65,
-	0x5f,
-	0x85,
-	0xaf,
-	0xbd,
-	0x67,
-	0x5f,
-	0x85,
-	0xb0,
-	0xbd,
-	0x69,
-	0x5f,
-	0x85,
-	0xb1,
-	0xda,
-	0xbd,
-	0x29,
-	0x5f,
-	0x8d,
-	0x76,
-	0x60,
-	0xf0,
-	0x3c,
-	0xbd,
-	0x73,
-	0x60,
-	0x85,
-	0x12,
-	0xbd,
-	0x27,
-	0x5f,
-	0xa2,
-	0x00,
-	0xa8,
-	0xd0,
-	0x04,
-	0xa5,
-	0x25,
-	0xd0,
-	0x29,
-	0xc0,
-	0x00,
-	0xf0,
-	0x0a,
-	0x20,
-	0x5e,
-	0x3f,
-	0xa0,
-	0x06,
-	0x53,
-	0x4c,
-	0x5c,
-	0x79,
-	0x6b,
-	0xa0,
-	0x01,
-	0x84,
-	0x25,
-	0xa0,
-	0x02,
-	0x53,
-	0x32,
-	0x02,
-	0x1b,
-	0x6b,
-	0x20,
-	0x9f,
-	0x3b,
-	0x64,
-	0x24,
-	0xa5,
-	0xbd,
-	0x85,
-	0x23,
-	0xa5,
-	0x12,
-	0x8d,
-	0x19,
-	0x6b,
-	0xa2,
-	0x01,
-	0x86,
-	0xa8,
-	0xfa,
-	0x08,
-	0x78,
-	0x68,
-	0xa9,
-	0x02,
-	0x8d,
-	0x38,
-	0xc0,
-	0xa9,
-	0x01,
-	0x8d,
-	0x38,
-	0xc0,
-	0xa9,
-	0x09,
-	0x8d,
-	0x38,
-	0xc0,
-	0xbd,
-	0x43,
-	0x5f,
-	0xf0,
-	0x0a,
-	0xa9,
-	0x05,
-	0x8d,
-	0x38,
-	0xc0,
-	0xa9,
-	0x0d,
-	0x8d,
-	0x38,
-	0xc0,
-	0xbd,
-	0x45,
-	0x5f,
-	0x85,
-	0xab,
-	0x85,
-	0xba,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0xad,
-	0x0c,
-	0xd0,
-	0xc9,
-	0x01,
-	0xf0,
-	0x05,
-	0xa9,
-	0x05,
-	0x4c,
-	0x82,
-	0x06,
-	0x08,
-	0x78,
-	0xad,
-	0xde,
-	0x5e,
-	0xf0,
-	0x59,
-	0x8d,
-	0x63,
-	0x5e,
-	0xc9,
-	0x02,
-	0xf0,
-	0x0d,
-	0xa2,
-	0x00,
-	0xad,
-	0x21,
-	0x5f,
-	0x0d,
-	0x23,
-	0x5f,
-	0xd0,
-	0x1b,
-	0xe8,
-	0x80,
-	0x18,
-	0x38,
-	0xad,
-	0x1b,
-	0x5f,
-	0xed,
-	0x18,
-	0x5f,
-	0xad,
-	0x1c,
-	0x5f,
-	0xed,
-	0x19,
-	0x5f,
-	0xad,
-	0x1d,
-	0x5f,
-	0xed,
-	0x1a,
-	0x5f,
-	0xa2,
-	0x01,
-	0xb0,
-	0x01,
-	0xca,
-	0xad,
-	0x09,
-	0x02,
-	0xdd,
-	0x21,
-	0x5f,
-	0xd0,
-	0x0d,
-	0xad,
-	0x0a,
-	0x02,
-	0xdd,
-	0x23,
-	0x5f,
-	0xd0,
-	0x05,
-	0xbd,
-	0x25,
-	0x5f,
-	0x80,
-	0x1a,
-	0xce,
-	0x63,
-	0x5e,
-	0xf0,
-	0x0f,
-	0xca,
-	0xf0,
-	0xe3,
-	0xa2,
-	0x01,
-	0x80,
-	0xdf,
-	0xad,
-	0xe0,
-	0x5e,
-	0x9c,
-	0xe0,
-	0x5e,
-	0xd0,
-	0x06,
-	0xa9,
-	0x04,
-	0x80,
-	0x02,
-	0xa9,
-	0x03,
-	0x28,
-	0x8d,
-	0x08,
-	0x02,
-	0xc9,
-	0x00,
-	0xf0,
-	0x0a,
-	0xa0,
-	0x01,
-	0x9c,
-	0x28,
-	0xd0,
-	0x8c,
-	0x28,
-	0xd0,
-	0x80,
-	0x27,
-	0x20,
-	0x38,
-	0x04,
-	0xee,
-	0x32,
-	0x02,
-	0xd0,
-	0x03,
-	0xee,
-	0x33,
-	0x02,
-	0x9c,
-	0x81,
-	0x82,
-	0xa9,
-	0x01,
-	0x8d,
-	0x75,
-	0x60,
-	0x8d,
-	0xdf,
-	0x5e,
-	0x9c,
-	0x2b,
-	0x5f,
-	0x9c,
-	0x2c,
-	0x5f,
-	0x9c,
-	0xde,
-	0x5e,
-	0xa0,
-	0x01,
-	0x9c,
-	0x20,
-	0xd0,
-	0x8c,
-	0x20,
-	0xd0,
-	0x4c,
-	0x0b,
-	0x3f,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0x08,
-	0x78,
-	0x68,
-	0xa5,
-	0x25,
-	0xc9,
-	0x03,
-	0xf0,
-	0x05,
-	0x64,
-	0x25,
-	0x20,
-	0x5e,
-	0x3f,
-	0xa9,
-	0x01,
-	0x9c,
-	0x24,
-	0xd0,
-	0x8d,
-	0x24,
-	0xd0,
-	0x9c,
-	0x75,
-	0x60,
-	0x20,
-	0x36,
-	0x3f,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0xc0,
-	0x4c,
-	0x12,
-	0x3f,
-	0xa9,
-	0x01,
-	0xcc,
-	0x2b,
-	0xbe,
-	0x90,
-	0x08,
-	0xd0,
-	0x05,
-	0xec,
-	0x2a,
-	0xbe,
-	0x90,
-	0x01,
-	0x1a,
-	0x3a,
-	0x60,
-	0xa9,
-	0x01,
-	0xcc,
-	0x2d,
-	0xbe,
-	0x90,
-	0x08,
-	0xd0,
-	0x05,
-	0xec,
-	0x2c,
-	0xbe,
-	0x90,
-	0x01,
-	0x1a,
-	0x3a,
-	0x60,
-	0xa5,
-	0x22,
-	0xf0,
-	0x38,
-	0xa9,
-	0x4a,
-	0x85,
-	0x16,
-	0xa9,
-	0x70,
-	0x85,
-	0x17,
-	0xa9,
-	0x1b,
-	0x85,
-	0x18,
-	0xa9,
-	0x6c,
-	0x85,
-	0x19,
-	0xa0,
-	0x00,
-	0xa9,
-	0x04,
-	0xf3,
-	0x16,
-	0x18,
-	0xe6,
-	0x17,
-	0xe6,
-	0x19,
-	0x3a,
-	0xd0,
-	0xf6,
-	0xa0,
-	0x2f,
-	0xf3,
-	0x16,
-	0x18,
-	0xa0,
-	0x06,
-	0x53,
-	0x7f,
-	0x6b,
-	0x79,
-	0x6b,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x02,
-	0x1d,
-	0x6b,
-	0x53,
-	0x1b,
-	0x6b,
-	0x34,
-	0x02,
-	0x64,
-	0x22,
-	0xf8,
-	0x08,
-	0x78,
-	0xad,
-	0x64,
-	0x5e,
-	0xd0,
-	0x03,
-	0x4c,
-	0x7f,
-	0x08,
-	0xa0,
-	0x03,
-	0x53,
-	0x66,
-	0x5e,
-	0x1e,
-	0x5f,
-	0xad,
-	0x65,
-	0x5e,
-	0x8d,
-	0xdd,
-	0x5e,
-	0xaa,
-	0xd0,
-	0x39,
-	0xbd,
-	0x2b,
-	0x5f,
-	0xf0,
-	0x1e,
-	0xad,
-	0xd7,
-	0x5e,
-	0xcd,
-	0x18,
-	0x5f,
-	0xd0,
-	0x16,
-	0xad,
-	0xd8,
-	0x5e,
-	0xcd,
-	0x19,
-	0x5f,
-	0xd0,
-	0x0e,
-	0xad,
-	0xd9,
-	0x5e,
-	0xcd,
-	0x1a,
-	0x5f,
-	0xd0,
-	0x06,
-	0xac,
-	0xdd,
-	0x5e,
-	0x4c,
-	0x6d,
-	0x08,
-	0x9c,
-	0x30,
-	0xc0,
-	0x9c,
-	0x31,
-	0xc0,
-	0xa0,
-	0x37,
-	0x53,
-	0x69,
-	0x5e,
-	0xe1,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0xd7,
-	0x5e,
-	0x18,
-	0x5f,
-	0x80,
-	0x3b,
-	0xbd,
-	0x2b,
-	0x5f,
-	0xf0,
-	0x1e,
-	0xad,
-	0xda,
-	0x5e,
-	0xcd,
-	0x1b,
-	0x5f,
-	0xd0,
-	0x16,
-	0xad,
-	0xdb,
-	0x5e,
-	0xcd,
-	0x1c,
-	0x5f,
-	0xd0,
-	0x0e,
-	0xad,
-	0xdc,
-	0x5e,
-	0xcd,
-	0x1d,
-	0x5f,
-	0xd0,
-	0x06,
-	0xac,
-	0xdd,
-	0x5e,
-	0x4c,
-	0x6d,
-	0x08,
-	0xa9,
-	0x40,
-	0x8d,
-	0x30,
-	0xc0,
-	0xa9,
-	0x08,
-	0x8d,
-	0x31,
-	0xc0,
-	0xa0,
-	0x37,
-	0x53,
-	0xa0,
-	0x5e,
-	0xe1,
-	0x5e,
-	0xa0,
-	0x03,
-	0x53,
-	0xda,
-	0x5e,
-	0x1b,
-	0x5f,
-	0xae,
-	0xdd,
-	0x5e,
-	0xa9,
-	0x00,
-	0x9d,
-	0x21,
-	0x5f,
-	0x9d,
-	0x23,
-	0x5f,
-	0x9d,
-	0x3d,
-	0x5f,
-	0x9d,
-	0x3b,
-	0x5f,
-	0xad,
-	0xde,
-	0x5e,
-	0xc9,
-	0x02,
-	0xd0,
-	0x04,
-	0x3a,
-	0x8d,
-	0xde,
-	0x5e,
-	0x28,
-	0xad,
-	0xdf,
-	0x5e,
-	0xf0,
-	0x2b,
-	0x9c,
-	0xdf,
-	0x5e,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0xc0,
-	0xa9,
-	0x01,
-	0x8d,
-	0x10,
-	0xc0,
-	0x9c,
-	0x3c,
-	0xc0,
-	0xad,
-	0x37,
-	0xbe,
-	0xae,
-	0x38,
-	0xbe,
-	0x8d,
-	0x70,
-	0xc0,
-	0x8e,
-	0x6c,
-	0xc0,
-	0x9c,
-	0x29,
-	0xc0,
-	0x9c,
-	0x2d,
-	0xc0,
-	0x9c,
-	0x74,
-	0xc0,
-	0x9c,
-	0x20,
-	0xc0,
-	0x9c,
-	0x24,
-	0xc0,
-	0xad,
-	0xdd,
-	0x5e,
-	0x20,
-	0x9e,
-	0x08,
-	0x08,
-	0x78,
-	0xac,
-	0xdd,
-	0x5e,
-	0x99,
-	0x25,
-	0x5f,
-	0x8d,
-	0xe0,
-	0x5e,
-	0xb9,
-	0x3d,
-	0x5f,
-	0xaa,
-	0xb9,
-	0x3b,
-	0x5f,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0x0a,
-	0x99,
-	0x21,
-	0x5f,
-	0x8a,
-	0x2a,
-	0x99,
-	0x23,
-	0x5f,
-	0xa9,
-	0x01,
-	0x9c,
-	0x1c,
-	0xd0,
-	0x8d,
-	0x1c,
-	0xd0,
-	0xee,
-	0xde,
-	0x5e,
-	0xad,
-	0x66,
-	0x5e,
-	0xcd,
-	0x1e,
-	0x5f,
-	0xd0,
-	0x10,
-	0xad,
-	0x67,
-	0x5e,
-	0xcd,
-	0x1f,
-	0x5f,
-	0xd0,
-	0x08,
-	0xad,
-	0x68,
-	0x5e,
-	0xcd,
-	0x20,
-	0x5f,
-	0xf0,
-	0x03,
-	0x4c,
-	0x51,
-	0x07,
-	0xad,
-	0x64,
-	0x5e,
-	0x3a,
-	0xf0,
-	0x0c,
-	0xcc,
-	0x65,
-	0x5e,
-	0xd0,
-	0x07,
-	0x98,
-	0x1a,
-	0x29,
-	0x01,
-	0x4c,
-	0x5b,
-	0x07,
-	0x9c,
-	0x81,
-	0x82,
-	0xad,
-	0x17,
-	0x5f,
-	0xf0,
-	0x14,
-	0xac,
-	0xdd,
-	0x5e,
-	0xb9,
-	0x23,
-	0x5f,
-	0x8d,
-	0x0a,
-	0x02,
-	0xb9,
-	0x21,
-	0x5f,
-	0x8d,
-	0x09,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x0c,
-	0xd0,
-	0x4c,
-	0x28,
-	0x3f,
-	0xaa,
-	0x85,
-	0x1f,
-	0xad,
-	0xed,
-	0x5e,
-	0xa8,
-	0x29,
-	0x01,
-	0x85,
-	0xb6,
-	0x9d,
-	0x53,
-	0x5f,
-	0x98,
-	0x4a,
-	0x29,
-	0x01,
-	0x85,
-	0xbd,
-	0x9d,
-	0x55,
-	0x5f,
-	0x98,
-	0x29,
-	0x03,
-	0xd8,
-	0x4d,
-	0x2e,
-	0xbe,
-	0xf8,
-	0x9d,
-	0x39,
-	0x5f,
-	0xad,
-	0xf9,
-	0x5e,
-	0xf0,
-	0x03,
-	0xa9,
-	0x04,
-	0x60,
-	0xad,
-	0xf8,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xf5,
-	0x98,
-	0x29,
-	0x01,
-	0xf0,
-	0xf0,
-	0xad,
-	0xf7,
-	0x5e,
-	0xd0,
-	0xeb,
-	0xad,
-	0xf6,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xe3,
-	0x98,
-	0x29,
-	0x01,
-	0xf0,
-	0xde,
-	0x18,
-	0xad,
-	0xf8,
-	0x5e,
-	0x6d,
-	0xf6,
-	0x5e,
-	0x4a,
-	0xc9,
-	0x05,
-	0xb0,
-	0xd2,
-	0xa8,
-	0xb9,
-	0xa3,
-	0x59,
-	0xf0,
-	0xcc,
-	0x98,
-	0x85,
-	0x10,
-	0x9d,
-	0x35,
-	0x5f,
-	0xac,
-	0xef,
-	0x5e,
-	0xae,
-	0xee,
-	0x5e,
-	0x20,
-	0xe8,
-	0x06,
-	0xd0,
-	0xbb,
-	0x98,
-	0x4a,
-	0x85,
-	0x17,
-	0x8a,
-	0x6a,
-	0x85,
-	0x16,
-	0xb0,
-	0xb1,
-	0xac,
-	0xf3,
-	0x5e,
-	0xae,
-	0xf2,
-	0x5e,
-	0x20,
-	0xe8,
-	0x06,
-	0xd0,
-	0xa6,
-	0x98,
-	0x4a,
-	0x85,
-	0x19,
-	0x8a,
-	0x6a,
-	0x85,
-	0x18,
-	0x90,
-	0x9c,
-	0xe5,
-	0x16,
-	0xaa,
-	0xa5,
-	0x19,
-	0xe5,
-	0x17,
-	0x30,
-	0x93,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1a,
-	0x86,
-	0x1b,
-	0xa4,
-	0x1f,
-	0x99,
-	0x3b,
-	0x5f,
-	0x8a,
-	0x99,
-	0x3d,
-	0x5f,
-	0xa0,
-	0x00,
-	0xb9,
-	0xae,
-	0x6a,
-	0x38,
-	0xe5,
-	0x16,
-	0xb9,
-	0xc2,
-	0x6a,
-	0xe5,
-	0x17,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xb4,
-	0xb9,
-	0xae,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0xb9,
-	0xc2,
-	0x6a,
-	0xe5,
-	0x19,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xb5,
-	0xa9,
-	0xff,
-	0x85,
-	0x1e,
-	0x64,
-	0x20,
-	0xa5,
-	0xb6,
-	0xd0,
-	0x3b,
-	0xa4,
-	0xb4,
-	0xc4,
-	0xb5,
-	0xf0,
-	0x79,
-	0x5a,
-	0x38,
-	0xb9,
-	0xae,
-	0x6a,
-	0xe5,
-	0x16,
-	0xaa,
-	0xb9,
-	0xc2,
-	0x6a,
-	0xe5,
-	0x17,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x79,
-	0x6a,
-	0x86,
-	0x1e,
-	0xc8,
-	0x80,
-	0xc7,
-	0xa5,
-	0x18,
-	0xd0,
-	0x02,
-	0xc6,
-	0x19,
-	0x3a,
-	0x85,
-	0x18,
-	0xa4,
-	0xb5,
-	0xc4,
-	0xb4,
-	0xf0,
-	0x35,
-	0x5a,
-	0x38,
-	0xa5,
-	0x18,
-	0xf9,
-	0xad,
-	0x6a,
-	0xaa,
-	0xa5,
-	0x19,
-	0xf9,
-	0xc1,
-	0x6a,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x79,
-	0x6a,
-	0x86,
-	0x1e,
-	0x88,
-	0x80,
-	0xc7,
-	0xa5,
-	0x1a,
-	0xa6,
-	0x1b,
-	0xc5,
-	0x1c,
-	0xd0,
-	0x12,
-	0xe4,
-	0x1d,
-	0xd0,
-	0x0e,
-	0xa5,
-	0x20,
-	0xa6,
-	0xb6,
-	0xd0,
-	0x04,
-	0xc6,
-	0xb5,
-	0x80,
-	0x22,
-	0xe6,
-	0xb4,
-	0x80,
-	0x1e,
-	0x0a,
-	0x08,
-	0x1a,
-	0x5a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x7a,
-	0x6a,
-	0x38,
-	0xe5,
-	0x1e,
-	0x99,
-	0x79,
-	0x6a,
-	0x28,
-	0x8a,
-	0x2a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x98,
-	0xa4,
-	0x1f,
-	0x99,
-	0x6f,
-	0x60,
-	0xa5,
-	0xb6,
-	0xd0,
-	0x0d,
-	0xa5,
-	0x16,
-	0xa4,
-	0xb4,
-	0xf0,
-	0x10,
-	0x38,
-	0xf9,
-	0xad,
-	0x6a,
-	0x3a,
-	0x80,
-	0x09,
-	0xa4,
-	0xb5,
-	0xb9,
-	0xae,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0x3a,
-	0xaa,
-	0xa9,
-	0x00,
-	0xa4,
-	0x10,
-	0x20,
-	0x9e,
-	0x0d,
-	0xa4,
-	0x1f,
-	0x99,
-	0x6b,
-	0x5f,
-	0x98,
-	0xd0,
-	0x12,
-	0xac,
-	0x6f,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0x97,
-	0x5f,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x79,
-	0x6a,
-	0x27,
-	0x60,
-	0x80,
-	0x10,
-	0xac,
-	0x70,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0xbf,
-	0x5f,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x79,
-	0x6a,
-	0x3b,
-	0x60,
-	0xa6,
-	0x1f,
-	0xad,
-	0x12,
-	0x5f,
-	0x9d,
-	0x73,
-	0x60,
-	0xad,
-	0xec,
-	0x5e,
-	0xa8,
-	0x29,
-	0x04,
-	0xf0,
-	0x03,
-	0xa9,
-	0x06,
-	0x60,
-	0x98,
-	0x29,
-	0x80,
-	0x9d,
-	0x27,
-	0x5f,
-	0x98,
-	0x29,
-	0x03,
-	0x9d,
-	0x29,
-	0x5f,
-	0xd0,
-	0x03,
-	0x9d,
-	0x27,
-	0x5f,
-	0xa0,
-	0x00,
-	0x29,
-	0x02,
-	0xf0,
-	0x01,
-	0xc8,
-	0x98,
-	0x9d,
-	0x2d,
-	0x5f,
-	0xad,
-	0x0f,
-	0x5f,
-	0xc9,
-	0x81,
-	0x90,
-	0x03,
-	0xa9,
-	0x1b,
-	0x60,
-	0x9d,
-	0x2f,
-	0x5f,
-	0xa9,
-	0xdf,
-	0x9d,
-	0x31,
-	0x5f,
-	0xa9,
-	0x03,
-	0x9d,
-	0x33,
-	0x5f,
-	0xad,
-	0xfd,
-	0x5e,
-	0xf0,
-	0x03,
-	0xa9,
-	0x12,
-	0x60,
-	0xad,
-	0xfc,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xf5,
-	0x98,
-	0x29,
-	0x01,
-	0xd0,
-	0x03,
-	0xa9,
-	0x14,
-	0x60,
-	0xad,
-	0xfb,
-	0x5e,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1a,
-	0x60,
-	0xad,
-	0xfa,
-	0x5e,
-	0xa8,
-	0x29,
-	0xf0,
-	0xd0,
-	0xf5,
-	0x98,
-	0x29,
-	0x01,
-	0xd0,
-	0x03,
-	0xa9,
-	0x18,
-	0x60,
-	0x18,
-	0xad,
-	0xfc,
-	0x5e,
-	0x6d,
-	0xfa,
-	0x5e,
-	0x4a,
-	0xc9,
-	0x05,
-	0x90,
-	0x03,
-	0xa9,
-	0x16,
-	0x60,
-	0xa8,
-	0xb9,
-	0xa3,
-	0x59,
-	0xf0,
-	0xf7,
-	0x98,
-	0x85,
-	0x11,
-	0x9d,
-	0x37,
-	0x5f,
-	0xac,
-	0xf1,
-	0x5e,
-	0xae,
-	0xf0,
-	0x5e,
-	0x20,
-	0xf9,
-	0x06,
-	0xf0,
-	0x03,
-	0xa9,
-	0x08,
-	0x60,
-	0x98,
-	0x4a,
-	0x85,
-	0x17,
-	0x8a,
-	0x6a,
-	0x85,
-	0x16,
-	0x90,
-	0x03,
-	0xa9,
-	0x0c,
-	0x60,
-	0xac,
-	0xf5,
-	0x5e,
-	0xae,
-	0xf4,
-	0x5e,
-	0x20,
-	0xe8,
-	0x06,
-	0xf0,
-	0x03,
-	0xa9,
-	0x0a,
-	0x60,
-	0x98,
-	0x4a,
-	0x85,
-	0x19,
-	0x8a,
-	0x6a,
-	0x85,
-	0x18,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0e,
-	0x60,
-	0xe5,
-	0x16,
-	0x85,
-	0x1a,
-	0xa5,
-	0x19,
-	0xe5,
-	0x17,
-	0x85,
-	0x1b,
-	0x10,
-	0x03,
-	0xa9,
-	0x10,
-	0x60,
-	0xa0,
-	0x00,
-	0xb9,
-	0xd6,
-	0x6a,
-	0x38,
-	0xe5,
-	0x16,
-	0xb9,
-	0xe6,
-	0x6a,
-	0xe5,
-	0x17,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xbe,
-	0xb9,
-	0xd6,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0xb9,
-	0xe6,
-	0x6a,
-	0xe5,
-	0x19,
-	0x10,
-	0x03,
-	0xc8,
-	0x80,
-	0xf0,
-	0x84,
-	0xbf,
-	0xa6,
-	0x1a,
-	0xa5,
-	0x1b,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1a,
-	0x86,
-	0x1b,
-	0xa4,
-	0x1f,
-	0x99,
-	0x3f,
-	0x5f,
-	0x8a,
-	0x99,
-	0x41,
-	0x5f,
-	0xa9,
-	0xff,
-	0x85,
-	0x1e,
-	0x64,
-	0x20,
-	0xa5,
-	0xbd,
-	0xd0,
-	0x3b,
-	0xa4,
-	0xbe,
-	0xc4,
-	0xbf,
-	0xf0,
-	0x79,
-	0x5a,
-	0x38,
-	0xb9,
-	0xd6,
-	0x6a,
-	0xe5,
-	0x16,
-	0xaa,
-	0xb9,
-	0xe6,
-	0x6a,
-	0xe5,
-	0x17,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x8d,
-	0x6a,
-	0x86,
-	0x1e,
-	0xc8,
-	0x80,
-	0xc7,
-	0xa5,
-	0x18,
-	0xd0,
-	0x02,
-	0xc6,
-	0x19,
-	0x3a,
-	0x85,
-	0x18,
-	0xa4,
-	0xbf,
-	0xc4,
-	0xbe,
-	0xf0,
-	0x35,
-	0x5a,
-	0x38,
-	0xa5,
-	0x18,
-	0xf9,
-	0xd5,
-	0x6a,
-	0xaa,
-	0xa5,
-	0x19,
-	0xf9,
-	0xe5,
-	0x6a,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0x1c,
-	0x86,
-	0x1d,
-	0x48,
-	0x0a,
-	0x1a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x8a,
-	0x2a,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x38,
-	0x68,
-	0xaa,
-	0xe5,
-	0x1e,
-	0x7a,
-	0x99,
-	0x8d,
-	0x6a,
-	0x86,
-	0x1e,
-	0x88,
-	0x80,
-	0xc7,
-	0xa5,
-	0x1a,
-	0xa6,
-	0x1b,
-	0xc5,
-	0x1c,
-	0xd0,
-	0x1a,
-	0xe4,
-	0x1d,
-	0xd0,
-	0x16,
-	0xa5,
-	0xbe,
-	0xc5,
-	0xbf,
-	0xf0,
-	0x0e,
-	0xa5,
-	0x20,
-	0xa6,
-	0xbd,
-	0xd0,
-	0x04,
-	0xc6,
-	0xbf,
-	0x80,
-	0x25,
-	0xe6,
-	0xbe,
-	0x80,
-	0x21,
-	0xa5,
-	0x1a,
-	0x0a,
-	0x08,
-	0x1a,
-	0x5a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x84,
-	0x20,
-	0x7a,
-	0x6a,
-	0x38,
-	0xe5,
-	0x1e,
-	0x99,
-	0x8d,
-	0x6a,
-	0x28,
-	0xa5,
-	0x1b,
-	0x2a,
-	0xa4,
-	0x20,
-	0x99,
-	0x6f,
-	0x5f,
-	0xc8,
-	0x98,
-	0xa4,
-	0x1f,
-	0x99,
-	0x71,
-	0x60,
-	0xa5,
-	0xbd,
-	0xd0,
-	0x0d,
-	0xa5,
-	0x16,
-	0xa4,
-	0xbe,
-	0xf0,
-	0x10,
-	0x38,
-	0xf9,
-	0xd5,
-	0x6a,
-	0x3a,
-	0x80,
-	0x09,
-	0xa4,
-	0xbf,
-	0xb9,
-	0xd6,
-	0x6a,
-	0x38,
-	0xe5,
-	0x18,
-	0x3a,
-	0xaa,
-	0xa9,
-	0x00,
-	0xa4,
-	0x11,
-	0x20,
-	0x9e,
-	0x0d,
-	0xa4,
-	0x1f,
-	0x99,
-	0x6d,
-	0x5f,
-	0x98,
-	0xd0,
-	0x12,
-	0xac,
-	0x71,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0xe7,
-	0x5f,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x8d,
-	0x6a,
-	0x4f,
-	0x60,
-	0x80,
-	0x10,
-	0xac,
-	0x72,
-	0x60,
-	0x53,
-	0x6f,
-	0x5f,
-	0x07,
-	0x60,
-	0x98,
-	0x4a,
-	0xa8,
-	0x53,
-	0x8d,
-	0x6a,
-	0x5f,
-	0x60,
-	0x38,
-	0xa5,
-	0xbf,
-	0xe5,
-	0xbe,
-	0x85,
-	0x1e,
-	0x1a,
-	0x85,
-	0xab,
-	0xa5,
-	0xbe,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x02,
-	0xa5,
-	0xbf,
-	0x85,
-	0xb9,
-	0x85,
-	0xaa,
-	0xa5,
-	0xbe,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x02,
-	0xa5,
-	0xbf,
-	0x49,
-	0x3c,
-	0x18,
-	0x69,
-	0x77,
-	0x85,
-	0xb7,
-	0x98,
-	0x69,
-	0x60,
-	0x85,
-	0xb8,
-	0xa5,
-	0xb4,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x02,
-	0xa5,
-	0xb5,
-	0x49,
-	0x03,
-	0x18,
-	0x65,
-	0xb7,
-	0x85,
-	0xb7,
-	0x98,
-	0x65,
-	0xb8,
-	0x85,
-	0xb8,
-	0xa0,
-	0x02,
-	0x53,
-	0xb7,
-	0x00,
-	0xac,
-	0x00,
-	0x53,
-	0xb7,
-	0x00,
-	0xb2,
-	0x00,
-	0x53,
-	0xb7,
-	0x00,
-	0xae,
-	0x00,
-	0xa5,
-	0x1e,
-	0xd0,
-	0x07,
-	0x53,
-	0xb7,
-	0x00,
-	0xb0,
-	0x00,
-	0x80,
-	0x20,
-	0xa5,
-	0xbd,
-	0xd0,
-	0x0f,
-	0x18,
-	0xa5,
-	0xb7,
-	0x69,
-	0x3c,
-	0x85,
-	0xb0,
-	0xa5,
-	0xb8,
-	0x69,
-	0x00,
-	0x85,
-	0xb1,
-	0x80,
-	0x0d,
-	0x38,
-	0xa5,
-	0xb7,
-	0xe9,
-	0x3c,
-	0x85,
-	0xb0,
-	0xa5,
-	0xb8,
-	0xe9,
-	0x00,
-	0x85,
-	0xb1,
-	0xa6,
-	0x1f,
-	0xbd,
-	0x29,
-	0x5f,
-	0x8d,
-	0x76,
-	0x60,
-	0xa9,
-	0x00,
-	0xaa,
-	0x20,
-	0xc5,
-	0x39,
-	0xa5,
-	0xab,
-	0xf0,
-	0x06,
-	0xa9,
-	0x01,
-	0xaa,
-	0x20,
-	0xc5,
-	0x39,
-	0x8a,
-	0xa6,
-	0x1f,
-	0x9d,
-	0x43,
-	0x5f,
-	0xa9,
-	0x01,
-	0x9d,
-	0x2b,
-	0x5f,
-	0xa5,
-	0xab,
-	0x9d,
-	0x45,
-	0x5f,
-	0xa5,
-	0xb7,
-	0x9d,
-	0x57,
-	0x5f,
-	0xa5,
-	0xb8,
-	0x9d,
-	0x59,
-	0x5f,
-	0xa5,
-	0xac,
-	0x9d,
-	0x5b,
-	0x5f,
-	0xa5,
-	0xad,
-	0x9d,
-	0x5d,
-	0x5f,
-	0xa5,
-	0xb2,
-	0x9d,
-	0x5f,
-	0x5f,
-	0xa5,
-	0xb3,
-	0x9d,
-	0x61,
-	0x5f,
-	0xa5,
-	0xae,
-	0x9d,
-	0x63,
-	0x5f,
-	0xa5,
-	0xaf,
-	0x9d,
-	0x65,
-	0x5f,
-	0xa5,
-	0xb0,
-	0x9d,
-	0x67,
-	0x5f,
-	0xa5,
-	0xb1,
-	0x9d,
-	0x69,
-	0x5f,
-	0xa5,
-	0xb4,
-	0x9d,
-	0x47,
-	0x5f,
-	0xa5,
-	0xb5,
-	0x9d,
-	0x49,
-	0x5f,
-	0xa5,
-	0xbe,
-	0x9d,
-	0x4b,
-	0x5f,
-	0xa5,
-	0xbf,
-	0x9d,
-	0x4d,
-	0x5f,
-	0xa5,
-	0xaa,
-	0x9d,
-	0x4f,
-	0x5f,
-	0xa5,
-	0xb9,
-	0x9d,
-	0x51,
-	0x5f,
-	0xa9,
-	0x00,
-	0x60,
-	0xc0,
-	0x01,
-	0xd0,
-	0x04,
-	0xa8,
-	0x8a,
-	0xfc,
-	0x60,
-	0x85,
-	0x12,
-	0x98,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0e,
-	0x29,
-	0x01,
-	0xd0,
-	0x0e,
-	0x46,
-	0x12,
-	0x8a,
-	0x6a,
-	0xaa,
-	0x98,
-	0x4a,
-	0xa8,
-	0x80,
-	0xee,
-	0x8a,
-	0xa6,
-	0x12,
-	0x60,
-	0x8a,
-	0x1a,
-	0xd0,
-	0x02,
-	0xe6,
-	0x12,
-	0x49,
-	0x55,
-	0x84,
-	0x14,
-	0x18,
-	0x65,
-	0x14,
-	0x85,
-	0x13,
-	0x90,
-	0x03,
-	0xe6,
-	0x14,
-	0x18,
-	0xa5,
-	0x12,
-	0x49,
-	0x55,
-	0x84,
-	0x15,
-	0xaa,
-	0x65,
-	0x13,
-	0x8a,
-	0x65,
-	0x14,
-	0x85,
-	0x14,
-	0xa5,
-	0x15,
-	0x90,
-	0x03,
-	0xe6,
-	0x15,
-	0x18,
-	0x65,
-	0x14,
-	0xa6,
-	0x15,
-	0x90,
-	0x01,
-	0xe8,
-	0x60,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0xc0,
-	0x4c,
-	0x00,
-	0x03,
-	0x08,
-	0x68,
-	0x8d,
-	0x16,
-	0x6b,
-	0x64,
-	0x25,
-	0x80,
-	0x06,
-	0xa5,
-	0x25,
-	0xc9,
-	0x01,
-	0xf0,
-	0x03,
-	0x5c,
-	0x80,
-	0xf7,
-	0x20,
-	0xa5,
-	0x0e,
-	0xa5,
-	0x24,
-	0xd0,
-	0x03,
-	0x5c,
-	0x80,
-	0xf9,
-	0xc6,
-	0x24,
-	0xa5,
-	0x60,
-	0x85,
-	0x67,
-	0x20,
-	0x22,
-	0x1d,
-	0xa5,
-	0x60,
-	0xa6,
-	0x23,
-	0xf0,
-	0x07,
-	0xc5,
-	0x27,
-	0xf0,
-	0x0d,
-	0x1a,
-	0x80,
-	0x05,
-	0xc5,
-	0x26,
-	0xf0,
-	0x06,
-	0x3a,
-	0x85,
-	0x67,
-	0x20,
-	0x53,
-	0x1f,
-	0xa5,
-	0x27,
-	0xa6,
-	0x23,
-	0xf0,
-	0x02,
-	0xa5,
-	0x26,
-	0xc5,
-	0x60,
-	0xf0,
-	0x0b,
-	0x8a,
-	0xf0,
-	0x04,
-	0xc6,
-	0x60,
-	0x80,
-	0xc6,
-	0xe6,
-	0x60,
-	0x80,
-	0xc2,
-	0x85,
-	0x67,
-	0x20,
-	0x53,
-	0x1f,
-	0x20,
-	0xd3,
-	0x29,
-	0x80,
-	0xac,
-	0x18,
-	0x69,
-	0x14,
-	0x90,
-	0x01,
-	0xc8,
-	0xda,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0x49,
-	0x66,
-	0x84,
-	0x34,
-	0xa5,
-	0x33,
-	0x49,
-	0x66,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x35,
-	0xa5,
-	0x32,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0x34,
-	0xaa,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xa5,
-	0x33,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0x35,
-	0xe0,
-	0xfa,
-	0x90,
-	0x01,
-	0x1a,
-	0xfa,
-	0x60,
-	0x18,
-	0x69,
-	0x10,
-	0x90,
-	0x01,
-	0xc8,
-	0x84,
-	0x32,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x46,
-	0x32,
-	0x6a,
-	0x60,
-	0xa0,
-	0x12,
-	0x64,
-	0x6e,
-	0x64,
-	0x6f,
-	0x64,
-	0x70,
-	0x64,
-	0x71,
-	0x13,
-	0x6e,
-	0x00,
-	0xc3,
-	0x80,
-	0x64,
-	0x72,
-	0x64,
-	0x73,
-	0xa0,
-	0x48,
-	0x13,
-	0x6e,
-	0x00,
-	0xd5,
-	0x80,
-	0x13,
-	0x6e,
-	0x00,
-	0x1d,
-	0x81,
-	0x13,
-	0x6e,
-	0x00,
-	0x65,
-	0x81,
-	0xad,
-	0x19,
-	0x6b,
-	0xae,
-	0x18,
-	0x6b,
-	0xd0,
-	0x05,
-	0xcd,
-	0x1a,
-	0x6b,
-	0xf0,
-	0x0f,
-	0x20,
-	0xa7,
-	0x0f,
-	0x20,
-	0x92,
-	0x10,
-	0xad,
-	0x19,
-	0x6b,
-	0x8d,
-	0x1a,
-	0x6b,
-	0x9c,
-	0x18,
-	0x6b,
-	0xa6,
-	0x26,
-	0x9e,
-	0x79,
-	0x74,
-	0x9e,
-	0x8b,
-	0x74,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe4,
-	0x27,
-	0xf0,
-	0x19,
-	0x9d,
-	0x7a,
-	0x74,
-	0x48,
-	0x98,
-	0x9d,
-	0x8c,
-	0x74,
-	0x68,
-	0xc9,
-	0x28,
-	0xf0,
-	0x06,
-	0x18,
-	0x69,
-	0x14,
-	0xc8,
-	0x80,
-	0x03,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe8,
-	0x80,
-	0xe3,
-	0x9d,
-	0x7a,
-	0x74,
-	0x9d,
-	0x7b,
-	0x74,
-	0x98,
-	0x9d,
-	0x8c,
-	0x74,
-	0x9d,
-	0x8d,
-	0x74,
-	0x38,
-	0xa5,
-	0x29,
-	0xe5,
-	0x28,
-	0xaa,
-	0x1a,
-	0x85,
-	0x2e,
-	0xbd,
-	0xa8,
-	0x59,
-	0x85,
-	0x2c,
-	0xa2,
-	0x00,
-	0x8a,
-	0x0a,
-	0x1a,
-	0x45,
-	0x2e,
-	0x20,
-	0x5b,
-	0x0e,
-	0x9d,
-	0x1b,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x14,
-	0x90,
-	0xf0,
-	0xa2,
-	0x00,
-	0xbd,
-	0x1b,
-	0x7d,
-	0xdd,
-	0x1c,
-	0x7d,
-	0xd0,
-	0x05,
-	0x09,
-	0x80,
-	0x9d,
-	0x1b,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x13,
-	0x90,
-	0xee,
-	0x38,
-	0xa5,
-	0x27,
-	0xe5,
-	0x26,
-	0xaa,
-	0x1a,
-	0x85,
-	0x2e,
-	0xbd,
-	0xbc,
-	0x59,
-	0x85,
-	0x2d,
-	0xa2,
-	0x00,
-	0x8a,
-	0x0a,
-	0x1a,
-	0x45,
-	0x2e,
-	0x20,
-	0x93,
-	0x0e,
-	0x9d,
-	0x2f,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x10,
-	0x90,
-	0xf0,
-	0xa5,
-	0x23,
-	0xf0,
-	0x14,
-	0xa2,
-	0x0f,
-	0xbd,
-	0x2f,
-	0x7d,
-	0xdd,
-	0x2e,
-	0x7d,
-	0xd0,
-	0x05,
-	0x09,
-	0x80,
-	0x9d,
-	0x2f,
-	0x7d,
-	0xca,
-	0xd0,
-	0xf0,
-	0x80,
-	0x14,
-	0xa2,
-	0x00,
-	0xbd,
-	0x2f,
-	0x7d,
-	0xdd,
-	0x30,
-	0x7d,
-	0xd0,
-	0x05,
-	0x09,
-	0x80,
-	0x9d,
-	0x2f,
-	0x7d,
-	0xe8,
-	0xe0,
-	0x0f,
-	0x90,
-	0xee,
-	0xa9,
-	0x00,
-	0xa6,
-	0x23,
-	0xf0,
-	0x02,
-	0xa9,
-	0x0f,
-	0x85,
-	0x8a,
-	0xe6,
-	0x25,
-	0x60,
-	0x85,
-	0x2e,
-	0xa9,
-	0x39,
-	0x85,
-	0x4a,
-	0xa9,
-	0xbe,
-	0x85,
-	0x4b,
-	0xa2,
-	0x00,
-	0xa0,
-	0x5a,
-	0xa5,
-	0x2e,
-	0xd1,
-	0x4a,
-	0x90,
-	0x19,
-	0xe0,
-	0x04,
-	0xf0,
-	0x0e,
-	0xe8,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x5b,
-	0x85,
-	0x4a,
-	0x90,
-	0xec,
-	0xe6,
-	0x4b,
-	0x80,
-	0xe8,
-	0xa0,
-	0x5a,
-	0xd3,
-	0x4a,
-	0x1f,
-	0x6b,
-	0x60,
-	0x8a,
-	0xf0,
-	0xf6,
-	0xb1,
-	0x4a,
-	0x85,
-	0x30,
-	0x38,
-	0xa5,
-	0x4a,
-	0xe9,
-	0x5b,
-	0x85,
-	0x4c,
-	0xa5,
-	0x4b,
-	0xe9,
-	0x00,
-	0x85,
-	0x4d,
-	0xb1,
-	0x4c,
-	0x85,
-	0x2f,
-	0xc5,
-	0x2e,
-	0xd0,
-	0x07,
-	0xa0,
-	0x5a,
-	0xd3,
-	0x4c,
-	0x1f,
-	0x6b,
-	0x60,
-	0x38,
-	0xa5,
-	0x30,
-	0xe5,
-	0x2e,
-	0x85,
-	0x33,
-	0x64,
-	0x32,
-	0x38,
-	0xa5,
-	0x30,
-	0xe5,
-	0x2f,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x20,
-	0x0b,
-	0x39,
-	0xa5,
-	0x32,
-	0x85,
-	0x2e,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x2f,
-	0xa9,
-	0x06,
-	0x85,
-	0x34,
-	0xa2,
-	0x00,
-	0x64,
-	0x35,
-	0xdc,
-	0xb1,
-	0x4c,
-	0x85,
-	0x30,
-	0xb1,
-	0x4a,
-	0x10,
-	0x20,
-	0xa4,
-	0x35,
-	0xf0,
-	0x1c,
-	0x85,
-	0x31,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x31,
-	0x45,
-	0x2f,
-	0x85,
-	0x31,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x31,
-	0x85,
-	0x32,
-	0x84,
-	0x31,
-	0xa9,
-	0x00,
-	0xe5,
-	0x31,
-	0x85,
-	0x33,
-	0x80,
-	0x06,
-	0x45,
-	0x2f,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0xa5,
-	0x30,
-	0x10,
-	0x1e,
-	0xa4,
-	0x35,
-	0xf0,
-	0x1a,
-	0x85,
-	0x31,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x31,
-	0x45,
-	0x2e,
-	0x85,
-	0x31,
-	0x38,
-	0xa5,
-	0x32,
-	0xe5,
-	0x31,
-	0x85,
-	0x32,
-	0x84,
-	0x31,
-	0xa5,
-	0x33,
-	0xe5,
-	0x31,
-	0x80,
-	0x0a,
-	0x45,
-	0x2e,
-	0x18,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x65,
-	0x33,
-	0xa8,
-	0xa5,
-	0x32,
-	0x10,
-	0x01,
-	0xc8,
-	0x98,
-	0x9d,
-	0x1f,
-	0x6b,
-	0xe8,
-	0xe6,
-	0x35,
-	0xa5,
-	0x35,
-	0xc9,
-	0x0f,
-	0xd0,
-	0x92,
-	0xc6,
-	0x34,
-	0xd0,
-	0x8c,
-	0x60,
-	0xa9,
-	0x9d,
-	0x85,
-	0x4a,
-	0xa9,
-	0x74,
-	0x85,
-	0x4b,
-	0xa9,
-	0xdc,
-	0x85,
-	0x4c,
-	0xa9,
-	0x3f,
-	0x85,
-	0x4d,
-	0x64,
-	0x38,
-	0xa0,
-	0x11,
-	0x13,
-	0x38,
-	0x00,
-	0x39,
-	0x00,
-	0xa9,
-	0x11,
-	0x85,
-	0x30,
-	0xa9,
-	0x15,
-	0x85,
-	0x31,
-	0xa0,
-	0x0e,
-	0xd3,
-	0x4c,
-	0x50,
-	0x00,
-	0x64,
-	0x4e,
-	0xa2,
-	0x00,
-	0xa9,
-	0x06,
-	0x85,
-	0x2e,
-	0x18,
-	0xbd,
-	0x20,
-	0x6b,
-	0x3c,
-	0x45,
-	0x50,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x09,
-	0x7d,
-	0x1f,
-	0x6b,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x80,
-	0x07,
-	0x7d,
-	0x1f,
-	0x6b,
-	0x85,
-	0x33,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0x34,
-	0x18,
-	0xbd,
-	0x21,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x51,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x22,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x52,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x23,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x53,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x24,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x54,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x25,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x55,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x26,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x56,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x27,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x57,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x28,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x58,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x29,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x59,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2a,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x5a,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2b,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x5b,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2c,
-	0x6b,
-	0xf0,
-	0x20,
-	0x3c,
-	0x45,
-	0x5c,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x0d,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x18,
-	0x80,
-	0x09,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0x34,
-	0xbd,
-	0x2d,
-	0x6b,
-	0x3c,
-	0x45,
-	0x5d,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x10,
-	0x08,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0xff,
-	0x80,
-	0x06,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0xa9,
-	0x00,
-	0x65,
-	0x34,
-	0xf0,
-	0x0a,
-	0x10,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x0e,
-	0xa9,
-	0xff,
-	0x80,
-	0x0a,
-	0xa5,
-	0x33,
-	0xa4,
-	0x32,
-	0x10,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0x3a,
-	0x92,
-	0x4a,
-	0xda,
-	0xa6,
-	0x4e,
-	0x18,
-	0x75,
-	0x38,
-	0x95,
-	0x38,
-	0x90,
-	0x07,
-	0x18,
-	0xf6,
-	0x39,
-	0xd0,
-	0x02,
-	0xf6,
-	0x3a,
-	0xe8,
-	0xe8,
-	0xe8,
-	0x86,
-	0x4e,
-	0xe6,
-	0x4a,
-	0xd0,
-	0x02,
-	0xe6,
-	0x4b,
-	0x68,
-	0x69,
-	0x0f,
-	0xaa,
-	0xc6,
-	0x2e,
-	0xf0,
-	0x03,
-	0x4c,
-	0xc2,
-	0x10,
-	0xa5,
-	0x4c,
-	0x69,
-	0x0e,
-	0x85,
-	0x4c,
-	0x90,
-	0x02,
-	0xe6,
-	0x4d,
-	0xc6,
-	0x31,
-	0xf0,
-	0x03,
-	0x4c,
-	0xb3,
-	0x10,
-	0xc6,
-	0x30,
-	0xf0,
-	0x03,
-	0x4c,
-	0xaf,
-	0x10,
-	0x64,
-	0x2e,
-	0xa5,
-	0x2e,
-	0x49,
-	0x09,
-	0xa8,
-	0xa2,
-	0x00,
-	0xa9,
-	0x03,
-	0x85,
-	0x2f,
-	0xb9,
-	0x38,
-	0x00,
-	0x0a,
-	0x48,
-	0xb9,
-	0x39,
-	0x00,
-	0x2a,
-	0x95,
-	0x50,
-	0xb9,
-	0x3a,
-	0x00,
-	0x2a,
-	0x95,
-	0x51,
-	0x68,
-	0x0a,
-	0x90,
-	0x06,
-	0xf6,
-	0x50,
-	0xd0,
-	0x02,
-	0xf6,
-	0x51,
-	0xc8,
-	0xc8,
-	0xc8,
-	0xe8,
-	0xe8,
-	0xc6,
-	0x2f,
-	0xd0,
-	0xdc,
-	0xa0,
-	0x00,
-	0x38,
-	0xa5,
-	0x50,
-	0xe5,
-	0x52,
-	0x85,
-	0x2f,
-	0xa5,
-	0x51,
-	0xe5,
-	0x53,
-	0x08,
-	0x05,
-	0x2f,
-	0x85,
-	0x2f,
-	0xd0,
-	0x01,
-	0xc8,
-	0x38,
-	0xa5,
-	0x52,
-	0xe5,
-	0x54,
-	0x85,
-	0x30,
-	0xa5,
-	0x53,
-	0xe5,
-	0x55,
-	0x08,
-	0x05,
-	0x30,
-	0x85,
-	0x30,
-	0xd0,
-	0x01,
-	0xc8,
-	0x38,
-	0xa5,
-	0x54,
-	0xe5,
-	0x50,
-	0x85,
-	0x31,
-	0xa5,
-	0x55,
-	0xe5,
-	0x51,
-	0x08,
-	0x05,
-	0x31,
-	0x85,
-	0x31,
-	0xd0,
-	0x01,
-	0xc8,
-	0xa6,
-	0x2e,
-	0x98,
-	0x95,
-	0xdc,
-	0xa9,
-	0x00,
-	0xa8,
-	0x28,
-	0xb0,
-	0x03,
-	0x69,
-	0x04,
-	0xc8,
-	0x28,
-	0xb0,
-	0x03,
-	0x1a,
-	0x1a,
-	0xc8,
-	0x28,
-	0xb0,
-	0x02,
-	0x1a,
-	0xc8,
-	0xc0,
-	0x01,
-	0xd0,
-	0x26,
-	0xc9,
-	0x01,
-	0xd0,
-	0x08,
-	0xa4,
-	0x30,
-	0xd0,
-	0x1e,
-	0xa9,
-	0x00,
-	0x80,
-	0x1a,
-	0xc9,
-	0x02,
-	0xd0,
-	0x08,
-	0xa4,
-	0x2f,
-	0xd0,
-	0x12,
-	0xa9,
-	0x00,
-	0x80,
-	0x0e,
-	0xa4,
-	0x2f,
-	0xd0,
-	0x04,
-	0xa9,
-	0x05,
-	0x80,
-	0x06,
-	0xa4,
-	0x30,
-	0xd0,
-	0x02,
-	0xa9,
-	0x06,
-	0x49,
-	0x03,
-	0xa8,
-	0xb9,
-	0xa3,
-	0x3f,
-	0x85,
-	0x5d,
-	0xb9,
-	0xa4,
-	0x3f,
-	0x85,
-	0x5e,
-	0xb9,
-	0xa5,
-	0x3f,
-	0x85,
-	0x5f,
-	0xa6,
-	0x5e,
-	0xa4,
-	0x5d,
-	0x98,
-	0x0a,
-	0xa8,
-	0xb9,
-	0x50,
-	0x00,
-	0x85,
-	0x32,
-	0xb9,
-	0x51,
-	0x00,
-	0x85,
-	0x33,
-	0xa5,
-	0x2e,
-	0x49,
-	0x06,
-	0xaa,
-	0xa0,
-	0x00,
-	0x38,
-	0xb9,
-	0x50,
-	0x00,
-	0xe5,
-	0x32,
-	0x9d,
-	0xfb,
-	0x7c,
-	0xb9,
-	0x51,
-	0x00,
-	0xe5,
-	0x33,
-	0x9d,
-	0xfc,
-	0x7c,
-	0xe8,
-	0xe8,
-	0xc8,
-	0xc8,
-	0xc0,
-	0x06,
-	0xd0,
-	0xe7,
-	0xa5,
-	0x2e,
-	0x49,
-	0x03,
-	0xaa,
-	0xa5,
-	0x5d,
-	0x9d,
-	0x07,
-	0x7d,
-	0xa5,
-	0x5e,
-	0x9d,
-	0x08,
-	0x7d,
-	0xa5,
-	0x5f,
-	0x9d,
-	0x09,
-	0x7d,
-	0xa5,
-	0x2e,
-	0x49,
-	0x06,
-	0xa8,
-	0x18,
-	0x65,
-	0x5f,
-	0x65,
-	0x5f,
-	0xaa,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x6b,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x6a,
-	0x98,
-	0x18,
-	0x65,
-	0x5e,
-	0x65,
-	0x5e,
-	0xaa,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x69,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x68,
-	0x49,
-	0x10,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0x18,
-	0xa5,
-	0x69,
-	0x49,
-	0x10,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x38,
-	0xa5,
-	0x6a,
-	0xe5,
-	0x68,
-	0x85,
-	0x34,
-	0xa5,
-	0x6b,
-	0xe5,
-	0x69,
-	0x85,
-	0x35,
-	0x20,
-	0x2f,
-	0x39,
-	0xa0,
-	0x02,
-	0x53,
-	0x32,
-	0x00,
-	0x56,
-	0x00,
-	0x18,
-	0xa5,
-	0x68,
-	0x65,
-	0x6a,
-	0x85,
-	0x58,
-	0xa5,
-	0x69,
-	0x65,
-	0x6b,
-	0x85,
-	0x59,
-	0xa5,
-	0x56,
-	0x45,
-	0x68,
-	0x85,
-	0x5a,
-	0x84,
-	0x5b,
-	0xa5,
-	0x57,
-	0x45,
-	0x68,
-	0x18,
-	0x65,
-	0x5b,
-	0x85,
-	0x5b,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x5c,
-	0xa5,
-	0x56,
-	0x45,
-	0x69,
-	0x18,
-	0x65,
-	0x5b,
-	0x85,
-	0x5b,
-	0x98,
-	0x65,
-	0x5c,
-	0x85,
-	0x5c,
-	0xa5,
-	0x57,
-	0x45,
-	0x69,
-	0x18,
-	0x65,
-	0x5c,
-	0x85,
-	0x5c,
-	0xa5,
-	0x2e,
-	0x49,
-	0x07,
-	0x18,
-	0x69,
-	0x0d,
-	0x85,
-	0x4c,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x4d,
-	0xa0,
-	0x07,
-	0x73,
-	0x56,
-	0x00,
-	0x4c,
-	0xa5,
-	0x2e,
-	0x1a,
-	0xc9,
-	0x02,
-	0xf0,
-	0x05,
-	0x85,
-	0x2e,
-	0x4c,
-	0x14,
-	0x13,
-	0x60,
-	0xa2,
-	0x00,
-	0xa8,
-	0x30,
-	0x04,
-	0xe8,
-	0x0a,
-	0x10,
-	0xfc,
-	0xbd,
-	0xb8,
-	0x3f,
-	0xaa,
-	0x60,
-	0xa5,
-	0x9a,
-	0x05,
-	0x9e,
-	0x05,
-	0xa2,
-	0x05,
-	0xa6,
-	0xf0,
-	0x33,
-	0x20,
-	0xc0,
-	0x14,
-	0x45,
-	0x99,
-	0x84,
-	0xea,
-	0x8a,
-	0x45,
-	0x9a,
-	0x05,
-	0xea,
-	0x85,
-	0xea,
-	0x8a,
-	0x45,
-	0x9d,
-	0x84,
-	0xeb,
-	0x8a,
-	0x45,
-	0x9e,
-	0x05,
-	0xeb,
-	0x85,
-	0xeb,
-	0x8a,
-	0x45,
-	0xa1,
-	0x84,
-	0xec,
-	0x8a,
-	0x45,
-	0xa2,
-	0x05,
-	0xec,
-	0x85,
-	0xec,
-	0x8a,
-	0x45,
-	0xa5,
-	0x84,
-	0xed,
-	0x8a,
-	0x45,
-	0xa6,
-	0x05,
-	0xed,
-	0x85,
-	0xed,
-	0x60,
-	0xa5,
-	0x99,
-	0x05,
-	0x9d,
-	0x05,
-	0xa1,
-	0x05,
-	0xa5,
-	0xf0,
-	0x33,
-	0x20,
-	0xc0,
-	0x14,
-	0x45,
-	0x98,
-	0x84,
-	0xea,
-	0x8a,
-	0x45,
-	0x99,
-	0x05,
-	0xea,
-	0x85,
-	0xea,
-	0x8a,
-	0x45,
-	0x9c,
-	0x84,
-	0xeb,
-	0x8a,
-	0x45,
-	0x9d,
-	0x05,
-	0xeb,
-	0x85,
-	0xeb,
-	0x8a,
-	0x45,
-	0xa0,
-	0x84,
-	0xec,
-	0x8a,
-	0x45,
-	0xa1,
-	0x05,
-	0xec,
-	0x85,
-	0xec,
-	0x8a,
-	0x45,
-	0xa4,
-	0x84,
-	0xed,
-	0x8a,
-	0x45,
-	0xa5,
-	0x05,
-	0xed,
-	0x85,
-	0xed,
-	0x60,
-	0xa5,
-	0x98,
-	0x85,
-	0xea,
-	0xa5,
-	0x9c,
-	0x85,
-	0xeb,
-	0xa5,
-	0xa0,
-	0x85,
-	0xec,
-	0xa5,
-	0xa4,
-	0x85,
-	0xed,
-	0x60,
-	0xaa,
-	0x45,
-	0xc8,
-	0x84,
-	0xcb,
-	0x8a,
-	0x45,
-	0xc9,
-	0x18,
-	0x65,
-	0xcb,
-	0x90,
-	0x01,
-	0xc8,
-	0x84,
-	0xe7,
-	0x8a,
-	0x45,
-	0xcc,
-	0x84,
-	0xcf,
-	0x8a,
-	0x45,
-	0xcd,
-	0x18,
-	0x65,
-	0xcf,
-	0x90,
-	0x01,
-	0xc8,
-	0x98,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x85,
-	0xe8,
-	0x8a,
-	0x45,
-	0xc4,
-	0x84,
-	0xc7,
-	0x8a,
-	0x45,
-	0xc5,
-	0x18,
-	0x65,
-	0xc7,
-	0x90,
-	0x02,
-	0x18,
-	0xc8,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0x8a,
-	0x45,
-	0xc6,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xd0,
-	0x84,
-	0xd3,
-	0x8a,
-	0x45,
-	0xd1,
-	0x18,
-	0x65,
-	0xd3,
-	0x90,
-	0x02,
-	0x18,
-	0xc8,
-	0x85,
-	0xd0,
-	0x84,
-	0xd1,
-	0x8a,
-	0x45,
-	0xd2,
-	0x65,
-	0xd1,
-	0x85,
-	0xd1,
-	0x18,
-	0xa5,
-	0xc4,
-	0x65,
-	0xd0,
-	0xa5,
-	0xc5,
-	0x65,
-	0xd1,
-	0x6a,
-	0xa8,
-	0x90,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0x3a,
-	0x85,
-	0xe9,
-	0x98,
-	0x4a,
-	0x4a,
-	0x49,
-	0x20,
-	0x05,
-	0xe7,
-	0x85,
-	0xe7,
-	0x98,
-	0x05,
-	0xe8,
-	0x85,
-	0xe8,
-	0x38,
-	0xa5,
-	0xc4,
-	0xe5,
-	0xd0,
-	0xaa,
-	0xa5,
-	0xc5,
-	0xe5,
-	0xd1,
-	0xb0,
-	0x52,
-	0x38,
-	0xa5,
-	0xd0,
-	0xe5,
-	0xc4,
-	0x85,
-	0xca,
-	0xa5,
-	0xd1,
-	0xe5,
-	0xc5,
-	0x85,
-	0xcb,
-	0xa4,
-	0xe9,
-	0xb9,
-	0xcc,
-	0x59,
-	0xaa,
-	0x45,
-	0xca,
-	0x84,
-	0xc4,
-	0x8a,
-	0x45,
-	0xcb,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x69,
-	0x00,
-	0xa4,
-	0xe9,
-	0xbe,
-	0xcc,
-	0x5a,
-	0xf0,
-	0x14,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xca,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xcb,
-	0x65,
-	0xc5,
-	0xa6,
-	0xc4,
-	0x10,
-	0x01,
-	0x1a,
-	0xc9,
-	0x27,
-	0x90,
-	0x02,
-	0xa9,
-	0x26,
-	0x85,
-	0xe6,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0xe6,
-	0x85,
-	0xe6,
-	0x60,
-	0x86,
-	0xca,
-	0x85,
-	0xcb,
-	0xa4,
-	0xe9,
-	0xb9,
-	0xcc,
-	0x59,
-	0xaa,
-	0x45,
-	0xca,
-	0x84,
-	0xc4,
-	0x8a,
-	0x45,
-	0xcb,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x69,
-	0x00,
-	0xa4,
-	0xe9,
-	0xbe,
-	0xcc,
-	0x5a,
-	0xf0,
-	0x14,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xca,
-	0x18,
-	0x65,
-	0xc4,
-	0x85,
-	0xc4,
-	0x98,
-	0x65,
-	0xc5,
-	0x85,
-	0xc5,
-	0x8a,
-	0x45,
-	0xcb,
-	0x65,
-	0xc5,
-	0xa6,
-	0xc4,
-	0x10,
-	0x01,
-	0x1a,
-	0xc9,
-	0x27,
-	0x90,
-	0x02,
-	0xa9,
-	0x26,
-	0x85,
-	0xe6,
-	0x60,
-	0xa5,
-	0xc4,
-	0x0a,
-	0xa5,
-	0xc5,
-	0x2a,
-	0x85,
-	0xc4,
-	0xa5,
-	0xc6,
-	0x2a,
-	0x85,
-	0xc5,
-	0xa5,
-	0xc7,
-	0x2a,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc9,
-	0x4a,
-	0x4a,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x49,
-	0x40,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x49,
-	0x40,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcd,
-	0x4a,
-	0x4a,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x49,
-	0x40,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x49,
-	0x40,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0xa5,
-	0xd0,
-	0x0a,
-	0xa5,
-	0xd1,
-	0x2a,
-	0x85,
-	0xd0,
-	0xa5,
-	0xd2,
-	0x2a,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd3,
-	0x2a,
-	0x85,
-	0xd2,
-	0x60,
-	0xa5,
-	0xc4,
-	0x49,
-	0x04,
-	0x84,
-	0xc4,
-	0xa5,
-	0xc5,
-	0x49,
-	0x04,
-	0x05,
-	0xc4,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0xa5,
-	0xc6,
-	0x49,
-	0x04,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x84,
-	0xc6,
-	0xa5,
-	0xc9,
-	0x4a,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x49,
-	0x80,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x49,
-	0x80,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcd,
-	0x4a,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x49,
-	0x80,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x49,
-	0x80,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0xa5,
-	0xd0,
-	0x49,
-	0x04,
-	0x84,
-	0xd0,
-	0xa5,
-	0xd1,
-	0x49,
-	0x04,
-	0x05,
-	0xd0,
-	0x85,
-	0xd0,
-	0x84,
-	0xd1,
-	0xa5,
-	0xd2,
-	0x49,
-	0x04,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x84,
-	0xd2,
-	0x60,
-	0xa5,
-	0xc4,
-	0x49,
-	0x08,
-	0x84,
-	0xc4,
-	0xa5,
-	0xc5,
-	0x49,
-	0x08,
-	0x05,
-	0xc4,
-	0x85,
-	0xc4,
-	0x84,
-	0xc5,
-	0xa5,
-	0xc6,
-	0x49,
-	0x08,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x84,
-	0xc6,
-	0xa5,
-	0xc9,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x85,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x85,
-	0xca,
-	0xa5,
-	0xcd,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x85,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x85,
-	0xce,
-	0xa5,
-	0xd0,
-	0x49,
-	0x08,
-	0x84,
-	0xd0,
-	0xa5,
-	0xd1,
-	0x49,
-	0x08,
-	0x05,
-	0xd0,
-	0x85,
-	0xd0,
-	0x84,
-	0xd1,
-	0xa5,
-	0xd2,
-	0x49,
-	0x08,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x84,
-	0xd2,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0xa5,
-	0xc8,
-	0x0a,
-	0xa5,
-	0xc9,
-	0x2a,
-	0x85,
-	0xc8,
-	0xa5,
-	0xca,
-	0x2a,
-	0x85,
-	0xc9,
-	0xa5,
-	0xcb,
-	0x2a,
-	0x85,
-	0xca,
-	0xa5,
-	0xcc,
-	0x0a,
-	0xa5,
-	0xcd,
-	0x2a,
-	0x85,
-	0xcc,
-	0xa5,
-	0xce,
-	0x2a,
-	0x85,
-	0xcd,
-	0xa5,
-	0xcf,
-	0x2a,
-	0x85,
-	0xce,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0xa5,
-	0xc8,
-	0x49,
-	0x04,
-	0x84,
-	0xc8,
-	0xa5,
-	0xc9,
-	0x49,
-	0x04,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xca,
-	0x49,
-	0x04,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcc,
-	0x49,
-	0x04,
-	0x84,
-	0xcc,
-	0xa5,
-	0xcd,
-	0x49,
-	0x04,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xce,
-	0x49,
-	0x04,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0xa5,
-	0xc8,
-	0x49,
-	0x08,
-	0x84,
-	0xc8,
-	0xa5,
-	0xc9,
-	0x49,
-	0x08,
-	0x05,
-	0xc8,
-	0x85,
-	0xc8,
-	0x84,
-	0xc9,
-	0xa5,
-	0xca,
-	0x49,
-	0x08,
-	0x05,
-	0xc9,
-	0x85,
-	0xc9,
-	0x84,
-	0xca,
-	0xa5,
-	0xcc,
-	0x49,
-	0x08,
-	0x84,
-	0xcc,
-	0xa5,
-	0xcd,
-	0x49,
-	0x08,
-	0x05,
-	0xcc,
-	0x85,
-	0xcc,
-	0x84,
-	0xcd,
-	0xa5,
-	0xce,
-	0x49,
-	0x08,
-	0x05,
-	0xcd,
-	0x85,
-	0xcd,
-	0x84,
-	0xce,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xc6,
-	0x66,
-	0xc5,
-	0x66,
-	0xc4,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x66,
-	0xd0,
-	0x60,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x46,
-	0xca,
-	0x66,
-	0xc9,
-	0x66,
-	0xc8,
-	0x46,
-	0xce,
-	0x66,
-	0xcd,
-	0x66,
-	0xcc,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc4,
-	0x26,
-	0xc5,
-	0x26,
-	0xc6,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x06,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x60,
-	0xa5,
-	0xc7,
-	0x49,
-	0x20,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc6,
-	0x49,
-	0x20,
-	0x85,
-	0xc6,
-	0x98,
-	0x05,
-	0xc7,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc5,
-	0x49,
-	0x20,
-	0x85,
-	0xc5,
-	0x98,
-	0x05,
-	0xc6,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc4,
-	0x49,
-	0x20,
-	0x85,
-	0xc4,
-	0x98,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0xa5,
-	0xd3,
-	0x49,
-	0x20,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd2,
-	0x49,
-	0x20,
-	0x85,
-	0xd2,
-	0x98,
-	0x05,
-	0xd3,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd1,
-	0x49,
-	0x20,
-	0x85,
-	0xd1,
-	0x98,
-	0x05,
-	0xd2,
-	0x85,
-	0xd2,
-	0xa5,
-	0xd0,
-	0x49,
-	0x20,
-	0x85,
-	0xd0,
-	0x98,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x60,
-	0xa5,
-	0xc7,
-	0x49,
-	0x40,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc6,
-	0x49,
-	0x40,
-	0x85,
-	0xc6,
-	0x98,
-	0x05,
-	0xc7,
-	0x85,
-	0xc7,
-	0xa5,
-	0xc5,
-	0x49,
-	0x40,
-	0x85,
-	0xc5,
-	0x98,
-	0x05,
-	0xc6,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc4,
-	0x49,
-	0x40,
-	0x85,
-	0xc4,
-	0x98,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xc8,
-	0x26,
-	0xc9,
-	0x26,
-	0xca,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0x06,
-	0xcc,
-	0x26,
-	0xcd,
-	0x26,
-	0xce,
-	0xa5,
-	0xd3,
-	0x49,
-	0x40,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd2,
-	0x49,
-	0x40,
-	0x85,
-	0xd2,
-	0x98,
-	0x05,
-	0xd3,
-	0x85,
-	0xd3,
-	0xa5,
-	0xd1,
-	0x49,
-	0x40,
-	0x85,
-	0xd1,
-	0x98,
-	0x05,
-	0xd2,
-	0x85,
-	0xd2,
-	0xa5,
-	0xd0,
-	0x49,
-	0x40,
-	0x85,
-	0xd0,
-	0x98,
-	0x05,
-	0xd1,
-	0x85,
-	0xd1,
-	0x60,
-	0x20,
-	0x7b,
-	0x3b,
-	0x46,
-	0xe5,
-	0x66,
-	0xe4,
-	0x90,
-	0x06,
-	0xe6,
-	0xe4,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe5,
-	0x38,
-	0xa5,
-	0xe6,
-	0xe5,
-	0xe4,
-	0xa5,
-	0xe7,
-	0xe5,
-	0xe5,
-	0x30,
-	0x06,
-	0xe6,
-	0xe2,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe3,
-	0x60,
-	0x64,
-	0x22,
-	0x64,
-	0xa8,
-	0x9c,
-	0x9d,
-	0x6a,
-	0xa9,
-	0x77,
-	0x85,
-	0xe2,
-	0xa9,
-	0x60,
-	0x85,
-	0xe3,
-	0xa2,
-	0xc0,
-	0xa9,
-	0x03,
-	0x20,
-	0x90,
-	0x3e,
-	0xa9,
-	0x80,
-	0x85,
-	0xde,
-	0xa9,
-	0x1b,
-	0x85,
-	0xe2,
-	0xa9,
-	0x6c,
-	0x85,
-	0xe3,
-	0xa2,
-	0x94,
-	0xa9,
-	0x05,
-	0x20,
-	0x92,
-	0x3e,
-	0xa0,
-	0x06,
-	0x53,
-	0x4c,
-	0x5c,
-	0x79,
-	0x6b,
-	0xa0,
-	0x96,
-	0x13,
-	0xa8,
-	0x00,
-	0x85,
-	0x6b,
-	0xa9,
-	0x01,
-	0x8d,
-	0x18,
-	0x6b,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2a,
-	0xbe,
-	0xe8,
-	0x00,
-	0x88,
-	0x98,
-	0x0a,
-	0xaa,
-	0xb9,
-	0xa3,
-	0x59,
-	0xd0,
-	0x14,
-	0x9e,
-	0x9c,
-	0x6a,
-	0x9e,
-	0x9d,
-	0x6a,
-	0x9e,
-	0xf4,
-	0x6a,
-	0x9e,
-	0xf5,
-	0x6a,
-	0x9e,
-	0x04,
-	0x6b,
-	0x9e,
-	0x05,
-	0x6b,
-	0x80,
-	0x6d,
-	0x5a,
-	0xda,
-	0xa5,
-	0xe9,
-	0xa6,
-	0xe8,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0xea,
-	0x86,
-	0xeb,
-	0xdc,
-	0x20,
-	0x5b,
-	0x0e,
-	0xfa,
-	0x9d,
-	0x9c,
-	0x6a,
-	0x9d,
-	0x9d,
-	0x6a,
-	0x49,
-	0x28,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x38,
-	0xa5,
-	0xea,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa5,
-	0xeb,
-	0xe5,
-	0xed,
-	0x05,
-	0xec,
-	0xf0,
-	0x03,
-	0xfe,
-	0x9d,
-	0x6a,
-	0xbd,
-	0x9d,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x80,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0xf5,
-	0x6a,
-	0xa5,
-	0xe2,
-	0x9d,
-	0xf4,
-	0x6a,
-	0xbd,
-	0x9d,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x40,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0x05,
-	0x6b,
-	0xa5,
-	0xe2,
-	0x9d,
-	0x04,
-	0x6b,
-	0x7a,
-	0xc8,
-	0xc0,
-	0x05,
-	0xb0,
-	0x03,
-	0x4c,
-	0xc8,
-	0x1a,
-	0xad,
-	0x9e,
-	0x6a,
-	0x49,
-	0x28,
-	0x85,
-	0xde,
-	0x38,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xde,
-	0x4a,
-	0x85,
-	0xde,
-	0x64,
-	0xdf,
-	0xa9,
-	0xff,
-	0x85,
-	0xe8,
-	0x85,
-	0xe9,
-	0xa2,
-	0x01,
-	0x18,
-	0xa5,
-	0xe8,
-	0x6d,
-	0x9e,
-	0x6a,
-	0x85,
-	0xe8,
-	0x90,
-	0x02,
-	0xe6,
-	0xe9,
-	0x8a,
-	0x0a,
-	0x45,
-	0xde,
-	0x20,
-	0x55,
-	0x0e,
-	0xc5,
-	0xdf,
-	0xf0,
-	0x06,
-	0xe6,
-	0xe8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe9,
-	0x85,
-	0xdf,
-	0xa5,
-	0xe8,
-	0x9d,
-	0xad,
-	0x6a,
-	0xa5,
-	0xe9,
-	0x9d,
-	0xc1,
-	0x6a,
-	0xe8,
-	0xe0,
-	0x15,
-	0x90,
-	0xd2,
-	0xa0,
-	0x02,
-	0x53,
-	0x2c,
-	0xbe,
-	0xe8,
-	0x00,
-	0x88,
-	0x98,
-	0x0a,
-	0xaa,
-	0xb9,
-	0xa3,
-	0x59,
-	0xd0,
-	0x14,
-	0x9e,
-	0xa4,
-	0x6a,
-	0x9e,
-	0xa5,
-	0x6a,
-	0x9e,
-	0xfc,
-	0x6a,
-	0x9e,
-	0xfd,
-	0x6a,
-	0x9e,
-	0x0c,
-	0x6b,
-	0x9e,
-	0x0d,
-	0x6b,
-	0x80,
-	0x6d,
-	0x5a,
-	0xda,
-	0xa5,
-	0xe9,
-	0xa6,
-	0xe8,
-	0x20,
-	0x9e,
-	0x0d,
-	0x85,
-	0xea,
-	0x86,
-	0xeb,
-	0xdc,
-	0x20,
-	0x93,
-	0x0e,
-	0xfa,
-	0x9d,
-	0xa4,
-	0x6a,
-	0x9d,
-	0xa5,
-	0x6a,
-	0x49,
-	0x20,
-	0x85,
-	0xec,
-	0x84,
-	0xed,
-	0x38,
-	0xa5,
-	0xea,
-	0xe5,
-	0xec,
-	0x85,
-	0xec,
-	0xa5,
-	0xeb,
-	0xe5,
-	0xed,
-	0x05,
-	0xec,
-	0xf0,
-	0x03,
-	0xfe,
-	0xa5,
-	0x6a,
-	0xbd,
-	0xa5,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x80,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0xfd,
-	0x6a,
-	0xa5,
-	0xe2,
-	0x9d,
-	0xfc,
-	0x6a,
-	0xbd,
-	0xa5,
-	0x6a,
-	0x85,
-	0xe4,
-	0x64,
-	0xe5,
-	0xa9,
-	0x00,
-	0x85,
-	0xe2,
-	0xa9,
-	0x40,
-	0x85,
-	0xe3,
-	0xda,
-	0x20,
-	0x62,
-	0x1a,
-	0xfa,
-	0xa5,
-	0xe3,
-	0x9d,
-	0x0d,
-	0x6b,
-	0xa5,
-	0xe2,
-	0x9d,
-	0x0c,
-	0x6b,
-	0x7a,
-	0xc8,
-	0xc0,
-	0x05,
-	0xb0,
-	0x03,
-	0x4c,
-	0xa8,
-	0x1b,
-	0xad,
-	0xa6,
-	0x6a,
-	0x49,
-	0x20,
-	0x85,
-	0xde,
-	0x38,
-	0xa5,
-	0xe8,
-	0xe5,
-	0xde,
-	0x4a,
-	0x85,
-	0xde,
-	0x64,
-	0xdf,
-	0xa9,
-	0xff,
-	0x85,
-	0xe8,
-	0x85,
-	0xe9,
-	0xa2,
-	0x01,
-	0x18,
-	0xa5,
-	0xe8,
-	0x6d,
-	0xa6,
-	0x6a,
-	0x85,
-	0xe8,
-	0x90,
-	0x02,
-	0xe6,
-	0xe9,
-	0x8a,
-	0x0a,
-	0x45,
-	0xde,
-	0x20,
-	0x8d,
-	0x0e,
-	0xc5,
-	0xdf,
-	0xf0,
-	0x06,
-	0xe6,
-	0xe8,
-	0xd0,
-	0x02,
-	0xe6,
-	0xe9,
-	0x85,
-	0xdf,
-	0xa5,
-	0xe8,
-	0x9d,
-	0xd5,
-	0x6a,
-	0xa5,
-	0xe9,
-	0x9d,
-	0xe5,
-	0x6a,
-	0xe8,
-	0xe0,
-	0x11,
-	0x90,
-	0xd2,
-	0xa9,
-	0x01,
-	0x8d,
-	0x9d,
-	0x6a,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0xa9,
-	0x3e,
-	0x48,
-	0xad,
-	0x34,
-	0xc0,
-	0xaa,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x07,
-	0xad,
-	0x76,
-	0x60,
-	0xd0,
-	0x07,
-	0x80,
-	0x38,
-	0x8a,
-	0x29,
-	0xf8,
-	0xf0,
-	0x1b,
-	0xac,
-	0x76,
-	0x60,
-	0xf0,
-	0x06,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x20,
-	0x47,
-	0x3c,
-	0xa5,
-	0xba,
-	0xf0,
-	0x24,
-	0x8a,
-	0x29,
-	0x04,
-	0x09,
-	0x09,
-	0x8d,
-	0x38,
-	0xc0,
-	0xc6,
-	0xba,
-	0x80,
-	0x18,
-	0xa5,
-	0xab,
-	0xf0,
-	0x14,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x20,
-	0xc5,
-	0x39,
-	0xa0,
-	0x01,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x01,
-	0xf0,
-	0x02,
-	0xa0,
-	0x05,
-	0x8c,
-	0x38,
-	0xc0,
-	0x8a,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x42,
-	0xa5,
-	0xbe,
-	0xf0,
-	0x0f,
-	0x49,
-	0x3c,
-	0xaa,
-	0xa9,
-	0x77,
-	0x85,
-	0xe2,
-	0xa9,
-	0x60,
-	0x85,
-	0xe3,
-	0x98,
-	0x20,
-	0x90,
-	0x3e,
-	0x38,
-	0xa9,
-	0x0f,
-	0xe5,
-	0xbf,
-	0xf0,
-	0x1a,
-	0x49,
-	0x3c,
-	0x85,
-	0xe4,
-	0x84,
-	0xe5,
-	0x38,
-	0xa9,
-	0x37,
-	0xe5,
-	0xe4,
-	0x85,
-	0xe2,
-	0xa9,
-	0x64,
-	0xe5,
-	0xe5,
-	0x85,
-	0xe3,
-	0xa6,
-	0xe4,
-	0xa5,
-	0xe5,
-	0x20,
-	0x90,
-	0x3e,
-	0xa9,
-	0x01,
-	0x9c,
-	0x24,
-	0xd0,
-	0x8d,
-	0x24,
-	0xd0,
-	0x9c,
-	0x75,
-	0x60,
-	0x20,
-	0x36,
-	0x3f,
-	0x4c,
-	0x0b,
-	0x3f,
-	0xa6,
-	0x67,
-	0xbd,
-	0x7a,
-	0x74,
-	0xaa,
-	0x18,
-	0x69,
-	0xb7,
-	0x85,
-	0x50,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x51,
-	0x8a,
-	0x0a,
-	0xaa,
-	0x69,
-	0xf3,
-	0x85,
-	0x4a,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x4b,
-	0x8a,
-	0x69,
-	0x6b,
-	0x85,
-	0x4c,
-	0xa9,
-	0x7e,
-	0x69,
-	0x00,
-	0x85,
-	0x4d,
-	0x8a,
-	0x69,
-	0x3f,
-	0x85,
-	0x4e,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x4f,
-	0xa6,
-	0x67,
-	0xbd,
-	0x8c,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x56,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x57,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x58,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x59,
-	0xa5,
-	0x67,
-	0x49,
-	0x7e,
-	0x18,
-	0x69,
-	0x9d,
-	0x85,
-	0x52,
-	0x98,
-	0x69,
-	0x74,
-	0x85,
-	0x53,
-	0xa5,
-	0x28,
-	0x49,
-	0x06,
-	0x18,
-	0x65,
-	0x52,
-	0x85,
-	0x52,
-	0x98,
-	0x65,
-	0x53,
-	0x85,
-	0x53,
-	0xa0,
-	0x02,
-	0x53,
-	0x2a,
-	0x00,
-	0x3a,
-	0x00,
-	0xa5,
-	0x28,
-	0x85,
-	0x66,
-	0x0a,
-	0x85,
-	0x31,
-	0xa0,
-	0x05,
-	0xd3,
-	0x3a,
-	0x3e,
-	0x00,
-	0x18,
-	0xa5,
-	0x3f,
-	0x65,
-	0x42,
-	0x6a,
-	0x69,
-	0x00,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5d,
-	0x85,
-	0x33,
-	0xbd,
-	0x52,
-	0x5c,
-	0x85,
-	0x32,
-	0xa6,
-	0x40,
-	0x38,
-	0xfd,
-	0x52,
-	0x5c,
-	0xa8,
-	0xa5,
-	0x33,
-	0xfd,
-	0x52,
-	0x5d,
-	0xaa,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa0,
-	0x00,
-	0xa2,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa0,
-	0xff,
-	0xa2,
-	0x0f,
-	0x98,
-	0xa4,
-	0x31,
-	0x91,
-	0x4a,
-	0xc8,
-	0x8a,
-	0x91,
-	0x4a,
-	0xa6,
-	0x41,
-	0x38,
-	0xa5,
-	0x32,
-	0xfd,
-	0x52,
-	0x5c,
-	0xa8,
-	0xa5,
-	0x33,
-	0xfd,
-	0x52,
-	0x5d,
-	0xaa,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa0,
-	0x00,
-	0xa2,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa0,
-	0xff,
-	0xa2,
-	0x0f,
-	0x98,
-	0xa4,
-	0x31,
-	0x91,
-	0x4c,
-	0xc8,
-	0x8a,
-	0x91,
-	0x4c,
-	0xa6,
-	0x3f,
-	0xbd,
-	0x52,
-	0x5d,
-	0x48,
-	0xbd,
-	0x52,
-	0x5c,
-	0xa6,
-	0x42,
-	0x38,
-	0xfd,
-	0x52,
-	0x5c,
-	0xa8,
-	0x68,
-	0xfd,
-	0x52,
-	0x5d,
-	0xaa,
-	0x10,
-	0x0c,
-	0x29,
-	0xf8,
-	0xc9,
-	0xf8,
-	0xf0,
-	0x0e,
-	0xa0,
-	0x00,
-	0xa2,
-	0xf8,
-	0x80,
-	0x08,
-	0x29,
-	0xf8,
-	0xf0,
-	0x04,
-	0xa0,
-	0xff,
-	0xa2,
-	0x07,
-	0x98,
-	0xa4,
-	0x31,
-	0x91,
-	0x4e,
-	0xc8,
-	0x8a,
-	0x91,
-	0x4e,
-	0xa2,
-	0x01,
-	0xa5,
-	0x3e,
-	0xcd,
-	0x2f,
-	0xbe,
-	0x90,
-	0x07,
-	0xcd,
-	0x30,
-	0xbe,
-	0x90,
-	0x03,
-	0xf0,
-	0x01,
-	0xca,
-	0x8a,
-	0xa4,
-	0x66,
-	0x91,
-	0x50,
-	0x64,
-	0x30,
-	0xa9,
-	0x00,
-	0x85,
-	0x6d,
-	0x49,
-	0x03,
-	0x85,
-	0x38,
-	0x64,
-	0x34,
-	0x64,
-	0x35,
-	0xa9,
-	0x03,
-	0x85,
-	0x6c,
-	0x18,
-	0xa5,
-	0x38,
-	0xa6,
-	0x30,
-	0x7d,
-	0x07,
-	0x7d,
-	0x65,
-	0x52,
-	0x85,
-	0x36,
-	0xa5,
-	0x53,
-	0x69,
-	0x00,
-	0x85,
-	0x37,
-	0xa2,
-	0x00,
-	0xb2,
-	0x36,
-	0xa0,
-	0x06,
-	0x71,
-	0x36,
-	0x90,
-	0x02,
-	0xe8,
-	0x18,
-	0xa0,
-	0x7e,
-	0x71,
-	0x36,
-	0x90,
-	0x02,
-	0xe8,
-	0x18,
-	0xa0,
-	0x84,
-	0x71,
-	0x36,
-	0x90,
-	0x01,
-	0xe8,
-	0x86,
-	0x2e,
-	0x46,
-	0x2e,
-	0x6a,
-	0x46,
-	0x2e,
-	0x6a,
-	0x69,
-	0x00,
-	0x92,
-	0x56,
-	0xa4,
-	0x30,
-	0x59,
-	0x79,
-	0x6b,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xe6,
-	0x56,
-	0xd0,
-	0x02,
-	0xe6,
-	0x57,
-	0xe6,
-	0x30,
-	0xc6,
-	0x6c,
-	0xd0,
-	0xad,
-	0xa5,
-	0x34,
-	0x0a,
-	0xaa,
-	0xa5,
-	0x35,
-	0x2a,
-	0xe0,
-	0x80,
-	0x90,
-	0x04,
-	0x1a,
-	0xd0,
-	0x01,
-	0x3a,
-	0x92,
-	0x58,
-	0xe6,
-	0x58,
-	0xd0,
-	0x02,
-	0xe6,
-	0x59,
-	0xa5,
-	0x6d,
-	0x1a,
-	0xc9,
-	0x02,
-	0xd0,
-	0x80,
-	0xa5,
-	0x52,
-	0x18,
-	0x69,
-	0x06,
-	0x85,
-	0x52,
-	0x90,
-	0x02,
-	0xe6,
-	0x53,
-	0xa6,
-	0x66,
-	0xe4,
-	0x29,
-	0xf0,
-	0x0f,
-	0xa5,
-	0x3a,
-	0x69,
-	0x05,
-	0x85,
-	0x3a,
-	0x90,
-	0x02,
-	0xe6,
-	0x3b,
-	0x8a,
-	0x1a,
-	0x4c,
-	0x96,
-	0x1d,
-	0xa5,
-	0x2a,
-	0xa6,
-	0x23,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x64,
-	0x85,
-	0x2a,
-	0xb0,
-	0x0d,
-	0xc6,
-	0x2b,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x64,
-	0x85,
-	0x2a,
-	0x90,
-	0x02,
-	0xe6,
-	0x2b,
-	0x60,
-	0xa4,
-	0x28,
-	0x84,
-	0x61,
-	0x84,
-	0x62,
-	0xc4,
-	0x29,
-	0xf0,
-	0x02,
-	0xe6,
-	0x62,
-	0xb1,
-	0x5a,
-	0xf0,
-	0x20,
-	0x31,
-	0x5c,
-	0x31,
-	0x5e,
-	0xfc,
-	0xa4,
-	0x61,
-	0x31,
-	0x5c,
-	0x31,
-	0x5a,
-	0x31,
-	0x5e,
-	0xa4,
-	0x62,
-	0x31,
-	0x5c,
-	0x31,
-	0x5a,
-	0x31,
-	0x5e,
-	0xdc,
-	0x29,
-	0x01,
-	0xd0,
-	0x04,
-	0xb1,
-	0x5a,
-	0x80,
-	0x02,
-	0x09,
-	0x02,
-	0x91,
-	0x5a,
-	0x84,
-	0x61,
-	0xc8,
-	0xc4,
-	0x29,
-	0x90,
-	0xd1,
-	0xf0,
-	0xd1,
-	0x60,
-	0xa2,
-	0x01,
-	0xa5,
-	0x67,
-	0xc5,
-	0x26,
-	0xf0,
-	0x06,
-	0xc5,
-	0x27,
-	0xf0,
-	0x02,
-	0xa2,
-	0x00,
-	0x86,
-	0x88,
-	0x85,
-	0x64,
-	0x1a,
-	0x85,
-	0x63,
-	0x1a,
-	0x85,
-	0x65,
-	0x18,
-	0xa6,
-	0x67,
-	0xa9,
-	0xb7,
-	0xa8,
-	0x7d,
-	0x79,
-	0x74,
-	0x85,
-	0x5c,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x5d,
-	0x98,
-	0x7d,
-	0x7a,
-	0x74,
-	0x85,
-	0x5a,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x5b,
-	0x98,
-	0x7d,
-	0x7b,
-	0x74,
-	0x85,
-	0x5e,
-	0xa9,
-	0x7d,
-	0x69,
-	0x00,
-	0x85,
-	0x5f,
-	0x20,
-	0x17,
-	0x1f,
-	0xa6,
-	0x63,
-	0xbd,
-	0x8b,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x4a,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x4b,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x52,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x53,
-	0xa5,
-	0x28,
-	0xc5,
-	0x29,
-	0xf0,
-	0x1b,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x06,
-	0x85,
-	0x4c,
-	0xa5,
-	0x4b,
-	0x69,
-	0x00,
-	0x85,
-	0x4d,
-	0xa5,
-	0x52,
-	0x69,
-	0x02,
-	0x85,
-	0x54,
-	0xa5,
-	0x53,
-	0x69,
-	0x00,
-	0x85,
-	0x55,
-	0x80,
-	0x0c,
-	0xa0,
-	0x02,
-	0x53,
-	0x4a,
-	0x00,
-	0x4c,
-	0x00,
-	0x53,
-	0x52,
-	0x00,
-	0x54,
-	0x00,
-	0xa6,
-	0x64,
-	0xbd,
-	0x8b,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x4e,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x4f,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x56,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x57,
-	0xa6,
-	0x65,
-	0xbd,
-	0x8b,
-	0x74,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x52,
-	0x5e,
-	0x85,
-	0x50,
-	0xbd,
-	0x53,
-	0x5e,
-	0x85,
-	0x51,
-	0xbd,
-	0x58,
-	0x5e,
-	0x85,
-	0x58,
-	0xbd,
-	0x59,
-	0x5e,
-	0x85,
-	0x59,
-	0xa0,
-	0x02,
-	0x53,
-	0x5a,
-	0x00,
-	0x3c,
-	0x00,
-	0x18,
-	0xa6,
-	0x67,
-	0xbd,
-	0x79,
-	0x74,
-	0x0a,
-	0x69,
-	0x3f,
-	0x85,
-	0x5c,
-	0xa9,
-	0x7d,
-	0xa8,
-	0x69,
-	0x00,
-	0x85,
-	0x5d,
-	0xbd,
-	0x7a,
-	0x74,
-	0x0a,
-	0x69,
-	0x3f,
-	0x85,
-	0x5a,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x5b,
-	0xbd,
-	0x7b,
-	0x74,
-	0x0a,
-	0x69,
-	0x3f,
-	0x85,
-	0x5e,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x5f,
-	0xa5,
-	0x28,
-	0xaa,
-	0x85,
-	0x66,
-	0x0a,
-	0x85,
-	0x61,
-	0x8a,
-	0xa0,
-	0x01,
-	0x64,
-	0x89,
-	0xc5,
-	0x29,
-	0xf0,
-	0x01,
-	0x1a,
-	0x0a,
-	0x85,
-	0x62,
-	0x84,
-	0x87,
-	0xa4,
-	0x66,
-	0xb1,
-	0x3c,
-	0x29,
-	0x02,
-	0xf0,
-	0x0b,
-	0x20,
-	0x19,
-	0x21,
-	0x20,
-	0x0d,
-	0x22,
-	0x20,
-	0x98,
-	0x24,
-	0x80,
-	0x0e,
-	0x64,
-	0x93,
-	0x64,
-	0x94,
-	0x64,
-	0x95,
-	0x64,
-	0x96,
-	0x20,
-	0x0d,
-	0x22,
-	0x20,
-	0x98,
-	0x24,
-	0xa6,
-	0x89,
-	0xbd,
-	0x1b,
-	0x7d,
-	0xe8,
-	0x29,
-	0x80,
-	0xd0,
-	0xf8,
-	0x86,
-	0x89,
-	0x18,
-	0xa5,
-	0x4e,
-	0x69,
-	0x06,
-	0x85,
-	0x4e,
-	0x90,
-	0x03,
-	0xe6,
-	0x4f,
-	0x18,
-	0xa5,
-	0x50,
-	0x69,
-	0x06,
-	0x85,
-	0x50,
-	0x90,
-	0x03,
-	0xe6,
-	0x51,
-	0x18,
-	0xa5,
-	0x56,
-	0x69,
-	0x02,
-	0x85,
-	0x56,
-	0x90,
-	0x03,
-	0xe6,
-	0x57,
-	0x18,
-	0xa5,
-	0x58,
-	0x69,
-	0x02,
-	0x85,
-	0x58,
-	0x90,
-	0x02,
-	0xe6,
-	0x59,
-	0xa5,
-	0x66,
-	0xaa,
-	0x0a,
-	0x85,
-	0x61,
-	0xe4,
-	0x28,
-	0xf0,
-	0x16,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x06,
-	0x85,
-	0x4a,
-	0x90,
-	0x03,
-	0xe6,
-	0x4b,
-	0x18,
-	0xa5,
-	0x52,
-	0x69,
-	0x02,
-	0x85,
-	0x52,
-	0x90,
-	0x02,
-	0xe6,
-	0x53,
-	0xa0,
-	0x00,
-	0xe8,
-	0x86,
-	0x66,
-	0xe4,
-	0x29,
-	0xf0,
-	0x16,
-	0x18,
-	0xa5,
-	0x4c,
-	0x69,
-	0x06,
-	0x85,
-	0x4c,
-	0x90,
-	0x03,
-	0xe6,
-	0x4d,
-	0x18,
-	0xa5,
-	0x54,
-	0x69,
-	0x02,
-	0x85,
-	0x54,
-	0x90,
-	0x02,
-	0xe6,
-	0x55,
-	0x8a,
-	0xe4,
-	0x29,
-	0xb0,
-	0x03,
-	0x4c,
-	0x59,
-	0x20,
-	0xd0,
-	0x04,
-	0xc8,
-	0x4c,
-	0x5d,
-	0x20,
-	0xa6,
-	0x8a,
-	0xbd,
-	0x2f,
-	0x7d,
-	0xa4,
-	0x23,
-	0xf0,
-	0x03,
-	0xca,
-	0x80,
-	0x01,
-	0xe8,
-	0x29,
-	0x80,
-	0xd0,
-	0xf1,
-	0x86,
-	0x8a,
-	0x60,
-	0xa4,
-	0x62,
-	0xb1,
-	0x5a,
-	0xc8,
-	0x0a,
-	0xaa,
-	0xb1,
-	0x5a,
-	0x88,
-	0x2a,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5c,
-	0xc8,
-	0xaa,
-	0x68,
-	0x71,
-	0x5c,
-	0x88,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5e,
-	0xc8,
-	0xaa,
-	0x68,
-	0x71,
-	0x5e,
-	0x48,
-	0xda,
-	0xa4,
-	0x61,
-	0xb1,
-	0x5a,
-	0xc8,
-	0x0a,
-	0xaa,
-	0xb1,
-	0x5a,
-	0x88,
-	0x2a,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5c,
-	0xc8,
-	0xaa,
-	0x68,
-	0x71,
-	0x5c,
-	0x88,
-	0x48,
-	0x18,
-	0x8a,
-	0x71,
-	0x5e,
-	0x85,
-	0x93,
-	0xc8,
-	0x68,
-	0x71,
-	0x5e,
-	0x85,
-	0x94,
-	0x38,
-	0x68,
-	0xe5,
-	0x93,
-	0x85,
-	0x93,
-	0x68,
-	0xe5,
-	0x94,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x93,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x93,
-	0xa6,
-	0x87,
-	0xd0,
-	0x05,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x93,
-	0x90,
-	0x05,
-	0xe6,
-	0x93,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x94,
-	0xa5,
-	0x66,
-	0x0a,
-	0xa8,
-	0x38,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0x85,
-	0x96,
-	0x8a,
-	0x0a,
-	0x85,
-	0x95,
-	0x26,
-	0x96,
-	0xa4,
-	0x61,
-	0x38,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xa8,
-	0x8a,
-	0x18,
-	0x65,
-	0x95,
-	0x85,
-	0x95,
-	0x98,
-	0x65,
-	0x96,
-	0x85,
-	0x96,
-	0xa4,
-	0x62,
-	0x38,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x5e,
-	0xf1,
-	0x5c,
-	0xa8,
-	0x8a,
-	0x18,
-	0x65,
-	0x95,
-	0x85,
-	0x95,
-	0x98,
-	0x65,
-	0x96,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x95,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x95,
-	0xa6,
-	0x88,
-	0xd0,
-	0x05,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x95,
-	0x90,
-	0x05,
-	0xe6,
-	0x95,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x96,
-	0xa5,
-	0x66,
-	0x0a,
-	0xa8,
-	0xb1,
-	0x5a,
-	0x65,
-	0x6e,
-	0x85,
-	0x6e,
-	0xc8,
-	0xa2,
-	0xff,
-	0xb1,
-	0x5a,
-	0x30,
-	0x01,
-	0xe8,
-	0x65,
-	0x6f,
-	0x85,
-	0x6f,
-	0x8a,
-	0x65,
-	0x70,
-	0x85,
-	0x70,
-	0x8a,
-	0x65,
-	0x71,
-	0x85,
-	0x71,
-	0xe6,
-	0x72,
-	0xd0,
-	0x02,
-	0xe6,
-	0x73,
-	0x60,
-	0xa5,
-	0x66,
-	0x0a,
-	0x85,
-	0x2e,
-	0x64,
-	0x2f,
-	0x64,
-	0x38,
-	0x64,
-	0x39,
-	0x64,
-	0x6d,
-	0xa9,
-	0xf3,
-	0xa2,
-	0x7d,
-	0x80,
-	0x04,
-	0xa9,
-	0x6b,
-	0xa2,
-	0x7e,
-	0x85,
-	0x32,
-	0x86,
-	0x33,
-	0xa4,
-	0x67,
-	0xb9,
-	0x7a,
-	0x74,
-	0x0a,
-	0x65,
-	0x32,
-	0x85,
-	0x34,
-	0xa5,
-	0x33,
-	0x69,
-	0x00,
-	0x85,
-	0x35,
-	0xa4,
-	0x62,
-	0xb1,
-	0x34,
-	0xa4,
-	0x61,
-	0x38,
-	0xf1,
-	0x34,
-	0xaa,
-	0xa4,
-	0x62,
-	0xc8,
-	0xb1,
-	0x34,
-	0xa4,
-	0x61,
-	0xc8,
-	0xf1,
-	0x34,
-	0xa4,
-	0x87,
-	0xd0,
-	0x11,
-	0xc9,
-	0x80,
-	0x6a,
-	0x85,
-	0x69,
-	0x8a,
-	0x6a,
-	0x69,
-	0x00,
-	0x85,
-	0x68,
-	0x90,
-	0x1f,
-	0xaa,
-	0xa5,
-	0x69,
-	0x1a,
-	0xa8,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa2,
-	0x00,
-	0xa0,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa2,
-	0xff,
-	0xa0,
-	0x0f,
-	0x86,
-	0x68,
-	0x84,
-	0x69,
-	0xa4,
-	0x65,
-	0xb9,
-	0x79,
-	0x74,
-	0x0a,
-	0x65,
-	0x32,
-	0x85,
-	0x34,
-	0xa5,
-	0x33,
-	0xaa,
-	0x69,
-	0x00,
-	0x85,
-	0x35,
-	0xa4,
-	0x64,
-	0xb9,
-	0x79,
-	0x74,
-	0x0a,
-	0x65,
-	0x32,
-	0x85,
-	0x36,
-	0x8a,
-	0x69,
-	0x00,
-	0x85,
-	0x37,
-	0xa4,
-	0x2e,
-	0xb1,
-	0x34,
-	0x38,
-	0xf1,
-	0x36,
-	0xaa,
-	0xc8,
-	0xb1,
-	0x34,
-	0xf1,
-	0x36,
-	0xa4,
-	0x88,
-	0xd0,
-	0x11,
-	0xc9,
-	0x80,
-	0x6a,
-	0x85,
-	0x6b,
-	0x8a,
-	0x6a,
-	0x69,
-	0x00,
-	0x85,
-	0x6a,
-	0x90,
-	0x1f,
-	0xaa,
-	0xa5,
-	0x6b,
-	0x1a,
-	0xa8,
-	0x10,
-	0x0c,
-	0x29,
-	0xf0,
-	0xc9,
-	0xf0,
-	0xf0,
-	0x0e,
-	0xa2,
-	0x00,
-	0xa0,
-	0xf0,
-	0x80,
-	0x08,
-	0x29,
-	0xf0,
-	0xf0,
-	0x04,
-	0xa2,
-	0xff,
-	0xa0,
-	0x0f,
-	0x86,
-	0x6a,
-	0x84,
-	0x6b,
-	0xa9,
-	0x03,
-	0x85,
-	0x6c,
-	0xa4,
-	0x2f,
-	0xb1,
-	0x4a,
-	0xaa,
-	0xb1,
-	0x4c,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x32,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x87,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x32,
-	0x90,
-	0x05,
-	0xe6,
-	0x32,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x33,
-	0xaa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x68,
-	0x85,
-	0x32,
-	0x8a,
-	0x65,
-	0x69,
-	0x85,
-	0x33,
-	0x10,
-	0x0d,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x32,
-	0x85,
-	0x32,
-	0xa9,
-	0x00,
-	0xe5,
-	0x33,
-	0x85,
-	0x33,
-	0xa4,
-	0x2f,
-	0xb1,
-	0x4e,
-	0xaa,
-	0xb1,
-	0x50,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x34,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x88,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x34,
-	0x90,
-	0x05,
-	0xe6,
-	0x34,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x35,
-	0xaa,
-	0x18,
-	0xa5,
-	0x34,
-	0x65,
-	0x6a,
-	0x85,
-	0x34,
-	0x8a,
-	0x65,
-	0x6b,
-	0x85,
-	0x35,
-	0x10,
-	0x0d,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x34,
-	0x85,
-	0x34,
-	0xa9,
-	0x00,
-	0xe5,
-	0x35,
-	0x85,
-	0x35,
-	0xc5,
-	0x33,
-	0x90,
-	0x11,
-	0xf0,
-	0x09,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x00,
-	0x32,
-	0x00,
-	0x80,
-	0x06,
-	0xa5,
-	0x34,
-	0xc5,
-	0x32,
-	0xb0,
-	0xf1,
-	0xa5,
-	0x2f,
-	0x49,
-	0x03,
-	0xaa,
-	0x18,
-	0xa5,
-	0x32,
-	0x7d,
-	0xc3,
-	0x80,
-	0x9d,
-	0xc3,
-	0x80,
-	0xa5,
-	0x33,
-	0x7d,
-	0xc4,
-	0x80,
-	0x9d,
-	0xc4,
-	0x80,
-	0x90,
-	0x03,
-	0xfe,
-	0xc5,
-	0x80,
-	0xe6,
-	0x2f,
-	0xc6,
-	0x6c,
-	0xf0,
-	0x03,
-	0x4c,
-	0xdd,
-	0x22,
-	0xa4,
-	0x6d,
-	0xb1,
-	0x52,
-	0xaa,
-	0xb1,
-	0x54,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x32,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x87,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x32,
-	0x90,
-	0x05,
-	0xe6,
-	0x32,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x33,
-	0xaa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x68,
-	0x85,
-	0x32,
-	0x8a,
-	0x65,
-	0x69,
-	0x85,
-	0x33,
-	0x10,
-	0x1a,
-	0x18,
-	0xa5,
-	0x38,
-	0x65,
-	0x32,
-	0xa5,
-	0x39,
-	0x65,
-	0x33,
-	0xb0,
-	0x21,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x32,
-	0x85,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x33,
-	0x85,
-	0x39,
-	0x80,
-	0x12,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x32,
-	0xa5,
-	0x39,
-	0xe5,
-	0x33,
-	0xb0,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0x32,
-	0x00,
-	0x38,
-	0x00,
-	0xa4,
-	0x6d,
-	0xb1,
-	0x56,
-	0xaa,
-	0xb1,
-	0x58,
-	0xa8,
-	0xbd,
-	0x52,
-	0x5c,
-	0x38,
-	0xf9,
-	0x52,
-	0x5c,
-	0x85,
-	0x34,
-	0xbd,
-	0x52,
-	0x5d,
-	0xf9,
-	0x52,
-	0x5d,
-	0xa4,
-	0x88,
-	0xd0,
-	0x0c,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x34,
-	0x90,
-	0x05,
-	0xe6,
-	0x34,
-	0xd0,
-	0x01,
-	0x1a,
-	0x85,
-	0x35,
-	0xaa,
-	0x18,
-	0xa5,
-	0x34,
-	0x65,
-	0x6a,
-	0x85,
-	0x34,
-	0x8a,
-	0x65,
-	0x6b,
-	0x85,
-	0x35,
-	0x10,
-	0x1a,
-	0x18,
-	0xa5,
-	0x38,
-	0x65,
-	0x34,
-	0xa5,
-	0x39,
-	0x65,
-	0x35,
-	0xb0,
-	0x21,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x34,
-	0x85,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x35,
-	0x85,
-	0x39,
-	0x80,
-	0x12,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x34,
-	0xa5,
-	0x39,
-	0xe5,
-	0x35,
-	0xb0,
-	0x07,
-	0xa0,
-	0x02,
-	0x53,
-	0x34,
-	0x00,
-	0x38,
-	0x00,
-	0xa0,
-	0x04,
-	0xa5,
-	0x6d,
-	0xd0,
-	0x07,
-	0x53,
-	0x32,
-	0x00,
-	0x8b,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0x32,
-	0x00,
-	0x8f,
-	0x00,
-	0xd0,
-	0x05,
-	0xe6,
-	0x6d,
-	0x4c,
-	0x20,
-	0x22,
-	0x38,
-	0xa5,
-	0x38,
-	0xed,
-	0x31,
-	0xbe,
-	0xa5,
-	0x39,
-	0xed,
-	0x32,
-	0xbe,
-	0x90,
-	0x09,
-	0x64,
-	0x8b,
-	0xa0,
-	0x07,
-	0x13,
-	0x8b,
-	0x00,
-	0x8c,
-	0x00,
-	0x60,
-	0xa2,
-	0x00,
-	0xa5,
-	0x94,
-	0x10,
-	0x0f,
-	0x85,
-	0x42,
-	0x38,
-	0x8a,
-	0xe5,
-	0x93,
-	0x85,
-	0x93,
-	0x8a,
-	0xe5,
-	0x94,
-	0x85,
-	0x94,
-	0x80,
-	0x08,
-	0x05,
-	0x93,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x42,
-	0xa5,
-	0x2c,
-	0xf0,
-	0x14,
-	0x45,
-	0x93,
-	0x84,
-	0x93,
-	0xa5,
-	0x94,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2c,
-	0x18,
-	0x65,
-	0x93,
-	0x85,
-	0x93,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x94,
-	0xa5,
-	0x96,
-	0x10,
-	0x0f,
-	0x85,
-	0x43,
-	0x38,
-	0x8a,
-	0xe5,
-	0x95,
-	0x85,
-	0x95,
-	0x8a,
-	0xe5,
-	0x96,
-	0x85,
-	0x96,
-	0x80,
-	0x08,
-	0x05,
-	0x95,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x43,
-	0xa5,
-	0x2d,
-	0xf0,
-	0x14,
-	0x45,
-	0x95,
-	0x84,
-	0x95,
-	0xa5,
-	0x96,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2d,
-	0x18,
-	0x65,
-	0x95,
-	0x85,
-	0x95,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x96,
-	0xa5,
-	0x8c,
-	0x10,
-	0x0f,
-	0x85,
-	0x46,
-	0x38,
-	0x8a,
-	0xe5,
-	0x8b,
-	0x85,
-	0x8b,
-	0x8a,
-	0xe5,
-	0x8c,
-	0x85,
-	0x8c,
-	0x80,
-	0x08,
-	0x05,
-	0x8b,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x46,
-	0xa5,
-	0x2c,
-	0xf0,
-	0x14,
-	0x45,
-	0x8b,
-	0x84,
-	0x8b,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2c,
-	0x18,
-	0x65,
-	0x8b,
-	0x85,
-	0x8b,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x8c,
-	0xa5,
-	0x90,
-	0x10,
-	0x0f,
-	0x85,
-	0x47,
-	0x38,
-	0x8a,
-	0xe5,
-	0x8f,
-	0x85,
-	0x8f,
-	0x8a,
-	0xe5,
-	0x90,
-	0x85,
-	0x90,
-	0x80,
-	0x08,
-	0x05,
-	0x8f,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x47,
-	0xa5,
-	0x2c,
-	0xf0,
-	0x14,
-	0x45,
-	0x8f,
-	0x84,
-	0x8f,
-	0xa5,
-	0x90,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2c,
-	0x18,
-	0x65,
-	0x8f,
-	0x85,
-	0x8f,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x90,
-	0xa5,
-	0x8e,
-	0x10,
-	0x0f,
-	0x85,
-	0x48,
-	0x38,
-	0x8a,
-	0xe5,
-	0x8d,
-	0x85,
-	0x8d,
-	0x8a,
-	0xe5,
-	0x8e,
-	0x85,
-	0x8e,
-	0x80,
-	0x08,
-	0x05,
-	0x8d,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x48,
-	0xa5,
-	0x2d,
-	0xf0,
-	0x14,
-	0x45,
-	0x8d,
-	0x84,
-	0x8d,
-	0xa5,
-	0x8e,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2d,
-	0x18,
-	0x65,
-	0x8d,
-	0x85,
-	0x8d,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x8e,
-	0xa5,
-	0x92,
-	0x10,
-	0x0f,
-	0x85,
-	0x49,
-	0x38,
-	0x8a,
-	0xe5,
-	0x91,
-	0x85,
-	0x91,
-	0x8a,
-	0xe5,
-	0x92,
-	0x85,
-	0x92,
-	0x80,
-	0x08,
-	0x05,
-	0x91,
-	0xf0,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x49,
-	0xa5,
-	0x2d,
-	0xf0,
-	0x14,
-	0x45,
-	0x91,
-	0x84,
-	0x91,
-	0xa5,
-	0x92,
-	0xf0,
-	0x0c,
-	0x45,
-	0x2d,
-	0x18,
-	0x65,
-	0x91,
-	0x85,
-	0x91,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x92,
-	0xa4,
-	0x8a,
-	0x5a,
-	0x84,
-	0x45,
-	0xa4,
-	0x89,
-	0x5a,
-	0x84,
-	0x44,
-	0xa2,
-	0x00,
-	0x64,
-	0x30,
-	0x18,
-	0xa5,
-	0x45,
-	0x69,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0x18,
-	0xa5,
-	0x44,
-	0x69,
-	0x06,
-	0x85,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0xe6,
-	0x30,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x38,
-	0xa5,
-	0x32,
-	0xe9,
-	0x0a,
-	0x20,
-	0xad,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x30,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0x01,
-	0x85,
-	0x30,
-	0x38,
-	0xa5,
-	0x33,
-	0xe9,
-	0x04,
-	0x85,
-	0x33,
-	0x64,
-	0x31,
-	0xa5,
-	0x34,
-	0x20,
-	0xad,
-	0x26,
-	0xe6,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0x20,
-	0xa8,
-	0x26,
-	0xa9,
-	0xff,
-	0x85,
-	0x31,
-	0x20,
-	0xa8,
-	0x26,
-	0x7a,
-	0xb9,
-	0x1b,
-	0x7d,
-	0x10,
-	0x04,
-	0xc8,
-	0x4c,
-	0xd3,
-	0x25,
-	0x7a,
-	0xb9,
-	0x2f,
-	0x7d,
-	0x10,
-	0x0c,
-	0xa6,
-	0x23,
-	0xf0,
-	0x04,
-	0x88,
-	0x4c,
-	0xce,
-	0x25,
-	0xc8,
-	0x4c,
-	0xce,
-	0x25,
-	0x60,
-	0x38,
-	0xa5,
-	0x32,
-	0xe9,
-	0x05,
-	0x85,
-	0x32,
-	0xda,
-	0x64,
-	0x2e,
-	0x64,
-	0x2f,
-	0xa6,
-	0x33,
-	0xa8,
-	0x30,
-	0x31,
-	0xc9,
-	0x0c,
-	0xb0,
-	0x2d,
-	0x8a,
-	0x30,
-	0x2a,
-	0xc9,
-	0x08,
-	0xb0,
-	0x26,
-	0xa5,
-	0x44,
-	0xd0,
-	0x09,
-	0xa5,
-	0x31,
-	0xd0,
-	0x0d,
-	0xbd,
-	0xaa,
-	0x55,
-	0x80,
-	0x17,
-	0xc9,
-	0x13,
-	0xd0,
-	0x09,
-	0xa5,
-	0x31,
-	0x10,
-	0xf3,
-	0xbd,
-	0xa2,
-	0x55,
-	0x80,
-	0x0a,
-	0x8a,
-	0x49,
-	0x0c,
-	0x18,
-	0x65,
-	0x32,
-	0xa8,
-	0xb9,
-	0xb2,
-	0x55,
-	0x85,
-	0x2e,
-	0xe8,
-	0x30,
-	0x35,
-	0xe0,
-	0x0a,
-	0xb0,
-	0x31,
-	0xa5,
-	0x32,
-	0x3a,
-	0x30,
-	0x2c,
-	0xc9,
-	0x0a,
-	0xb0,
-	0x28,
-	0xa4,
-	0x45,
-	0xd0,
-	0x0a,
-	0xaa,
-	0xa5,
-	0x30,
-	0xd0,
-	0x0e,
-	0xbd,
-	0x1c,
-	0x56,
-	0x80,
-	0x18,
-	0xc0,
-	0x0f,
-	0xd0,
-	0x0a,
-	0xaa,
-	0xa5,
-	0x30,
-	0x30,
-	0xf2,
-	0xbd,
-	0x12,
-	0x56,
-	0x80,
-	0x0a,
-	0x8a,
-	0x49,
-	0x0a,
-	0x18,
-	0x65,
-	0x32,
-	0xaa,
-	0xbd,
-	0x25,
-	0x56,
-	0x85,
-	0x2f,
-	0xfa,
-	0xa5,
-	0x2e,
-	0xd0,
-	0x03,
-	0x4c,
-	0x79,
-	0x28,
-	0xa8,
-	0x10,
-	0x05,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x36,
-	0x98,
-	0x3c,
-	0x45,
-	0x42,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x93,
-	0x85,
-	0x37,
-	0xbd,
-	0xd5,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd5,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0xb0,
-	0x04,
-	0xde,
-	0xd7,
-	0x80,
-	0x38,
-	0xa5,
-	0x94,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd7,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd7,
-	0x80,
-	0x80,
-	0x28,
-	0x45,
-	0x93,
-	0x7d,
-	0xd5,
-	0x80,
-	0x9d,
-	0xd5,
-	0x80,
-	0x98,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x90,
-	0x04,
-	0xfe,
-	0xd7,
-	0x80,
-	0x18,
-	0xa5,
-	0x94,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x98,
-	0x7d,
-	0xd7,
-	0x80,
-	0x9d,
-	0xd7,
-	0x80,
-	0xa5,
-	0x46,
-	0xf0,
-	0x69,
-	0x3c,
-	0x45,
-	0x2e,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x8b,
-	0x85,
-	0x37,
-	0xbd,
-	0x1d,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1d,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x1f,
-	0x81,
-	0x38,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1f,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1f,
-	0x81,
-	0x80,
-	0x28,
-	0x45,
-	0x8b,
-	0x7d,
-	0x1d,
-	0x81,
-	0x9d,
-	0x1d,
-	0x81,
-	0x98,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x1f,
-	0x81,
-	0x18,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x98,
-	0x7d,
-	0x1f,
-	0x81,
-	0x9d,
-	0x1f,
-	0x81,
-	0xa5,
-	0x47,
-	0xf0,
-	0x6a,
-	0x3c,
-	0x45,
-	0x2e,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x8f,
-	0x85,
-	0x37,
-	0xbd,
-	0x65,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x65,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x67,
-	0x81,
-	0x38,
-	0xa5,
-	0x90,
-	0xf0,
-	0x41,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x67,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x67,
-	0x81,
-	0x80,
-	0x29,
-	0x45,
-	0x8f,
-	0x18,
-	0x7d,
-	0x65,
-	0x81,
-	0x9d,
-	0x65,
-	0x81,
-	0x98,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x67,
-	0x81,
-	0x18,
-	0xa5,
-	0x90,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x98,
-	0x7d,
-	0x67,
-	0x81,
-	0x9d,
-	0x67,
-	0x81,
-	0xa5,
-	0x2f,
-	0xd0,
-	0x03,
-	0x4c,
-	0xcf,
-	0x29,
-	0xa8,
-	0x10,
-	0x05,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x36,
-	0x98,
-	0x3c,
-	0x45,
-	0x43,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x39,
-	0x45,
-	0x95,
-	0x85,
-	0x37,
-	0xbd,
-	0xd5,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd5,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0xb0,
-	0x04,
-	0xde,
-	0xd7,
-	0x80,
-	0x38,
-	0xa5,
-	0x96,
-	0xf0,
-	0x41,
-	0x45,
-	0x36,
-	0x38,
-	0x85,
-	0x37,
-	0xbd,
-	0xd6,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd6,
-	0x80,
-	0x84,
-	0x37,
-	0xbd,
-	0xd7,
-	0x80,
-	0xe5,
-	0x37,
-	0x9d,
-	0xd7,
-	0x80,
-	0x80,
-	0x28,
-	0x45,
-	0x95,
-	0x7d,
-	0xd5,
-	0x80,
-	0x9d,
-	0xd5,
-	0x80,
-	0x98,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x90,
-	0x04,
-	0xfe,
-	0xd7,
-	0x80,
-	0x18,
-	0xa5,
-	0x96,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0xd6,
-	0x80,
-	0x9d,
-	0xd6,
-	0x80,
-	0x98,
-	0x7d,
-	0xd7,
-	0x80,
-	0x9d,
-	0xd7,
-	0x80,
-	0xa5,
-	0x48,
-	0xf0,
-	0x69,
-	0x3c,
-	0x45,
-	0x2f,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x8d,
-	0x85,
-	0x37,
-	0xbd,
-	0x1d,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1d,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x1f,
-	0x81,
-	0x38,
-	0xa5,
-	0x8e,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x1e,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1e,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x1f,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x1f,
-	0x81,
-	0x80,
-	0x28,
-	0x45,
-	0x8d,
-	0x7d,
-	0x1d,
-	0x81,
-	0x9d,
-	0x1d,
-	0x81,
-	0x98,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x1f,
-	0x81,
-	0x18,
-	0xa5,
-	0x8e,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x1e,
-	0x81,
-	0x9d,
-	0x1e,
-	0x81,
-	0x98,
-	0x7d,
-	0x1f,
-	0x81,
-	0x9d,
-	0x1f,
-	0x81,
-	0xa5,
-	0x49,
-	0xf0,
-	0x69,
-	0x3c,
-	0x45,
-	0x2f,
-	0xc0,
-	0x80,
-	0xa5,
-	0x36,
-	0x90,
-	0x38,
-	0x45,
-	0x91,
-	0x85,
-	0x37,
-	0xbd,
-	0x65,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x65,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0xb0,
-	0x04,
-	0xde,
-	0x67,
-	0x81,
-	0x38,
-	0xa5,
-	0x92,
-	0xf0,
-	0x40,
-	0x45,
-	0x36,
-	0x85,
-	0x37,
-	0xbd,
-	0x66,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x66,
-	0x81,
-	0x84,
-	0x37,
-	0xbd,
-	0x67,
-	0x81,
-	0xe5,
-	0x37,
-	0x9d,
-	0x67,
-	0x81,
-	0x80,
-	0x28,
-	0x45,
-	0x91,
-	0x7d,
-	0x65,
-	0x81,
-	0x9d,
-	0x65,
-	0x81,
-	0x98,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x90,
-	0x04,
-	0xfe,
-	0x67,
-	0x81,
-	0x18,
-	0xa5,
-	0x92,
-	0xf0,
-	0x0f,
-	0x45,
-	0x36,
-	0x7d,
-	0x66,
-	0x81,
-	0x9d,
-	0x66,
-	0x81,
-	0x98,
-	0x7d,
-	0x67,
-	0x81,
-	0x9d,
-	0x67,
-	0x81,
-	0xe8,
-	0xe8,
-	0xe8,
-	0x60,
-	0xe6,
-	0x25,
-	0x20,
-	0xdb,
-	0x2a,
-	0x20,
-	0x16,
-	0x2e,
-	0x20,
-	0xff,
-	0x2f,
-	0x20,
-	0x2e,
-	0x31,
-	0x20,
-	0x92,
-	0x34,
-	0x64,
-	0x25,
-	0x60,
-	0xa5,
-	0x41,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xc9,
-	0x80,
-	0x66,
-	0x41,
-	0x66,
-	0x40,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0x60,
-	0xa5,
-	0x34,
-	0x45,
-	0x32,
-	0x85,
-	0x37,
-	0x84,
-	0x38,
-	0xa5,
-	0x35,
-	0x45,
-	0x32,
-	0x18,
-	0x65,
-	0x38,
-	0x85,
-	0x38,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x39,
-	0xa5,
-	0x34,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x38,
-	0x85,
-	0x38,
-	0x98,
-	0x65,
-	0x39,
-	0x85,
-	0x39,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0x3a,
-	0xa5,
-	0x35,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x39,
-	0x85,
-	0x39,
-	0x98,
-	0x65,
-	0x3a,
-	0x85,
-	0x3a,
-	0xa5,
-	0x36,
-	0x45,
-	0x32,
-	0x18,
-	0x65,
-	0x39,
-	0x85,
-	0x39,
-	0x98,
-	0x65,
-	0x3a,
-	0x85,
-	0x3a,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0x3b,
-	0xa5,
-	0x36,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x3a,
-	0x85,
-	0x3a,
-	0x98,
-	0x65,
-	0x3b,
-	0x85,
-	0x3b,
-	0xa5,
-	0x33,
-	0x10,
-	0x13,
-	0x38,
-	0xa5,
-	0x39,
-	0xe5,
-	0x34,
-	0x85,
-	0x39,
-	0xa5,
-	0x3a,
-	0xe5,
-	0x35,
-	0x85,
-	0x3a,
-	0xa5,
-	0x3b,
-	0xe5,
-	0x36,
-	0x85,
-	0x3b,
-	0x64,
-	0x32,
-	0xa5,
-	0x37,
-	0x29,
-	0x0f,
-	0xc9,
-	0x08,
-	0xd0,
-	0x02,
-	0xe6,
-	0x32,
-	0xa2,
-	0x04,
-	0xa5,
-	0x3b,
-	0xc9,
-	0x80,
-	0x66,
-	0x3b,
-	0x66,
-	0x3a,
-	0x66,
-	0x39,
-	0x66,
-	0x38,
-	0x66,
-	0x37,
-	0xca,
-	0xd0,
-	0xef,
-	0xa5,
-	0x3b,
-	0xf0,
-	0x22,
-	0x10,
-	0x13,
-	0x1a,
-	0xd0,
-	0x04,
-	0xa5,
-	0x3a,
-	0x30,
-	0x1d,
-	0x64,
-	0x3e,
-	0x64,
-	0x3f,
-	0x64,
-	0x40,
-	0xa9,
-	0x80,
-	0x85,
-	0x41,
-	0x18,
-	0x60,
-	0xa9,
-	0xff,
-	0x85,
-	0x3e,
-	0x85,
-	0x3f,
-	0x85,
-	0x40,
-	0x4a,
-	0x85,
-	0x41,
-	0x18,
-	0x60,
-	0xa5,
-	0x3a,
-	0x30,
-	0xef,
-	0xa0,
-	0x04,
-	0x53,
-	0x37,
-	0x00,
-	0x3e,
-	0x00,
-	0xa5,
-	0x32,
-	0xd0,
-	0x03,
-	0x2a,
-	0x1a,
-	0x6a,
-	0x60,
-	0xa9,
-	0x80,
-	0x38,
-	0xed,
-	0x17,
-	0x6b,
-	0x85,
-	0x74,
-	0x64,
-	0x6d,
-	0xa0,
-	0x09,
-	0x53,
-	0xc3,
-	0x80,
-	0x7b,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0x0d,
-	0x7d,
-	0x32,
-	0x00,
-	0xad,
-	0x07,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x75,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x76,
-	0xad,
-	0x08,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x77,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x78,
-	0xad,
-	0x09,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0xfb,
-	0x7c,
-	0x85,
-	0x79,
-	0xbd,
-	0xfc,
-	0x7c,
-	0x85,
-	0x7a,
-	0x64,
-	0x84,
-	0x64,
-	0x85,
-	0x64,
-	0x86,
-	0xa6,
-	0x6d,
-	0xb5,
-	0xdc,
-	0xf0,
-	0x07,
-	0xa9,
-	0x80,
-	0x85,
-	0x86,
-	0x4c,
-	0x7c,
-	0x2d,
-	0x38,
-	0xa5,
-	0x7b,
-	0xe5,
-	0x7e,
-	0x85,
-	0x7b,
-	0xa5,
-	0x7c,
-	0xe5,
-	0x7f,
-	0x85,
-	0x7c,
-	0xa5,
-	0x7d,
-	0xe5,
-	0x80,
-	0xa8,
-	0xa5,
-	0x7c,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xf0,
-	0x12,
-	0x98,
-	0x30,
-	0x09,
-	0xa9,
-	0xff,
-	0x85,
-	0x7b,
-	0x4a,
-	0x85,
-	0x7c,
-	0x80,
-	0x06,
-	0xa9,
-	0x80,
-	0x85,
-	0x7c,
-	0x64,
-	0x7b,
-	0x38,
-	0xa5,
-	0x81,
-	0xe5,
-	0x7e,
-	0x85,
-	0x81,
-	0xa5,
-	0x82,
-	0xe5,
-	0x7f,
-	0x85,
-	0x82,
-	0xa5,
-	0x83,
-	0xe5,
-	0x80,
-	0xa8,
-	0xa5,
-	0x82,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xf0,
-	0x12,
-	0x98,
-	0x30,
-	0x09,
-	0xa9,
-	0xff,
-	0x85,
-	0x81,
-	0x4a,
-	0x85,
-	0x82,
-	0x80,
-	0x06,
-	0xa9,
-	0x80,
-	0x85,
-	0x82,
-	0x64,
-	0x81,
-	0xa0,
-	0x02,
-	0x53,
-	0x81,
-	0x00,
-	0x34,
-	0x00,
-	0x20,
-	0x50,
-	0x39,
-	0x20,
-	0xe7,
-	0x29,
-	0x90,
-	0x0e,
-	0xe6,
-	0x3e,
-	0xd0,
-	0x0a,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x06,
-	0xe6,
-	0x40,
-	0xd0,
-	0x02,
-	0xe6,
-	0x41,
-	0xa2,
-	0x00,
-	0xa5,
-	0x7b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x42,
-	0xa5,
-	0x7c,
-	0x10,
-	0x01,
-	0xca,
-	0x65,
-	0x3f,
-	0x85,
-	0x43,
-	0x8a,
-	0x65,
-	0x40,
-	0x85,
-	0x44,
-	0x8a,
-	0x65,
-	0x41,
-	0x85,
-	0x45,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x7b,
-	0x85,
-	0x34,
-	0xa9,
-	0x00,
-	0xe5,
-	0x7c,
-	0x85,
-	0x35,
-	0xa5,
-	0x6d,
-	0x49,
-	0x07,
-	0xaa,
-	0xda,
-	0xbd,
-	0x0f,
-	0x7d,
-	0x85,
-	0x32,
-	0xbd,
-	0x10,
-	0x7d,
-	0x85,
-	0x33,
-	0xa5,
-	0x7c,
-	0x10,
-	0x05,
-	0x20,
-	0x93,
-	0x39,
-	0x80,
-	0x03,
-	0x20,
-	0x50,
-	0x39,
-	0xa0,
-	0x04,
-	0x53,
-	0x3e,
-	0x00,
-	0x46,
-	0x00,
-	0xfa,
-	0xbd,
-	0x11,
-	0x7d,
-	0x85,
-	0x34,
-	0xbd,
-	0x12,
-	0x7d,
-	0x85,
-	0x35,
-	0xbd,
-	0x13,
-	0x7d,
-	0x85,
-	0x36,
-	0xa0,
-	0x02,
-	0x53,
-	0x81,
-	0x00,
-	0x32,
-	0x00,
-	0x20,
-	0x12,
-	0x2a,
-	0xa5,
-	0x46,
-	0xe5,
-	0x3e,
-	0x85,
-	0x46,
-	0xa5,
-	0x47,
-	0xe5,
-	0x3f,
-	0x85,
-	0x47,
-	0xa5,
-	0x48,
-	0xe5,
-	0x40,
-	0x85,
-	0x48,
-	0xa2,
-	0x00,
-	0xa5,
-	0x49,
-	0x10,
-	0x01,
-	0xca,
-	0xe5,
-	0x41,
-	0x85,
-	0x49,
-	0x8a,
-	0xa6,
-	0x41,
-	0x30,
-	0x04,
-	0xe9,
-	0x00,
-	0x80,
-	0x02,
-	0xe9,
-	0xff,
-	0x10,
-	0x0f,
-	0xc9,
-	0xff,
-	0xd0,
-	0x04,
-	0xa5,
-	0x49,
-	0x30,
-	0x19,
-	0xa9,
-	0x80,
-	0x85,
-	0x49,
-	0x0a,
-	0x80,
-	0x0c,
-	0xd0,
-	0x04,
-	0xa5,
-	0x49,
-	0x10,
-	0x0c,
-	0xa9,
-	0x7f,
-	0x85,
-	0x49,
-	0xa9,
-	0xff,
-	0x85,
-	0x48,
-	0x85,
-	0x47,
-	0x85,
-	0x46,
-	0xa9,
-	0x00,
-	0xa8,
-	0x38,
-	0xe5,
-	0x46,
-	0x85,
-	0x46,
-	0x98,
-	0xe5,
-	0x47,
-	0x85,
-	0x47,
-	0x98,
-	0xe5,
-	0x48,
-	0x85,
-	0x48,
-	0x98,
-	0xe5,
-	0x49,
-	0x85,
-	0x49,
-	0xa5,
-	0x45,
-	0x30,
-	0x32,
-	0x06,
-	0x42,
-	0x26,
-	0x43,
-	0x26,
-	0x44,
-	0x26,
-	0x45,
-	0xa5,
-	0x42,
-	0x05,
-	0x43,
-	0x05,
-	0x44,
-	0x05,
-	0x45,
-	0xd0,
-	0x06,
-	0x64,
-	0x32,
-	0x64,
-	0x33,
-	0x80,
-	0x34,
-	0xa5,
-	0x49,
-	0x30,
-	0x18,
-	0xa5,
-	0x45,
-	0x30,
-	0x14,
-	0x06,
-	0x42,
-	0x26,
-	0x43,
-	0x26,
-	0x44,
-	0x26,
-	0x45,
-	0x06,
-	0x46,
-	0x26,
-	0x47,
-	0x26,
-	0x48,
-	0x26,
-	0x49,
-	0x80,
-	0xe6,
-	0x80,
-	0x6e,
-	0xa0,
-	0x02,
-	0x53,
-	0x48,
-	0x00,
-	0x32,
-	0x00,
-	0x53,
-	0x44,
-	0x00,
-	0x34,
-	0x00,
-	0xa5,
-	0x34,
-	0x05,
-	0x35,
-	0xd0,
-	0x03,
-	0x4c,
-	0x3d,
-	0x2d,
-	0x20,
-	0x2f,
-	0x39,
-	0x38,
-	0xa5,
-	0x75,
-	0xe5,
-	0x32,
-	0xa5,
-	0x76,
-	0xe5,
-	0x33,
-	0xb0,
-	0x4b,
-	0x38,
-	0xa5,
-	0x32,
-	0xe5,
-	0x79,
-	0xa5,
-	0x33,
-	0xe5,
-	0x7a,
-	0xb0,
-	0x40,
-	0x38,
-	0xa5,
-	0x32,
-	0xe5,
-	0x77,
-	0xa5,
-	0x33,
-	0xe5,
-	0x78,
-	0xb0,
-	0x62,
-	0xa0,
-	0x02,
-	0x53,
-	0x77,
-	0x00,
-	0x34,
-	0x00,
-	0x38,
-	0xa5,
-	0x77,
-	0xe5,
-	0x32,
-	0xaa,
-	0x64,
-	0x32,
-	0xa5,
-	0x78,
-	0xe5,
-	0x33,
-	0x86,
-	0x33,
-	0x4a,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x4a,
-	0x90,
-	0x08,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x20,
-	0x2f,
-	0x39,
-	0xa5,
-	0x32,
-	0x85,
-	0x84,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0x84,
-	0x85,
-	0x85,
-	0x80,
-	0x66,
-	0xa2,
-	0x00,
-	0xa5,
-	0x82,
-	0x10,
-	0x01,
-	0xca,
-	0x86,
-	0x83,
-	0xa2,
-	0x00,
-	0xa5,
-	0x7c,
-	0x10,
-	0x01,
-	0xca,
-	0x86,
-	0x7d,
-	0x38,
-	0xa5,
-	0x81,
-	0xe5,
-	0x7b,
-	0xa5,
-	0x82,
-	0xe5,
-	0x7c,
-	0xa5,
-	0x83,
-	0xe5,
-	0x7d,
-	0x10,
-	0x06,
-	0xa9,
-	0x80,
-	0x85,
-	0x86,
-	0x80,
-	0x3f,
-	0xa9,
-	0x80,
-	0x85,
-	0x84,
-	0x80,
-	0x39,
-	0x38,
-	0xa5,
-	0x79,
-	0xe5,
-	0x77,
-	0x85,
-	0x34,
-	0xa5,
-	0x7a,
-	0xe5,
-	0x78,
-	0x85,
-	0x35,
-	0x38,
-	0xa5,
-	0x79,
-	0xe5,
-	0x32,
-	0xaa,
-	0x64,
-	0x32,
-	0xa5,
-	0x7a,
-	0xe5,
-	0x33,
-	0x86,
-	0x33,
-	0x4a,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x4a,
-	0x90,
-	0x08,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x20,
-	0x2f,
-	0x39,
-	0xa5,
-	0x32,
-	0x85,
-	0x85,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0x85,
-	0x85,
-	0x86,
-	0x64,
-	0x2e,
-	0x64,
-	0x6c,
-	0xa6,
-	0x6c,
-	0xb5,
-	0x84,
-	0x45,
-	0x74,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0xa5,
-	0x6d,
-	0x49,
-	0x03,
-	0x18,
-	0x65,
-	0x6c,
-	0xaa,
-	0xbd,
-	0x79,
-	0x6b,
-	0x4d,
-	0x17,
-	0x6b,
-	0x18,
-	0x65,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0x65,
-	0x33,
-	0x06,
-	0x32,
-	0x2a,
-	0xc5,
-	0x2e,
-	0x90,
-	0x06,
-	0xf0,
-	0x04,
-	0x85,
-	0x2e,
-	0x86,
-	0x2f,
-	0x9d,
-	0x7f,
-	0x6b,
-	0xe6,
-	0x6c,
-	0xa5,
-	0x6c,
-	0xc9,
-	0x03,
-	0xd0,
-	0xc8,
-	0x38,
-	0xa9,
-	0x80,
-	0xfd,
-	0x7d,
-	0x6b,
-	0xfd,
-	0x7e,
-	0x6b,
-	0xfd,
-	0x7f,
-	0x6b,
-	0xf0,
-	0x09,
-	0xa6,
-	0x2f,
-	0x18,
-	0x7d,
-	0x7f,
-	0x6b,
-	0x9d,
-	0x7f,
-	0x6b,
-	0xe6,
-	0x6d,
-	0xa5,
-	0x6d,
-	0xc9,
-	0x02,
-	0xf0,
-	0x3e,
-	0xa0,
-	0x09,
-	0x53,
-	0xcc,
-	0x80,
-	0x7b,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0x14,
-	0x7d,
-	0x32,
-	0x00,
-	0xad,
-	0x0a,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x01,
-	0x7d,
-	0x85,
-	0x75,
-	0xbd,
-	0x02,
-	0x7d,
-	0x85,
-	0x76,
-	0xad,
-	0x0b,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x01,
-	0x7d,
-	0x85,
-	0x77,
-	0xbd,
-	0x02,
-	0x7d,
-	0x85,
-	0x78,
-	0xad,
-	0x0c,
-	0x7d,
-	0x0a,
-	0xaa,
-	0xbd,
-	0x01,
-	0x7d,
-	0x85,
-	0x79,
-	0xbd,
-	0x02,
-	0x7d,
-	0x85,
-	0x7a,
-	0x4c,
-	0x20,
-	0x2b,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x33,
-	0xbe,
-	0x36,
-	0x00,
-	0x53,
-	0x35,
-	0xbe,
-	0x38,
-	0x00,
-	0xa0,
-	0x00,
-	0xfc,
-	0xbd,
-	0xd5,
-	0x80,
-	0x0a,
-	0xbd,
-	0xd6,
-	0x80,
-	0x69,
-	0x00,
-	0x99,
-	0xd5,
-	0x80,
-	0xbd,
-	0xd7,
-	0x80,
-	0x69,
-	0x00,
-	0x99,
-	0xd6,
-	0x80,
-	0xbd,
-	0x1d,
-	0x81,
-	0x0a,
-	0xbd,
-	0x1e,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x1d,
-	0x81,
-	0xbd,
-	0x1f,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x1e,
-	0x81,
-	0xbd,
-	0x65,
-	0x81,
-	0x0a,
-	0xbd,
-	0x66,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x65,
-	0x81,
-	0xbd,
-	0x67,
-	0x81,
-	0x69,
-	0x00,
-	0x99,
-	0x66,
-	0x81,
-	0xc8,
-	0xc8,
-	0xe8,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x48,
-	0xd0,
-	0xbb,
-	0xa9,
-	0x62,
-	0x85,
-	0x50,
-	0xa9,
-	0x53,
-	0x85,
-	0x51,
-	0x64,
-	0x2e,
-	0xa2,
-	0x00,
-	0x64,
-	0x3e,
-	0x64,
-	0x3f,
-	0x64,
-	0x40,
-	0x64,
-	0x42,
-	0x64,
-	0x43,
-	0x64,
-	0x44,
-	0x64,
-	0x46,
-	0x64,
-	0x47,
-	0x64,
-	0x48,
-	0xb2,
-	0x50,
-	0x85,
-	0x2f,
-	0x5d,
-	0xd5,
-	0x80,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xd6,
-	0x80,
-	0xf0,
-	0x12,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x40,
-	0xa5,
-	0x2f,
-	0x5d,
-	0x1d,
-	0x81,
-	0x18,
-	0x65,
-	0x42,
-	0x85,
-	0x42,
-	0x98,
-	0x65,
-	0x43,
-	0x85,
-	0x43,
-	0x90,
-	0x03,
-	0xe6,
-	0x44,
-	0x18,
-	0xbd,
-	0x1e,
-	0x81,
-	0xf0,
-	0x12,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x43,
-	0x85,
-	0x43,
-	0x98,
-	0x65,
-	0x44,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x44,
-	0xa5,
-	0x2f,
-	0x5d,
-	0x65,
-	0x81,
-	0x18,
-	0x65,
-	0x46,
-	0x85,
-	0x46,
-	0x98,
-	0x65,
-	0x47,
-	0x85,
-	0x47,
-	0x90,
-	0x03,
-	0xe6,
-	0x48,
-	0x18,
-	0xbd,
-	0x66,
-	0x81,
-	0xf0,
-	0x12,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x47,
-	0x85,
-	0x47,
-	0x98,
-	0x65,
-	0x48,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x48,
-	0xe6,
-	0x50,
-	0xd0,
-	0x02,
-	0xe6,
-	0x51,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x30,
-	0xf0,
-	0x03,
-	0x4c,
-	0x88,
-	0x2e,
-	0xa6,
-	0x2e,
-	0x06,
-	0x3e,
-	0x26,
-	0x3f,
-	0x26,
-	0x40,
-	0x06,
-	0x3e,
-	0xa9,
-	0x00,
-	0x65,
-	0x3f,
-	0x9d,
-	0xad,
-	0x81,
-	0xa9,
-	0x00,
-	0x65,
-	0x40,
-	0x9d,
-	0xae,
-	0x81,
-	0x06,
-	0x42,
-	0x26,
-	0x43,
-	0x26,
-	0x44,
-	0x06,
-	0x42,
-	0xa9,
-	0x00,
-	0x65,
-	0x43,
-	0x85,
-	0x42,
-	0xa9,
-	0x00,
-	0x65,
-	0x44,
-	0x85,
-	0x43,
-	0x38,
-	0xa5,
-	0x42,
-	0xe5,
-	0x38,
-	0xa5,
-	0x43,
-	0xe5,
-	0x39,
-	0x30,
-	0x06,
-	0xa5,
-	0x38,
-	0xa4,
-	0x39,
-	0x80,
-	0x15,
-	0x38,
-	0xa5,
-	0x42,
-	0xe5,
-	0x36,
-	0xa5,
-	0x43,
-	0xe5,
-	0x37,
-	0x30,
-	0x06,
-	0xa5,
-	0x42,
-	0xa4,
-	0x43,
-	0x80,
-	0x04,
-	0xa5,
-	0x36,
-	0xa4,
-	0x37,
-	0x9d,
-	0xdf,
-	0x81,
-	0x98,
-	0x9d,
-	0xe0,
-	0x81,
-	0x06,
-	0x46,
-	0x26,
-	0x47,
-	0x26,
-	0x48,
-	0x06,
-	0x46,
-	0xa9,
-	0x00,
-	0x65,
-	0x47,
-	0x85,
-	0x46,
-	0xa9,
-	0x00,
-	0x65,
-	0x48,
-	0x85,
-	0x47,
-	0x38,
-	0xa5,
-	0x46,
-	0xe5,
-	0x38,
-	0xa5,
-	0x47,
-	0xe5,
-	0x39,
-	0x30,
-	0x06,
-	0xa5,
-	0x38,
-	0xa4,
-	0x39,
-	0x80,
-	0x15,
-	0x38,
-	0xa5,
-	0x46,
-	0xe5,
-	0x36,
-	0xa5,
-	0x47,
-	0xe5,
-	0x37,
-	0x30,
-	0x06,
-	0xa5,
-	0x46,
-	0xa4,
-	0x47,
-	0x80,
-	0x04,
-	0xa5,
-	0x36,
-	0xa4,
-	0x37,
-	0x9d,
-	0x11,
-	0x82,
-	0x98,
-	0x9d,
-	0x12,
-	0x82,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x18,
-	0xd0,
-	0x3b,
-	0x9e,
-	0xad,
-	0x81,
-	0x9e,
-	0xae,
-	0x81,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x39,
-	0x30,
-	0x06,
-	0xa5,
-	0x38,
-	0xa4,
-	0x39,
-	0x80,
-	0x15,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x36,
-	0xa9,
-	0x00,
-	0xe5,
-	0x37,
-	0x30,
-	0x06,
-	0xa9,
-	0x00,
-	0xa0,
-	0x00,
-	0x80,
-	0x04,
-	0xa5,
-	0x36,
-	0xa4,
-	0x37,
-	0x9d,
-	0xdf,
-	0x81,
-	0x9d,
-	0x11,
-	0x82,
-	0x98,
-	0x9d,
-	0xe0,
-	0x81,
-	0x9d,
-	0x12,
-	0x82,
-	0xe8,
-	0xe8,
-	0x86,
-	0x2e,
-	0xe0,
-	0x32,
-	0xb0,
-	0x03,
-	0x4c,
-	0x74,
-	0x2e,
-	0x60,
-	0xa5,
-	0x72,
-	0x64,
-	0x38,
-	0x64,
-	0x39,
-	0x05,
-	0x73,
-	0xd0,
-	0x05,
-	0x64,
-	0x32,
-	0x64,
-	0x33,
-	0x60,
-	0x64,
-	0x2f,
-	0x64,
-	0x3e,
-	0x64,
-	0x3f,
-	0x64,
-	0x40,
-	0xa2,
-	0x00,
-	0xa0,
-	0x00,
-	0xa5,
-	0x2f,
-	0xf0,
-	0x05,
-	0xc9,
-	0x04,
-	0xf0,
-	0x01,
-	0xc8,
-	0x84,
-	0x30,
-	0x64,
-	0x2e,
-	0xa4,
-	0x30,
-	0xa5,
-	0x2e,
-	0xf0,
-	0x05,
-	0xc9,
-	0x04,
-	0xf0,
-	0x01,
-	0xc8,
-	0xbd,
-	0xae,
-	0x81,
-	0x85,
-	0x31,
-	0xbd,
-	0xad,
-	0x81,
-	0xc0,
-	0x01,
-	0x90,
-	0x08,
-	0xf0,
-	0x03,
-	0x0a,
-	0x26,
-	0x31,
-	0x0a,
-	0x26,
-	0x31,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0xa5,
-	0x31,
-	0xa8,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x30,
-	0x06,
-	0x90,
-	0x08,
-	0xe6,
-	0x40,
-	0x80,
-	0x04,
-	0xb0,
-	0x02,
-	0xc6,
-	0x40,
-	0xe8,
-	0xe8,
-	0xa5,
-	0x2e,
-	0x1a,
-	0x85,
-	0x2e,
-	0xc9,
-	0x05,
-	0xd0,
-	0xbd,
-	0xa5,
-	0x2f,
-	0x1a,
-	0x85,
-	0x2f,
-	0xc9,
-	0x05,
-	0xd0,
-	0xa5,
-	0xa2,
-	0x06,
-	0xa5,
-	0x40,
-	0xc9,
-	0x80,
-	0x6a,
-	0x66,
-	0x3f,
-	0x66,
-	0x3e,
-	0xca,
-	0xd0,
-	0xf6,
-	0xa5,
-	0x3f,
-	0x85,
-	0x39,
-	0xa5,
-	0x3e,
-	0x90,
-	0x05,
-	0x1a,
-	0xd0,
-	0x02,
-	0xe6,
-	0x39,
-	0x85,
-	0x38,
-	0xa5,
-	0x72,
-	0x85,
-	0x34,
-	0xa6,
-	0x73,
-	0x86,
-	0x35,
-	0xa6,
-	0x70,
-	0x10,
-	0x30,
-	0xa0,
-	0x00,
-	0x98,
-	0x38,
-	0xe5,
-	0x6e,
-	0x85,
-	0x32,
-	0x98,
-	0xe5,
-	0x6f,
-	0x85,
-	0x33,
-	0x98,
-	0xe5,
-	0x70,
-	0xf0,
-	0x0c,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x4a,
-	0x66,
-	0x33,
-	0x66,
-	0x32,
-	0xaa,
-	0xd0,
-	0xf4,
-	0x20,
-	0x2f,
-	0x39,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x38,
-	0x85,
-	0x32,
-	0xa5,
-	0x33,
-	0x65,
-	0x39,
-	0x85,
-	0x33,
-	0x80,
-	0x26,
-	0x8a,
-	0xf0,
-	0x0c,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x4a,
-	0x66,
-	0x6f,
-	0x66,
-	0x6e,
-	0xaa,
-	0xd0,
-	0xf4,
-	0xa0,
-	0x02,
-	0x53,
-	0x6e,
-	0x00,
-	0x32,
-	0x00,
-	0x20,
-	0x2f,
-	0x39,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x32,
-	0x85,
-	0x32,
-	0xa5,
-	0x39,
-	0xe5,
-	0x33,
-	0x85,
-	0x33,
-	0xa2,
-	0x00,
-	0x38,
-	0xbd,
-	0xad,
-	0x81,
-	0xe5,
-	0x32,
-	0xa8,
-	0xbd,
-	0xae,
-	0x81,
-	0xe5,
-	0x33,
-	0x30,
-	0x10,
-	0xc9,
-	0x03,
-	0x90,
-	0x1a,
-	0xd0,
-	0x04,
-	0xc0,
-	0xff,
-	0x90,
-	0x14,
-	0xa0,
-	0xff,
-	0xa9,
-	0x03,
-	0x80,
-	0x0e,
-	0xc9,
-	0xfc,
-	0x90,
-	0x06,
-	0xd0,
-	0x08,
-	0xc0,
-	0x00,
-	0xb0,
-	0x04,
-	0xa0,
-	0x00,
-	0xa9,
-	0xfc,
-	0x9d,
-	0xae,
-	0x81,
-	0x98,
-	0x9d,
-	0xad,
-	0x81,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x32,
-	0xd0,
-	0xc7,
-	0x60,
-	0x20,
-	0x6e,
-	0x31,
-	0xa9,
-	0xad,
-	0x85,
-	0x4a,
-	0xa9,
-	0x81,
-	0x85,
-	0x4b,
-	0x20,
-	0xc1,
-	0x32,
-	0xa0,
-	0x32,
-	0x53,
-	0x43,
-	0x82,
-	0xad,
-	0x81,
-	0xa9,
-	0xdf,
-	0x85,
-	0x4a,
-	0xa9,
-	0x81,
-	0x85,
-	0x4b,
-	0x20,
-	0xc1,
-	0x32,
-	0x20,
-	0xfe,
-	0x33,
-	0xa0,
-	0x32,
-	0x53,
-	0x43,
-	0x82,
-	0xdf,
-	0x81,
-	0xa9,
-	0x11,
-	0x85,
-	0x4a,
-	0xa9,
-	0x82,
-	0x85,
-	0x4b,
-	0x20,
-	0xc1,
-	0x32,
-	0x20,
-	0xfe,
-	0x33,
-	0xa0,
-	0x32,
-	0x53,
-	0x43,
-	0x82,
-	0x11,
-	0x82,
-	0x60,
-	0xa5,
-	0x28,
-	0x49,
-	0x04,
-	0x85,
-	0x2e,
-	0x38,
-	0xa5,
-	0x29,
-	0x1a,
-	0xe5,
-	0x28,
-	0x49,
-	0x14,
-	0x85,
-	0x38,
-	0x84,
-	0x39,
-	0x64,
-	0x3a,
-	0x64,
-	0x3b,
-	0xa2,
-	0x00,
-	0xa5,
-	0x3a,
-	0x85,
-	0x32,
-	0xa5,
-	0x3b,
-	0x85,
-	0x33,
-	0xa9,
-	0x14,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0xda,
-	0x20,
-	0x0b,
-	0x39,
-	0xfa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x2e,
-	0x9d,
-	0x75,
-	0x82,
-	0x18,
-	0xa5,
-	0x3a,
-	0x65,
-	0x38,
-	0x85,
-	0x3a,
-	0xa5,
-	0x3b,
-	0x65,
-	0x39,
-	0x85,
-	0x3b,
-	0xe8,
-	0xe0,
-	0x05,
-	0xd0,
-	0xd3,
-	0xbd,
-	0x74,
-	0x82,
-	0x1a,
-	0x9d,
-	0x75,
-	0x82,
-	0xa5,
-	0x26,
-	0x49,
-	0x04,
-	0x85,
-	0x2e,
-	0x38,
-	0xa5,
-	0x27,
-	0x1a,
-	0xe5,
-	0x26,
-	0x49,
-	0x10,
-	0x85,
-	0x38,
-	0x84,
-	0x39,
-	0x64,
-	0x3a,
-	0x64,
-	0x3b,
-	0xa2,
-	0x00,
-	0xa5,
-	0x3a,
-	0x85,
-	0x32,
-	0xa5,
-	0x3b,
-	0x85,
-	0x33,
-	0xa9,
-	0x10,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0xda,
-	0x20,
-	0x0b,
-	0x39,
-	0xfa,
-	0x18,
-	0xa5,
-	0x32,
-	0x65,
-	0x2e,
-	0x9d,
-	0x7b,
-	0x82,
-	0x18,
-	0xa5,
-	0x3a,
-	0x65,
-	0x38,
-	0x85,
-	0x3a,
-	0xa5,
-	0x3b,
-	0x65,
-	0x39,
-	0x85,
-	0x3b,
-	0xe8,
-	0xe0,
-	0x05,
-	0xd0,
-	0xd3,
-	0xbd,
-	0x7a,
-	0x82,
-	0x1a,
-	0x9d,
-	0x7b,
-	0x82,
-	0x60,
-	0xa5,
-	0x2e,
-	0xa2,
-	0x00,
-	0xe8,
-	0xdd,
-	0x75,
-	0x82,
-	0xb0,
-	0xfa,
-	0xca,
-	0x8a,
-	0x0a,
-	0x18,
-	0x60,
-	0xa5,
-	0x2f,
-	0xa2,
-	0x00,
-	0xe8,
-	0xdd,
-	0x7b,
-	0x82,
-	0xb0,
-	0xfa,
-	0xca,
-	0x8a,
-	0x0a,
-	0x18,
-	0x60,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x38,
-	0xa5,
-	0x2e,
-	0xfd,
-	0x75,
-	0x82,
-	0x85,
-	0x31,
-	0xf0,
-	0x0f,
-	0xc8,
-	0x38,
-	0xbd,
-	0x76,
-	0x82,
-	0xfd,
-	0x75,
-	0x82,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x20,
-	0x6f,
-	0x32,
-	0x60,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x38,
-	0xa5,
-	0x2f,
-	0xfd,
-	0x7b,
-	0x82,
-	0x85,
-	0x31,
-	0xf0,
-	0x13,
-	0x18,
-	0x98,
-	0x69,
-	0x09,
-	0xa8,
-	0x38,
-	0xbd,
-	0x7c,
-	0x82,
-	0xfd,
-	0x7b,
-	0x82,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x20,
-	0x6f,
-	0x32,
-	0x60,
-	0x38,
-	0xb1,
-	0x4a,
-	0xe5,
-	0x38,
-	0x85,
-	0x32,
-	0xc8,
-	0xb1,
-	0x4a,
-	0xa0,
-	0x00,
-	0xe5,
-	0x39,
-	0x85,
-	0x33,
-	0x10,
-	0x0c,
-	0x38,
-	0x98,
-	0xe5,
-	0x32,
-	0x85,
-	0x32,
-	0x98,
-	0xe5,
-	0x33,
-	0x85,
-	0x33,
-	0xc8,
-	0x5a,
-	0xa5,
-	0x32,
-	0x45,
-	0x31,
-	0x85,
-	0x32,
-	0x84,
-	0x4c,
-	0xa5,
-	0x33,
-	0x45,
-	0x31,
-	0x18,
-	0x65,
-	0x4c,
-	0x85,
-	0x33,
-	0x20,
-	0x2f,
-	0x39,
-	0x7a,
-	0xf0,
-	0x0e,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x32,
-	0x85,
-	0x38,
-	0xa5,
-	0x39,
-	0xe5,
-	0x33,
-	0x85,
-	0x39,
-	0x60,
-	0x18,
-	0xa5,
-	0x38,
-	0x65,
-	0x32,
-	0x85,
-	0x38,
-	0xa5,
-	0x39,
-	0x65,
-	0x33,
-	0x85,
-	0x39,
-	0x60,
-	0x64,
-	0x30,
-	0x64,
-	0x2f,
-	0x64,
-	0x2e,
-	0xa5,
-	0x2f,
-	0xcd,
-	0x7b,
-	0x82,
-	0xb0,
-	0x33,
-	0xa5,
-	0x2e,
-	0xcd,
-	0x75,
-	0x82,
-	0xb0,
-	0x0d,
-	0xb2,
-	0x4a,
-	0x85,
-	0x38,
-	0xa0,
-	0x01,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x79,
-	0x82,
-	0xf0,
-	0x10,
-	0x90,
-	0x0e,
-	0xa0,
-	0x08,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0x20,
-	0x07,
-	0x32,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x7f,
-	0x82,
-	0xf0,
-	0x38,
-	0x90,
-	0x36,
-	0xa5,
-	0x2e,
-	0xcd,
-	0x75,
-	0x82,
-	0xb0,
-	0x0e,
-	0xa0,
-	0x28,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x79,
-	0x82,
-	0xf0,
-	0x10,
-	0x90,
-	0x0e,
-	0xa0,
-	0x30,
-	0xb1,
-	0x4a,
-	0x85,
-	0x38,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x85,
-	0x39,
-	0x4c,
-	0xd1,
-	0x33,
-	0x20,
-	0x07,
-	0x32,
-	0x69,
-	0x28,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0x4c,
-	0xd1,
-	0x33,
-	0xa5,
-	0x2e,
-	0xcd,
-	0x75,
-	0x82,
-	0xb0,
-	0x0c,
-	0x20,
-	0x16,
-	0x32,
-	0x49,
-	0x05,
-	0xa8,
-	0x20,
-	0x48,
-	0x32,
-	0x4c,
-	0xd1,
-	0x33,
-	0xcd,
-	0x79,
-	0x82,
-	0xf0,
-	0x0f,
-	0x90,
-	0x0d,
-	0x20,
-	0x16,
-	0x32,
-	0x49,
-	0x05,
-	0x69,
-	0x08,
-	0xa8,
-	0x20,
-	0x48,
-	0x32,
-	0x80,
-	0x6c,
-	0x20,
-	0x16,
-	0x32,
-	0x86,
-	0x3d,
-	0x49,
-	0x05,
-	0x85,
-	0x4d,
-	0x20,
-	0x07,
-	0x32,
-	0x86,
-	0x3c,
-	0x65,
-	0x4d,
-	0x85,
-	0x4d,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0xa6,
-	0x3d,
-	0x38,
-	0xa5,
-	0x2f,
-	0xfd,
-	0x7b,
-	0x82,
-	0xf0,
-	0x4c,
-	0xa6,
-	0x31,
-	0xd0,
-	0x09,
-	0xa6,
-	0x3d,
-	0xa4,
-	0x4d,
-	0x20,
-	0x48,
-	0x32,
-	0x80,
-	0x3f,
-	0x48,
-	0xa5,
-	0x38,
-	0x85,
-	0x3a,
-	0xa5,
-	0x39,
-	0x85,
-	0x3b,
-	0xa6,
-	0x3c,
-	0x18,
-	0xa5,
-	0x4d,
-	0x69,
-	0x0a,
-	0xa8,
-	0x20,
-	0x25,
-	0x32,
-	0xa6,
-	0x3d,
-	0x38,
-	0xbd,
-	0x7c,
-	0x82,
-	0xfd,
-	0x7b,
-	0x82,
-	0x85,
-	0x34,
-	0x64,
-	0x35,
-	0x68,
-	0x85,
-	0x31,
-	0x38,
-	0xa5,
-	0x38,
-	0xe5,
-	0x3a,
-	0x85,
-	0x32,
-	0xa5,
-	0x39,
-	0xe5,
-	0x3b,
-	0x85,
-	0x33,
-	0xa0,
-	0x02,
-	0x53,
-	0x3a,
-	0x00,
-	0x38,
-	0x00,
-	0xa0,
-	0x00,
-	0xa5,
-	0x33,
-	0x20,
-	0x7f,
-	0x32,
-	0xa6,
-	0x30,
-	0xa5,
-	0x38,
-	0x9d,
-	0x43,
-	0x82,
-	0xa5,
-	0x39,
-	0xe8,
-	0x9d,
-	0x43,
-	0x82,
-	0xe8,
-	0x86,
-	0x30,
-	0x18,
-	0xa5,
-	0x2e,
-	0x69,
-	0x14,
-	0x85,
-	0x2e,
-	0xc9,
-	0x51,
-	0xb0,
-	0x03,
-	0x4c,
-	0xc7,
-	0x32,
-	0x18,
-	0xa5,
-	0x2f,
-	0x69,
-	0x10,
-	0x85,
-	0x2f,
-	0xc9,
-	0x41,
-	0xb0,
-	0x03,
-	0x4c,
-	0xc5,
-	0x32,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x5b,
-	0x82,
-	0x32,
-	0x00,
-	0xa2,
-	0x00,
-	0x38,
-	0xbd,
-	0x43,
-	0x82,
-	0xe5,
-	0x32,
-	0x9d,
-	0x43,
-	0x82,
-	0xe8,
-	0xbd,
-	0x43,
-	0x82,
-	0xe5,
-	0x33,
-	0x9d,
-	0x43,
-	0x82,
-	0xe8,
-	0xe0,
-	0x32,
-	0xd0,
-	0xe9,
-	0x60,
-	0x85,
-	0x4c,
-	0x86,
-	0x4d,
-	0xa2,
-	0x00,
-	0xdc,
-	0xb1,
-	0x4a,
-	0x45,
-	0x2e,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xdc,
-	0xc8,
-	0xb1,
-	0x4a,
-	0x48,
-	0x45,
-	0x2e,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x40,
-	0xdc,
-	0xb1,
-	0x4c,
-	0x45,
-	0x2f,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xdc,
-	0xc8,
-	0xb1,
-	0x4c,
-	0x48,
-	0x45,
-	0x2f,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x2f,
-	0x85,
-	0x40,
-	0x06,
-	0x3e,
-	0xa5,
-	0x3f,
-	0x2a,
-	0xdc,
-	0x91,
-	0x4a,
-	0xa5,
-	0x40,
-	0x2a,
-	0xc8,
-	0x91,
-	0x4a,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x32,
-	0xd0,
-	0xa2,
-	0x60,
-	0xc9,
-	0xa7,
-	0x90,
-	0x03,
-	0xa9,
-	0xa6,
-	0x60,
-	0xc9,
-	0x5a,
-	0xb0,
-	0x02,
-	0xa9,
-	0x5a,
-	0x60,
-	0xad,
-	0x17,
-	0x6b,
-	0x85,
-	0x2e,
-	0xa9,
-	0x80,
-	0x38,
-	0xe5,
-	0x2e,
-	0x85,
-	0x2f,
-	0xa9,
-	0x85,
-	0x85,
-	0x4a,
-	0xa9,
-	0x6b,
-	0x85,
-	0x4b,
-	0xa9,
-	0xdf,
-	0xa2,
-	0x81,
-	0x20,
-	0x1f,
-	0x34,
-	0xa9,
-	0xb7,
-	0x85,
-	0x4a,
-	0xa9,
-	0x6b,
-	0x85,
-	0x4b,
-	0xa9,
-	0x11,
-	0xa2,
-	0x82,
-	0x20,
-	0x1f,
-	0x34,
-	0xa9,
-	0xe9,
-	0x85,
-	0x4a,
-	0xa9,
-	0x6b,
-	0x85,
-	0x4b,
-	0xa9,
-	0xad,
-	0xa2,
-	0x81,
-	0x20,
-	0x1f,
-	0x34,
-	0xa9,
-	0x9d,
-	0x85,
-	0x4a,
-	0xa9,
-	0x74,
-	0x85,
-	0x4b,
-	0xa9,
-	0x4a,
-	0x85,
-	0x4c,
-	0xa9,
-	0x70,
-	0x85,
-	0x4d,
-	0xa9,
-	0xda,
-	0x85,
-	0x4e,
-	0xa9,
-	0x56,
-	0x85,
-	0x4f,
-	0xa2,
-	0x02,
-	0xbd,
-	0x7f,
-	0x6b,
-	0xbc,
-	0x07,
-	0x7d,
-	0x99,
-	0x7e,
-	0x00,
-	0xbd,
-	0x82,
-	0x6b,
-	0xbc,
-	0x0a,
-	0x7d,
-	0x99,
-	0x81,
-	0x00,
-	0xca,
-	0x10,
-	0xeb,
-	0xa9,
-	0x11,
-	0x85,
-	0x2e,
-	0xa9,
-	0x15,
-	0x85,
-	0x2f,
-	0xa0,
-	0x06,
-	0xd3,
-	0x4a,
-	0x75,
-	0x00,
-	0xa0,
-	0x02,
-	0xd3,
-	0x4e,
-	0x30,
-	0x00,
-	0xa6,
-	0x31,
-	0xa4,
-	0x30,
-	0xb9,
-	0x8a,
-	0x56,
-	0x85,
-	0x50,
-	0xd0,
-	0x0d,
-	0xbd,
-	0x85,
-	0x6b,
-	0x85,
-	0x3f,
-	0xbd,
-	0x86,
-	0x6b,
-	0x85,
-	0x40,
-	0x4c,
-	0xdf,
-	0x35,
-	0xb9,
-	0x8b,
-	0x56,
-	0x85,
-	0x51,
-	0xb9,
-	0x8c,
-	0x56,
-	0x85,
-	0x52,
-	0xb9,
-	0x8d,
-	0x56,
-	0x85,
-	0x53,
-	0xbd,
-	0x85,
-	0x6b,
-	0x45,
-	0x50,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xbd,
-	0x86,
-	0x6b,
-	0x48,
-	0x45,
-	0x50,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x50,
-	0x85,
-	0x40,
-	0xa5,
-	0x51,
-	0xf0,
-	0x27,
-	0x5d,
-	0x87,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0x88,
-	0x6b,
-	0x48,
-	0x45,
-	0x51,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x51,
-	0x85,
-	0x40,
-	0xa5,
-	0x52,
-	0xf0,
-	0x27,
-	0x5d,
-	0x8f,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0x90,
-	0x6b,
-	0x48,
-	0x45,
-	0x52,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x52,
-	0x85,
-	0x40,
-	0xa5,
-	0x53,
-	0xf0,
-	0x27,
-	0x5d,
-	0x91,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0x92,
-	0x6b,
-	0x48,
-	0x45,
-	0x53,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x53,
-	0x85,
-	0x40,
-	0xa5,
-	0x3e,
-	0x10,
-	0x06,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x02,
-	0xe6,
-	0x40,
-	0xa5,
-	0x40,
-	0x30,
-	0x15,
-	0x49,
-	0x0b,
-	0x18,
-	0x69,
-	0x80,
-	0x85,
-	0x33,
-	0xa5,
-	0x3f,
-	0x49,
-	0x0b,
-	0x85,
-	0x32,
-	0x98,
-	0x18,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x80,
-	0x2b,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x3f,
-	0xa8,
-	0xa9,
-	0x00,
-	0xe5,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x3e,
-	0x85,
-	0x32,
-	0x84,
-	0x3e,
-	0xa9,
-	0x80,
-	0xe5,
-	0x3e,
-	0x48,
-	0xa5,
-	0x40,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0x68,
-	0xe5,
-	0x3e,
-	0x85,
-	0x33,
-	0xa5,
-	0x75,
-	0x45,
-	0x7e,
-	0x85,
-	0x34,
-	0x84,
-	0x35,
-	0xa5,
-	0x76,
-	0x45,
-	0x7f,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xa5,
-	0x77,
-	0x45,
-	0x80,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x06,
-	0x34,
-	0x2a,
-	0x06,
-	0x34,
-	0x69,
-	0x00,
-	0x85,
-	0x34,
-	0x45,
-	0x32,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x34,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x06,
-	0x3f,
-	0x2a,
-	0xb0,
-	0x0a,
-	0x06,
-	0x3f,
-	0x69,
-	0x00,
-	0xb0,
-	0x04,
-	0xc9,
-	0xf4,
-	0x90,
-	0x04,
-	0xa9,
-	0xf3,
-	0x80,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x02,
-	0xa9,
-	0x40,
-	0x92,
-	0x4c,
-	0xa6,
-	0x31,
-	0xa5,
-	0x50,
-	0xd0,
-	0x0d,
-	0xbd,
-	0xb7,
-	0x6b,
-	0x85,
-	0x3f,
-	0xbd,
-	0xb8,
-	0x6b,
-	0x85,
-	0x40,
-	0x4c,
-	0x38,
-	0x37,
-	0xbd,
-	0xb7,
-	0x6b,
-	0x45,
-	0x50,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xbd,
-	0xb8,
-	0x6b,
-	0x48,
-	0x45,
-	0x50,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x50,
-	0x85,
-	0x40,
-	0xa5,
-	0x51,
-	0xf0,
-	0x27,
-	0x5d,
-	0xb9,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xba,
-	0x6b,
-	0x48,
-	0x45,
-	0x51,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x51,
-	0x85,
-	0x40,
-	0xa5,
-	0x52,
-	0xf0,
-	0x27,
-	0x5d,
-	0xc1,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xc2,
-	0x6b,
-	0x48,
-	0x45,
-	0x52,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x52,
-	0x85,
-	0x40,
-	0xa5,
-	0x53,
-	0xf0,
-	0x27,
-	0x5d,
-	0xc3,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xc4,
-	0x6b,
-	0x48,
-	0x45,
-	0x53,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x53,
-	0x85,
-	0x40,
-	0xa5,
-	0x3e,
-	0x10,
-	0x06,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x02,
-	0xe6,
-	0x40,
-	0xa5,
-	0x40,
-	0x30,
-	0x15,
-	0x49,
-	0x0b,
-	0x18,
-	0x69,
-	0x80,
-	0x85,
-	0x33,
-	0xa5,
-	0x3f,
-	0x49,
-	0x0b,
-	0x85,
-	0x32,
-	0x98,
-	0x18,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x80,
-	0x2b,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x3f,
-	0xa8,
-	0xa9,
-	0x00,
-	0xe5,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0x3e,
-	0x85,
-	0x32,
-	0x84,
-	0x3e,
-	0xa9,
-	0x80,
-	0xe5,
-	0x3e,
-	0x48,
-	0xa5,
-	0x40,
-	0x49,
-	0x0b,
-	0x85,
-	0x3e,
-	0x38,
-	0x68,
-	0xe5,
-	0x3e,
-	0x85,
-	0x33,
-	0xa5,
-	0x81,
-	0x45,
-	0x78,
-	0x85,
-	0x34,
-	0x84,
-	0x35,
-	0xa5,
-	0x82,
-	0x45,
-	0x79,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x85,
-	0x35,
-	0xa5,
-	0x83,
-	0x45,
-	0x7a,
-	0x18,
-	0x65,
-	0x34,
-	0x85,
-	0x34,
-	0x98,
-	0x65,
-	0x35,
-	0x06,
-	0x34,
-	0x2a,
-	0x06,
-	0x34,
-	0x69,
-	0x00,
-	0x85,
-	0x34,
-	0x45,
-	0x32,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x34,
-	0x45,
-	0x33,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x06,
-	0x3f,
-	0x2a,
-	0xb0,
-	0x0a,
-	0x06,
-	0x3f,
-	0x69,
-	0x00,
-	0xb0,
-	0x04,
-	0xc9,
-	0xf4,
-	0x90,
-	0x04,
-	0xa9,
-	0xf3,
-	0x80,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x02,
-	0xa9,
-	0x40,
-	0xa0,
-	0x01,
-	0x91,
-	0x4c,
-	0xa6,
-	0x31,
-	0xa5,
-	0x50,
-	0xd0,
-	0x0d,
-	0xbd,
-	0xe9,
-	0x6b,
-	0x85,
-	0x3f,
-	0xbd,
-	0xea,
-	0x6b,
-	0x85,
-	0x40,
-	0x4c,
-	0x93,
-	0x38,
-	0xbd,
-	0xe9,
-	0x6b,
-	0x45,
-	0x50,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xbd,
-	0xea,
-	0x6b,
-	0x48,
-	0x45,
-	0x50,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x50,
-	0x85,
-	0x40,
-	0xa5,
-	0x51,
-	0xf0,
-	0x27,
-	0x5d,
-	0xeb,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xec,
-	0x6b,
-	0x48,
-	0x45,
-	0x51,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x51,
-	0x85,
-	0x40,
-	0xa5,
-	0x52,
-	0xf0,
-	0x27,
-	0x5d,
-	0xf3,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xf4,
-	0x6b,
-	0x48,
-	0x45,
-	0x52,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x52,
-	0x85,
-	0x40,
-	0xa5,
-	0x53,
-	0xf0,
-	0x27,
-	0x5d,
-	0xf5,
-	0x6b,
-	0x18,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x98,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x90,
-	0x03,
-	0xe6,
-	0x40,
-	0x18,
-	0xbd,
-	0xf6,
-	0x6b,
-	0x48,
-	0x45,
-	0x53,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x7a,
-	0x10,
-	0x03,
-	0x38,
-	0xe5,
-	0x53,
-	0x85,
-	0x40,
-	0xa5,
-	0x3e,
-	0x10,
-	0x06,
-	0xe6,
-	0x3f,
-	0xd0,
-	0x02,
-	0xe6,
-	0x40,
-	0xa2,
-	0x00,
-	0xa5,
-	0x40,
-	0x10,
-	0x0e,
-	0xe8,
-	0xa9,
-	0x00,
-	0x38,
-	0xe5,
-	0x3f,
-	0x85,
-	0x3f,
-	0xa9,
-	0x00,
-	0xe5,
-	0x40,
-	0x85,
-	0x40,
-	0xda,
-	0xa5,
-	0x3f,
-	0x49,
-	0x0b,
-	0x85,
-	0x32,
-	0x84,
-	0x33,
-	0xa5,
-	0x40,
-	0x49,
-	0x0b,
-	0x18,
-	0x65,
-	0x33,
-	0x85,
-	0x33,
-	0x46,
-	0x33,
-	0x66,
-	0x32,
-	0x10,
-	0x02,
-	0xe6,
-	0x33,
-	0x18,
-	0xa5,
-	0x33,
-	0x69,
-	0x80,
-	0xaa,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0x33,
-	0x7a,
-	0xf0,
-	0x01,
-	0x8a,
-	0x20,
-	0x84,
-	0x34,
-	0xa0,
-	0x02,
-	0x91,
-	0x4c,
-	0x18,
-	0xa5,
-	0x4a,
-	0x69,
-	0x06,
-	0x85,
-	0x4a,
-	0x90,
-	0x03,
-	0xe6,
-	0x4b,
-	0x18,
-	0xa5,
-	0x4c,
-	0x69,
-	0x03,
-	0x85,
-	0x4c,
-	0x90,
-	0x03,
-	0xe6,
-	0x4d,
-	0x18,
-	0xa5,
-	0x4e,
-	0x69,
-	0x02,
-	0x85,
-	0x4e,
-	0x90,
-	0x02,
-	0xe6,
-	0x4f,
-	0xc6,
-	0x2f,
-	0xf0,
-	0x03,
-	0x4c,
-	0x02,
-	0x35,
-	0xc6,
-	0x2e,
-	0xf0,
-	0x03,
-	0x4c,
-	0xfe,
-	0x34,
-	0xa9,
-	0x01,
-	0x85,
-	0x22,
-	0x60,
-	0x64,
-	0x36,
-	0x64,
-	0x37,
-	0xa2,
-	0x10,
-	0x06,
-	0x32,
-	0x26,
-	0x33,
-	0x26,
-	0x36,
-	0x26,
-	0x37,
-	0xa5,
-	0x36,
-	0x38,
-	0xe5,
-	0x34,
-	0xa8,
-	0xa5,
-	0x37,
-	0xe5,
-	0x35,
-	0x90,
-	0x06,
-	0x85,
-	0x37,
-	0x84,
-	0x36,
-	0xe6,
-	0x32,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0x20,
-	0x0b,
-	0x39,
-	0x46,
-	0x35,
-	0x66,
-	0x34,
-	0x90,
-	0x06,
-	0xe6,
-	0x34,
-	0xd0,
-	0x02,
-	0xe6,
-	0x35,
-	0x38,
-	0xa5,
-	0x36,
-	0xe5,
-	0x34,
-	0xa5,
-	0x37,
-	0xe5,
-	0x35,
-	0x30,
-	0x06,
-	0xe6,
-	0x32,
-	0xd0,
-	0x02,
-	0xe6,
-	0x33,
-	0x60,
-	0xa5,
-	0x32,
-	0x45,
-	0x34,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x32,
-	0x45,
-	0x35,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x34,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x35,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x41,
-	0xa5,
-	0x35,
-	0x10,
-	0x0d,
-	0x38,
-	0xa5,
-	0x40,
-	0xe5,
-	0x32,
-	0x85,
-	0x40,
-	0xa5,
-	0x41,
-	0xe5,
-	0x33,
-	0x85,
-	0x41,
-	0x60,
-	0xa5,
-	0x32,
-	0x45,
-	0x34,
-	0x85,
-	0x3e,
-	0x84,
-	0x3f,
-	0xa5,
-	0x32,
-	0x45,
-	0x35,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x34,
-	0x18,
-	0x65,
-	0x3f,
-	0x85,
-	0x3f,
-	0x98,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0xa5,
-	0x33,
-	0x45,
-	0x35,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x41,
-	0x60,
-	0xda,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa9,
-	0x68,
-	0xa0,
-	0x04,
-	0x80,
-	0x04,
-	0xa9,
-	0x90,
-	0xa0,
-	0x00,
-	0x85,
-	0xe6,
-	0x84,
-	0xe7,
-	0x38,
-	0xa5,
-	0xb5,
-	0xe5,
-	0xb4,
-	0x1a,
-	0x1a,
-	0x85,
-	0xde,
-	0xa0,
-	0x02,
-	0x53,
-	0xac,
-	0x00,
-	0xea,
-	0x00,
-	0xa5,
-	0xb4,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x02,
-	0xa5,
-	0xb5,
-	0xaa,
-	0x85,
-	0xdf,
-	0x8a,
-	0x18,
-	0x65,
-	0xb6,
-	0x49,
-	0x03,
-	0x85,
-	0xe8,
-	0xa5,
-	0xaa,
-	0x48,
-	0x18,
-	0x65,
-	0xbd,
-	0x49,
-	0x3f,
-	0x65,
-	0xe8,
-	0x90,
-	0x02,
-	0xc8,
-	0x18,
-	0x69,
-	0x1b,
-	0x85,
-	0xe2,
-	0x98,
-	0x69,
-	0x6c,
-	0x85,
-	0xe3,
-	0x68,
-	0x1a,
-	0x38,
-	0xe5,
-	0xbd,
-	0x49,
-	0x3f,
-	0x18,
-	0x65,
-	0xe8,
-	0x90,
-	0x02,
-	0xc8,
-	0x18,
-	0x69,
-	0x1b,
-	0x85,
-	0xe4,
-	0x98,
-	0x69,
-	0x6c,
-	0x85,
-	0xe5,
-	0xa0,
-	0x03,
-	0xd3,
-	0xe2,
-	0xd4,
-	0x00,
-	0xd3,
-	0xe4,
-	0xd8,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0xe6,
-	0x00,
-	0x0c,
-	0xc0,
-	0xad,
-	0x76,
-	0x60,
-	0xa8,
-	0x29,
-	0x01,
-	0xd0,
-	0x0a,
-	0xa2,
-	0x80,
-	0x86,
-	0xd4,
-	0x86,
-	0xd5,
-	0x86,
-	0xd8,
-	0x86,
-	0xd9,
-	0x98,
-	0x29,
-	0x02,
-	0xd0,
-	0x06,
-	0xa2,
-	0x80,
-	0x86,
-	0xd6,
-	0x86,
-	0xda,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xd6,
-	0x85,
-	0xd7,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xda,
-	0x85,
-	0xdb,
-	0xa0,
-	0x08,
-	0x43,
-	0xd4,
-	0x00,
-	0x54,
-	0xc0,
-	0xc6,
-	0xde,
-	0xd0,
-	0x03,
-	0x4c,
-	0x25,
-	0x3b,
-	0xa4,
-	0xb6,
-	0xd0,
-	0x04,
-	0xe6,
-	0xdf,
-	0x80,
-	0x02,
-	0xc6,
-	0xdf,
-	0xa0,
-	0x03,
-	0xc3,
-	0xea,
-	0x54,
-	0xc0,
-	0xc3,
-	0xae,
-	0x54,
-	0xc0,
-	0xc3,
-	0xb0,
-	0x54,
-	0xc0,
-	0xc3,
-	0xb2,
-	0x54,
-	0xc0,
-	0xa5,
-	0xdf,
-	0xa6,
-	0xb6,
-	0xd0,
-	0x18,
-	0x18,
-	0xa5,
-	0xe2,
-	0x69,
-	0x03,
-	0x85,
-	0xe2,
-	0x90,
-	0x03,
-	0xe6,
-	0xe3,
-	0x18,
-	0xa5,
-	0xe4,
-	0x69,
-	0x03,
-	0x85,
-	0xe4,
-	0x90,
-	0x02,
-	0xe6,
-	0xe5,
-	0x80,
-	0x16,
-	0x38,
-	0xa5,
-	0xe2,
-	0xe9,
-	0x03,
-	0x85,
-	0xe2,
-	0xb0,
-	0x03,
-	0xc6,
-	0xe3,
-	0x38,
-	0xa5,
-	0xe4,
-	0xe9,
-	0x03,
-	0x85,
-	0xe4,
-	0xb0,
-	0x02,
-	0xc6,
-	0xe5,
-	0xa5,
-	0xde,
-	0x3a,
-	0xf0,
-	0x4f,
-	0xa0,
-	0x02,
-	0x53,
-	0xea,
-	0x00,
-	0xb2,
-	0x00,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x23,
-	0x38,
-	0xa5,
-	0xae,
-	0xe9,
-	0x03,
-	0x85,
-	0xae,
-	0xb0,
-	0x03,
-	0xc6,
-	0xaf,
-	0x38,
-	0xa5,
-	0xea,
-	0xe9,
-	0x03,
-	0x85,
-	0xea,
-	0xb0,
-	0x03,
-	0xc6,
-	0xeb,
-	0x38,
-	0xa5,
-	0xb0,
-	0xe9,
-	0x03,
-	0x85,
-	0xb0,
-	0xb0,
-	0x25,
-	0xc6,
-	0xb1,
-	0x80,
-	0x21,
-	0x18,
-	0xa5,
-	0xae,
-	0x69,
-	0x03,
-	0x85,
-	0xae,
-	0x90,
-	0x03,
-	0xe6,
-	0xaf,
-	0x18,
-	0xa5,
-	0xea,
-	0x69,
-	0x03,
-	0x85,
-	0xea,
-	0x90,
-	0x03,
-	0xe6,
-	0xeb,
-	0x18,
-	0xa5,
-	0xb0,
-	0x69,
-	0x03,
-	0x85,
-	0xb0,
-	0x90,
-	0x02,
-	0xe6,
-	0xb1,
-	0x18,
-	0xa5,
-	0xe6,
-	0x69,
-	0x18,
-	0x85,
-	0xe6,
-	0x90,
-	0x02,
-	0xe6,
-	0xe7,
-	0x4c,
-	0x29,
-	0x3a,
-	0xa0,
-	0x03,
-	0xc3,
-	0xea,
-	0x54,
-	0xc0,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x04,
-	0xc6,
-	0xaa,
-	0x80,
-	0x02,
-	0xe6,
-	0xaa,
-	0xc6,
-	0xab,
-	0xf0,
-	0x40,
-	0xa5,
-	0xac,
-	0xa4,
-	0xad,
-	0x85,
-	0xae,
-	0x84,
-	0xaf,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x08,
-	0x38,
-	0xe9,
-	0x3c,
-	0xb0,
-	0x09,
-	0x88,
-	0x80,
-	0x06,
-	0x18,
-	0x69,
-	0x3c,
-	0x90,
-	0x01,
-	0xc8,
-	0x85,
-	0xac,
-	0x84,
-	0xad,
-	0xa6,
-	0xab,
-	0xca,
-	0xf0,
-	0x12,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x08,
-	0x38,
-	0xe9,
-	0x3c,
-	0xb0,
-	0x09,
-	0x88,
-	0x80,
-	0x06,
-	0x18,
-	0x69,
-	0x3c,
-	0x90,
-	0x01,
-	0xc8,
-	0x85,
-	0xb0,
-	0x84,
-	0xb1,
-	0xa0,
-	0x02,
-	0x53,
-	0xac,
-	0x00,
-	0xb2,
-	0x00,
-	0xfa,
-	0x60,
-	0x64,
-	0xe6,
-	0x64,
-	0xe7,
-	0xa2,
-	0x10,
-	0x06,
-	0xe2,
-	0x26,
-	0xe3,
-	0x26,
-	0xe6,
-	0x26,
-	0xe7,
-	0xa5,
-	0xe6,
-	0x38,
-	0xe5,
-	0xe4,
-	0xa8,
-	0xa5,
-	0xe7,
-	0xe5,
-	0xe5,
-	0x90,
-	0x06,
-	0x85,
-	0xe7,
-	0x84,
-	0xe6,
-	0xe6,
-	0xe2,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0xa5,
-	0xc0,
-	0x49,
-	0x1a,
-	0x84,
-	0x17,
-	0xa6,
-	0xb4,
-	0xbd,
-	0x79,
-	0x6a,
-	0xc5,
-	0x17,
-	0xb0,
-	0x01,
-	0xe8,
-	0x86,
-	0x28,
-	0xa6,
-	0xb5,
-	0xbd,
-	0x79,
-	0x6a,
-	0xc5,
-	0x17,
-	0xb0,
-	0x01,
-	0xca,
-	0x86,
-	0x29,
-	0x8a,
-	0xa5,
-	0xc2,
-	0x49,
-	0x1a,
-	0x84,
-	0xe3,
-	0xa6,
-	0xbe,
-	0xbd,
-	0x8d,
-	0x6a,
-	0xc5,
-	0xe3,
-	0xb0,
-	0x01,
-	0xe8,
-	0x86,
-	0x26,
-	0xa6,
-	0xbf,
-	0xbd,
-	0x8d,
-	0x6a,
-	0xc5,
-	0xe3,
-	0xb0,
-	0x01,
-	0xca,
-	0x86,
-	0x27,
-	0xa4,
-	0xbd,
-	0xd0,
-	0x02,
-	0xa6,
-	0x26,
-	0x86,
-	0x60,
-	0xa5,
-	0x26,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x02,
-	0xa5,
-	0x27,
-	0x49,
-	0x64,
-	0x18,
-	0x69,
-	0x37,
-	0x85,
-	0xbb,
-	0x85,
-	0x2a,
-	0x98,
-	0x69,
-	0x64,
-	0x85,
-	0xbc,
-	0x85,
-	0x2b,
-	0xa5,
-	0x28,
-	0x49,
-	0x05,
-	0x65,
-	0x2a,
-	0x85,
-	0x2a,
-	0x90,
-	0x03,
-	0xe6,
-	0x2b,
-	0x18,
-	0xa5,
-	0x28,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x02,
-	0xa5,
-	0x29,
-	0x49,
-	0x05,
-	0x65,
-	0xbb,
-	0x85,
-	0xbb,
-	0x90,
-	0x02,
-	0xe6,
-	0xbc,
-	0x60,
-	0xfc,
-	0xf0,
-	0x11,
-	0xa2,
-	0x07,
-	0x85,
-	0xe3,
-	0x98,
-	0x80,
-	0x02,
-	0x66,
-	0xe3,
-	0xe8,
-	0x4a,
-	0xd0,
-	0xfa,
-	0x66,
-	0xe3,
-	0x80,
-	0x0b,
-	0xa2,
-	0x07,
-	0xa8,
-	0x30,
-	0x04,
-	0xca,
-	0x0a,
-	0x10,
-	0xfc,
-	0x85,
-	0xe3,
-	0x8a,
-	0x0a,
-	0xaa,
-	0xa5,
-	0xe3,
-	0x29,
-	0x7f,
-	0xa8,
-	0x60,
-	0x7c,
-	0xc0,
-	0x3f,
-	0xda,
-	0xa0,
-	0x02,
-	0x53,
-	0xbb,
-	0x00,
-	0xd4,
-	0x00,
-	0x53,
-	0xb7,
-	0x00,
-	0xd6,
-	0x00,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa9,
-	0xd0,
-	0xa2,
-	0x0a,
-	0x80,
-	0x04,
-	0xa9,
-	0x40,
-	0xa2,
-	0x08,
-	0x8d,
-	0x0c,
-	0xc0,
-	0x8e,
-	0x0d,
-	0xc0,
-	0xa5,
-	0xb4,
-	0xf0,
-	0x17,
-	0x49,
-	0x03,
-	0x5a,
-	0x48,
-	0xa5,
-	0xb9,
-	0x49,
-	0x3c,
-	0x18,
-	0x69,
-	0x77,
-	0x85,
-	0xe2,
-	0x98,
-	0x69,
-	0x60,
-	0x85,
-	0xe3,
-	0xfa,
-	0x68,
-	0x20,
-	0x90,
-	0x3e,
-	0x38,
-	0xa9,
-	0x13,
-	0xe5,
-	0xb5,
-	0xf0,
-	0x24,
-	0x49,
-	0x03,
-	0x5a,
-	0x48,
-	0xa5,
-	0xb9,
-	0x49,
-	0x3c,
-	0x18,
-	0x69,
-	0x77,
-	0x85,
-	0xe2,
-	0x98,
-	0x69,
-	0x60,
-	0x85,
-	0xe3,
-	0xa5,
-	0xb5,
-	0x1a,
-	0x49,
-	0x03,
-	0x65,
-	0xe2,
-	0x85,
-	0xe2,
-	0x90,
-	0x02,
-	0xe6,
-	0xe3,
-	0xfa,
-	0x68,
-	0x20,
-	0x90,
-	0x3e,
-	0x38,
-	0xa5,
-	0xb5,
-	0xaa,
-	0xa4,
-	0xb6,
-	0xd0,
-	0x02,
-	0xa6,
-	0xb4,
-	0x86,
-	0xdf,
-	0xe5,
-	0xb4,
-	0x1a,
-	0x85,
-	0xde,
-	0x64,
-	0xf3,
-	0xa2,
-	0x00,
-	0xa4,
-	0xb9,
-	0xb9,
-	0x8d,
-	0x6a,
-	0x85,
-	0xe1,
-	0xa5,
-	0xc2,
-	0x49,
-	0x1a,
-	0xa2,
-	0x01,
-	0xc4,
-	0xe1,
-	0xf0,
-	0x03,
-	0x90,
-	0x01,
-	0xca,
-	0x86,
-	0xee,
-	0xa6,
-	0x28,
-	0xa4,
-	0x29,
-	0xa5,
-	0xb6,
-	0xf0,
-	0x03,
-	0x8a,
-	0xfc,
-	0xa8,
-	0x86,
-	0xf2,
-	0x84,
-	0xef,
-	0xa6,
-	0x26,
-	0xa4,
-	0x27,
-	0xa5,
-	0xbd,
-	0xf0,
-	0x03,
-	0x8a,
-	0xfc,
-	0xa8,
-	0x86,
-	0xf0,
-	0x84,
-	0xf1,
-	0xa0,
-	0x10,
-	0x13,
-	0x54,
-	0xc0,
-	0xc4,
-	0x00,
-	0xa4,
-	0xdf,
-	0xa2,
-	0x00,
-	0xa5,
-	0xa8,
-	0xf0,
-	0x0f,
-	0xa5,
-	0xee,
-	0xf0,
-	0x0b,
-	0xc4,
-	0x28,
-	0x90,
-	0x07,
-	0xc4,
-	0x29,
-	0xf0,
-	0x02,
-	0xb0,
-	0x01,
-	0xe8,
-	0x86,
-	0x97,
-	0xb9,
-	0x79,
-	0x6a,
-	0x85,
-	0xe2,
-	0xaa,
-	0x45,
-	0xe1,
-	0x84,
-	0x9a,
-	0x49,
-	0x20,
-	0x85,
-	0x98,
-	0x84,
-	0x99,
-	0xa5,
-	0x9a,
-	0x49,
-	0x20,
-	0x18,
-	0x65,
-	0x99,
-	0x85,
-	0x99,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0x9a,
-	0x38,
-	0xa5,
-	0xc4,
-	0xe5,
-	0x98,
-	0x85,
-	0xc4,
-	0xa5,
-	0xc5,
-	0xe5,
-	0x99,
-	0x85,
-	0xc5,
-	0xa5,
-	0xc6,
-	0xe5,
-	0x9a,
-	0x85,
-	0xc6,
-	0xa5,
-	0xc7,
-	0xe9,
-	0x00,
-	0x85,
-	0xc7,
-	0x10,
-	0x08,
-	0x64,
-	0xc4,
-	0x64,
-	0xc5,
-	0x64,
-	0xc6,
-	0x64,
-	0xc7,
-	0x38,
-	0xa5,
-	0xc8,
-	0xe5,
-	0x98,
-	0x85,
-	0xc8,
-	0xa5,
-	0xc9,
-	0xe5,
-	0x99,
-	0x85,
-	0xc9,
-	0xa5,
-	0xca,
-	0xe5,
-	0x9a,
-	0x85,
-	0xca,
-	0xa5,
-	0xcb,
-	0xe9,
-	0x00,
-	0x85,
-	0xcb,
-	0x10,
-	0x08,
-	0x64,
-	0xc8,
-	0x64,
-	0xc9,
-	0x64,
-	0xca,
-	0x64,
-	0xcb,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0x98,
-	0x85,
-	0xcc,
-	0xa5,
-	0xcd,
-	0xe5,
-	0x99,
-	0x85,
-	0xcd,
-	0xa5,
-	0xce,
-	0xe5,
-	0x9a,
-	0x85,
-	0xce,
-	0xa5,
-	0xcf,
-	0xe9,
-	0x00,
-	0x85,
-	0xcf,
-	0x10,
-	0x08,
-	0x64,
-	0xcc,
-	0x64,
-	0xcd,
-	0x64,
-	0xce,
-	0x64,
-	0xcf,
-	0x38,
-	0xa5,
-	0xd0,
-	0xe5,
-	0x98,
-	0x85,
-	0xd0,
-	0xa5,
-	0xd1,
-	0xe5,
-	0x99,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd2,
-	0xe5,
-	0x9a,
-	0x85,
-	0xd2,
-	0xa5,
-	0xd3,
-	0xe9,
-	0x00,
-	0x85,
-	0xd3,
-	0x10,
-	0x08,
-	0x64,
-	0xd0,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0x64,
-	0xd3,
-	0x8a,
-	0xa6,
-	0x97,
-	0xf0,
-	0x07,
-	0xa0,
-	0x10,
-	0x53,
-	0xc4,
-	0x00,
-	0x98,
-	0x00,
-	0xa5,
-	0xe1,
-	0x45,
-	0xe2,
-	0x20,
-	0x1c,
-	0x3c,
-	0x5a,
-	0x20,
-	0x44,
-	0x3c,
-	0x7a,
-	0xb9,
-	0xcc,
-	0x5b,
-	0x20,
-	0x59,
-	0x15,
-	0xa0,
-	0x03,
-	0x73,
-	0xe6,
-	0x00,
-	0xd6,
-	0xa5,
-	0x97,
-	0xd0,
-	0x02,
-	0x80,
-	0x27,
-	0xa5,
-	0xdf,
-	0x20,
-	0xce,
-	0x14,
-	0xa0,
-	0x05,
-	0x73,
-	0xe9,
-	0x00,
-	0xd4,
-	0x84,
-	0xf3,
-	0xa5,
-	0xd4,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x05,
-	0x85,
-	0xd4,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xd5,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x05,
-	0x85,
-	0xd4,
-	0x90,
-	0x02,
-	0xe6,
-	0xd5,
-	0xa5,
-	0xd6,
-	0xa6,
-	0xb6,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x03,
-	0x85,
-	0xd6,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xd7,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x03,
-	0x85,
-	0xd6,
-	0x90,
-	0x02,
-	0xe6,
-	0xd7,
-	0xc6,
-	0xde,
-	0xf0,
-	0x0e,
-	0xa5,
-	0xb6,
-	0xf0,
-	0x05,
-	0xc6,
-	0xdf,
-	0x4c,
-	0xf7,
-	0x3c,
-	0xe6,
-	0xdf,
-	0x4c,
-	0xf7,
-	0x3c,
-	0xa5,
-	0xb7,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x3c,
-	0x85,
-	0xb7,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xb8,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x3c,
-	0x85,
-	0xb7,
-	0x90,
-	0x02,
-	0xe6,
-	0xb8,
-	0xa6,
-	0xb9,
-	0xe4,
-	0xf1,
-	0xd0,
-	0x02,
-	0x64,
-	0xa8,
-	0xa5,
-	0xee,
-	0xf0,
-	0x1a,
-	0xa5,
-	0xbb,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x0b,
-	0x38,
-	0xe9,
-	0x64,
-	0x85,
-	0xbb,
-	0xb0,
-	0x0d,
-	0xc6,
-	0xbc,
-	0x80,
-	0x09,
-	0x18,
-	0x69,
-	0x64,
-	0x85,
-	0xbb,
-	0x90,
-	0x02,
-	0xe6,
-	0xbc,
-	0xa5,
-	0xf3,
-	0xf0,
-	0x02,
-	0xe6,
-	0x24,
-	0xa6,
-	0xbd,
-	0xf0,
-	0x04,
-	0xc6,
-	0xb9,
-	0x80,
-	0x02,
-	0xe6,
-	0xb9,
-	0xfa,
-	0x60,
-	0x64,
-	0xde,
-	0xda,
-	0xaa,
-	0xf0,
-	0x0b,
-	0xa0,
-	0x00,
-	0x33,
-	0xde,
-	0x00,
-	0xe2,
-	0xe6,
-	0xe3,
-	0x3a,
-	0xd0,
-	0xf7,
-	0x7a,
-	0xf0,
-	0x04,
-	0x33,
-	0xde,
-	0x00,
-	0xe2,
-	0x60,
-	0xba,
-	0x08,
-	0x78,
-	0x68,
-	0x48,
-	0x29,
-	0x1c,
-	0x85,
-	0xf6,
-	0x86,
-	0xf4,
-	0xa9,
-	0x01,
-	0x85,
-	0xf5,
-	0xa0,
-	0x06,
-	0xb1,
-	0xf4,
-	0x48,
-	0x29,
-	0x1c,
-	0xc5,
-	0xf6,
-	0x90,
-	0x08,
-	0x7a,
-	0xa0,
-	0x09,
-	0xb1,
-	0xf4,
-	0x48,
-	0x29,
-	0x1c,
-	0xc9,
-	0x00,
-	0xd0,
-	0x38,
-	0xa0,
-	0x03,
-	0xb1,
-	0xf4,
-	0xe0,
-	0x7f,
-	0xb0,
-	0x18,
-	0x8d,
-	0x82,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x83,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x84,
-	0x82,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x85,
-	0x82,
-	0x80,
-	0x16,
-	0x8d,
-	0x86,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x87,
-	0x82,
-	0xc8,
-	0xb1,
-	0xf4,
-	0x8d,
-	0x88,
-	0x82,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0x89,
-	0x82,
-	0xa9,
-	0x00,
-	0xfa,
-	0x28,
-	0xf8,
-	0x60,
-	0x68,
-	0xf0,
-	0x04,
-	0x68,
-	0xfa,
-	0x7a,
-	0x40,
-	0x08,
-	0x78,
-	0x68,
-	0xad,
-	0x81,
-	0x82,
-	0xf0,
-	0x0e,
-	0xae,
-	0x85,
-	0x82,
-	0x9a,
-	0xad,
-	0x82,
-	0x82,
-	0xae,
-	0x83,
-	0x82,
-	0xac,
-	0x84,
-	0x82,
-	0x40,
-	0xae,
-	0x89,
-	0x82,
-	0x9a,
-	0xad,
-	0x86,
-	0x82,
-	0xae,
-	0x87,
-	0x82,
-	0xac,
-	0x88,
-	0x82,
-	0x40,
-	0x08,
-	0x78,
-	0xad,
-	0x81,
-	0x82,
-	0xd0,
-	0x1f,
-	0x1a,
-	0x8d,
-	0x81,
-	0x82,
-	0xa9,
-	0x7c,
-	0x8d,
-	0x85,
-	0x82,
-	0x9c,
-	0x82,
-	0x82,
-	0x9c,
-	0x83,
-	0x82,
-	0x9c,
-	0x84,
-	0x82,
-	0xa9,
-	0x07,
-	0x8d,
-	0x7f,
-	0x01,
-	0xa9,
-	0x0a,
-	0x8d,
-	0x7e,
-	0x01,
-	0x9c,
-	0x7d,
-	0x01,
-	0x28,
-	0x60,
-	0x08,
-	0x78,
-	0xa9,
-	0x0e,
-	0x8d,
-	0xfe,
-	0x01,
-	0xa9,
-	0x07,
-	0x8d,
-	0xfd,
-	0x01,
-	0xad,
-	0x16,
-	0x6b,
-	0x8d,
-	0xfc,
-	0x01,
-	0xa9,
-	0xfb,
-	0x8d,
-	0x89,
-	0x82,
-	0x9c,
-	0x86,
-	0x82,
-	0x9c,
-	0x87,
-	0x82,
-	0x9c,
-	0x88,
-	0x82,
-	0x28,
-	0x60,
-	0xd6,
-	0x03,
-	0x0c,
-	0x06,
-	0x86,
-	0x1c,
-	0xbd,
-	0x06,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xf0,
-	0x0d,
-	0x80,
-	0x80,
-	0x80,
-	0x80,
-	0x00,
-	0x04,
-	0x08,
-	0x0d,
-	0x11,
-	0x15,
-	0x1a,
-	0x1e,
-	0x23,
-	0x27,
-	0x00,
-	0x04,
-	0x09,
-	0x0d,
-	0x12,
-	0x17,
-	0x1b,
-	0x00,
-	0x01,
-	0x02,
-	0x00,
-	0x02,
-	0x01,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x02,
-	0x02,
-	0x01,
-	0x00,
-	0x02,
-	0x00,
-	0x01,
-	0x01,
-	0x02,
-	0x00,
-	0x01,
-	0x02,
-	0x04,
-	0x08,
-	0x10,
-	0x20,
-	0x40,
-	0x80,
-	0xef,
-	0x19,
-	0x88,
-	0x19,
-	0x4b,
-	0x19,
-	0x26,
-	0x19,
-	0x01,
-	0x19,
-	0xdc,
-	0x18,
-	0xb7,
-	0x18,
-	0x7a,
-	0x18,
-	0x2d,
-	0x18,
-	0xd4,
-	0x17,
-	0x7f,
-	0x17,
-	0x32,
-	0x17,
-	0xcb,
-	0x16,
-	0x72,
-	0x16,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x8e,
-	0x73,
-	0x8e,
-	0x73,
-	0x4f,
-	0xb2,
-	0x4f,
-	0xe5,
-	0x1c,
-	0xe3,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x9b,
-	0x66,
-	0x9b,
-	0x66,
-	0x24,
-	0xdd,
-	0x24,
-	0x2d,
-	0xd4,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xa7,
-	0x5a,
-	0xa7,
-	0x5a,
-	0xfe,
-	0x03,
-	0xfe,
-	0x5d,
-	0xa4,
-	0x81,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xb4,
-	0x4d,
-	0xb4,
-	0x4d,
-	0xdd,
-	0x24,
-	0xdd,
-	0x78,
-	0x89,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xc1,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0x7f,
-	0x81,
-	0xc1,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xce,
-	0x33,
-	0xce,
-	0x33,
-	0xaa,
-	0x57,
-	0xaa,
-	0x79,
-	0x88,
-	0xf7,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xdb,
-	0x26,
-	0xdb,
-	0x26,
-	0x98,
-	0x69,
-	0x98,
-	0x65,
-	0x9c,
-	0x2c,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xe7,
-	0x1a,
-	0xe7,
-	0x1a,
-	0x8b,
-	0x76,
-	0x8b,
-	0x49,
-	0xb8,
-	0x59,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0xf4,
-	0x0d,
-	0xf4,
-	0x0d,
-	0x84,
-	0x7d,
-	0x84,
-	0x26,
-	0xdb,
-	0x76,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x7f,
-	0x81,
-	0x00,
-	0x00,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x0d,
-	0xf4,
-	0x0d,
-	0xf4,
-	0x84,
-	0x7d,
-	0x84,
-	0xdb,
-	0x26,
-	0x76,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x1a,
-	0xe7,
-	0x1a,
-	0xe7,
-	0x8b,
-	0x76,
-	0x8b,
-	0xb8,
-	0x49,
-	0x59,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x26,
-	0xdb,
-	0x26,
-	0xdb,
-	0x98,
-	0x69,
-	0x98,
-	0x9c,
-	0x65,
-	0x2c,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x33,
-	0xce,
-	0x33,
-	0xce,
-	0xaa,
-	0x57,
-	0xaa,
-	0x88,
-	0x79,
-	0xf7,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0xc1,
-	0x40,
-	0xc1,
-	0x81,
-	0x7f,
-	0xc1,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x4d,
-	0xb4,
-	0x4d,
-	0xb4,
-	0xdd,
-	0x24,
-	0xdd,
-	0x89,
-	0x78,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x5a,
-	0xa7,
-	0x5a,
-	0xa7,
-	0xfe,
-	0x03,
-	0xfe,
-	0xa4,
-	0x5d,
-	0x81,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x66,
-	0x9b,
-	0x66,
-	0x9b,
-	0x24,
-	0xdd,
-	0x24,
-	0xd4,
-	0x2d,
-	0x95,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x73,
-	0x8e,
-	0x73,
-	0x8e,
-	0x4f,
-	0xb2,
-	0x4f,
-	0x1c,
-	0xe5,
-	0xe3,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x81,
-	0x7f,
-	0x7f,
-	0x81,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x81,
-	0x70,
-	0xbd,
-	0x07,
-	0x7f,
-	0x91,
-	0x44,
-	0x81,
-	0x70,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x8e,
-	0x65,
-	0xc4,
-	0x06,
-	0x4f,
-	0xbc,
-	0x2a,
-	0xe5,
-	0x18,
-	0xe3,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x9b,
-	0x5a,
-	0xcb,
-	0x06,
-	0x24,
-	0xe2,
-	0x13,
-	0x2d,
-	0xda,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xa7,
-	0x4e,
-	0xd1,
-	0x05,
-	0xfe,
-	0x02,
-	0x00,
-	0x5d,
-	0xaf,
-	0x81,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xb4,
-	0x43,
-	0xd8,
-	0x04,
-	0xdd,
-	0x1f,
-	0xee,
-	0x78,
-	0x98,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xc1,
-	0x38,
-	0xdf,
-	0x04,
-	0xc1,
-	0x38,
-	0xdf,
-	0x7f,
-	0x91,
-	0xc1,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xce,
-	0x2d,
-	0xe6,
-	0x03,
-	0xaa,
-	0x4c,
-	0xd3,
-	0x79,
-	0x97,
-	0xf7,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xdb,
-	0x22,
-	0xed,
-	0x02,
-	0x98,
-	0x5c,
-	0xc9,
-	0x65,
-	0xa8,
-	0x2c,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xe7,
-	0x16,
-	0xf3,
-	0x01,
-	0x8b,
-	0x67,
-	0xc2,
-	0x49,
-	0xc1,
-	0x59,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0xf4,
-	0x0b,
-	0xfa,
-	0x01,
-	0x84,
-	0x6e,
-	0xbe,
-	0x26,
-	0xe0,
-	0x76,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x70,
-	0xbd,
-	0x00,
-	0x00,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x0d,
-	0xf6,
-	0x07,
-	0x00,
-	0x84,
-	0x6e,
-	0xbe,
-	0xdb,
-	0x21,
-	0x76,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x1a,
-	0xeb,
-	0x0e,
-	0x00,
-	0x8b,
-	0x67,
-	0xc2,
-	0xb8,
-	0x40,
-	0x59,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x26,
-	0xdf,
-	0x14,
-	0xff,
-	0x98,
-	0x5c,
-	0xc9,
-	0x9c,
-	0x59,
-	0x2c,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x33,
-	0xd4,
-	0x1b,
-	0xfe,
-	0xaa,
-	0x4c,
-	0xd3,
-	0x88,
-	0x6a,
-	0xf7,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x40,
-	0xc9,
-	0x22,
-	0xfd,
-	0xc1,
-	0x38,
-	0xdf,
-	0x81,
-	0x70,
-	0xc1,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x4d,
-	0xbe,
-	0x29,
-	0xfd,
-	0xdd,
-	0x1f,
-	0xee,
-	0x89,
-	0x69,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x5a,
-	0xb3,
-	0x30,
-	0xfc,
-	0xfe,
-	0x02,
-	0x00,
-	0xa4,
-	0x52,
-	0x81,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x66,
-	0xa7,
-	0x36,
-	0xfb,
-	0x24,
-	0xe2,
-	0x13,
-	0xd4,
-	0x27,
-	0x95,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x73,
-	0x9c,
-	0x3d,
-	0xfb,
-	0x4f,
-	0xbc,
-	0x2a,
-	0x1c,
-	0xe9,
-	0xe3,
-	0x91,
-	0x44,
-	0xfa,
-	0xc9,
-	0x7f,
-	0x91,
-	0x44,
-	0xfa,
-	0x7f,
-	0x91,
-	0x44,
-	0x7f,
-	0x91,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x81,
-	0x60,
-	0xf1,
-	0xb9,
-	0x7f,
-	0xa1,
-	0x10,
-	0x81,
-	0x60,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x8e,
-	0x56,
-	0xf3,
-	0xc0,
-	0x4f,
-	0xc5,
-	0x0a,
-	0xe5,
-	0x15,
-	0xe3,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x9b,
-	0x4d,
-	0xf4,
-	0xc7,
-	0x24,
-	0xe6,
-	0x04,
-	0x2d,
-	0xdf,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xa7,
-	0x43,
-	0xf6,
-	0xcf,
-	0xfe,
-	0x02,
-	0x00,
-	0x5d,
-	0xbb,
-	0x81,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xb4,
-	0x3a,
-	0xf7,
-	0xd6,
-	0xdd,
-	0x1b,
-	0xfd,
-	0x78,
-	0xa7,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xc1,
-	0x30,
-	0xf9,
-	0xdd,
-	0xc1,
-	0x30,
-	0xf9,
-	0x7f,
-	0xa1,
-	0xc1,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xce,
-	0x26,
-	0xfb,
-	0xe4,
-	0xaa,
-	0x41,
-	0xf6,
-	0x79,
-	0xa6,
-	0xf7,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xdb,
-	0x1d,
-	0xfc,
-	0xeb,
-	0x98,
-	0x4f,
-	0xf4,
-	0x65,
-	0xb5,
-	0x2c,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xe7,
-	0x13,
-	0xfe,
-	0xf3,
-	0x8b,
-	0x58,
-	0xf2,
-	0x49,
-	0xca,
-	0x59,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0xf4,
-	0x0a,
-	0xff,
-	0xfa,
-	0x84,
-	0x5e,
-	0xf1,
-	0x26,
-	0xe5,
-	0x76,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x60,
-	0xf1,
-	0x00,
-	0x00,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x0d,
-	0xf7,
-	0x02,
-	0x07,
-	0x84,
-	0x5e,
-	0xf1,
-	0xdb,
-	0x1c,
-	0x76,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x1a,
-	0xee,
-	0x03,
-	0x0e,
-	0x8b,
-	0x58,
-	0xf2,
-	0xb8,
-	0x37,
-	0x59,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x26,
-	0xe4,
-	0x05,
-	0x16,
-	0x98,
-	0x4f,
-	0xf4,
-	0x9c,
-	0x4c,
-	0x2c,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x33,
-	0xdb,
-	0x06,
-	0x1d,
-	0xaa,
-	0x41,
-	0xf6,
-	0x88,
-	0x5b,
-	0xf7,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x40,
-	0xd1,
-	0x08,
-	0x24,
-	0xc1,
-	0x30,
-	0xf9,
-	0x81,
-	0x60,
-	0xc1,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x4d,
-	0xc7,
-	0x0a,
-	0x2b,
-	0xdd,
-	0x1b,
-	0xfd,
-	0x89,
-	0x5a,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x5a,
-	0xbe,
-	0x0b,
-	0x32,
-	0xfe,
-	0x02,
-	0x00,
-	0xa4,
-	0x46,
-	0x81,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x66,
-	0xb4,
-	0x0d,
-	0x3a,
-	0x24,
-	0xe6,
-	0x04,
-	0xd4,
-	0x22,
-	0x95,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x73,
-	0xab,
-	0x0e,
-	0x41,
-	0x4f,
-	0xc5,
-	0x0a,
-	0x1c,
-	0xec,
-	0xe3,
-	0xa1,
-	0x10,
-	0x48,
-	0x85,
-	0x7f,
-	0xa1,
-	0x10,
-	0x48,
-	0x7f,
-	0xa1,
-	0x10,
-	0x7f,
-	0xa1,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x81,
-	0x50,
-	0x1c,
-	0x8e,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x81,
-	0x50,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x8e,
-	0x48,
-	0x19,
-	0x9a,
-	0x4f,
-	0xcf,
-	0xf0,
-	0xe5,
-	0x11,
-	0xe3,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x9b,
-	0x40,
-	0x16,
-	0xa5,
-	0x24,
-	0xeb,
-	0xf9,
-	0x2d,
-	0xe5,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xa7,
-	0x38,
-	0x14,
-	0xb0,
-	0xfe,
-	0x02,
-	0x01,
-	0x5d,
-	0xc7,
-	0x81,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xb4,
-	0x30,
-	0x11,
-	0xbc,
-	0xdd,
-	0x16,
-	0x08,
-	0x78,
-	0xb6,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xc1,
-	0x28,
-	0x0e,
-	0xc7,
-	0xc1,
-	0x28,
-	0x0e,
-	0x7f,
-	0xb1,
-	0xc1,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xce,
-	0x20,
-	0x0b,
-	0xd3,
-	0xaa,
-	0x36,
-	0x13,
-	0x79,
-	0xb5,
-	0xf7,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xdb,
-	0x18,
-	0x08,
-	0xdf,
-	0x98,
-	0x42,
-	0x17,
-	0x65,
-	0xc2,
-	0x2c,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xe7,
-	0x10,
-	0x06,
-	0xea,
-	0x8b,
-	0x4a,
-	0x1a,
-	0x49,
-	0xd4,
-	0x59,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0xf4,
-	0x08,
-	0x03,
-	0xf6,
-	0x84,
-	0x4e,
-	0x1b,
-	0x26,
-	0xe9,
-	0x76,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x50,
-	0x1c,
-	0x00,
-	0x00,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x0d,
-	0xf9,
-	0xfe,
-	0x0c,
-	0x84,
-	0x4e,
-	0x1b,
-	0xdb,
-	0x18,
-	0x76,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x1a,
-	0xf1,
-	0xfb,
-	0x17,
-	0x8b,
-	0x4a,
-	0x1a,
-	0xb8,
-	0x2d,
-	0x59,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x26,
-	0xe9,
-	0xf9,
-	0x23,
-	0x98,
-	0x42,
-	0x17,
-	0x9c,
-	0x3f,
-	0x2c,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x33,
-	0xe1,
-	0xf6,
-	0x2e,
-	0xaa,
-	0x36,
-	0x13,
-	0x88,
-	0x4c,
-	0xf7,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x40,
-	0xd9,
-	0xf3,
-	0x3a,
-	0xc1,
-	0x28,
-	0x0e,
-	0x81,
-	0x50,
-	0xc1,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x4d,
-	0xd1,
-	0xf0,
-	0x45,
-	0xdd,
-	0x16,
-	0x08,
-	0x89,
-	0x4b,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x5a,
-	0xc9,
-	0xed,
-	0x50,
-	0xfe,
-	0x02,
-	0x01,
-	0xa4,
-	0x3a,
-	0x81,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x66,
-	0xc1,
-	0xeb,
-	0x5c,
-	0x24,
-	0xeb,
-	0xf9,
-	0xd4,
-	0x1c,
-	0x95,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x73,
-	0xb9,
-	0xe8,
-	0x67,
-	0x4f,
-	0xcf,
-	0xf0,
-	0x1c,
-	0xf0,
-	0xe3,
-	0xb1,
-	0xe5,
-	0x73,
-	0x8d,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x73,
-	0x7f,
-	0xb1,
-	0xe5,
-	0x7f,
-	0xb1,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x81,
-	0x40,
-	0x40,
-	0x81,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x81,
-	0x40,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x8e,
-	0x3a,
-	0x3a,
-	0x8e,
-	0x4f,
-	0xd9,
-	0xd9,
-	0xe5,
-	0x0e,
-	0xe3,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x9b,
-	0x33,
-	0x33,
-	0x9b,
-	0x24,
-	0xef,
-	0xef,
-	0x2d,
-	0xea,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xa7,
-	0x2d,
-	0x2d,
-	0xa7,
-	0xfe,
-	0x01,
-	0x01,
-	0x5d,
-	0xd2,
-	0x81,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xb4,
-	0x26,
-	0x26,
-	0xb4,
-	0xdd,
-	0x12,
-	0x12,
-	0x78,
-	0xc5,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x20,
-	0x20,
-	0xc1,
-	0xc1,
-	0x20,
-	0x20,
-	0x7f,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xce,
-	0x1a,
-	0x1a,
-	0xce,
-	0xaa,
-	0x2c,
-	0x2c,
-	0x79,
-	0xc5,
-	0xf7,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xdb,
-	0x13,
-	0x13,
-	0xdb,
-	0x98,
-	0x34,
-	0x34,
-	0x65,
-	0xce,
-	0x2c,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xe7,
-	0x0d,
-	0x0d,
-	0xe7,
-	0x8b,
-	0x3b,
-	0x3b,
-	0x49,
-	0xdd,
-	0x59,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xf4,
-	0x06,
-	0x06,
-	0xf4,
-	0x84,
-	0x3f,
-	0x3f,
-	0x26,
-	0xee,
-	0x76,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x40,
-	0x40,
-	0x00,
-	0x00,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x0d,
-	0xfb,
-	0xfb,
-	0x0d,
-	0x84,
-	0x3f,
-	0x3f,
-	0xdb,
-	0x13,
-	0x76,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x1a,
-	0xf4,
-	0xf4,
-	0x1a,
-	0x8b,
-	0x3b,
-	0x3b,
-	0xb8,
-	0x24,
-	0x59,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x26,
-	0xee,
-	0xee,
-	0x26,
-	0x98,
-	0x34,
-	0x34,
-	0x9c,
-	0x33,
-	0x2c,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x33,
-	0xe7,
-	0xe7,
-	0x33,
-	0xaa,
-	0x2c,
-	0x2c,
-	0x88,
-	0x3c,
-	0xf7,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x40,
-	0xe1,
-	0xe1,
-	0x40,
-	0xc1,
-	0x20,
-	0x20,
-	0x81,
-	0x40,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x4d,
-	0xdb,
-	0xdb,
-	0x4d,
-	0xdd,
-	0x12,
-	0x12,
-	0x89,
-	0x3c,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x5a,
-	0xd4,
-	0xd4,
-	0x5a,
-	0xfe,
-	0x01,
-	0x01,
-	0xa4,
-	0x2f,
-	0x81,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x66,
-	0xce,
-	0xce,
-	0x66,
-	0x24,
-	0xef,
-	0xef,
-	0xd4,
-	0x17,
-	0x95,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x73,
-	0xc7,
-	0xc7,
-	0x73,
-	0x4f,
-	0xd9,
-	0xd9,
-	0x1c,
-	0xf3,
-	0xe3,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0x7f,
-	0xc1,
-	0xc1,
-	0x7f,
-	0xc1,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x81,
-	0x30,
-	0x5c,
-	0x8c,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x81,
-	0x30,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x8e,
-	0x2b,
-	0x53,
-	0x98,
-	0x4f,
-	0xe3,
-	0xc8,
-	0xe5,
-	0x0a,
-	0xe3,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x9b,
-	0x26,
-	0x4a,
-	0xa3,
-	0x24,
-	0xf4,
-	0xe7,
-	0x2d,
-	0xf0,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xa7,
-	0x22,
-	0x40,
-	0xaf,
-	0xfe,
-	0x01,
-	0x02,
-	0x5d,
-	0xde,
-	0x81,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xb4,
-	0x1d,
-	0x37,
-	0xbb,
-	0xdd,
-	0x0d,
-	0x1a,
-	0x78,
-	0xd4,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xc1,
-	0x18,
-	0x2e,
-	0xc6,
-	0xc1,
-	0x18,
-	0x2e,
-	0x7f,
-	0xd1,
-	0xc1,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xce,
-	0x13,
-	0x25,
-	0xd2,
-	0xaa,
-	0x21,
-	0x3f,
-	0x79,
-	0xd4,
-	0xf7,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xdb,
-	0x0e,
-	0x1c,
-	0xde,
-	0x98,
-	0x27,
-	0x4b,
-	0x65,
-	0xdb,
-	0x2c,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xe7,
-	0x0a,
-	0x12,
-	0xea,
-	0x8b,
-	0x2c,
-	0x55,
-	0x49,
-	0xe6,
-	0x59,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0xf4,
-	0x05,
-	0x09,
-	0xf5,
-	0x84,
-	0x2f,
-	0x5a,
-	0x26,
-	0xf3,
-	0x76,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x30,
-	0x5c,
-	0x00,
-	0x00,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x0d,
-	0xfc,
-	0xf8,
-	0x0c,
-	0x84,
-	0x2f,
-	0x5a,
-	0xdb,
-	0x0e,
-	0x76,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x1a,
-	0xf7,
-	0xef,
-	0x17,
-	0x8b,
-	0x2c,
-	0x55,
-	0xb8,
-	0x1b,
-	0x59,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x26,
-	0xf3,
-	0xe5,
-	0x23,
-	0x98,
-	0x27,
-	0x4b,
-	0x9c,
-	0x26,
-	0x2c,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x33,
-	0xee,
-	0xdc,
-	0x2f,
-	0xaa,
-	0x21,
-	0x3f,
-	0x88,
-	0x2d,
-	0xf7,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x40,
-	0xe9,
-	0xd3,
-	0x3b,
-	0xc1,
-	0x18,
-	0x2e,
-	0x81,
-	0x30,
-	0xc1,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x4d,
-	0xe4,
-	0xca,
-	0x46,
-	0xdd,
-	0x0d,
-	0x1a,
-	0x89,
-	0x2d,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x5a,
-	0xdf,
-	0xc1,
-	0x52,
-	0xfe,
-	0x01,
-	0x02,
-	0xa4,
-	0x23,
-	0x81,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x66,
-	0xdb,
-	0xb7,
-	0x5e,
-	0x24,
-	0xf4,
-	0xe7,
-	0xd4,
-	0x11,
-	0x95,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x73,
-	0xd6,
-	0xae,
-	0x69,
-	0x4f,
-	0xe3,
-	0xc8,
-	0x1c,
-	0xf7,
-	0xe3,
-	0xd1,
-	0xa5,
-	0x75,
-	0x04,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x75,
-	0x7f,
-	0xd1,
-	0xa5,
-	0x7f,
-	0xd1,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x81,
-	0x20,
-	0x70,
-	0xa9,
-	0x7f,
-	0xe1,
-	0x91,
-	0x81,
-	0x20,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x8e,
-	0x1d,
-	0x65,
-	0xb2,
-	0x4f,
-	0xed,
-	0xbc,
-	0xe5,
-	0x07,
-	0xe3,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x9b,
-	0x1a,
-	0x5a,
-	0xbb,
-	0x24,
-	0xf8,
-	0xe2,
-	0x2d,
-	0xf6,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xa7,
-	0x16,
-	0x4e,
-	0xc3,
-	0xfe,
-	0x01,
-	0x02,
-	0x5d,
-	0xea,
-	0x81,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xb4,
-	0x13,
-	0x43,
-	0xcc,
-	0xdd,
-	0x09,
-	0x1f,
-	0x78,
-	0xe3,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xc1,
-	0x10,
-	0x38,
-	0xd5,
-	0xc1,
-	0x10,
-	0x38,
-	0x7f,
-	0xe1,
-	0xc1,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xce,
-	0x0d,
-	0x2d,
-	0xde,
-	0xaa,
-	0x16,
-	0x4c,
-	0x79,
-	0xe3,
-	0xf7,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xdb,
-	0x0a,
-	0x22,
-	0xe7,
-	0x98,
-	0x1a,
-	0x5c,
-	0x65,
-	0xe8,
-	0x2c,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xe7,
-	0x06,
-	0x16,
-	0xef,
-	0x8b,
-	0x1d,
-	0x67,
-	0x49,
-	0xef,
-	0x59,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0xf4,
-	0x03,
-	0x0b,
-	0xf8,
-	0x84,
-	0x1f,
-	0x6e,
-	0x26,
-	0xf8,
-	0x76,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x20,
-	0x70,
-	0x00,
-	0x00,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x0d,
-	0xfe,
-	0xf6,
-	0x09,
-	0x84,
-	0x1f,
-	0x6e,
-	0xdb,
-	0x09,
-	0x76,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x1a,
-	0xfb,
-	0xeb,
-	0x12,
-	0x8b,
-	0x1d,
-	0x67,
-	0xb8,
-	0x12,
-	0x59,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x26,
-	0xf7,
-	0xdf,
-	0x1a,
-	0x98,
-	0x1a,
-	0x5c,
-	0x9c,
-	0x19,
-	0x2c,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x33,
-	0xf4,
-	0xd4,
-	0x23,
-	0xaa,
-	0x16,
-	0x4c,
-	0x88,
-	0x1e,
-	0xf7,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x40,
-	0xf1,
-	0xc9,
-	0x2c,
-	0xc1,
-	0x10,
-	0x38,
-	0x81,
-	0x20,
-	0xc1,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x4d,
-	0xee,
-	0xbe,
-	0x35,
-	0xdd,
-	0x09,
-	0x1f,
-	0x89,
-	0x1e,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x5a,
-	0xeb,
-	0xb3,
-	0x3e,
-	0xfe,
-	0x01,
-	0x02,
-	0xa4,
-	0x17,
-	0x81,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x66,
-	0xe7,
-	0xa7,
-	0x46,
-	0x24,
-	0xf8,
-	0xe2,
-	0xd4,
-	0x0b,
-	0x95,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x73,
-	0xe4,
-	0x9c,
-	0x4f,
-	0x4f,
-	0xed,
-	0xbc,
-	0x1c,
-	0xfa,
-	0xe3,
-	0xe1,
-	0x91,
-	0x58,
-	0x44,
-	0x7f,
-	0xe1,
-	0x91,
-	0x58,
-	0x7f,
-	0xe1,
-	0x91,
-	0x7f,
-	0xe1,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x81,
-	0x10,
-	0x7c,
-	0xd2,
-	0x7f,
-	0xf1,
-	0x85,
-	0x81,
-	0x10,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x8e,
-	0x0e,
-	0x70,
-	0xd7,
-	0x4f,
-	0xf7,
-	0xb4,
-	0xe5,
-	0x03,
-	0xe3,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x9b,
-	0x0d,
-	0x63,
-	0xdb,
-	0x24,
-	0xfd,
-	0xde,
-	0x2d,
-	0xfb,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xa7,
-	0x0b,
-	0x57,
-	0xe0,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0xf5,
-	0x81,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xb4,
-	0x0a,
-	0x4a,
-	0xe5,
-	0xdd,
-	0x04,
-	0x23,
-	0x78,
-	0xf2,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xc1,
-	0x08,
-	0x3e,
-	0xe9,
-	0xc1,
-	0x08,
-	0x3e,
-	0x7f,
-	0xf1,
-	0xc1,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xce,
-	0x06,
-	0x32,
-	0xee,
-	0xaa,
-	0x0b,
-	0x54,
-	0x79,
-	0xf2,
-	0xf7,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xdb,
-	0x05,
-	0x25,
-	0xf3,
-	0x98,
-	0x0d,
-	0x66,
-	0x65,
-	0xf4,
-	0x2c,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xe7,
-	0x03,
-	0x19,
-	0xf8,
-	0x8b,
-	0x0f,
-	0x72,
-	0x49,
-	0xf8,
-	0x59,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0xf4,
-	0x02,
-	0x0c,
-	0xfc,
-	0x84,
-	0x10,
-	0x7a,
-	0x26,
-	0xfc,
-	0x76,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x10,
-	0x7c,
-	0x00,
-	0x00,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x0d,
-	0xff,
-	0xf5,
-	0x05,
-	0x84,
-	0x10,
-	0x7a,
-	0xdb,
-	0x05,
-	0x76,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x1a,
-	0xfe,
-	0xe8,
-	0x09,
-	0x8b,
-	0x0f,
-	0x72,
-	0xb8,
-	0x09,
-	0x59,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x26,
-	0xfc,
-	0xdc,
-	0x0e,
-	0x98,
-	0x0d,
-	0x66,
-	0x9c,
-	0x0d,
-	0x2c,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x33,
-	0xfb,
-	0xcf,
-	0x13,
-	0xaa,
-	0x0b,
-	0x54,
-	0x88,
-	0x0f,
-	0xf7,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x40,
-	0xf9,
-	0xc3,
-	0x18,
-	0xc1,
-	0x08,
-	0x3e,
-	0x81,
-	0x10,
-	0xc1,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x4d,
-	0xf7,
-	0xb7,
-	0x1c,
-	0xdd,
-	0x04,
-	0x23,
-	0x89,
-	0x0f,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x5a,
-	0xf6,
-	0xaa,
-	0x21,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0x0c,
-	0x81,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x66,
-	0xf4,
-	0x9e,
-	0x26,
-	0x24,
-	0xfd,
-	0xde,
-	0xd4,
-	0x06,
-	0x95,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x73,
-	0xf3,
-	0x91,
-	0x2a,
-	0x4f,
-	0xf7,
-	0xb4,
-	0x1c,
-	0xfe,
-	0xe3,
-	0xf1,
-	0x85,
-	0x2f,
-	0x70,
-	0x7f,
-	0xf1,
-	0x85,
-	0x2f,
-	0x7f,
-	0xf1,
-	0x85,
-	0x7f,
-	0xf1,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x8e,
-	0x00,
-	0x73,
-	0x00,
-	0x4f,
-	0x00,
-	0xb2,
-	0xe5,
-	0x00,
-	0xe3,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x9b,
-	0x00,
-	0x66,
-	0x00,
-	0x24,
-	0x00,
-	0xdd,
-	0x2d,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xa7,
-	0x00,
-	0x5a,
-	0x00,
-	0xfe,
-	0x00,
-	0x03,
-	0x5d,
-	0x00,
-	0x81,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xb4,
-	0x00,
-	0x4d,
-	0x00,
-	0xdd,
-	0x00,
-	0x24,
-	0x78,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xc1,
-	0x00,
-	0x40,
-	0x00,
-	0xc1,
-	0x00,
-	0x40,
-	0x7f,
-	0x00,
-	0xc1,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xce,
-	0x00,
-	0x33,
-	0x00,
-	0xaa,
-	0x00,
-	0x57,
-	0x79,
-	0x00,
-	0xf7,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xdb,
-	0x00,
-	0x26,
-	0x00,
-	0x98,
-	0x00,
-	0x69,
-	0x65,
-	0x00,
-	0x2c,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xe7,
-	0x00,
-	0x1a,
-	0x00,
-	0x8b,
-	0x00,
-	0x76,
-	0x49,
-	0x00,
-	0x59,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0xf4,
-	0x00,
-	0x0d,
-	0x00,
-	0x84,
-	0x00,
-	0x7d,
-	0x26,
-	0x00,
-	0x76,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x0d,
-	0x00,
-	0xf4,
-	0x00,
-	0x84,
-	0x00,
-	0x7d,
-	0xdb,
-	0x00,
-	0x76,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x1a,
-	0x00,
-	0xe7,
-	0x00,
-	0x8b,
-	0x00,
-	0x76,
-	0xb8,
-	0x00,
-	0x59,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x26,
-	0x00,
-	0xdb,
-	0x00,
-	0x98,
-	0x00,
-	0x69,
-	0x9c,
-	0x00,
-	0x2c,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x33,
-	0x00,
-	0xce,
-	0x00,
-	0xaa,
-	0x00,
-	0x57,
-	0x88,
-	0x00,
-	0xf7,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x40,
-	0x00,
-	0xc1,
-	0x00,
-	0xc1,
-	0x00,
-	0x40,
-	0x81,
-	0x00,
-	0xc1,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x4d,
-	0x00,
-	0xb4,
-	0x00,
-	0xdd,
-	0x00,
-	0x24,
-	0x89,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x5a,
-	0x00,
-	0xa7,
-	0x00,
-	0xfe,
-	0x00,
-	0x03,
-	0xa4,
-	0x00,
-	0x81,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x66,
-	0x00,
-	0x9b,
-	0x00,
-	0x24,
-	0x00,
-	0xdd,
-	0xd4,
-	0x00,
-	0x95,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x73,
-	0x00,
-	0x8e,
-	0x00,
-	0x4f,
-	0x00,
-	0xb2,
-	0x1c,
-	0x00,
-	0xe3,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x7f,
-	0x00,
-	0x81,
-	0x00,
-	0x7f,
-	0x00,
-	0x81,
-	0x7f,
-	0x00,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x81,
-	0xf1,
-	0x7c,
-	0x2f,
-	0x7f,
-	0x10,
-	0x85,
-	0x81,
-	0xf1,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x8e,
-	0xf3,
-	0x70,
-	0x2a,
-	0x4f,
-	0x0a,
-	0xb4,
-	0xe5,
-	0xfe,
-	0xe3,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x9b,
-	0xf4,
-	0x63,
-	0x26,
-	0x24,
-	0x04,
-	0xde,
-	0x2d,
-	0x06,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xa7,
-	0xf6,
-	0x57,
-	0x21,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0x0c,
-	0x81,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xb4,
-	0xf7,
-	0x4a,
-	0x1c,
-	0xdd,
-	0xfd,
-	0x23,
-	0x78,
-	0x0f,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xc1,
-	0xf9,
-	0x3e,
-	0x17,
-	0xc1,
-	0xf9,
-	0x3e,
-	0x7f,
-	0x10,
-	0xc1,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xce,
-	0xfb,
-	0x32,
-	0x13,
-	0xaa,
-	0xf6,
-	0x54,
-	0x79,
-	0x0f,
-	0xf7,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xdb,
-	0xfc,
-	0x25,
-	0x0e,
-	0x98,
-	0xf4,
-	0x66,
-	0x65,
-	0x0d,
-	0x2c,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xe7,
-	0xfe,
-	0x19,
-	0x09,
-	0x8b,
-	0xf2,
-	0x72,
-	0x49,
-	0x09,
-	0x59,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0xf4,
-	0xff,
-	0x0c,
-	0x05,
-	0x84,
-	0xf1,
-	0x7a,
-	0x26,
-	0x05,
-	0x76,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xf1,
-	0x7c,
-	0x00,
-	0x00,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x0d,
-	0x02,
-	0xf5,
-	0xfc,
-	0x84,
-	0xf1,
-	0x7a,
-	0xdb,
-	0xfc,
-	0x76,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x1a,
-	0x03,
-	0xe8,
-	0xf8,
-	0x8b,
-	0xf2,
-	0x72,
-	0xb8,
-	0xf8,
-	0x59,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x26,
-	0x05,
-	0xdc,
-	0xf3,
-	0x98,
-	0xf4,
-	0x66,
-	0x9c,
-	0xf4,
-	0x2c,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x33,
-	0x06,
-	0xcf,
-	0xee,
-	0xaa,
-	0xf6,
-	0x54,
-	0x88,
-	0xf2,
-	0xf7,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x40,
-	0x08,
-	0xc3,
-	0xea,
-	0xc1,
-	0xf9,
-	0x3e,
-	0x81,
-	0xf1,
-	0xc1,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x4d,
-	0x0a,
-	0xb7,
-	0xe5,
-	0xdd,
-	0xfd,
-	0x23,
-	0x89,
-	0xf2,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x5a,
-	0x0b,
-	0xaa,
-	0xe0,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0xf5,
-	0x81,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x66,
-	0x0d,
-	0x9e,
-	0xdb,
-	0x24,
-	0x04,
-	0xde,
-	0xd4,
-	0xfb,
-	0x95,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x73,
-	0x0e,
-	0x91,
-	0xd7,
-	0x4f,
-	0x0a,
-	0xb4,
-	0x1c,
-	0x03,
-	0xe3,
-	0x10,
-	0x85,
-	0xd2,
-	0x70,
-	0x7f,
-	0x10,
-	0x85,
-	0xd2,
-	0x7f,
-	0x10,
-	0x85,
-	0x7f,
-	0x10,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x81,
-	0xe1,
-	0x70,
-	0x58,
-	0x7f,
-	0x20,
-	0x91,
-	0x81,
-	0xe1,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x8e,
-	0xe4,
-	0x65,
-	0x4f,
-	0x4f,
-	0x14,
-	0xbc,
-	0xe5,
-	0xfa,
-	0xe3,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x9b,
-	0xe7,
-	0x5a,
-	0x46,
-	0x24,
-	0x09,
-	0xe2,
-	0x2d,
-	0x0b,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xa7,
-	0xeb,
-	0x4e,
-	0x3e,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0x17,
-	0x81,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xb4,
-	0xee,
-	0x43,
-	0x35,
-	0xdd,
-	0xf8,
-	0x1f,
-	0x78,
-	0x1e,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xc1,
-	0xf1,
-	0x38,
-	0x2c,
-	0xc1,
-	0xf1,
-	0x38,
-	0x7f,
-	0x20,
-	0xc1,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xce,
-	0xf4,
-	0x2d,
-	0x23,
-	0xaa,
-	0xeb,
-	0x4c,
-	0x79,
-	0x1e,
-	0xf7,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xdb,
-	0xf7,
-	0x22,
-	0x1a,
-	0x98,
-	0xe7,
-	0x5c,
-	0x65,
-	0x19,
-	0x2c,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xe7,
-	0xfb,
-	0x16,
-	0x12,
-	0x8b,
-	0xe4,
-	0x67,
-	0x49,
-	0x12,
-	0x59,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0xf4,
-	0xfe,
-	0x0b,
-	0x09,
-	0x84,
-	0xe2,
-	0x6e,
-	0x26,
-	0x09,
-	0x76,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xe1,
-	0x70,
-	0x00,
-	0x00,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x0d,
-	0x03,
-	0xf6,
-	0xf8,
-	0x84,
-	0xe2,
-	0x6e,
-	0xdb,
-	0xf8,
-	0x76,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x1a,
-	0x06,
-	0xeb,
-	0xef,
-	0x8b,
-	0xe4,
-	0x67,
-	0xb8,
-	0xef,
-	0x59,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x26,
-	0x0a,
-	0xdf,
-	0xe7,
-	0x98,
-	0xe7,
-	0x5c,
-	0x9c,
-	0xe8,
-	0x2c,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x33,
-	0x0d,
-	0xd4,
-	0xde,
-	0xaa,
-	0xeb,
-	0x4c,
-	0x88,
-	0xe3,
-	0xf7,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x40,
-	0x10,
-	0xc9,
-	0xd5,
-	0xc1,
-	0xf1,
-	0x38,
-	0x81,
-	0xe1,
-	0xc1,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x4d,
-	0x13,
-	0xbe,
-	0xcc,
-	0xdd,
-	0xf8,
-	0x1f,
-	0x89,
-	0xe3,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x5a,
-	0x16,
-	0xb3,
-	0xc3,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0xea,
-	0x81,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x66,
-	0x1a,
-	0xa7,
-	0xbb,
-	0x24,
-	0x09,
-	0xe2,
-	0xd4,
-	0xf6,
-	0x95,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x73,
-	0x1d,
-	0x9c,
-	0xb2,
-	0x4f,
-	0x14,
-	0xbc,
-	0x1c,
-	0x07,
-	0xe3,
-	0x20,
-	0x91,
-	0xa9,
-	0x44,
-	0x7f,
-	0x20,
-	0x91,
-	0xa9,
-	0x7f,
-	0x20,
-	0x91,
-	0x7f,
-	0x20,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x81,
-	0xd1,
-	0x5c,
-	0x75,
-	0x7f,
-	0x30,
-	0xa5,
-	0x81,
-	0xd1,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x8e,
-	0xd6,
-	0x53,
-	0x69,
-	0x4f,
-	0x1e,
-	0xc8,
-	0xe5,
-	0xf7,
-	0xe3,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x9b,
-	0xdb,
-	0x4a,
-	0x5e,
-	0x24,
-	0x0d,
-	0xe7,
-	0x2d,
-	0x11,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xa7,
-	0xdf,
-	0x40,
-	0x52,
-	0xfe,
-	0x00,
-	0x02,
-	0x5d,
-	0x23,
-	0x81,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xb4,
-	0xe4,
-	0x37,
-	0x46,
-	0xdd,
-	0xf4,
-	0x1a,
-	0x78,
-	0x2d,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xc1,
-	0xe9,
-	0x2e,
-	0x3b,
-	0xc1,
-	0xe9,
-	0x2e,
-	0x7f,
-	0x30,
-	0xc1,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xce,
-	0xee,
-	0x25,
-	0x2f,
-	0xaa,
-	0xe0,
-	0x3f,
-	0x79,
-	0x2d,
-	0xf7,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xdb,
-	0xf3,
-	0x1c,
-	0x23,
-	0x98,
-	0xda,
-	0x4b,
-	0x65,
-	0x26,
-	0x2c,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xe7,
-	0xf7,
-	0x12,
-	0x17,
-	0x8b,
-	0xd5,
-	0x55,
-	0x49,
-	0x1b,
-	0x59,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0xf4,
-	0xfc,
-	0x09,
-	0x0c,
-	0x84,
-	0xd2,
-	0x5a,
-	0x26,
-	0x0e,
-	0x76,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xd1,
-	0x5c,
-	0x00,
-	0x00,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x0d,
-	0x05,
-	0xf8,
-	0xf5,
-	0x84,
-	0xd2,
-	0x5a,
-	0xdb,
-	0xf3,
-	0x76,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x1a,
-	0x0a,
-	0xef,
-	0xea,
-	0x8b,
-	0xd5,
-	0x55,
-	0xb8,
-	0xe6,
-	0x59,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x26,
-	0x0e,
-	0xe5,
-	0xde,
-	0x98,
-	0xda,
-	0x4b,
-	0x9c,
-	0xdb,
-	0x2c,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x33,
-	0x13,
-	0xdc,
-	0xd2,
-	0xaa,
-	0xe0,
-	0x3f,
-	0x88,
-	0xd4,
-	0xf7,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x40,
-	0x18,
-	0xd3,
-	0xc6,
-	0xc1,
-	0xe9,
-	0x2e,
-	0x81,
-	0xd1,
-	0xc1,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x4d,
-	0x1d,
-	0xca,
-	0xbb,
-	0xdd,
-	0xf4,
-	0x1a,
-	0x89,
-	0xd4,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x5a,
-	0x22,
-	0xc1,
-	0xaf,
-	0xfe,
-	0x00,
-	0x02,
-	0xa4,
-	0xde,
-	0x81,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x66,
-	0x26,
-	0xb7,
-	0xa3,
-	0x24,
-	0x0d,
-	0xe7,
-	0xd4,
-	0xf0,
-	0x95,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x73,
-	0x2b,
-	0xae,
-	0x98,
-	0x4f,
-	0x1e,
-	0xc8,
-	0x1c,
-	0x0a,
-	0xe3,
-	0x30,
-	0xa5,
-	0x8c,
-	0x04,
-	0x7f,
-	0x30,
-	0xa5,
-	0x8c,
-	0x7f,
-	0x30,
-	0xa5,
-	0x7f,
-	0x30,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x81,
-	0xc1,
-	0x40,
-	0x7f,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x8e,
-	0xc7,
-	0x3a,
-	0x73,
-	0x4f,
-	0x28,
-	0xd9,
-	0xe5,
-	0xf3,
-	0xe3,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x9b,
-	0xce,
-	0x33,
-	0x66,
-	0x24,
-	0x12,
-	0xef,
-	0x2d,
-	0x17,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xa7,
-	0xd4,
-	0x2d,
-	0x5a,
-	0xfe,
-	0x00,
-	0x01,
-	0x5d,
-	0x2f,
-	0x81,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xb4,
-	0xdb,
-	0x26,
-	0x4d,
-	0xdd,
-	0xef,
-	0x12,
-	0x78,
-	0x3c,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xc1,
-	0xe1,
-	0x20,
-	0x40,
-	0xc1,
-	0xe1,
-	0x20,
-	0x7f,
-	0x40,
-	0xc1,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xce,
-	0xe7,
-	0x1a,
-	0x33,
-	0xaa,
-	0xd5,
-	0x2c,
-	0x79,
-	0x3c,
-	0xf7,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xdb,
-	0xee,
-	0x13,
-	0x26,
-	0x98,
-	0xcd,
-	0x34,
-	0x65,
-	0x33,
-	0x2c,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xe7,
-	0xf4,
-	0x0d,
-	0x1a,
-	0x8b,
-	0xc6,
-	0x3b,
-	0x49,
-	0x24,
-	0x59,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0xf4,
-	0xfb,
-	0x06,
-	0x0d,
-	0x84,
-	0xc2,
-	0x3f,
-	0x26,
-	0x13,
-	0x76,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xc1,
-	0x40,
-	0x00,
-	0x00,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x0d,
-	0x06,
-	0xfb,
-	0xf4,
-	0x84,
-	0xc2,
-	0x3f,
-	0xdb,
-	0xee,
-	0x76,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x1a,
-	0x0d,
-	0xf4,
-	0xe7,
-	0x8b,
-	0xc6,
-	0x3b,
-	0xb8,
-	0xdd,
-	0x59,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x26,
-	0x13,
-	0xee,
-	0xdb,
-	0x98,
-	0xcd,
-	0x34,
-	0x9c,
-	0xce,
-	0x2c,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x33,
-	0x1a,
-	0xe7,
-	0xce,
-	0xaa,
-	0xd5,
-	0x2c,
-	0x88,
-	0xc5,
-	0xf7,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x40,
-	0x20,
-	0xe1,
-	0xc1,
-	0xc1,
-	0xe1,
-	0x20,
-	0x81,
-	0xc1,
-	0xc1,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x4d,
-	0x26,
-	0xdb,
-	0xb4,
-	0xdd,
-	0xef,
-	0x12,
-	0x89,
-	0xc5,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x5a,
-	0x2d,
-	0xd4,
-	0xa7,
-	0xfe,
-	0x00,
-	0x01,
-	0xa4,
-	0xd2,
-	0x81,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x66,
-	0x33,
-	0xce,
-	0x9b,
-	0x24,
-	0x12,
-	0xef,
-	0xd4,
-	0xea,
-	0x95,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x73,
-	0x3a,
-	0xc7,
-	0x8e,
-	0x4f,
-	0x28,
-	0xd9,
-	0x1c,
-	0x0e,
-	0xe3,
-	0x40,
-	0xc1,
-	0x81,
-	0xc1,
-	0x7f,
-	0x40,
-	0xc1,
-	0x81,
-	0x7f,
-	0x40,
-	0xc1,
-	0x7f,
-	0x40,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x81,
-	0xb1,
-	0x1c,
-	0x73,
-	0x7f,
-	0x50,
-	0xe5,
-	0x81,
-	0xb1,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x8e,
-	0xb9,
-	0x19,
-	0x68,
-	0x4f,
-	0x32,
-	0xf0,
-	0xe5,
-	0xf0,
-	0xe3,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x9b,
-	0xc1,
-	0x16,
-	0x5c,
-	0x24,
-	0x16,
-	0xf9,
-	0x2d,
-	0x1c,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xa7,
-	0xc9,
-	0x14,
-	0x51,
-	0xfe,
-	0xff,
-	0x01,
-	0x5d,
-	0x3a,
-	0x81,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xb4,
-	0xd1,
-	0x11,
-	0x45,
-	0xdd,
-	0xeb,
-	0x08,
-	0x78,
-	0x4b,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xc1,
-	0xd9,
-	0x0e,
-	0x3a,
-	0xc1,
-	0xd9,
-	0x0e,
-	0x7f,
-	0x50,
-	0xc1,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xce,
-	0xe1,
-	0x0b,
-	0x2e,
-	0xaa,
-	0xcb,
-	0x13,
-	0x79,
-	0x4c,
-	0xf7,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xdb,
-	0xe9,
-	0x08,
-	0x23,
-	0x98,
-	0xbf,
-	0x17,
-	0x65,
-	0x3f,
-	0x2c,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xe7,
-	0xf1,
-	0x06,
-	0x17,
-	0x8b,
-	0xb7,
-	0x1a,
-	0x49,
-	0x2d,
-	0x59,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0xf4,
-	0xf9,
-	0x03,
-	0x0b,
-	0x84,
-	0xb3,
-	0x1b,
-	0x26,
-	0x18,
-	0x76,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xb1,
-	0x1c,
-	0x00,
-	0x00,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x0d,
-	0x08,
-	0xfe,
-	0xf5,
-	0x84,
-	0xb3,
-	0x1b,
-	0xdb,
-	0xe9,
-	0x76,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x1a,
-	0x10,
-	0xfb,
-	0xea,
-	0x8b,
-	0xb7,
-	0x1a,
-	0xb8,
-	0xd4,
-	0x59,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x26,
-	0x18,
-	0xf9,
-	0xde,
-	0x98,
-	0xbf,
-	0x17,
-	0x9c,
-	0xc2,
-	0x2c,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x33,
-	0x20,
-	0xf6,
-	0xd3,
-	0xaa,
-	0xcb,
-	0x13,
-	0x88,
-	0xb5,
-	0xf7,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x40,
-	0x28,
-	0xf3,
-	0xc7,
-	0xc1,
-	0xd9,
-	0x0e,
-	0x81,
-	0xb1,
-	0xc1,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x4d,
-	0x30,
-	0xf0,
-	0xbc,
-	0xdd,
-	0xeb,
-	0x08,
-	0x89,
-	0xb6,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x5a,
-	0x38,
-	0xed,
-	0xb0,
-	0xfe,
-	0xff,
-	0x01,
-	0xa4,
-	0xc7,
-	0x81,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x66,
-	0x40,
-	0xeb,
-	0xa5,
-	0x24,
-	0x16,
-	0xf9,
-	0xd4,
-	0xe5,
-	0x95,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x73,
-	0x48,
-	0xe8,
-	0x99,
-	0x4f,
-	0x32,
-	0xf0,
-	0x1c,
-	0x11,
-	0xe3,
-	0x50,
-	0xe5,
-	0x8e,
-	0x8d,
-	0x7f,
-	0x50,
-	0xe5,
-	0x8e,
-	0x7f,
-	0x50,
-	0xe5,
-	0x7f,
-	0x50,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x81,
-	0xa1,
-	0xf1,
-	0x48,
-	0x7f,
-	0x60,
-	0x10,
-	0x81,
-	0xa1,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x8e,
-	0xab,
-	0xf3,
-	0x41,
-	0x4f,
-	0x3c,
-	0x0a,
-	0xe5,
-	0xec,
-	0xe3,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x9b,
-	0xb4,
-	0xf4,
-	0x3a,
-	0x24,
-	0x1b,
-	0x04,
-	0x2d,
-	0x22,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xa7,
-	0xbe,
-	0xf6,
-	0x32,
-	0xfe,
-	0xff,
-	0x00,
-	0x5d,
-	0x46,
-	0x81,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xb4,
-	0xc7,
-	0xf7,
-	0x2b,
-	0xdd,
-	0xe6,
-	0xfd,
-	0x78,
-	0x5a,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xc1,
-	0xd1,
-	0xf9,
-	0x24,
-	0xc1,
-	0xd1,
-	0xf9,
-	0x7f,
-	0x60,
-	0xc1,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xce,
-	0xdb,
-	0xfb,
-	0x1d,
-	0xaa,
-	0xc0,
-	0xf6,
-	0x79,
-	0x5b,
-	0xf7,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xdb,
-	0xe4,
-	0xfc,
-	0x16,
-	0x98,
-	0xb2,
-	0xf4,
-	0x65,
-	0x4c,
-	0x2c,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xe7,
-	0xee,
-	0xfe,
-	0x0e,
-	0x8b,
-	0xa9,
-	0xf2,
-	0x49,
-	0x37,
-	0x59,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0xf4,
-	0xf7,
-	0xff,
-	0x07,
-	0x84,
-	0xa3,
-	0xf1,
-	0x26,
-	0x1c,
-	0x76,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0xa1,
-	0xf1,
-	0x00,
-	0x00,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x0d,
-	0x0a,
-	0x02,
-	0xfa,
-	0x84,
-	0xa3,
-	0xf1,
-	0xdb,
-	0xe5,
-	0x76,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x1a,
-	0x13,
-	0x03,
-	0xf3,
-	0x8b,
-	0xa9,
-	0xf2,
-	0xb8,
-	0xca,
-	0x59,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x26,
-	0x1d,
-	0x05,
-	0xeb,
-	0x98,
-	0xb2,
-	0xf4,
-	0x9c,
-	0xb5,
-	0x2c,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x33,
-	0x26,
-	0x06,
-	0xe4,
-	0xaa,
-	0xc0,
-	0xf6,
-	0x88,
-	0xa6,
-	0xf7,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x40,
-	0x30,
-	0x08,
-	0xdd,
-	0xc1,
-	0xd1,
-	0xf9,
-	0x81,
-	0xa1,
-	0xc1,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x4d,
-	0x3a,
-	0x0a,
-	0xd6,
-	0xdd,
-	0xe6,
-	0xfd,
-	0x89,
-	0xa7,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x5a,
-	0x43,
-	0x0b,
-	0xcf,
-	0xfe,
-	0xff,
-	0x00,
-	0xa4,
-	0xbb,
-	0x81,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x66,
-	0x4d,
-	0x0d,
-	0xc7,
-	0x24,
-	0x1b,
-	0x04,
-	0xd4,
-	0xdf,
-	0x95,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x73,
-	0x56,
-	0x0e,
-	0xc0,
-	0x4f,
-	0x3c,
-	0x0a,
-	0x1c,
-	0x15,
-	0xe3,
-	0x60,
-	0x10,
-	0xb9,
-	0x85,
-	0x7f,
-	0x60,
-	0x10,
-	0xb9,
-	0x7f,
-	0x60,
-	0x10,
-	0x7f,
-	0x60,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x81,
-	0x91,
-	0xbd,
-	0xfa,
-	0x7f,
-	0x70,
-	0x44,
-	0x81,
-	0x91,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x8e,
-	0x9c,
-	0xc4,
-	0xfb,
-	0x4f,
-	0x45,
-	0x2a,
-	0xe5,
-	0xe9,
-	0xe3,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x9b,
-	0xa7,
-	0xcb,
-	0xfb,
-	0x24,
-	0x1f,
-	0x13,
-	0x2d,
-	0x27,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xa7,
-	0xb3,
-	0xd1,
-	0xfc,
-	0xfe,
-	0xff,
-	0x00,
-	0x5d,
-	0x52,
-	0x81,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xb4,
-	0xbe,
-	0xd8,
-	0xfd,
-	0xdd,
-	0xe2,
-	0xee,
-	0x78,
-	0x69,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xc1,
-	0xc9,
-	0xdf,
-	0xfe,
-	0xc1,
-	0xc9,
-	0xdf,
-	0x7f,
-	0x70,
-	0xc1,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xce,
-	0xd4,
-	0xe6,
-	0xfe,
-	0xaa,
-	0xb5,
-	0xd3,
-	0x79,
-	0x6a,
-	0xf7,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xdb,
-	0xdf,
-	0xed,
-	0xff,
-	0x98,
-	0xa5,
-	0xc9,
-	0x65,
-	0x59,
-	0x2c,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xe7,
-	0xeb,
-	0xf3,
-	0x00,
-	0x8b,
-	0x9a,
-	0xc2,
-	0x49,
-	0x40,
-	0x59,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0xf4,
-	0xf6,
-	0xfa,
-	0x00,
-	0x84,
-	0x93,
-	0xbe,
-	0x26,
-	0x21,
-	0x76,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x91,
-	0xbd,
-	0x00,
-	0x00,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x0d,
-	0x0b,
-	0x07,
-	0x01,
-	0x84,
-	0x93,
-	0xbe,
-	0xdb,
-	0xe0,
-	0x76,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x1a,
-	0x16,
-	0x0e,
-	0x01,
-	0x8b,
-	0x9a,
-	0xc2,
-	0xb8,
-	0xc1,
-	0x59,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x26,
-	0x22,
-	0x14,
-	0x02,
-	0x98,
-	0xa5,
-	0xc9,
-	0x9c,
-	0xa8,
-	0x2c,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x33,
-	0x2d,
-	0x1b,
-	0x03,
-	0xaa,
-	0xb5,
-	0xd3,
-	0x88,
-	0x97,
-	0xf7,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x40,
-	0x38,
-	0x22,
-	0x03,
-	0xc1,
-	0xc9,
-	0xdf,
-	0x81,
-	0x91,
-	0xc1,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x4d,
-	0x43,
-	0x29,
-	0x04,
-	0xdd,
-	0xe2,
-	0xee,
-	0x89,
-	0x98,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x5a,
-	0x4e,
-	0x30,
-	0x05,
-	0xfe,
-	0xff,
-	0x00,
-	0xa4,
-	0xaf,
-	0x81,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x66,
-	0x5a,
-	0x36,
-	0x06,
-	0x24,
-	0x1f,
-	0x13,
-	0xd4,
-	0xda,
-	0x95,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x73,
-	0x65,
-	0x3d,
-	0x06,
-	0x4f,
-	0x45,
-	0x2a,
-	0x1c,
-	0x18,
-	0xe3,
-	0x70,
-	0x44,
-	0x07,
-	0xc9,
-	0x7f,
-	0x70,
-	0x44,
-	0x07,
-	0x7f,
-	0x70,
-	0x44,
-	0x7f,
-	0x70,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x81,
-	0x81,
-	0x81,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x81,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x8e,
-	0x8e,
-	0x8e,
-	0x8e,
-	0x4f,
-	0x4f,
-	0x4f,
-	0xe5,
-	0xe5,
-	0xe3,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x9b,
-	0x9b,
-	0x9b,
-	0x9b,
-	0x24,
-	0x24,
-	0x24,
-	0x2d,
-	0x2d,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xa7,
-	0xa7,
-	0xa7,
-	0xa7,
-	0xfe,
-	0xfe,
-	0xfe,
-	0x5d,
-	0x5d,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xb4,
-	0xb4,
-	0xb4,
-	0xb4,
-	0xdd,
-	0xdd,
-	0xdd,
-	0x78,
-	0x78,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x7f,
-	0x7f,
-	0xc1,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xce,
-	0xce,
-	0xce,
-	0xce,
-	0xaa,
-	0xaa,
-	0xaa,
-	0x79,
-	0x79,
-	0xf7,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xdb,
-	0xdb,
-	0xdb,
-	0xdb,
-	0x98,
-	0x98,
-	0x98,
-	0x65,
-	0x65,
-	0x2c,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xe7,
-	0xe7,
-	0xe7,
-	0xe7,
-	0x8b,
-	0x8b,
-	0x8b,
-	0x49,
-	0x49,
-	0x59,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xf4,
-	0xf4,
-	0xf4,
-	0xf4,
-	0x84,
-	0x84,
-	0x84,
-	0x26,
-	0x26,
-	0x76,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x81,
-	0x81,
-	0x81,
-	0x00,
-	0x00,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x84,
-	0x84,
-	0x84,
-	0xdb,
-	0xdb,
-	0x76,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x1a,
-	0x1a,
-	0x1a,
-	0x1a,
-	0x8b,
-	0x8b,
-	0x8b,
-	0xb8,
-	0xb8,
-	0x59,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x26,
-	0x26,
-	0x26,
-	0x26,
-	0x98,
-	0x98,
-	0x98,
-	0x9c,
-	0x9c,
-	0x2c,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0xaa,
-	0xaa,
-	0xaa,
-	0x88,
-	0x88,
-	0xf7,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0xc1,
-	0xc1,
-	0xc1,
-	0x81,
-	0x81,
-	0xc1,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x4d,
-	0x4d,
-	0x4d,
-	0x4d,
-	0xdd,
-	0xdd,
-	0xdd,
-	0x89,
-	0x89,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x5a,
-	0x5a,
-	0x5a,
-	0x5a,
-	0xfe,
-	0xfe,
-	0xfe,
-	0xa4,
-	0xa4,
-	0x81,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x66,
-	0x66,
-	0x66,
-	0x66,
-	0x24,
-	0x24,
-	0x24,
-	0xd4,
-	0xd4,
-	0x95,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x73,
-	0x73,
-	0x73,
-	0x73,
-	0x4f,
-	0x4f,
-	0x4f,
-	0x1c,
-	0x1c,
-	0xe3,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0x7f,
-	0xa2,
-	0x36,
-	0x24,
-	0x1b,
-	0x19,
-	0x45,
-	0x39,
-	0x20,
-	0x19,
-	0x19,
-	0x30,
-	0x2a,
-	0x19,
-	0x17,
-	0x26,
-	0x21,
-	0x19,
-	0x15,
-	0x17,
-	0x23,
-	0x20,
-	0x19,
-	0x17,
-	0x16,
-	0x36,
-	0x66,
-	0x23,
-	0x1e,
-	0x1b,
-	0x3b,
-	0x32,
-	0x25,
-	0x1a,
-	0x1b,
-	0x29,
-	0x28,
-	0x1a,
-	0x18,
-	0x23,
-	0x1e,
-	0x18,
-	0x15,
-	0x17,
-	0x20,
-	0x1e,
-	0x18,
-	0x17,
-	0x17,
-	0x24,
-	0x23,
-	0x5a,
-	0x23,
-	0x24,
-	0x21,
-	0x24,
-	0x28,
-	0x24,
-	0x21,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x1a,
-	0x17,
-	0x16,
-	0x17,
-	0x1a,
-	0x19,
-	0x18,
-	0x15,
-	0x18,
-	0x19,
-	0x1b,
-	0x1e,
-	0x23,
-	0x66,
-	0x36,
-	0x1b,
-	0x1a,
-	0x25,
-	0x32,
-	0x3b,
-	0x18,
-	0x1a,
-	0x28,
-	0x29,
-	0x17,
-	0x15,
-	0x18,
-	0x1e,
-	0x23,
-	0x17,
-	0x17,
-	0x18,
-	0x1e,
-	0x20,
-	0x19,
-	0x1b,
-	0x24,
-	0x36,
-	0xa2,
-	0x19,
-	0x19,
-	0x20,
-	0x39,
-	0x45,
-	0x17,
-	0x19,
-	0x2a,
-	0x30,
-	0x17,
-	0x15,
-	0x19,
-	0x21,
-	0x26,
-	0x16,
-	0x17,
-	0x19,
-	0x20,
-	0x23,
-	0x45,
-	0x3b,
-	0x21,
-	0x1b,
-	0x19,
-	0x6e,
-	0x30,
-	0x21,
-	0x18,
-	0x19,
-	0x32,
-	0x2e,
-	0x19,
-	0x17,
-	0x2a,
-	0x23,
-	0x1a,
-	0x16,
-	0x17,
-	0x26,
-	0x23,
-	0x1a,
-	0x17,
-	0x17,
-	0x39,
-	0x32,
-	0x24,
-	0x1a,
-	0x19,
-	0x30,
-	0x45,
-	0x1e,
-	0x18,
-	0x18,
-	0x2b,
-	0x27,
-	0x18,
-	0x16,
-	0x23,
-	0x1e,
-	0x17,
-	0x14,
-	0x16,
-	0x21,
-	0x1e,
-	0x17,
-	0x15,
-	0x15,
-	0x20,
-	0x25,
-	0x28,
-	0x25,
-	0x20,
-	0x21,
-	0x1e,
-	0x3c,
-	0x1e,
-	0x21,
-	0x1b,
-	0x1e,
-	0x1e,
-	0x1b,
-	0x1a,
-	0x17,
-	0x17,
-	0x17,
-	0x1a,
-	0x19,
-	0x18,
-	0x16,
-	0x18,
-	0x19,
-	0x19,
-	0x1a,
-	0x24,
-	0x32,
-	0x39,
-	0x18,
-	0x18,
-	0x1e,
-	0x45,
-	0x30,
-	0x16,
-	0x18,
-	0x27,
-	0x2b,
-	0x16,
-	0x14,
-	0x17,
-	0x1e,
-	0x23,
-	0x15,
-	0x15,
-	0x17,
-	0x1e,
-	0x21,
-	0x19,
-	0x1b,
-	0x21,
-	0x3b,
-	0x45,
-	0x19,
-	0x18,
-	0x21,
-	0x30,
-	0x6e,
-	0x17,
-	0x19,
-	0x2e,
-	0x32,
-	0x17,
-	0x16,
-	0x1a,
-	0x23,
-	0x2a,
-	0x17,
-	0x17,
-	0x1a,
-	0x23,
-	0x26,
-	0x30,
-	0x29,
-	0x1d,
-	0x18,
-	0x17,
-	0x32,
-	0x2b,
-	0x1b,
-	0x16,
-	0x17,
-	0x67,
-	0x2b,
-	0x18,
-	0x16,
-	0x32,
-	0x2b,
-	0x1b,
-	0x16,
-	0x17,
-	0x30,
-	0x29,
-	0x1d,
-	0x18,
-	0x17,
-	0x2a,
-	0x28,
-	0x1d,
-	0x1a,
-	0x19,
-	0x2e,
-	0x27,
-	0x1e,
-	0x18,
-	0x19,
-	0x2b,
-	0x45,
-	0x1a,
-	0x18,
-	0x2e,
-	0x27,
-	0x1e,
-	0x18,
-	0x19,
-	0x2a,
-	0x28,
-	0x1d,
-	0x1a,
-	0x19,
-	0x19,
-	0x1a,
-	0x1d,
-	0x28,
-	0x2a,
-	0x19,
-	0x18,
-	0x1e,
-	0x27,
-	0x2e,
-	0x18,
-	0x1a,
-	0x45,
-	0x2b,
-	0x19,
-	0x18,
-	0x1e,
-	0x27,
-	0x2e,
-	0x19,
-	0x1a,
-	0x1d,
-	0x28,
-	0x2a,
-	0x17,
-	0x18,
-	0x1d,
-	0x29,
-	0x30,
-	0x17,
-	0x16,
-	0x1b,
-	0x2b,
-	0x32,
-	0x16,
-	0x18,
-	0x2b,
-	0x67,
-	0x17,
-	0x16,
-	0x1b,
-	0x2b,
-	0x32,
-	0x17,
-	0x18,
-	0x1d,
-	0x29,
-	0x30,
-	0x26,
-	0x23,
-	0x1a,
-	0x17,
-	0x17,
-	0x2a,
-	0x23,
-	0x1a,
-	0x16,
-	0x17,
-	0x32,
-	0x2e,
-	0x19,
-	0x17,
-	0x6e,
-	0x30,
-	0x21,
-	0x18,
-	0x19,
-	0x45,
-	0x3b,
-	0x21,
-	0x1b,
-	0x19,
-	0x21,
-	0x1e,
-	0x17,
-	0x15,
-	0x15,
-	0x23,
-	0x1e,
-	0x17,
-	0x14,
-	0x16,
-	0x2b,
-	0x27,
-	0x18,
-	0x16,
-	0x30,
-	0x45,
-	0x1e,
-	0x18,
-	0x18,
-	0x39,
-	0x32,
-	0x24,
-	0x1a,
-	0x19,
-	0x19,
-	0x18,
-	0x16,
-	0x18,
-	0x19,
-	0x1a,
-	0x17,
-	0x17,
-	0x17,
-	0x1a,
-	0x1b,
-	0x1e,
-	0x1e,
-	0x1b,
-	0x21,
-	0x1e,
-	0x3c,
-	0x1e,
-	0x21,
-	0x20,
-	0x25,
-	0x28,
-	0x25,
-	0x20,
-	0x15,
-	0x15,
-	0x17,
-	0x1e,
-	0x21,
-	0x16,
-	0x14,
-	0x17,
-	0x1e,
-	0x23,
-	0x16,
-	0x18,
-	0x27,
-	0x2b,
-	0x18,
-	0x18,
-	0x1e,
-	0x45,
-	0x30,
-	0x19,
-	0x1a,
-	0x24,
-	0x32,
-	0x39,
-	0x17,
-	0x17,
-	0x1a,
-	0x23,
-	0x26,
-	0x17,
-	0x16,
-	0x1a,
-	0x23,
-	0x2a,
-	0x17,
-	0x19,
-	0x2e,
-	0x32,
-	0x19,
-	0x18,
-	0x21,
-	0x30,
-	0x6e,
-	0x19,
-	0x1b,
-	0x21,
-	0x3b,
-	0x45,
-	0x23,
-	0x20,
-	0x19,
-	0x17,
-	0x16,
-	0x26,
-	0x21,
-	0x19,
-	0x15,
-	0x17,
-	0x30,
-	0x2a,
-	0x19,
-	0x17,
-	0x45,
-	0x39,
-	0x20,
-	0x19,
-	0x19,
-	0xa2,
-	0x36,
-	0x24,
-	0x1b,
-	0x19,
-	0x20,
-	0x1e,
-	0x18,
-	0x17,
-	0x17,
-	0x23,
-	0x1e,
-	0x18,
-	0x15,
-	0x17,
-	0x29,
-	0x28,
-	0x1a,
-	0x18,
-	0x3b,
-	0x32,
-	0x25,
-	0x1a,
-	0x1b,
-	0x36,
-	0x66,
-	0x23,
-	0x1e,
-	0x1b,
-	0x19,
-	0x18,
-	0x15,
-	0x18,
-	0x19,
-	0x1a,
-	0x17,
-	0x16,
-	0x17,
-	0x1a,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x1d,
-	0x21,
-	0x24,
-	0x28,
-	0x24,
-	0x21,
-	0x24,
-	0x23,
-	0x5a,
-	0x23,
-	0x24,
-	0x17,
-	0x17,
-	0x18,
-	0x1e,
-	0x20,
-	0x17,
-	0x15,
-	0x18,
-	0x1e,
-	0x23,
-	0x18,
-	0x1a,
-	0x28,
-	0x29,
-	0x1b,
-	0x1a,
-	0x25,
-	0x32,
-	0x3b,
-	0x1b,
-	0x1e,
-	0x23,
-	0x66,
-	0x36,
-	0x16,
-	0x17,
-	0x19,
-	0x20,
-	0x23,
-	0x17,
-	0x15,
-	0x19,
-	0x21,
-	0x26,
-	0x17,
-	0x19,
-	0x2a,
-	0x30,
-	0x19,
-	0x19,
-	0x20,
-	0x39,
-	0x45,
-	0x19,
-	0x1b,
-	0x24,
-	0x36,
-	0xa2,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0x03,
-	0x0a,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x06,
-	0xfa,
-	0xf3,
-	0xf3,
-	0xf3,
-	0xf6,
-	0xfd,
-	0x0a,
-	0x1d,
-	0x26,
-	0x26,
-	0x26,
-	0x13,
-	0xed,
-	0xda,
-	0xda,
-	0xda,
-	0xe3,
-	0xf6,
-	0x10,
-	0x30,
-	0x40,
-	0x40,
-	0x40,
-	0x20,
-	0xe0,
-	0xc0,
-	0xc0,
-	0xc0,
-	0xd0,
-	0xf0,
-	0x16,
-	0x43,
-	0x5a,
-	0x5a,
-	0x5a,
-	0x2d,
-	0xd3,
-	0xa6,
-	0xa6,
-	0xa6,
-	0xbd,
-	0xea,
-	0x16,
-	0x43,
-	0x5a,
-	0x5a,
-	0x5a,
-	0x2d,
-	0xd3,
-	0xa6,
-	0xa6,
-	0xa6,
-	0xbd,
-	0xea,
-	0x10,
-	0x30,
-	0x40,
-	0x40,
-	0x40,
-	0x20,
-	0xe0,
-	0xc0,
-	0xc0,
-	0xc0,
-	0xd0,
-	0xf0,
-	0x0a,
-	0x1d,
-	0x26,
-	0x26,
-	0x26,
-	0x13,
-	0xed,
-	0xda,
-	0xda,
-	0xda,
-	0xe3,
-	0xf6,
-	0x03,
-	0x0a,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x06,
-	0xfa,
-	0xf3,
-	0xf3,
-	0xf3,
-	0xf6,
-	0xfd,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x73,
-	0x73,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0x8d,
-	0x8d,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0x03,
-	0x0a,
-	0x10,
-	0x16,
-	0x1d,
-	0x1d,
-	0x16,
-	0x10,
-	0x0a,
-	0x03,
-	0x0a,
-	0x1d,
-	0x30,
-	0x43,
-	0x56,
-	0x56,
-	0x43,
-	0x30,
-	0x1d,
-	0x0a,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x73,
-	0x73,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0x0d,
-	0x26,
-	0x40,
-	0x5a,
-	0x73,
-	0x73,
-	0x5a,
-	0x40,
-	0x26,
-	0x0d,
-	0x06,
-	0x13,
-	0x20,
-	0x2d,
-	0x3a,
-	0x3a,
-	0x2d,
-	0x20,
-	0x13,
-	0x06,
-	0xfa,
-	0xed,
-	0xe0,
-	0xd3,
-	0xc6,
-	0xc6,
-	0xd3,
-	0xe0,
-	0xed,
-	0xfa,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0x8d,
-	0x8d,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0xf3,
-	0xda,
-	0xc0,
-	0xa6,
-	0x8d,
-	0x8d,
-	0xa6,
-	0xc0,
-	0xda,
-	0xf3,
-	0xf6,
-	0xe3,
-	0xd0,
-	0xbd,
-	0xaa,
-	0xaa,
-	0xbd,
-	0xd0,
-	0xe3,
-	0xf6,
-	0xfd,
-	0xf6,
-	0xf0,
-	0xea,
-	0xe3,
-	0xe3,
-	0xea,
-	0xf0,
-	0xf6,
-	0xfd,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xcd,
-	0x33,
-	0x00,
-	0x00,
-	0x9a,
-	0x66,
-	0x00,
-	0x00,
-	0x66,
-	0x9a,
-	0x00,
-	0x00,
-	0x33,
-	0xcd,
-	0x00,
-	0x00,
-	0xc0,
-	0x00,
-	0x40,
-	0x00,
-	0x9a,
-	0x26,
-	0x33,
-	0x0d,
-	0x73,
-	0x4d,
-	0x26,
-	0x1a,
-	0x4d,
-	0x73,
-	0x1a,
-	0x26,
-	0x26,
-	0x9a,
-	0x0d,
-	0x33,
-	0x80,
-	0x00,
-	0x80,
-	0x00,
-	0x66,
-	0x1a,
-	0x66,
-	0x1a,
-	0x4d,
-	0x33,
-	0x4d,
-	0x33,
-	0x33,
-	0x4d,
-	0x33,
-	0x4d,
-	0x1a,
-	0x66,
-	0x1a,
-	0x66,
-	0x40,
-	0x00,
-	0xc0,
-	0x00,
-	0x33,
-	0x0d,
-	0x9a,
-	0x26,
-	0x26,
-	0x1a,
-	0x73,
-	0x4d,
-	0x1a,
-	0x26,
-	0x4d,
-	0x73,
-	0x0d,
-	0x33,
-	0x26,
-	0x9a,
-	0x00,
-	0x00,
-	0x04,
-	0x00,
-	0x08,
-	0x00,
-	0x0c,
-	0x00,
-	0x10,
-	0x00,
-	0x00,
-	0x02,
-	0x04,
-	0x02,
-	0x08,
-	0x02,
-	0x0c,
-	0x02,
-	0x10,
-	0x02,
-	0x00,
-	0x04,
-	0x04,
-	0x04,
-	0x08,
-	0x04,
-	0x0c,
-	0x04,
-	0x10,
-	0x04,
-	0x00,
-	0x06,
-	0x04,
-	0x06,
-	0x08,
-	0x06,
-	0x0c,
-	0x06,
-	0x10,
-	0x06,
-	0x00,
-	0x08,
-	0x14,
-	0x00,
-	0x18,
-	0x00,
-	0x1c,
-	0x00,
-	0x20,
-	0x00,
-	0x24,
-	0x00,
-	0x14,
-	0x02,
-	0x18,
-	0x02,
-	0x1c,
-	0x02,
-	0x20,
-	0x02,
-	0x24,
-	0x02,
-	0x14,
-	0x04,
-	0x18,
-	0x04,
-	0x1c,
-	0x04,
-	0x20,
-	0x04,
-	0x24,
-	0x04,
-	0x14,
-	0x06,
-	0x18,
-	0x06,
-	0x1c,
-	0x06,
-	0x20,
-	0x06,
-	0x24,
-	0x06,
-	0x14,
-	0x08,
-	0x28,
-	0x00,
-	0x2c,
-	0x00,
-	0x30,
-	0x00,
-	0x34,
-	0x00,
-	0x38,
-	0x00,
-	0x28,
-	0x02,
-	0x2c,
-	0x02,
-	0x30,
-	0x02,
-	0x34,
-	0x02,
-	0x38,
-	0x02,
-	0x28,
-	0x04,
-	0x2c,
-	0x04,
-	0x30,
-	0x04,
-	0x34,
-	0x04,
-	0x38,
-	0x04,
-	0x28,
-	0x06,
-	0x2c,
-	0x06,
-	0x30,
-	0x06,
-	0x34,
-	0x06,
-	0x38,
-	0x06,
-	0x28,
-	0x08,
-	0x3c,
-	0x00,
-	0x40,
-	0x00,
-	0x44,
-	0x00,
-	0x48,
-	0x00,
-	0x4c,
-	0x00,
-	0x3c,
-	0x02,
-	0x40,
-	0x02,
-	0x44,
-	0x02,
-	0x48,
-	0x02,
-	0x4c,
-	0x02,
-	0x3c,
-	0x04,
-	0x40,
-	0x04,
-	0x44,
-	0x04,
-	0x48,
-	0x04,
-	0x4c,
-	0x04,
-	0x3c,
-	0x06,
-	0x40,
-	0x06,
-	0x44,
-	0x06,
-	0x48,
-	0x06,
-	0x4c,
-	0x06,
-	0x3c,
-	0x08,
-	0x00,
-	0x0a,
-	0x04,
-	0x0a,
-	0x08,
-	0x0a,
-	0x0c,
-	0x0a,
-	0x10,
-	0x0a,
-	0x00,
-	0x0c,
-	0x04,
-	0x0c,
-	0x08,
-	0x0c,
-	0x0c,
-	0x0c,
-	0x10,
-	0x0c,
-	0x00,
-	0x0e,
-	0x04,
-	0x0e,
-	0x08,
-	0x0e,
-	0x0c,
-	0x0e,
-	0x10,
-	0x0e,
-	0x00,
-	0x10,
-	0x04,
-	0x10,
-	0x08,
-	0x10,
-	0x0c,
-	0x10,
-	0x10,
-	0x10,
-	0x00,
-	0x12,
-	0x14,
-	0x0a,
-	0x18,
-	0x0a,
-	0x1c,
-	0x0a,
-	0x20,
-	0x0a,
-	0x24,
-	0x0a,
-	0x14,
-	0x0c,
-	0x18,
-	0x0c,
-	0x1c,
-	0x0c,
-	0x20,
-	0x0c,
-	0x24,
-	0x0c,
-	0x14,
-	0x0e,
-	0x18,
-	0x0e,
-	0x1c,
-	0x0e,
-	0x20,
-	0x0e,
-	0x24,
-	0x0e,
-	0x14,
-	0x10,
-	0x18,
-	0x10,
-	0x1c,
-	0x10,
-	0x20,
-	0x10,
-	0x24,
-	0x10,
-	0x14,
-	0x12,
-	0x28,
-	0x0a,
-	0x2c,
-	0x0a,
-	0x30,
-	0x0a,
-	0x34,
-	0x0a,
-	0x38,
-	0x0a,
-	0x28,
-	0x0c,
-	0x2c,
-	0x0c,
-	0x30,
-	0x0c,
-	0x34,
-	0x0c,
-	0x38,
-	0x0c,
-	0x28,
-	0x0e,
-	0x2c,
-	0x0e,
-	0x30,
-	0x0e,
-	0x34,
-	0x0e,
-	0x38,
-	0x0e,
-	0x28,
-	0x10,
-	0x2c,
-	0x10,
-	0x30,
-	0x10,
-	0x34,
-	0x10,
-	0x38,
-	0x10,
-	0x28,
-	0x12,
-	0x3c,
-	0x0a,
-	0x40,
-	0x0a,
-	0x44,
-	0x0a,
-	0x48,
-	0x0a,
-	0x4c,
-	0x0a,
-	0x3c,
-	0x0c,
-	0x40,
-	0x0c,
-	0x44,
-	0x0c,
-	0x48,
-	0x0c,
-	0x4c,
-	0x0c,
-	0x3c,
-	0x0e,
-	0x40,
-	0x0e,
-	0x44,
-	0x0e,
-	0x48,
-	0x0e,
-	0x4c,
-	0x0e,
-	0x3c,
-	0x10,
-	0x40,
-	0x10,
-	0x44,
-	0x10,
-	0x48,
-	0x10,
-	0x4c,
-	0x10,
-	0x3c,
-	0x12,
-	0x00,
-	0x14,
-	0x04,
-	0x14,
-	0x08,
-	0x14,
-	0x0c,
-	0x14,
-	0x10,
-	0x14,
-	0x00,
-	0x16,
-	0x04,
-	0x16,
-	0x08,
-	0x16,
-	0x0c,
-	0x16,
-	0x10,
-	0x16,
-	0x00,
-	0x18,
-	0x04,
-	0x18,
-	0x08,
-	0x18,
-	0x0c,
-	0x18,
-	0x10,
-	0x18,
-	0x00,
-	0x1a,
-	0x04,
-	0x1a,
-	0x08,
-	0x1a,
-	0x0c,
-	0x1a,
-	0x10,
-	0x1a,
-	0x00,
-	0x1c,
-	0x14,
-	0x14,
-	0x18,
-	0x14,
-	0x1c,
-	0x14,
-	0x20,
-	0x14,
-	0x24,
-	0x14,
-	0x14,
-	0x16,
-	0x18,
-	0x16,
-	0x1c,
-	0x16,
-	0x20,
-	0x16,
-	0x24,
-	0x16,
-	0x14,
-	0x18,
-	0x18,
-	0x18,
-	0x1c,
-	0x18,
-	0x20,
-	0x18,
-	0x24,
-	0x18,
-	0x14,
-	0x1a,
-	0x18,
-	0x1a,
-	0x1c,
-	0x1a,
-	0x20,
-	0x1a,
-	0x24,
-	0x1a,
-	0x14,
-	0x1c,
-	0x28,
-	0x14,
-	0x2c,
-	0x14,
-	0x30,
-	0x14,
-	0x34,
-	0x14,
-	0x38,
-	0x14,
-	0x28,
-	0x16,
-	0x2c,
-	0x16,
-	0x30,
-	0x16,
-	0x34,
-	0x16,
-	0x38,
-	0x16,
-	0x28,
-	0x18,
-	0x2c,
-	0x18,
-	0x30,
-	0x18,
-	0x34,
-	0x18,
-	0x38,
-	0x18,
-	0x28,
-	0x1a,
-	0x2c,
-	0x1a,
-	0x30,
-	0x1a,
-	0x34,
-	0x1a,
-	0x38,
-	0x1a,
-	0x28,
-	0x1c,
-	0x3c,
-	0x14,
-	0x40,
-	0x14,
-	0x44,
-	0x14,
-	0x48,
-	0x14,
-	0x4c,
-	0x14,
-	0x3c,
-	0x16,
-	0x40,
-	0x16,
-	0x44,
-	0x16,
-	0x48,
-	0x16,
-	0x4c,
-	0x16,
-	0x3c,
-	0x18,
-	0x40,
-	0x18,
-	0x44,
-	0x18,
-	0x48,
-	0x18,
-	0x4c,
-	0x18,
-	0x3c,
-	0x1a,
-	0x40,
-	0x1a,
-	0x44,
-	0x1a,
-	0x48,
-	0x1a,
-	0x4c,
-	0x1a,
-	0x3c,
-	0x1c,
-	0x00,
-	0x1e,
-	0x04,
-	0x1e,
-	0x08,
-	0x1e,
-	0x0c,
-	0x1e,
-	0x10,
-	0x1e,
-	0x00,
-	0x20,
-	0x04,
-	0x20,
-	0x08,
-	0x20,
-	0x0c,
-	0x20,
-	0x10,
-	0x20,
-	0x00,
-	0x22,
-	0x04,
-	0x22,
-	0x08,
-	0x22,
-	0x0c,
-	0x22,
-	0x10,
-	0x22,
-	0x00,
-	0x24,
-	0x04,
-	0x24,
-	0x08,
-	0x24,
-	0x0c,
-	0x24,
-	0x10,
-	0x24,
-	0x00,
-	0x26,
-	0x14,
-	0x1e,
-	0x18,
-	0x1e,
-	0x1c,
-	0x1e,
-	0x20,
-	0x1e,
-	0x24,
-	0x1e,
-	0x14,
-	0x20,
-	0x18,
-	0x20,
-	0x1c,
-	0x20,
-	0x20,
-	0x20,
-	0x24,
-	0x20,
-	0x14,
-	0x22,
-	0x18,
-	0x22,
-	0x1c,
-	0x22,
-	0x20,
-	0x22,
-	0x24,
-	0x22,
-	0x14,
-	0x24,
-	0x18,
-	0x24,
-	0x1c,
-	0x24,
-	0x20,
-	0x24,
-	0x24,
-	0x24,
-	0x14,
-	0x26,
-	0x28,
-	0x1e,
-	0x2c,
-	0x1e,
-	0x30,
-	0x1e,
-	0x34,
-	0x1e,
-	0x38,
-	0x1e,
-	0x28,
-	0x20,
-	0x2c,
-	0x20,
-	0x30,
-	0x20,
-	0x34,
-	0x20,
-	0x38,
-	0x20,
-	0x28,
-	0x22,
-	0x2c,
-	0x22,
-	0x30,
-	0x22,
-	0x34,
-	0x22,
-	0x38,
-	0x22,
-	0x28,
-	0x24,
-	0x2c,
-	0x24,
-	0x30,
-	0x24,
-	0x34,
-	0x24,
-	0x38,
-	0x24,
-	0x28,
-	0x26,
-	0x3c,
-	0x1e,
-	0x40,
-	0x1e,
-	0x44,
-	0x1e,
-	0x48,
-	0x1e,
-	0x4c,
-	0x1e,
-	0x3c,
-	0x20,
-	0x40,
-	0x20,
-	0x44,
-	0x20,
-	0x48,
-	0x20,
-	0x4c,
-	0x20,
-	0x3c,
-	0x22,
-	0x40,
-	0x22,
-	0x44,
-	0x22,
-	0x48,
-	0x22,
-	0x4c,
-	0x22,
-	0x3c,
-	0x24,
-	0x40,
-	0x24,
-	0x44,
-	0x24,
-	0x48,
-	0x24,
-	0x4c,
-	0x24,
-	0x3c,
-	0x26,
-	0x00,
-	0x28,
-	0x04,
-	0x28,
-	0x08,
-	0x28,
-	0x0c,
-	0x28,
-	0x10,
-	0x28,
-	0x00,
-	0x2a,
-	0x04,
-	0x2a,
-	0x08,
-	0x2a,
-	0x0c,
-	0x2a,
-	0x10,
-	0x2a,
-	0x00,
-	0x2c,
-	0x04,
-	0x2c,
-	0x08,
-	0x2c,
-	0x0c,
-	0x2c,
-	0x10,
-	0x2c,
-	0x00,
-	0x2e,
-	0x04,
-	0x2e,
-	0x08,
-	0x2e,
-	0x0c,
-	0x2e,
-	0x10,
-	0x2e,
-	0x00,
-	0x30,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x0c,
-	0x1a,
-	0x26,
-	0x34,
-	0x40,
-	0x4c,
-	0x5a,
-	0x66,
-	0x74,
-	0x80,
-	0x8c,
-	0x9a,
-	0xa6,
-	0xb4,
-	0xc0,
-	0xcc,
-	0xda,
-	0xe6,
-	0xf4,
-	0x00,
-	0x10,
-	0x20,
-	0x30,
-	0x40,
-	0x50,
-	0x60,
-	0x70,
-	0x80,
-	0x90,
-	0xa0,
-	0xb0,
-	0xc0,
-	0xd0,
-	0xe0,
-	0xf0,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x55,
-	0x00,
-	0xcc,
-	0xaa,
-	0x24,
-	0x00,
-	0x1c,
-	0x66,
-	0xd1,
-	0x55,
-	0xec,
-	0x92,
-	0x44,
-	0x00,
-	0xc3,
-	0x8e,
-	0x5e,
-	0x33,
-	0x0c,
-	0xe8,
-	0xc8,
-	0xaa,
-	0x8f,
-	0x76,
-	0x5e,
-	0x49,
-	0x34,
-	0x22,
-	0x10,
-	0x00,
-	0xf0,
-	0xe1,
-	0xd4,
-	0xc7,
-	0xba,
-	0xaf,
-	0xa4,
-	0x99,
-	0x8f,
-	0x86,
-	0x7d,
-	0x74,
-	0x6c,
-	0x64,
-	0x5c,
-	0x55,
-	0x4e,
-	0x47,
-	0x41,
-	0x3b,
-	0x35,
-	0x2f,
-	0x29,
-	0x24,
-	0x1f,
-	0x1a,
-	0x15,
-	0x11,
-	0x0c,
-	0x08,
-	0x04,
-	0x00,
-	0xfc,
-	0xf8,
-	0xf4,
-	0xf0,
-	0xed,
-	0xea,
-	0xe6,
-	0xe3,
-	0xe0,
-	0xdd,
-	0xda,
-	0xd7,
-	0xd4,
-	0xd2,
-	0xcf,
-	0xcc,
-	0xca,
-	0xc7,
-	0xc5,
-	0xc3,
-	0xc0,
-	0xbe,
-	0xbc,
-	0xba,
-	0xb8,
-	0xb6,
-	0xb4,
-	0xb2,
-	0xb0,
-	0xae,
-	0xac,
-	0xaa,
-	0xa8,
-	0xa7,
-	0xa5,
-	0xa3,
-	0xa2,
-	0xa0,
-	0x9f,
-	0x9d,
-	0x9c,
-	0x9a,
-	0x99,
-	0x97,
-	0x96,
-	0x94,
-	0x93,
-	0x92,
-	0x90,
-	0x8f,
-	0x8e,
-	0x8d,
-	0x8c,
-	0x8a,
-	0x89,
-	0x88,
-	0x87,
-	0x86,
-	0x85,
-	0x84,
-	0x83,
-	0x82,
-	0x81,
-	0x80,
-	0x7f,
-	0x7e,
-	0x7d,
-	0x7c,
-	0x7b,
-	0x7a,
-	0x79,
-	0x78,
-	0x77,
-	0x76,
-	0x75,
-	0x75,
-	0x74,
-	0x73,
-	0x72,
-	0x71,
-	0x70,
-	0x70,
-	0x6f,
-	0x6e,
-	0x6d,
-	0x6d,
-	0x6c,
-	0x6b,
-	0x6b,
-	0x6a,
-	0x69,
-	0x69,
-	0x68,
-	0x67,
-	0x67,
-	0x66,
-	0x65,
-	0x65,
-	0x64,
-	0x63,
-	0x63,
-	0x62,
-	0x62,
-	0x61,
-	0x60,
-	0x60,
-	0x5f,
-	0x5f,
-	0x5e,
-	0x5e,
-	0x5d,
-	0x5d,
-	0x5c,
-	0x5c,
-	0x5b,
-	0x5b,
-	0x5a,
-	0x5a,
-	0x59,
-	0x59,
-	0x58,
-	0x58,
-	0x57,
-	0x57,
-	0x56,
-	0x56,
-	0x55,
-	0x55,
-	0x54,
-	0x54,
-	0x54,
-	0x53,
-	0x53,
-	0x52,
-	0x52,
-	0x51,
-	0x51,
-	0x51,
-	0x50,
-	0x50,
-	0x4f,
-	0x4f,
-	0x4f,
-	0x4e,
-	0x4e,
-	0x4e,
-	0x4d,
-	0x4d,
-	0x4c,
-	0x4c,
-	0x4c,
-	0x4b,
-	0x4b,
-	0x4b,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x49,
-	0x49,
-	0x49,
-	0x48,
-	0x48,
-	0x48,
-	0x47,
-	0x47,
-	0x47,
-	0x46,
-	0x46,
-	0x46,
-	0x46,
-	0x45,
-	0x45,
-	0x45,
-	0x44,
-	0x44,
-	0x44,
-	0x43,
-	0x43,
-	0x43,
-	0x43,
-	0x42,
-	0x42,
-	0x42,
-	0x42,
-	0x41,
-	0x41,
-	0x41,
-	0x41,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x40,
-	0x20,
-	0x15,
-	0x10,
-	0x0c,
-	0x0a,
-	0x09,
-	0x08,
-	0x07,
-	0x06,
-	0x05,
-	0x05,
-	0x04,
-	0x04,
-	0x04,
-	0x04,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x03,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x02,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xfe,
-	0xfc,
-	0xfa,
-	0xf8,
-	0xf6,
-	0xf4,
-	0xf2,
-	0xf0,
-	0xef,
-	0xed,
-	0xeb,
-	0xe9,
-	0xe8,
-	0xe6,
-	0xe4,
-	0xe3,
-	0xe1,
-	0xe0,
-	0xde,
-	0xdd,
-	0xdb,
-	0xda,
-	0xd8,
-	0xd7,
-	0xd5,
-	0xd4,
-	0xd3,
-	0xd1,
-	0xd0,
-	0xcf,
-	0xcd,
-	0xcc,
-	0xcb,
-	0xc9,
-	0xc8,
-	0xc7,
-	0xc6,
-	0xc5,
-	0xc3,
-	0xc2,
-	0xc1,
-	0xc0,
-	0xbf,
-	0xbe,
-	0xbd,
-	0xbb,
-	0xba,
-	0xb9,
-	0xb8,
-	0xb7,
-	0xb6,
-	0xb5,
-	0xb4,
-	0xb3,
-	0xb2,
-	0xb1,
-	0xb0,
-	0xaf,
-	0xae,
-	0xad,
-	0xac,
-	0xac,
-	0xab,
-	0xaa,
-	0xa9,
-	0xa8,
-	0xa7,
-	0xa6,
-	0xa5,
-	0xa5,
-	0xa4,
-	0xa3,
-	0xa2,
-	0xa1,
-	0xa0,
-	0xa0,
-	0x9f,
-	0x9e,
-	0x9d,
-	0x9d,
-	0x9c,
-	0x9b,
-	0x9a,
-	0x9a,
-	0x99,
-	0x98,
-	0x97,
-	0x97,
-	0x96,
-	0x95,
-	0x95,
-	0x94,
-	0x93,
-	0x93,
-	0x92,
-	0x91,
-	0x91,
-	0x90,
-	0x8f,
-	0x8f,
-	0x8e,
-	0x8d,
-	0x8d,
-	0x8c,
-	0x8c,
-	0x8b,
-	0x8a,
-	0x8a,
-	0x89,
-	0x89,
-	0x88,
-	0x88,
-	0x87,
-	0x86,
-	0x86,
-	0x85,
-	0x85,
-	0x84,
-	0x84,
-	0x83,
-	0x83,
-	0x82,
-	0x82,
-	0x81,
-	0x81,
-	0x80,
-	0x80,
-	0x7f,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x80,
-	0x00,
-	0x00,
-	0x00,
-	0x00,
-	0xae,
-	0x00,
-	0x93,
-	0xae,
-	0x75,
-	0x00,
-	0x5c,
-	0x93,
-	0xad,
-	0xae,
-	0x9b,
-	0x75,
-	0x41,
-	0x00,
-	0xb3,
-	0x5c,
-	0xfc,
-	0x93,
-	0x23,
-	0xad,
-	0x30,
-	0xae,
-	0x27,
-	0x9b,
-	0x0a,
-	0x75,
-	0xdd,
-	0x41,
-	0xa2,
-	0x00,
-	0x5b,
-	0xb3,
-	0x09,
-	0x5c,
-	0xad,
-	0xfc,
-	0x49,
-	0x93,
-	0xdc,
-	0x23,
-	0x69,
-	0xad,
-	0xef,
-	0x30,
-	0x70,
-	0xae,
-	0xeb,
-	0x27,
-	0x61,
-	0x9b,
-	0xd3,
-	0x0a,
-	0x40,
-	0x75,
-	0xaa,
-	0xdd,
-	0x10,
-	0x41,
-	0x72,
-	0xa2,
-	0xd1,
-	0x00,
-	0x2e,
-	0x5b,
-	0x87,
-	0xb3,
-	0xde,
-	0x09,
-	0x33,
-	0x5c,
-	0x85,
-	0xad,
-	0xd5,
-	0xfc,
-	0x22,
-	0x49,
-	0x6e,
-	0x93,
-	0xb8,
-	0xdc,
-	0x00,
-	0x23,
-	0x46,
-	0x69,
-	0x8b,
-	0xad,
-	0xce,
-	0xef,
-	0x10,
-	0x30,
-	0x50,
-	0x70,
-	0x8f,
-	0xae,
-	0xcd,
-	0xeb,
-	0x09,
-	0x27,
-	0x44,
-	0x61,
-	0x7e,
-	0x9b,
-	0xb7,
-	0xd3,
-	0xef,
-	0x0a,
-	0x25,
-	0x40,
-	0x5b,
-	0x75,
-	0x90,
-	0xaa,
-	0xc4,
-	0xdd,
-	0xf7,
-	0x10,
-	0x29,
-	0x41,
-	0x5a,
-	0x72,
-	0x8a,
-	0xa2,
-	0xba,
-	0xd1,
-	0xe9,
-	0x00,
-	0x17,
-	0x2e,
-	0x44,
-	0x5b,
-	0x71,
-	0x87,
-	0x9d,
-	0xb3,
-	0xc9,
-	0xde,
-	0xf4,
-	0x09,
-	0x1e,
-	0x33,
-	0x47,
-	0x5c,
-	0x70,
-	0x85,
-	0x99,
-	0xad,
-	0xc1,
-	0xd5,
-	0xe8,
-	0xfc,
-	0x0f,
-	0x22,
-	0x36,
-	0x49,
-	0x5b,
-	0x6e,
-	0x81,
-	0x93,
-	0xa6,
-	0xb8,
-	0xca,
-	0xdc,
-	0xee,
-	0x00,
-	0x12,
-	0x23,
-	0x35,
-	0x46,
-	0x58,
-	0x69,
-	0x7a,
-	0x8b,
-	0x9c,
-	0xad,
-	0xbe,
-	0xce,
-	0xdf,
-	0xef,
-	0x00,
-	0x10,
-	0x20,
-	0x30,
-	0x40,
-	0x50,
-	0x60,
-	0x70,
-	0x7f,
-	0x8f,
-	0x9f,
-	0xae,
-	0xbd,
-	0xcd,
-	0xdc,
-	0xeb,
-	0xfa,
-	0x09,
-	0x18,
-	0x27,
-	0x35,
-	0x44,
-	0x53,
-	0x61,
-	0x70,
-	0x7e,
-	0x8c,
-	0x9b,
-	0xa9,
-	0xb7,
-	0xc5,
-	0xd3,
-	0xe1,
-	0xef,
-	0xfc,
-	0x0a,
-	0x18,
-	0x25,
-	0x33,
-	0x40,
-	0x4e,
-	0x5b,
-	0x68,
-	0x75,
-	0x83,
-	0x90,
-	0x9d,
-	0xaa,
-	0xb7,
-	0xc4,
-	0xd0,
-	0xdd,
-	0xea,
-	0xf7,
-	0x03,
-	0x10,
-	0x1c,
-	0x29,
-	0x35,
-	0x41,
-	0x4e,
-	0x5a,
-	0x66,
-	0x72,
-	0x7e,
-	0x8a,
-	0x96,
-	0xa2,
-	0xae,
-	0xba,
-	0xc6,
-	0xd1,
-	0xdd,
-	0xe9,
-	0xf4,
-	0x00,
-	0x00,
-	0x08,
-	0x0c,
-	0x10,
-	0x12,
-	0x14,
-	0x16,
-	0x18,
-	0x19,
-	0x1a,
-	0x1b,
-	0x1c,
-	0x1d,
-	0x1e,
-	0x1f,
-	0x20,
-	0x20,
-	0x21,
-	0x21,
-	0x22,
-	0x23,
-	0x23,
-	0x24,
-	0x24,
-	0x25,
-	0x25,
-	0x26,
-	0x26,
-	0x26,
-	0x27,
-	0x27,
-	0x28,
-	0x28,
-	0x28,
-	0x29,
-	0x29,
-	0x29,
-	0x29,
-	0x2a,
-	0x2a,
-	0x2a,
-	0x2b,
-	0x2b,
-	0x2b,
-	0x2b,
-	0x2c,
-	0x2c,
-	0x2c,
-	0x2c,
-	0x2d,
-	0x2d,
-	0x2d,
-	0x2d,
-	0x2e,
-	0x2e,
-	0x2e,
-	0x2e,
-	0x2e,
-	0x2f,
-	0x2f,
-	0x2f,
-	0x2f,
-	0x2f,
-	0x30,
-	0x30,
-	0x30,
-	0x30,
-	0x30,
-	0x30,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x31,
-	0x32,
-	0x32,
-	0x32,
-	0x32,
-	0x32,
-	0x32,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x33,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x34,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x35,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x36,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x37,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x38,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x39,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3a,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3b,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3c,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3d,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3e,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0xe3,
-	0x7e,
-	0x5b,
-	0x7f,
-	0xd3,
-	0x7f,
-	0x4b,
-	0x80,
-	0x73,
-	0x80,
-	0x9b,
-	0x80,
-
-};
-
-uint8_t dopcode_u_1_7[] =
-{
-	0x78,
-	0xb8,
-	0x18,
-	0x64,
-	0x10,
-	0x64,
-	0x11,
-	0x64,
-	0x13,
-	0xa9,
-	0x01,
-	0x85,
-	0x12,
-	0xa0,
-	0x52,
-	0x13,
-	0x10,
-	0x00,
-	0x00,
-	0x02,
-	0xa9,
-	0x11,
-	0x8d,
-	0xa4,
-	0x02,
-	0xa9,
-	0x80,
-	0x8d,
-	0x4a,
-	0x02,
-	0x8d,
-	0x4b,
-	0x02,
-	0x8d,
-	0x4c,
-	0x02,
-	0x8d,
-	0x4d,
-	0x02,
-	0x8d,
-	0x4e,
-	0x02,
-	0x8d,
-	0x4f,
-	0x02,
-	0x8d,
-	0x50,
-	0x02,
-	0xa9,
-	0x00,
-	0x8d,
-	0x00,
-	0x02,
-	0xa9,
-	0x02,
-	0x8d,
-	0x01,
-	0x02,
-	0xa9,
-	0xed,
-	0x8d,
-	0x02,
-	0x02,
-	0xa9,
-	0xb4,
-	0x8d,
-	0x03,
-	0x02,
-	0xa9,
-	0xff,
-	0x8d,
-	0xa2,
-	0x02,
-	0x8d,
-	0xa3,
-	0x02,
-	0xa0,
-	0x03,
-	0x53,
-	0xcc,
-	0x3b,
-	0x04,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x07,
-	0x02,
-	0xcd,
-	0xce,
-	0x3b,
-	0xf0,
-	0x04,
-	0xa2,
-	0x02,
-	0x80,
-	0x10,
-	0xa2,
-	0x01,
-	0xad,
-	0x00,
-	0x60,
-	0xc9,
-	0xed,
-	0xd0,
-	0x07,
-	0xad,
-	0x01,
-	0x60,
-	0xc9,
-	0xb4,
-	0xf0,
-	0x0e,
-	0x8e,
-	0x08,
-	0x02,
-	0xa9,
-	0x01,
-	0x9c,
-	0x14,
-	0x68,
-	0x8d,
-	0x14,
-	0x68,
-	0x5c,
-	0x80,
-	0xfd,
-	0x9c,
-	0x14,
-	0x68,
-	0x9c,
-	0x18,
-	0x68,
-	0x9c,
-	0x20,
-	0x68,
-	0x9c,
-	0x24,
-	0x68,
-	0x9c,
-	0x28,
-	0x68,
-	0xa2,
-	0xff,
-	0x9a,
-	0xa9,
-	0xd7,
-	0x85,
-	0x0e,
-	0xa9,
-	0x22,
-	0x85,
-	0x0f,
-	0xa9,
-	0x88,
-	0x85,
-	0x02,
-	0xa9,
-	0x22,
-	0x85,
-	0x03,
-	0xa9,
-	0xf1,
-	0x85,
-	0x04,
-	0xa9,
-	0x24,
-	0x85,
-	0x05,
-	0xa9,
-	0xe8,
-	0x85,
-	0x06,
-	0xa9,
-	0x22,
-	0x85,
-	0x07,
-	0xa9,
-	0x5b,
-	0x85,
-	0x08,
-	0xa9,
-	0x23,
-	0x85,
-	0x09,
-	0xa0,
-	0x0e,
-	0x13,
-	0x10,
-	0x00,
-	0xa5,
-	0x02,
-	0x9c,
-	0xbb,
-	0x02,
-	0x9c,
-	0xbc,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0xb3,
-	0x02,
-	0xa9,
-	0x02,
-	0x8d,
-	0xb4,
-	0x02,
-	0x8d,
-	0xb5,
-	0x02,
-	0xa0,
-	0x02,
-	0x53,
-	0xa2,
-	0x3c,
-	0xb6,
-	0x02,
-	0x53,
-	0xa4,
-	0x3c,
-	0xb8,
-	0x02,
-	0x13,
-	0x10,
-	0x00,
-	0x58,
-	0x2c,
-	0x13,
-	0x10,
-	0x00,
-	0xbb,
-	0x2c,
-	0x13,
-	0x10,
-	0x00,
-	0x71,
-	0x00,
-	0xa0,
-	0x02,
-	0x13,
-	0x10,
-	0x00,
-	0xac,
-	0x2c,
-	0x13,
-	0x10,
-	0x00,
-	0x0f,
-	0x2d,
-	0x13,
-	0x10,
-	0x00,
-	0xc5,
-	0x00,
-	0x9c,
-	0xba,
-	0x02,
-	0xa9,
-	0x03,
-	0x8d,
-	0xae,
-	0x2c,
-	0x8d,
-	0x11,
-	0x2d,
-	0x64,
-	0xc7,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0x60,
-	0x9c,
-	0xe9,
-	0x27,
-	0x58,
-	0x8d,
-	0x14,
-	0x68,
-	0x4c,
-	0x7c,
-	0x03,
-	0xf0,
-	0x30,
-	0xad,
-	0xb4,
-	0x2b,
-	0xaa,
-	0x29,
-	0x03,
-	0x85,
-	0x7b,
-	0xd0,
-	0x0a,
-	0xa9,
-	0x01,
-	0x85,
-	0x75,
-	0x85,
-	0x76,
-	0x85,
-	0x77,
-	0x80,
-	0x16,
-	0x8a,
-	0x4a,
-	0x4a,
-	0xaa,
-	0x29,
-	0x01,
-	0x85,
-	0x75,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x29,
-	0x01,
-	0x85,
-	0x76,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x29,
-	0x01,
-	0x85,
-	0x77,
-	0x20,
-	0xd6,
-	0x0c,
-	0xf0,
-	0x01,
-	0x60,
-	0xad,
-	0xfb,
-	0x2b,
-	0xd0,
-	0x02,
-	0xa9,
-	0x11,
-	0x85,
-	0xc6,
-	0xcd,
-	0xbb,
-	0x02,
-	0xf0,
-	0x12,
-	0x29,
-	0xf0,
-	0xf0,
-	0x08,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x85,
-	0xc5,
-	0x80,
-	0x0e,
-	0xa9,
-	0x10,
-	0x85,
-	0xc5,
-	0x80,
-	0x08,
-	0xad,
-	0xbc,
-	0x02,
-	0x85,
-	0xc5,
-	0x20,
-	0x3f,
-	0x18,
-	0xad,
-	0xfa,
-	0x2b,
-	0x85,
-	0x81,
-	0xa0,
-	0x02,
-	0x53,
-	0xc7,
-	0x2b,
-	0xcf,
-	0x00,
-	0x53,
-	0xcd,
-	0x2b,
-	0xdb,
-	0x00,
-	0x20,
-	0x0c,
-	0x12,
-	0xf0,
-	0x01,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2d,
-	0x00,
-	0x6d,
-	0x00,
-	0xa5,
-	0x6e,
-	0xcd,
-	0xf6,
-	0x3f,
-	0x90,
-	0x09,
-	0xd0,
-	0x0f,
-	0xa5,
-	0x6d,
-	0xcd,
-	0xf5,
-	0x3f,
-	0xb0,
-	0x08,
-	0xad,
-	0xf4,
-	0x2b,
-	0xae,
-	0xf7,
-	0x2b,
-	0x80,
-	0x1e,
-	0xa5,
-	0x6e,
-	0xcd,
-	0xf8,
-	0x3f,
-	0x90,
-	0x09,
-	0xd0,
-	0x0f,
-	0xa5,
-	0x6d,
-	0xcd,
-	0xf7,
-	0x3f,
-	0xb0,
-	0x08,
-	0xad,
-	0xf5,
-	0x2b,
-	0xae,
-	0xf8,
-	0x2b,
-	0x80,
-	0x06,
-	0xad,
-	0xf6,
-	0x2b,
-	0xae,
-	0xf9,
-	0x2b,
-	0x85,
-	0x84,
-	0x86,
-	0x86,
-	0xad,
-	0xf3,
-	0x2b,
-	0x85,
-	0x85,
-	0xa5,
-	0x7c,
-	0xd0,
-	0x4e,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x02,
-	0xd0,
-	0x48,
-	0xad,
-	0xb1,
-	0x02,
-	0xc5,
-	0x85,
-	0x90,
-	0x11,
-	0x38,
-	0xe5,
-	0x85,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0x85,
-	0x80,
-	0x16,
-	0xa5,
-	0x85,
-	0x38,
-	0xed,
-	0xb1,
-	0x02,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x38,
-	0xa5,
-	0x85,
-	0xe5,
-	0xcb,
-	0x85,
-	0x85,
-	0xad,
-	0xb0,
-	0x02,
-	0xc5,
-	0x84,
-	0x90,
-	0x13,
-	0x38,
-	0xe5,
-	0x84,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0x84,
-	0x80,
-	0x18,
-	0x80,
-	0x48,
-	0xa5,
-	0x84,
-	0x38,
-	0xed,
-	0xb0,
-	0x02,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x38,
-	0xa5,
-	0x84,
-	0xe5,
-	0xcb,
-	0x85,
-	0x84,
-	0xad,
-	0xb2,
-	0x02,
-	0xc5,
-	0x86,
-	0x90,
-	0x11,
-	0x38,
-	0xe5,
-	0x86,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0x86,
-	0x80,
-	0x16,
-	0xa5,
-	0x86,
-	0x38,
-	0xed,
-	0xb2,
-	0x02,
-	0x4d,
-	0x0f,
-	0x3c,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x38,
-	0xa5,
-	0x86,
-	0xe5,
-	0xcb,
-	0x85,
-	0x86,
-	0xa0,
-	0x02,
-	0xad,
-	0x0b,
-	0x3c,
-	0xd0,
-	0x07,
-	0x53,
-	0xc7,
-	0x2b,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xcb,
-	0x2b,
-	0xcf,
-	0x00,
-	0x53,
-	0xd1,
-	0x2b,
-	0xdb,
-	0x00,
-	0x20,
-	0x0c,
-	0x12,
-	0xf0,
-	0x01,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0x2d,
-	0x00,
-	0x2b,
-	0x00,
-	0x18,
-	0xad,
-	0xd7,
-	0x2b,
-	0x69,
-	0x02,
-	0xb0,
-	0x10,
-	0x4a,
-	0x4a,
-	0xc9,
-	0x08,
-	0x90,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x06,
-	0x80,
-	0x06,
-	0xa9,
-	0x08,
-	0x80,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x88,
-	0x18,
-	0xad,
-	0xd8,
-	0x2b,
-	0x69,
-	0x02,
-	0xb0,
-	0x10,
-	0x4a,
-	0x4a,
-	0xc9,
-	0x08,
-	0x90,
-	0x06,
-	0xc9,
-	0x40,
-	0xb0,
-	0x06,
-	0x80,
-	0x06,
-	0xa9,
-	0x08,
-	0x80,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x89,
-	0xa4,
-	0x88,
-	0xb9,
-	0x93,
-	0x27,
-	0x85,
-	0x8a,
-	0x45,
-	0x89,
-	0x20,
-	0x6e,
-	0x21,
-	0x85,
-	0x30,
-	0xa4,
-	0x89,
-	0xb9,
-	0x93,
-	0x27,
-	0x85,
-	0x8b,
-	0x45,
-	0x88,
-	0x20,
-	0x6e,
-	0x21,
-	0x85,
-	0x2f,
-	0xa0,
-	0x02,
-	0xad,
-	0xda,
-	0x2b,
-	0xd0,
-	0x0c,
-	0xad,
-	0xd9,
-	0x2b,
-	0xd0,
-	0x07,
-	0x53,
-	0xb6,
-	0x02,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xd9,
-	0x2b,
-	0xcf,
-	0x00,
-	0x20,
-	0x7f,
-	0x0c,
-	0x85,
-	0x82,
-	0xa0,
-	0x02,
-	0xad,
-	0xdc,
-	0x2b,
-	0xd0,
-	0x0c,
-	0xad,
-	0xdb,
-	0x2b,
-	0xd0,
-	0x07,
-	0x53,
-	0xb8,
-	0x02,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xdb,
-	0x2b,
-	0xcf,
-	0x00,
-	0x20,
-	0x7f,
-	0x0c,
-	0x85,
-	0x83,
-	0xa5,
-	0x76,
-	0xf0,
-	0x04,
-	0x64,
-	0x8e,
-	0x80,
-	0x10,
-	0xa5,
-	0x83,
-	0xc9,
-	0x02,
-	0xb0,
-	0x05,
-	0xad,
-	0xa6,
-	0x3c,
-	0x80,
-	0x03,
-	0xad,
-	0xa7,
-	0x3c,
-	0x85,
-	0x8e,
-	0xad,
-	0xa9,
-	0x3c,
-	0x49,
-	0x10,
-	0x84,
-	0xd0,
-	0x85,
-	0xcf,
-	0xa5,
-	0x89,
-	0x85,
-	0xd1,
-	0x64,
-	0xd2,
-	0x20,
-	0x16,
-	0x27,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x8f,
-	0xad,
-	0xa8,
-	0x3c,
-	0x45,
-	0x88,
-	0x84,
-	0xd0,
-	0x85,
-	0xcf,
-	0xa5,
-	0x89,
-	0x85,
-	0xd1,
-	0x64,
-	0xd2,
-	0x20,
-	0x16,
-	0x27,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x85,
-	0x90,
-	0xa9,
-	0x00,
-	0xa6,
-	0x82,
-	0xe0,
-	0x02,
-	0xb0,
-	0x08,
-	0xa9,
-	0x01,
-	0xe4,
-	0x83,
-	0xf0,
-	0x02,
-	0xa9,
-	0x02,
-	0x85,
-	0x91,
-	0xa0,
-	0x00,
-	0xa5,
-	0x6e,
-	0xd9,
-	0xb9,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0xb8,
-	0x3c,
-	0x90,
-	0x08,
-	0xc8,
-	0xc8,
-	0xc0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe8,
-	0x98,
-	0x4a,
-	0x49,
-	0x03,
-	0xa8,
-	0xb9,
-	0xbe,
-	0x3c,
-	0x85,
-	0x92,
-	0xb9,
-	0xbf,
-	0x3c,
-	0x85,
-	0x93,
-	0xb9,
-	0xc0,
-	0x3c,
-	0x85,
-	0x94,
-	0xa5,
-	0x82,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xf7,
-	0x3c,
-	0x85,
-	0x95,
-	0x29,
-	0x01,
-	0xf0,
-	0x1e,
-	0xa0,
-	0x02,
-	0xad,
-	0x0b,
-	0x3c,
-	0xd0,
-	0x07,
-	0x53,
-	0xc7,
-	0x2b,
-	0xcf,
-	0x00,
-	0x80,
-	0x05,
-	0x53,
-	0xc9,
-	0x2b,
-	0xcf,
-	0x00,
-	0x53,
-	0xcf,
-	0x2b,
-	0xdb,
-	0x00,
-	0x20,
-	0x0c,
-	0x12,
-	0xf0,
-	0x01,
-	0x60,
-	0xa5,
-	0x2d,
-	0x49,
-	0x10,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0x2e,
-	0x49,
-	0x10,
-	0x05,
-	0xd4,
-	0x85,
-	0xd4,
-	0x84,
-	0xd5,
-	0x64,
-	0xd6,
-	0xa0,
-	0x02,
-	0x53,
-	0x6d,
-	0x00,
-	0xcf,
-	0x00,
-	0x20,
-	0x81,
-	0x21,
-	0xa5,
-	0xd5,
-	0xd0,
-	0x0e,
-	0xa5,
-	0xd4,
-	0xd0,
-	0x0a,
-	0xa4,
-	0xd3,
-	0xc0,
-	0x08,
-	0x90,
-	0x08,
-	0xc0,
-	0x3f,
-	0x90,
-	0x06,
-	0xa0,
-	0x3f,
-	0x80,
-	0x02,
-	0xa0,
-	0x08,
-	0xb9,
-	0x93,
-	0x27,
-	0x85,
-	0x96,
-	0xa5,
-	0x83,
-	0xc9,
-	0x02,
-	0x90,
-	0x05,
-	0x20,
-	0xf8,
-	0x12,
-	0x80,
-	0x19,
-	0xad,
-	0xf6,
-	0x3c,
-	0x85,
-	0x99,
-	0xad,
-	0xf5,
-	0x3c,
-	0x45,
-	0x88,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x97,
-	0xad,
-	0xf4,
-	0x3c,
-	0x45,
-	0x89,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x98,
-	0x20,
-	0xd1,
-	0x13,
-	0x20,
-	0x17,
-	0x14,
-	0xa5,
-	0x86,
-	0xaa,
-	0x20,
-	0x6e,
-	0x14,
-	0x85,
-	0xcc,
-	0x8a,
-	0x20,
-	0x88,
-	0x14,
-	0x85,
-	0xcd,
-	0xa5,
-	0x32,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9a,
-	0xa5,
-	0x33,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9b,
-	0xa5,
-	0x36,
-	0x0a,
-	0x45,
-	0xcd,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0xa8,
-	0xb9,
-	0x53,
-	0x27,
-	0xaa,
-	0x29,
-	0x0f,
-	0x85,
-	0xa1,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x85,
-	0xa0,
-	0xa5,
-	0x31,
-	0x85,
-	0xa2,
-	0xa5,
-	0x77,
-	0xf0,
-	0x08,
-	0x64,
-	0x9c,
-	0x64,
-	0x9d,
-	0xa9,
-	0x3f,
-	0x80,
-	0x5f,
-	0xa5,
-	0x34,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x0a,
-	0x45,
-	0x84,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9c,
-	0xa5,
-	0x35,
-	0x0a,
-	0x45,
-	0xcc,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x0a,
-	0x45,
-	0x84,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x85,
-	0x9d,
-	0xa5,
-	0x84,
-	0x20,
-	0x9b,
-	0x14,
-	0x85,
-	0xce,
-	0xa5,
-	0x36,
-	0x0a,
-	0x45,
-	0xcd,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x0a,
-	0x45,
-	0xce,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0xa8,
-	0xb9,
-	0x53,
-	0x27,
-	0xaa,
-	0x29,
-	0x0f,
-	0x85,
-	0x9f,
-	0x8a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x85,
-	0x9e,
-	0xa5,
-	0x78,
-	0xc9,
-	0x02,
-	0xb0,
-	0x04,
-	0xa2,
-	0x00,
-	0x80,
-	0x02,
-	0xa2,
-	0x36,
-	0x86,
-	0xcb,
-	0xbd,
-	0x88,
-	0x3f,
-	0x85,
-	0xa4,
-	0xa2,
-	0x00,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0x8a,
-	0x3f,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0x89,
-	0x3f,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x08,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0x8a,
-	0x4a,
-	0x49,
-	0x09,
-	0x18,
-	0x65,
-	0xcb,
-	0xaa,
-	0xbd,
-	0x91,
-	0x3f,
-	0x85,
-	0xa5,
-	0xbd,
-	0x92,
-	0x3f,
-	0x85,
-	0xa6,
-	0xbd,
-	0x93,
-	0x3f,
-	0x85,
-	0xa7,
-	0xbd,
-	0x94,
-	0x3f,
-	0x85,
-	0xa8,
-	0xbd,
-	0x98,
-	0x3f,
-	0x85,
-	0xac,
-	0xbd,
-	0x99,
-	0x3f,
-	0x85,
-	0xad,
-	0xbd,
-	0x95,
-	0x3f,
-	0x85,
-	0xa9,
-	0xbd,
-	0x96,
-	0x3f,
-	0x85,
-	0xaa,
-	0xbd,
-	0x97,
-	0x3f,
-	0x85,
-	0xab,
-	0xa5,
-	0x77,
-	0xf0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x72,
-	0xa5,
-	0x84,
-	0x30,
-	0x0f,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x85,
-	0xcb,
-	0xa9,
-	0x20,
-	0x85,
-	0xcc,
-	0x80,
-	0x06,
-	0x29,
-	0x7f,
-	0x85,
-	0xcb,
-	0x64,
-	0xcc,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xa9,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xa9,
-	0x85,
-	0xa9,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xaa,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xaa,
-	0x85,
-	0xaa,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xab,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xab,
-	0x85,
-	0xab,
-	0xa9,
-	0x01,
-	0x85,
-	0xa3,
-	0xa5,
-	0x88,
-	0x85,
-	0xcb,
-	0x4a,
-	0x85,
-	0xcf,
-	0xa9,
-	0x08,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xb3,
-	0xa5,
-	0x89,
-	0x85,
-	0xcb,
-	0x4a,
-	0x85,
-	0xcf,
-	0xa9,
-	0x08,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xb2,
-	0xa5,
-	0x88,
-	0x85,
-	0xcb,
-	0x4a,
-	0x18,
-	0x69,
-	0xf0,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xc9,
-	0x03,
-	0x90,
-	0x10,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0xdf,
-	0x90,
-	0x08,
-	0xa9,
-	0xdf,
-	0x85,
-	0xcf,
-	0xa9,
-	0x03,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x20,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x46,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x6a,
-	0x85,
-	0xb0,
-	0xa5,
-	0x89,
-	0x85,
-	0xcb,
-	0x4a,
-	0x18,
-	0x69,
-	0xf0,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xc9,
-	0x03,
-	0x90,
-	0x10,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc9,
-	0xdf,
-	0x90,
-	0x08,
-	0xa9,
-	0xdf,
-	0x85,
-	0xcf,
-	0xa9,
-	0x03,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x20,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x46,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x6a,
-	0x85,
-	0xae,
-	0x64,
-	0xb1,
-	0x64,
-	0xcb,
-	0xa5,
-	0x88,
-	0xc9,
-	0x10,
-	0xb0,
-	0x06,
-	0x85,
-	0xcb,
-	0xa9,
-	0x01,
-	0x85,
-	0xb1,
-	0xa5,
-	0x89,
-	0xc9,
-	0x10,
-	0xb0,
-	0x10,
-	0xa5,
-	0xb1,
-	0x09,
-	0x02,
-	0x85,
-	0xb1,
-	0xa5,
-	0x89,
-	0xc5,
-	0xcb,
-	0x90,
-	0x08,
-	0x85,
-	0xcb,
-	0x80,
-	0x04,
-	0xa5,
-	0xb1,
-	0xf0,
-	0x45,
-	0xa5,
-	0xcb,
-	0x49,
-	0xdf,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0xa5,
-	0xcb,
-	0x49,
-	0x03,
-	0x18,
-	0x65,
-	0xd0,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x08,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x49,
-	0x10,
-	0x84,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x49,
-	0x10,
-	0x18,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x20,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x46,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x6a,
-	0x85,
-	0xaf,
-	0x80,
-	0x02,
-	0x64,
-	0xaf,
-	0xa5,
-	0x82,
-	0x49,
-	0x03,
-	0xaa,
-	0xbd,
-	0x58,
-	0x3f,
-	0x85,
-	0xb6,
-	0xbd,
-	0x59,
-	0x3f,
-	0x85,
-	0xb5,
-	0xbd,
-	0x5a,
-	0x3f,
-	0x85,
-	0xb4,
-	0xa5,
-	0x83,
-	0x49,
-	0x03,
-	0xa8,
-	0xb9,
-	0x64,
-	0x3f,
-	0x85,
-	0xb9,
-	0xb9,
-	0x65,
-	0x3f,
-	0x85,
-	0xb8,
-	0xb9,
-	0x66,
-	0x3f,
-	0x85,
-	0xb7,
-	0xa5,
-	0x77,
-	0xf0,
-	0x06,
-	0x64,
-	0xba,
-	0x64,
-	0xbb,
-	0x80,
-	0x5a,
-	0x20,
-	0xe6,
-	0x14,
-	0xa5,
-	0x84,
-	0x30,
-	0x0f,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x85,
-	0xcb,
-	0x64,
-	0xcc,
-	0x64,
-	0xcd,
-	0x80,
-	0x0a,
-	0x29,
-	0x7f,
-	0x85,
-	0xcb,
-	0x64,
-	0xcc,
-	0xa9,
-	0x39,
-	0x85,
-	0xcd,
-	0x38,
-	0xa5,
-	0xcc,
-	0xe5,
-	0xba,
-	0x85,
-	0xcc,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcc,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xba,
-	0x85,
-	0xba,
-	0x38,
-	0xa5,
-	0xcd,
-	0xe5,
-	0xbb,
-	0x85,
-	0xcd,
-	0x3c,
-	0x45,
-	0xcb,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x10,
-	0x05,
-	0x98,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0x8a,
-	0x0a,
-	0x98,
-	0x2a,
-	0x18,
-	0x65,
-	0xbb,
-	0x85,
-	0xbb,
-	0xa5,
-	0x75,
-	0xf0,
-	0x0c,
-	0xa0,
-	0x92,
-	0x9c,
-	0x18,
-	0x29,
-	0x13,
-	0x18,
-	0x29,
-	0x19,
-	0x29,
-	0x80,
-	0x3d,
-	0xa5,
-	0x79,
-	0xc9,
-	0x02,
-	0xb0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0xf0,
-	0x85,
-	0xd9,
-	0xad,
-	0x77,
-	0x3d,
-	0x1a,
-	0x49,
-	0x15,
-	0x85,
-	0xcd,
-	0xa5,
-	0x83,
-	0x20,
-	0xb1,
-	0x15,
-	0xa9,
-	0x18,
-	0x85,
-	0xd1,
-	0xa9,
-	0x29,
-	0x85,
-	0xd2,
-	0xa9,
-	0x00,
-	0x20,
-	0xe9,
-	0x15,
-	0xa5,
-	0x82,
-	0x20,
-	0xcc,
-	0x15,
-	0xa9,
-	0x24,
-	0x85,
-	0xd1,
-	0xa9,
-	0x29,
-	0x85,
-	0xd2,
-	0xa9,
-	0x01,
-	0x20,
-	0xe9,
-	0x15,
-	0x20,
-	0xc9,
-	0x16,
-	0xad,
-	0x53,
-	0x3c,
-	0x85,
-	0xbf,
-	0x85,
-	0xcd,
-	0xa5,
-	0xc5,
-	0x29,
-	0xf0,
-	0xf0,
-	0x08,
-	0x64,
-	0xbe,
-	0x64,
-	0xc0,
-	0xa5,
-	0xc6,
-	0x80,
-	0x12,
-	0xa5,
-	0xcd,
-	0xa6,
-	0x88,
-	0x20,
-	0xee,
-	0x16,
-	0x85,
-	0xbe,
-	0xa5,
-	0xcd,
-	0xa6,
-	0x89,
-	0x20,
-	0xee,
-	0x16,
-	0x85,
-	0xc0,
-	0x20,
-	0x22,
-	0x17,
-	0xa4,
-	0x79,
-	0xb9,
-	0x59,
-	0x3c,
-	0x85,
-	0xc3,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x00,
-	0xf0,
-	0x04,
-	0xa5,
-	0x7a,
-	0xd0,
-	0x04,
-	0xa9,
-	0x02,
-	0x85,
-	0x7f,
-	0xa9,
-	0x00,
-	0x60,
-	0xad,
-	0xb5,
-	0x2b,
-	0x29,
-	0xfc,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1d,
-	0x60,
-	0xae,
-	0xce,
-	0x2b,
-	0xad,
-	0xcd,
-	0x2b,
-	0x20,
-	0x3f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x22,
-	0x60,
-	0xae,
-	0xd0,
-	0x2b,
-	0xad,
-	0xcf,
-	0x2b,
-	0x20,
-	0x3f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x23,
-	0x60,
-	0xae,
-	0xd2,
-	0x2b,
-	0xad,
-	0xd1,
-	0x2b,
-	0x20,
-	0x3f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x24,
-	0x60,
-	0xae,
-	0xc8,
-	0x2b,
-	0xad,
-	0xc7,
-	0x2b,
-	0x20,
-	0x5f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1f,
-	0x60,
-	0xae,
-	0xca,
-	0x2b,
-	0xad,
-	0xc9,
-	0x2b,
-	0x20,
-	0x5f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x20,
-	0x60,
-	0xae,
-	0xcc,
-	0x2b,
-	0xad,
-	0xcb,
-	0x2b,
-	0x20,
-	0x5f,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x21,
-	0x60,
-	0xae,
-	0xdd,
-	0x2b,
-	0xa9,
-	0x08,
-	0x20,
-	0x30,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x25,
-	0x60,
-	0xad,
-	0xd7,
-	0x2b,
-	0xc9,
-	0x10,
-	0xb0,
-	0x03,
-	0xa9,
-	0x26,
-	0x60,
-	0xad,
-	0xd8,
-	0x2b,
-	0xc9,
-	0x10,
-	0xb0,
-	0x03,
-	0xa9,
-	0x27,
-	0x60,
-	0xad,
-	0xde,
-	0x2b,
-	0xc9,
-	0x06,
-	0x90,
-	0x03,
-	0xa9,
-	0x29,
-	0x60,
-	0xf0,
-	0x54,
-	0x49,
-	0x04,
-	0x85,
-	0xcb,
-	0xa2,
-	0x00,
-	0xbd,
-	0xdf,
-	0x2b,
-	0xcd,
-	0x0c,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2a,
-	0x60,
-	0xbd,
-	0xe0,
-	0x2b,
-	0xcd,
-	0x0d,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2b,
-	0x60,
-	0xbd,
-	0xe1,
-	0x2b,
-	0xcd,
-	0x0c,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2c,
-	0x60,
-	0xbd,
-	0xe2,
-	0x2b,
-	0xcd,
-	0x0d,
-	0x3c,
-	0x90,
-	0x03,
-	0xa9,
-	0x2d,
-	0x60,
-	0xbd,
-	0xe1,
-	0x2b,
-	0xdd,
-	0xdf,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x2e,
-	0x60,
-	0xbd,
-	0xe2,
-	0x2b,
-	0xdd,
-	0xe0,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x2f,
-	0x60,
-	0x18,
-	0x8a,
-	0x69,
-	0x04,
-	0xc5,
-	0xcb,
-	0xb0,
-	0x04,
-	0xaa,
-	0x4c,
-	0xc9,
-	0x0b,
-	0xa9,
-	0x00,
-	0x60,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0f,
-	0xc9,
-	0x03,
-	0xf0,
-	0x0b,
-	0xc9,
-	0x05,
-	0xf0,
-	0x07,
-	0xc9,
-	0x07,
-	0xf0,
-	0x03,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0x86,
-	0xcb,
-	0xc5,
-	0xcb,
-	0xf0,
-	0x06,
-	0x4a,
-	0xd0,
-	0xf9,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0xec,
-	0xda,
-	0x3b,
-	0x90,
-	0x09,
-	0xd0,
-	0x13,
-	0xcd,
-	0xd9,
-	0x3b,
-	0xf0,
-	0x02,
-	0xb0,
-	0x0c,
-	0xec,
-	0xd8,
-	0x3b,
-	0x90,
-	0x07,
-	0xd0,
-	0x08,
-	0xcd,
-	0xd7,
-	0x3b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0xec,
-	0xe2,
-	0x3b,
-	0x90,
-	0x09,
-	0xd0,
-	0x13,
-	0xcd,
-	0xe1,
-	0x3b,
-	0xf0,
-	0x02,
-	0xb0,
-	0x0c,
-	0xec,
-	0xe0,
-	0x3b,
-	0x90,
-	0x07,
-	0xd0,
-	0x08,
-	0xcd,
-	0xdf,
-	0x3b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x01,
-	0x60,
-	0xa9,
-	0x00,
-	0x60,
-	0xa0,
-	0x00,
-	0x18,
-	0xb9,
-	0x94,
-	0x3c,
-	0x79,
-	0x96,
-	0x3c,
-	0x85,
-	0xd1,
-	0xb9,
-	0x95,
-	0x3c,
-	0x79,
-	0x97,
-	0x3c,
-	0x6a,
-	0x85,
-	0xd2,
-	0x66,
-	0xd1,
-	0xa5,
-	0xd0,
-	0xc5,
-	0xd2,
-	0x90,
-	0x10,
-	0xd0,
-	0x06,
-	0xa5,
-	0xcf,
-	0xc5,
-	0xd1,
-	0x90,
-	0x08,
-	0xc8,
-	0xc8,
-	0xc0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xd6,
-	0x98,
-	0x4a,
-	0x60,
-	0xc9,
-	0x00,
-	0xf0,
-	0x1d,
-	0xc9,
-	0x01,
-	0xf0,
-	0x12,
-	0xc9,
-	0x02,
-	0xf0,
-	0x07,
-	0xad,
-	0x9a,
-	0x3c,
-	0xae,
-	0x9b,
-	0x3c,
-	0x60,
-	0xad,
-	0x98,
-	0x3c,
-	0xae,
-	0x99,
-	0x3c,
-	0x60,
-	0xad,
-	0x96,
-	0x3c,
-	0xae,
-	0x97,
-	0x3c,
-	0x60,
-	0xad,
-	0x94,
-	0x3c,
-	0xae,
-	0x95,
-	0x3c,
-	0x60,
-	0x64,
-	0x71,
-	0x64,
-	0x72,
-	0xad,
-	0x0c,
-	0x3c,
-	0x85,
-	0x73,
-	0xad,
-	0x0d,
-	0x3c,
-	0x85,
-	0x74,
-	0xa9,
-	0x01,
-	0x85,
-	0x7a,
-	0x85,
-	0x7d,
-	0x85,
-	0x7e,
-	0x38,
-	0xad,
-	0xba,
-	0x2b,
-	0xed,
-	0xe3,
-	0x3b,
-	0xad,
-	0xbb,
-	0x2b,
-	0xed,
-	0xe4,
-	0x3b,
-	0x90,
-	0x03,
-	0xa9,
-	0x09,
-	0x60,
-	0xad,
-	0xc1,
-	0x2b,
-	0xd0,
-	0x10,
-	0xad,
-	0xc0,
-	0x2b,
-	0xaa,
-	0x4a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x13,
-	0x60,
-	0x8a,
-	0x20,
-	0x1a,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x11,
-	0x60,
-	0x8a,
-	0x1a,
-	0x4a,
-	0x85,
-	0x17,
-	0x64,
-	0xc2,
-	0xc9,
-	0x01,
-	0xf0,
-	0x02,
-	0xe6,
-	0xc2,
-	0x38,
-	0xad,
-	0xba,
-	0x2b,
-	0x6a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0d,
-	0x60,
-	0x2a,
-	0xed,
-	0xb6,
-	0x2b,
-	0xa8,
-	0x6a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0b,
-	0x60,
-	0x2a,
-	0xad,
-	0xbb,
-	0x2b,
-	0xed,
-	0xb7,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0f,
-	0x60,
-	0xc8,
-	0xd0,
-	0x01,
-	0x1a,
-	0x84,
-	0x19,
-	0x85,
-	0x1a,
-	0xa5,
-	0x19,
-	0xa6,
-	0x1a,
-	0xa4,
-	0x17,
-	0x20,
-	0xb3,
-	0x0f,
-	0x48,
-	0xda,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0x29,
-	0xfe,
-	0x85,
-	0x71,
-	0x86,
-	0x72,
-	0xa8,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x98,
-	0x6a,
-	0xd0,
-	0x01,
-	0xca,
-	0x3a,
-	0x85,
-	0x65,
-	0x86,
-	0x66,
-	0x68,
-	0x4a,
-	0x85,
-	0xd0,
-	0x68,
-	0x6a,
-	0x85,
-	0xcf,
-	0xad,
-	0x0c,
-	0x3c,
-	0x85,
-	0xcb,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xcf,
-	0x85,
-	0xd3,
-	0xc9,
-	0x14,
-	0xb0,
-	0x08,
-	0x46,
-	0x73,
-	0x06,
-	0x7d,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x07,
-	0xa5,
-	0xcf,
-	0xcd,
-	0xa0,
-	0x3c,
-	0xb0,
-	0x00,
-	0xad,
-	0xb4,
-	0x2b,
-	0xaa,
-	0xc9,
-	0x03,
-	0xd0,
-	0x03,
-	0xa9,
-	0x06,
-	0x60,
-	0x8a,
-	0x29,
-	0xe0,
-	0xd0,
-	0xf8,
-	0x8a,
-	0x29,
-	0x04,
-	0xf0,
-	0x02,
-	0x64,
-	0x7a,
-	0x38,
-	0xad,
-	0xbc,
-	0x2b,
-	0xed,
-	0xe5,
-	0x3b,
-	0xad,
-	0xbd,
-	0x2b,
-	0xed,
-	0xe6,
-	0x3b,
-	0x90,
-	0x03,
-	0xa9,
-	0x0a,
-	0x60,
-	0xad,
-	0xc5,
-	0x2b,
-	0xd0,
-	0x10,
-	0xad,
-	0xc4,
-	0x2b,
-	0xaa,
-	0x4a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x14,
-	0x60,
-	0x8a,
-	0x20,
-	0x1a,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x12,
-	0x60,
-	0x8a,
-	0x1a,
-	0x4a,
-	0x85,
-	0x18,
-	0x64,
-	0xc2,
-	0xc9,
-	0x01,
-	0xf0,
-	0x02,
-	0xe6,
-	0xc2,
-	0xad,
-	0xbc,
-	0x2b,
-	0x4a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0e,
-	0x60,
-	0x2a,
-	0x38,
-	0xed,
-	0xb8,
-	0x2b,
-	0xa8,
-	0x6a,
-	0xb0,
-	0x03,
-	0xa9,
-	0x0c,
-	0x60,
-	0x2a,
-	0xad,
-	0xbd,
-	0x2b,
-	0xed,
-	0xb9,
-	0x2b,
-	0xb0,
-	0x03,
-	0xa9,
-	0x10,
-	0x60,
-	0xc8,
-	0xd0,
-	0x01,
-	0x1a,
-	0x84,
-	0x1b,
-	0x85,
-	0x1c,
-	0xa5,
-	0x1b,
-	0xa6,
-	0x1c,
-	0xa4,
-	0x18,
-	0x20,
-	0xb3,
-	0x0f,
-	0x48,
-	0xda,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0xa8,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x98,
-	0x6a,
-	0xd0,
-	0x01,
-	0xca,
-	0x3a,
-	0x85,
-	0x67,
-	0x86,
-	0x68,
-	0x68,
-	0x4a,
-	0x85,
-	0xd0,
-	0x68,
-	0x6a,
-	0x85,
-	0xcf,
-	0xad,
-	0x0d,
-	0x3c,
-	0x85,
-	0xcb,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xcf,
-	0x85,
-	0xd4,
-	0xc9,
-	0x14,
-	0xb0,
-	0x08,
-	0x46,
-	0x74,
-	0x06,
-	0x7e,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x09,
-	0xa5,
-	0xcf,
-	0xcd,
-	0xa1,
-	0x3c,
-	0xb0,
-	0x02,
-	0x64,
-	0x7a,
-	0xa2,
-	0x00,
-	0xa5,
-	0x72,
-	0xcd,
-	0xa8,
-	0x02,
-	0xd0,
-	0x09,
-	0xa5,
-	0x71,
-	0xcd,
-	0xa7,
-	0x02,
-	0xd0,
-	0x02,
-	0x80,
-	0x01,
-	0xe8,
-	0x86,
-	0x7c,
-	0xa5,
-	0x18,
-	0xc5,
-	0x17,
-	0xb0,
-	0x02,
-	0xa5,
-	0x17,
-	0x85,
-	0x79,
-	0xc9,
-	0x03,
-	0x90,
-	0x0c,
-	0xa2,
-	0x01,
-	0x86,
-	0x75,
-	0xc9,
-	0x05,
-	0x90,
-	0x04,
-	0x86,
-	0x76,
-	0x86,
-	0x77,
-	0xad,
-	0x9f,
-	0x3c,
-	0xc5,
-	0x79,
-	0xb0,
-	0x02,
-	0x64,
-	0x7a,
-	0xa2,
-	0x01,
-	0xad,
-	0xc6,
-	0x2b,
-	0xf0,
-	0x21,
-	0xa8,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0xaa,
-	0xa9,
-	0x04,
-	0x20,
-	0x30,
-	0x0c,
-	0xd0,
-	0x0c,
-	0x98,
-	0x29,
-	0x0f,
-	0xdc,
-	0xaa,
-	0xa9,
-	0x04,
-	0x20,
-	0x30,
-	0x0c,
-	0xf0,
-	0x03,
-	0xa9,
-	0x1c,
-	0x60,
-	0xc4,
-	0xcb,
-	0xb0,
-	0x01,
-	0xfc,
-	0x86,
-	0x78,
-	0x64,
-	0x7f,
-	0x64,
-	0x69,
-	0x64,
-	0x6a,
-	0x64,
-	0x6b,
-	0x64,
-	0x6c,
-	0xad,
-	0xb5,
-	0x2b,
-	0x85,
-	0x87,
-	0xd8,
-	0x4d,
-	0x0e,
-	0x3c,
-	0xf8,
-	0x85,
-	0x80,
-	0x85,
-	0xc1,
-	0xad,
-	0xb5,
-	0x2b,
-	0x29,
-	0x01,
-	0xd0,
-	0x0a,
-	0x64,
-	0x1f,
-	0x64,
-	0x20,
-	0xa9,
-	0x01,
-	0x85,
-	0x22,
-	0x80,
-	0x0b,
-	0xa5,
-	0x73,
-	0x3a,
-	0x85,
-	0x1f,
-	0x85,
-	0x20,
-	0xa9,
-	0xff,
-	0x85,
-	0x22,
-	0xa0,
-	0x02,
-	0x53,
-	0x19,
-	0x00,
-	0x23,
-	0x00,
-	0x53,
-	0xb6,
-	0x2b,
-	0x25,
-	0x00,
-	0xa9,
-	0xef,
-	0x85,
-	0xdd,
-	0xa9,
-	0x3b,
-	0x85,
-	0xde,
-	0xa9,
-	0xe7,
-	0x85,
-	0xdf,
-	0xa9,
-	0x3b,
-	0x85,
-	0xe0,
-	0xa9,
-	0xd7,
-	0x85,
-	0xdb,
-	0xa9,
-	0x2a,
-	0x85,
-	0xdc,
-	0xa9,
-	0x9f,
-	0x85,
-	0x1d,
-	0xa9,
-	0x2a,
-	0x85,
-	0x1e,
-	0xa5,
-	0x73,
-	0x85,
-	0x27,
-	0xa5,
-	0x17,
-	0x85,
-	0x29,
-	0x20,
-	0x10,
-	0x10,
-	0x20,
-	0x38,
-	0x0b,
-	0xf0,
-	0x01,
-	0x60,
-	0xad,
-	0xde,
-	0x2b,
-	0x85,
-	0xc4,
-	0xf0,
-	0x12,
-	0xa5,
-	0x7d,
-	0x3a,
-	0x85,
-	0x28,
-	0xa9,
-	0xf3,
-	0x85,
-	0xdf,
-	0xa9,
-	0x2a,
-	0x85,
-	0xe0,
-	0xa9,
-	0x00,
-	0x20,
-	0xb3,
-	0x11,
-	0xad,
-	0xb5,
-	0x2b,
-	0x29,
-	0x02,
-	0xd0,
-	0x0a,
-	0x64,
-	0x1f,
-	0x64,
-	0x20,
-	0xa9,
-	0x01,
-	0x85,
-	0x22,
-	0x80,
-	0x0b,
-	0xa5,
-	0x74,
-	0x3a,
-	0x85,
-	0x1f,
-	0x85,
-	0x20,
-	0xa9,
-	0xff,
-	0x85,
-	0x22,
-	0xa0,
-	0x02,
-	0x53,
-	0x1b,
-	0x00,
-	0x23,
-	0x00,
-	0x53,
-	0xb8,
-	0x2b,
-	0x25,
-	0x00,
-	0xa9,
-	0xff,
-	0x85,
-	0xdd,
-	0xa9,
-	0x3b,
-	0x85,
-	0xde,
-	0xa9,
-	0xeb,
-	0x85,
-	0xdf,
-	0xa9,
-	0x3b,
-	0x85,
-	0xe0,
-	0xa9,
-	0xe7,
-	0x85,
-	0xdb,
-	0xa9,
-	0x2a,
-	0x85,
-	0xdc,
-	0xa9,
-	0xbf,
-	0x85,
-	0x1d,
-	0xa9,
-	0x2a,
-	0x85,
-	0x1e,
-	0xa5,
-	0x74,
-	0x85,
-	0x27,
-	0xa5,
-	0x18,
-	0x85,
-	0x29,
-	0x20,
-	0x10,
-	0x10,
-	0xa5,
-	0xc4,
-	0xf0,
-	0x12,
-	0xa5,
-	0x7e,
-	0x3a,
-	0x85,
-	0x28,
-	0xa9,
-	0x03,
-	0x85,
-	0xdf,
-	0xa9,
-	0x2b,
-	0x85,
-	0xe0,
-	0xa9,
-	0x01,
-	0x20,
-	0xb3,
-	0x11,
-	0xa9,
-	0x00,
-	0x60,
-	0x88,
-	0x84,
-	0xcb,
-	0xc8,
-	0x18,
-	0x65,
-	0xcb,
-	0x90,
-	0x01,
-	0xe8,
-	0x20,
-	0xc1,
-	0x0f,
-	0x60,
-	0xc0,
-	0x01,
-	0xd0,
-	0x01,
-	0x60,
-	0x85,
-	0xcb,
-	0x98,
-	0xc9,
-	0x01,
-	0xf0,
-	0x0e,
-	0x29,
-	0x01,
-	0xd0,
-	0x0d,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x66,
-	0xcb,
-	0x98,
-	0x4a,
-	0xa8,
-	0x80,
-	0xee,
-	0xa5,
-	0xcb,
-	0x60,
-	0xa5,
-	0xcb,
-	0x1a,
-	0xd0,
-	0x01,
-	0xe8,
-	0x49,
-	0x55,
-	0x84,
-	0xcd,
-	0x18,
-	0x65,
-	0xcd,
-	0x85,
-	0xcc,
-	0x90,
-	0x03,
-	0xe6,
-	0xcd,
-	0x18,
-	0x8a,
-	0x49,
-	0x55,
-	0x84,
-	0xce,
-	0xaa,
-	0x65,
-	0xcc,
-	0x8a,
-	0x65,
-	0xcd,
-	0x85,
-	0xcd,
-	0xa5,
-	0xce,
-	0x90,
-	0x03,
-	0xe6,
-	0xce,
-	0x18,
-	0x65,
-	0xcd,
-	0xa8,
-	0xa5,
-	0xce,
-	0x69,
-	0x00,
-	0xaa,
-	0x98,
-	0x60,
-	0xa5,
-	0x27,
-	0x85,
-	0xcb,
-	0x3a,
-	0x4a,
-	0x85,
-	0xce,
-	0x38,
-	0xe5,
-	0x27,
-	0x85,
-	0xce,
-	0xa0,
-	0x02,
-	0x53,
-	0x23,
-	0x00,
-	0xcf,
-	0x00,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x18,
-	0xa9,
-	0x02,
-	0x65,
-	0xcf,
-	0x85,
-	0xd3,
-	0xa9,
-	0x00,
-	0x65,
-	0xd0,
-	0x85,
-	0xd4,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x00,
-	0xbb,
-	0x29,
-	0x53,
-	0xd3,
-	0x00,
-	0xbd,
-	0x29,
-	0xa5,
-	0x27,
-	0x1a,
-	0x4a,
-	0x3a,
-	0x85,
-	0xcd,
-	0xa2,
-	0x00,
-	0xda,
-	0xe4,
-	0xcd,
-	0xd0,
-	0x02,
-	0xe6,
-	0xce,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0xd1,
-	0x85,
-	0xce,
-	0x30,
-	0x09,
-	0x38,
-	0xe5,
-	0x27,
-	0x85,
-	0xce,
-	0xa9,
-	0x02,
-	0x80,
-	0x02,
-	0xa9,
-	0x00,
-	0xfa,
-	0x9d,
-	0xab,
-	0x29,
-	0xe8,
-	0xe4,
-	0x27,
-	0xf0,
-	0x03,
-	0xda,
-	0x80,
-	0xda,
-	0xa5,
-	0x29,
-	0x85,
-	0xcb,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x00,
-	0xd7,
-	0x00,
-	0xa5,
-	0x29,
-	0x85,
-	0xcb,
-	0x45,
-	0xd7,
-	0x85,
-	0xd9,
-	0xfc,
-	0xa5,
-	0xcb,
-	0x45,
-	0xd8,
-	0x85,
-	0xda,
-	0x8a,
-	0x18,
-	0x65,
-	0xda,
-	0x85,
-	0xda,
-	0x38,
-	0xa5,
-	0xd7,
-	0xe9,
-	0x01,
-	0x85,
-	0xd7,
-	0xa5,
-	0xd8,
-	0xe9,
-	0x00,
-	0x85,
-	0xd8,
-	0xe6,
-	0xcd,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0x64,
-	0xcf,
-	0x64,
-	0xd0,
-	0x64,
-	0xd3,
-	0x64,
-	0xd4,
-	0x64,
-	0xce,
-	0xa2,
-	0x00,
-	0x86,
-	0xcc,
-	0xbd,
-	0xab,
-	0x29,
-	0xaa,
-	0xe8,
-	0xbd,
-	0xbb,
-	0x29,
-	0x4a,
-	0x85,
-	0xd6,
-	0xca,
-	0xbd,
-	0xbb,
-	0x29,
-	0x6a,
-	0x85,
-	0xd5,
-	0x18,
-	0xa5,
-	0xd1,
-	0x65,
-	0xd9,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd2,
-	0x65,
-	0xda,
-	0x85,
-	0xd2,
-	0x38,
-	0xa5,
-	0xd1,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd1,
-	0xa5,
-	0xd2,
-	0xe5,
-	0xd6,
-	0x85,
-	0xd2,
-	0x18,
-	0x10,
-	0x0d,
-	0xa5,
-	0x29,
-	0x65,
-	0xd1,
-	0x85,
-	0xd1,
-	0xa9,
-	0x00,
-	0x65,
-	0xd2,
-	0x85,
-	0xd2,
-	0x38,
-	0xa5,
-	0xd7,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd8,
-	0x65,
-	0xd0,
-	0x85,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x0a,
-	0x09,
-	0x01,
-	0x92,
-	0x1d,
-	0xa5,
-	0xd0,
-	0x2a,
-	0xa0,
-	0x01,
-	0x91,
-	0x1d,
-	0x18,
-	0xa5,
-	0x1d,
-	0x69,
-	0x02,
-	0x85,
-	0x1d,
-	0xa5,
-	0x1e,
-	0x69,
-	0x00,
-	0x85,
-	0x1e,
-	0xe6,
-	0xcf,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd0,
-	0xa6,
-	0xcc,
-	0xbd,
-	0xab,
-	0x29,
-	0xaa,
-	0xbd,
-	0xbb,
-	0x29,
-	0x85,
-	0xd5,
-	0xe8,
-	0xbd,
-	0xbb,
-	0x29,
-	0x85,
-	0xd6,
-	0xa5,
-	0xcc,
-	0xc5,
-	0xcd,
-	0xb0,
-	0x0d,
-	0x38,
-	0xa5,
-	0xd5,
-	0xe9,
-	0x01,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd6,
-	0xe9,
-	0x00,
-	0x85,
-	0xd6,
-	0x46,
-	0xd6,
-	0x66,
-	0xd5,
-	0x18,
-	0xa5,
-	0x25,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0x26,
-	0x65,
-	0xd6,
-	0x85,
-	0xd6,
-	0xa6,
-	0xcc,
-	0xbd,
-	0xab,
-	0x29,
-	0xaa,
-	0x18,
-	0xbd,
-	0xbb,
-	0x29,
-	0x65,
-	0x25,
-	0x85,
-	0x25,
-	0xe8,
-	0xbd,
-	0xbb,
-	0x29,
-	0x65,
-	0x26,
-	0x85,
-	0x26,
-	0xa5,
-	0xd6,
-	0xc5,
-	0xd4,
-	0x90,
-	0x1f,
-	0xd0,
-	0x06,
-	0xa5,
-	0xd5,
-	0xc5,
-	0xd3,
-	0x90,
-	0x17,
-	0xa4,
-	0xce,
-	0xb1,
-	0xdd,
-	0xa8,
-	0xb1,
-	0xdf,
-	0x18,
-	0x65,
-	0xd3,
-	0x85,
-	0xd3,
-	0xc8,
-	0xb1,
-	0xdf,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0xe6,
-	0xce,
-	0x80,
-	0xdb,
-	0xa5,
-	0xce,
-	0x3a,
-	0xa4,
-	0x1f,
-	0x91,
-	0xdb,
-	0x18,
-	0x98,
-	0x65,
-	0x22,
-	0x85,
-	0x1f,
-	0xa6,
-	0xcc,
-	0xe8,
-	0xe4,
-	0x27,
-	0xb0,
-	0x05,
-	0x86,
-	0xcc,
-	0x4c,
-	0xc0,
-	0x10,
-	0x60,
-	0xaa,
-	0x64,
-	0xcb,
-	0xa9,
-	0x01,
-	0x85,
-	0xcc,
-	0x64,
-	0xcd,
-	0xa4,
-	0x20,
-	0xbd,
-	0xdf,
-	0x2b,
-	0x85,
-	0xce,
-	0xbd,
-	0xe1,
-	0x2b,
-	0x85,
-	0xcf,
-	0xa5,
-	0x28,
-	0xf0,
-	0x04,
-	0x46,
-	0xce,
-	0x46,
-	0xcf,
-	0xa5,
-	0xcb,
-	0xd0,
-	0x02,
-	0x91,
-	0xdf,
-	0xa5,
-	0xcd,
-	0xc5,
-	0xce,
-	0x90,
-	0x0c,
-	0xc5,
-	0xcf,
-	0xf0,
-	0x02,
-	0xb0,
-	0x06,
-	0xb1,
-	0xdf,
-	0x05,
-	0xcc,
-	0x91,
-	0xdf,
-	0xa5,
-	0xcd,
-	0x1a,
-	0xc5,
-	0x27,
-	0xb0,
-	0x09,
-	0x85,
-	0xcd,
-	0x18,
-	0x98,
-	0x65,
-	0x22,
-	0xa8,
-	0x80,
-	0xd8,
-	0xa5,
-	0xcb,
-	0x1a,
-	0xcd,
-	0xde,
-	0x2b,
-	0xb0,
-	0x0b,
-	0x85,
-	0xcb,
-	0x8a,
-	0x18,
-	0x69,
-	0x04,
-	0xaa,
-	0x06,
-	0xcc,
-	0x80,
-	0xaf,
-	0x60,
-	0xad,
-	0xcf,
-	0x3b,
-	0x0d,
-	0xd0,
-	0x3b,
-	0xf0,
-	0x2d,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x3b,
-	0xd1,
-	0x00,
-	0x20,
-	0x3d,
-	0x21,
-	0xa0,
-	0x02,
-	0x53,
-	0xd1,
-	0x3b,
-	0xcf,
-	0x00,
-	0x20,
-	0xe2,
-	0x20,
-	0xa0,
-	0x02,
-	0x53,
-	0xd5,
-	0x3b,
-	0xd7,
-	0x00,
-	0xa5,
-	0xd8,
-	0x10,
-	0x08,
-	0xa2,
-	0xff,
-	0x86,
-	0xd9,
-	0x86,
-	0xda,
-	0x80,
-	0x38,
-	0x64,
-	0xd9,
-	0x64,
-	0xda,
-	0x80,
-	0x32,
-	0xa0,
-	0x02,
-	0x53,
-	0xd3,
-	0x3b,
-	0xd1,
-	0x00,
-	0x20,
-	0x3d,
-	0x21,
-	0xa0,
-	0x02,
-	0x53,
-	0xd5,
-	0x3b,
-	0xcf,
-	0x00,
-	0x20,
-	0xe2,
-	0x20,
-	0xa0,
-	0x04,
-	0x53,
-	0xd3,
-	0x00,
-	0xd7,
-	0x00,
-	0xa0,
-	0x02,
-	0x53,
-	0xd1,
-	0x3b,
-	0xd3,
-	0x00,
-	0xa5,
-	0xd4,
-	0x10,
-	0x08,
-	0xa2,
-	0xff,
-	0x86,
-	0xd5,
-	0x86,
-	0xd6,
-	0x80,
-	0x04,
-	0x64,
-	0xd5,
-	0x64,
-	0xd6,
-	0xd8,
-	0xa5,
-	0xd6,
-	0x45,
-	0xda,
-	0xf8,
-	0x10,
-	0x03,
-	0xa9,
-	0x1e,
-	0x60,
-	0xa5,
-	0xd6,
-	0x10,
-	0x03,
-	0x20,
-	0xda,
-	0x21,
-	0x20,
-	0x07,
-	0x22,
-	0x64,
-	0xd3,
-	0xa0,
-	0x02,
-	0x53,
-	0xcf,
-	0x00,
-	0xd4,
-	0x00,
-	0x64,
-	0xd6,
-	0x53,
-	0xd1,
-	0x00,
-	0xcf,
-	0x00,
-	0x20,
-	0x81,
-	0x21,
-	0xa5,
-	0xd5,
-	0xf0,
-	0x06,
-	0xa9,
-	0xff,
-	0x85,
-	0xd3,
-	0x85,
-	0xd4,
-	0xa5,
-	0xd3,
-	0x45,
-	0xdb,
-	0x85,
-	0xd7,
-	0x84,
-	0xd8,
-	0xa5,
-	0xd3,
-	0x45,
-	0xdc,
-	0x18,
-	0x65,
-	0xd8,
-	0x85,
-	0xd8,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd4,
-	0x45,
-	0xdb,
-	0x18,
-	0x65,
-	0xd8,
-	0x85,
-	0xd8,
-	0x98,
-	0x65,
-	0xd9,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd4,
-	0x45,
-	0xdc,
-	0x65,
-	0xd9,
-	0x85,
-	0xd9,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xda,
-	0xa5,
-	0xd7,
-	0x10,
-	0x08,
-	0xe6,
-	0xd8,
-	0xd0,
-	0x04,
-	0xe6,
-	0xd9,
-	0xf0,
-	0x0d,
-	0xa5,
-	0xda,
-	0xd0,
-	0x09,
-	0xa0,
-	0x02,
-	0x53,
-	0xd8,
-	0x00,
-	0x2d,
-	0x00,
-	0x80,
-	0x06,
-	0xa9,
-	0xff,
-	0x85,
-	0x2d,
-	0x85,
-	0x2e,
-	0xa9,
-	0x00,
-	0x60,
-	0xa2,
-	0x02,
-	0xa5,
-	0x6e,
-	0xdd,
-	0xcb,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xdd,
-	0xca,
-	0x3c,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe8,
-	0xca,
-	0xca,
-	0xda,
-	0x38,
-	0xa5,
-	0x6d,
-	0xfd,
-	0xca,
-	0x3c,
-	0x85,
-	0xcf,
-	0xa5,
-	0x6e,
-	0xfd,
-	0xcb,
-	0x3c,
-	0x85,
-	0xd0,
-	0xbd,
-	0xe5,
-	0x3c,
-	0x85,
-	0xd1,
-	0xbd,
-	0xe6,
-	0x3c,
-	0x85,
-	0xd2,
-	0x20,
-	0x04,
-	0x21,
-	0x8a,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xf1,
-	0x3c,
-	0xf0,
-	0x12,
-	0x38,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x98,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0xbd,
-	0xd6,
-	0x3c,
-	0x18,
-	0x65,
-	0xd5,
-	0x85,
-	0x99,
-	0xfa,
-	0xda,
-	0xbd,
-	0xdf,
-	0x3c,
-	0x85,
-	0xd1,
-	0xbd,
-	0xe0,
-	0x3c,
-	0x85,
-	0xd2,
-	0x20,
-	0x04,
-	0x21,
-	0x8a,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xee,
-	0x3c,
-	0xf0,
-	0x12,
-	0x38,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x98,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0xbd,
-	0xd3,
-	0x3c,
-	0x18,
-	0x65,
-	0xd5,
-	0x45,
-	0x88,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x97,
-	0xfa,
-	0xbd,
-	0xd9,
-	0x3c,
-	0x85,
-	0xd1,
-	0xbd,
-	0xda,
-	0x3c,
-	0x85,
-	0xd2,
-	0x20,
-	0x04,
-	0x21,
-	0x8a,
-	0x4a,
-	0xaa,
-	0xbd,
-	0xeb,
-	0x3c,
-	0xf0,
-	0x12,
-	0x38,
-	0xa9,
-	0x00,
-	0xa8,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x98,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0xbd,
-	0xd0,
-	0x3c,
-	0x18,
-	0x65,
-	0xd5,
-	0x45,
-	0x89,
-	0x20,
-	0x52,
-	0x21,
-	0x85,
-	0x98,
-	0x60,
-	0xa5,
-	0x78,
-	0xc9,
-	0x02,
-	0xb0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0x33,
-	0x85,
-	0xcb,
-	0xa2,
-	0x00,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0xfa,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0xf9,
-	0x3c,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0x8a,
-	0x4a,
-	0x49,
-	0x05,
-	0x18,
-	0x65,
-	0xcb,
-	0x18,
-	0x69,
-	0xff,
-	0x85,
-	0xd1,
-	0xa9,
-	0x3c,
-	0x69,
-	0x00,
-	0x85,
-	0xd2,
-	0xa0,
-	0x05,
-	0xd3,
-	0xd1,
-	0x31,
-	0x00,
-	0x60,
-	0xa2,
-	0x02,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0x14,
-	0x3d,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0x13,
-	0x3d,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x0a,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0xca,
-	0xca,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0x38,
-	0xa5,
-	0x6d,
-	0xf9,
-	0x13,
-	0x3d,
-	0x85,
-	0xcf,
-	0xa5,
-	0x6e,
-	0xf9,
-	0x14,
-	0x3d,
-	0x85,
-	0xd0,
-	0xb9,
-	0x1d,
-	0x3d,
-	0x85,
-	0xd1,
-	0xb9,
-	0x1e,
-	0x3d,
-	0x85,
-	0xd2,
-	0x20,
-	0x3d,
-	0x21,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0x8a,
-	0x4a,
-	0x18,
-	0x65,
-	0xcb,
-	0xa8,
-	0x18,
-	0xb9,
-	0x27,
-	0x3d,
-	0x65,
-	0xd5,
-	0x85,
-	0x36,
-	0x60,
-	0x38,
-	0x30,
-	0x0b,
-	0x85,
-	0xcb,
-	0xa9,
-	0x00,
-	0xe5,
-	0xcb,
-	0xd0,
-	0x02,
-	0xa9,
-	0xff,
-	0x60,
-	0xe9,
-	0x80,
-	0x4a,
-	0x4a,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x60,
-	0x38,
-	0xe9,
-	0x80,
-	0xaa,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0xd8,
-	0x49,
-	0x01,
-	0xf8,
-	0x4a,
-	0x8a,
-	0x6a,
-	0x18,
-	0x69,
-	0x80,
-	0x60,
-	0x38,
-	0x30,
-	0x0b,
-	0x85,
-	0xcb,
-	0xa9,
-	0x00,
-	0xe5,
-	0xcb,
-	0xd0,
-	0x02,
-	0xa9,
-	0xff,
-	0x60,
-	0xe9,
-	0x80,
-	0x4a,
-	0x85,
-	0xcb,
-	0x38,
-	0xa9,
-	0x80,
-	0xe5,
-	0xcb,
-	0x60,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xcb,
-	0x8a,
-	0x3c,
-	0x45,
-	0xcb,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xdc,
-	0x10,
-	0x01,
-	0x1a,
-	0x18,
-	0x69,
-	0x80,
-	0x60,
-	0x0a,
-	0x85,
-	0xcb,
-	0x8a,
-	0x45,
-	0xcb,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0x60,
-	0x0a,
-	0x85,
-	0xcb,
-	0x8a,
-	0x45,
-	0xcb,
-	0x0a,
-	0x98,
-	0x69,
-	0x00,
-	0xc9,
-	0x7f,
-	0xb0,
-	0x01,
-	0x60,
-	0xa9,
-	0x7f,
-	0x60,
-	0xa2,
-	0x02,
-	0xa5,
-	0x6e,
-	0xdd,
-	0x71,
-	0x3f,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xdd,
-	0x70,
-	0x3f,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x06,
-	0xf0,
-	0x02,
-	0x80,
-	0xe8,
-	0xca,
-	0xca,
-	0xda,
-	0x38,
-	0xa5,
-	0x6d,
-	0xfd,
-	0x70,
-	0x3f,
-	0x85,
-	0xcf,
-	0xa5,
-	0x6e,
-	0xfd,
-	0x71,
-	0x3f,
-	0x85,
-	0xd0,
-	0xbd,
-	0x76,
-	0x3f,
-	0x85,
-	0xd1,
-	0xbd,
-	0x77,
-	0x3f,
-	0x85,
-	0xd2,
-	0x20,
-	0x3d,
-	0x21,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x18,
-	0xbd,
-	0x82,
-	0x3f,
-	0x65,
-	0xd5,
-	0x85,
-	0xba,
-	0xfa,
-	0xbd,
-	0x7c,
-	0x3f,
-	0x85,
-	0xd1,
-	0xbd,
-	0x7d,
-	0x3f,
-	0x85,
-	0xd2,
-	0x20,
-	0x3d,
-	0x21,
-	0xa5,
-	0xd4,
-	0x10,
-	0x02,
-	0xe6,
-	0xd5,
-	0x8a,
-	0x4a,
-	0xaa,
-	0x18,
-	0xbd,
-	0x85,
-	0x3f,
-	0x65,
-	0xd5,
-	0x85,
-	0xbb,
-	0x60,
-	0x5a,
-	0x86,
-	0xcb,
-	0x45,
-	0xcb,
-	0xaa,
-	0x98,
-	0x29,
-	0x30,
-	0xd0,
-	0x12,
-	0x98,
-	0x49,
-	0x08,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x10,
-	0x98,
-	0x4a,
-	0x05,
-	0xcb,
-	0x69,
-	0x00,
-	0x30,
-	0x02,
-	0x7a,
-	0x60,
-	0xa9,
-	0x7f,
-	0x7a,
-	0x60,
-	0x5a,
-	0x86,
-	0xcb,
-	0x45,
-	0xcb,
-	0xaa,
-	0x98,
-	0x29,
-	0x38,
-	0xd0,
-	0x12,
-	0x98,
-	0x49,
-	0x10,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x20,
-	0x98,
-	0x4a,
-	0x05,
-	0xcb,
-	0x69,
-	0x00,
-	0x30,
-	0x02,
-	0x7a,
-	0x60,
-	0xa9,
-	0x7f,
-	0x7a,
-	0x60,
-	0x5a,
-	0x86,
-	0xcb,
-	0x45,
-	0xcb,
-	0xaa,
-	0x98,
-	0x29,
-	0xf8,
-	0xd0,
-	0x10,
-	0x98,
-	0x49,
-	0x10,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x20,
-	0x98,
-	0x4a,
-	0x05,
-	0xcb,
-	0x69,
-	0x00,
-	0x10,
-	0x02,
-	0xa9,
-	0x7f,
-	0x7a,
-	0x60,
-	0x49,
-	0x3c,
-	0x18,
-	0x65,
-	0xd9,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0xd0,
-	0x18,
-	0xa5,
-	0xcf,
-	0x69,
-	0x78,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x60,
-	0xf0,
-	0x02,
-	0xa9,
-	0x3c,
-	0x18,
-	0x65,
-	0xd9,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x00,
-	0x85,
-	0xd0,
-	0x18,
-	0xa5,
-	0xcf,
-	0x69,
-	0x78,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0x60,
-	0x85,
-	0xd8,
-	0xa9,
-	0x04,
-	0x48,
-	0x80,
-	0x1a,
-	0xfa,
-	0xfa,
-	0x48,
-	0xa9,
-	0x0f,
-	0x18,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0xd0,
-	0xa5,
-	0xcd,
-	0x65,
-	0xd1,
-	0x85,
-	0xd1,
-	0x90,
-	0x03,
-	0x18,
-	0xe6,
-	0xd2,
-	0xa0,
-	0x0f,
-	0xd3,
-	0xcf,
-	0x56,
-	0x00,
-	0xa6,
-	0x62,
-	0xa5,
-	0x85,
-	0x20,
-	0xb4,
-	0x14,
-	0x85,
-	0xcc,
-	0xa6,
-	0x63,
-	0xa5,
-	0x85,
-	0x20,
-	0xb4,
-	0x14,
-	0x85,
-	0xce,
-	0xa6,
-	0x64,
-	0xa5,
-	0x85,
-	0x20,
-	0xb4,
-	0x14,
-	0x85,
-	0xd3,
-	0xa5,
-	0x56,
-	0xa6,
-	0xce,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x89,
-	0x20,
-	0x71,
-	0x15,
-	0x85,
-	0x56,
-	0xa5,
-	0x57,
-	0xa6,
-	0xd3,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x30,
-	0x20,
-	0x92,
-	0x15,
-	0x85,
-	0x57,
-	0xa5,
-	0x58,
-	0xa6,
-	0xcc,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x58,
-	0xa5,
-	0x59,
-	0xa6,
-	0xcc,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x59,
-	0xa5,
-	0x5a,
-	0xa6,
-	0xcc,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x8b,
-	0x20,
-	0x50,
-	0x15,
-	0x85,
-	0x5a,
-	0xa5,
-	0x5b,
-	0xa6,
-	0xd3,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x8a,
-	0x20,
-	0x50,
-	0x15,
-	0x85,
-	0x5b,
-	0xa5,
-	0x5c,
-	0xa6,
-	0xce,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x5c,
-	0xa5,
-	0x5d,
-	0xa6,
-	0xce,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x5d,
-	0xa5,
-	0x5e,
-	0xa6,
-	0xd3,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x5e,
-	0xa0,
-	0x09,
-	0xa5,
-	0xd8,
-	0xd0,
-	0x27,
-	0xa5,
-	0x5f,
-	0xa6,
-	0xcc,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x2f,
-	0x20,
-	0x92,
-	0x15,
-	0x85,
-	0x5f,
-	0xa5,
-	0x60,
-	0xa6,
-	0xce,
-	0x20,
-	0xc9,
-	0x14,
-	0xa6,
-	0x88,
-	0x20,
-	0x71,
-	0x15,
-	0x85,
-	0x60,
-	0xa5,
-	0x61,
-	0xa6,
-	0xd3,
-	0x20,
-	0xd4,
-	0x14,
-	0x85,
-	0x61,
-	0xa0,
-	0x0c,
-	0x73,
-	0x56,
-	0x00,
-	0xd1,
-	0x68,
-	0x3a,
-	0xd0,
-	0x01,
-	0x60,
-	0x20,
-	0xf0,
-	0x15,
-	0xa9,
-	0x03,
-	0x48,
-	0xa2,
-	0x00,
-	0x80,
-	0x06,
-	0x48,
-	0x18,
-	0x8a,
-	0x69,
-	0x15,
-	0xaa,
-	0xa0,
-	0x15,
-	0x18,
-	0xbd,
-	0x18,
-	0x29,
-	0x7d,
-	0x42,
-	0x29,
-	0x4a,
-	0x69,
-	0x00,
-	0x9d,
-	0x2d,
-	0x29,
-	0xe8,
-	0x88,
-	0xd0,
-	0xef,
-	0x68,
-	0x3a,
-	0xd0,
-	0xe3,
-	0x60,
-	0xbc,
-	0x93,
-	0x27,
-	0x84,
-	0xcb,
-	0x45,
-	0xcb,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xb0,
-	0x15,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xb0,
-	0x0f,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0xb0,
-	0x09,
-	0xa9,
-	0xc0,
-	0x25,
-	0xd0,
-	0xd0,
-	0x03,
-	0xa5,
-	0xd0,
-	0x60,
-	0xa9,
-	0x3f,
-	0x60,
-	0xa5,
-	0x2b,
-	0x49,
-	0x10,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0x2c,
-	0x49,
-	0x10,
-	0x05,
-	0xd4,
-	0x85,
-	0xd4,
-	0x84,
-	0xd5,
-	0x64,
-	0xd6,
-	0xa0,
-	0x02,
-	0x53,
-	0x6d,
-	0x00,
-	0xcf,
-	0x00,
-	0x20,
-	0x81,
-	0x21,
-	0xa5,
-	0xd5,
-	0xd0,
-	0x0a,
-	0xa5,
-	0xd4,
-	0xd0,
-	0x06,
-	0xa5,
-	0xd3,
-	0xc9,
-	0x3f,
-	0x90,
-	0x02,
-	0xa9,
-	0x3f,
-	0x45,
-	0x89,
-	0x18,
-	0x69,
-	0x08,
-	0x85,
-	0xcb,
-	0x98,
-	0x69,
-	0x00,
-	0x49,
-	0x10,
-	0xc0,
-	0x00,
-	0xd0,
-	0x0f,
-	0xaa,
-	0xa5,
-	0xcb,
-	0x49,
-	0x10,
-	0x84,
-	0xcb,
-	0x8a,
-	0x05,
-	0xcb,
-	0xcd,
-	0x62,
-	0x3c,
-	0x90,
-	0x05,
-	0xad,
-	0x64,
-	0x3c,
-	0x80,
-	0x03,
-	0xad,
-	0x63,
-	0x3c,
-	0x18,
-	0x69,
-	0x20,
-	0x29,
-	0x3f,
-	0x85,
-	0xcb,
-	0xa4,
-	0x78,
-	0xb9,
-	0x5d,
-	0x3c,
-	0x18,
-	0x69,
-	0x20,
-	0x29,
-	0x3f,
-	0x85,
-	0xcc,
-	0xa4,
-	0x79,
-	0xb9,
-	0x55,
-	0x3c,
-	0x45,
-	0xcc,
-	0x85,
-	0xcf,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x06,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x2a,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x2a,
-	0x85,
-	0xd0,
-	0xa5,
-	0xcf,
-	0x45,
-	0xcb,
-	0x85,
-	0xcf,
-	0xa5,
-	0xd0,
-	0xf0,
-	0x05,
-	0x18,
-	0x98,
-	0x65,
-	0xcb,
-	0xa8,
-	0x84,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x64,
-	0xcb,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xcb,
-	0x06,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x2a,
-	0x85,
-	0xd1,
-	0xa5,
-	0xcb,
-	0x2a,
-	0x85,
-	0xd2,
-	0xa0,
-	0x00,
-	0x5a,
-	0xb9,
-	0x28,
-	0x3c,
-	0x18,
-	0x69,
-	0x20,
-	0x29,
-	0x3f,
-	0x85,
-	0xcb,
-	0xa5,
-	0xcb,
-	0x45,
-	0xd1,
-	0x85,
-	0xcf,
-	0xfc,
-	0xa5,
-	0xcb,
-	0x45,
-	0xd2,
-	0x85,
-	0xd0,
-	0x8a,
-	0x18,
-	0x65,
-	0xd0,
-	0x85,
-	0xd0,
-	0x18,
-	0xa9,
-	0x10,
-	0x65,
-	0xcf,
-	0x85,
-	0xcf,
-	0x90,
-	0x02,
-	0xe6,
-	0xd0,
-	0x64,
-	0xcb,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xcb,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xcb,
-	0x06,
-	0xcf,
-	0xa5,
-	0xd0,
-	0x2a,
-	0xa8,
-	0xa5,
-	0xcb,
-	0x2a,
-	0xd0,
-	0x05,
-	0x98,
-	0xc9,
-	0x1f,
-	0x90,
-	0x02,
-	0xa9,
-	0x1f,
-	0x7a,
-	0x99,
-	0x1d,
-	0x2b,
-	0xc8,
-	0xc0,
-	0x07,
-	0x90,
-	0xae,
-	0xa9,
-	0x00,
-	0x60,
-	0xa5,
-	0xc6,
-	0xa8,
-	0x29,
-	0x0f,
-	0xf0,
-	0x28,
-	0x98,
-	0x29,
-	0xf0,
-	0xf0,
-	0x23,
-	0xa5,
-	0xc5,
-	0xaa,
-	0x29,
-	0x0f,
-	0x3a,
-	0xd0,
-	0x11,
-	0xd8,
-	0x8a,
-	0x49,
-	0x10,
-	0xaa,
-	0xd0,
-	0x07,
-	0x98,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x80,
-	0x03,
-	0x98,
-	0x29,
-	0x0f,
-	0xf8,
-	0x85,
-	0xc5,
-	0x8a,
-	0x29,
-	0x10,
-	0x05,
-	0xc5,
-	0x85,
-	0xc5,
-	0x60,
-	0xa9,
-	0x01,
-	0x8d,
-	0x10,
-	0x60,
-	0xa0,
-	0x02,
-	0x53,
-	0xad,
-	0x3c,
-	0x58,
-	0x60,
-	0x53,
-	0x65,
-	0x00,
-	0x18,
-	0x60,
-	0x53,
-	0x67,
-	0x00,
-	0x1c,
-	0x60,
-	0x53,
-	0x69,
-	0x00,
-	0x28,
-	0x60,
-	0x53,
-	0x6b,
-	0x00,
-	0x2c,
-	0x60,
-	0x53,
-	0x6f,
-	0x00,
-	0x30,
-	0x60,
-	0xa0,
-	0x01,
-	0x53,
-	0xb3,
-	0x3c,
-	0x20,
-	0x61,
-	0x53,
-	0xb4,
-	0x3c,
-	0x24,
-	0x61,
-	0x53,
-	0xb5,
-	0x3c,
-	0x28,
-	0x61,
-	0x53,
-	0xaf,
-	0x3c,
-	0x2c,
-	0x61,
-	0x53,
-	0xb0,
-	0x3c,
-	0x30,
-	0x61,
-	0x53,
-	0xb1,
-	0x3c,
-	0x34,
-	0x61,
-	0x53,
-	0xb2,
-	0x3c,
-	0x38,
-	0x61,
-	0x53,
-	0xb6,
-	0x3c,
-	0x3c,
-	0x61,
-	0x53,
-	0xb7,
-	0x3c,
-	0x40,
-	0x61,
-	0x53,
-	0xf4,
-	0x3f,
-	0x74,
-	0x60,
-	0x53,
-	0xaa,
-	0x3c,
-	0x0c,
-	0x61,
-	0x53,
-	0xab,
-	0x3c,
-	0x44,
-	0x61,
-	0x53,
-	0xac,
-	0x3c,
-	0x88,
-	0x60,
-	0x53,
-	0x54,
-	0x3c,
-	0xdc,
-	0x60,
-	0x53,
-	0x55,
-	0x3c,
-	0x68,
-	0x61,
-	0x53,
-	0x80,
-	0x00,
-	0x14,
-	0x60,
-	0x53,
-	0x7f,
-	0x00,
-	0x3c,
-	0x60,
-	0x53,
-	0x88,
-	0x00,
-	0xec,
-	0x60,
-	0x53,
-	0x89,
-	0x00,
-	0xe0,
-	0x60,
-	0x53,
-	0x8a,
-	0x00,
-	0xe8,
-	0x60,
-	0x53,
-	0x8b,
-	0x00,
-	0xe4,
-	0x60,
-	0x53,
-	0x8e,
-	0x00,
-	0x64,
-	0x61,
-	0x53,
-	0x8f,
-	0x00,
-	0x80,
-	0x60,
-	0x53,
-	0x90,
-	0x00,
-	0x84,
-	0x60,
-	0x53,
-	0x91,
-	0x00,
-	0x58,
-	0x61,
-	0x53,
-	0x92,
-	0x00,
-	0xf0,
-	0x60,
-	0x53,
-	0x93,
-	0x00,
-	0xf4,
-	0x60,
-	0x53,
-	0x94,
-	0x00,
-	0xf8,
-	0x60,
-	0x53,
-	0x95,
-	0x00,
-	0x5c,
-	0x61,
-	0x53,
-	0x96,
-	0x00,
-	0xac,
-	0x60,
-	0x53,
-	0x97,
-	0x00,
-	0x7c,
-	0x60,
-	0x53,
-	0x98,
-	0x00,
-	0x78,
-	0x60,
-	0x53,
-	0x99,
-	0x00,
-	0x10,
-	0x61,
-	0x53,
-	0x9a,
-	0x00,
-	0xfc,
-	0x60,
-	0x53,
-	0x9b,
-	0x00,
-	0x00,
-	0x61,
-	0x53,
-	0x9c,
-	0x00,
-	0x04,
-	0x61,
-	0x53,
-	0x9d,
-	0x00,
-	0x08,
-	0x61,
-	0x53,
-	0x9e,
-	0x00,
-	0x1c,
-	0x61,
-	0x53,
-	0x9f,
-	0x00,
-	0x4c,
-	0x61,
-	0x53,
-	0xa0,
-	0x00,
-	0x18,
-	0x61,
-	0x53,
-	0xa1,
-	0x00,
-	0x48,
-	0x61,
-	0x53,
-	0xa2,
-	0x00,
-	0x14,
-	0x61,
-	0x53,
-	0xa3,
-	0x00,
-	0x6c,
-	0x61,
-	0x53,
-	0xa4,
-	0x00,
-	0x5c,
-	0x60,
-	0x53,
-	0xa5,
-	0x00,
-	0xbc,
-	0x60,
-	0x53,
-	0xa6,
-	0x00,
-	0xc0,
-	0x60,
-	0x53,
-	0xa7,
-	0x00,
-	0xc4,
-	0x60,
-	0x53,
-	0xa8,
-	0x00,
-	0xc8,
-	0x60,
-	0x53,
-	0xa9,
-	0x00,
-	0xcc,
-	0x60,
-	0x53,
-	0xaa,
-	0x00,
-	0xd0,
-	0x60,
-	0x53,
-	0xab,
-	0x00,
-	0xd4,
-	0x60,
-	0x53,
-	0xac,
-	0x00,
-	0xd8,
-	0x60,
-	0x53,
-	0xad,
-	0x00,
-	0x50,
-	0x61,
-	0x53,
-	0xae,
-	0x00,
-	0x60,
-	0x60,
-	0x53,
-	0xaf,
-	0x00,
-	0x64,
-	0x60,
-	0x53,
-	0xb0,
-	0x00,
-	0x68,
-	0x60,
-	0x53,
-	0xb1,
-	0x00,
-	0x60,
-	0x61,
-	0x53,
-	0xb2,
-	0x00,
-	0x6c,
-	0x60,
-	0x53,
-	0xb3,
-	0x00,
-	0x70,
-	0x60,
-	0x53,
-	0xb4,
-	0x00,
-	0xa8,
-	0x60,
-	0x53,
-	0xb5,
-	0x00,
-	0xa4,
-	0x60,
-	0x53,
-	0xb6,
-	0x00,
-	0xa0,
-	0x60,
-	0x53,
-	0xb7,
-	0x00,
-	0x9c,
-	0x60,
-	0x53,
-	0xb8,
-	0x00,
-	0x98,
-	0x60,
-	0x53,
-	0xb9,
-	0x00,
-	0x94,
-	0x60,
-	0x53,
-	0xba,
-	0x00,
-	0x8c,
-	0x60,
-	0x53,
-	0xbb,
-	0x00,
-	0x90,
-	0x60,
-	0x53,
-	0xbe,
-	0x00,
-	0xb8,
-	0x60,
-	0x53,
-	0xbf,
-	0x00,
-	0xb4,
-	0x60,
-	0x53,
-	0xc0,
-	0x00,
-	0xb0,
-	0x60,
-	0x53,
-	0xc1,
-	0x00,
-	0x54,
-	0x61,
-	0x53,
-	0xc2,
-	0x00,
-	0x70,
-	0x61,
-	0x9c,
-	0x20,
-	0x60,
-	0x9c,
-	0x24,
-	0x60,
-	0x60,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa2,
-	0xb8,
-	0xa9,
-	0x01,
-	0x80,
-	0x04,
-	0xa2,
-	0x38,
-	0xa9,
-	0x00,
-	0x8e,
-	0x0c,
-	0x60,
-	0x8d,
-	0x0d,
-	0x60,
-	0x85,
-	0xd4,
-	0x86,
-	0xd3,
-	0xa4,
-	0x8d,
-	0xb9,
-	0xe7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x47,
-	0x27,
-	0x49,
-	0x04,
-	0x18,
-	0x69,
-	0x5f,
-	0x85,
-	0xcf,
-	0xa9,
-	0x00,
-	0x69,
-	0x3d,
-	0x85,
-	0xd0,
-	0xa5,
-	0x73,
-	0x85,
-	0xcb,
-	0xa0,
-	0x00,
-	0x5a,
-	0xb9,
-	0xd7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x37,
-	0x27,
-	0x4a,
-	0xa8,
-	0xb1,
-	0xcf,
-	0xb0,
-	0x04,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x0f,
-	0x18,
-	0x49,
-	0x15,
-	0x69,
-	0x18,
-	0x85,
-	0xd1,
-	0xa9,
-	0x29,
-	0x69,
-	0x00,
-	0x85,
-	0xd2,
-	0xa0,
-	0x15,
-	0xc3,
-	0xd1,
-	0x54,
-	0x60,
-	0x18,
-	0xa5,
-	0xd3,
-	0x69,
-	0x18,
-	0x85,
-	0xd3,
-	0x90,
-	0x02,
-	0xe6,
-	0xd4,
-	0xa0,
-	0x02,
-	0x53,
-	0xd3,
-	0x00,
-	0x0c,
-	0x60,
-	0x7a,
-	0xc6,
-	0xcb,
-	0xf0,
-	0x03,
-	0xc8,
-	0x80,
-	0xbf,
-	0xe6,
-	0x8d,
-	0x60,
-	0xa5,
-	0x7a,
-	0xf0,
-	0x06,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x00,
-	0xd0,
-	0x12,
-	0xa0,
-	0x02,
-	0x53,
-	0xa2,
-	0x3c,
-	0xb6,
-	0x02,
-	0x53,
-	0xa4,
-	0x3c,
-	0xb8,
-	0x02,
-	0x9c,
-	0xa9,
-	0x02,
-	0x4c,
-	0x55,
-	0x1d,
-	0xa9,
-	0x03,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x42,
-	0x00,
-	0xcf,
-	0x00,
-	0xa5,
-	0x3f,
-	0xc5,
-	0xd0,
-	0x90,
-	0x13,
-	0xd0,
-	0x06,
-	0xa5,
-	0x3e,
-	0xc5,
-	0xcf,
-	0x90,
-	0x0b,
-	0xa9,
-	0x01,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x3e,
-	0x00,
-	0xcf,
-	0x00,
-	0xa5,
-	0x3d,
-	0xc5,
-	0xd0,
-	0x90,
-	0x13,
-	0xd0,
-	0x06,
-	0xa5,
-	0x3c,
-	0xc5,
-	0xcf,
-	0x90,
-	0x0b,
-	0xa9,
-	0x00,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x3c,
-	0x00,
-	0xcf,
-	0x00,
-	0xa5,
-	0x41,
-	0xc5,
-	0xd0,
-	0x90,
-	0x13,
-	0xd0,
-	0x06,
-	0xa5,
-	0x40,
-	0xc5,
-	0xcf,
-	0x90,
-	0x0b,
-	0xa9,
-	0x02,
-	0x85,
-	0xd7,
-	0xa0,
-	0x02,
-	0x53,
-	0x40,
-	0x00,
-	0xcf,
-	0x00,
-	0xa6,
-	0x7b,
-	0xe0,
-	0x02,
-	0xf0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0x16,
-	0x85,
-	0xcb,
-	0xa2,
-	0x00,
-	0x18,
-	0x8a,
-	0x65,
-	0xcb,
-	0xa8,
-	0xa5,
-	0x6e,
-	0xd9,
-	0x69,
-	0x3c,
-	0x90,
-	0x11,
-	0xd0,
-	0x07,
-	0xa5,
-	0x6d,
-	0xd9,
-	0x68,
-	0x3c,
-	0x90,
-	0x08,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x08,
-	0xf0,
-	0x02,
-	0x80,
-	0xe3,
-	0x8a,
-	0x4a,
-	0x49,
-	0x04,
-	0x18,
-	0x65,
-	0xcb,
-	0x48,
-	0xa5,
-	0x37,
-	0x85,
-	0xcb,
-	0xd0,
-	0x08,
-	0x64,
-	0xd3,
-	0x64,
-	0xd4,
-	0x64,
-	0xd5,
-	0x80,
-	0x48,
-	0x4a,
-	0x85,
-	0xda,
-	0xa5,
-	0x38,
-	0x85,
-	0xd0,
-	0xa5,
-	0xda,
-	0x85,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd3,
-	0xa5,
-	0x39,
-	0x85,
-	0xd0,
-	0xa5,
-	0xda,
-	0x85,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd4,
-	0xa5,
-	0x3b,
-	0x85,
-	0xd0,
-	0xa5,
-	0xda,
-	0x85,
-	0xcf,
-	0x20,
-	0xbe,
-	0x20,
-	0xa5,
-	0xd0,
-	0xd0,
-	0x04,
-	0xa5,
-	0xcf,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd5,
-	0xa5,
-	0x7c,
-	0xf0,
-	0x03,
-	0x4c,
-	0x41,
-	0x1c,
-	0xad,
-	0xaa,
-	0x02,
-	0xc5,
-	0xd3,
-	0x90,
-	0x16,
-	0x38,
-	0xe5,
-	0xd3,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0xd3,
-	0x80,
-	0x21,
-	0xa5,
-	0xd3,
-	0x38,
-	0xed,
-	0xaa,
-	0x02,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xdf,
-	0x98,
-	0xe9,
-	0x00,
-	0x85,
-	0xe0,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xdf,
-	0xa5,
-	0xd3,
-	0xe5,
-	0xe0,
-	0x85,
-	0xd3,
-	0xad,
-	0xab,
-	0x02,
-	0xc5,
-	0xd4,
-	0x90,
-	0x16,
-	0x38,
-	0xe5,
-	0xd4,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0xd4,
-	0x80,
-	0x21,
-	0xa5,
-	0xd4,
-	0x38,
-	0xed,
-	0xab,
-	0x02,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xdf,
-	0x98,
-	0xe9,
-	0x00,
-	0x85,
-	0xe0,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xdf,
-	0xa5,
-	0xd4,
-	0xe5,
-	0xe0,
-	0x85,
-	0xd4,
-	0xad,
-	0xac,
-	0x02,
-	0xc5,
-	0xd5,
-	0x90,
-	0x16,
-	0x38,
-	0xe5,
-	0xd5,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x18,
-	0x69,
-	0x80,
-	0x98,
-	0x69,
-	0x00,
-	0x18,
-	0x65,
-	0xd5,
-	0x80,
-	0x21,
-	0xa5,
-	0xd5,
-	0x38,
-	0xed,
-	0xac,
-	0x02,
-	0x45,
-	0x81,
-	0x0a,
-	0xaa,
-	0x98,
-	0x2a,
-	0xa8,
-	0x8a,
-	0x38,
-	0xe9,
-	0x80,
-	0x85,
-	0xdf,
-	0x98,
-	0xe9,
-	0x00,
-	0x85,
-	0xe0,
-	0x38,
-	0xa9,
-	0x00,
-	0xe5,
-	0xdf,
-	0xa5,
-	0xd5,
-	0xe5,
-	0xe0,
-	0x85,
-	0xd5,
-	0xa0,
-	0x03,
-	0x53,
-	0xd3,
-	0x00,
-	0xaa,
-	0x02,
-	0x18,
-	0xa5,
-	0xd4,
-	0x65,
-	0xd3,
-	0xb0,
-	0x02,
-	0x80,
-	0x02,
-	0xa9,
-	0xff,
-	0x85,
-	0xd6,
-	0xfa,
-	0xa5,
-	0xd3,
-	0xdd,
-	0x71,
-	0x3c,
-	0x90,
-	0x16,
-	0xa9,
-	0x00,
-	0x85,
-	0xd8,
-	0xa5,
-	0xd3,
-	0xdd,
-	0x70,
-	0x3c,
-	0x90,
-	0x02,
-	0x80,
-	0x2a,
-	0xa5,
-	0xd6,
-	0xdd,
-	0x70,
-	0x3c,
-	0x90,
-	0x2f,
-	0x80,
-	0x27,
-	0xa5,
-	0xd6,
-	0xdd,
-	0x6f,
-	0x3c,
-	0x90,
-	0x2c,
-	0xa9,
-	0x01,
-	0x85,
-	0xd8,
-	0xa5,
-	0xd6,
-	0xdd,
-	0x70,
-	0x3c,
-	0x90,
-	0x02,
-	0x80,
-	0x13,
-	0xa5,
-	0xd5,
-	0xdd,
-	0x6e,
-	0x3c,
-	0x90,
-	0x12,
-	0xa9,
-	0x03,
-	0x85,
-	0xd9,
-	0x80,
-	0x27,
-	0xa9,
-	0x00,
-	0x85,
-	0xd9,
-	0x80,
-	0x21,
-	0xa9,
-	0x01,
-	0x85,
-	0xd9,
-	0x80,
-	0x1b,
-	0xa9,
-	0x02,
-	0x85,
-	0xd9,
-	0x80,
-	0x15,
-	0xa5,
-	0xd5,
-	0xdd,
-	0x6e,
-	0x3c,
-	0x90,
-	0x08,
-	0xa9,
-	0x03,
-	0x85,
-	0xd8,
-	0x85,
-	0xd9,
-	0x80,
-	0x06,
-	0xa9,
-	0x02,
-	0x85,
-	0xd8,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd7,
-	0xc5,
-	0xd8,
-	0xf0,
-	0x02,
-	0xb0,
-	0x0c,
-	0xa5,
-	0xd8,
-	0xf0,
-	0x1a,
-	0x85,
-	0xd9,
-	0xa5,
-	0xd7,
-	0x85,
-	0xd8,
-	0x80,
-	0x12,
-	0xa5,
-	0xd8,
-	0xc9,
-	0x02,
-	0xd0,
-	0x08,
-	0xa5,
-	0xd7,
-	0x85,
-	0xd9,
-	0x85,
-	0xd8,
-	0x80,
-	0x04,
-	0xa5,
-	0xd7,
-	0x85,
-	0xd9,
-	0xa5,
-	0x7c,
-	0xd0,
-	0x05,
-	0xad,
-	0xa9,
-	0x02,
-	0xd0,
-	0x14,
-	0xa9,
-	0x01,
-	0x8d,
-	0xae,
-	0x02,
-	0x8d,
-	0xaf,
-	0x02,
-	0xa5,
-	0xd8,
-	0x8d,
-	0xb4,
-	0x02,
-	0xa5,
-	0xd9,
-	0x8d,
-	0xb5,
-	0x02,
-	0x80,
-	0x3c,
-	0xa5,
-	0xd8,
-	0xcd,
-	0xb4,
-	0x02,
-	0xd0,
-	0x0d,
-	0xad,
-	0xae,
-	0x02,
-	0xcd,
-	0x9e,
-	0x3c,
-	0xb0,
-	0x0f,
-	0xee,
-	0xae,
-	0x02,
-	0x80,
-	0x06,
-	0x8d,
-	0xb4,
-	0x02,
-	0x9c,
-	0xae,
-	0x02,
-	0xa5,
-	0x82,
-	0x85,
-	0xd8,
-	0xa5,
-	0xd9,
-	0xcd,
-	0xb5,
-	0x02,
-	0xd0,
-	0x0d,
-	0xad,
-	0xaf,
-	0x02,
-	0xcd,
-	0x9e,
-	0x3c,
-	0xb0,
-	0x0f,
-	0xee,
-	0xaf,
-	0x02,
-	0x80,
-	0x06,
-	0x8d,
-	0xb5,
-	0x02,
-	0x9c,
-	0xaf,
-	0x02,
-	0xa5,
-	0x83,
-	0x85,
-	0xd9,
-	0xa9,
-	0x01,
-	0x8d,
-	0xa9,
-	0x02,
-	0xa5,
-	0xd8,
-	0x20,
-	0xae,
-	0x0c,
-	0x8d,
-	0xb6,
-	0x02,
-	0x8e,
-	0xb7,
-	0x02,
-	0xa5,
-	0xd9,
-	0x20,
-	0xae,
-	0x0c,
-	0x8d,
-	0xb8,
-	0x02,
-	0x8e,
-	0xb9,
-	0x02,
-	0xa2,
-	0x00,
-	0xa0,
-	0x00,
-	0xc4,
-	0xc4,
-	0xb0,
-	0x1e,
-	0xa5,
-	0xc5,
-	0x29,
-	0x10,
-	0xf0,
-	0x03,
-	0x38,
-	0x80,
-	0x01,
-	0x18,
-	0x3e,
-	0x08,
-	0x2c,
-	0x3e,
-	0x09,
-	0x2c,
-	0x3e,
-	0x0a,
-	0x2c,
-	0x3e,
-	0x0b,
-	0x2c,
-	0xc8,
-	0x18,
-	0x8a,
-	0x69,
-	0x10,
-	0xaa,
-	0x80,
-	0xde,
-	0xa0,
-	0x50,
-	0x53,
-	0xfc,
-	0x2b,
-	0x52,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0x60,
-	0x60,
-	0xa5,
-	0x4c,
-	0x45,
-	0xd0,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0x4d,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd5,
-	0xa5,
-	0x4e,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd6,
-	0xa5,
-	0x4f,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xd6,
-	0x85,
-	0xd6,
-	0x60,
-	0xa0,
-	0x04,
-	0x13,
-	0x54,
-	0x60,
-	0x4c,
-	0x00,
-	0xa0,
-	0x04,
-	0x13,
-	0x54,
-	0x60,
-	0x44,
-	0x00,
-	0xa0,
-	0x04,
-	0x13,
-	0x54,
-	0x60,
-	0x48,
-	0x00,
-	0xa0,
-	0x02,
-	0x13,
-	0x54,
-	0x60,
-	0x54,
-	0x00,
-	0x38,
-	0xa5,
-	0x44,
-	0xe5,
-	0x48,
-	0x85,
-	0x50,
-	0xa5,
-	0x45,
-	0xe5,
-	0x49,
-	0x85,
-	0x51,
-	0xa5,
-	0x46,
-	0xe5,
-	0x4a,
-	0x85,
-	0x52,
-	0xa5,
-	0x47,
-	0xe5,
-	0x4b,
-	0x85,
-	0x53,
-	0x18,
-	0xa5,
-	0xd1,
-	0x69,
-	0x10,
-	0x85,
-	0xd1,
-	0x90,
-	0x02,
-	0xe6,
-	0xd2,
-	0xa0,
-	0x02,
-	0x53,
-	0xd1,
-	0x00,
-	0x0c,
-	0x60,
-	0xad,
-	0x9d,
-	0x3c,
-	0xc5,
-	0x55,
-	0x90,
-	0x0c,
-	0xd0,
-	0x07,
-	0xad,
-	0x9c,
-	0x3c,
-	0xc5,
-	0x54,
-	0x90,
-	0x03,
-	0x4c,
-	0x9d,
-	0x1f,
-	0xa5,
-	0x4f,
-	0xd0,
-	0x2b,
-	0xa5,
-	0x54,
-	0x45,
-	0xc3,
-	0x85,
-	0xdb,
-	0x84,
-	0xdc,
-	0xa5,
-	0x55,
-	0x45,
-	0xc3,
-	0x18,
-	0x65,
-	0xdc,
-	0x85,
-	0xdc,
-	0x98,
-	0x69,
-	0x00,
-	0xc5,
-	0x4e,
-	0x90,
-	0x13,
-	0xd0,
-	0x0e,
-	0xa5,
-	0xdc,
-	0xc5,
-	0x4d,
-	0x90,
-	0x0b,
-	0xd0,
-	0x06,
-	0xa5,
-	0xdb,
-	0xc5,
-	0x4c,
-	0x90,
-	0x03,
-	0x4c,
-	0x9d,
-	0x1f,
-	0xe6,
-	0x37,
-	0xa5,
-	0x87,
-	0x29,
-	0x01,
-	0xf0,
-	0x07,
-	0x18,
-	0xa5,
-	0x73,
-	0xe5,
-	0xcb,
-	0x80,
-	0x02,
-	0xa5,
-	0xcb,
-	0x45,
-	0x7d,
-	0xa8,
-	0xb9,
-	0x37,
-	0x27,
-	0x4a,
-	0xa8,
-	0xb1,
-	0xd9,
-	0xb0,
-	0x04,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x0f,
-	0xa8,
-	0xad,
-	0xdd,
-	0x2b,
-	0xc9,
-	0x08,
-	0xf0,
-	0x17,
-	0xc9,
-	0x02,
-	0xf0,
-	0x09,
-	0xc9,
-	0x04,
-	0xf0,
-	0x0a,
-	0xb9,
-	0x50,
-	0x3c,
-	0x80,
-	0x0d,
-	0xb9,
-	0x4d,
-	0x3c,
-	0x80,
-	0x08,
-	0xb9,
-	0x4a,
-	0x3c,
-	0x80,
-	0x03,
-	0xb9,
-	0x47,
-	0x3c,
-	0x85,
-	0xce,
-	0xa5,
-	0x53,
-	0x29,
-	0x80,
-	0x85,
-	0xcd,
-	0xf0,
-	0x17,
-	0x38,
-	0xa9,
-	0x00,
-	0xaa,
-	0xe5,
-	0x50,
-	0x85,
-	0x50,
-	0x8a,
-	0xe5,
-	0x51,
-	0x85,
-	0x51,
-	0x8a,
-	0xe5,
-	0x52,
-	0x85,
-	0x52,
-	0x8a,
-	0xe5,
-	0x53,
-	0x85,
-	0x53,
-	0xa4,
-	0xcb,
-	0xb9,
-	0xd7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x37,
-	0x27,
-	0x4a,
-	0xa8,
-	0xb1,
-	0xd7,
-	0xb0,
-	0x04,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x4a,
-	0x29,
-	0x0f,
-	0xa8,
-	0xb9,
-	0x1d,
-	0x2b,
-	0x85,
-	0xd0,
-	0xa5,
-	0x50,
-	0x45,
-	0xd0,
-	0x85,
-	0x50,
-	0x84,
-	0xdf,
-	0xa5,
-	0x51,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xdf,
-	0x85,
-	0x51,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xdf,
-	0xa5,
-	0x52,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xdf,
-	0x85,
-	0x52,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xdf,
-	0xa5,
-	0x53,
-	0x45,
-	0xd0,
-	0x18,
-	0x65,
-	0xdf,
-	0x85,
-	0x53,
-	0xa5,
-	0xcd,
-	0xf0,
-	0x6a,
-	0xad,
-	0x65,
-	0x3c,
-	0x85,
-	0xd0,
-	0x20,
-	0x88,
-	0x1d,
-	0xa5,
-	0x53,
-	0xc5,
-	0xd6,
-	0x90,
-	0x27,
-	0xd0,
-	0x16,
-	0xa5,
-	0x52,
-	0xc5,
-	0xd5,
-	0x90,
-	0x1f,
-	0xd0,
-	0x0e,
-	0xa5,
-	0x51,
-	0xc5,
-	0xd4,
-	0x90,
-	0x17,
-	0xd0,
-	0x06,
-	0xa5,
-	0x50,
-	0xc5,
-	0xd3,
-	0x90,
-	0x0f,
-	0xe6,
-	0x38,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x3c,
-	0x85,
-	0x3c,
-	0x90,
-	0x7b,
-	0xe6,
-	0x3d,
-	0x80,
-	0x77,
-	0xad,
-	0x66,
-	0x3c,
-	0x85,
-	0xd0,
-	0x20,
-	0x88,
-	0x1d,
-	0xa5,
-	0x53,
-	0xc5,
-	0xd6,
-	0x90,
-	0x4d,
-	0xd0,
-	0x16,
-	0xa5,
-	0x52,
-	0xc5,
-	0xd5,
-	0x90,
-	0x45,
-	0xd0,
-	0x0e,
-	0xa5,
-	0x51,
-	0xc5,
-	0xd4,
-	0x90,
-	0x3d,
-	0xd0,
-	0x06,
-	0xa5,
-	0x50,
-	0xc5,
-	0xd3,
-	0x90,
-	0x35,
-	0xe6,
-	0x39,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x3e,
-	0x85,
-	0x3e,
-	0x90,
-	0x46,
-	0xe6,
-	0x3f,
-	0x80,
-	0x42,
-	0xad,
-	0x67,
-	0x3c,
-	0x85,
-	0xd0,
-	0x20,
-	0x88,
-	0x1d,
-	0xa5,
-	0xd6,
-	0xc5,
-	0x53,
-	0x90,
-	0x27,
-	0xd0,
-	0x16,
-	0xa5,
-	0xd5,
-	0xc5,
-	0x52,
-	0x90,
-	0x1f,
-	0xd0,
-	0x0e,
-	0xa5,
-	0xd4,
-	0xc5,
-	0x51,
-	0x90,
-	0x17,
-	0xd0,
-	0x06,
-	0xa5,
-	0xd3,
-	0xc5,
-	0x50,
-	0x90,
-	0x0f,
-	0xe6,
-	0x3a,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x40,
-	0x85,
-	0x40,
-	0x90,
-	0x11,
-	0xe6,
-	0x41,
-	0x80,
-	0x0d,
-	0xe6,
-	0x3b,
-	0x18,
-	0xa5,
-	0xce,
-	0x65,
-	0x42,
-	0x85,
-	0x42,
-	0x90,
-	0x02,
-	0xe6,
-	0x43,
-	0xa5,
-	0xc4,
-	0xd0,
-	0x01,
-	0x60,
-	0xa6,
-	0xcb,
-	0xbd,
-	0xf3,
-	0x2a,
-	0x25,
-	0x21,
-	0xd0,
-	0x01,
-	0x60,
-	0x85,
-	0xdd,
-	0xa2,
-	0x00,
-	0xa0,
-	0x00,
-	0xa9,
-	0x01,
-	0x85,
-	0xde,
-	0x25,
-	0xdd,
-	0xd0,
-	0x03,
-	0x4c,
-	0x36,
-	0x20,
-	0x18,
-	0xa5,
-	0x4c,
-	0x7d,
-	0xfc,
-	0x2b,
-	0x9d,
-	0xfc,
-	0x2b,
-	0xa5,
-	0x4d,
-	0x7d,
-	0xfd,
-	0x2b,
-	0x9d,
-	0xfd,
-	0x2b,
-	0xa5,
-	0x4e,
-	0x7d,
-	0xfe,
-	0x2b,
-	0x9d,
-	0xfe,
-	0x2b,
-	0xa5,
-	0x4f,
-	0x7d,
-	0xff,
-	0x2b,
-	0x9d,
-	0xff,
-	0x2b,
-	0x18,
-	0xa5,
-	0x44,
-	0x7d,
-	0x00,
-	0x2c,
-	0x9d,
-	0x00,
-	0x2c,
-	0xa5,
-	0x45,
-	0x7d,
-	0x01,
-	0x2c,
-	0x9d,
-	0x01,
-	0x2c,
-	0xa5,
-	0x46,
-	0x7d,
-	0x02,
-	0x2c,
-	0x9d,
-	0x02,
-	0x2c,
-	0xa5,
-	0x47,
-	0x7d,
-	0x03,
-	0x2c,
-	0x9d,
-	0x03,
-	0x2c,
-	0x18,
-	0xa5,
-	0x48,
-	0x7d,
-	0x04,
-	0x2c,
-	0x9d,
-	0x04,
-	0x2c,
-	0xa5,
-	0x49,
-	0x7d,
-	0x05,
-	0x2c,
-	0x9d,
-	0x05,
-	0x2c,
-	0xa5,
-	0x4a,
-	0x7d,
-	0x06,
-	0x2c,
-	0x9d,
-	0x06,
-	0x2c,
-	0xa5,
-	0x4b,
-	0x7d,
-	0x07,
-	0x2c,
-	0x9d,
-	0x07,
-	0x2c,
-	0x18,
-	0xa5,
-	0x54,
-	0x7d,
-	0x08,
-	0x2c,
-	0x9d,
-	0x08,
-	0x2c,
-	0xa5,
-	0x55,
-	0x7d,
-	0x09,
-	0x2c,
-	0x9d,
-	0x09,
-	0x2c,
-	0x90,
-	0x03,
-	0xfe,
-	0x0a,
-	0x2c,
-	0xc8,
-	0xc4,
-	0xc4,
-	0xb0,
-	0x0b,
-	0x18,
-	0x8a,
-	0x69,
-	0x10,
-	0xaa,
-	0xa5,
-	0xde,
-	0x0a,
-	0x4c,
-	0xb4,
-	0x1f,
-	0x60,
-	0xaa,
-	0xa5,
-	0x7a,
-	0xd0,
-	0x02,
-	0x80,
-	0x6d,
-	0xa5,
-	0x7b,
-	0xc9,
-	0x00,
-	0xf0,
-	0x67,
-	0x8a,
-	0x29,
-	0x01,
-	0xf0,
-	0x06,
-	0xa2,
-	0x38,
-	0xa9,
-	0x04,
-	0x80,
-	0x04,
-	0xa2,
-	0x38,
-	0xa9,
-	0x03,
-	0x8e,
-	0x0c,
-	0x60,
-	0x8d,
-	0x0d,
-	0x60,
-	0x85,
-	0xd2,
-	0x86,
-	0xd1,
-	0xa4,
-	0xbd,
-	0xb9,
-	0x03,
-	0x2b,
-	0x85,
-	0x21,
-	0xb9,
-	0xe7,
-	0x2a,
-	0xa8,
-	0xb9,
-	0x47,
-	0x27,
-	0x49,
-	0x04,
-	0x18,
-	0x69,
-	0x10,
-	0x85,
-	0xd7,
-	0xa9,
-	0x00,
-	0x69,
-	0x3c,
-	0x85,
-	0xd8,
-	0xa5,
-	0x87,
-	0x29,
-	0x02,
-	0xf0,
-	0x07,
-	0x18,
-	0xa5,
-	0x74,
-	0xe5,
-	0xbd,
-	0x80,
-	0x02,
-	0xa5,
-	0xbd,
-	0x45,
-	0x7e,
-	0xa8,
-	0xb9,
-	0x47,
-	0x27,
-	0x49,
-	0x04,
-	0x18,
-	0x69,
-	0x2f,
-	0x85,
-	0xd9,
-	0xa9,
-	0x00,
-	0x69,
-	0x3c,
-	0x85,
-	0xda,
-	0x64,
-	0xcb,
-	0xa6,
-	0x73,
-	0x86,
-	0xcc,
-	0x80,
-	0x02,
-	0xe6,
-	0xcb,
-	0x20,
-	0xb6,
-	0x1d,
-	0xc6,
-	0xcc,
-	0xd0,
-	0xf7,
-	0xe6,
-	0xbd,
-	0x60,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0xa2,
-	0x10,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0xa5,
-	0xd1,
-	0x38,
-	0xe5,
-	0xcb,
-	0xa8,
-	0xa5,
-	0xd2,
-	0xe9,
-	0x00,
-	0x90,
-	0x06,
-	0x85,
-	0xd2,
-	0x84,
-	0xd1,
-	0xe6,
-	0xcf,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0x18,
-	0xa5,
-	0xcf,
-	0x65,
-	0xd3,
-	0x85,
-	0xd3,
-	0xa2,
-	0x00,
-	0xa5,
-	0xd0,
-	0x10,
-	0x02,
-	0xa2,
-	0xff,
-	0x86,
-	0xcb,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0xa5,
-	0xd5,
-	0x65,
-	0xcb,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd6,
-	0x65,
-	0xcb,
-	0x85,
-	0xd6,
-	0x60,
-	0xa5,
-	0xcf,
-	0x45,
-	0xd1,
-	0x85,
-	0xd3,
-	0x84,
-	0xd4,
-	0xa5,
-	0xcf,
-	0x45,
-	0xd2,
-	0x18,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0x69,
-	0x00,
-	0x85,
-	0xd5,
-	0x64,
-	0xd6,
-	0xa5,
-	0xd0,
-	0x45,
-	0xd1,
-	0x18,
-	0x65,
-	0xd4,
-	0x85,
-	0xd4,
-	0x98,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0x90,
-	0x02,
-	0xe6,
-	0xd6,
-	0xa5,
-	0xd0,
-	0x45,
-	0xd2,
-	0x18,
-	0x65,
-	0xd5,
-	0x85,
-	0xd5,
-	0x98,
-	0x65,
-	0xd6,
-	0x85,
-	0xd6,
-	0x60,
-	0x20,
-	0x04,
-	0x21,
-	0xa5,
-	0xd2,
-	0x10,
-	0x0d,
-	0x38,
-	0xa5,
-	0xd5,
-	0xe5,
-	0xcf,
-	0x85,
-	0xd5,
-	0xa5,
-	0xd6,
-	0xe5,
-	0xd0,
-	0x85,
-	0xd6,
-	0x60,
-	0xfc,
-	0x49,
-	0x20,
-	0x98,
-	0x4a,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x10,
-	0xc0,
-	0x00,
-	0xd0,
-	0x09,
-	0x18,
-	0x65,
-	0xcb,
-	0xb0,
-	0x04,
-	0xc9,
-	0x7f,
-	0x90,
-	0x02,
-	0xa9,
-	0x7f,
-	0x60,
-	0xfc,
-	0x49,
-	0x10,
-	0x98,
-	0x4a,
-	0x69,
-	0x00,
-	0x85,
-	0xcb,
-	0x8a,
-	0x49,
-	0x08,
-	0x18,
-	0x65,
-	0xcb,
-	0xd0,
-	0x01,
-	0x3a,
-	0x60,
-	0x20,
-	0xa6,
-	0x21,
-	0x46,
-	0xd0,
-	0x66,
-	0xcf,
-	0x90,
-	0x06,
-	0xe6,
-	0xcf,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd0,
-	0x38,
-	0xa5,
-	0xd1,
-	0xe5,
-	0xcf,
-	0xa5,
-	0xd2,
-	0xe5,
-	0xd0,
-	0x30,
-	0x0a,
-	0xe6,
-	0xd3,
-	0xd0,
-	0x06,
-	0xe6,
-	0xd4,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd5,
-	0x60,
-	0x64,
-	0xd1,
-	0x64,
-	0xd2,
-	0x64,
-	0xcb,
-	0xa2,
-	0x18,
-	0x06,
-	0xd3,
-	0x26,
-	0xd4,
-	0x26,
-	0xd5,
-	0x26,
-	0xd1,
-	0x26,
-	0xd2,
-	0x26,
-	0xcb,
-	0xa5,
-	0xd1,
-	0x38,
-	0xe5,
-	0xcf,
-	0xa8,
-	0xa5,
-	0xd2,
-	0xe5,
-	0xd0,
-	0x85,
-	0xcc,
-	0xa5,
-	0xcb,
-	0xe9,
-	0x00,
-	0x90,
-	0x0a,
-	0x85,
-	0xcb,
-	0xa5,
-	0xcc,
-	0x85,
-	0xd2,
-	0x84,
-	0xd1,
-	0xe6,
-	0xd3,
-	0xca,
-	0xd0,
-	0xd5,
-	0x60,
-	0xa9,
-	0x00,
-	0xaa,
-	0x38,
-	0xe5,
-	0xd3,
-	0x85,
-	0xd3,
-	0x8a,
-	0xe5,
-	0xd4,
-	0x85,
-	0xd4,
-	0x8a,
-	0xe5,
-	0xd5,
-	0x85,
-	0xd5,
-	0x8a,
-	0xe5,
-	0xd6,
-	0x85,
-	0xd6,
-	0x8a,
-	0x38,
-	0xe5,
-	0xd7,
-	0x85,
-	0xd7,
-	0x8a,
-	0xe5,
-	0xd8,
-	0x85,
-	0xd8,
-	0x8a,
-	0xe5,
-	0xd9,
-	0x85,
-	0xd9,
-	0x8a,
-	0xe5,
-	0xda,
-	0x85,
-	0xda,
-	0x60,
-	0xa5,
-	0xd6,
-	0x05,
-	0xda,
-	0xf0,
-	0x2b,
-	0x38,
-	0xa5,
-	0xd6,
-	0xe5,
-	0xda,
-	0x30,
-	0x04,
-	0xa5,
-	0xd6,
-	0x80,
-	0x11,
-	0xa5,
-	0xda,
-	0x80,
-	0x0d,
-	0x26,
-	0xd4,
-	0x26,
-	0xd5,
-	0x26,
-	0xd6,
-	0x26,
-	0xd8,
-	0x26,
-	0xd9,
-	0x26,
-	0xda,
-	0x0a,
-	0x10,
-	0xf1,
-	0xa0,
-	0x02,
-	0x53,
-	0xd5,
-	0x00,
-	0xcf,
-	0x00,
-	0x53,
-	0xd9,
-	0x00,
-	0xd1,
-	0x00,
-	0x60,
-	0xa5,
-	0xd5,
-	0x05,
-	0xd9,
-	0xf0,
-	0x2b,
-	0x38,
-	0xa5,
-	0xd5,
-	0xe5,
-	0xd9,
-	0x30,
-	0x04,
-	0xa5,
-	0xd5,
-	0x80,
-	0x11,
-	0xa5,
-	0xd9,
-	0x80,
-	0x0d,
-	0x26,
-	0xd3,
-	0x26,
-	0xd4,
-	0x26,
-	0xd5,
-	0x26,
-	0xd7,
-	0x26,
-	0xd8,
-	0x26,
-	0xd9,
-	0x0a,
-	0x10,
-	0xf1,
-	0xa0,
-	0x02,
-	0x53,
-	0xd4,
-	0x00,
-	0xcf,
-	0x00,
-	0x53,
-	0xd8,
-	0x00,
-	0xd1,
-	0x00,
-	0x60,
-	0xa5,
-	0xd4,
-	0x30,
-	0x0e,
-	0xa5,
-	0xd8,
-	0x30,
-	0x0a,
-	0x06,
-	0xd3,
-	0x26,
-	0xd4,
-	0x06,
-	0xd7,
-	0x26,
-	0xd8,
-	0x80,
-	0xee,
-	0xa0,
-	0x02,
-	0x53,
-	0xd3,
-	0x00,
-	0xcf,
-	0x00,
-	0x53,
-	0xd7,
-	0x00,
-	0xd1,
-	0x00,
-	0x60,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xf8,
-	0xad,
-	0x08,
-	0x68,
-	0xc9,
-	0x01,
-	0xd0,
-	0x3d,
-	0xa5,
-	0x12,
-	0xf0,
-	0x17,
-	0x64,
-	0x12,
-	0xa5,
-	0x11,
-	0x09,
-	0x03,
-	0x85,
-	0x11,
-	0xa0,
-	0x48,
-	0x53,
-	0x0b,
-	0x02,
-	0x24,
-	0x2b,
-	0xad,
-	0xa4,
-	0x02,
-	0x8d,
-	0x6b,
-	0x2b,
-	0x80,
-	0x15,
-	0xe6,
-	0x12,
-	0xa5,
-	0x11,
-	0x09,
-	0x30,
-	0x85,
-	0x11,
-	0xa0,
-	0x48,
-	0x53,
-	0x0b,
-	0x02,
-	0x6c,
-	0x2b,
-	0xad,
-	0xa4,
-	0x02,
-	0x8d,
-	0xb3,
-	0x2b,
-	0x9c,
-	0x18,
-	0x68,
-	0xee,
-	0x18,
-	0x68,
-	0xa5,
-	0x10,
-	0xd0,
-	0x03,
-	0x20,
-	0xca,
-	0x26,
-	0x4c,
-	0x9f,
-	0x26,
-	0xa9,
-	0x01,
-	0x8d,
-	0x18,
-	0x68,
-	0x68,
-	0x68,
-	0x68,
-	0xa9,
-	0x03,
-	0x48,
-	0xa9,
-	0x00,
-	0x48,
-	0xba,
-	0xda,
-	0x40,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xf8,
-	0xad,
-	0x34,
-	0x60,
-	0xaa,
-	0x29,
-	0x03,
-	0xc9,
-	0x02,
-	0xd0,
-	0x0f,
-	0xda,
-	0x64,
-	0x10,
-	0x20,
-	0xca,
-	0x26,
-	0xfa,
-	0xa5,
-	0x7f,
-	0x29,
-	0x02,
-	0xf0,
-	0x07,
-	0x80,
-	0x26,
-	0x8a,
-	0x29,
-	0xf8,
-	0xf0,
-	0x2b,
-	0x8a,
-	0x29,
-	0x04,
-	0x48,
-	0x4a,
-	0x4a,
-	0x20,
-	0x47,
-	0x20,
-	0xa5,
-	0xbc,
-	0xf0,
-	0x13,
-	0xc6,
-	0xbc,
-	0x68,
-	0xd0,
-	0x07,
-	0xa9,
-	0x09,
-	0x8d,
-	0x38,
-	0x60,
-	0x80,
-	0x31,
-	0xa9,
-	0x0d,
-	0x8d,
-	0x38,
-	0x60,
-	0x80,
-	0x2a,
-	0x68,
-	0x20,
-	0x7d,
-	0x1a,
-	0xa9,
-	0x01,
-	0x8d,
-	0x24,
-	0x68,
-	0x80,
-	0x1f,
-	0xa5,
-	0x8c,
-	0xf0,
-	0x1b,
-	0x3a,
-	0x85,
-	0x8c,
-	0x8a,
-	0x29,
-	0x04,
-	0x48,
-	0x4a,
-	0x4a,
-	0x20,
-	0x05,
-	0x1a,
-	0x68,
-	0xd0,
-	0x07,
-	0xa9,
-	0x01,
-	0x8d,
-	0x38,
-	0x60,
-	0x80,
-	0x05,
-	0xa9,
-	0x05,
-	0x8d,
-	0x38,
-	0x60,
-	0x4c,
-	0x9f,
-	0x26,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xee,
-	0xa5,
-	0x02,
-	0xd0,
-	0x03,
-	0xee,
-	0xa6,
-	0x02,
-	0xa0,
-	0x4f,
-	0x9c,
-	0x52,
-	0x02,
-	0x13,
-	0x52,
-	0x02,
-	0x53,
-	0x02,
-	0x9c,
-	0x24,
-	0x68,
-	0xee,
-	0x24,
-	0x68,
-	0x64,
-	0x10,
-	0x20,
-	0xca,
-	0x26,
-	0xa9,
-	0x01,
-	0x8d,
-	0x04,
-	0x60,
-	0x4c,
-	0xa6,
-	0x26,
-	0x08,
-	0x78,
-	0x68,
-	0x8a,
-	0x29,
-	0xf0,
-	0xf0,
-	0x09,
-	0x8a,
-	0x29,
-	0x0f,
-	0xf0,
-	0x22,
-	0xa5,
-	0x12,
-	0xd0,
-	0x1e,
-	0x8a,
-	0x29,
-	0xf0,
-	0x85,
-	0x11,
-	0x64,
-	0x14,
-	0x8a,
-	0x29,
-	0x02,
-	0x85,
-	0x15,
-	0xa9,
-	0x28,
-	0x8d,
-	0xae,
-	0x2c,
-	0x64,
-	0x6f,
-	0x64,
-	0x70,
-	0xa0,
-	0x48,
-	0x53,
-	0x24,
-	0x2b,
-	0xb4,
-	0x2b,
-	0x80,
-	0x22,
-	0x8a,
-	0x29,
-	0x0f,
-	0x85,
-	0x11,
-	0xa9,
-	0x01,
-	0x85,
-	0x14,
-	0x8a,
-	0x29,
-	0x20,
-	0x85,
-	0x15,
-	0xa9,
-	0x28,
-	0x8d,
-	0x11,
-	0x2d,
-	0xa9,
-	0x38,
-	0x85,
-	0x6f,
-	0xa9,
-	0x03,
-	0x85,
-	0x70,
-	0xa0,
-	0x48,
-	0x53,
-	0x6c,
-	0x2b,
-	0xb4,
-	0x2b,
-	0x58,
-	0xa5,
-	0x15,
-	0xd0,
-	0x38,
-	0xa0,
-	0x70,
-	0xa5,
-	0x14,
-	0xd0,
-	0x0e,
-	0x53,
-	0xbf,
-	0x29,
-	0x9f,
-	0x2a,
-	0xa0,
-	0x63,
-	0x53,
-	0x4c,
-	0x2c,
-	0x65,
-	0x00,
-	0x80,
-	0x0c,
-	0x53,
-	0x2f,
-	0x2a,
-	0x9f,
-	0x2a,
-	0xa0,
-	0x63,
-	0x53,
-	0xaf,
-	0x2c,
-	0x65,
-	0x00,
-	0xa5,
-	0x72,
-	0xcd,
-	0xa8,
-	0x02,
-	0xd0,
-	0x0b,
-	0xa5,
-	0x71,
-	0xcd,
-	0xa7,
-	0x02,
-	0xd0,
-	0x04,
-	0xa9,
-	0x00,
-	0x80,
-	0x02,
-	0xa9,
-	0x01,
-	0x85,
-	0x7c,
-	0xa5,
-	0x15,
-	0x20,
-	0x1b,
-	0x04,
-	0x85,
-	0xc7,
-	0xf0,
-	0x03,
-	0x4c,
-	0xa5,
-	0x24,
-	0x64,
-	0x8d,
-	0x64,
-	0xbd,
-	0xa0,
-	0x02,
-	0x53,
-	0x6f,
-	0x00,
-	0x30,
-	0x60,
-	0xa9,
-	0x00,
-	0x8d,
-	0x0c,
-	0x60,
-	0x9c,
-	0x0d,
-	0x60,
-	0xa5,
-	0x73,
-	0x0a,
-	0xa8,
-	0x43,
-	0x9f,
-	0x2a,
-	0x54,
-	0x60,
-	0xa9,
-	0x20,
-	0x8d,
-	0x0c,
-	0x60,
-	0x9c,
-	0x0d,
-	0x60,
-	0xa5,
-	0x74,
-	0x0a,
-	0xa8,
-	0x43,
-	0xbf,
-	0x2a,
-	0x54,
-	0x60,
-	0xa5,
-	0x74,
-	0x85,
-	0x8c,
-	0x3a,
-	0x85,
-	0xbc,
-	0xa9,
-	0x02,
-	0x48,
-	0x20,
-	0x05,
-	0x1a,
-	0x68,
-	0xc6,
-	0x8c,
-	0xf0,
-	0x03,
-	0x3a,
-	0xd0,
-	0xf4,
-	0xa5,
-	0x14,
-	0xd0,
-	0x20,
-	0xa0,
-	0x93,
-	0x53,
-	0x18,
-	0x29,
-	0xf2,
-	0x27,
-	0xa0,
-	0x07,
-	0x53,
-	0x1d,
-	0x2b,
-	0x0f,
-	0x2b,
-	0xa0,
-	0x70,
-	0x53,
-	0x9f,
-	0x2a,
-	0xbf,
-	0x29,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0x4c,
-	0x2c,
-	0xa2,
-	0x00,
-	0x80,
-	0x38,
-	0xa0,
-	0x93,
-	0x53,
-	0x18,
-	0x29,
-	0x85,
-	0x28,
-	0xa0,
-	0x07,
-	0x53,
-	0x1d,
-	0x2b,
-	0x16,
-	0x2b,
-	0xa0,
-	0x70,
-	0x53,
-	0x9f,
-	0x2a,
-	0x2f,
-	0x2a,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0xaf,
-	0x2c,
-	0xa2,
-	0x01,
-	0x80,
-	0x18,
-	0xa6,
-	0x14,
-	0xd0,
-	0x0b,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0x4c,
-	0x2c,
-	0xa2,
-	0x00,
-	0x80,
-	0x09,
-	0xa0,
-	0x63,
-	0x53,
-	0x65,
-	0x00,
-	0xaf,
-	0x2c,
-	0xa2,
-	0x01,
-	0xa5,
-	0x15,
-	0xf0,
-	0x04,
-	0x86,
-	0x13,
-	0x64,
-	0x15,
-	0x9c,
-	0x1c,
-	0x68,
-	0xee,
-	0x1c,
-	0x68,
-	0x60,
-	0xf8,
-	0xa6,
-	0x11,
-	0xda,
-	0xa6,
-	0x11,
-	0xf0,
-	0x05,
-	0x20,
-	0x87,
-	0x23,
-	0x80,
-	0xf7,
-	0xfa,
-	0xf0,
-	0x0f,
-	0xad,
-	0xba,
-	0x02,
-	0xf0,
-	0x0a,
-	0xa0,
-	0x02,
-	0x53,
-	0x71,
-	0x00,
-	0x09,
-	0x02,
-	0x20,
-	0x06,
-	0x25,
-	0x9c,
-	0xe9,
-	0x27,
-	0x4c,
-	0xbc,
-	0x26,
-	0x5a,
-	0xda,
-	0x48,
-	0x20,
-	0x3d,
-	0x26,
-	0x48,
-	0xf8,
-	0xad,
-	0x0c,
-	0x68,
-	0xc9,
-	0x01,
-	0xd0,
-	0x03,
-	0x20,
-	0x06,
-	0x25,
-	0x4c,
-	0x9f,
-	0x26,
-	0x9c,
-	0x20,
-	0x68,
-	0x9c,
-	0x24,
-	0x68,
-	0x9c,
-	0x28,
-	0x68,
-	0xa2,
-	0x00,
-	0xad,
-	0x0a,
-	0x02,
-	0xcd,
-	0x59,
-	0x2c,
-	0xd0,
-	0x09,
-	0xad,
-	0x09,
-	0x02,
-	0xcd,
-	0x58,
-	0x2c,
-	0xd0,
-	0x01,
-	0xe8,
-	0xad,
-	0x0a,
-	0x02,
-	0xcd,
-	0xbc,
-	0x2c,
-	0xd0,
-	0x0a,
-	0xad,
-	0x09,
-	0x02,
-	0xcd,
-	0xbb,
-	0x2c,
-	0xd0,
-	0x02,
-	0xe8,
-	0xe8,
-	0xe0,
-	0x00,
-	0xd0,
-	0x06,
-	0xa9,
-	0x04,
-	0x85,
-	0xc7,
-	0x80,
-	0x46,
-	0xe0,
-	0x01,
-	0xf0,
-	0x08,
-	0xe0,
-	0x02,
-	0xf0,
-	0x22,
-	0xa5,
-	0x13,
-	0xd0,
-	0x1e,
-	0xa0,
-	0x63,
-	0x53,
-	0x4c,
-	0x2c,
-	0x65,
-	0x00,
-	0xa0,
-	0x93,
-	0x53,
-	0xf2,
-	0x27,
-	0x18,
-	0x29,
-	0xa0,
-	0x07,
-	0x53,
-	0x0f,
-	0x2b,
-	0x1d,
-	0x2b,
-	0xa0,
-	0x38,
-	0x53,
-	0xf7,
-	0x29,
-	0xd7,
-	0x2a,
-	0x80,
-	0x1c,
-	0xa0,
-	0x63,
-	0x53,
-	0xaf,
-	0x2c,
-	0x65,
-	0x00,
-	0xa0,
-	0x93,
-	0x53,
-	0x85,
-	0x28,
-	0x18,
-	0x29,
-	0xa0,
-	0x07,
-	0x53,
-	0x16,
-	0x2b,
-	0x1d,
-	0x2b,
-	0xa0,
-	0x38,
-	0x53,
-	0x67,
-	0x2a,
-	0xd7,
-	0x2a,
-	0xa5,
-	0x11,
-	0xae,
-	0xae,
-	0x2c,
-	0xe0,
-	0x00,
-	0xf0,
-	0x0c,
-	0xe0,
-	0x28,
-	0xd0,
-	0x0a,
-	0xa6,
-	0x15,
-	0xe0,
-	0x00,
-	0xf0,
-	0x02,
-	0x09,
-	0x03,
-	0x09,
-	0x01,
-	0xae,
-	0x11,
-	0x2d,
-	0xe0,
-	0x00,
-	0xf0,
-	0x0c,
-	0xe0,
-	0x28,
-	0xd0,
-	0x0a,
-	0xa6,
-	0x15,
-	0xe0,
-	0x00,
-	0xf0,
-	0x02,
-	0x09,
-	0x30,
-	0x09,
-	0x10,
-	0x85,
-	0x11,
-	0xa5,
-	0xc7,
-	0xf0,
-	0x0f,
-	0xc9,
-	0x28,
-	0xd0,
-	0x02,
-	0xa9,
-	0x04,
-	0x8d,
-	0x08,
-	0x02,
-	0xa9,
-	0x01,
-	0x8d,
-	0x28,
-	0x68,
-	0x60,
-	0x8d,
-	0x08,
-	0x02,
-	0xa0,
-	0x03,
-	0x53,
-	0x84,
-	0x00,
-	0xb0,
-	0x02,
-	0xa0,
-	0x02,
-	0x53,
-	0x71,
-	0x00,
-	0xa7,
-	0x02,
-	0xa5,
-	0xc5,
-	0x8d,
-	0xbc,
-	0x02,
-	0xa5,
-	0xc6,
-	0x8d,
-	0xbb,
-	0x02,
-	0x20,
-	0x6f,
-	0x18,
-	0xa9,
-	0x02,
-	0x8d,
-	0x38,
-	0x60,
-	0xa9,
-	0x01,
-	0x8d,
-	0x38,
-	0x60,
-	0xa9,
-	0x05,
-	0x8d,
-	0x38,
-	0x60,
-	0xa9,
-	0x09,
-	0x8d,
-	0x38,
-	0x60,
-	0xa5,
-	0x7f,
-	0x29,
-	0x02,
-	0xd0,
-	0x0e,
-	0xa9,
-	0x0d,
-	0x8d,
-	0x38,
-	0x60,
-	0xa0,
-	0x0c,
-	0x64,
-	0x37,
-	0x13,
-	0x37,
-	0x00,
-	0x38,
-	0x00,
-	0x18,
-	0xad,
-	0xa2,
-	0x02,
-	0x69,
-	0x01,
-	0x8d,
-	0xa2,
-	0x02,
-	0xad,
-	0xa3,
-	0x02,
-	0x69,
-	0x00,
-	0x8d,
-	0xa3,
-	0x02,
-	0xa5,
-	0x7a,
-	0x8d,
-	0xad,
-	0x02,
-	0xa5,
-	0x7c,
-	0x8d,
-	0xb3,
-	0x02,
-	0xa0,
-	0x4f,
-	0x9c,
-	0xfc,
-	0x2b,
-	0x13,
-	0xfc,
-	0x2b,
-	0xfd,
-	0x2b,
-	0x9c,
-	0xe9,
-	0x27,
-	0xa9,
-	0x01,
-	0x8d,
-	0x20,
-	0x68,
-	0x85,
-	0x10,
-	0x64,
-	0xc7,
-	0x60,
-	0xba,
-	0x08,
-	0x78,
-	0x68,
-	0x48,
-	0x29,
-	0x1c,
-	0x85,
-	0xca,
-	0x86,
-	0xc8,
-	0xa9,
-	0x01,
-	0x85,
-	0xc9,
-	0xa0,
-	0x06,
-	0xb1,
-	0xc8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc5,
-	0xca,
-	0x90,
-	0x08,
-	0x7a,
-	0xa0,
-	0x09,
-	0xb1,
-	0xc8,
-	0x48,
-	0x29,
-	0x1c,
-	0xc9,
-	0x00,
-	0xd0,
-	0x38,
-	0xa0,
-	0x03,
-	0xb1,
-	0xc8,
-	0xe0,
-	0x7f,
-	0xb0,
-	0x18,
-	0x8d,
-	0xea,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xeb,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xec,
-	0x27,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0xed,
-	0x27,
-	0x80,
-	0x16,
-	0x8d,
-	0xee,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xef,
-	0x27,
-	0xc8,
-	0xb1,
-	0xc8,
-	0x8d,
-	0xf0,
-	0x27,
-	0x8a,
-	0x18,
-	0x69,
-	0x05,
-	0x8d,
-	0xf1,
-	0x27,
-	0xa9,
-	0x00,
-	0xfa,
-	0x28,
-	0xf8,
-	0x60,
-	0x68,
-	0xf0,
-	0x04,
-	0x68,
-	0xfa,
-	0x7a,
-	0x40,
-	0x08,
-	0x78,
-	0x68,
-	0xad,
-	0xe9,
-	0x27,
-	0xf0,
-	0x0e,
-	0xae,
-	0xed,
-	0x27,
-	0x9a,
-	0xad,
-	0xea,
-	0x27,
-	0xae,
-	0xeb,
-	0x27,
-	0xac,
-	0xec,
-	0x27,
-	0x40,
-	0xae,
-	0xf1,
-	0x27,
-	0x9a,
-	0xad,
-	0xee,
-	0x27,
-	0xae,
-	0xef,
-	0x27,
-	0xac,
-	0xf0,
-	0x27,
-	0x40,
-	0x08,
-	0x78,
-	0xad,
-	0xe9,
-	0x27,
-	0xd0,
-	0x1f,
-	0x1a,
-	0x8d,
-	0xe9,
-	0x27,
-	0xa9,
-	0x7c,
-	0x8d,
-	0xed,
-	0x27,
-	0x9c,
-	0xea,
-	0x27,
-	0x9c,
-	0xeb,
-	0x27,
-	0x9c,
-	0xec,
-	0x27,
-	0xa9,
-	0x24,
-	0x8d,
-	0x7f,
-	0x01,
-	0xa9,
-	0xcc,
-	0x8d,
-	0x7e,
-	0x01,
-	0x9c,
-	0x7d,
-	0x01,
-	0x28,
-	0x60,
-	0x64,
-	0xd3,
-	0x64,
-	0xd4,
-	0xa2,
-	0x10,
-	0x06,
-	0xcf,
-	0x26,
-	0xd0,
-	0x26,
-	0xd3,
-	0x26,
-	0xd4,
-	0xa5,
-	0xd3,
-	0x38,
-	0xe5,
-	0xd1,
-	0xa8,
-	0xa5,
-	0xd4,
-	0xe5,
-	0xd2,
-	0x90,
-	0x06,
-	0x85,
-	0xd4,
-	0x84,
-	0xd3,
-	0xe6,
-	0xcf,
-	0xca,
-	0xd0,
-	0xe3,
-	0x60,
-	0x20,
-	0xf2,
-	0x26,
-	0x46,
-	0xd2,
-	0x66,
-	0xd1,
-	0x90,
-	0x06,
-	0xe6,
-	0xd1,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd2,
-	0x38,
-	0xa5,
-	0xd3,
-	0xe5,
-	0xd1,
-	0xa5,
-	0xd4,
-	0xe5,
-	0xd2,
-	0x30,
-	0x06,
-	0xe6,
-	0xcf,
-	0xd0,
-	0x02,
-	0xe6,
-	0xd0,
-	0x60,
-	0x00,
-	0x01,
-	0x02,
-	0x03,
-	0x04,
-	0x05,
-	0x06,
-	0x07,
-	0x07,
-	0x06,
-	0x05,
-	0x04,
-	0x03,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x01,
-	0x02,
-	0x03,
-	0x04,
-	0x05,
-	0x05,
-	0x04,
-	0x03,
-	0x02,
-	0x01,
-	0x00,
-	0x00,
-	0x00,
-	0x01,
-	0x81,
-	0x02,
-	0x42,
-	0x82,
-	0xc2,
-	0x03,
-	0x23,
-	0x43,
-	0x63,
-	0x83,
-	0xa3,
-	0xc3,
-	0xe3,
-	0x04,
-	0x14,
-	0x24,
-	0x34,
-	0x44,
-	0x54,
-	0x64,
-	0x74,
-	0x84,
-	0x94,
-	0xa4,
-	0xb4,
-	0xc4,
-	0xd4,
-	0xe4,
-	0xf4,
-	0x05,
-	0x05,
-	0x15,
-	0x15,
-	0x25,
-	0x25,
-	0x35,
-	0x35,
-	0x45,
-	0x45,
-	0x55,
-	0x55,
-	0x65,
-	0x65,
-	0x75,
-	0x75,
-	0x85,
-	0x85,
-	0x95,
-	0x95,
-	0xa5,
-	0xa5,
-	0xb5,
-	0xb5,
-	0xc5,
-	0xc5,
-	0xd5,
-	0xd5,
-	0xe5,
-	0xe5,
-	0xf5,
-	0xf5,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x3f,
-	0x39,
-	0x33,
-	0x2f,
-	0x2b,
-	0x27,
-	0x25,
-	0x22,
-	0x20,
-	0x1e,
-	0x1c,
-	0x1b,
-	0x1a,
-	0x18,
-	0x17,
-	0x16,
-	0x15,
-	0x14,
-	0x14,
-	0x13,
-	0x12,
-	0x12,
-	0x11,
-	0x11,
-	0x10,
-	0x10,
-	0x0f,
-	0x0f,
-	0x0e,
-	0x0e,
-	0x0d,
-	0x0d,
-	0x0d,
-	0x0c,
-	0x0c,
-	0x0c,
-	0x0c,
-	0x0b,
-	0x0b,
-	0x0b,
-	0x0b,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x0a,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x09,
-	0x08,
-	0x08,
-	0x08,
-};
-
-struct yushan_reg_u_code_t yushan_u_code_r2 = {
-	.pdpcode_first_addr = 0x0234,
-	.pdpcode = &pdpcode_u_1_7[0],
-	.pdpcode_size = ARRAY_SIZE(pdpcode_u_1_7),
-
-	.pdpBootAddr  = 0x1a00,
-	.pdpStartAddr = 0x0234,
-
-	.dppcode_first_addr = 0x0300,
-	.dppcode = &dppcode_u_1_7[0],
-	.dppcode_size = ARRAY_SIZE(dppcode_u_1_7),
-
-	.dppBootAddr  = 0xd000,
-	.dppStartAddr = 0x0300,
-
-	.dopcode_first_addr = 0x0300,
-	.dopcode = &dopcode_u_1_7[0],
-	.dopcode_size = ARRAY_SIZE(dopcode_u_1_7),
-
-	.dopBootAddr  = 0x6800,
-	.dopStartAddr = 0x0300,
-
-
-};
-
diff --git a/drivers/media/video/msm/rawchip/yushan_u_code_r3.c b/drivers/media/video/msm/rawchip/yushan_u_code_r3.c
deleted file mode 100644
index 1a785eb..0000000
--- a/drivers/media/video/msm/rawchip/yushan_u_code_r3.c
+++ /dev/null
@@ -1,36251 +0,0 @@
-/* Copyright (c) 2009, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
- * 02110-1301, USA.
- *
- */
-
-#include <linux/kernel.h>
-#include "Yushan_HTC_Functions.h"
-
-uint8_t pdpcode_u_1_8[] =
-{
-0x78,
-0xa2,
-0xff,
-0x9a,
-0x9c,
-0x14,
-0x1a,
-0x9c,
-0x18,
-0x1a,
-0x9c,
-0x20,
-0x1a,
-0x9c,
-0x24,
-0x1a,
-0x64,
-0x00,
-0xa0,
-0xff,
-0x13,
-0x00,
-0x00,
-0x01,
-0x00,
-0x13,
-0x00,
-0x00,
-0x00,
-0x01,
-0xa0,
-0x34,
-0x13,
-0x00,
-0x00,
-0x00,
-0x02,
-0xb8,
-0xa0,
-0x04,
-0x53,
-0xa1,
-0x0d,
-0x00,
-0x02,
-0xa0,
-0x03,
-0x53,
-0xd7,
-0x0d,
-0x04,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x07,
-0x02,
-0xcd,
-0xd9,
-0x0d,
-0xf0,
-0x04,
-0xa2,
-0x03,
-0x80,
-0x10,
-0xa2,
-0x02,
-0xad,
-0x00,
-0x18,
-0xc9,
-0x5b,
-0xd0,
-0x07,
-0xad,
-0x01,
-0x18,
-0xc9,
-0xe6,
-0xf0,
-0x08,
-0x8e,
-0x08,
-0x02,
-0xee,
-0x14,
-0x1a,
-0x80,
-0x18,
-0xa0,
-0x0e,
-0x53,
-0x93,
-0x0d,
-0x02,
-0x00,
-0xa9,
-0x04,
-0x85,
-0xa0,
-0x85,
-0xbf,
-0xa0,
-0x05,
-0x53,
-0xa5,
-0x0d,
-0x2e,
-0x02,
-0x58,
-0xee,
-0x14,
-0x1a,
-0x5c,
-0x80,
-0xfd,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xde,
-0x0c,
-0x48,
-0xa9,
-0x01,
-0xa0,
-0x34,
-0xa6,
-0xcf,
-0xf0,
-0x0b,
-0x53,
-0x00,
-0x02,
-0x35,
-0x01,
-0x8d,
-0x69,
-0x01,
-0x3a,
-0x80,
-0x08,
-0x53,
-0x00,
-0x02,
-0x00,
-0x01,
-0x8d,
-0x34,
-0x01,
-0x85,
-0xcf,
-0x9c,
-0x08,
-0x02,
-0x9c,
-0x18,
-0x1a,
-0xee,
-0x18,
-0x1a,
-0x20,
-0x6b,
-0x0d,
-0x4c,
-0x40,
-0x0d,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xde,
-0x0c,
-0x48,
-0xad,
-0x34,
-0x18,
-0x29,
-0x03,
-0xc9,
-0x02,
-0xd0,
-0x0e,
-0x9c,
-0x24,
-0x1a,
-0xee,
-0x24,
-0x1a,
-0xad,
-0x33,
-0x02,
-0xf0,
-0x03,
-0x20,
-0x6b,
-0x0d,
-0x4c,
-0x40,
-0x0d,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xde,
-0x0c,
-0x48,
-0x9c,
-0x24,
-0x1a,
-0xee,
-0x24,
-0x1a,
-0x4c,
-0x40,
-0x0d,
-0x40,
-0xb9,
-0x28,
-0x00,
-0xd0,
-0x4d,
-0xb9,
-0x27,
-0x00,
-0xc9,
-0x08,
-0xb0,
-0x46,
-0x1a,
-0x4a,
-0xb0,
-0x3f,
-0x85,
-0xeb,
-0x98,
-0x4a,
-0xa8,
-0xb9,
-0x1d,
-0x00,
-0x4a,
-0xb0,
-0x40,
-0xb9,
-0x21,
-0x00,
-0xaa,
-0x4a,
-0x90,
-0x36,
-0x8a,
-0xf9,
-0xda,
-0x0d,
-0xb9,
-0x22,
-0x00,
-0xf9,
-0xdb,
-0x0d,
-0xb0,
-0x27,
-0x8a,
-0xf9,
-0x1d,
-0x00,
-0xaa,
-0xb9,
-0x22,
-0x00,
-0xf9,
-0x1e,
-0x00,
-0x90,
-0x23,
-0xe8,
-0xd0,
-0x01,
-0x1a,
-0xa4,
-0xeb,
-0x20,
-0xff,
-0x0a,
-0xe8,
-0xd0,
-0x01,
-0x1a,
-0x4a,
-0xa8,
-0x8a,
-0x6a,
-0xa2,
-0x00,
-0x60,
-0xa2,
-0x15,
-0x60,
-0xa9,
-0x13,
-0x60,
-0xa2,
-0x0b,
-0x60,
-0xa2,
-0x0f,
-0x60,
-0xa2,
-0x0d,
-0x60,
-0xa2,
-0x11,
-0x60,
-0xf8,
-0xa5,
-0xcf,
-0x85,
-0xf7,
-0xa0,
-0x34,
-0xa5,
-0xf7,
-0xd0,
-0x12,
-0xad,
-0x69,
-0x01,
-0xd0,
-0x03,
-0x4c,
-0x25,
-0x04,
-0x53,
-0x35,
-0x01,
-0x10,
-0x00,
-0x9c,
-0x69,
-0x01,
-0x80,
-0x10,
-0xad,
-0x34,
-0x01,
-0xd0,
-0x03,
-0x4c,
-0x25,
-0x04,
-0x53,
-0x00,
-0x01,
-0x10,
-0x00,
-0x9c,
-0x34,
-0x01,
-0x64,
-0x63,
-0xa0,
-0x00,
-0x20,
-0x0e,
-0x03,
-0xf0,
-0x07,
-0x64,
-0x45,
-0x64,
-0x46,
-0x8a,
-0x80,
-0x59,
-0x85,
-0x45,
-0x84,
-0x46,
-0xa0,
-0x04,
-0x20,
-0x0e,
-0x03,
-0xf0,
-0x08,
-0x8a,
-0x1a,
-0x80,
-0x4a,
-0xa9,
-0x21,
-0x80,
-0x46,
-0x85,
-0x47,
-0x84,
-0x48,
-0x38,
-0xa5,
-0x2e,
-0xed,
-0xdf,
-0x0d,
-0xa5,
-0x2f,
-0xed,
-0xe0,
-0x0d,
-0x90,
-0xeb,
-0xad,
-0xe1,
-0x0d,
-0xe5,
-0x2e,
-0xad,
-0xe2,
-0x0d,
-0xe5,
-0x2f,
-0x90,
-0xdf,
-0xa0,
-0x02,
-0x53,
-0x2e,
-0x00,
-0xe6,
-0x00,
-0x20,
-0x1c,
-0x0c,
-0xa0,
-0x02,
-0x53,
-0xe6,
-0x00,
-0x2e,
-0x00,
-0xa5,
-0x1b,
-0xaa,
-0x29,
-0x01,
-0xd0,
-0x04,
-0xa2,
-0x38,
-0x86,
-0x1b,
-0x20,
-0x50,
-0x06,
-0xd0,
-0x08,
-0x20,
-0x6b,
-0x09,
-0xd0,
-0x03,
-0x20,
-0x0b,
-0x0a,
-0x85,
-0x63,
-0xa0,
-0x1f,
-0xa2,
-0x04,
-0xa5,
-0xf7,
-0xf0,
-0x09,
-0x86,
-0xbf,
-0x53,
-0x45,
-0x00,
-0xa1,
-0x00,
-0x80,
-0x07,
-0x86,
-0xa0,
-0x53,
-0x45,
-0x00,
-0x82,
-0x00,
-0x9c,
-0x1c,
-0x1a,
-0xee,
-0x1c,
-0x1a,
-0x18,
-0xad,
-0x69,
-0x01,
-0x6d,
-0x34,
-0x01,
-0xf0,
-0x0a,
-0xa5,
-0xf7,
-0x3a,
-0x29,
-0x01,
-0x85,
-0xf7,
-0x4c,
-0x74,
-0x03,
-0x9c,
-0x6a,
-0x01,
-0xad,
-0x33,
-0x02,
-0xf0,
-0x10,
-0xa0,
-0x02,
-0x53,
-0x45,
-0x00,
-0x09,
-0x02,
-0x0e,
-0x09,
-0x02,
-0x2e,
-0x0a,
-0x02,
-0x20,
-0x6d,
-0x04,
-0x4c,
-0x5d,
-0x0d,
-0xa9,
-0x01,
-0xc4,
-0xf5,
-0xd0,
-0x04,
-0xe4,
-0xf4,
-0xf0,
-0x01,
-0x1a,
-0x3a,
-0x60,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xde,
-0x0c,
-0x48,
-0x20,
-0x6d,
-0x04,
-0x4c,
-0x40,
-0x0d,
-0xad,
-0x0a,
-0x02,
-0x4a,
-0x85,
-0xf5,
-0xad,
-0x09,
-0x02,
-0x6a,
-0xb0,
-0x46,
-0x85,
-0xf4,
-0x64,
-0xe4,
-0xa4,
-0x83,
-0xa6,
-0x82,
-0x20,
-0x53,
-0x04,
-0xd0,
-0x02,
-0xe6,
-0xe4,
-0xa4,
-0xa2,
-0xa6,
-0xa1,
-0x20,
-0x53,
-0x04,
-0xd0,
-0x04,
-0xe6,
-0xe4,
-0xe6,
-0xe4,
-0xa5,
-0xe4,
-0xf0,
-0x26,
-0xa0,
-0x1e,
-0xc9,
-0x01,
-0xf0,
-0x07,
-0x4a,
-0x90,
-0x0f,
-0xa5,
-0xcf,
-0xd0,
-0x0b,
-0xa5,
-0xa0,
-0xd0,
-0x17,
-0x53,
-0x82,
-0x00,
-0x64,
-0x00,
-0x80,
-0x09,
-0xa5,
-0xbf,
-0xd0,
-0x0c,
-0x53,
-0xa1,
-0x00,
-0x64,
-0x00,
-0x20,
-0xf8,
-0x04,
-0x80,
-0x02,
-0xa9,
-0x05,
-0x8d,
-0x08,
-0x02,
-0xa2,
-0x28,
-0xa8,
-0xd0,
-0x0a,
-0xee,
-0x31,
-0x02,
-0xd0,
-0x03,
-0xee,
-0x32,
-0x02,
-0xa2,
-0x20,
-0x9e,
-0x00,
-0x1a,
-0xfe,
-0x00,
-0x1a,
-0x60,
-0x8d,
-0x50,
-0x18,
-0x8e,
-0x50,
-0x18,
-0xd0,
-0x01,
-0xca,
-0x3a,
-0x99,
-0x00,
-0x18,
-0x48,
-0x8a,
-0x99,
-0x01,
-0x18,
-0x68,
-0x0a,
-0x1a,
-0x8d,
-0x50,
-0x18,
-0x8a,
-0x2a,
-0x8d,
-0x50,
-0x18,
-0x60,
-0xa0,
-0x01,
-0x8c,
-0x04,
-0x18,
-0x8c,
-0x10,
-0x18,
-0x53,
-0x7d,
-0x00,
-0x78,
-0x18,
-0x53,
-0x7c,
-0x00,
-0x7c,
-0x18,
-0x53,
-0x7b,
-0x00,
-0x80,
-0x18,
-0x53,
-0x7a,
-0x00,
-0x84,
-0x18,
-0x53,
-0x7e,
-0x00,
-0x88,
-0x18,
-0x53,
-0x7f,
-0x00,
-0x8c,
-0x18,
-0x53,
-0x80,
-0x00,
-0x90,
-0x18,
-0xa5,
-0x81,
-0x8d,
-0x94,
-0x18,
-0x8d,
-0x14,
-0x18,
-0xc8,
-0x53,
-0x68,
-0x00,
-0x54,
-0x18,
-0x53,
-0x6a,
-0x00,
-0x58,
-0x18,
-0x53,
-0x6c,
-0x00,
-0x5c,
-0x18,
-0x53,
-0x6e,
-0x00,
-0x60,
-0x18,
-0x53,
-0x70,
-0x00,
-0x68,
-0x18,
-0x53,
-0x72,
-0x00,
-0x64,
-0x18,
-0x53,
-0x76,
-0x00,
-0x6c,
-0x18,
-0x53,
-0x74,
-0x00,
-0x70,
-0x18,
-0x53,
-0x78,
-0x00,
-0x74,
-0x18,
-0x9c,
-0x3c,
-0x18,
-0x13,
-0x3c,
-0x18,
-0x28,
-0x18,
-0x13,
-0x3c,
-0x18,
-0x2c,
-0x18,
-0x9c,
-0x30,
-0x18,
-0x9c,
-0x20,
-0x18,
-0x9c,
-0x24,
-0x18,
-0x9c,
-0x0c,
-0x18,
-0x9c,
-0x0d,
-0x18,
-0xa0,
-0x18,
-0xa6,
-0x65,
-0xa5,
-0x64,
-0x20,
-0xda,
-0x04,
-0xa9,
-0x04,
-0x8d,
-0x0c,
-0x18,
-0x9c,
-0x0d,
-0x18,
-0xa0,
-0x1c,
-0xa6,
-0x67,
-0xa5,
-0x66,
-0x20,
-0xda,
-0x04,
-0xa0,
-0x03,
-0x43,
-0xaa,
-0x0d,
-0x38,
-0x18,
-0xa9,
-0x00,
-0x60,
-0x20,
-0xa5,
-0x05,
-0xe0,
-0x00,
-0xf0,
-0x04,
-0x1a,
-0xd0,
-0x01,
-0xc8,
-0x60,
-0x85,
-0xea,
-0x45,
-0xec,
-0x84,
-0xeb,
-0xaa,
-0xa5,
-0xed,
-0x45,
-0xea,
-0x18,
-0x65,
-0xeb,
-0x90,
-0x01,
-0xc8,
-0x60,
-0x18,
-0x65,
-0xee,
-0x85,
-0xee,
-0x98,
-0x65,
-0xef,
-0x85,
-0xef,
-0x38,
-0xa5,
-0xee,
-0xe9,
-0xff,
-0xa5,
-0xef,
-0xe9,
-0x07,
-0x90,
-0x08,
-0xa9,
-0xff,
-0x85,
-0xee,
-0xa9,
-0x07,
-0x85,
-0xef,
-0x60,
-0x38,
-0xa5,
-0xee,
-0xe5,
-0xec,
-0x85,
-0xee,
-0xa5,
-0xef,
-0xe5,
-0xed,
-0x85,
-0xef,
-0xb0,
-0x04,
-0x64,
-0xee,
-0x64,
-0xef,
-0x60,
-0xa5,
-0xee,
-0x0a,
-0x85,
-0xec,
-0xa5,
-0xef,
-0x2a,
-0x85,
-0xed,
-0x60,
-0x20,
-0xe9,
-0x05,
-0xa5,
-0xf2,
-0xd0,
-0x05,
-0xa6,
-0xf3,
-0xd0,
-0x0b,
-0x60,
-0x20,
-0x99,
-0x05,
-0x85,
-0xec,
-0x84,
-0xed,
-0x4c,
-0xd5,
-0x05,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0xec,
-0x85,
-0xec,
-0xa9,
-0x04,
-0xe5,
-0xed,
-0x85,
-0xed,
-0x8a,
-0x20,
-0x99,
-0x05,
-0x4c,
-0xb7,
-0x05,
-0x20,
-0xe9,
-0x05,
-0xa6,
-0xf2,
-0xd0,
-0x05,
-0xa6,
-0xf3,
-0xd0,
-0x15,
-0x60,
-0x38,
-0xa9,
-0xfe,
-0xe5,
-0xec,
-0x85,
-0xec,
-0xa9,
-0x0f,
-0xe5,
-0xed,
-0x85,
-0xed,
-0x8a,
-0x20,
-0xa5,
-0x05,
-0x4c,
-0xb7,
-0x05,
-0x38,
-0xa5,
-0xed,
-0xe9,
-0x04,
-0x85,
-0xed,
-0x8a,
-0x20,
-0xa5,
-0x05,
-0x85,
-0xec,
-0x84,
-0xed,
-0x4c,
-0xd5,
-0x05,
-0xa5,
-0x2d,
-0xd0,
-0x02,
-0xa9,
-0x11,
-0xaa,
-0x49,
-0x10,
-0xc0,
-0x05,
-0x90,
-0x03,
-0xa9,
-0x1e,
-0x60,
-0x84,
-0xd2,
-0x8a,
-0x29,
-0x0f,
-0xc9,
-0x05,
-0xb0,
-0xf4,
-0x45,
-0xd2,
-0xaa,
-0xbd,
-0xc5,
-0x0d,
-0x85,
-0xd2,
-0x64,
-0xe3,
-0x38,
-0xad,
-0x2d,
-0x0f,
-0xe5,
-0xd2,
-0xb0,
-0x02,
-0xe6,
-0xe3,
-0x64,
-0xc2,
-0x64,
-0xc3,
-0xa0,
-0x02,
-0x53,
-0x2e,
-0x00,
-0xc0,
-0x00,
-0x53,
-0x34,
-0x00,
-0xd0,
-0x00,
-0x20,
-0x58,
-0x0b,
-0xa5,
-0xc4,
-0x10,
-0x0a,
-0xe6,
-0xc5,
-0xd0,
-0x06,
-0xe6,
-0xc6,
-0xd0,
-0x02,
-0xe6,
-0xc7,
-0xa5,
-0xc7,
-0xf0,
-0x06,
-0xa9,
-0xff,
-0x85,
-0xc5,
-0x85,
-0xc6,
-0xa0,
-0x02,
-0x53,
-0xc5,
-0x00,
-0xcd,
-0x00,
-0x53,
-0xcd,
-0x00,
-0xe8,
-0x00,
-0xa2,
-0x2e,
-0xa0,
-0x0f,
-0xa9,
-0x04,
-0x20,
-0x3c,
-0x0a,
-0x84,
-0xd3,
-0xa5,
-0xe3,
-0x49,
-0x24,
-0x85,
-0xc8,
-0xa5,
-0xd3,
-0x49,
-0x06,
-0x18,
-0x65,
-0xc8,
-0x85,
-0xc8,
-0xc0,
-0x04,
-0xf0,
-0x10,
-0x38,
-0xb9,
-0xfc,
-0x0f,
-0xe5,
-0xcd,
-0xc8,
-0xb9,
-0xfc,
-0x0f,
-0xc8,
-0xe5,
-0xce,
-0x90,
-0xed,
-0x88,
-0x98,
-0x4a,
-0xa8,
-0xb9,
-0x3e,
-0x00,
-0x85,
-0xf2,
-0xa9,
-0x80,
-0x38,
-0xe5,
-0xf2,
-0x85,
-0xf2,
-0xb0,
-0x0b,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0xf2,
-0x64,
-0xf2,
-0x85,
-0xf3,
-0x80,
-0x02,
-0x64,
-0xf3,
-0xa9,
-0x0c,
-0x85,
-0xcc,
-0xa4,
-0xd3,
-0xa2,
-0x00,
-0xb9,
-0x2e,
-0x0f,
-0x95,
-0xe6,
-0xe8,
-0xc8,
-0xe0,
-0x04,
-0x90,
-0xf5,
-0x18,
-0xa5,
-0xc8,
-0x69,
-0x34,
-0x85,
-0xc8,
-0xa9,
-0x0f,
-0x90,
-0x01,
-0x1a,
-0x85,
-0xc9,
-0xa5,
-0xe3,
-0x49,
-0x40,
-0x85,
-0xca,
-0xa5,
-0xd3,
-0x49,
-0x10,
-0x18,
-0x65,
-0xca,
-0x69,
-0x7c,
-0x85,
-0xca,
-0xa9,
-0x0f,
-0x90,
-0x01,
-0x1a,
-0x85,
-0xcb,
-0x20,
-0x88,
-0x0a,
-0x20,
-0xf4,
-0x05,
-0xa0,
-0x02,
-0x53,
-0xee,
-0x00,
-0x49,
-0x00,
-0x20,
-0x88,
-0x0a,
-0x20,
-0xf4,
-0x05,
-0xa0,
-0x02,
-0x53,
-0xee,
-0x00,
-0x4b,
-0x00,
-0x20,
-0x88,
-0x0a,
-0x20,
-0x1e,
-0x06,
-0xa0,
-0x02,
-0x53,
-0xee,
-0x00,
-0x4d,
-0x00,
-0x20,
-0x88,
-0x0a,
-0x20,
-0x1e,
-0x06,
-0xa0,
-0x02,
-0x53,
-0xee,
-0x00,
-0x4f,
-0x00,
-0x20,
-0x65,
-0x0a,
-0x85,
-0x51,
-0x64,
-0x52,
-0x20,
-0x65,
-0x0a,
-0x85,
-0x5f,
-0x20,
-0x65,
-0x0a,
-0x85,
-0x60,
-0x20,
-0x65,
-0x0a,
-0x85,
-0x61,
-0xa5,
-0x1b,
-0x29,
-0x10,
-0xf0,
-0x08,
-0xa9,
-0xff,
-0x85,
-0x51,
-0xa9,
-0x03,
-0x85,
-0x52,
-0xa9,
-0x00,
-0x60,
-0x18,
-0xa5,
-0xd4,
-0x69,
-0x0a,
-0x80,
-0x02,
-0xa5,
-0xd5,
-0xaa,
-0xa0,
-0x00,
-0xbd,
-0xeb,
-0x0d,
-0x99,
-0xe6,
-0x00,
-0xe8,
-0xc8,
-0xc0,
-0x04,
-0xd0,
-0xf4,
-0xa0,
-0x02,
-0x60,
-0x65,
-0xe2,
-0x85,
-0xe2,
-0x98,
-0x65,
-0xde,
-0x85,
-0xde,
-0x90,
-0x07,
-0xe6,
-0xdf,
-0x18,
-0xd0,
-0x02,
-0xe6,
-0xe0,
-0x60,
-0x65,
-0xde,
-0x85,
-0xde,
-0x98,
-0x65,
-0xdf,
-0x85,
-0xdf,
-0x90,
-0x07,
-0x18,
-0xe6,
-0xe0,
-0xd0,
-0x02,
-0xe6,
-0xe1,
-0x60,
-0xa4,
-0xe3,
-0xf0,
-0x03,
-0x4c,
-0x65,
-0x0a,
-0x4c,
-0x88,
-0x0a,
-0xa9,
-0x06,
-0x85,
-0xcc,
-0x20,
-0x94,
-0x07,
-0x53,
-0x34,
-0x00,
-0xcd,
-0x00,
-0x53,
-0xda,
-0x00,
-0xc8,
-0x00,
-0x53,
-0xdc,
-0x00,
-0xca,
-0x00,
-0x20,
-0xd5,
-0x07,
-0xa0,
-0x02,
-0x53,
-0xee,
-0x00,
-0xf0,
-0x00,
-0x53,
-0xc8,
-0x00,
-0xda,
-0x00,
-0x53,
-0xca,
-0x00,
-0xdc,
-0x00,
-0x20,
-0x94,
-0x07,
-0x53,
-0xd6,
-0x00,
-0xc8,
-0x00,
-0x53,
-0xd8,
-0x00,
-0xca,
-0x00,
-0x20,
-0xd5,
-0x07,
-0xa0,
-0x02,
-0x53,
-0xc8,
-0x00,
-0xd6,
-0x00,
-0x53,
-0xca,
-0x00,
-0xd8,
-0x00,
-0x38,
-0xa5,
-0xee,
-0xe5,
-0xf0,
-0xd0,
-0x09,
-0xa5,
-0xef,
-0xe5,
-0xf1,
-0xd0,
-0x03,
-0xa5,
-0xee,
-0x60,
-0x20,
-0x9b,
-0x07,
-0x38,
-0xa5,
-0xe8,
-0xe5,
-0xe6,
-0x85,
-0xd0,
-0xa5,
-0xe9,
-0xe5,
-0xe7,
-0x85,
-0xd1,
-0x4a,
-0x85,
-0xeb,
-0xa5,
-0xd0,
-0x6a,
-0x85,
-0xea,
-0x38,
-0xa5,
-0xf0,
-0xe5,
-0xee,
-0x85,
-0xec,
-0xa5,
-0xf1,
-0xe5,
-0xef,
-0x85,
-0xed,
-0x64,
-0xe6,
-0xb0,
-0x17,
-0xe6,
-0xe6,
-0xa5,
-0xea,
-0xe9,
-0x00,
-0xb0,
-0x03,
-0x38,
-0xc6,
-0xeb,
-0xa9,
-0x00,
-0xe5,
-0xec,
-0x85,
-0xec,
-0xa9,
-0x00,
-0xe5,
-0xed,
-0x85,
-0xed,
-0x64,
-0xe0,
-0x64,
-0xe1,
-0xa5,
-0xd5,
-0x0a,
-0xaa,
-0xbd,
-0xfb,
-0x0d,
-0x45,
-0xed,
-0x85,
-0xe2,
-0x84,
-0xde,
-0xbd,
-0xfc,
-0x0d,
-0x45,
-0xed,
-0x18,
-0x65,
-0xde,
-0x85,
-0xde,
-0x90,
-0x02,
-0xc8,
-0x18,
-0x84,
-0xdf,
-0xbd,
-0xfc,
-0x0d,
-0x45,
-0xec,
-0x20,
-0xaf,
-0x07,
-0xbd,
-0xfd,
-0x0d,
-0x45,
-0xeb,
-0x20,
-0xaf,
-0x07,
-0xbd,
-0xfd,
-0x0d,
-0x45,
-0xec,
-0x65,
-0xde,
-0x85,
-0xde,
-0x98,
-0x65,
-0xdf,
-0x85,
-0xdf,
-0x90,
-0x07,
-0xe6,
-0xe0,
-0x18,
-0xd0,
-0x02,
-0xe6,
-0xe1,
-0xbd,
-0xfd,
-0x0d,
-0x45,
-0xed,
-0x65,
-0xdf,
-0x85,
-0xdf,
-0x98,
-0x65,
-0xe0,
-0x85,
-0xe0,
-0x90,
-0x03,
-0x18,
-0xe6,
-0xe1,
-0xbd,
-0xfe,
-0x0d,
-0x45,
-0xea,
-0x65,
-0xe2,
-0x98,
-0xa0,
-0x00,
-0x20,
-0xc2,
-0x07,
-0xbd,
-0xfe,
-0x0d,
-0x45,
-0xeb,
-0x20,
-0xc2,
-0x07,
-0xbd,
-0xfe,
-0x0d,
-0x45,
-0xec,
-0x65,
-0xdf,
-0x85,
-0xdf,
-0x98,
-0x65,
-0xe0,
-0x85,
-0xe0,
-0x90,
-0x03,
-0xe6,
-0xe1,
-0x18,
-0xbd,
-0xfe,
-0x0d,
-0x45,
-0xed,
-0x65,
-0xe0,
-0x85,
-0xe0,
-0x98,
-0x65,
-0xe1,
-0x85,
-0xe1,
-0xa0,
-0x04,
-0x53,
-0xde,
-0x00,
-0xc0,
-0x00,
-0xe6,
-0xc0,
-0xd0,
-0x0a,
-0xe6,
-0xc1,
-0xd0,
-0x06,
-0xe6,
-0xc2,
-0xd0,
-0x02,
-0xe6,
-0xc3,
-0x20,
-0x58,
-0x0b,
-0x38,
-0xa2,
-0x00,
-0xa0,
-0x04,
-0xb5,
-0xea,
-0xf5,
-0xc4,
-0xe8,
-0x88,
-0xd0,
-0xf8,
-0xdc,
-0x90,
-0x08,
-0x53,
-0xc0,
-0x00,
-0xde,
-0x00,
-0x4c,
-0x0d,
-0x09,
-0x53,
-0xde,
-0x00,
-0xc0,
-0x00,
-0xa5,
-0xe6,
-0xf0,
-0x17,
-0xa2,
-0x00,
-0x38,
-0x8a,
-0xe5,
-0xc0,
-0x85,
-0xc0,
-0x8a,
-0xe5,
-0xc1,
-0x85,
-0xc1,
-0x8a,
-0xe5,
-0xc2,
-0x85,
-0xc2,
-0x8a,
-0xe5,
-0xc3,
-0x85,
-0xc3,
-0x20,
-0x9b,
-0x07,
-0x53,
-0x2e,
-0x00,
-0xcd,
-0x00,
-0xa0,
-0x04,
-0x53,
-0xee,
-0x00,
-0xea,
-0x00,
-0x20,
-0xb1,
-0x0a,
-0xa5,
-0xee,
-0x60,
-0xa5,
-0x1b,
-0x29,
-0x08,
-0xf0,
-0x10,
-0x64,
-0xe5,
-0xa0,
-0x06,
-0x13,
-0xe5,
-0x00,
-0x59,
-0x00,
-0xa9,
-0xf8,
-0x85,
-0x59,
-0xa9,
-0x00,
-0x60,
-0xa0,
-0x02,
-0x53,
-0x2e,
-0x00,
-0xe8,
-0x00,
-0xa2,
-0xeb,
-0xa0,
-0x0d,
-0xa9,
-0x08,
-0x20,
-0x3c,
-0x0a,
-0x84,
-0xd5,
-0xa0,
-0x02,
-0x53,
-0x34,
-0x00,
-0xe8,
-0x00,
-0xa2,
-0xf5,
-0xa0,
-0x0d,
-0xa9,
-0x04,
-0x20,
-0x3c,
-0x0a,
-0x84,
-0xd4,
-0xa5,
-0xd5,
-0x4a,
-0x49,
-0x12,
-0x85,
-0xd6,
-0xa5,
-0xd4,
-0x49,
-0x03,
-0x65,
-0xd6,
-0x69,
-0x0b,
-0x85,
-0xd6,
-0x98,
-0x69,
-0x0e,
-0x85,
-0xd7,
-0xa5,
-0xd6,
-0x69,
-0x12,
-0x85,
-0xda,
-0xa5,
-0xd7,
-0x69,
-0x00,
-0x85,
-0xdb,
-0xa5,
-0xd5,
-0x49,
-0x14,
-0x69,
-0x65,
-0x85,
-0xd8,
-0x98,
-0x69,
-0x0e,
-0x85,
-0xd9,
-0x18,
-0xa5,
-0xd4,
-0x49,
-0x0a,
-0x65,
-0xd8,
-0x85,
-0xd8,
-0x90,
-0x03,
-0xe6,
-0xd9,
-0x18,
-0xa5,
-0xd8,
-0x69,
-0x28,
-0x85,
-0xdc,
-0xa5,
-0xd9,
-0x69,
-0x00,
-0x85,
-0xdd,
-0x64,
-0xe3,
-0x20,
-0xdf,
-0x07,
-0xa0,
-0x02,
-0x53,
-0xee,
-0x00,
-0x59,
-0x00,
-0xe6,
-0xe3,
-0xa2,
-0x03,
-0xda,
-0x20,
-0xdf,
-0x07,
-0xfa,
-0x95,
-0x5b,
-0xca,
-0x10,
-0xf6,
-0xa9,
-0x00,
-0x60,
-0xa5,
-0x1c,
-0xd8,
-0x4d,
-0xde,
-0x0d,
-0x85,
-0x62,
-0xf8,
-0x29,
-0xfc,
-0xf0,
-0x03,
-0xa9,
-0x1f,
-0x60,
-0xa6,
-0x27,
-0xa5,
-0x1b,
-0x29,
-0x20,
-0xf0,
-0x02,
-0xa2,
-0x01,
-0x8a,
-0x3a,
-0x49,
-0x03,
-0x18,
-0x69,
-0xad,
-0x85,
-0xe6,
-0x98,
-0x69,
-0x0d,
-0x85,
-0xe7,
-0xa0,
-0x06,
-0xd3,
-0xe6,
-0x53,
-0x00,
-0xa9,
-0x00,
-0x60,
-0x85,
-0xea,
-0x86,
-0xe6,
-0x84,
-0xe7,
-0xa0,
-0x01,
-0xc8,
-0xc4,
-0xea,
-0xf0,
-0x0d,
-0x38,
-0xb1,
-0xe6,
-0xe5,
-0xe8,
-0xc8,
-0xb1,
-0xe6,
-0xe5,
-0xe9,
-0x90,
-0xef,
-0x88,
-0x88,
-0x88,
-0x60,
-0xa0,
-0x04,
-0xe6,
-0xca,
-0xd0,
-0x02,
-0xe6,
-0xcb,
-0x88,
-0xd0,
-0xf7,
-0x60,
-0xa0,
-0x04,
-0xd3,
-0xca,
-0xc0,
-0x00,
-0xb2,
-0xc8,
-0x85,
-0xea,
-0x64,
-0xeb,
-0xa4,
-0xcc,
-0xb1,
-0xc8,
-0x85,
-0xec,
-0x64,
-0xed,
-0x20,
-0xb1,
-0x0a,
-0x20,
-0x59,
-0x0a,
-0xe6,
-0xc8,
-0xd0,
-0x02,
-0xe6,
-0xc9,
-0xa5,
-0xee,
-0x60,
-0xa0,
-0x04,
-0xd3,
-0xca,
-0xc0,
-0x00,
-0xa0,
-0x02,
-0xd3,
-0xc8,
-0xea,
-0x00,
-0xa4,
-0xcc,
-0xb1,
-0xc8,
-0x85,
-0xec,
-0xc8,
-0xb1,
-0xc8,
-0x85,
-0xed,
-0x20,
-0xb1,
-0x0a,
-0x20,
-0x59,
-0x0a,
-0xa0,
-0x02,
-0xe6,
-0xc8,
-0xd0,
-0x02,
-0xe6,
-0xc9,
-0x88,
-0xd0,
-0xf7,
-0x60,
-0xa0,
-0x02,
-0x38,
-0xa5,
-0xcd,
-0xe5,
-0xe6,
-0xa5,
-0xce,
-0xe5,
-0xe7,
-0xb0,
-0x06,
-0x53,
-0xea,
-0x00,
-0xee,
-0x00,
-0x60,
-0xa5,
-0xe8,
-0xe5,
-0xcd,
-0xa5,
-0xe9,
-0xe5,
-0xce,
-0xb0,
-0x06,
-0x53,
-0xec,
-0x00,
-0xee,
-0x00,
-0x60,
-0x38,
-0xa5,
-0xcd,
-0xe5,
-0xe6,
-0x85,
-0xd0,
-0xa5,
-0xce,
-0xe5,
-0xe7,
-0x85,
-0xd1,
-0x20,
-0x58,
-0x0b,
-0x18,
-0xa9,
-0x80,
-0x65,
-0xc5,
-0x90,
-0x06,
-0xe6,
-0xc6,
-0xd0,
-0x02,
-0xe6,
-0xc7,
-0x18,
-0xa5,
-0xea,
-0x65,
-0xc6,
-0x85,
-0xee,
-0xa5,
-0xeb,
-0x65,
-0xc7,
-0x85,
-0xef,
-0x60,
-0x88,
-0xd0,
-0x01,
-0x60,
-0x85,
-0xe6,
-0x86,
-0xe7,
-0x98,
-0xc8,
-0x18,
-0x65,
-0xe7,
-0xaa,
-0x90,
-0x02,
-0xe6,
-0xe6,
-0x98,
-0xc9,
-0x01,
-0xf0,
-0x0e,
-0x29,
-0x01,
-0xd0,
-0x0d,
-0x46,
-0xe6,
-0x8a,
-0x6a,
-0xaa,
-0x98,
-0x4a,
-0xa8,
-0x80,
-0xee,
-0xa5,
-0xe6,
-0x60,
-0x8a,
-0x1a,
-0xd0,
-0x02,
-0xe6,
-0xe6,
-0x49,
-0x55,
-0x84,
-0xe8,
-0x18,
-0x65,
-0xe8,
-0x85,
-0xe7,
-0x90,
-0x03,
-0xe6,
-0xe8,
-0x18,
-0xa5,
-0xe6,
-0x49,
-0x55,
-0x84,
-0xe9,
-0xaa,
-0x65,
-0xe7,
-0x8a,
-0x65,
-0xe8,
-0x85,
-0xe8,
-0xa5,
-0xe9,
-0x90,
-0x03,
-0xe6,
-0xe9,
-0x18,
-0x65,
-0xe8,
-0xaa,
-0xa5,
-0xe9,
-0x69,
-0x00,
-0x60,
-0x64,
-0xc7,
-0xa5,
-0xd0,
-0x45,
-0xc0,
-0x85,
-0xc4,
-0x84,
-0xc5,
-0x18,
-0xa5,
-0xd0,
-0x45,
-0xc1,
-0x65,
-0xc5,
-0x85,
-0xc5,
-0x90,
-0x05,
-0xc8,
-0xd0,
-0x02,
-0xe6,
-0xc7,
-0x84,
-0xc6,
-0x18,
-0xa5,
-0xd1,
-0x45,
-0xc0,
-0x65,
-0xc5,
-0x85,
-0xc5,
-0x98,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0x90,
-0x03,
-0xe6,
-0xc7,
-0x18,
-0xa5,
-0xd0,
-0x45,
-0xc2,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0x18,
-0xa5,
-0xd1,
-0x45,
-0xc1,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0x18,
-0xa5,
-0xd0,
-0x45,
-0xc3,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0x18,
-0xa5,
-0xd1,
-0x45,
-0xc2,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0x60,
-0xa5,
-0xe6,
-0x45,
-0xe8,
-0x85,
-0xea,
-0x84,
-0xeb,
-0xa5,
-0xe6,
-0x45,
-0xe9,
-0x18,
-0x65,
-0xeb,
-0x85,
-0xeb,
-0x98,
-0x69,
-0x00,
-0x85,
-0xec,
-0x64,
-0xed,
-0xa5,
-0xe7,
-0x45,
-0xe8,
-0x18,
-0x65,
-0xeb,
-0x85,
-0xeb,
-0x98,
-0x65,
-0xec,
-0x85,
-0xec,
-0x90,
-0x02,
-0xe6,
-0xed,
-0xa5,
-0xe7,
-0x45,
-0xe9,
-0x18,
-0x65,
-0xec,
-0x85,
-0xec,
-0x98,
-0x65,
-0xed,
-0x85,
-0xed,
-0xa5,
-0xe9,
-0x10,
-0x0d,
-0x38,
-0xa5,
-0xec,
-0xe5,
-0xe6,
-0x85,
-0xec,
-0xa5,
-0xed,
-0xe5,
-0xe7,
-0x85,
-0xed,
-0x60,
-0x18,
-0xa5,
-0xe8,
-0x65,
-0xea,
-0x85,
-0xea,
-0xa2,
-0x00,
-0xa5,
-0xe9,
-0x10,
-0x01,
-0xca,
-0x65,
-0xeb,
-0x85,
-0xeb,
-0x8a,
-0x65,
-0xec,
-0x85,
-0xec,
-0x8a,
-0x65,
-0xed,
-0x85,
-0xed,
-0x60,
-0xa0,
-0x02,
-0x53,
-0xe5,
-0x0d,
-0xe8,
-0x00,
-0x20,
-0xb5,
-0x0b,
-0xa0,
-0x02,
-0x53,
-0xe9,
-0x0d,
-0xe8,
-0x00,
-0x20,
-0xff,
-0x0b,
-0xa0,
-0x04,
-0x53,
-0xea,
-0x00,
-0xee,
-0x00,
-0xa0,
-0x02,
-0x53,
-0xe3,
-0x0d,
-0xe8,
-0x00,
-0x20,
-0xb5,
-0x0b,
-0xa0,
-0x02,
-0x53,
-0xe7,
-0x0d,
-0xe8,
-0x00,
-0x20,
-0xff,
-0x0b,
-0xa5,
-0xed,
-0x10,
-0x22,
-0xa2,
-0x00,
-0xa9,
-0x01,
-0x4a,
-0xa9,
-0x00,
-0xf5,
-0xea,
-0x95,
-0xea,
-0x2a,
-0xe8,
-0xe0,
-0x04,
-0x90,
-0xf3,
-0xa2,
-0x00,
-0xa9,
-0x01,
-0x4a,
-0xa9,
-0x00,
-0xf5,
-0xee,
-0x95,
-0xee,
-0x2a,
-0xe8,
-0xe0,
-0x04,
-0x90,
-0xf3,
-0xa5,
-0xed,
-0x05,
-0xf1,
-0x30,
-0x12,
-0x06,
-0xea,
-0x26,
-0xeb,
-0x26,
-0xec,
-0x26,
-0xed,
-0x06,
-0xee,
-0x26,
-0xef,
-0x26,
-0xf0,
-0x26,
-0xf1,
-0x80,
-0xe8,
-0x64,
-0xe6,
-0x64,
-0xe7,
-0x64,
-0xe8,
-0x64,
-0xe9,
-0xa2,
-0x20,
-0x06,
-0xea,
-0x26,
-0xeb,
-0x26,
-0xec,
-0x26,
-0xed,
-0x26,
-0xe6,
-0x26,
-0xe7,
-0x26,
-0xe8,
-0x26,
-0xe9,
-0x38,
-0xa5,
-0xe6,
-0xe5,
-0xef,
-0x85,
-0xc0,
-0xa5,
-0xe7,
-0xe5,
-0xf0,
-0x85,
-0xc1,
-0xa5,
-0xe8,
-0xe5,
-0xf1,
-0x85,
-0xc2,
-0xa5,
-0xe9,
-0xe9,
-0x00,
-0x85,
-0xc3,
-0x90,
-0x0b,
-0xe6,
-0xea,
-0x8a,
-0xa0,
-0x04,
-0x53,
-0xc0,
-0x00,
-0xe6,
-0x00,
-0xaa,
-0xca,
-0xd0,
-0xc7,
-0xa6,
-0xea,
-0xa4,
-0xeb,
-0xa5,
-0xec,
-0x05,
-0xed,
-0xf0,
-0x03,
-0xa2,
-0xff,
-0xdc,
-0x86,
-0xe6,
-0x84,
-0xe7,
-0x60,
-0xba,
-0x08,
-0x78,
-0x68,
-0x48,
-0x29,
-0x1c,
-0x85,
-0xfa,
-0x86,
-0xf8,
-0xa9,
-0x01,
-0x85,
-0xf9,
-0xa0,
-0x06,
-0xb1,
-0xf8,
-0x48,
-0x29,
-0x1c,
-0xc5,
-0xfa,
-0x90,
-0x08,
-0x7a,
-0xa0,
-0x09,
-0xb1,
-0xf8,
-0x48,
-0x29,
-0x1c,
-0xc9,
-0x00,
-0xd0,
-0x38,
-0xa0,
-0x03,
-0xb1,
-0xf8,
-0xe0,
-0xdf,
-0xb0,
-0x18,
-0x8d,
-0x6b,
-0x01,
-0xc8,
-0xb1,
-0xf8,
-0x8d,
-0x6c,
-0x01,
-0xc8,
-0xb1,
-0xf8,
-0x8d,
-0x6d,
-0x01,
-0x8a,
-0x18,
-0x69,
-0x05,
-0x8d,
-0x6e,
-0x01,
-0x80,
-0x16,
-0x8d,
-0x6f,
-0x01,
-0xc8,
-0xb1,
-0xf8,
-0x8d,
-0x70,
-0x01,
-0xc8,
-0xb1,
-0xf8,
-0x8d,
-0x71,
-0x01,
-0x8a,
-0x18,
-0x69,
-0x05,
-0x8d,
-0x72,
-0x01,
-0xa9,
-0x00,
-0xfa,
-0x28,
-0xf8,
-0x60,
-0x68,
-0xf0,
-0x04,
-0x68,
-0xfa,
-0x7a,
-0x40,
-0x08,
-0x78,
-0x68,
-0xad,
-0x6a,
-0x01,
-0xf0,
-0x0e,
-0xae,
-0x6e,
-0x01,
-0x9a,
-0xad,
-0x6b,
-0x01,
-0xae,
-0x6c,
-0x01,
-0xac,
-0x6d,
-0x01,
-0x40,
-0xae,
-0x72,
-0x01,
-0x9a,
-0xad,
-0x6f,
-0x01,
-0xae,
-0x70,
-0x01,
-0xac,
-0x71,
-0x01,
-0x40,
-0x08,
-0x78,
-0xad,
-0x6a,
-0x01,
-0xd0,
-0x1f,
-0x1a,
-0x8d,
-0x6a,
-0x01,
-0xa9,
-0xdc,
-0x8d,
-0x6e,
-0x01,
-0x9c,
-0x6b,
-0x01,
-0x9c,
-0x6c,
-0x01,
-0x9c,
-0x6d,
-0x01,
-0xa9,
-0x03,
-0x8d,
-0xdf,
-0x01,
-0xa9,
-0x6f,
-0x8d,
-0xde,
-0x01,
-0x9c,
-0xdd,
-0x01,
-0x28,
-0x60,
-0xa9,
-0x02,
-0x60,
-0x04,
-0xdc,
-0x02,
-0xfd,
-0x02,
-0xff,
-0xff,
-0xff,
-0xff,
-0x0d,
-0x03,
-0x08,
-0x01,
-0x5b,
-0xe6,
-0x80,
-0x80,
-0x80,
-0xff,
-0xff,
-0x02,
-0x01,
-0x05,
-0x00,
-0x04,
-0x00,
-0x00,
-0x00,
-0x00,
-0x10,
-0x03,
-0x70,
-0x00,
-0x10,
-0x00,
-0xc7,
-0x02,
-0x8e,
-0x00,
-0x1c,
-0x00,
-0xa4,
-0x02,
-0x9c,
-0x00,
-0x24,
-0x00,
-0x00,
-0x01,
-0x01,
-0x02,
-0x02,
-0x02,
-0x02,
-0x03,
-0x03,
-0x03,
-0x03,
-0x03,
-0x03,
-0x04,
-0x04,
-0x04,
-0x04,
-};
-uint8_t dppcode_u_1_8[] = 
-{
-0xa0,
-0x00,
-0x80,
-0x02,
-0xa0,
-0x01,
-0x78,
-0xa2,
-0xff,
-0x9a,
-0xf8,
-0xc0,
-0x00,
-0xf0,
-0x09,
-0x20,
-0x9f,
-0x3f,
-0xf0,
-0x04,
-0xa2,
-0x01,
-0x80,
-0x53,
-0x9c,
-0x00,
-0x02,
-0xa0,
-0x36,
-0x13,
-0x00,
-0x02,
-0x01,
-0x02,
-0xa9,
-0x08,
-0x8d,
-0x00,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x01,
-0x02,
-0xa9,
-0xe8,
-0x8d,
-0x02,
-0x02,
-0xa9,
-0xeb,
-0x8d,
-0x03,
-0x02,
-0xa2,
-0xff,
-0x8e,
-0x32,
-0x02,
-0x8e,
-0xb9,
-0x6b,
-0xa2,
-0xff,
-0x8e,
-0x33,
-0x02,
-0x8e,
-0xba,
-0x6b,
-0xa0,
-0x03,
-0x53,
-0x27,
-0xbe,
-0x04,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x07,
-0x02,
-0xcd,
-0x29,
-0xbe,
-0xf0,
-0x04,
-0xa2,
-0x03,
-0x80,
-0x10,
-0xa2,
-0x02,
-0xad,
-0x00,
-0xc0,
-0xc9,
-0xe8,
-0xd0,
-0x07,
-0xad,
-0x01,
-0xc0,
-0xc9,
-0xeb,
-0xf0,
-0x0e,
-0x8e,
-0x08,
-0x02,
-0xa9,
-0x01,
-0x9c,
-0x14,
-0xd0,
-0x8d,
-0x14,
-0xd0,
-0x5c,
-0x80,
-0xfd,
-0x9c,
-0x08,
-0x02,
-0xa0,
-0x0e,
-0x53,
-0xe1,
-0x3f,
-0x02,
-0x00,
-0x9c,
-0x14,
-0xd0,
-0x9c,
-0x18,
-0xd0,
-0x9c,
-0x1c,
-0xd0,
-0x9c,
-0x20,
-0xd0,
-0x9c,
-0x24,
-0xd0,
-0x9c,
-0x28,
-0xd0,
-0x20,
-0xa1,
-0x03,
-0x58,
-0xa9,
-0x01,
-0x8d,
-0x14,
-0xd0,
-0x4c,
-0x11,
-0x0e,
-0x9c,
-0x7a,
-0x5f,
-0xa9,
-0x01,
-0x8d,
-0x7b,
-0x5f,
-0x9c,
-0x1d,
-0x83,
-0x9c,
-0xbd,
-0x5f,
-0x9c,
-0xbe,
-0x5f,
-0x9c,
-0xbf,
-0x5f,
-0x9c,
-0xc0,
-0x5f,
-0x9c,
-0xc7,
-0x5f,
-0x9c,
-0xc8,
-0x5f,
-0xa0,
-0x03,
-0x13,
-0x1d,
-0x83,
-0xb4,
-0x5f,
-0x13,
-0x1d,
-0x83,
-0xb7,
-0x5f,
-0x20,
-0xd7,
-0x03,
-0x20,
-0xa2,
-0x1a,
-0x20,
-0xdf,
-0x1a,
-0x9c,
-0x11,
-0x61,
-0x60,
-0x9c,
-0x01,
-0x5f,
-0x9c,
-0x00,
-0x5f,
-0x9c,
-0x02,
-0x5f,
-0x9c,
-0x03,
-0x5f,
-0x9c,
-0x04,
-0x5f,
-0x60,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xc8,
-0x3e,
-0x48,
-0xad,
-0x08,
-0xd0,
-0xc9,
-0x01,
-0xd0,
-0x51,
-0x08,
-0x78,
-0xad,
-0x00,
-0x5f,
-0xc9,
-0x02,
-0xb0,
-0x03,
-0xee,
-0x00,
-0x5f,
-0xee,
-0x02,
-0x5f,
-0xd0,
-0x08,
-0xee,
-0x03,
-0x5f,
-0xd0,
-0x03,
-0xee,
-0x04,
-0x5f,
-0xa0,
-0x37,
-0xad,
-0x01,
-0x5f,
-0x1a,
-0x29,
-0x01,
-0x8d,
-0x01,
-0x5f,
-0xf0,
-0x0e,
-0x53,
-0x00,
-0x02,
-0x3c,
-0x5f,
-0xa0,
-0x03,
-0x53,
-0x02,
-0x5f,
-0x76,
-0x5f,
-0x80,
-0x0c,
-0x53,
-0x00,
-0x02,
-0x05,
-0x5f,
-0xa0,
-0x03,
-0x53,
-0x02,
-0x5f,
-0x73,
-0x5f,
-0xad,
-0x11,
-0x61,
-0xd0,
-0x03,
-0x20,
-0x55,
-0x3f,
-0x28,
-0xa9,
-0x01,
-0x9c,
-0x18,
-0xd0,
-0x8d,
-0x18,
-0xd0,
-0x4c,
-0x2a,
-0x3f,
-0x8a,
-0xf0,
-0x0c,
-0xa9,
-0x40,
-0x8d,
-0x30,
-0xc0,
-0xa9,
-0x08,
-0x8d,
-0x31,
-0xc0,
-0x80,
-0x06,
-0x9c,
-0x30,
-0xc0,
-0x9c,
-0x31,
-0xc0,
-0xbd,
-0xc9,
-0x5f,
-0x85,
-0xa9,
-0x8d,
-0x78,
-0xc0,
-0xbd,
-0xcb,
-0x5f,
-0x8d,
-0xb3,
-0x6b,
-0xbd,
-0xcd,
-0x5f,
-0x8d,
-0x68,
-0xc0,
-0xbd,
-0xcf,
-0x5f,
-0x8d,
-0x69,
-0xc0,
-0xbd,
-0xd1,
-0x5f,
-0x0a,
-0xa8,
-0xb9,
-0x38,
-0x6b,
-0x85,
-0xc0,
-0xb9,
-0x39,
-0x6b,
-0x85,
-0xc1,
-0xb9,
-0x90,
-0x6b,
-0x8d,
-0x58,
-0xc0,
-0xb9,
-0x91,
-0x6b,
-0x8d,
-0x59,
-0xc0,
-0xb9,
-0xa0,
-0x6b,
-0x8d,
-0x60,
-0xc0,
-0xb9,
-0xa1,
-0x6b,
-0x8d,
-0x61,
-0xc0,
-0xbd,
-0xd3,
-0x5f,
-0x0a,
-0xa8,
-0xb9,
-0x40,
-0x6b,
-0x85,
-0xc2,
-0xb9,
-0x41,
-0x6b,
-0x85,
-0xc3,
-0xb9,
-0x98,
-0x6b,
-0x8d,
-0x5c,
-0xc0,
-0xb9,
-0x99,
-0x6b,
-0x8d,
-0x5d,
-0xc0,
-0xb9,
-0xa8,
-0x6b,
-0x8d,
-0x64,
-0xc0,
-0xb9,
-0xa9,
-0x6b,
-0x8d,
-0x65,
-0xc0,
-0xbd,
-0xd5,
-0x5f,
-0x8d,
-0x14,
-0xc0,
-0xbd,
-0xd7,
-0x5f,
-0x8d,
-0x18,
-0xc0,
-0xbd,
-0xd9,
-0x5f,
-0x8d,
-0x19,
-0xc0,
-0xa9,
-0x00,
-0x8d,
-0x0c,
-0xc0,
-0xa9,
-0x00,
-0x8d,
-0x0d,
-0xc0,
-0xda,
-0xe0,
-0x00,
-0xd0,
-0x12,
-0xac,
-0x0b,
-0x61,
-0x43,
-0x33,
-0x60,
-0x54,
-0xc0,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0xc3,
-0x60,
-0x15,
-0x6b,
-0x80,
-0x10,
-0xac,
-0x0c,
-0x61,
-0x43,
-0x5b,
-0x60,
-0x54,
-0xc0,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0xd7,
-0x60,
-0x15,
-0x6b,
-0xfa,
-0xbd,
-0x07,
-0x60,
-0x8d,
-0x28,
-0xc0,
-0xbd,
-0xdb,
-0x5f,
-0x8d,
-0x1c,
-0xc0,
-0xbd,
-0xdd,
-0x5f,
-0x8d,
-0x1d,
-0xc0,
-0xa9,
-0x50,
-0x8d,
-0x0c,
-0xc0,
-0xa9,
-0x00,
-0x8d,
-0x0d,
-0xc0,
-0xda,
-0xe0,
-0x00,
-0xd0,
-0x12,
-0xac,
-0x0d,
-0x61,
-0x43,
-0x83,
-0x60,
-0x54,
-0xc0,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0xeb,
-0x60,
-0x29,
-0x6b,
-0x80,
-0x10,
-0xac,
-0x0e,
-0x61,
-0x43,
-0xa3,
-0x60,
-0x54,
-0xc0,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0xfb,
-0x60,
-0x29,
-0x6b,
-0xfa,
-0xbd,
-0x09,
-0x60,
-0x8d,
-0x2c,
-0xc0,
-0xbd,
-0xe3,
-0x5f,
-0x85,
-0xb4,
-0xbd,
-0xe5,
-0x5f,
-0x85,
-0xb5,
-0xbd,
-0xe7,
-0x5f,
-0x85,
-0xbe,
-0xbd,
-0xe9,
-0x5f,
-0x85,
-0xbf,
-0xbd,
-0xeb,
-0x5f,
-0x85,
-0xaa,
-0xbd,
-0xed,
-0x5f,
-0x85,
-0xb9,
-0xbd,
-0xef,
-0x5f,
-0x85,
-0xb6,
-0xbd,
-0xf1,
-0x5f,
-0x85,
-0xbd,
-0xbd,
-0xf3,
-0x5f,
-0x85,
-0xb7,
-0xbd,
-0xf5,
-0x5f,
-0x85,
-0xb8,
-0xbd,
-0xf7,
-0x5f,
-0x85,
-0xac,
-0xbd,
-0xf9,
-0x5f,
-0x85,
-0xad,
-0xbd,
-0xfb,
-0x5f,
-0x85,
-0xb2,
-0xbd,
-0xfd,
-0x5f,
-0x85,
-0xb3,
-0xbd,
-0xff,
-0x5f,
-0x85,
-0xae,
-0xbd,
-0x01,
-0x60,
-0x85,
-0xaf,
-0xbd,
-0x03,
-0x60,
-0x85,
-0xb0,
-0xbd,
-0x05,
-0x60,
-0x85,
-0xb1,
-0xda,
-0xbd,
-0xc5,
-0x5f,
-0x8d,
-0x12,
-0x61,
-0xf0,
-0x3c,
-0xbd,
-0x0f,
-0x61,
-0x85,
-0x12,
-0xbd,
-0xc3,
-0x5f,
-0xa2,
-0x00,
-0xa8,
-0xd0,
-0x04,
-0xa5,
-0x25,
-0xd0,
-0x29,
-0xc0,
-0x00,
-0xf0,
-0x0a,
-0x20,
-0x7d,
-0x3f,
-0xa0,
-0x06,
-0x53,
-0xe6,
-0x5c,
-0x15,
-0x6c,
-0xa0,
-0x01,
-0x84,
-0x25,
-0xa0,
-0x02,
-0x53,
-0x32,
-0x02,
-0xb7,
-0x6b,
-0x20,
-0xbe,
-0x3b,
-0x64,
-0x24,
-0xa5,
-0xbd,
-0x85,
-0x23,
-0xa5,
-0x12,
-0x8d,
-0xb5,
-0x6b,
-0xa2,
-0x01,
-0x86,
-0xa8,
-0xfa,
-0x08,
-0x78,
-0x68,
-0xa9,
-0x02,
-0x8d,
-0x38,
-0xc0,
-0xa9,
-0x01,
-0x8d,
-0x38,
-0xc0,
-0xa9,
-0x09,
-0x8d,
-0x38,
-0xc0,
-0xbd,
-0xdf,
-0x5f,
-0xf0,
-0x0a,
-0xa9,
-0x05,
-0x8d,
-0x38,
-0xc0,
-0xa9,
-0x0d,
-0x8d,
-0x38,
-0xc0,
-0xbd,
-0xe1,
-0x5f,
-0x85,
-0xab,
-0x85,
-0xba,
-0x60,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xc8,
-0x3e,
-0x48,
-0xad,
-0x11,
-0x61,
-0xf0,
-0x05,
-0xa9,
-0x08,
-0x4c,
-0x9d,
-0x06,
-0xad,
-0x0c,
-0xd0,
-0xc9,
-0x01,
-0xf0,
-0x05,
-0xa9,
-0x06,
-0x4c,
-0x9d,
-0x06,
-0x08,
-0x78,
-0xad,
-0x7a,
-0x5f,
-0xf0,
-0x59,
-0x8d,
-0xff,
-0x5e,
-0xc9,
-0x02,
-0xf0,
-0x0d,
-0xa2,
-0x00,
-0xad,
-0xbd,
-0x5f,
-0x0d,
-0xbf,
-0x5f,
-0xd0,
-0x1b,
-0xe8,
-0x80,
-0x18,
-0x38,
-0xad,
-0xb7,
-0x5f,
-0xed,
-0xb4,
-0x5f,
-0xad,
-0xb8,
-0x5f,
-0xed,
-0xb5,
-0x5f,
-0xad,
-0xb9,
-0x5f,
-0xed,
-0xb6,
-0x5f,
-0xa2,
-0x01,
-0xb0,
-0x01,
-0xca,
-0xad,
-0x09,
-0x02,
-0xdd,
-0xbd,
-0x5f,
-0xd0,
-0x0d,
-0xad,
-0x0a,
-0x02,
-0xdd,
-0xbf,
-0x5f,
-0xd0,
-0x05,
-0xbd,
-0xc1,
-0x5f,
-0x80,
-0x1a,
-0xce,
-0xff,
-0x5e,
-0xf0,
-0x0f,
-0xca,
-0xf0,
-0xe3,
-0xa2,
-0x01,
-0x80,
-0xdf,
-0xad,
-0x7c,
-0x5f,
-0x9c,
-0x7c,
-0x5f,
-0xd0,
-0x06,
-0xa9,
-0x05,
-0x80,
-0x02,
-0xa9,
-0x04,
-0x28,
-0x8d,
-0x08,
-0x02,
-0xc9,
-0x00,
-0xf0,
-0x0a,
-0xa0,
-0x01,
-0x9c,
-0x28,
-0xd0,
-0x8c,
-0x28,
-0xd0,
-0x80,
-0x27,
-0x20,
-0x49,
-0x04,
-0xee,
-0x32,
-0x02,
-0xd0,
-0x03,
-0xee,
-0x33,
-0x02,
-0x9c,
-0x1d,
-0x83,
-0xa9,
-0x01,
-0x8d,
-0x11,
-0x61,
-0x8d,
-0x7b,
-0x5f,
-0x9c,
-0xc7,
-0x5f,
-0x9c,
-0xc8,
-0x5f,
-0x9c,
-0x7a,
-0x5f,
-0xa0,
-0x01,
-0x9c,
-0x20,
-0xd0,
-0x8c,
-0x20,
-0xd0,
-0x4c,
-0x2a,
-0x3f,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xc8,
-0x3e,
-0x48,
-0x08,
-0x78,
-0x68,
-0xa5,
-0x25,
-0xc9,
-0x03,
-0xf0,
-0x05,
-0x64,
-0x25,
-0x20,
-0x7d,
-0x3f,
-0xa9,
-0x01,
-0x9c,
-0x24,
-0xd0,
-0x8d,
-0x24,
-0xd0,
-0x8d,
-0x04,
-0xc0,
-0x9c,
-0x11,
-0x61,
-0x20,
-0x55,
-0x3f,
-0x4c,
-0x31,
-0x3f,
-0xa9,
-0x01,
-0xcc,
-0x2b,
-0xbe,
-0x90,
-0x08,
-0xd0,
-0x05,
-0xec,
-0x2a,
-0xbe,
-0x90,
-0x01,
-0x1a,
-0x3a,
-0x60,
-0xa9,
-0x01,
-0xcc,
-0x2d,
-0xbe,
-0x90,
-0x08,
-0xd0,
-0x05,
-0xec,
-0x2c,
-0xbe,
-0x90,
-0x01,
-0x1a,
-0x3a,
-0x60,
-0xa5,
-0x22,
-0xf0,
-0x38,
-0xa9,
-0xe6,
-0x85,
-0x16,
-0xa9,
-0x70,
-0x85,
-0x17,
-0xa9,
-0xb7,
-0x85,
-0x18,
-0xa9,
-0x6c,
-0x85,
-0x19,
-0xa0,
-0x00,
-0xa9,
-0x04,
-0xf3,
-0x16,
-0x18,
-0xe6,
-0x17,
-0xe6,
-0x19,
-0x3a,
-0xd0,
-0xf6,
-0xa0,
-0x2f,
-0xf3,
-0x16,
-0x18,
-0xa0,
-0x06,
-0x53,
-0x1b,
-0x6c,
-0x15,
-0x6c,
-0xa0,
-0x02,
-0x53,
-0x34,
-0x02,
-0xb9,
-0x6b,
-0x53,
-0xb7,
-0x6b,
-0x34,
-0x02,
-0x64,
-0x22,
-0xf8,
-0x08,
-0x78,
-0xad,
-0x00,
-0x5f,
-0xd0,
-0x03,
-0x4c,
-0x98,
-0x08,
-0xa0,
-0x03,
-0x53,
-0x02,
-0x5f,
-0xba,
-0x5f,
-0xad,
-0x01,
-0x5f,
-0x8d,
-0x79,
-0x5f,
-0xaa,
-0xd0,
-0x39,
-0xbd,
-0xc7,
-0x5f,
-0xf0,
-0x1e,
-0xad,
-0x73,
-0x5f,
-0xcd,
-0xb4,
-0x5f,
-0xd0,
-0x16,
-0xad,
-0x74,
-0x5f,
-0xcd,
-0xb5,
-0x5f,
-0xd0,
-0x0e,
-0xad,
-0x75,
-0x5f,
-0xcd,
-0xb6,
-0x5f,
-0xd0,
-0x06,
-0xac,
-0x79,
-0x5f,
-0x4c,
-0x86,
-0x08,
-0x9c,
-0x30,
-0xc0,
-0x9c,
-0x31,
-0xc0,
-0xa0,
-0x37,
-0x53,
-0x05,
-0x5f,
-0x7d,
-0x5f,
-0xa0,
-0x03,
-0x53,
-0x73,
-0x5f,
-0xb4,
-0x5f,
-0x80,
-0x3b,
-0xbd,
-0xc7,
-0x5f,
-0xf0,
-0x1e,
-0xad,
-0x76,
-0x5f,
-0xcd,
-0xb7,
-0x5f,
-0xd0,
-0x16,
-0xad,
-0x77,
-0x5f,
-0xcd,
-0xb8,
-0x5f,
-0xd0,
-0x0e,
-0xad,
-0x78,
-0x5f,
-0xcd,
-0xb9,
-0x5f,
-0xd0,
-0x06,
-0xac,
-0x79,
-0x5f,
-0x4c,
-0x86,
-0x08,
-0xa9,
-0x40,
-0x8d,
-0x30,
-0xc0,
-0xa9,
-0x08,
-0x8d,
-0x31,
-0xc0,
-0xa0,
-0x37,
-0x53,
-0x3c,
-0x5f,
-0x7d,
-0x5f,
-0xa0,
-0x03,
-0x53,
-0x76,
-0x5f,
-0xb7,
-0x5f,
-0xae,
-0x79,
-0x5f,
-0xa9,
-0x00,
-0x9d,
-0xbd,
-0x5f,
-0x9d,
-0xbf,
-0x5f,
-0x9d,
-0xd9,
-0x5f,
-0x9d,
-0xd7,
-0x5f,
-0xad,
-0x7a,
-0x5f,
-0xc9,
-0x02,
-0xd0,
-0x04,
-0x3a,
-0x8d,
-0x7a,
-0x5f,
-0x28,
-0xad,
-0x7b,
-0x5f,
-0xf0,
-0x2b,
-0x9c,
-0x7b,
-0x5f,
-0xa9,
-0x01,
-0x8d,
-0x04,
-0xc0,
-0xa9,
-0x01,
-0x8d,
-0x10,
-0xc0,
-0x9c,
-0x3c,
-0xc0,
-0xad,
-0x37,
-0xbe,
-0xae,
-0x38,
-0xbe,
-0x8d,
-0x70,
-0xc0,
-0x8e,
-0x6c,
-0xc0,
-0x9c,
-0x29,
-0xc0,
-0x9c,
-0x2d,
-0xc0,
-0x9c,
-0x74,
-0xc0,
-0x9c,
-0x20,
-0xc0,
-0x9c,
-0x24,
-0xc0,
-0xad,
-0x79,
-0x5f,
-0x20,
-0xb7,
-0x08,
-0x08,
-0x78,
-0xac,
-0x79,
-0x5f,
-0x99,
-0xc1,
-0x5f,
-0x8d,
-0x7c,
-0x5f,
-0xb9,
-0xd9,
-0x5f,
-0xaa,
-0xb9,
-0xd7,
-0x5f,
-0x1a,
-0xd0,
-0x01,
-0xe8,
-0x0a,
-0x99,
-0xbd,
-0x5f,
-0x8a,
-0x2a,
-0x99,
-0xbf,
-0x5f,
-0xa9,
-0x01,
-0x9c,
-0x1c,
-0xd0,
-0x8d,
-0x1c,
-0xd0,
-0xee,
-0x7a,
-0x5f,
-0xad,
-0x02,
-0x5f,
-0xcd,
-0xba,
-0x5f,
-0xd0,
-0x10,
-0xad,
-0x03,
-0x5f,
-0xcd,
-0xbb,
-0x5f,
-0xd0,
-0x08,
-0xad,
-0x04,
-0x5f,
-0xcd,
-0xbc,
-0x5f,
-0xf0,
-0x03,
-0x4c,
-0x6a,
-0x07,
-0xad,
-0x00,
-0x5f,
-0x3a,
-0xf0,
-0x0c,
-0xcc,
-0x01,
-0x5f,
-0xd0,
-0x07,
-0x98,
-0x1a,
-0x29,
-0x01,
-0x4c,
-0x74,
-0x07,
-0x9c,
-0x1d,
-0x83,
-0xad,
-0xb3,
-0x5f,
-0xf0,
-0x14,
-0xac,
-0x79,
-0x5f,
-0xb9,
-0xbf,
-0x5f,
-0x8d,
-0x0a,
-0x02,
-0xb9,
-0xbd,
-0x5f,
-0x8d,
-0x09,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x0c,
-0xd0,
-0x4c,
-0x47,
-0x3f,
-0xaa,
-0x85,
-0x1f,
-0xad,
-0x89,
-0x5f,
-0xa8,
-0x29,
-0x01,
-0x85,
-0xb6,
-0x9d,
-0xef,
-0x5f,
-0x98,
-0x4a,
-0x29,
-0x01,
-0x85,
-0xbd,
-0x9d,
-0xf1,
-0x5f,
-0x98,
-0x29,
-0x03,
-0xd8,
-0x4d,
-0x2e,
-0xbe,
-0xf8,
-0x9d,
-0xd5,
-0x5f,
-0xad,
-0x95,
-0x5f,
-0xf0,
-0x03,
-0xa9,
-0x05,
-0x60,
-0xad,
-0x94,
-0x5f,
-0xa8,
-0x29,
-0xf0,
-0xd0,
-0xf5,
-0x98,
-0x29,
-0x01,
-0xf0,
-0xf0,
-0xad,
-0x93,
-0x5f,
-0xd0,
-0xeb,
-0xad,
-0x92,
-0x5f,
-0xa8,
-0x29,
-0xf0,
-0xd0,
-0xe3,
-0x98,
-0x29,
-0x01,
-0xf0,
-0xde,
-0x18,
-0xad,
-0x94,
-0x5f,
-0x6d,
-0x92,
-0x5f,
-0x4a,
-0xc9,
-0x05,
-0xb0,
-0xd2,
-0xa8,
-0xb9,
-0x3d,
-0x5a,
-0xf0,
-0xcc,
-0x98,
-0x85,
-0x10,
-0x9d,
-0xd1,
-0x5f,
-0xac,
-0x8b,
-0x5f,
-0xae,
-0x8a,
-0x5f,
-0x20,
-0x01,
-0x07,
-0xd0,
-0xbb,
-0x98,
-0x4a,
-0x85,
-0x17,
-0x8a,
-0x6a,
-0x85,
-0x16,
-0xb0,
-0xb1,
-0xac,
-0x8f,
-0x5f,
-0xae,
-0x8e,
-0x5f,
-0x20,
-0x01,
-0x07,
-0xd0,
-0xa6,
-0x98,
-0x4a,
-0x85,
-0x19,
-0x8a,
-0x6a,
-0x85,
-0x18,
-0x90,
-0x9c,
-0xe5,
-0x16,
-0xaa,
-0xa5,
-0x19,
-0xe5,
-0x17,
-0x30,
-0x93,
-0xa4,
-0x10,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0x1a,
-0x86,
-0x1b,
-0xa4,
-0x1f,
-0x99,
-0xd7,
-0x5f,
-0x8a,
-0x99,
-0xd9,
-0x5f,
-0xa0,
-0x00,
-0xb9,
-0x4a,
-0x6b,
-0x38,
-0xe5,
-0x16,
-0xb9,
-0x5e,
-0x6b,
-0xe5,
-0x17,
-0x10,
-0x03,
-0xc8,
-0x80,
-0xf0,
-0x84,
-0xb4,
-0xb9,
-0x4a,
-0x6b,
-0x38,
-0xe5,
-0x18,
-0xb9,
-0x5e,
-0x6b,
-0xe5,
-0x19,
-0x10,
-0x03,
-0xc8,
-0x80,
-0xf0,
-0x84,
-0xb5,
-0xa9,
-0xff,
-0x85,
-0x1e,
-0x64,
-0x20,
-0xa5,
-0xb6,
-0xd0,
-0x3b,
-0xa4,
-0xb4,
-0xc4,
-0xb5,
-0xf0,
-0x79,
-0x5a,
-0x38,
-0xb9,
-0x4a,
-0x6b,
-0xe5,
-0x16,
-0xaa,
-0xb9,
-0x5e,
-0x6b,
-0xe5,
-0x17,
-0xa4,
-0x10,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0x1c,
-0x86,
-0x1d,
-0x48,
-0x0a,
-0x1a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x8a,
-0x2a,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x84,
-0x20,
-0x38,
-0x68,
-0xaa,
-0xe5,
-0x1e,
-0x7a,
-0x99,
-0x15,
-0x6b,
-0x86,
-0x1e,
-0xc8,
-0x80,
-0xc7,
-0xa5,
-0x18,
-0xd0,
-0x02,
-0xc6,
-0x19,
-0x3a,
-0x85,
-0x18,
-0xa4,
-0xb5,
-0xc4,
-0xb4,
-0xf0,
-0x35,
-0x5a,
-0x38,
-0xa5,
-0x18,
-0xf9,
-0x49,
-0x6b,
-0xaa,
-0xa5,
-0x19,
-0xf9,
-0x5d,
-0x6b,
-0xa4,
-0x10,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0x1c,
-0x86,
-0x1d,
-0x48,
-0x0a,
-0x1a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x8a,
-0x2a,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x84,
-0x20,
-0x38,
-0x68,
-0xaa,
-0xe5,
-0x1e,
-0x7a,
-0x99,
-0x15,
-0x6b,
-0x86,
-0x1e,
-0x88,
-0x80,
-0xc7,
-0xa5,
-0x1a,
-0xa6,
-0x1b,
-0xc5,
-0x1c,
-0xd0,
-0x12,
-0xe4,
-0x1d,
-0xd0,
-0x0e,
-0xa5,
-0x20,
-0xa6,
-0xb6,
-0xd0,
-0x04,
-0xc6,
-0xb5,
-0x80,
-0x22,
-0xe6,
-0xb4,
-0x80,
-0x1e,
-0x0a,
-0x08,
-0x1a,
-0x5a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x84,
-0x20,
-0x7a,
-0x6a,
-0x38,
-0xe5,
-0x1e,
-0x99,
-0x15,
-0x6b,
-0x28,
-0x8a,
-0x2a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x98,
-0xa4,
-0x1f,
-0x99,
-0x0b,
-0x61,
-0xa5,
-0xb6,
-0xd0,
-0x0d,
-0xa5,
-0x16,
-0xa4,
-0xb4,
-0xf0,
-0x10,
-0x38,
-0xf9,
-0x49,
-0x6b,
-0x3a,
-0x80,
-0x09,
-0xa4,
-0xb5,
-0xb9,
-0x4a,
-0x6b,
-0x38,
-0xe5,
-0x18,
-0x3a,
-0xaa,
-0xa9,
-0x00,
-0xa4,
-0x10,
-0x20,
-0xb7,
-0x0d,
-0xa4,
-0x1f,
-0x99,
-0x07,
-0x60,
-0x98,
-0xd0,
-0x12,
-0xac,
-0x0b,
-0x61,
-0x53,
-0x0b,
-0x60,
-0x33,
-0x60,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0x15,
-0x6b,
-0xc3,
-0x60,
-0x80,
-0x10,
-0xac,
-0x0c,
-0x61,
-0x53,
-0x0b,
-0x60,
-0x5b,
-0x60,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0x15,
-0x6b,
-0xd7,
-0x60,
-0xa6,
-0x1f,
-0xad,
-0xae,
-0x5f,
-0x9d,
-0x0f,
-0x61,
-0xad,
-0x88,
-0x5f,
-0xa8,
-0x29,
-0x04,
-0xf0,
-0x03,
-0xa9,
-0x07,
-0x60,
-0x98,
-0x29,
-0x80,
-0x9d,
-0xc3,
-0x5f,
-0x98,
-0x29,
-0x03,
-0x9d,
-0xc5,
-0x5f,
-0xd0,
-0x03,
-0x9d,
-0xc3,
-0x5f,
-0xa0,
-0x00,
-0x29,
-0x02,
-0xf0,
-0x01,
-0xc8,
-0x98,
-0x9d,
-0xc9,
-0x5f,
-0xad,
-0xab,
-0x5f,
-0xc9,
-0x81,
-0x90,
-0x03,
-0xa9,
-0x1d,
-0x60,
-0x9d,
-0xcb,
-0x5f,
-0xa9,
-0xdf,
-0x9d,
-0xcd,
-0x5f,
-0xa9,
-0x03,
-0x9d,
-0xcf,
-0x5f,
-0xad,
-0x99,
-0x5f,
-0xf0,
-0x03,
-0xa9,
-0x14,
-0x60,
-0xad,
-0x98,
-0x5f,
-0xa8,
-0x29,
-0xf0,
-0xd0,
-0xf5,
-0x98,
-0x29,
-0x01,
-0xd0,
-0x03,
-0xa9,
-0x16,
-0x60,
-0xad,
-0x97,
-0x5f,
-0xf0,
-0x03,
-0xa9,
-0x1c,
-0x60,
-0xad,
-0x96,
-0x5f,
-0xa8,
-0x29,
-0xf0,
-0xd0,
-0xf5,
-0x98,
-0x29,
-0x01,
-0xd0,
-0x03,
-0xa9,
-0x1a,
-0x60,
-0x18,
-0xad,
-0x98,
-0x5f,
-0x6d,
-0x96,
-0x5f,
-0x4a,
-0xc9,
-0x05,
-0x90,
-0x03,
-0xa9,
-0x18,
-0x60,
-0xa8,
-0xb9,
-0x3d,
-0x5a,
-0xf0,
-0xf7,
-0x98,
-0x85,
-0x11,
-0x9d,
-0xd3,
-0x5f,
-0xac,
-0x8d,
-0x5f,
-0xae,
-0x8c,
-0x5f,
-0x20,
-0x12,
-0x07,
-0xf0,
-0x03,
-0xa9,
-0x0a,
-0x60,
-0x98,
-0x4a,
-0x85,
-0x17,
-0x8a,
-0x6a,
-0x85,
-0x16,
-0x90,
-0x03,
-0xa9,
-0x0e,
-0x60,
-0xac,
-0x91,
-0x5f,
-0xae,
-0x90,
-0x5f,
-0x20,
-0x01,
-0x07,
-0xf0,
-0x03,
-0xa9,
-0x0c,
-0x60,
-0x98,
-0x4a,
-0x85,
-0x19,
-0x8a,
-0x6a,
-0x85,
-0x18,
-0xb0,
-0x03,
-0xa9,
-0x10,
-0x60,
-0xe5,
-0x16,
-0x85,
-0x1a,
-0xa5,
-0x19,
-0xe5,
-0x17,
-0x85,
-0x1b,
-0x10,
-0x03,
-0xa9,
-0x12,
-0x60,
-0xa0,
-0x00,
-0xb9,
-0x72,
-0x6b,
-0x38,
-0xe5,
-0x16,
-0xb9,
-0x82,
-0x6b,
-0xe5,
-0x17,
-0x10,
-0x03,
-0xc8,
-0x80,
-0xf0,
-0x84,
-0xbe,
-0xb9,
-0x72,
-0x6b,
-0x38,
-0xe5,
-0x18,
-0xb9,
-0x82,
-0x6b,
-0xe5,
-0x19,
-0x10,
-0x03,
-0xc8,
-0x80,
-0xf0,
-0x84,
-0xbf,
-0xa6,
-0x1a,
-0xa5,
-0x1b,
-0xa4,
-0x11,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0x1a,
-0x86,
-0x1b,
-0xa4,
-0x1f,
-0x99,
-0xdb,
-0x5f,
-0x8a,
-0x99,
-0xdd,
-0x5f,
-0xa9,
-0xff,
-0x85,
-0x1e,
-0x64,
-0x20,
-0xa5,
-0xbd,
-0xd0,
-0x3b,
-0xa4,
-0xbe,
-0xc4,
-0xbf,
-0xf0,
-0x79,
-0x5a,
-0x38,
-0xb9,
-0x72,
-0x6b,
-0xe5,
-0x16,
-0xaa,
-0xb9,
-0x82,
-0x6b,
-0xe5,
-0x17,
-0xa4,
-0x11,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0x1c,
-0x86,
-0x1d,
-0x48,
-0x0a,
-0x1a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x8a,
-0x2a,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x84,
-0x20,
-0x38,
-0x68,
-0xaa,
-0xe5,
-0x1e,
-0x7a,
-0x99,
-0x29,
-0x6b,
-0x86,
-0x1e,
-0xc8,
-0x80,
-0xc7,
-0xa5,
-0x18,
-0xd0,
-0x02,
-0xc6,
-0x19,
-0x3a,
-0x85,
-0x18,
-0xa4,
-0xbf,
-0xc4,
-0xbe,
-0xf0,
-0x35,
-0x5a,
-0x38,
-0xa5,
-0x18,
-0xf9,
-0x71,
-0x6b,
-0xaa,
-0xa5,
-0x19,
-0xf9,
-0x81,
-0x6b,
-0xa4,
-0x11,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0x1c,
-0x86,
-0x1d,
-0x48,
-0x0a,
-0x1a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x8a,
-0x2a,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x84,
-0x20,
-0x38,
-0x68,
-0xaa,
-0xe5,
-0x1e,
-0x7a,
-0x99,
-0x29,
-0x6b,
-0x86,
-0x1e,
-0x88,
-0x80,
-0xc7,
-0xa5,
-0x1a,
-0xa6,
-0x1b,
-0xc5,
-0x1c,
-0xd0,
-0x1a,
-0xe4,
-0x1d,
-0xd0,
-0x16,
-0xa5,
-0xbe,
-0xc5,
-0xbf,
-0xf0,
-0x0e,
-0xa5,
-0x20,
-0xa6,
-0xbd,
-0xd0,
-0x04,
-0xc6,
-0xbf,
-0x80,
-0x25,
-0xe6,
-0xbe,
-0x80,
-0x21,
-0xa5,
-0x1a,
-0x0a,
-0x08,
-0x1a,
-0x5a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x84,
-0x20,
-0x7a,
-0x6a,
-0x38,
-0xe5,
-0x1e,
-0x99,
-0x29,
-0x6b,
-0x28,
-0xa5,
-0x1b,
-0x2a,
-0xa4,
-0x20,
-0x99,
-0x0b,
-0x60,
-0xc8,
-0x98,
-0xa4,
-0x1f,
-0x99,
-0x0d,
-0x61,
-0xa5,
-0xbd,
-0xd0,
-0x0d,
-0xa5,
-0x16,
-0xa4,
-0xbe,
-0xf0,
-0x10,
-0x38,
-0xf9,
-0x71,
-0x6b,
-0x3a,
-0x80,
-0x09,
-0xa4,
-0xbf,
-0xb9,
-0x72,
-0x6b,
-0x38,
-0xe5,
-0x18,
-0x3a,
-0xaa,
-0xa9,
-0x00,
-0xa4,
-0x11,
-0x20,
-0xb7,
-0x0d,
-0xa4,
-0x1f,
-0x99,
-0x09,
-0x60,
-0x98,
-0xd0,
-0x12,
-0xac,
-0x0d,
-0x61,
-0x53,
-0x0b,
-0x60,
-0x83,
-0x60,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0x29,
-0x6b,
-0xeb,
-0x60,
-0x80,
-0x10,
-0xac,
-0x0e,
-0x61,
-0x53,
-0x0b,
-0x60,
-0xa3,
-0x60,
-0x98,
-0x4a,
-0xa8,
-0x53,
-0x29,
-0x6b,
-0xfb,
-0x60,
-0x38,
-0xa5,
-0xbf,
-0xe5,
-0xbe,
-0x85,
-0x1e,
-0x1a,
-0x85,
-0xab,
-0xa5,
-0xbe,
-0xa6,
-0xbd,
-0xf0,
-0x02,
-0xa5,
-0xbf,
-0x85,
-0xb9,
-0x85,
-0xaa,
-0xa5,
-0xbe,
-0xa6,
-0xbd,
-0xf0,
-0x02,
-0xa5,
-0xbf,
-0x49,
-0x3c,
-0x18,
-0x69,
-0x13,
-0x85,
-0xb7,
-0x98,
-0x69,
-0x61,
-0x85,
-0xb8,
-0xa5,
-0xb4,
-0xa6,
-0xb6,
-0xf0,
-0x02,
-0xa5,
-0xb5,
-0x49,
-0x03,
-0x18,
-0x65,
-0xb7,
-0x85,
-0xb7,
-0x98,
-0x65,
-0xb8,
-0x85,
-0xb8,
-0xa0,
-0x02,
-0x53,
-0xb7,
-0x00,
-0xac,
-0x00,
-0x53,
-0xb7,
-0x00,
-0xb2,
-0x00,
-0x53,
-0xb7,
-0x00,
-0xae,
-0x00,
-0xa5,
-0x1e,
-0xd0,
-0x07,
-0x53,
-0xb7,
-0x00,
-0xb0,
-0x00,
-0x80,
-0x20,
-0xa5,
-0xbd,
-0xd0,
-0x0f,
-0x18,
-0xa5,
-0xb7,
-0x69,
-0x3c,
-0x85,
-0xb0,
-0xa5,
-0xb8,
-0x69,
-0x00,
-0x85,
-0xb1,
-0x80,
-0x0d,
-0x38,
-0xa5,
-0xb7,
-0xe9,
-0x3c,
-0x85,
-0xb0,
-0xa5,
-0xb8,
-0xe9,
-0x00,
-0x85,
-0xb1,
-0xa6,
-0x1f,
-0xbd,
-0xc5,
-0x5f,
-0x8d,
-0x12,
-0x61,
-0xa9,
-0x00,
-0xaa,
-0x20,
-0xe4,
-0x39,
-0xa5,
-0xab,
-0xf0,
-0x06,
-0xa9,
-0x01,
-0xaa,
-0x20,
-0xe4,
-0x39,
-0x8a,
-0xa6,
-0x1f,
-0x9d,
-0xdf,
-0x5f,
-0xa9,
-0x01,
-0x9d,
-0xc7,
-0x5f,
-0xa5,
-0xab,
-0x9d,
-0xe1,
-0x5f,
-0xa5,
-0xb7,
-0x9d,
-0xf3,
-0x5f,
-0xa5,
-0xb8,
-0x9d,
-0xf5,
-0x5f,
-0xa5,
-0xac,
-0x9d,
-0xf7,
-0x5f,
-0xa5,
-0xad,
-0x9d,
-0xf9,
-0x5f,
-0xa5,
-0xb2,
-0x9d,
-0xfb,
-0x5f,
-0xa5,
-0xb3,
-0x9d,
-0xfd,
-0x5f,
-0xa5,
-0xae,
-0x9d,
-0xff,
-0x5f,
-0xa5,
-0xaf,
-0x9d,
-0x01,
-0x60,
-0xa5,
-0xb0,
-0x9d,
-0x03,
-0x60,
-0xa5,
-0xb1,
-0x9d,
-0x05,
-0x60,
-0xa5,
-0xb4,
-0x9d,
-0xe3,
-0x5f,
-0xa5,
-0xb5,
-0x9d,
-0xe5,
-0x5f,
-0xa5,
-0xbe,
-0x9d,
-0xe7,
-0x5f,
-0xa5,
-0xbf,
-0x9d,
-0xe9,
-0x5f,
-0xa5,
-0xaa,
-0x9d,
-0xeb,
-0x5f,
-0xa5,
-0xb9,
-0x9d,
-0xed,
-0x5f,
-0xa9,
-0x00,
-0x60,
-0xc0,
-0x01,
-0xd0,
-0x04,
-0xa8,
-0x8a,
-0xfc,
-0x60,
-0x85,
-0x12,
-0x98,
-0xc9,
-0x01,
-0xf0,
-0x0e,
-0x29,
-0x01,
-0xd0,
-0x0e,
-0x46,
-0x12,
-0x8a,
-0x6a,
-0xaa,
-0x98,
-0x4a,
-0xa8,
-0x80,
-0xee,
-0x8a,
-0xa6,
-0x12,
-0x60,
-0x8a,
-0x1a,
-0xd0,
-0x02,
-0xe6,
-0x12,
-0x49,
-0x55,
-0x84,
-0x14,
-0x18,
-0x65,
-0x14,
-0x85,
-0x13,
-0x90,
-0x03,
-0xe6,
-0x14,
-0x18,
-0xa5,
-0x12,
-0x49,
-0x55,
-0x84,
-0x15,
-0xaa,
-0x65,
-0x13,
-0x8a,
-0x65,
-0x14,
-0x85,
-0x14,
-0xa5,
-0x15,
-0x90,
-0x03,
-0xe6,
-0x15,
-0x18,
-0x65,
-0x14,
-0xa6,
-0x15,
-0x90,
-0x01,
-0xe8,
-0x60,
-0xa9,
-0x01,
-0x8d,
-0x04,
-0xc0,
-0x4c,
-0x00,
-0x03,
-0x08,
-0x68,
-0x8d,
-0xb2,
-0x6b,
-0x64,
-0x25,
-0x08,
-0x78,
-0xa5,
-0x25,
-0xc9,
-0x01,
-0xf0,
-0x04,
-0x28,
-0x5c,
-0x80,
-0xf4,
-0x28,
-0x20,
-0xc4,
-0x0e,
-0x08,
-0x78,
-0xa5,
-0x24,
-0xd0,
-0x04,
-0x28,
-0x5c,
-0x80,
-0xf6,
-0xc6,
-0x24,
-0x28,
-0xa5,
-0x60,
-0x85,
-0x67,
-0x20,
-0x41,
-0x1d,
-0xa5,
-0x60,
-0xa6,
-0x23,
-0xf0,
-0x07,
-0xc5,
-0x27,
-0xf0,
-0x0d,
-0x1a,
-0x80,
-0x05,
-0xc5,
-0x26,
-0xf0,
-0x06,
-0x3a,
-0x85,
-0x67,
-0x20,
-0x72,
-0x1f,
-0xa5,
-0x27,
-0xa6,
-0x23,
-0xf0,
-0x02,
-0xa5,
-0x26,
-0xc5,
-0x60,
-0xf0,
-0x0b,
-0x8a,
-0xf0,
-0x04,
-0xc6,
-0x60,
-0x80,
-0xc2,
-0xe6,
-0x60,
-0x80,
-0xbe,
-0x85,
-0x67,
-0x20,
-0x72,
-0x1f,
-0x20,
-0xf2,
-0x29,
-0x80,
-0xa4,
-0x18,
-0x69,
-0x14,
-0x90,
-0x01,
-0xc8,
-0xda,
-0x85,
-0x32,
-0x84,
-0x33,
-0x49,
-0x66,
-0x84,
-0x34,
-0xa5,
-0x33,
-0x49,
-0x66,
-0x18,
-0x65,
-0x34,
-0x85,
-0x34,
-0x98,
-0x69,
-0x00,
-0x85,
-0x35,
-0xa5,
-0x32,
-0x49,
-0x06,
-0x18,
-0x65,
-0x34,
-0xaa,
-0x98,
-0x65,
-0x35,
-0x85,
-0x35,
-0xa5,
-0x33,
-0x49,
-0x06,
-0x18,
-0x65,
-0x35,
-0xe0,
-0xfa,
-0x90,
-0x01,
-0x1a,
-0xfa,
-0x60,
-0x18,
-0x69,
-0x10,
-0x90,
-0x01,
-0xc8,
-0x84,
-0x32,
-0x46,
-0x32,
-0x6a,
-0x46,
-0x32,
-0x6a,
-0x46,
-0x32,
-0x6a,
-0x46,
-0x32,
-0x6a,
-0x46,
-0x32,
-0x6a,
-0x60,
-0xa0,
-0x12,
-0x64,
-0x6e,
-0x64,
-0x6f,
-0x64,
-0x70,
-0x64,
-0x71,
-0x13,
-0x6e,
-0x00,
-0x5f,
-0x81,
-0x64,
-0x72,
-0x64,
-0x73,
-0xa0,
-0x48,
-0x13,
-0x6e,
-0x00,
-0x71,
-0x81,
-0x13,
-0x6e,
-0x00,
-0xb9,
-0x81,
-0x13,
-0x6e,
-0x00,
-0x01,
-0x82,
-0xad,
-0xb5,
-0x6b,
-0xae,
-0xb4,
-0x6b,
-0xd0,
-0x05,
-0xcd,
-0xb6,
-0x6b,
-0xf0,
-0x0f,
-0x20,
-0xc6,
-0x0f,
-0x20,
-0xb1,
-0x10,
-0xad,
-0xb5,
-0x6b,
-0x8d,
-0xb6,
-0x6b,
-0x9c,
-0xb4,
-0x6b,
-0xa6,
-0x26,
-0x9e,
-0x15,
-0x75,
-0x9e,
-0x27,
-0x75,
-0xa9,
-0x00,
-0xa8,
-0xe4,
-0x27,
-0xf0,
-0x19,
-0x9d,
-0x16,
-0x75,
-0x48,
-0x98,
-0x9d,
-0x28,
-0x75,
-0x68,
-0xc9,
-0x28,
-0xf0,
-0x06,
-0x18,
-0x69,
-0x14,
-0xc8,
-0x80,
-0x03,
-0xa9,
-0x00,
-0xa8,
-0xe8,
-0x80,
-0xe3,
-0x9d,
-0x16,
-0x75,
-0x9d,
-0x17,
-0x75,
-0x98,
-0x9d,
-0x28,
-0x75,
-0x9d,
-0x29,
-0x75,
-0x38,
-0xa5,
-0x29,
-0xe5,
-0x28,
-0xaa,
-0x1a,
-0x85,
-0x2e,
-0xbd,
-0x42,
-0x5a,
-0x85,
-0x2c,
-0xa2,
-0x00,
-0x8a,
-0x0a,
-0x1a,
-0x45,
-0x2e,
-0x20,
-0x7a,
-0x0e,
-0x9d,
-0xb7,
-0x7d,
-0xe8,
-0xe0,
-0x14,
-0x90,
-0xf0,
-0xa2,
-0x00,
-0xbd,
-0xb7,
-0x7d,
-0xdd,
-0xb8,
-0x7d,
-0xd0,
-0x05,
-0x09,
-0x80,
-0x9d,
-0xb7,
-0x7d,
-0xe8,
-0xe0,
-0x13,
-0x90,
-0xee,
-0x38,
-0xa5,
-0x27,
-0xe5,
-0x26,
-0xaa,
-0x1a,
-0x85,
-0x2e,
-0xbd,
-0x56,
-0x5a,
-0x85,
-0x2d,
-0xa2,
-0x00,
-0x8a,
-0x0a,
-0x1a,
-0x45,
-0x2e,
-0x20,
-0xb2,
-0x0e,
-0x9d,
-0xcb,
-0x7d,
-0xe8,
-0xe0,
-0x10,
-0x90,
-0xf0,
-0xa5,
-0x23,
-0xf0,
-0x14,
-0xa2,
-0x0f,
-0xbd,
-0xcb,
-0x7d,
-0xdd,
-0xca,
-0x7d,
-0xd0,
-0x05,
-0x09,
-0x80,
-0x9d,
-0xcb,
-0x7d,
-0xca,
-0xd0,
-0xf0,
-0x80,
-0x14,
-0xa2,
-0x00,
-0xbd,
-0xcb,
-0x7d,
-0xdd,
-0xcc,
-0x7d,
-0xd0,
-0x05,
-0x09,
-0x80,
-0x9d,
-0xcb,
-0x7d,
-0xe8,
-0xe0,
-0x0f,
-0x90,
-0xee,
-0xa9,
-0x00,
-0xa6,
-0x23,
-0xf0,
-0x02,
-0xa9,
-0x0f,
-0x85,
-0x8a,
-0xe6,
-0x25,
-0x60,
-0x85,
-0x2e,
-0xa9,
-0x39,
-0x85,
-0x4a,
-0xa9,
-0xbe,
-0x85,
-0x4b,
-0xa2,
-0x00,
-0xa0,
-0x5a,
-0xa5,
-0x2e,
-0xd1,
-0x4a,
-0x90,
-0x19,
-0xe0,
-0x04,
-0xf0,
-0x0e,
-0xe8,
-0x18,
-0xa5,
-0x4a,
-0x69,
-0x5b,
-0x85,
-0x4a,
-0x90,
-0xec,
-0xe6,
-0x4b,
-0x80,
-0xe8,
-0xa0,
-0x5a,
-0xd3,
-0x4a,
-0xbb,
-0x6b,
-0x60,
-0x8a,
-0xf0,
-0xf6,
-0xb1,
-0x4a,
-0x85,
-0x30,
-0x38,
-0xa5,
-0x4a,
-0xe9,
-0x5b,
-0x85,
-0x4c,
-0xa5,
-0x4b,
-0xe9,
-0x00,
-0x85,
-0x4d,
-0xb1,
-0x4c,
-0x85,
-0x2f,
-0xc5,
-0x2e,
-0xd0,
-0x07,
-0xa0,
-0x5a,
-0xd3,
-0x4c,
-0xbb,
-0x6b,
-0x60,
-0x38,
-0xa5,
-0x30,
-0xe5,
-0x2e,
-0x85,
-0x33,
-0x64,
-0x32,
-0x38,
-0xa5,
-0x30,
-0xe5,
-0x2f,
-0x85,
-0x34,
-0x64,
-0x35,
-0x20,
-0x2a,
-0x39,
-0xa5,
-0x32,
-0x85,
-0x2e,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0x2e,
-0x85,
-0x2f,
-0xa9,
-0x06,
-0x85,
-0x34,
-0xa2,
-0x00,
-0x64,
-0x35,
-0xdc,
-0xb1,
-0x4c,
-0x85,
-0x30,
-0xb1,
-0x4a,
-0x10,
-0x20,
-0xa4,
-0x35,
-0xf0,
-0x1c,
-0x85,
-0x31,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x31,
-0x45,
-0x2f,
-0x85,
-0x31,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0x31,
-0x85,
-0x32,
-0x84,
-0x31,
-0xa9,
-0x00,
-0xe5,
-0x31,
-0x85,
-0x33,
-0x80,
-0x06,
-0x45,
-0x2f,
-0x85,
-0x32,
-0x84,
-0x33,
-0xa5,
-0x30,
-0x10,
-0x1e,
-0xa4,
-0x35,
-0xf0,
-0x1a,
-0x85,
-0x31,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x31,
-0x45,
-0x2e,
-0x85,
-0x31,
-0x38,
-0xa5,
-0x32,
-0xe5,
-0x31,
-0x85,
-0x32,
-0x84,
-0x31,
-0xa5,
-0x33,
-0xe5,
-0x31,
-0x80,
-0x0a,
-0x45,
-0x2e,
-0x18,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x65,
-0x33,
-0xa8,
-0xa5,
-0x32,
-0x10,
-0x01,
-0xc8,
-0x98,
-0x9d,
-0xbb,
-0x6b,
-0xe8,
-0xe6,
-0x35,
-0xa5,
-0x35,
-0xc9,
-0x0f,
-0xd0,
-0x92,
-0xc6,
-0x34,
-0xd0,
-0x8c,
-0x60,
-0xa9,
-0x39,
-0x85,
-0x4a,
-0xa9,
-0x75,
-0x85,
-0x4b,
-0xa9,
-0x76,
-0x85,
-0x4c,
-0xa9,
-0x40,
-0x85,
-0x4d,
-0x64,
-0x38,
-0xa0,
-0x11,
-0x13,
-0x38,
-0x00,
-0x39,
-0x00,
-0xa9,
-0x11,
-0x85,
-0x30,
-0xa9,
-0x15,
-0x85,
-0x31,
-0xa0,
-0x0e,
-0xd3,
-0x4c,
-0x50,
-0x00,
-0x64,
-0x4e,
-0xa2,
-0x00,
-0xa9,
-0x06,
-0x85,
-0x2e,
-0x18,
-0xbd,
-0xbc,
-0x6b,
-0x3c,
-0x45,
-0x50,
-0x85,
-0x32,
-0x98,
-0x10,
-0x09,
-0x7d,
-0xbb,
-0x6b,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x80,
-0x07,
-0x7d,
-0xbb,
-0x6b,
-0x85,
-0x33,
-0xa9,
-0x00,
-0x69,
-0x00,
-0x85,
-0x34,
-0x18,
-0xbd,
-0xbd,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x51,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xbe,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x52,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xbf,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x53,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc0,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x54,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc1,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x55,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc2,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x56,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc3,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x57,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc4,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x58,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc5,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x59,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc6,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x5a,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc7,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x5b,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc8,
-0x6b,
-0xf0,
-0x20,
-0x3c,
-0x45,
-0x5c,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x0d,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x65,
-0x34,
-0x85,
-0x34,
-0x18,
-0x80,
-0x09,
-0x65,
-0x33,
-0x85,
-0x33,
-0x90,
-0x03,
-0x18,
-0xe6,
-0x34,
-0xbd,
-0xc9,
-0x6b,
-0x3c,
-0x45,
-0x5d,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x10,
-0x08,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0xff,
-0x80,
-0x06,
-0x65,
-0x33,
-0x85,
-0x33,
-0xa9,
-0x00,
-0x65,
-0x34,
-0xf0,
-0x0a,
-0x10,
-0x04,
-0xa9,
-0x00,
-0x80,
-0x0e,
-0xa9,
-0xff,
-0x80,
-0x0a,
-0xa5,
-0x33,
-0xa4,
-0x32,
-0x10,
-0x04,
-0x1a,
-0xd0,
-0x01,
-0x3a,
-0x92,
-0x4a,
-0xda,
-0xa6,
-0x4e,
-0x18,
-0x75,
-0x38,
-0x95,
-0x38,
-0x90,
-0x07,
-0x18,
-0xf6,
-0x39,
-0xd0,
-0x02,
-0xf6,
-0x3a,
-0xe8,
-0xe8,
-0xe8,
-0x86,
-0x4e,
-0xe6,
-0x4a,
-0xd0,
-0x02,
-0xe6,
-0x4b,
-0x68,
-0x69,
-0x0f,
-0xaa,
-0xc6,
-0x2e,
-0xf0,
-0x03,
-0x4c,
-0xe1,
-0x10,
-0xa5,
-0x4c,
-0x69,
-0x0e,
-0x85,
-0x4c,
-0x90,
-0x02,
-0xe6,
-0x4d,
-0xc6,
-0x31,
-0xf0,
-0x03,
-0x4c,
-0xd2,
-0x10,
-0xc6,
-0x30,
-0xf0,
-0x03,
-0x4c,
-0xce,
-0x10,
-0x64,
-0x2e,
-0xa5,
-0x2e,
-0x49,
-0x09,
-0xa8,
-0xa2,
-0x00,
-0xa9,
-0x03,
-0x85,
-0x2f,
-0xb9,
-0x38,
-0x00,
-0x0a,
-0x48,
-0xb9,
-0x39,
-0x00,
-0x2a,
-0x95,
-0x50,
-0xb9,
-0x3a,
-0x00,
-0x2a,
-0x95,
-0x51,
-0x68,
-0x0a,
-0x90,
-0x06,
-0xf6,
-0x50,
-0xd0,
-0x02,
-0xf6,
-0x51,
-0xc8,
-0xc8,
-0xc8,
-0xe8,
-0xe8,
-0xc6,
-0x2f,
-0xd0,
-0xdc,
-0xa0,
-0x00,
-0x38,
-0xa5,
-0x50,
-0xe5,
-0x52,
-0x85,
-0x2f,
-0xa5,
-0x51,
-0xe5,
-0x53,
-0x08,
-0x05,
-0x2f,
-0x85,
-0x2f,
-0xd0,
-0x01,
-0xc8,
-0x38,
-0xa5,
-0x52,
-0xe5,
-0x54,
-0x85,
-0x30,
-0xa5,
-0x53,
-0xe5,
-0x55,
-0x08,
-0x05,
-0x30,
-0x85,
-0x30,
-0xd0,
-0x01,
-0xc8,
-0x38,
-0xa5,
-0x54,
-0xe5,
-0x50,
-0x85,
-0x31,
-0xa5,
-0x55,
-0xe5,
-0x51,
-0x08,
-0x05,
-0x31,
-0x85,
-0x31,
-0xd0,
-0x01,
-0xc8,
-0xa6,
-0x2e,
-0x98,
-0x95,
-0xdc,
-0xa9,
-0x00,
-0xa8,
-0x28,
-0xb0,
-0x03,
-0x69,
-0x04,
-0xc8,
-0x28,
-0xb0,
-0x03,
-0x1a,
-0x1a,
-0xc8,
-0x28,
-0xb0,
-0x02,
-0x1a,
-0xc8,
-0xc0,
-0x01,
-0xd0,
-0x26,
-0xc9,
-0x01,
-0xd0,
-0x08,
-0xa4,
-0x30,
-0xd0,
-0x1e,
-0xa9,
-0x00,
-0x80,
-0x1a,
-0xc9,
-0x02,
-0xd0,
-0x08,
-0xa4,
-0x2f,
-0xd0,
-0x12,
-0xa9,
-0x00,
-0x80,
-0x0e,
-0xa4,
-0x2f,
-0xd0,
-0x04,
-0xa9,
-0x05,
-0x80,
-0x06,
-0xa4,
-0x30,
-0xd0,
-0x02,
-0xa9,
-0x06,
-0x49,
-0x03,
-0xa8,
-0xb9,
-0x3d,
-0x40,
-0x85,
-0x5d,
-0xb9,
-0x3e,
-0x40,
-0x85,
-0x5e,
-0xb9,
-0x3f,
-0x40,
-0x85,
-0x5f,
-0xa6,
-0x5e,
-0xa4,
-0x5d,
-0x98,
-0x0a,
-0xa8,
-0xb9,
-0x50,
-0x00,
-0x85,
-0x32,
-0xb9,
-0x51,
-0x00,
-0x85,
-0x33,
-0xa5,
-0x2e,
-0x49,
-0x06,
-0xaa,
-0xa0,
-0x00,
-0x38,
-0xb9,
-0x50,
-0x00,
-0xe5,
-0x32,
-0x9d,
-0x97,
-0x7d,
-0xb9,
-0x51,
-0x00,
-0xe5,
-0x33,
-0x9d,
-0x98,
-0x7d,
-0xe8,
-0xe8,
-0xc8,
-0xc8,
-0xc0,
-0x06,
-0xd0,
-0xe7,
-0xa5,
-0x2e,
-0x49,
-0x03,
-0xaa,
-0xa5,
-0x5d,
-0x9d,
-0xa3,
-0x7d,
-0xa5,
-0x5e,
-0x9d,
-0xa4,
-0x7d,
-0xa5,
-0x5f,
-0x9d,
-0xa5,
-0x7d,
-0xa5,
-0x2e,
-0x49,
-0x06,
-0xa8,
-0x18,
-0x65,
-0x5f,
-0x65,
-0x5f,
-0xaa,
-0xbd,
-0x98,
-0x7d,
-0x85,
-0x6b,
-0xbd,
-0x97,
-0x7d,
-0x85,
-0x6a,
-0x98,
-0x18,
-0x65,
-0x5e,
-0x65,
-0x5e,
-0xaa,
-0xbd,
-0x98,
-0x7d,
-0x85,
-0x69,
-0xbd,
-0x97,
-0x7d,
-0x85,
-0x68,
-0x49,
-0x10,
-0x85,
-0x32,
-0x84,
-0x33,
-0x18,
-0xa5,
-0x69,
-0x49,
-0x10,
-0x65,
-0x33,
-0x85,
-0x33,
-0x38,
-0xa5,
-0x6a,
-0xe5,
-0x68,
-0x85,
-0x34,
-0xa5,
-0x6b,
-0xe5,
-0x69,
-0x85,
-0x35,
-0x20,
-0x4e,
-0x39,
-0xa0,
-0x02,
-0x53,
-0x32,
-0x00,
-0x56,
-0x00,
-0x18,
-0xa5,
-0x68,
-0x65,
-0x6a,
-0x85,
-0x58,
-0xa5,
-0x69,
-0x65,
-0x6b,
-0x85,
-0x59,
-0xa5,
-0x56,
-0x45,
-0x68,
-0x85,
-0x5a,
-0x84,
-0x5b,
-0xa5,
-0x57,
-0x45,
-0x68,
-0x18,
-0x65,
-0x5b,
-0x85,
-0x5b,
-0x98,
-0x69,
-0x00,
-0x85,
-0x5c,
-0xa5,
-0x56,
-0x45,
-0x69,
-0x18,
-0x65,
-0x5b,
-0x85,
-0x5b,
-0x98,
-0x65,
-0x5c,
-0x85,
-0x5c,
-0xa5,
-0x57,
-0x45,
-0x69,
-0x18,
-0x65,
-0x5c,
-0x85,
-0x5c,
-0xa5,
-0x2e,
-0x49,
-0x07,
-0x18,
-0x69,
-0xa9,
-0x85,
-0x4c,
-0xa9,
-0x7d,
-0x69,
-0x00,
-0x85,
-0x4d,
-0xa0,
-0x07,
-0x73,
-0x56,
-0x00,
-0x4c,
-0xa5,
-0x2e,
-0x1a,
-0xc9,
-0x02,
-0xf0,
-0x05,
-0x85,
-0x2e,
-0x4c,
-0x33,
-0x13,
-0x60,
-0xa2,
-0x00,
-0xa8,
-0x30,
-0x04,
-0xe8,
-0x0a,
-0x10,
-0xfc,
-0xbd,
-0x52,
-0x40,
-0xaa,
-0x60,
-0xa5,
-0x9a,
-0x05,
-0x9e,
-0x05,
-0xa2,
-0x05,
-0xa6,
-0xf0,
-0x33,
-0x20,
-0xdf,
-0x14,
-0x45,
-0x99,
-0x84,
-0xea,
-0x8a,
-0x45,
-0x9a,
-0x05,
-0xea,
-0x85,
-0xea,
-0x8a,
-0x45,
-0x9d,
-0x84,
-0xeb,
-0x8a,
-0x45,
-0x9e,
-0x05,
-0xeb,
-0x85,
-0xeb,
-0x8a,
-0x45,
-0xa1,
-0x84,
-0xec,
-0x8a,
-0x45,
-0xa2,
-0x05,
-0xec,
-0x85,
-0xec,
-0x8a,
-0x45,
-0xa5,
-0x84,
-0xed,
-0x8a,
-0x45,
-0xa6,
-0x05,
-0xed,
-0x85,
-0xed,
-0x60,
-0xa5,
-0x99,
-0x05,
-0x9d,
-0x05,
-0xa1,
-0x05,
-0xa5,
-0xf0,
-0x33,
-0x20,
-0xdf,
-0x14,
-0x45,
-0x98,
-0x84,
-0xea,
-0x8a,
-0x45,
-0x99,
-0x05,
-0xea,
-0x85,
-0xea,
-0x8a,
-0x45,
-0x9c,
-0x84,
-0xeb,
-0x8a,
-0x45,
-0x9d,
-0x05,
-0xeb,
-0x85,
-0xeb,
-0x8a,
-0x45,
-0xa0,
-0x84,
-0xec,
-0x8a,
-0x45,
-0xa1,
-0x05,
-0xec,
-0x85,
-0xec,
-0x8a,
-0x45,
-0xa4,
-0x84,
-0xed,
-0x8a,
-0x45,
-0xa5,
-0x05,
-0xed,
-0x85,
-0xed,
-0x60,
-0xa5,
-0x98,
-0x85,
-0xea,
-0xa5,
-0x9c,
-0x85,
-0xeb,
-0xa5,
-0xa0,
-0x85,
-0xec,
-0xa5,
-0xa4,
-0x85,
-0xed,
-0x60,
-0xaa,
-0x45,
-0xc8,
-0x84,
-0xcb,
-0x8a,
-0x45,
-0xc9,
-0x18,
-0x65,
-0xcb,
-0x90,
-0x01,
-0xc8,
-0x84,
-0xe7,
-0x8a,
-0x45,
-0xcc,
-0x84,
-0xcf,
-0x8a,
-0x45,
-0xcd,
-0x18,
-0x65,
-0xcf,
-0x90,
-0x01,
-0xc8,
-0x98,
-0x0a,
-0x0a,
-0x0a,
-0x85,
-0xe8,
-0x8a,
-0x45,
-0xc4,
-0x84,
-0xc7,
-0x8a,
-0x45,
-0xc5,
-0x18,
-0x65,
-0xc7,
-0x90,
-0x02,
-0x18,
-0xc8,
-0x85,
-0xc4,
-0x84,
-0xc5,
-0x8a,
-0x45,
-0xc6,
-0x65,
-0xc5,
-0x85,
-0xc5,
-0x8a,
-0x45,
-0xd0,
-0x84,
-0xd3,
-0x8a,
-0x45,
-0xd1,
-0x18,
-0x65,
-0xd3,
-0x90,
-0x02,
-0x18,
-0xc8,
-0x85,
-0xd0,
-0x84,
-0xd1,
-0x8a,
-0x45,
-0xd2,
-0x65,
-0xd1,
-0x85,
-0xd1,
-0x18,
-0xa5,
-0xc4,
-0x65,
-0xd0,
-0xa5,
-0xc5,
-0x65,
-0xd1,
-0x6a,
-0xa8,
-0x90,
-0x04,
-0x1a,
-0xd0,
-0x01,
-0x3a,
-0x85,
-0xe9,
-0x98,
-0x4a,
-0x4a,
-0x49,
-0x20,
-0x05,
-0xe7,
-0x85,
-0xe7,
-0x98,
-0x05,
-0xe8,
-0x85,
-0xe8,
-0x38,
-0xa5,
-0xc4,
-0xe5,
-0xd0,
-0xaa,
-0xa5,
-0xc5,
-0xe5,
-0xd1,
-0xb0,
-0x52,
-0x38,
-0xa5,
-0xd0,
-0xe5,
-0xc4,
-0x85,
-0xca,
-0xa5,
-0xd1,
-0xe5,
-0xc5,
-0x85,
-0xcb,
-0xa4,
-0xe9,
-0xb9,
-0x66,
-0x5a,
-0xaa,
-0x45,
-0xca,
-0x84,
-0xc4,
-0x8a,
-0x45,
-0xcb,
-0x18,
-0x65,
-0xc4,
-0x85,
-0xc4,
-0x98,
-0x69,
-0x00,
-0xa4,
-0xe9,
-0xbe,
-0x66,
-0x5b,
-0xf0,
-0x14,
-0x85,
-0xc5,
-0x8a,
-0x45,
-0xca,
-0x18,
-0x65,
-0xc4,
-0x85,
-0xc4,
-0x98,
-0x65,
-0xc5,
-0x85,
-0xc5,
-0x8a,
-0x45,
-0xcb,
-0x65,
-0xc5,
-0xa6,
-0xc4,
-0x10,
-0x01,
-0x1a,
-0xc9,
-0x27,
-0x90,
-0x02,
-0xa9,
-0x26,
-0x85,
-0xe6,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0xe6,
-0x85,
-0xe6,
-0x60,
-0x86,
-0xca,
-0x85,
-0xcb,
-0xa4,
-0xe9,
-0xb9,
-0x66,
-0x5a,
-0xaa,
-0x45,
-0xca,
-0x84,
-0xc4,
-0x8a,
-0x45,
-0xcb,
-0x18,
-0x65,
-0xc4,
-0x85,
-0xc4,
-0x98,
-0x69,
-0x00,
-0xa4,
-0xe9,
-0xbe,
-0x66,
-0x5b,
-0xf0,
-0x14,
-0x85,
-0xc5,
-0x8a,
-0x45,
-0xca,
-0x18,
-0x65,
-0xc4,
-0x85,
-0xc4,
-0x98,
-0x65,
-0xc5,
-0x85,
-0xc5,
-0x8a,
-0x45,
-0xcb,
-0x65,
-0xc5,
-0xa6,
-0xc4,
-0x10,
-0x01,
-0x1a,
-0xc9,
-0x27,
-0x90,
-0x02,
-0xa9,
-0x26,
-0x85,
-0xe6,
-0x60,
-0xa5,
-0xc4,
-0x0a,
-0xa5,
-0xc5,
-0x2a,
-0x85,
-0xc4,
-0xa5,
-0xc6,
-0x2a,
-0x85,
-0xc5,
-0xa5,
-0xc7,
-0x2a,
-0x85,
-0xc6,
-0xa5,
-0xc9,
-0x4a,
-0x4a,
-0x85,
-0xc8,
-0xa5,
-0xca,
-0x49,
-0x40,
-0x05,
-0xc8,
-0x85,
-0xc8,
-0x84,
-0xc9,
-0xa5,
-0xcb,
-0x49,
-0x40,
-0x05,
-0xc9,
-0x85,
-0xc9,
-0x84,
-0xca,
-0xa5,
-0xcd,
-0x4a,
-0x4a,
-0x85,
-0xcc,
-0xa5,
-0xce,
-0x49,
-0x40,
-0x05,
-0xcc,
-0x85,
-0xcc,
-0x84,
-0xcd,
-0xa5,
-0xcf,
-0x49,
-0x40,
-0x05,
-0xcd,
-0x85,
-0xcd,
-0x84,
-0xce,
-0xa5,
-0xd0,
-0x0a,
-0xa5,
-0xd1,
-0x2a,
-0x85,
-0xd0,
-0xa5,
-0xd2,
-0x2a,
-0x85,
-0xd1,
-0xa5,
-0xd3,
-0x2a,
-0x85,
-0xd2,
-0x60,
-0xa5,
-0xc4,
-0x49,
-0x04,
-0x84,
-0xc4,
-0xa5,
-0xc5,
-0x49,
-0x04,
-0x05,
-0xc4,
-0x85,
-0xc4,
-0x84,
-0xc5,
-0xa5,
-0xc6,
-0x49,
-0x04,
-0x05,
-0xc5,
-0x85,
-0xc5,
-0x84,
-0xc6,
-0xa5,
-0xc9,
-0x4a,
-0x85,
-0xc8,
-0xa5,
-0xca,
-0x49,
-0x80,
-0x05,
-0xc8,
-0x85,
-0xc8,
-0x84,
-0xc9,
-0xa5,
-0xcb,
-0x49,
-0x80,
-0x05,
-0xc9,
-0x85,
-0xc9,
-0x84,
-0xca,
-0xa5,
-0xcd,
-0x4a,
-0x85,
-0xcc,
-0xa5,
-0xce,
-0x49,
-0x80,
-0x05,
-0xcc,
-0x85,
-0xcc,
-0x84,
-0xcd,
-0xa5,
-0xcf,
-0x49,
-0x80,
-0x05,
-0xcd,
-0x85,
-0xcd,
-0x84,
-0xce,
-0xa5,
-0xd0,
-0x49,
-0x04,
-0x84,
-0xd0,
-0xa5,
-0xd1,
-0x49,
-0x04,
-0x05,
-0xd0,
-0x85,
-0xd0,
-0x84,
-0xd1,
-0xa5,
-0xd2,
-0x49,
-0x04,
-0x05,
-0xd1,
-0x85,
-0xd1,
-0x84,
-0xd2,
-0x60,
-0xa5,
-0xc4,
-0x49,
-0x08,
-0x84,
-0xc4,
-0xa5,
-0xc5,
-0x49,
-0x08,
-0x05,
-0xc4,
-0x85,
-0xc4,
-0x84,
-0xc5,
-0xa5,
-0xc6,
-0x49,
-0x08,
-0x05,
-0xc5,
-0x85,
-0xc5,
-0x84,
-0xc6,
-0xa5,
-0xc9,
-0x85,
-0xc8,
-0xa5,
-0xca,
-0x85,
-0xc9,
-0xa5,
-0xcb,
-0x85,
-0xca,
-0xa5,
-0xcd,
-0x85,
-0xcc,
-0xa5,
-0xce,
-0x85,
-0xcd,
-0xa5,
-0xcf,
-0x85,
-0xce,
-0xa5,
-0xd0,
-0x49,
-0x08,
-0x84,
-0xd0,
-0xa5,
-0xd1,
-0x49,
-0x08,
-0x05,
-0xd0,
-0x85,
-0xd0,
-0x84,
-0xd1,
-0xa5,
-0xd2,
-0x49,
-0x08,
-0x05,
-0xd1,
-0x85,
-0xd1,
-0x84,
-0xd2,
-0x60,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0xa5,
-0xc8,
-0x0a,
-0xa5,
-0xc9,
-0x2a,
-0x85,
-0xc8,
-0xa5,
-0xca,
-0x2a,
-0x85,
-0xc9,
-0xa5,
-0xcb,
-0x2a,
-0x85,
-0xca,
-0xa5,
-0xcc,
-0x0a,
-0xa5,
-0xcd,
-0x2a,
-0x85,
-0xcc,
-0xa5,
-0xce,
-0x2a,
-0x85,
-0xcd,
-0xa5,
-0xcf,
-0x2a,
-0x85,
-0xce,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x60,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0xa5,
-0xc8,
-0x49,
-0x04,
-0x84,
-0xc8,
-0xa5,
-0xc9,
-0x49,
-0x04,
-0x05,
-0xc8,
-0x85,
-0xc8,
-0x84,
-0xc9,
-0xa5,
-0xca,
-0x49,
-0x04,
-0x05,
-0xc9,
-0x85,
-0xc9,
-0x84,
-0xca,
-0xa5,
-0xcc,
-0x49,
-0x04,
-0x84,
-0xcc,
-0xa5,
-0xcd,
-0x49,
-0x04,
-0x05,
-0xcc,
-0x85,
-0xcc,
-0x84,
-0xcd,
-0xa5,
-0xce,
-0x49,
-0x04,
-0x05,
-0xcd,
-0x85,
-0xcd,
-0x84,
-0xce,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x60,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0xa5,
-0xc8,
-0x49,
-0x08,
-0x84,
-0xc8,
-0xa5,
-0xc9,
-0x49,
-0x08,
-0x05,
-0xc8,
-0x85,
-0xc8,
-0x84,
-0xc9,
-0xa5,
-0xca,
-0x49,
-0x08,
-0x05,
-0xc9,
-0x85,
-0xc9,
-0x84,
-0xca,
-0xa5,
-0xcc,
-0x49,
-0x08,
-0x84,
-0xcc,
-0xa5,
-0xcd,
-0x49,
-0x08,
-0x05,
-0xcc,
-0x85,
-0xcc,
-0x84,
-0xcd,
-0xa5,
-0xce,
-0x49,
-0x08,
-0x05,
-0xcd,
-0x85,
-0xcd,
-0x84,
-0xce,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x60,
-0x46,
-0xc6,
-0x66,
-0xc5,
-0x66,
-0xc4,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x46,
-0xd2,
-0x66,
-0xd1,
-0x66,
-0xd0,
-0x60,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x60,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x60,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x46,
-0xca,
-0x66,
-0xc9,
-0x66,
-0xc8,
-0x46,
-0xce,
-0x66,
-0xcd,
-0x66,
-0xcc,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x60,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x60,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc4,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc8,
-0x26,
-0xc9,
-0x26,
-0xca,
-0x06,
-0xcc,
-0x26,
-0xcd,
-0x26,
-0xce,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x06,
-0xd0,
-0x26,
-0xd1,
-0x26,
-0xd2,
-0x60,
-0xa5,
-0xc7,
-0x49,
-0x20,
-0x85,
-0xc7,
-0xa5,
-0xc6,
-0x49,
-0x20,
-0x85,
-0xc6,
-0x98,
-0x05,
-0xc7,
-0x85,
-0xc7,
-0xa5,
-0xc5,
-0x49,
-0x20,
-0x85,
-0xc5,
-0x98,
-0x05,
-0xc6,
-0x85,
-0xc6,
-0xa5,
-0xc4,
-0x49,
-0x20,
-0x85,
-0xc4,
-0x98,
-0x05,
-0xc5,
-0x85,
-0xc5,
-0x06,
-0xc8,
-0x26,
-0xc9,
-0x26,
-0xca,
-0x06,
-0xc8,
-0x26,
-0xc9,
-0x26,
-0xca,
-0x06,
-0xcc,
-0x26,
-0xcd,
-0x26,
-0xce,
-0x06,
-0xcc,
-0x26,
-0xcd,
-0x26,
-0xce,
-0xa5,
-0xd3,
-0x49,
-0x20,
-0x85,
-0xd3,
-0xa5,
-0xd2,
-0x49,
-0x20,
-0x85,
-0xd2,
-0x98,
-0x05,
-0xd3,
-0x85,
-0xd3,
-0xa5,
-0xd1,
-0x49,
-0x20,
-0x85,
-0xd1,
-0x98,
-0x05,
-0xd2,
-0x85,
-0xd2,
-0xa5,
-0xd0,
-0x49,
-0x20,
-0x85,
-0xd0,
-0x98,
-0x05,
-0xd1,
-0x85,
-0xd1,
-0x60,
-0xa5,
-0xc7,
-0x49,
-0x40,
-0x85,
-0xc7,
-0xa5,
-0xc6,
-0x49,
-0x40,
-0x85,
-0xc6,
-0x98,
-0x05,
-0xc7,
-0x85,
-0xc7,
-0xa5,
-0xc5,
-0x49,
-0x40,
-0x85,
-0xc5,
-0x98,
-0x05,
-0xc6,
-0x85,
-0xc6,
-0xa5,
-0xc4,
-0x49,
-0x40,
-0x85,
-0xc4,
-0x98,
-0x05,
-0xc5,
-0x85,
-0xc5,
-0x06,
-0xc8,
-0x26,
-0xc9,
-0x26,
-0xca,
-0x06,
-0xc8,
-0x26,
-0xc9,
-0x26,
-0xca,
-0x06,
-0xc8,
-0x26,
-0xc9,
-0x26,
-0xca,
-0x06,
-0xcc,
-0x26,
-0xcd,
-0x26,
-0xce,
-0x06,
-0xcc,
-0x26,
-0xcd,
-0x26,
-0xce,
-0x06,
-0xcc,
-0x26,
-0xcd,
-0x26,
-0xce,
-0xa5,
-0xd3,
-0x49,
-0x40,
-0x85,
-0xd3,
-0xa5,
-0xd2,
-0x49,
-0x40,
-0x85,
-0xd2,
-0x98,
-0x05,
-0xd3,
-0x85,
-0xd3,
-0xa5,
-0xd1,
-0x49,
-0x40,
-0x85,
-0xd1,
-0x98,
-0x05,
-0xd2,
-0x85,
-0xd2,
-0xa5,
-0xd0,
-0x49,
-0x40,
-0x85,
-0xd0,
-0x98,
-0x05,
-0xd1,
-0x85,
-0xd1,
-0x60,
-0x20,
-0x9a,
-0x3b,
-0x46,
-0xe5,
-0x66,
-0xe4,
-0x90,
-0x06,
-0xe6,
-0xe4,
-0xd0,
-0x02,
-0xe6,
-0xe5,
-0x38,
-0xa5,
-0xe6,
-0xe5,
-0xe4,
-0xa5,
-0xe7,
-0xe5,
-0xe5,
-0x30,
-0x06,
-0xe6,
-0xe2,
-0xd0,
-0x02,
-0xe6,
-0xe3,
-0x60,
-0x64,
-0x22,
-0x64,
-0xa8,
-0x9c,
-0x39,
-0x6b,
-0xa9,
-0x13,
-0x85,
-0xe2,
-0xa9,
-0x61,
-0x85,
-0xe3,
-0xa2,
-0xc0,
-0xa9,
-0x03,
-0x20,
-0xaf,
-0x3e,
-0xa9,
-0x80,
-0x85,
-0xde,
-0xa9,
-0xb7,
-0x85,
-0xe2,
-0xa9,
-0x6c,
-0x85,
-0xe3,
-0xa2,
-0x94,
-0xa9,
-0x05,
-0x20,
-0xb1,
-0x3e,
-0xa0,
-0x06,
-0x53,
-0xe6,
-0x5c,
-0x15,
-0x6c,
-0xa0,
-0x96,
-0x13,
-0xa8,
-0x00,
-0x21,
-0x6c,
-0xa9,
-0x01,
-0x8d,
-0xb4,
-0x6b,
-0x60,
-0xa0,
-0x02,
-0x53,
-0x2a,
-0xbe,
-0xe8,
-0x00,
-0x88,
-0x98,
-0x0a,
-0xaa,
-0xb9,
-0x3d,
-0x5a,
-0xd0,
-0x14,
-0x9e,
-0x38,
-0x6b,
-0x9e,
-0x39,
-0x6b,
-0x9e,
-0x90,
-0x6b,
-0x9e,
-0x91,
-0x6b,
-0x9e,
-0xa0,
-0x6b,
-0x9e,
-0xa1,
-0x6b,
-0x80,
-0x6d,
-0x5a,
-0xda,
-0xa5,
-0xe9,
-0xa6,
-0xe8,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0xea,
-0x86,
-0xeb,
-0xdc,
-0x20,
-0x7a,
-0x0e,
-0xfa,
-0x9d,
-0x38,
-0x6b,
-0x9d,
-0x39,
-0x6b,
-0x49,
-0x28,
-0x85,
-0xec,
-0x84,
-0xed,
-0x38,
-0xa5,
-0xea,
-0xe5,
-0xec,
-0x85,
-0xec,
-0xa5,
-0xeb,
-0xe5,
-0xed,
-0x05,
-0xec,
-0xf0,
-0x03,
-0xfe,
-0x39,
-0x6b,
-0xbd,
-0x39,
-0x6b,
-0x85,
-0xe4,
-0x64,
-0xe5,
-0xa9,
-0x00,
-0x85,
-0xe2,
-0xa9,
-0x80,
-0x85,
-0xe3,
-0xda,
-0x20,
-0x81,
-0x1a,
-0xfa,
-0xa5,
-0xe3,
-0x9d,
-0x91,
-0x6b,
-0xa5,
-0xe2,
-0x9d,
-0x90,
-0x6b,
-0xbd,
-0x39,
-0x6b,
-0x85,
-0xe4,
-0x64,
-0xe5,
-0xa9,
-0x00,
-0x85,
-0xe2,
-0xa9,
-0x40,
-0x85,
-0xe3,
-0xda,
-0x20,
-0x81,
-0x1a,
-0xfa,
-0xa5,
-0xe3,
-0x9d,
-0xa1,
-0x6b,
-0xa5,
-0xe2,
-0x9d,
-0xa0,
-0x6b,
-0x7a,
-0xc8,
-0xc0,
-0x05,
-0xb0,
-0x03,
-0x4c,
-0xe7,
-0x1a,
-0xad,
-0x3a,
-0x6b,
-0x49,
-0x28,
-0x85,
-0xde,
-0x38,
-0xa5,
-0xe8,
-0xe5,
-0xde,
-0x4a,
-0x85,
-0xde,
-0x64,
-0xdf,
-0xa9,
-0xff,
-0x85,
-0xe8,
-0x85,
-0xe9,
-0xa2,
-0x01,
-0x18,
-0xa5,
-0xe8,
-0x6d,
-0x3a,
-0x6b,
-0x85,
-0xe8,
-0x90,
-0x02,
-0xe6,
-0xe9,
-0x8a,
-0x0a,
-0x45,
-0xde,
-0x20,
-0x74,
-0x0e,
-0xc5,
-0xdf,
-0xf0,
-0x06,
-0xe6,
-0xe8,
-0xd0,
-0x02,
-0xe6,
-0xe9,
-0x85,
-0xdf,
-0xa5,
-0xe8,
-0x9d,
-0x49,
-0x6b,
-0xa5,
-0xe9,
-0x9d,
-0x5d,
-0x6b,
-0xe8,
-0xe0,
-0x15,
-0x90,
-0xd2,
-0xa0,
-0x02,
-0x53,
-0x2c,
-0xbe,
-0xe8,
-0x00,
-0x88,
-0x98,
-0x0a,
-0xaa,
-0xb9,
-0x3d,
-0x5a,
-0xd0,
-0x14,
-0x9e,
-0x40,
-0x6b,
-0x9e,
-0x41,
-0x6b,
-0x9e,
-0x98,
-0x6b,
-0x9e,
-0x99,
-0x6b,
-0x9e,
-0xa8,
-0x6b,
-0x9e,
-0xa9,
-0x6b,
-0x80,
-0x6d,
-0x5a,
-0xda,
-0xa5,
-0xe9,
-0xa6,
-0xe8,
-0x20,
-0xb7,
-0x0d,
-0x85,
-0xea,
-0x86,
-0xeb,
-0xdc,
-0x20,
-0xb2,
-0x0e,
-0xfa,
-0x9d,
-0x40,
-0x6b,
-0x9d,
-0x41,
-0x6b,
-0x49,
-0x20,
-0x85,
-0xec,
-0x84,
-0xed,
-0x38,
-0xa5,
-0xea,
-0xe5,
-0xec,
-0x85,
-0xec,
-0xa5,
-0xeb,
-0xe5,
-0xed,
-0x05,
-0xec,
-0xf0,
-0x03,
-0xfe,
-0x41,
-0x6b,
-0xbd,
-0x41,
-0x6b,
-0x85,
-0xe4,
-0x64,
-0xe5,
-0xa9,
-0x00,
-0x85,
-0xe2,
-0xa9,
-0x80,
-0x85,
-0xe3,
-0xda,
-0x20,
-0x81,
-0x1a,
-0xfa,
-0xa5,
-0xe3,
-0x9d,
-0x99,
-0x6b,
-0xa5,
-0xe2,
-0x9d,
-0x98,
-0x6b,
-0xbd,
-0x41,
-0x6b,
-0x85,
-0xe4,
-0x64,
-0xe5,
-0xa9,
-0x00,
-0x85,
-0xe2,
-0xa9,
-0x40,
-0x85,
-0xe3,
-0xda,
-0x20,
-0x81,
-0x1a,
-0xfa,
-0xa5,
-0xe3,
-0x9d,
-0xa9,
-0x6b,
-0xa5,
-0xe2,
-0x9d,
-0xa8,
-0x6b,
-0x7a,
-0xc8,
-0xc0,
-0x05,
-0xb0,
-0x03,
-0x4c,
-0xc7,
-0x1b,
-0xad,
-0x42,
-0x6b,
-0x49,
-0x20,
-0x85,
-0xde,
-0x38,
-0xa5,
-0xe8,
-0xe5,
-0xde,
-0x4a,
-0x85,
-0xde,
-0x64,
-0xdf,
-0xa9,
-0xff,
-0x85,
-0xe8,
-0x85,
-0xe9,
-0xa2,
-0x01,
-0x18,
-0xa5,
-0xe8,
-0x6d,
-0x42,
-0x6b,
-0x85,
-0xe8,
-0x90,
-0x02,
-0xe6,
-0xe9,
-0x8a,
-0x0a,
-0x45,
-0xde,
-0x20,
-0xac,
-0x0e,
-0xc5,
-0xdf,
-0xf0,
-0x06,
-0xe6,
-0xe8,
-0xd0,
-0x02,
-0xe6,
-0xe9,
-0x85,
-0xdf,
-0xa5,
-0xe8,
-0x9d,
-0x71,
-0x6b,
-0xa5,
-0xe9,
-0x9d,
-0x81,
-0x6b,
-0xe8,
-0xe0,
-0x11,
-0x90,
-0xd2,
-0xa9,
-0x01,
-0x8d,
-0x39,
-0x6b,
-0x60,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xc8,
-0x3e,
-0x48,
-0xad,
-0x34,
-0xc0,
-0xaa,
-0x29,
-0x03,
-0xc9,
-0x02,
-0xd0,
-0x07,
-0xad,
-0x12,
-0x61,
-0xd0,
-0x07,
-0x80,
-0x38,
-0x8a,
-0x29,
-0xf8,
-0xf0,
-0x1b,
-0xac,
-0x12,
-0x61,
-0xf0,
-0x06,
-0x8a,
-0x4a,
-0x4a,
-0x20,
-0x66,
-0x3c,
-0xa5,
-0xba,
-0xf0,
-0x24,
-0x8a,
-0x29,
-0x04,
-0x09,
-0x09,
-0x8d,
-0x38,
-0xc0,
-0xc6,
-0xba,
-0x80,
-0x18,
-0xa5,
-0xab,
-0xf0,
-0x14,
-0x8a,
-0x4a,
-0x4a,
-0x20,
-0xe4,
-0x39,
-0xa0,
-0x01,
-0x8a,
-0x4a,
-0x4a,
-0x29,
-0x01,
-0xf0,
-0x02,
-0xa0,
-0x05,
-0x8c,
-0x38,
-0xc0,
-0x8a,
-0x29,
-0x03,
-0xc9,
-0x02,
-0xd0,
-0x42,
-0xa5,
-0xbe,
-0xf0,
-0x0f,
-0x49,
-0x3c,
-0xaa,
-0xa9,
-0x13,
-0x85,
-0xe2,
-0xa9,
-0x61,
-0x85,
-0xe3,
-0x98,
-0x20,
-0xaf,
-0x3e,
-0x38,
-0xa9,
-0x0f,
-0xe5,
-0xbf,
-0xf0,
-0x1a,
-0x49,
-0x3c,
-0x85,
-0xe4,
-0x84,
-0xe5,
-0x38,
-0xa9,
-0xd3,
-0xe5,
-0xe4,
-0x85,
-0xe2,
-0xa9,
-0x64,
-0xe5,
-0xe5,
-0x85,
-0xe3,
-0xa6,
-0xe4,
-0xa5,
-0xe5,
-0x20,
-0xaf,
-0x3e,
-0xa9,
-0x01,
-0x9c,
-0x24,
-0xd0,
-0x8d,
-0x24,
-0xd0,
-0x9c,
-0x11,
-0x61,
-0x20,
-0x55,
-0x3f,
-0x4c,
-0x2a,
-0x3f,
-0xa6,
-0x67,
-0xbd,
-0x16,
-0x75,
-0xaa,
-0x18,
-0x69,
-0x53,
-0x85,
-0x50,
-0xa9,
-0x7e,
-0x69,
-0x00,
-0x85,
-0x51,
-0x8a,
-0x0a,
-0xaa,
-0x69,
-0x8f,
-0x85,
-0x4a,
-0xa9,
-0x7e,
-0x69,
-0x00,
-0x85,
-0x4b,
-0x8a,
-0x69,
-0x07,
-0x85,
-0x4c,
-0xa9,
-0x7f,
-0x69,
-0x00,
-0x85,
-0x4d,
-0x8a,
-0x69,
-0xdb,
-0x85,
-0x4e,
-0xa9,
-0x7d,
-0x69,
-0x00,
-0x85,
-0x4f,
-0xa6,
-0x67,
-0xbd,
-0x28,
-0x75,
-0x0a,
-0xaa,
-0xbd,
-0xec,
-0x5e,
-0x85,
-0x56,
-0xbd,
-0xed,
-0x5e,
-0x85,
-0x57,
-0xbd,
-0xf2,
-0x5e,
-0x85,
-0x58,
-0xbd,
-0xf3,
-0x5e,
-0x85,
-0x59,
-0xa5,
-0x67,
-0x49,
-0x7e,
-0x18,
-0x69,
-0x39,
-0x85,
-0x52,
-0x98,
-0x69,
-0x75,
-0x85,
-0x53,
-0xa5,
-0x28,
-0x49,
-0x06,
-0x18,
-0x65,
-0x52,
-0x85,
-0x52,
-0x98,
-0x65,
-0x53,
-0x85,
-0x53,
-0xa0,
-0x02,
-0x53,
-0x2a,
-0x00,
-0x3a,
-0x00,
-0xa5,
-0x28,
-0x85,
-0x66,
-0x0a,
-0x85,
-0x31,
-0xa0,
-0x05,
-0xd3,
-0x3a,
-0x3e,
-0x00,
-0x18,
-0xa5,
-0x3f,
-0x65,
-0x42,
-0x6a,
-0x69,
-0x00,
-0xaa,
-0xbd,
-0xec,
-0x5d,
-0x85,
-0x33,
-0xbd,
-0xec,
-0x5c,
-0x85,
-0x32,
-0xa6,
-0x40,
-0x38,
-0xfd,
-0xec,
-0x5c,
-0xa8,
-0xa5,
-0x33,
-0xfd,
-0xec,
-0x5d,
-0xaa,
-0x10,
-0x0c,
-0x29,
-0xf0,
-0xc9,
-0xf0,
-0xf0,
-0x0e,
-0xa0,
-0x00,
-0xa2,
-0xf0,
-0x80,
-0x08,
-0x29,
-0xf0,
-0xf0,
-0x04,
-0xa0,
-0xff,
-0xa2,
-0x0f,
-0x98,
-0xa4,
-0x31,
-0x91,
-0x4a,
-0xc8,
-0x8a,
-0x91,
-0x4a,
-0xa6,
-0x41,
-0x38,
-0xa5,
-0x32,
-0xfd,
-0xec,
-0x5c,
-0xa8,
-0xa5,
-0x33,
-0xfd,
-0xec,
-0x5d,
-0xaa,
-0x10,
-0x0c,
-0x29,
-0xf0,
-0xc9,
-0xf0,
-0xf0,
-0x0e,
-0xa0,
-0x00,
-0xa2,
-0xf0,
-0x80,
-0x08,
-0x29,
-0xf0,
-0xf0,
-0x04,
-0xa0,
-0xff,
-0xa2,
-0x0f,
-0x98,
-0xa4,
-0x31,
-0x91,
-0x4c,
-0xc8,
-0x8a,
-0x91,
-0x4c,
-0xa6,
-0x3f,
-0xbd,
-0xec,
-0x5d,
-0x48,
-0xbd,
-0xec,
-0x5c,
-0xa6,
-0x42,
-0x38,
-0xfd,
-0xec,
-0x5c,
-0xa8,
-0x68,
-0xfd,
-0xec,
-0x5d,
-0xaa,
-0x10,
-0x0c,
-0x29,
-0xf8,
-0xc9,
-0xf8,
-0xf0,
-0x0e,
-0xa0,
-0x00,
-0xa2,
-0xf8,
-0x80,
-0x08,
-0x29,
-0xf8,
-0xf0,
-0x04,
-0xa0,
-0xff,
-0xa2,
-0x07,
-0x98,
-0xa4,
-0x31,
-0x91,
-0x4e,
-0xc8,
-0x8a,
-0x91,
-0x4e,
-0xa2,
-0x01,
-0xa5,
-0x3e,
-0xcd,
-0x2f,
-0xbe,
-0x90,
-0x07,
-0xcd,
-0x30,
-0xbe,
-0x90,
-0x03,
-0xf0,
-0x01,
-0xca,
-0x8a,
-0xa4,
-0x66,
-0x91,
-0x50,
-0x64,
-0x30,
-0xa9,
-0x00,
-0x85,
-0x6d,
-0x49,
-0x03,
-0x85,
-0x38,
-0x64,
-0x34,
-0x64,
-0x35,
-0xa9,
-0x03,
-0x85,
-0x6c,
-0x18,
-0xa5,
-0x38,
-0xa6,
-0x30,
-0x7d,
-0xa3,
-0x7d,
-0x65,
-0x52,
-0x85,
-0x36,
-0xa5,
-0x53,
-0x69,
-0x00,
-0x85,
-0x37,
-0xa2,
-0x00,
-0xb2,
-0x36,
-0xa0,
-0x06,
-0x71,
-0x36,
-0x90,
-0x02,
-0xe8,
-0x18,
-0xa0,
-0x7e,
-0x71,
-0x36,
-0x90,
-0x02,
-0xe8,
-0x18,
-0xa0,
-0x84,
-0x71,
-0x36,
-0x90,
-0x01,
-0xe8,
-0x86,
-0x2e,
-0x46,
-0x2e,
-0x6a,
-0x46,
-0x2e,
-0x6a,
-0x69,
-0x00,
-0x92,
-0x56,
-0xa4,
-0x30,
-0x59,
-0x15,
-0x6c,
-0x18,
-0x65,
-0x34,
-0x85,
-0x34,
-0x98,
-0x65,
-0x35,
-0x85,
-0x35,
-0xe6,
-0x56,
-0xd0,
-0x02,
-0xe6,
-0x57,
-0xe6,
-0x30,
-0xc6,
-0x6c,
-0xd0,
-0xad,
-0xa5,
-0x34,
-0x0a,
-0xaa,
-0xa5,
-0x35,
-0x2a,
-0xe0,
-0x80,
-0x90,
-0x04,
-0x1a,
-0xd0,
-0x01,
-0x3a,
-0x92,
-0x58,
-0xe6,
-0x58,
-0xd0,
-0x02,
-0xe6,
-0x59,
-0xa5,
-0x6d,
-0x1a,
-0xc9,
-0x02,
-0xd0,
-0x80,
-0xa5,
-0x52,
-0x18,
-0x69,
-0x06,
-0x85,
-0x52,
-0x90,
-0x02,
-0xe6,
-0x53,
-0xa6,
-0x66,
-0xe4,
-0x29,
-0xf0,
-0x0f,
-0xa5,
-0x3a,
-0x69,
-0x05,
-0x85,
-0x3a,
-0x90,
-0x02,
-0xe6,
-0x3b,
-0x8a,
-0x1a,
-0x4c,
-0xb5,
-0x1d,
-0xa5,
-0x2a,
-0xa6,
-0x23,
-0xf0,
-0x0b,
-0x38,
-0xe9,
-0x64,
-0x85,
-0x2a,
-0xb0,
-0x0d,
-0xc6,
-0x2b,
-0x80,
-0x09,
-0x18,
-0x69,
-0x64,
-0x85,
-0x2a,
-0x90,
-0x02,
-0xe6,
-0x2b,
-0x60,
-0xa4,
-0x28,
-0x84,
-0x61,
-0x84,
-0x62,
-0xc4,
-0x29,
-0xf0,
-0x02,
-0xe6,
-0x62,
-0xb1,
-0x5a,
-0xf0,
-0x20,
-0x31,
-0x5c,
-0x31,
-0x5e,
-0xfc,
-0xa4,
-0x61,
-0x31,
-0x5c,
-0x31,
-0x5a,
-0x31,
-0x5e,
-0xa4,
-0x62,
-0x31,
-0x5c,
-0x31,
-0x5a,
-0x31,
-0x5e,
-0xdc,
-0x29,
-0x01,
-0xd0,
-0x04,
-0xb1,
-0x5a,
-0x80,
-0x02,
-0x09,
-0x02,
-0x91,
-0x5a,
-0x84,
-0x61,
-0xc8,
-0xc4,
-0x29,
-0x90,
-0xd1,
-0xf0,
-0xd1,
-0x60,
-0xa2,
-0x01,
-0xa5,
-0x67,
-0xc5,
-0x26,
-0xf0,
-0x06,
-0xc5,
-0x27,
-0xf0,
-0x02,
-0xa2,
-0x00,
-0x86,
-0x88,
-0x85,
-0x64,
-0x1a,
-0x85,
-0x63,
-0x1a,
-0x85,
-0x65,
-0x18,
-0xa6,
-0x67,
-0xa9,
-0x53,
-0xa8,
-0x7d,
-0x15,
-0x75,
-0x85,
-0x5c,
-0xa9,
-0x7e,
-0x69,
-0x00,
-0x85,
-0x5d,
-0x98,
-0x7d,
-0x16,
-0x75,
-0x85,
-0x5a,
-0xa9,
-0x7e,
-0x69,
-0x00,
-0x85,
-0x5b,
-0x98,
-0x7d,
-0x17,
-0x75,
-0x85,
-0x5e,
-0xa9,
-0x7e,
-0x69,
-0x00,
-0x85,
-0x5f,
-0x20,
-0x36,
-0x1f,
-0xa6,
-0x63,
-0xbd,
-0x27,
-0x75,
-0x0a,
-0xaa,
-0xbd,
-0xec,
-0x5e,
-0x85,
-0x4a,
-0xbd,
-0xed,
-0x5e,
-0x85,
-0x4b,
-0xbd,
-0xf2,
-0x5e,
-0x85,
-0x52,
-0xbd,
-0xf3,
-0x5e,
-0x85,
-0x53,
-0xa5,
-0x28,
-0xc5,
-0x29,
-0xf0,
-0x1b,
-0x18,
-0xa5,
-0x4a,
-0x69,
-0x06,
-0x85,
-0x4c,
-0xa5,
-0x4b,
-0x69,
-0x00,
-0x85,
-0x4d,
-0xa5,
-0x52,
-0x69,
-0x02,
-0x85,
-0x54,
-0xa5,
-0x53,
-0x69,
-0x00,
-0x85,
-0x55,
-0x80,
-0x0c,
-0xa0,
-0x02,
-0x53,
-0x4a,
-0x00,
-0x4c,
-0x00,
-0x53,
-0x52,
-0x00,
-0x54,
-0x00,
-0xa6,
-0x64,
-0xbd,
-0x27,
-0x75,
-0x0a,
-0xaa,
-0xbd,
-0xec,
-0x5e,
-0x85,
-0x4e,
-0xbd,
-0xed,
-0x5e,
-0x85,
-0x4f,
-0xbd,
-0xf2,
-0x5e,
-0x85,
-0x56,
-0xbd,
-0xf3,
-0x5e,
-0x85,
-0x57,
-0xa6,
-0x65,
-0xbd,
-0x27,
-0x75,
-0x0a,
-0xaa,
-0xbd,
-0xec,
-0x5e,
-0x85,
-0x50,
-0xbd,
-0xed,
-0x5e,
-0x85,
-0x51,
-0xbd,
-0xf2,
-0x5e,
-0x85,
-0x58,
-0xbd,
-0xf3,
-0x5e,
-0x85,
-0x59,
-0xa0,
-0x02,
-0x53,
-0x5a,
-0x00,
-0x3c,
-0x00,
-0x18,
-0xa6,
-0x67,
-0xbd,
-0x15,
-0x75,
-0x0a,
-0x69,
-0xdb,
-0x85,
-0x5c,
-0xa9,
-0x7d,
-0xa8,
-0x69,
-0x00,
-0x85,
-0x5d,
-0xbd,
-0x16,
-0x75,
-0x0a,
-0x69,
-0xdb,
-0x85,
-0x5a,
-0x98,
-0x69,
-0x00,
-0x85,
-0x5b,
-0xbd,
-0x17,
-0x75,
-0x0a,
-0x69,
-0xdb,
-0x85,
-0x5e,
-0x98,
-0x69,
-0x00,
-0x85,
-0x5f,
-0xa5,
-0x28,
-0xaa,
-0x85,
-0x66,
-0x0a,
-0x85,
-0x61,
-0x8a,
-0xa0,
-0x01,
-0x64,
-0x89,
-0xc5,
-0x29,
-0xf0,
-0x01,
-0x1a,
-0x0a,
-0x85,
-0x62,
-0x84,
-0x87,
-0xa4,
-0x66,
-0xb1,
-0x3c,
-0x29,
-0x02,
-0xf0,
-0x0b,
-0x20,
-0x38,
-0x21,
-0x20,
-0x2c,
-0x22,
-0x20,
-0xb7,
-0x24,
-0x80,
-0x0e,
-0x64,
-0x93,
-0x64,
-0x94,
-0x64,
-0x95,
-0x64,
-0x96,
-0x20,
-0x2c,
-0x22,
-0x20,
-0xb7,
-0x24,
-0xa6,
-0x89,
-0xbd,
-0xb7,
-0x7d,
-0xe8,
-0x29,
-0x80,
-0xd0,
-0xf8,
-0x86,
-0x89,
-0x18,
-0xa5,
-0x4e,
-0x69,
-0x06,
-0x85,
-0x4e,
-0x90,
-0x03,
-0xe6,
-0x4f,
-0x18,
-0xa5,
-0x50,
-0x69,
-0x06,
-0x85,
-0x50,
-0x90,
-0x03,
-0xe6,
-0x51,
-0x18,
-0xa5,
-0x56,
-0x69,
-0x02,
-0x85,
-0x56,
-0x90,
-0x03,
-0xe6,
-0x57,
-0x18,
-0xa5,
-0x58,
-0x69,
-0x02,
-0x85,
-0x58,
-0x90,
-0x02,
-0xe6,
-0x59,
-0xa5,
-0x66,
-0xaa,
-0x0a,
-0x85,
-0x61,
-0xe4,
-0x28,
-0xf0,
-0x16,
-0x18,
-0xa5,
-0x4a,
-0x69,
-0x06,
-0x85,
-0x4a,
-0x90,
-0x03,
-0xe6,
-0x4b,
-0x18,
-0xa5,
-0x52,
-0x69,
-0x02,
-0x85,
-0x52,
-0x90,
-0x02,
-0xe6,
-0x53,
-0xa0,
-0x00,
-0xe8,
-0x86,
-0x66,
-0xe4,
-0x29,
-0xf0,
-0x16,
-0x18,
-0xa5,
-0x4c,
-0x69,
-0x06,
-0x85,
-0x4c,
-0x90,
-0x03,
-0xe6,
-0x4d,
-0x18,
-0xa5,
-0x54,
-0x69,
-0x02,
-0x85,
-0x54,
-0x90,
-0x02,
-0xe6,
-0x55,
-0x8a,
-0xe4,
-0x29,
-0xb0,
-0x03,
-0x4c,
-0x78,
-0x20,
-0xd0,
-0x04,
-0xc8,
-0x4c,
-0x7c,
-0x20,
-0xa6,
-0x8a,
-0xbd,
-0xcb,
-0x7d,
-0xa4,
-0x23,
-0xf0,
-0x03,
-0xca,
-0x80,
-0x01,
-0xe8,
-0x29,
-0x80,
-0xd0,
-0xf1,
-0x86,
-0x8a,
-0x60,
-0xa4,
-0x62,
-0xb1,
-0x5a,
-0xc8,
-0x0a,
-0xaa,
-0xb1,
-0x5a,
-0x88,
-0x2a,
-0x48,
-0x18,
-0x8a,
-0x71,
-0x5c,
-0xc8,
-0xaa,
-0x68,
-0x71,
-0x5c,
-0x88,
-0x48,
-0x18,
-0x8a,
-0x71,
-0x5e,
-0xc8,
-0xaa,
-0x68,
-0x71,
-0x5e,
-0x48,
-0xda,
-0xa4,
-0x61,
-0xb1,
-0x5a,
-0xc8,
-0x0a,
-0xaa,
-0xb1,
-0x5a,
-0x88,
-0x2a,
-0x48,
-0x18,
-0x8a,
-0x71,
-0x5c,
-0xc8,
-0xaa,
-0x68,
-0x71,
-0x5c,
-0x88,
-0x48,
-0x18,
-0x8a,
-0x71,
-0x5e,
-0x85,
-0x93,
-0xc8,
-0x68,
-0x71,
-0x5e,
-0x85,
-0x94,
-0x38,
-0x68,
-0xe5,
-0x93,
-0x85,
-0x93,
-0x68,
-0xe5,
-0x94,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x93,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x93,
-0xa6,
-0x87,
-0xd0,
-0x05,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x93,
-0x90,
-0x05,
-0xe6,
-0x93,
-0xd0,
-0x01,
-0x1a,
-0x85,
-0x94,
-0xa5,
-0x66,
-0x0a,
-0xa8,
-0x38,
-0xb1,
-0x5e,
-0xf1,
-0x5c,
-0xaa,
-0xc8,
-0xb1,
-0x5e,
-0xf1,
-0x5c,
-0x85,
-0x96,
-0x8a,
-0x0a,
-0x85,
-0x95,
-0x26,
-0x96,
-0xa4,
-0x61,
-0x38,
-0xb1,
-0x5e,
-0xf1,
-0x5c,
-0xaa,
-0xc8,
-0xb1,
-0x5e,
-0xf1,
-0x5c,
-0xa8,
-0x8a,
-0x18,
-0x65,
-0x95,
-0x85,
-0x95,
-0x98,
-0x65,
-0x96,
-0x85,
-0x96,
-0xa4,
-0x62,
-0x38,
-0xb1,
-0x5e,
-0xf1,
-0x5c,
-0xaa,
-0xc8,
-0xb1,
-0x5e,
-0xf1,
-0x5c,
-0xa8,
-0x8a,
-0x18,
-0x65,
-0x95,
-0x85,
-0x95,
-0x98,
-0x65,
-0x96,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x95,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x95,
-0xa6,
-0x88,
-0xd0,
-0x05,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x95,
-0x90,
-0x05,
-0xe6,
-0x95,
-0xd0,
-0x01,
-0x1a,
-0x85,
-0x96,
-0xa5,
-0x66,
-0x0a,
-0xa8,
-0xb1,
-0x5a,
-0x65,
-0x6e,
-0x85,
-0x6e,
-0xc8,
-0xa2,
-0xff,
-0xb1,
-0x5a,
-0x30,
-0x01,
-0xe8,
-0x65,
-0x6f,
-0x85,
-0x6f,
-0x8a,
-0x65,
-0x70,
-0x85,
-0x70,
-0x8a,
-0x65,
-0x71,
-0x85,
-0x71,
-0xe6,
-0x72,
-0xd0,
-0x02,
-0xe6,
-0x73,
-0x60,
-0xa5,
-0x66,
-0x0a,
-0x85,
-0x2e,
-0x64,
-0x2f,
-0x64,
-0x38,
-0x64,
-0x39,
-0x64,
-0x6d,
-0xa9,
-0x8f,
-0xa2,
-0x7e,
-0x80,
-0x04,
-0xa9,
-0x07,
-0xa2,
-0x7f,
-0x85,
-0x32,
-0x86,
-0x33,
-0xa4,
-0x67,
-0xb9,
-0x16,
-0x75,
-0x0a,
-0x65,
-0x32,
-0x85,
-0x34,
-0xa5,
-0x33,
-0x69,
-0x00,
-0x85,
-0x35,
-0xa4,
-0x62,
-0xb1,
-0x34,
-0xa4,
-0x61,
-0x38,
-0xf1,
-0x34,
-0xaa,
-0xa4,
-0x62,
-0xc8,
-0xb1,
-0x34,
-0xa4,
-0x61,
-0xc8,
-0xf1,
-0x34,
-0xa4,
-0x87,
-0xd0,
-0x11,
-0xc9,
-0x80,
-0x6a,
-0x85,
-0x69,
-0x8a,
-0x6a,
-0x69,
-0x00,
-0x85,
-0x68,
-0x90,
-0x1f,
-0xaa,
-0xa5,
-0x69,
-0x1a,
-0xa8,
-0x10,
-0x0c,
-0x29,
-0xf0,
-0xc9,
-0xf0,
-0xf0,
-0x0e,
-0xa2,
-0x00,
-0xa0,
-0xf0,
-0x80,
-0x08,
-0x29,
-0xf0,
-0xf0,
-0x04,
-0xa2,
-0xff,
-0xa0,
-0x0f,
-0x86,
-0x68,
-0x84,
-0x69,
-0xa4,
-0x65,
-0xb9,
-0x15,
-0x75,
-0x0a,
-0x65,
-0x32,
-0x85,
-0x34,
-0xa5,
-0x33,
-0xaa,
-0x69,
-0x00,
-0x85,
-0x35,
-0xa4,
-0x64,
-0xb9,
-0x15,
-0x75,
-0x0a,
-0x65,
-0x32,
-0x85,
-0x36,
-0x8a,
-0x69,
-0x00,
-0x85,
-0x37,
-0xa4,
-0x2e,
-0xb1,
-0x34,
-0x38,
-0xf1,
-0x36,
-0xaa,
-0xc8,
-0xb1,
-0x34,
-0xf1,
-0x36,
-0xa4,
-0x88,
-0xd0,
-0x11,
-0xc9,
-0x80,
-0x6a,
-0x85,
-0x6b,
-0x8a,
-0x6a,
-0x69,
-0x00,
-0x85,
-0x6a,
-0x90,
-0x1f,
-0xaa,
-0xa5,
-0x6b,
-0x1a,
-0xa8,
-0x10,
-0x0c,
-0x29,
-0xf0,
-0xc9,
-0xf0,
-0xf0,
-0x0e,
-0xa2,
-0x00,
-0xa0,
-0xf0,
-0x80,
-0x08,
-0x29,
-0xf0,
-0xf0,
-0x04,
-0xa2,
-0xff,
-0xa0,
-0x0f,
-0x86,
-0x6a,
-0x84,
-0x6b,
-0xa9,
-0x03,
-0x85,
-0x6c,
-0xa4,
-0x2f,
-0xb1,
-0x4a,
-0xaa,
-0xb1,
-0x4c,
-0xa8,
-0xbd,
-0xec,
-0x5c,
-0x38,
-0xf9,
-0xec,
-0x5c,
-0x85,
-0x32,
-0xbd,
-0xec,
-0x5d,
-0xf9,
-0xec,
-0x5d,
-0xa4,
-0x87,
-0xd0,
-0x0c,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x32,
-0x90,
-0x05,
-0xe6,
-0x32,
-0xd0,
-0x01,
-0x1a,
-0x85,
-0x33,
-0xaa,
-0x18,
-0xa5,
-0x32,
-0x65,
-0x68,
-0x85,
-0x32,
-0x8a,
-0x65,
-0x69,
-0x85,
-0x33,
-0x10,
-0x0d,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x32,
-0x85,
-0x32,
-0xa9,
-0x00,
-0xe5,
-0x33,
-0x85,
-0x33,
-0xa4,
-0x2f,
-0xb1,
-0x4e,
-0xaa,
-0xb1,
-0x50,
-0xa8,
-0xbd,
-0xec,
-0x5c,
-0x38,
-0xf9,
-0xec,
-0x5c,
-0x85,
-0x34,
-0xbd,
-0xec,
-0x5d,
-0xf9,
-0xec,
-0x5d,
-0xa4,
-0x88,
-0xd0,
-0x0c,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x34,
-0x90,
-0x05,
-0xe6,
-0x34,
-0xd0,
-0x01,
-0x1a,
-0x85,
-0x35,
-0xaa,
-0x18,
-0xa5,
-0x34,
-0x65,
-0x6a,
-0x85,
-0x34,
-0x8a,
-0x65,
-0x6b,
-0x85,
-0x35,
-0x10,
-0x0d,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x34,
-0x85,
-0x34,
-0xa9,
-0x00,
-0xe5,
-0x35,
-0x85,
-0x35,
-0xc5,
-0x33,
-0x90,
-0x11,
-0xf0,
-0x09,
-0xa0,
-0x02,
-0x53,
-0x34,
-0x00,
-0x32,
-0x00,
-0x80,
-0x06,
-0xa5,
-0x34,
-0xc5,
-0x32,
-0xb0,
-0xf1,
-0xa5,
-0x2f,
-0x49,
-0x03,
-0xaa,
-0x18,
-0xa5,
-0x32,
-0x7d,
-0x5f,
-0x81,
-0x9d,
-0x5f,
-0x81,
-0xa5,
-0x33,
-0x7d,
-0x60,
-0x81,
-0x9d,
-0x60,
-0x81,
-0x90,
-0x03,
-0xfe,
-0x61,
-0x81,
-0xe6,
-0x2f,
-0xc6,
-0x6c,
-0xf0,
-0x03,
-0x4c,
-0xfc,
-0x22,
-0xa4,
-0x6d,
-0xb1,
-0x52,
-0xaa,
-0xb1,
-0x54,
-0xa8,
-0xbd,
-0xec,
-0x5c,
-0x38,
-0xf9,
-0xec,
-0x5c,
-0x85,
-0x32,
-0xbd,
-0xec,
-0x5d,
-0xf9,
-0xec,
-0x5d,
-0xa4,
-0x87,
-0xd0,
-0x0c,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x32,
-0x90,
-0x05,
-0xe6,
-0x32,
-0xd0,
-0x01,
-0x1a,
-0x85,
-0x33,
-0xaa,
-0x18,
-0xa5,
-0x32,
-0x65,
-0x68,
-0x85,
-0x32,
-0x8a,
-0x65,
-0x69,
-0x85,
-0x33,
-0x10,
-0x1a,
-0x18,
-0xa5,
-0x38,
-0x65,
-0x32,
-0xa5,
-0x39,
-0x65,
-0x33,
-0xb0,
-0x21,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x32,
-0x85,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x33,
-0x85,
-0x39,
-0x80,
-0x12,
-0x38,
-0xa5,
-0x38,
-0xe5,
-0x32,
-0xa5,
-0x39,
-0xe5,
-0x33,
-0xb0,
-0x07,
-0xa0,
-0x02,
-0x53,
-0x32,
-0x00,
-0x38,
-0x00,
-0xa4,
-0x6d,
-0xb1,
-0x56,
-0xaa,
-0xb1,
-0x58,
-0xa8,
-0xbd,
-0xec,
-0x5c,
-0x38,
-0xf9,
-0xec,
-0x5c,
-0x85,
-0x34,
-0xbd,
-0xec,
-0x5d,
-0xf9,
-0xec,
-0x5d,
-0xa4,
-0x88,
-0xd0,
-0x0c,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x34,
-0x90,
-0x05,
-0xe6,
-0x34,
-0xd0,
-0x01,
-0x1a,
-0x85,
-0x35,
-0xaa,
-0x18,
-0xa5,
-0x34,
-0x65,
-0x6a,
-0x85,
-0x34,
-0x8a,
-0x65,
-0x6b,
-0x85,
-0x35,
-0x10,
-0x1a,
-0x18,
-0xa5,
-0x38,
-0x65,
-0x34,
-0xa5,
-0x39,
-0x65,
-0x35,
-0xb0,
-0x21,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x34,
-0x85,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x35,
-0x85,
-0x39,
-0x80,
-0x12,
-0x38,
-0xa5,
-0x38,
-0xe5,
-0x34,
-0xa5,
-0x39,
-0xe5,
-0x35,
-0xb0,
-0x07,
-0xa0,
-0x02,
-0x53,
-0x34,
-0x00,
-0x38,
-0x00,
-0xa0,
-0x04,
-0xa5,
-0x6d,
-0xd0,
-0x07,
-0x53,
-0x32,
-0x00,
-0x8b,
-0x00,
-0x80,
-0x05,
-0x53,
-0x32,
-0x00,
-0x8f,
-0x00,
-0xd0,
-0x05,
-0xe6,
-0x6d,
-0x4c,
-0x3f,
-0x22,
-0x38,
-0xa5,
-0x38,
-0xed,
-0x31,
-0xbe,
-0xa5,
-0x39,
-0xed,
-0x32,
-0xbe,
-0x90,
-0x09,
-0x64,
-0x8b,
-0xa0,
-0x07,
-0x13,
-0x8b,
-0x00,
-0x8c,
-0x00,
-0x60,
-0xa2,
-0x00,
-0xa5,
-0x94,
-0x10,
-0x0f,
-0x85,
-0x42,
-0x38,
-0x8a,
-0xe5,
-0x93,
-0x85,
-0x93,
-0x8a,
-0xe5,
-0x94,
-0x85,
-0x94,
-0x80,
-0x08,
-0x05,
-0x93,
-0xf0,
-0x02,
-0xa9,
-0x01,
-0x85,
-0x42,
-0xa5,
-0x2c,
-0xf0,
-0x14,
-0x45,
-0x93,
-0x84,
-0x93,
-0xa5,
-0x94,
-0xf0,
-0x0c,
-0x45,
-0x2c,
-0x18,
-0x65,
-0x93,
-0x85,
-0x93,
-0x98,
-0x69,
-0x00,
-0x85,
-0x94,
-0xa5,
-0x96,
-0x10,
-0x0f,
-0x85,
-0x43,
-0x38,
-0x8a,
-0xe5,
-0x95,
-0x85,
-0x95,
-0x8a,
-0xe5,
-0x96,
-0x85,
-0x96,
-0x80,
-0x08,
-0x05,
-0x95,
-0xf0,
-0x02,
-0xa9,
-0x01,
-0x85,
-0x43,
-0xa5,
-0x2d,
-0xf0,
-0x14,
-0x45,
-0x95,
-0x84,
-0x95,
-0xa5,
-0x96,
-0xf0,
-0x0c,
-0x45,
-0x2d,
-0x18,
-0x65,
-0x95,
-0x85,
-0x95,
-0x98,
-0x69,
-0x00,
-0x85,
-0x96,
-0xa5,
-0x8c,
-0x10,
-0x0f,
-0x85,
-0x46,
-0x38,
-0x8a,
-0xe5,
-0x8b,
-0x85,
-0x8b,
-0x8a,
-0xe5,
-0x8c,
-0x85,
-0x8c,
-0x80,
-0x08,
-0x05,
-0x8b,
-0xf0,
-0x02,
-0xa9,
-0x01,
-0x85,
-0x46,
-0xa5,
-0x2c,
-0xf0,
-0x14,
-0x45,
-0x8b,
-0x84,
-0x8b,
-0xa5,
-0x8c,
-0xf0,
-0x0c,
-0x45,
-0x2c,
-0x18,
-0x65,
-0x8b,
-0x85,
-0x8b,
-0x98,
-0x69,
-0x00,
-0x85,
-0x8c,
-0xa5,
-0x90,
-0x10,
-0x0f,
-0x85,
-0x47,
-0x38,
-0x8a,
-0xe5,
-0x8f,
-0x85,
-0x8f,
-0x8a,
-0xe5,
-0x90,
-0x85,
-0x90,
-0x80,
-0x08,
-0x05,
-0x8f,
-0xf0,
-0x02,
-0xa9,
-0x01,
-0x85,
-0x47,
-0xa5,
-0x2c,
-0xf0,
-0x14,
-0x45,
-0x8f,
-0x84,
-0x8f,
-0xa5,
-0x90,
-0xf0,
-0x0c,
-0x45,
-0x2c,
-0x18,
-0x65,
-0x8f,
-0x85,
-0x8f,
-0x98,
-0x69,
-0x00,
-0x85,
-0x90,
-0xa5,
-0x8e,
-0x10,
-0x0f,
-0x85,
-0x48,
-0x38,
-0x8a,
-0xe5,
-0x8d,
-0x85,
-0x8d,
-0x8a,
-0xe5,
-0x8e,
-0x85,
-0x8e,
-0x80,
-0x08,
-0x05,
-0x8d,
-0xf0,
-0x02,
-0xa9,
-0x01,
-0x85,
-0x48,
-0xa5,
-0x2d,
-0xf0,
-0x14,
-0x45,
-0x8d,
-0x84,
-0x8d,
-0xa5,
-0x8e,
-0xf0,
-0x0c,
-0x45,
-0x2d,
-0x18,
-0x65,
-0x8d,
-0x85,
-0x8d,
-0x98,
-0x69,
-0x00,
-0x85,
-0x8e,
-0xa5,
-0x92,
-0x10,
-0x0f,
-0x85,
-0x49,
-0x38,
-0x8a,
-0xe5,
-0x91,
-0x85,
-0x91,
-0x8a,
-0xe5,
-0x92,
-0x85,
-0x92,
-0x80,
-0x08,
-0x05,
-0x91,
-0xf0,
-0x02,
-0xa9,
-0x01,
-0x85,
-0x49,
-0xa5,
-0x2d,
-0xf0,
-0x14,
-0x45,
-0x91,
-0x84,
-0x91,
-0xa5,
-0x92,
-0xf0,
-0x0c,
-0x45,
-0x2d,
-0x18,
-0x65,
-0x91,
-0x85,
-0x91,
-0x98,
-0x69,
-0x00,
-0x85,
-0x92,
-0xa4,
-0x8a,
-0x5a,
-0x84,
-0x45,
-0xa4,
-0x89,
-0x5a,
-0x84,
-0x44,
-0xa2,
-0x00,
-0x64,
-0x30,
-0x18,
-0xa5,
-0x45,
-0x69,
-0x04,
-0x85,
-0x33,
-0x64,
-0x31,
-0x18,
-0xa5,
-0x44,
-0x69,
-0x06,
-0x85,
-0x34,
-0x20,
-0xcc,
-0x26,
-0xe6,
-0x31,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0xa9,
-0xff,
-0x85,
-0x31,
-0x20,
-0xc7,
-0x26,
-0xe6,
-0x30,
-0x38,
-0xa5,
-0x33,
-0xe9,
-0x04,
-0x85,
-0x33,
-0x64,
-0x31,
-0xa5,
-0x34,
-0x20,
-0xcc,
-0x26,
-0xe6,
-0x31,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0xa9,
-0xff,
-0x85,
-0x31,
-0x20,
-0xc7,
-0x26,
-0x38,
-0xa5,
-0x33,
-0xe9,
-0x04,
-0x85,
-0x33,
-0x64,
-0x31,
-0xa5,
-0x34,
-0x20,
-0xcc,
-0x26,
-0xe6,
-0x31,
-0x20,
-0xc7,
-0x26,
-0x38,
-0xa5,
-0x32,
-0xe9,
-0x0a,
-0x20,
-0xcc,
-0x26,
-0xa9,
-0xff,
-0x85,
-0x31,
-0x20,
-0xc7,
-0x26,
-0xa9,
-0xff,
-0x85,
-0x30,
-0x38,
-0xa5,
-0x33,
-0xe9,
-0x04,
-0x85,
-0x33,
-0x64,
-0x31,
-0xa5,
-0x34,
-0x20,
-0xcc,
-0x26,
-0xe6,
-0x31,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0xa9,
-0xff,
-0x85,
-0x31,
-0x20,
-0xc7,
-0x26,
-0xa9,
-0x01,
-0x85,
-0x30,
-0x38,
-0xa5,
-0x33,
-0xe9,
-0x04,
-0x85,
-0x33,
-0x64,
-0x31,
-0xa5,
-0x34,
-0x20,
-0xcc,
-0x26,
-0xe6,
-0x31,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0x20,
-0xc7,
-0x26,
-0xa9,
-0xff,
-0x85,
-0x31,
-0x20,
-0xc7,
-0x26,
-0x7a,
-0xb9,
-0xb7,
-0x7d,
-0x10,
-0x04,
-0xc8,
-0x4c,
-0xf2,
-0x25,
-0x7a,
-0xb9,
-0xcb,
-0x7d,
-0x10,
-0x0c,
-0xa6,
-0x23,
-0xf0,
-0x04,
-0x88,
-0x4c,
-0xed,
-0x25,
-0xc8,
-0x4c,
-0xed,
-0x25,
-0x60,
-0x38,
-0xa5,
-0x32,
-0xe9,
-0x05,
-0x85,
-0x32,
-0xda,
-0x64,
-0x2e,
-0x64,
-0x2f,
-0xa6,
-0x33,
-0xa8,
-0x30,
-0x31,
-0xc9,
-0x0c,
-0xb0,
-0x2d,
-0x8a,
-0x30,
-0x2a,
-0xc9,
-0x08,
-0xb0,
-0x26,
-0xa5,
-0x44,
-0xd0,
-0x09,
-0xa5,
-0x31,
-0xd0,
-0x0d,
-0xbd,
-0x44,
-0x56,
-0x80,
-0x17,
-0xc9,
-0x13,
-0xd0,
-0x09,
-0xa5,
-0x31,
-0x10,
-0xf3,
-0xbd,
-0x3c,
-0x56,
-0x80,
-0x0a,
-0x8a,
-0x49,
-0x0c,
-0x18,
-0x65,
-0x32,
-0xa8,
-0xb9,
-0x4c,
-0x56,
-0x85,
-0x2e,
-0xe8,
-0x30,
-0x35,
-0xe0,
-0x0a,
-0xb0,
-0x31,
-0xa5,
-0x32,
-0x3a,
-0x30,
-0x2c,
-0xc9,
-0x0a,
-0xb0,
-0x28,
-0xa4,
-0x45,
-0xd0,
-0x0a,
-0xaa,
-0xa5,
-0x30,
-0xd0,
-0x0e,
-0xbd,
-0xb6,
-0x56,
-0x80,
-0x18,
-0xc0,
-0x0f,
-0xd0,
-0x0a,
-0xaa,
-0xa5,
-0x30,
-0x30,
-0xf2,
-0xbd,
-0xac,
-0x56,
-0x80,
-0x0a,
-0x8a,
-0x49,
-0x0a,
-0x18,
-0x65,
-0x32,
-0xaa,
-0xbd,
-0xbf,
-0x56,
-0x85,
-0x2f,
-0xfa,
-0xa5,
-0x2e,
-0xd0,
-0x03,
-0x4c,
-0x98,
-0x28,
-0xa8,
-0x10,
-0x05,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0x2e,
-0x85,
-0x36,
-0x98,
-0x3c,
-0x45,
-0x42,
-0xc0,
-0x80,
-0xa5,
-0x36,
-0x90,
-0x38,
-0x45,
-0x93,
-0x85,
-0x37,
-0xbd,
-0x71,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x71,
-0x81,
-0x84,
-0x37,
-0xbd,
-0x72,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x72,
-0x81,
-0xb0,
-0x04,
-0xde,
-0x73,
-0x81,
-0x38,
-0xa5,
-0x94,
-0xf0,
-0x40,
-0x45,
-0x36,
-0x85,
-0x37,
-0xbd,
-0x72,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x72,
-0x81,
-0x84,
-0x37,
-0xbd,
-0x73,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x73,
-0x81,
-0x80,
-0x28,
-0x45,
-0x93,
-0x7d,
-0x71,
-0x81,
-0x9d,
-0x71,
-0x81,
-0x98,
-0x7d,
-0x72,
-0x81,
-0x9d,
-0x72,
-0x81,
-0x90,
-0x04,
-0xfe,
-0x73,
-0x81,
-0x18,
-0xa5,
-0x94,
-0xf0,
-0x0f,
-0x45,
-0x36,
-0x7d,
-0x72,
-0x81,
-0x9d,
-0x72,
-0x81,
-0x98,
-0x7d,
-0x73,
-0x81,
-0x9d,
-0x73,
-0x81,
-0xa5,
-0x46,
-0xf0,
-0x69,
-0x3c,
-0x45,
-0x2e,
-0xc0,
-0x80,
-0xa5,
-0x36,
-0x90,
-0x38,
-0x45,
-0x8b,
-0x85,
-0x37,
-0xbd,
-0xb9,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xb9,
-0x81,
-0x84,
-0x37,
-0xbd,
-0xba,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xba,
-0x81,
-0xb0,
-0x04,
-0xde,
-0xbb,
-0x81,
-0x38,
-0xa5,
-0x8c,
-0xf0,
-0x40,
-0x45,
-0x36,
-0x85,
-0x37,
-0xbd,
-0xba,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xba,
-0x81,
-0x84,
-0x37,
-0xbd,
-0xbb,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xbb,
-0x81,
-0x80,
-0x28,
-0x45,
-0x8b,
-0x7d,
-0xb9,
-0x81,
-0x9d,
-0xb9,
-0x81,
-0x98,
-0x7d,
-0xba,
-0x81,
-0x9d,
-0xba,
-0x81,
-0x90,
-0x04,
-0xfe,
-0xbb,
-0x81,
-0x18,
-0xa5,
-0x8c,
-0xf0,
-0x0f,
-0x45,
-0x36,
-0x7d,
-0xba,
-0x81,
-0x9d,
-0xba,
-0x81,
-0x98,
-0x7d,
-0xbb,
-0x81,
-0x9d,
-0xbb,
-0x81,
-0xa5,
-0x47,
-0xf0,
-0x6a,
-0x3c,
-0x45,
-0x2e,
-0xc0,
-0x80,
-0xa5,
-0x36,
-0x90,
-0x38,
-0x45,
-0x8f,
-0x85,
-0x37,
-0xbd,
-0x01,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x01,
-0x82,
-0x84,
-0x37,
-0xbd,
-0x02,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x02,
-0x82,
-0xb0,
-0x04,
-0xde,
-0x03,
-0x82,
-0x38,
-0xa5,
-0x90,
-0xf0,
-0x41,
-0x45,
-0x36,
-0x85,
-0x37,
-0xbd,
-0x02,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x02,
-0x82,
-0x84,
-0x37,
-0xbd,
-0x03,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x03,
-0x82,
-0x80,
-0x29,
-0x45,
-0x8f,
-0x18,
-0x7d,
-0x01,
-0x82,
-0x9d,
-0x01,
-0x82,
-0x98,
-0x7d,
-0x02,
-0x82,
-0x9d,
-0x02,
-0x82,
-0x90,
-0x04,
-0xfe,
-0x03,
-0x82,
-0x18,
-0xa5,
-0x90,
-0xf0,
-0x0f,
-0x45,
-0x36,
-0x7d,
-0x02,
-0x82,
-0x9d,
-0x02,
-0x82,
-0x98,
-0x7d,
-0x03,
-0x82,
-0x9d,
-0x03,
-0x82,
-0xa5,
-0x2f,
-0xd0,
-0x03,
-0x4c,
-0xee,
-0x29,
-0xa8,
-0x10,
-0x05,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0x2f,
-0x85,
-0x36,
-0x98,
-0x3c,
-0x45,
-0x43,
-0xc0,
-0x80,
-0xa5,
-0x36,
-0x90,
-0x39,
-0x45,
-0x95,
-0x85,
-0x37,
-0xbd,
-0x71,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x71,
-0x81,
-0x84,
-0x37,
-0xbd,
-0x72,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x72,
-0x81,
-0xb0,
-0x04,
-0xde,
-0x73,
-0x81,
-0x38,
-0xa5,
-0x96,
-0xf0,
-0x41,
-0x45,
-0x36,
-0x38,
-0x85,
-0x37,
-0xbd,
-0x72,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x72,
-0x81,
-0x84,
-0x37,
-0xbd,
-0x73,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0x73,
-0x81,
-0x80,
-0x28,
-0x45,
-0x95,
-0x7d,
-0x71,
-0x81,
-0x9d,
-0x71,
-0x81,
-0x98,
-0x7d,
-0x72,
-0x81,
-0x9d,
-0x72,
-0x81,
-0x90,
-0x04,
-0xfe,
-0x73,
-0x81,
-0x18,
-0xa5,
-0x96,
-0xf0,
-0x0f,
-0x45,
-0x36,
-0x7d,
-0x72,
-0x81,
-0x9d,
-0x72,
-0x81,
-0x98,
-0x7d,
-0x73,
-0x81,
-0x9d,
-0x73,
-0x81,
-0xa5,
-0x48,
-0xf0,
-0x69,
-0x3c,
-0x45,
-0x2f,
-0xc0,
-0x80,
-0xa5,
-0x36,
-0x90,
-0x38,
-0x45,
-0x8d,
-0x85,
-0x37,
-0xbd,
-0xb9,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xb9,
-0x81,
-0x84,
-0x37,
-0xbd,
-0xba,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xba,
-0x81,
-0xb0,
-0x04,
-0xde,
-0xbb,
-0x81,
-0x38,
-0xa5,
-0x8e,
-0xf0,
-0x40,
-0x45,
-0x36,
-0x85,
-0x37,
-0xbd,
-0xba,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xba,
-0x81,
-0x84,
-0x37,
-0xbd,
-0xbb,
-0x81,
-0xe5,
-0x37,
-0x9d,
-0xbb,
-0x81,
-0x80,
-0x28,
-0x45,
-0x8d,
-0x7d,
-0xb9,
-0x81,
-0x9d,
-0xb9,
-0x81,
-0x98,
-0x7d,
-0xba,
-0x81,
-0x9d,
-0xba,
-0x81,
-0x90,
-0x04,
-0xfe,
-0xbb,
-0x81,
-0x18,
-0xa5,
-0x8e,
-0xf0,
-0x0f,
-0x45,
-0x36,
-0x7d,
-0xba,
-0x81,
-0x9d,
-0xba,
-0x81,
-0x98,
-0x7d,
-0xbb,
-0x81,
-0x9d,
-0xbb,
-0x81,
-0xa5,
-0x49,
-0xf0,
-0x69,
-0x3c,
-0x45,
-0x2f,
-0xc0,
-0x80,
-0xa5,
-0x36,
-0x90,
-0x38,
-0x45,
-0x91,
-0x85,
-0x37,
-0xbd,
-0x01,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x01,
-0x82,
-0x84,
-0x37,
-0xbd,
-0x02,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x02,
-0x82,
-0xb0,
-0x04,
-0xde,
-0x03,
-0x82,
-0x38,
-0xa5,
-0x92,
-0xf0,
-0x40,
-0x45,
-0x36,
-0x85,
-0x37,
-0xbd,
-0x02,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x02,
-0x82,
-0x84,
-0x37,
-0xbd,
-0x03,
-0x82,
-0xe5,
-0x37,
-0x9d,
-0x03,
-0x82,
-0x80,
-0x28,
-0x45,
-0x91,
-0x7d,
-0x01,
-0x82,
-0x9d,
-0x01,
-0x82,
-0x98,
-0x7d,
-0x02,
-0x82,
-0x9d,
-0x02,
-0x82,
-0x90,
-0x04,
-0xfe,
-0x03,
-0x82,
-0x18,
-0xa5,
-0x92,
-0xf0,
-0x0f,
-0x45,
-0x36,
-0x7d,
-0x02,
-0x82,
-0x9d,
-0x02,
-0x82,
-0x98,
-0x7d,
-0x03,
-0x82,
-0x9d,
-0x03,
-0x82,
-0xe8,
-0xe8,
-0xe8,
-0x60,
-0xe6,
-0x25,
-0x20,
-0xfa,
-0x2a,
-0x20,
-0x35,
-0x2e,
-0x20,
-0x1e,
-0x30,
-0x20,
-0x4d,
-0x31,
-0x20,
-0xb1,
-0x34,
-0x64,
-0x25,
-0x60,
-0xa5,
-0x41,
-0xc9,
-0x80,
-0x66,
-0x41,
-0x66,
-0x40,
-0x66,
-0x3f,
-0x66,
-0x3e,
-0xc9,
-0x80,
-0x66,
-0x41,
-0x66,
-0x40,
-0x66,
-0x3f,
-0x66,
-0x3e,
-0xc9,
-0x80,
-0x66,
-0x41,
-0x66,
-0x40,
-0x66,
-0x3f,
-0x66,
-0x3e,
-0xc9,
-0x80,
-0x66,
-0x41,
-0x66,
-0x40,
-0x66,
-0x3f,
-0x66,
-0x3e,
-0x60,
-0xa5,
-0x34,
-0x45,
-0x32,
-0x85,
-0x37,
-0x84,
-0x38,
-0xa5,
-0x35,
-0x45,
-0x32,
-0x18,
-0x65,
-0x38,
-0x85,
-0x38,
-0x98,
-0x69,
-0x00,
-0x85,
-0x39,
-0xa5,
-0x34,
-0x45,
-0x33,
-0x18,
-0x65,
-0x38,
-0x85,
-0x38,
-0x98,
-0x65,
-0x39,
-0x85,
-0x39,
-0xa9,
-0x00,
-0x69,
-0x00,
-0x85,
-0x3a,
-0xa5,
-0x35,
-0x45,
-0x33,
-0x18,
-0x65,
-0x39,
-0x85,
-0x39,
-0x98,
-0x65,
-0x3a,
-0x85,
-0x3a,
-0xa5,
-0x36,
-0x45,
-0x32,
-0x18,
-0x65,
-0x39,
-0x85,
-0x39,
-0x98,
-0x65,
-0x3a,
-0x85,
-0x3a,
-0xa9,
-0x00,
-0x69,
-0x00,
-0x85,
-0x3b,
-0xa5,
-0x36,
-0x45,
-0x33,
-0x18,
-0x65,
-0x3a,
-0x85,
-0x3a,
-0x98,
-0x65,
-0x3b,
-0x85,
-0x3b,
-0xa5,
-0x33,
-0x10,
-0x13,
-0x38,
-0xa5,
-0x39,
-0xe5,
-0x34,
-0x85,
-0x39,
-0xa5,
-0x3a,
-0xe5,
-0x35,
-0x85,
-0x3a,
-0xa5,
-0x3b,
-0xe5,
-0x36,
-0x85,
-0x3b,
-0x64,
-0x32,
-0xa5,
-0x37,
-0x29,
-0x0f,
-0xc9,
-0x08,
-0xd0,
-0x02,
-0xe6,
-0x32,
-0xa2,
-0x04,
-0xa5,
-0x3b,
-0xc9,
-0x80,
-0x66,
-0x3b,
-0x66,
-0x3a,
-0x66,
-0x39,
-0x66,
-0x38,
-0x66,
-0x37,
-0xca,
-0xd0,
-0xef,
-0xa5,
-0x3b,
-0xf0,
-0x22,
-0x10,
-0x13,
-0x1a,
-0xd0,
-0x04,
-0xa5,
-0x3a,
-0x30,
-0x1d,
-0x64,
-0x3e,
-0x64,
-0x3f,
-0x64,
-0x40,
-0xa9,
-0x80,
-0x85,
-0x41,
-0x18,
-0x60,
-0xa9,
-0xff,
-0x85,
-0x3e,
-0x85,
-0x3f,
-0x85,
-0x40,
-0x4a,
-0x85,
-0x41,
-0x18,
-0x60,
-0xa5,
-0x3a,
-0x30,
-0xef,
-0xa0,
-0x04,
-0x53,
-0x37,
-0x00,
-0x3e,
-0x00,
-0xa5,
-0x32,
-0xd0,
-0x03,
-0x2a,
-0x1a,
-0x6a,
-0x60,
-0xa9,
-0x80,
-0x38,
-0xed,
-0xb3,
-0x6b,
-0x85,
-0x74,
-0x64,
-0x6d,
-0xa0,
-0x09,
-0x53,
-0x5f,
-0x81,
-0x7b,
-0x00,
-0xa0,
-0x02,
-0x53,
-0xa9,
-0x7d,
-0x32,
-0x00,
-0xad,
-0xa3,
-0x7d,
-0x0a,
-0xaa,
-0xbd,
-0x97,
-0x7d,
-0x85,
-0x75,
-0xbd,
-0x98,
-0x7d,
-0x85,
-0x76,
-0xad,
-0xa4,
-0x7d,
-0x0a,
-0xaa,
-0xbd,
-0x97,
-0x7d,
-0x85,
-0x77,
-0xbd,
-0x98,
-0x7d,
-0x85,
-0x78,
-0xad,
-0xa5,
-0x7d,
-0x0a,
-0xaa,
-0xbd,
-0x97,
-0x7d,
-0x85,
-0x79,
-0xbd,
-0x98,
-0x7d,
-0x85,
-0x7a,
-0x64,
-0x84,
-0x64,
-0x85,
-0x64,
-0x86,
-0xa6,
-0x6d,
-0xb5,
-0xdc,
-0xf0,
-0x07,
-0xa9,
-0x80,
-0x85,
-0x86,
-0x4c,
-0x9b,
-0x2d,
-0x38,
-0xa5,
-0x7b,
-0xe5,
-0x7e,
-0x85,
-0x7b,
-0xa5,
-0x7c,
-0xe5,
-0x7f,
-0x85,
-0x7c,
-0xa5,
-0x7d,
-0xe5,
-0x80,
-0xa8,
-0xa5,
-0x7c,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xf0,
-0x12,
-0x98,
-0x30,
-0x09,
-0xa9,
-0xff,
-0x85,
-0x7b,
-0x4a,
-0x85,
-0x7c,
-0x80,
-0x06,
-0xa9,
-0x80,
-0x85,
-0x7c,
-0x64,
-0x7b,
-0x38,
-0xa5,
-0x81,
-0xe5,
-0x7e,
-0x85,
-0x81,
-0xa5,
-0x82,
-0xe5,
-0x7f,
-0x85,
-0x82,
-0xa5,
-0x83,
-0xe5,
-0x80,
-0xa8,
-0xa5,
-0x82,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xf0,
-0x12,
-0x98,
-0x30,
-0x09,
-0xa9,
-0xff,
-0x85,
-0x81,
-0x4a,
-0x85,
-0x82,
-0x80,
-0x06,
-0xa9,
-0x80,
-0x85,
-0x82,
-0x64,
-0x81,
-0xa0,
-0x02,
-0x53,
-0x81,
-0x00,
-0x34,
-0x00,
-0x20,
-0x6f,
-0x39,
-0x20,
-0x06,
-0x2a,
-0x90,
-0x0e,
-0xe6,
-0x3e,
-0xd0,
-0x0a,
-0xe6,
-0x3f,
-0xd0,
-0x06,
-0xe6,
-0x40,
-0xd0,
-0x02,
-0xe6,
-0x41,
-0xa2,
-0x00,
-0xa5,
-0x7b,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x42,
-0xa5,
-0x7c,
-0x10,
-0x01,
-0xca,
-0x65,
-0x3f,
-0x85,
-0x43,
-0x8a,
-0x65,
-0x40,
-0x85,
-0x44,
-0x8a,
-0x65,
-0x41,
-0x85,
-0x45,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x7b,
-0x85,
-0x34,
-0xa9,
-0x00,
-0xe5,
-0x7c,
-0x85,
-0x35,
-0xa5,
-0x6d,
-0x49,
-0x07,
-0xaa,
-0xda,
-0xbd,
-0xab,
-0x7d,
-0x85,
-0x32,
-0xbd,
-0xac,
-0x7d,
-0x85,
-0x33,
-0xa5,
-0x7c,
-0x10,
-0x05,
-0x20,
-0xb2,
-0x39,
-0x80,
-0x03,
-0x20,
-0x6f,
-0x39,
-0xa0,
-0x04,
-0x53,
-0x3e,
-0x00,
-0x46,
-0x00,
-0xfa,
-0xbd,
-0xad,
-0x7d,
-0x85,
-0x34,
-0xbd,
-0xae,
-0x7d,
-0x85,
-0x35,
-0xbd,
-0xaf,
-0x7d,
-0x85,
-0x36,
-0xa0,
-0x02,
-0x53,
-0x81,
-0x00,
-0x32,
-0x00,
-0x20,
-0x31,
-0x2a,
-0xa5,
-0x46,
-0xe5,
-0x3e,
-0x85,
-0x46,
-0xa5,
-0x47,
-0xe5,
-0x3f,
-0x85,
-0x47,
-0xa5,
-0x48,
-0xe5,
-0x40,
-0x85,
-0x48,
-0xa2,
-0x00,
-0xa5,
-0x49,
-0x10,
-0x01,
-0xca,
-0xe5,
-0x41,
-0x85,
-0x49,
-0x8a,
-0xa6,
-0x41,
-0x30,
-0x04,
-0xe9,
-0x00,
-0x80,
-0x02,
-0xe9,
-0xff,
-0x10,
-0x0f,
-0xc9,
-0xff,
-0xd0,
-0x04,
-0xa5,
-0x49,
-0x30,
-0x19,
-0xa9,
-0x80,
-0x85,
-0x49,
-0x0a,
-0x80,
-0x0c,
-0xd0,
-0x04,
-0xa5,
-0x49,
-0x10,
-0x0c,
-0xa9,
-0x7f,
-0x85,
-0x49,
-0xa9,
-0xff,
-0x85,
-0x48,
-0x85,
-0x47,
-0x85,
-0x46,
-0xa9,
-0x00,
-0xa8,
-0x38,
-0xe5,
-0x46,
-0x85,
-0x46,
-0x98,
-0xe5,
-0x47,
-0x85,
-0x47,
-0x98,
-0xe5,
-0x48,
-0x85,
-0x48,
-0x98,
-0xe5,
-0x49,
-0x85,
-0x49,
-0xa5,
-0x45,
-0x30,
-0x32,
-0x06,
-0x42,
-0x26,
-0x43,
-0x26,
-0x44,
-0x26,
-0x45,
-0xa5,
-0x42,
-0x05,
-0x43,
-0x05,
-0x44,
-0x05,
-0x45,
-0xd0,
-0x06,
-0x64,
-0x32,
-0x64,
-0x33,
-0x80,
-0x34,
-0xa5,
-0x49,
-0x30,
-0x18,
-0xa5,
-0x45,
-0x30,
-0x14,
-0x06,
-0x42,
-0x26,
-0x43,
-0x26,
-0x44,
-0x26,
-0x45,
-0x06,
-0x46,
-0x26,
-0x47,
-0x26,
-0x48,
-0x26,
-0x49,
-0x80,
-0xe6,
-0x80,
-0x6e,
-0xa0,
-0x02,
-0x53,
-0x48,
-0x00,
-0x32,
-0x00,
-0x53,
-0x44,
-0x00,
-0x34,
-0x00,
-0xa5,
-0x34,
-0x05,
-0x35,
-0xd0,
-0x03,
-0x4c,
-0x5c,
-0x2d,
-0x20,
-0x4e,
-0x39,
-0x38,
-0xa5,
-0x75,
-0xe5,
-0x32,
-0xa5,
-0x76,
-0xe5,
-0x33,
-0xb0,
-0x4b,
-0x38,
-0xa5,
-0x32,
-0xe5,
-0x79,
-0xa5,
-0x33,
-0xe5,
-0x7a,
-0xb0,
-0x40,
-0x38,
-0xa5,
-0x32,
-0xe5,
-0x77,
-0xa5,
-0x33,
-0xe5,
-0x78,
-0xb0,
-0x62,
-0xa0,
-0x02,
-0x53,
-0x77,
-0x00,
-0x34,
-0x00,
-0x38,
-0xa5,
-0x77,
-0xe5,
-0x32,
-0xaa,
-0x64,
-0x32,
-0xa5,
-0x78,
-0xe5,
-0x33,
-0x86,
-0x33,
-0x4a,
-0x66,
-0x33,
-0x66,
-0x32,
-0x4a,
-0x90,
-0x08,
-0x66,
-0x33,
-0x66,
-0x32,
-0x46,
-0x35,
-0x66,
-0x34,
-0x20,
-0x4e,
-0x39,
-0xa5,
-0x32,
-0x85,
-0x84,
-0x38,
-0xa9,
-0x80,
-0xe5,
-0x84,
-0x85,
-0x85,
-0x80,
-0x66,
-0xa2,
-0x00,
-0xa5,
-0x82,
-0x10,
-0x01,
-0xca,
-0x86,
-0x83,
-0xa2,
-0x00,
-0xa5,
-0x7c,
-0x10,
-0x01,
-0xca,
-0x86,
-0x7d,
-0x38,
-0xa5,
-0x81,
-0xe5,
-0x7b,
-0xa5,
-0x82,
-0xe5,
-0x7c,
-0xa5,
-0x83,
-0xe5,
-0x7d,
-0x10,
-0x06,
-0xa9,
-0x80,
-0x85,
-0x86,
-0x80,
-0x3f,
-0xa9,
-0x80,
-0x85,
-0x84,
-0x80,
-0x39,
-0x38,
-0xa5,
-0x79,
-0xe5,
-0x77,
-0x85,
-0x34,
-0xa5,
-0x7a,
-0xe5,
-0x78,
-0x85,
-0x35,
-0x38,
-0xa5,
-0x79,
-0xe5,
-0x32,
-0xaa,
-0x64,
-0x32,
-0xa5,
-0x7a,
-0xe5,
-0x33,
-0x86,
-0x33,
-0x4a,
-0x66,
-0x33,
-0x66,
-0x32,
-0x4a,
-0x90,
-0x08,
-0x66,
-0x33,
-0x66,
-0x32,
-0x46,
-0x35,
-0x66,
-0x34,
-0x20,
-0x4e,
-0x39,
-0xa5,
-0x32,
-0x85,
-0x85,
-0x38,
-0xa9,
-0x80,
-0xe5,
-0x85,
-0x85,
-0x86,
-0x64,
-0x2e,
-0x64,
-0x6c,
-0xa6,
-0x6c,
-0xb5,
-0x84,
-0x45,
-0x74,
-0x85,
-0x32,
-0x84,
-0x33,
-0xa5,
-0x6d,
-0x49,
-0x03,
-0x18,
-0x65,
-0x6c,
-0xaa,
-0xbd,
-0x15,
-0x6c,
-0x4d,
-0xb3,
-0x6b,
-0x18,
-0x65,
-0x32,
-0x85,
-0x32,
-0x98,
-0x65,
-0x33,
-0x06,
-0x32,
-0x2a,
-0xc5,
-0x2e,
-0x90,
-0x06,
-0xf0,
-0x04,
-0x85,
-0x2e,
-0x86,
-0x2f,
-0x9d,
-0x1b,
-0x6c,
-0xe6,
-0x6c,
-0xa5,
-0x6c,
-0xc9,
-0x03,
-0xd0,
-0xc8,
-0x38,
-0xa9,
-0x80,
-0xfd,
-0x19,
-0x6c,
-0xfd,
-0x1a,
-0x6c,
-0xfd,
-0x1b,
-0x6c,
-0xf0,
-0x09,
-0xa6,
-0x2f,
-0x18,
-0x7d,
-0x1b,
-0x6c,
-0x9d,
-0x1b,
-0x6c,
-0xe6,
-0x6d,
-0xa5,
-0x6d,
-0xc9,
-0x02,
-0xf0,
-0x3e,
-0xa0,
-0x09,
-0x53,
-0x68,
-0x81,
-0x7b,
-0x00,
-0xa0,
-0x02,
-0x53,
-0xb0,
-0x7d,
-0x32,
-0x00,
-0xad,
-0xa6,
-0x7d,
-0x0a,
-0xaa,
-0xbd,
-0x9d,
-0x7d,
-0x85,
-0x75,
-0xbd,
-0x9e,
-0x7d,
-0x85,
-0x76,
-0xad,
-0xa7,
-0x7d,
-0x0a,
-0xaa,
-0xbd,
-0x9d,
-0x7d,
-0x85,
-0x77,
-0xbd,
-0x9e,
-0x7d,
-0x85,
-0x78,
-0xad,
-0xa8,
-0x7d,
-0x0a,
-0xaa,
-0xbd,
-0x9d,
-0x7d,
-0x85,
-0x79,
-0xbd,
-0x9e,
-0x7d,
-0x85,
-0x7a,
-0x4c,
-0x3f,
-0x2b,
-0x60,
-0xa0,
-0x02,
-0x53,
-0x33,
-0xbe,
-0x36,
-0x00,
-0x53,
-0x35,
-0xbe,
-0x38,
-0x00,
-0xa0,
-0x00,
-0xfc,
-0xbd,
-0x71,
-0x81,
-0x0a,
-0xbd,
-0x72,
-0x81,
-0x69,
-0x00,
-0x99,
-0x71,
-0x81,
-0xbd,
-0x73,
-0x81,
-0x69,
-0x00,
-0x99,
-0x72,
-0x81,
-0xbd,
-0xb9,
-0x81,
-0x0a,
-0xbd,
-0xba,
-0x81,
-0x69,
-0x00,
-0x99,
-0xb9,
-0x81,
-0xbd,
-0xbb,
-0x81,
-0x69,
-0x00,
-0x99,
-0xba,
-0x81,
-0xbd,
-0x01,
-0x82,
-0x0a,
-0xbd,
-0x02,
-0x82,
-0x69,
-0x00,
-0x99,
-0x01,
-0x82,
-0xbd,
-0x03,
-0x82,
-0x69,
-0x00,
-0x99,
-0x02,
-0x82,
-0xc8,
-0xc8,
-0xe8,
-0xe8,
-0xe8,
-0xe0,
-0x48,
-0xd0,
-0xbb,
-0xa9,
-0xfc,
-0x85,
-0x50,
-0xa9,
-0x53,
-0x85,
-0x51,
-0x64,
-0x2e,
-0xa2,
-0x00,
-0x64,
-0x3e,
-0x64,
-0x3f,
-0x64,
-0x40,
-0x64,
-0x42,
-0x64,
-0x43,
-0x64,
-0x44,
-0x64,
-0x46,
-0x64,
-0x47,
-0x64,
-0x48,
-0xb2,
-0x50,
-0x85,
-0x2f,
-0x5d,
-0x71,
-0x81,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x72,
-0x81,
-0xf0,
-0x12,
-0x48,
-0x45,
-0x2f,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x2f,
-0x85,
-0x40,
-0xa5,
-0x2f,
-0x5d,
-0xb9,
-0x81,
-0x18,
-0x65,
-0x42,
-0x85,
-0x42,
-0x98,
-0x65,
-0x43,
-0x85,
-0x43,
-0x90,
-0x03,
-0xe6,
-0x44,
-0x18,
-0xbd,
-0xba,
-0x81,
-0xf0,
-0x12,
-0x48,
-0x45,
-0x2f,
-0x65,
-0x43,
-0x85,
-0x43,
-0x98,
-0x65,
-0x44,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x2f,
-0x85,
-0x44,
-0xa5,
-0x2f,
-0x5d,
-0x01,
-0x82,
-0x18,
-0x65,
-0x46,
-0x85,
-0x46,
-0x98,
-0x65,
-0x47,
-0x85,
-0x47,
-0x90,
-0x03,
-0xe6,
-0x48,
-0x18,
-0xbd,
-0x02,
-0x82,
-0xf0,
-0x12,
-0x48,
-0x45,
-0x2f,
-0x65,
-0x47,
-0x85,
-0x47,
-0x98,
-0x65,
-0x48,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x2f,
-0x85,
-0x48,
-0xe6,
-0x50,
-0xd0,
-0x02,
-0xe6,
-0x51,
-0xe8,
-0xe8,
-0xe0,
-0x30,
-0xf0,
-0x03,
-0x4c,
-0xa7,
-0x2e,
-0xa6,
-0x2e,
-0x06,
-0x3e,
-0x26,
-0x3f,
-0x26,
-0x40,
-0x06,
-0x3e,
-0xa9,
-0x00,
-0x65,
-0x3f,
-0x9d,
-0x49,
-0x82,
-0xa9,
-0x00,
-0x65,
-0x40,
-0x9d,
-0x4a,
-0x82,
-0x06,
-0x42,
-0x26,
-0x43,
-0x26,
-0x44,
-0x06,
-0x42,
-0xa9,
-0x00,
-0x65,
-0x43,
-0x85,
-0x42,
-0xa9,
-0x00,
-0x65,
-0x44,
-0x85,
-0x43,
-0x38,
-0xa5,
-0x42,
-0xe5,
-0x38,
-0xa5,
-0x43,
-0xe5,
-0x39,
-0x30,
-0x06,
-0xa5,
-0x38,
-0xa4,
-0x39,
-0x80,
-0x15,
-0x38,
-0xa5,
-0x42,
-0xe5,
-0x36,
-0xa5,
-0x43,
-0xe5,
-0x37,
-0x30,
-0x06,
-0xa5,
-0x42,
-0xa4,
-0x43,
-0x80,
-0x04,
-0xa5,
-0x36,
-0xa4,
-0x37,
-0x9d,
-0x7b,
-0x82,
-0x98,
-0x9d,
-0x7c,
-0x82,
-0x06,
-0x46,
-0x26,
-0x47,
-0x26,
-0x48,
-0x06,
-0x46,
-0xa9,
-0x00,
-0x65,
-0x47,
-0x85,
-0x46,
-0xa9,
-0x00,
-0x65,
-0x48,
-0x85,
-0x47,
-0x38,
-0xa5,
-0x46,
-0xe5,
-0x38,
-0xa5,
-0x47,
-0xe5,
-0x39,
-0x30,
-0x06,
-0xa5,
-0x38,
-0xa4,
-0x39,
-0x80,
-0x15,
-0x38,
-0xa5,
-0x46,
-0xe5,
-0x36,
-0xa5,
-0x47,
-0xe5,
-0x37,
-0x30,
-0x06,
-0xa5,
-0x46,
-0xa4,
-0x47,
-0x80,
-0x04,
-0xa5,
-0x36,
-0xa4,
-0x37,
-0x9d,
-0xad,
-0x82,
-0x98,
-0x9d,
-0xae,
-0x82,
-0xe8,
-0xe8,
-0xe0,
-0x18,
-0xd0,
-0x3b,
-0x9e,
-0x49,
-0x82,
-0x9e,
-0x4a,
-0x82,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x39,
-0x30,
-0x06,
-0xa5,
-0x38,
-0xa4,
-0x39,
-0x80,
-0x15,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x36,
-0xa9,
-0x00,
-0xe5,
-0x37,
-0x30,
-0x06,
-0xa9,
-0x00,
-0xa0,
-0x00,
-0x80,
-0x04,
-0xa5,
-0x36,
-0xa4,
-0x37,
-0x9d,
-0x7b,
-0x82,
-0x9d,
-0xad,
-0x82,
-0x98,
-0x9d,
-0x7c,
-0x82,
-0x9d,
-0xae,
-0x82,
-0xe8,
-0xe8,
-0x86,
-0x2e,
-0xe0,
-0x32,
-0xb0,
-0x03,
-0x4c,
-0x93,
-0x2e,
-0x60,
-0xa5,
-0x72,
-0x64,
-0x38,
-0x64,
-0x39,
-0x05,
-0x73,
-0xd0,
-0x05,
-0x64,
-0x32,
-0x64,
-0x33,
-0x60,
-0x64,
-0x2f,
-0x64,
-0x3e,
-0x64,
-0x3f,
-0x64,
-0x40,
-0xa2,
-0x00,
-0xa0,
-0x00,
-0xa5,
-0x2f,
-0xf0,
-0x05,
-0xc9,
-0x04,
-0xf0,
-0x01,
-0xc8,
-0x84,
-0x30,
-0x64,
-0x2e,
-0xa4,
-0x30,
-0xa5,
-0x2e,
-0xf0,
-0x05,
-0xc9,
-0x04,
-0xf0,
-0x01,
-0xc8,
-0xbd,
-0x4a,
-0x82,
-0x85,
-0x31,
-0xbd,
-0x49,
-0x82,
-0xc0,
-0x01,
-0x90,
-0x08,
-0xf0,
-0x03,
-0x0a,
-0x26,
-0x31,
-0x0a,
-0x26,
-0x31,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0xa5,
-0x31,
-0xa8,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x30,
-0x06,
-0x90,
-0x08,
-0xe6,
-0x40,
-0x80,
-0x04,
-0xb0,
-0x02,
-0xc6,
-0x40,
-0xe8,
-0xe8,
-0xa5,
-0x2e,
-0x1a,
-0x85,
-0x2e,
-0xc9,
-0x05,
-0xd0,
-0xbd,
-0xa5,
-0x2f,
-0x1a,
-0x85,
-0x2f,
-0xc9,
-0x05,
-0xd0,
-0xa5,
-0xa2,
-0x06,
-0xa5,
-0x40,
-0xc9,
-0x80,
-0x6a,
-0x66,
-0x3f,
-0x66,
-0x3e,
-0xca,
-0xd0,
-0xf6,
-0xa5,
-0x3f,
-0x85,
-0x39,
-0xa5,
-0x3e,
-0x90,
-0x05,
-0x1a,
-0xd0,
-0x02,
-0xe6,
-0x39,
-0x85,
-0x38,
-0xa5,
-0x72,
-0x85,
-0x34,
-0xa6,
-0x73,
-0x86,
-0x35,
-0xa6,
-0x70,
-0x10,
-0x30,
-0xa0,
-0x00,
-0x98,
-0x38,
-0xe5,
-0x6e,
-0x85,
-0x32,
-0x98,
-0xe5,
-0x6f,
-0x85,
-0x33,
-0x98,
-0xe5,
-0x70,
-0xf0,
-0x0c,
-0x46,
-0x35,
-0x66,
-0x34,
-0x4a,
-0x66,
-0x33,
-0x66,
-0x32,
-0xaa,
-0xd0,
-0xf4,
-0x20,
-0x4e,
-0x39,
-0x18,
-0xa5,
-0x32,
-0x65,
-0x38,
-0x85,
-0x32,
-0xa5,
-0x33,
-0x65,
-0x39,
-0x85,
-0x33,
-0x80,
-0x26,
-0x8a,
-0xf0,
-0x0c,
-0x46,
-0x35,
-0x66,
-0x34,
-0x4a,
-0x66,
-0x6f,
-0x66,
-0x6e,
-0xaa,
-0xd0,
-0xf4,
-0xa0,
-0x02,
-0x53,
-0x6e,
-0x00,
-0x32,
-0x00,
-0x20,
-0x4e,
-0x39,
-0x38,
-0xa5,
-0x38,
-0xe5,
-0x32,
-0x85,
-0x32,
-0xa5,
-0x39,
-0xe5,
-0x33,
-0x85,
-0x33,
-0xa2,
-0x00,
-0x38,
-0xbd,
-0x49,
-0x82,
-0xe5,
-0x32,
-0xa8,
-0xbd,
-0x4a,
-0x82,
-0xe5,
-0x33,
-0x30,
-0x10,
-0xc9,
-0x03,
-0x90,
-0x1a,
-0xd0,
-0x04,
-0xc0,
-0xff,
-0x90,
-0x14,
-0xa0,
-0xff,
-0xa9,
-0x03,
-0x80,
-0x0e,
-0xc9,
-0xfc,
-0x90,
-0x06,
-0xd0,
-0x08,
-0xc0,
-0x00,
-0xb0,
-0x04,
-0xa0,
-0x00,
-0xa9,
-0xfc,
-0x9d,
-0x4a,
-0x82,
-0x98,
-0x9d,
-0x49,
-0x82,
-0xe8,
-0xe8,
-0xe0,
-0x32,
-0xd0,
-0xc7,
-0x60,
-0x20,
-0x8d,
-0x31,
-0xa9,
-0x49,
-0x85,
-0x4a,
-0xa9,
-0x82,
-0x85,
-0x4b,
-0x20,
-0xe0,
-0x32,
-0xa0,
-0x32,
-0x53,
-0xdf,
-0x82,
-0x49,
-0x82,
-0xa9,
-0x7b,
-0x85,
-0x4a,
-0xa9,
-0x82,
-0x85,
-0x4b,
-0x20,
-0xe0,
-0x32,
-0x20,
-0x1d,
-0x34,
-0xa0,
-0x32,
-0x53,
-0xdf,
-0x82,
-0x7b,
-0x82,
-0xa9,
-0xad,
-0x85,
-0x4a,
-0xa9,
-0x82,
-0x85,
-0x4b,
-0x20,
-0xe0,
-0x32,
-0x20,
-0x1d,
-0x34,
-0xa0,
-0x32,
-0x53,
-0xdf,
-0x82,
-0xad,
-0x82,
-0x60,
-0xa5,
-0x28,
-0x49,
-0x04,
-0x85,
-0x2e,
-0x38,
-0xa5,
-0x29,
-0x1a,
-0xe5,
-0x28,
-0x49,
-0x14,
-0x85,
-0x38,
-0x84,
-0x39,
-0x64,
-0x3a,
-0x64,
-0x3b,
-0xa2,
-0x00,
-0xa5,
-0x3a,
-0x85,
-0x32,
-0xa5,
-0x3b,
-0x85,
-0x33,
-0xa9,
-0x14,
-0x85,
-0x34,
-0x64,
-0x35,
-0xda,
-0x20,
-0x2a,
-0x39,
-0xfa,
-0x18,
-0xa5,
-0x32,
-0x65,
-0x2e,
-0x9d,
-0x11,
-0x83,
-0x18,
-0xa5,
-0x3a,
-0x65,
-0x38,
-0x85,
-0x3a,
-0xa5,
-0x3b,
-0x65,
-0x39,
-0x85,
-0x3b,
-0xe8,
-0xe0,
-0x05,
-0xd0,
-0xd3,
-0xbd,
-0x10,
-0x83,
-0x1a,
-0x9d,
-0x11,
-0x83,
-0xa5,
-0x26,
-0x49,
-0x04,
-0x85,
-0x2e,
-0x38,
-0xa5,
-0x27,
-0x1a,
-0xe5,
-0x26,
-0x49,
-0x10,
-0x85,
-0x38,
-0x84,
-0x39,
-0x64,
-0x3a,
-0x64,
-0x3b,
-0xa2,
-0x00,
-0xa5,
-0x3a,
-0x85,
-0x32,
-0xa5,
-0x3b,
-0x85,
-0x33,
-0xa9,
-0x10,
-0x85,
-0x34,
-0x64,
-0x35,
-0xda,
-0x20,
-0x2a,
-0x39,
-0xfa,
-0x18,
-0xa5,
-0x32,
-0x65,
-0x2e,
-0x9d,
-0x17,
-0x83,
-0x18,
-0xa5,
-0x3a,
-0x65,
-0x38,
-0x85,
-0x3a,
-0xa5,
-0x3b,
-0x65,
-0x39,
-0x85,
-0x3b,
-0xe8,
-0xe0,
-0x05,
-0xd0,
-0xd3,
-0xbd,
-0x16,
-0x83,
-0x1a,
-0x9d,
-0x17,
-0x83,
-0x60,
-0xa5,
-0x2e,
-0xa2,
-0x00,
-0xe8,
-0xdd,
-0x11,
-0x83,
-0xb0,
-0xfa,
-0xca,
-0x8a,
-0x0a,
-0x18,
-0x60,
-0xa5,
-0x2f,
-0xa2,
-0x00,
-0xe8,
-0xdd,
-0x17,
-0x83,
-0xb0,
-0xfa,
-0xca,
-0x8a,
-0x0a,
-0x18,
-0x60,
-0xb1,
-0x4a,
-0x85,
-0x38,
-0xc8,
-0xb1,
-0x4a,
-0x85,
-0x39,
-0x38,
-0xa5,
-0x2e,
-0xfd,
-0x11,
-0x83,
-0x85,
-0x31,
-0xf0,
-0x0f,
-0xc8,
-0x38,
-0xbd,
-0x12,
-0x83,
-0xfd,
-0x11,
-0x83,
-0x85,
-0x34,
-0x64,
-0x35,
-0x20,
-0x8e,
-0x32,
-0x60,
-0xb1,
-0x4a,
-0x85,
-0x38,
-0xc8,
-0xb1,
-0x4a,
-0x85,
-0x39,
-0x38,
-0xa5,
-0x2f,
-0xfd,
-0x17,
-0x83,
-0x85,
-0x31,
-0xf0,
-0x13,
-0x18,
-0x98,
-0x69,
-0x09,
-0xa8,
-0x38,
-0xbd,
-0x18,
-0x83,
-0xfd,
-0x17,
-0x83,
-0x85,
-0x34,
-0x64,
-0x35,
-0x20,
-0x8e,
-0x32,
-0x60,
-0x38,
-0xb1,
-0x4a,
-0xe5,
-0x38,
-0x85,
-0x32,
-0xc8,
-0xb1,
-0x4a,
-0xa0,
-0x00,
-0xe5,
-0x39,
-0x85,
-0x33,
-0x10,
-0x0c,
-0x38,
-0x98,
-0xe5,
-0x32,
-0x85,
-0x32,
-0x98,
-0xe5,
-0x33,
-0x85,
-0x33,
-0xc8,
-0x5a,
-0xa5,
-0x32,
-0x45,
-0x31,
-0x85,
-0x32,
-0x84,
-0x4c,
-0xa5,
-0x33,
-0x45,
-0x31,
-0x18,
-0x65,
-0x4c,
-0x85,
-0x33,
-0x20,
-0x4e,
-0x39,
-0x7a,
-0xf0,
-0x0e,
-0x38,
-0xa5,
-0x38,
-0xe5,
-0x32,
-0x85,
-0x38,
-0xa5,
-0x39,
-0xe5,
-0x33,
-0x85,
-0x39,
-0x60,
-0x18,
-0xa5,
-0x38,
-0x65,
-0x32,
-0x85,
-0x38,
-0xa5,
-0x39,
-0x65,
-0x33,
-0x85,
-0x39,
-0x60,
-0x64,
-0x30,
-0x64,
-0x2f,
-0x64,
-0x2e,
-0xa5,
-0x2f,
-0xcd,
-0x17,
-0x83,
-0xb0,
-0x33,
-0xa5,
-0x2e,
-0xcd,
-0x11,
-0x83,
-0xb0,
-0x0d,
-0xb2,
-0x4a,
-0x85,
-0x38,
-0xa0,
-0x01,
-0xb1,
-0x4a,
-0x85,
-0x39,
-0x4c,
-0xf0,
-0x33,
-0xcd,
-0x15,
-0x83,
-0xf0,
-0x10,
-0x90,
-0x0e,
-0xa0,
-0x08,
-0xb1,
-0x4a,
-0x85,
-0x38,
-0xc8,
-0xb1,
-0x4a,
-0x85,
-0x39,
-0x4c,
-0xf0,
-0x33,
-0x20,
-0x26,
-0x32,
-0xa8,
-0x20,
-0x44,
-0x32,
-0x4c,
-0xf0,
-0x33,
-0xcd,
-0x1b,
-0x83,
-0xf0,
-0x38,
-0x90,
-0x36,
-0xa5,
-0x2e,
-0xcd,
-0x11,
-0x83,
-0xb0,
-0x0e,
-0xa0,
-0x28,
-0xb1,
-0x4a,
-0x85,
-0x38,
-0xc8,
-0xb1,
-0x4a,
-0x85,
-0x39,
-0x4c,
-0xf0,
-0x33,
-0xcd,
-0x15,
-0x83,
-0xf0,
-0x10,
-0x90,
-0x0e,
-0xa0,
-0x30,
-0xb1,
-0x4a,
-0x85,
-0x38,
-0xc8,
-0xb1,
-0x4a,
-0x85,
-0x39,
-0x4c,
-0xf0,
-0x33,
-0x20,
-0x26,
-0x32,
-0x69,
-0x28,
-0xa8,
-0x20,
-0x44,
-0x32,
-0x4c,
-0xf0,
-0x33,
-0xa5,
-0x2e,
-0xcd,
-0x11,
-0x83,
-0xb0,
-0x0c,
-0x20,
-0x35,
-0x32,
-0x49,
-0x05,
-0xa8,
-0x20,
-0x67,
-0x32,
-0x4c,
-0xf0,
-0x33,
-0xcd,
-0x15,
-0x83,
-0xf0,
-0x0f,
-0x90,
-0x0d,
-0x20,
-0x35,
-0x32,
-0x49,
-0x05,
-0x69,
-0x08,
-0xa8,
-0x20,
-0x67,
-0x32,
-0x80,
-0x6c,
-0x20,
-0x35,
-0x32,
-0x86,
-0x3d,
-0x49,
-0x05,
-0x85,
-0x4d,
-0x20,
-0x26,
-0x32,
-0x86,
-0x3c,
-0x65,
-0x4d,
-0x85,
-0x4d,
-0xa8,
-0x20,
-0x44,
-0x32,
-0xa6,
-0x3d,
-0x38,
-0xa5,
-0x2f,
-0xfd,
-0x17,
-0x83,
-0xf0,
-0x4c,
-0xa6,
-0x31,
-0xd0,
-0x09,
-0xa6,
-0x3d,
-0xa4,
-0x4d,
-0x20,
-0x67,
-0x32,
-0x80,
-0x3f,
-0x48,
-0xa5,
-0x38,
-0x85,
-0x3a,
-0xa5,
-0x39,
-0x85,
-0x3b,
-0xa6,
-0x3c,
-0x18,
-0xa5,
-0x4d,
-0x69,
-0x0a,
-0xa8,
-0x20,
-0x44,
-0x32,
-0xa6,
-0x3d,
-0x38,
-0xbd,
-0x18,
-0x83,
-0xfd,
-0x17,
-0x83,
-0x85,
-0x34,
-0x64,
-0x35,
-0x68,
-0x85,
-0x31,
-0x38,
-0xa5,
-0x38,
-0xe5,
-0x3a,
-0x85,
-0x32,
-0xa5,
-0x39,
-0xe5,
-0x3b,
-0x85,
-0x33,
-0xa0,
-0x02,
-0x53,
-0x3a,
-0x00,
-0x38,
-0x00,
-0xa0,
-0x00,
-0xa5,
-0x33,
-0x20,
-0x9e,
-0x32,
-0xa6,
-0x30,
-0xa5,
-0x38,
-0x9d,
-0xdf,
-0x82,
-0xa5,
-0x39,
-0xe8,
-0x9d,
-0xdf,
-0x82,
-0xe8,
-0x86,
-0x30,
-0x18,
-0xa5,
-0x2e,
-0x69,
-0x14,
-0x85,
-0x2e,
-0xc9,
-0x51,
-0xb0,
-0x03,
-0x4c,
-0xe6,
-0x32,
-0x18,
-0xa5,
-0x2f,
-0x69,
-0x10,
-0x85,
-0x2f,
-0xc9,
-0x41,
-0xb0,
-0x03,
-0x4c,
-0xe4,
-0x32,
-0x60,
-0xa0,
-0x02,
-0x53,
-0xf7,
-0x82,
-0x32,
-0x00,
-0xa2,
-0x00,
-0x38,
-0xbd,
-0xdf,
-0x82,
-0xe5,
-0x32,
-0x9d,
-0xdf,
-0x82,
-0xe8,
-0xbd,
-0xdf,
-0x82,
-0xe5,
-0x33,
-0x9d,
-0xdf,
-0x82,
-0xe8,
-0xe0,
-0x32,
-0xd0,
-0xe9,
-0x60,
-0x85,
-0x4c,
-0x86,
-0x4d,
-0xa2,
-0x00,
-0xdc,
-0xb1,
-0x4a,
-0x45,
-0x2e,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xdc,
-0xc8,
-0xb1,
-0x4a,
-0x48,
-0x45,
-0x2e,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x2e,
-0x85,
-0x40,
-0xdc,
-0xb1,
-0x4c,
-0x45,
-0x2f,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xdc,
-0xc8,
-0xb1,
-0x4c,
-0x48,
-0x45,
-0x2f,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x2f,
-0x85,
-0x40,
-0x06,
-0x3e,
-0xa5,
-0x3f,
-0x2a,
-0xdc,
-0x91,
-0x4a,
-0xa5,
-0x40,
-0x2a,
-0xc8,
-0x91,
-0x4a,
-0xe8,
-0xe8,
-0xe0,
-0x32,
-0xd0,
-0xa2,
-0x60,
-0xc9,
-0xa7,
-0x90,
-0x03,
-0xa9,
-0xa6,
-0x60,
-0xc9,
-0x5a,
-0xb0,
-0x02,
-0xa9,
-0x5a,
-0x60,
-0xad,
-0xb3,
-0x6b,
-0x85,
-0x2e,
-0xa9,
-0x80,
-0x38,
-0xe5,
-0x2e,
-0x85,
-0x2f,
-0xa9,
-0x21,
-0x85,
-0x4a,
-0xa9,
-0x6c,
-0x85,
-0x4b,
-0xa9,
-0x7b,
-0xa2,
-0x82,
-0x20,
-0x3e,
-0x34,
-0xa9,
-0x53,
-0x85,
-0x4a,
-0xa9,
-0x6c,
-0x85,
-0x4b,
-0xa9,
-0xad,
-0xa2,
-0x82,
-0x20,
-0x3e,
-0x34,
-0xa9,
-0x85,
-0x85,
-0x4a,
-0xa9,
-0x6c,
-0x85,
-0x4b,
-0xa9,
-0x49,
-0xa2,
-0x82,
-0x20,
-0x3e,
-0x34,
-0xa9,
-0x39,
-0x85,
-0x4a,
-0xa9,
-0x75,
-0x85,
-0x4b,
-0xa9,
-0xe6,
-0x85,
-0x4c,
-0xa9,
-0x70,
-0x85,
-0x4d,
-0xa9,
-0x74,
-0x85,
-0x4e,
-0xa9,
-0x57,
-0x85,
-0x4f,
-0xa2,
-0x02,
-0xbd,
-0x1b,
-0x6c,
-0xbc,
-0xa3,
-0x7d,
-0x99,
-0x7e,
-0x00,
-0xbd,
-0x1e,
-0x6c,
-0xbc,
-0xa6,
-0x7d,
-0x99,
-0x81,
-0x00,
-0xca,
-0x10,
-0xeb,
-0xa9,
-0x11,
-0x85,
-0x2e,
-0xa9,
-0x15,
-0x85,
-0x2f,
-0xa0,
-0x06,
-0xd3,
-0x4a,
-0x75,
-0x00,
-0xa0,
-0x02,
-0xd3,
-0x4e,
-0x30,
-0x00,
-0xa6,
-0x31,
-0xa4,
-0x30,
-0xb9,
-0x24,
-0x57,
-0x85,
-0x50,
-0xd0,
-0x0d,
-0xbd,
-0x21,
-0x6c,
-0x85,
-0x3f,
-0xbd,
-0x22,
-0x6c,
-0x85,
-0x40,
-0x4c,
-0xfe,
-0x35,
-0xb9,
-0x25,
-0x57,
-0x85,
-0x51,
-0xb9,
-0x26,
-0x57,
-0x85,
-0x52,
-0xb9,
-0x27,
-0x57,
-0x85,
-0x53,
-0xbd,
-0x21,
-0x6c,
-0x45,
-0x50,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xbd,
-0x22,
-0x6c,
-0x48,
-0x45,
-0x50,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x50,
-0x85,
-0x40,
-0xa5,
-0x51,
-0xf0,
-0x27,
-0x5d,
-0x23,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x24,
-0x6c,
-0x48,
-0x45,
-0x51,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x51,
-0x85,
-0x40,
-0xa5,
-0x52,
-0xf0,
-0x27,
-0x5d,
-0x2b,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x2c,
-0x6c,
-0x48,
-0x45,
-0x52,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x52,
-0x85,
-0x40,
-0xa5,
-0x53,
-0xf0,
-0x27,
-0x5d,
-0x2d,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x2e,
-0x6c,
-0x48,
-0x45,
-0x53,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x53,
-0x85,
-0x40,
-0xa5,
-0x3e,
-0x10,
-0x06,
-0xe6,
-0x3f,
-0xd0,
-0x02,
-0xe6,
-0x40,
-0xa5,
-0x40,
-0x30,
-0x15,
-0x49,
-0x0b,
-0x18,
-0x69,
-0x80,
-0x85,
-0x33,
-0xa5,
-0x3f,
-0x49,
-0x0b,
-0x85,
-0x32,
-0x98,
-0x18,
-0x65,
-0x33,
-0x85,
-0x33,
-0x80,
-0x2b,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0x3f,
-0xa8,
-0xa9,
-0x00,
-0xe5,
-0x40,
-0x85,
-0x40,
-0x98,
-0x49,
-0x0b,
-0x85,
-0x3e,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x3e,
-0x85,
-0x32,
-0x84,
-0x3e,
-0xa9,
-0x80,
-0xe5,
-0x3e,
-0x48,
-0xa5,
-0x40,
-0x49,
-0x0b,
-0x85,
-0x3e,
-0x38,
-0x68,
-0xe5,
-0x3e,
-0x85,
-0x33,
-0xa5,
-0x75,
-0x45,
-0x7e,
-0x85,
-0x34,
-0x84,
-0x35,
-0xa5,
-0x76,
-0x45,
-0x7f,
-0x18,
-0x65,
-0x34,
-0x85,
-0x34,
-0x98,
-0x65,
-0x35,
-0x85,
-0x35,
-0xa5,
-0x77,
-0x45,
-0x80,
-0x18,
-0x65,
-0x34,
-0x85,
-0x34,
-0x98,
-0x65,
-0x35,
-0x06,
-0x34,
-0x2a,
-0x06,
-0x34,
-0x69,
-0x00,
-0x85,
-0x34,
-0x45,
-0x32,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xa5,
-0x34,
-0x45,
-0x33,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x06,
-0x3f,
-0x2a,
-0xb0,
-0x0a,
-0x06,
-0x3f,
-0x69,
-0x00,
-0xb0,
-0x04,
-0xc9,
-0xf4,
-0x90,
-0x04,
-0xa9,
-0xf3,
-0x80,
-0x06,
-0xc9,
-0x40,
-0xb0,
-0x02,
-0xa9,
-0x40,
-0x92,
-0x4c,
-0xa6,
-0x31,
-0xa5,
-0x50,
-0xd0,
-0x0d,
-0xbd,
-0x53,
-0x6c,
-0x85,
-0x3f,
-0xbd,
-0x54,
-0x6c,
-0x85,
-0x40,
-0x4c,
-0x57,
-0x37,
-0xbd,
-0x53,
-0x6c,
-0x45,
-0x50,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xbd,
-0x54,
-0x6c,
-0x48,
-0x45,
-0x50,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x50,
-0x85,
-0x40,
-0xa5,
-0x51,
-0xf0,
-0x27,
-0x5d,
-0x55,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x56,
-0x6c,
-0x48,
-0x45,
-0x51,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x51,
-0x85,
-0x40,
-0xa5,
-0x52,
-0xf0,
-0x27,
-0x5d,
-0x5d,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x5e,
-0x6c,
-0x48,
-0x45,
-0x52,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x52,
-0x85,
-0x40,
-0xa5,
-0x53,
-0xf0,
-0x27,
-0x5d,
-0x5f,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x60,
-0x6c,
-0x48,
-0x45,
-0x53,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x53,
-0x85,
-0x40,
-0xa5,
-0x3e,
-0x10,
-0x06,
-0xe6,
-0x3f,
-0xd0,
-0x02,
-0xe6,
-0x40,
-0xa5,
-0x40,
-0x30,
-0x15,
-0x49,
-0x0b,
-0x18,
-0x69,
-0x80,
-0x85,
-0x33,
-0xa5,
-0x3f,
-0x49,
-0x0b,
-0x85,
-0x32,
-0x98,
-0x18,
-0x65,
-0x33,
-0x85,
-0x33,
-0x80,
-0x2b,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0x3f,
-0xa8,
-0xa9,
-0x00,
-0xe5,
-0x40,
-0x85,
-0x40,
-0x98,
-0x49,
-0x0b,
-0x85,
-0x3e,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0x3e,
-0x85,
-0x32,
-0x84,
-0x3e,
-0xa9,
-0x80,
-0xe5,
-0x3e,
-0x48,
-0xa5,
-0x40,
-0x49,
-0x0b,
-0x85,
-0x3e,
-0x38,
-0x68,
-0xe5,
-0x3e,
-0x85,
-0x33,
-0xa5,
-0x81,
-0x45,
-0x78,
-0x85,
-0x34,
-0x84,
-0x35,
-0xa5,
-0x82,
-0x45,
-0x79,
-0x18,
-0x65,
-0x34,
-0x85,
-0x34,
-0x98,
-0x65,
-0x35,
-0x85,
-0x35,
-0xa5,
-0x83,
-0x45,
-0x7a,
-0x18,
-0x65,
-0x34,
-0x85,
-0x34,
-0x98,
-0x65,
-0x35,
-0x06,
-0x34,
-0x2a,
-0x06,
-0x34,
-0x69,
-0x00,
-0x85,
-0x34,
-0x45,
-0x32,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xa5,
-0x34,
-0x45,
-0x33,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x06,
-0x3f,
-0x2a,
-0xb0,
-0x0a,
-0x06,
-0x3f,
-0x69,
-0x00,
-0xb0,
-0x04,
-0xc9,
-0xf4,
-0x90,
-0x04,
-0xa9,
-0xf3,
-0x80,
-0x06,
-0xc9,
-0x40,
-0xb0,
-0x02,
-0xa9,
-0x40,
-0xa0,
-0x01,
-0x91,
-0x4c,
-0xa6,
-0x31,
-0xa5,
-0x50,
-0xd0,
-0x0d,
-0xbd,
-0x85,
-0x6c,
-0x85,
-0x3f,
-0xbd,
-0x86,
-0x6c,
-0x85,
-0x40,
-0x4c,
-0xb2,
-0x38,
-0xbd,
-0x85,
-0x6c,
-0x45,
-0x50,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xbd,
-0x86,
-0x6c,
-0x48,
-0x45,
-0x50,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x50,
-0x85,
-0x40,
-0xa5,
-0x51,
-0xf0,
-0x27,
-0x5d,
-0x87,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x88,
-0x6c,
-0x48,
-0x45,
-0x51,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x51,
-0x85,
-0x40,
-0xa5,
-0x52,
-0xf0,
-0x27,
-0x5d,
-0x8f,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x90,
-0x6c,
-0x48,
-0x45,
-0x52,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x52,
-0x85,
-0x40,
-0xa5,
-0x53,
-0xf0,
-0x27,
-0x5d,
-0x91,
-0x6c,
-0x18,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x98,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x90,
-0x03,
-0xe6,
-0x40,
-0x18,
-0xbd,
-0x92,
-0x6c,
-0x48,
-0x45,
-0x53,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x7a,
-0x10,
-0x03,
-0x38,
-0xe5,
-0x53,
-0x85,
-0x40,
-0xa5,
-0x3e,
-0x10,
-0x06,
-0xe6,
-0x3f,
-0xd0,
-0x02,
-0xe6,
-0x40,
-0xa2,
-0x00,
-0xa5,
-0x40,
-0x10,
-0x0e,
-0xe8,
-0xa9,
-0x00,
-0x38,
-0xe5,
-0x3f,
-0x85,
-0x3f,
-0xa9,
-0x00,
-0xe5,
-0x40,
-0x85,
-0x40,
-0xda,
-0xa5,
-0x3f,
-0x49,
-0x0b,
-0x85,
-0x32,
-0x84,
-0x33,
-0xa5,
-0x40,
-0x49,
-0x0b,
-0x18,
-0x65,
-0x33,
-0x85,
-0x33,
-0x46,
-0x33,
-0x66,
-0x32,
-0x10,
-0x02,
-0xe6,
-0x33,
-0x18,
-0xa5,
-0x33,
-0x69,
-0x80,
-0xaa,
-0x38,
-0xa9,
-0x80,
-0xe5,
-0x33,
-0x7a,
-0xf0,
-0x01,
-0x8a,
-0x20,
-0xa3,
-0x34,
-0xa0,
-0x02,
-0x91,
-0x4c,
-0x18,
-0xa5,
-0x4a,
-0x69,
-0x06,
-0x85,
-0x4a,
-0x90,
-0x03,
-0xe6,
-0x4b,
-0x18,
-0xa5,
-0x4c,
-0x69,
-0x03,
-0x85,
-0x4c,
-0x90,
-0x03,
-0xe6,
-0x4d,
-0x18,
-0xa5,
-0x4e,
-0x69,
-0x02,
-0x85,
-0x4e,
-0x90,
-0x02,
-0xe6,
-0x4f,
-0xc6,
-0x2f,
-0xf0,
-0x03,
-0x4c,
-0x21,
-0x35,
-0xc6,
-0x2e,
-0xf0,
-0x03,
-0x4c,
-0x1d,
-0x35,
-0xa9,
-0x01,
-0x85,
-0x22,
-0x60,
-0x64,
-0x36,
-0x64,
-0x37,
-0xa2,
-0x10,
-0x06,
-0x32,
-0x26,
-0x33,
-0x26,
-0x36,
-0x26,
-0x37,
-0xa5,
-0x36,
-0x38,
-0xe5,
-0x34,
-0xa8,
-0xa5,
-0x37,
-0xe5,
-0x35,
-0x90,
-0x06,
-0x85,
-0x37,
-0x84,
-0x36,
-0xe6,
-0x32,
-0xca,
-0xd0,
-0xe3,
-0x60,
-0x20,
-0x2a,
-0x39,
-0x46,
-0x35,
-0x66,
-0x34,
-0x90,
-0x06,
-0xe6,
-0x34,
-0xd0,
-0x02,
-0xe6,
-0x35,
-0x38,
-0xa5,
-0x36,
-0xe5,
-0x34,
-0xa5,
-0x37,
-0xe5,
-0x35,
-0x30,
-0x06,
-0xe6,
-0x32,
-0xd0,
-0x02,
-0xe6,
-0x33,
-0x60,
-0xa5,
-0x32,
-0x45,
-0x34,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xa5,
-0x32,
-0x45,
-0x35,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x85,
-0x40,
-0xa5,
-0x33,
-0x45,
-0x34,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x85,
-0x40,
-0xa5,
-0x33,
-0x45,
-0x35,
-0x65,
-0x40,
-0x85,
-0x40,
-0x98,
-0x69,
-0x00,
-0x85,
-0x41,
-0xa5,
-0x35,
-0x10,
-0x0d,
-0x38,
-0xa5,
-0x40,
-0xe5,
-0x32,
-0x85,
-0x40,
-0xa5,
-0x41,
-0xe5,
-0x33,
-0x85,
-0x41,
-0x60,
-0xa5,
-0x32,
-0x45,
-0x34,
-0x85,
-0x3e,
-0x84,
-0x3f,
-0xa5,
-0x32,
-0x45,
-0x35,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x69,
-0x00,
-0x85,
-0x40,
-0xa5,
-0x33,
-0x45,
-0x34,
-0x18,
-0x65,
-0x3f,
-0x85,
-0x3f,
-0x98,
-0x65,
-0x40,
-0x85,
-0x40,
-0xa5,
-0x33,
-0x45,
-0x35,
-0x65,
-0x40,
-0x85,
-0x40,
-0x98,
-0x69,
-0x00,
-0x85,
-0x41,
-0x60,
-0xda,
-0x29,
-0x01,
-0xf0,
-0x06,
-0xa9,
-0x68,
-0xa0,
-0x04,
-0x80,
-0x04,
-0xa9,
-0x90,
-0xa0,
-0x00,
-0x85,
-0xe6,
-0x84,
-0xe7,
-0x38,
-0xa5,
-0xb5,
-0xe5,
-0xb4,
-0x1a,
-0x1a,
-0x85,
-0xde,
-0xa0,
-0x02,
-0x53,
-0xac,
-0x00,
-0xea,
-0x00,
-0xa5,
-0xb4,
-0xa6,
-0xb6,
-0xf0,
-0x02,
-0xa5,
-0xb5,
-0xaa,
-0x85,
-0xdf,
-0x8a,
-0x18,
-0x65,
-0xb6,
-0x49,
-0x03,
-0x85,
-0xe8,
-0xa5,
-0xaa,
-0x48,
-0x18,
-0x65,
-0xbd,
-0x49,
-0x3f,
-0x65,
-0xe8,
-0x90,
-0x02,
-0xc8,
-0x18,
-0x69,
-0xb7,
-0x85,
-0xe2,
-0x98,
-0x69,
-0x6c,
-0x85,
-0xe3,
-0x68,
-0x1a,
-0x38,
-0xe5,
-0xbd,
-0x49,
-0x3f,
-0x18,
-0x65,
-0xe8,
-0x90,
-0x02,
-0xc8,
-0x18,
-0x69,
-0xb7,
-0x85,
-0xe4,
-0x98,
-0x69,
-0x6c,
-0x85,
-0xe5,
-0xa0,
-0x03,
-0xd3,
-0xe2,
-0xd4,
-0x00,
-0xd3,
-0xe4,
-0xd8,
-0x00,
-0xa0,
-0x02,
-0x53,
-0xe6,
-0x00,
-0x0c,
-0xc0,
-0xad,
-0x12,
-0x61,
-0xa8,
-0x29,
-0x01,
-0xd0,
-0x0a,
-0xa2,
-0x80,
-0x86,
-0xd4,
-0x86,
-0xd5,
-0x86,
-0xd8,
-0x86,
-0xd9,
-0x98,
-0x29,
-0x02,
-0xd0,
-0x06,
-0xa2,
-0x80,
-0x86,
-0xd6,
-0x86,
-0xda,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0xd6,
-0x85,
-0xd7,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0xda,
-0x85,
-0xdb,
-0xa0,
-0x08,
-0x43,
-0xd4,
-0x00,
-0x54,
-0xc0,
-0xc6,
-0xde,
-0xd0,
-0x03,
-0x4c,
-0x44,
-0x3b,
-0xa4,
-0xb6,
-0xd0,
-0x04,
-0xe6,
-0xdf,
-0x80,
-0x02,
-0xc6,
-0xdf,
-0xa0,
-0x03,
-0xc3,
-0xea,
-0x54,
-0xc0,
-0xc3,
-0xae,
-0x54,
-0xc0,
-0xc3,
-0xb0,
-0x54,
-0xc0,
-0xc3,
-0xb2,
-0x54,
-0xc0,
-0xa5,
-0xdf,
-0xa6,
-0xb6,
-0xd0,
-0x18,
-0x18,
-0xa5,
-0xe2,
-0x69,
-0x03,
-0x85,
-0xe2,
-0x90,
-0x03,
-0xe6,
-0xe3,
-0x18,
-0xa5,
-0xe4,
-0x69,
-0x03,
-0x85,
-0xe4,
-0x90,
-0x02,
-0xe6,
-0xe5,
-0x80,
-0x16,
-0x38,
-0xa5,
-0xe2,
-0xe9,
-0x03,
-0x85,
-0xe2,
-0xb0,
-0x03,
-0xc6,
-0xe3,
-0x38,
-0xa5,
-0xe4,
-0xe9,
-0x03,
-0x85,
-0xe4,
-0xb0,
-0x02,
-0xc6,
-0xe5,
-0xa5,
-0xde,
-0x3a,
-0xf0,
-0x4f,
-0xa0,
-0x02,
-0x53,
-0xea,
-0x00,
-0xb2,
-0x00,
-0xa6,
-0xb6,
-0xf0,
-0x23,
-0x38,
-0xa5,
-0xae,
-0xe9,
-0x03,
-0x85,
-0xae,
-0xb0,
-0x03,
-0xc6,
-0xaf,
-0x38,
-0xa5,
-0xea,
-0xe9,
-0x03,
-0x85,
-0xea,
-0xb0,
-0x03,
-0xc6,
-0xeb,
-0x38,
-0xa5,
-0xb0,
-0xe9,
-0x03,
-0x85,
-0xb0,
-0xb0,
-0x25,
-0xc6,
-0xb1,
-0x80,
-0x21,
-0x18,
-0xa5,
-0xae,
-0x69,
-0x03,
-0x85,
-0xae,
-0x90,
-0x03,
-0xe6,
-0xaf,
-0x18,
-0xa5,
-0xea,
-0x69,
-0x03,
-0x85,
-0xea,
-0x90,
-0x03,
-0xe6,
-0xeb,
-0x18,
-0xa5,
-0xb0,
-0x69,
-0x03,
-0x85,
-0xb0,
-0x90,
-0x02,
-0xe6,
-0xb1,
-0x18,
-0xa5,
-0xe6,
-0x69,
-0x18,
-0x85,
-0xe6,
-0x90,
-0x02,
-0xe6,
-0xe7,
-0x4c,
-0x48,
-0x3a,
-0xa0,
-0x03,
-0xc3,
-0xea,
-0x54,
-0xc0,
-0xa6,
-0xbd,
-0xf0,
-0x04,
-0xc6,
-0xaa,
-0x80,
-0x02,
-0xe6,
-0xaa,
-0xc6,
-0xab,
-0xf0,
-0x40,
-0xa5,
-0xac,
-0xa4,
-0xad,
-0x85,
-0xae,
-0x84,
-0xaf,
-0xa6,
-0xbd,
-0xf0,
-0x08,
-0x38,
-0xe9,
-0x3c,
-0xb0,
-0x09,
-0x88,
-0x80,
-0x06,
-0x18,
-0x69,
-0x3c,
-0x90,
-0x01,
-0xc8,
-0x85,
-0xac,
-0x84,
-0xad,
-0xa6,
-0xab,
-0xca,
-0xf0,
-0x12,
-0xa6,
-0xbd,
-0xf0,
-0x08,
-0x38,
-0xe9,
-0x3c,
-0xb0,
-0x09,
-0x88,
-0x80,
-0x06,
-0x18,
-0x69,
-0x3c,
-0x90,
-0x01,
-0xc8,
-0x85,
-0xb0,
-0x84,
-0xb1,
-0xa0,
-0x02,
-0x53,
-0xac,
-0x00,
-0xb2,
-0x00,
-0xfa,
-0x60,
-0x64,
-0xe6,
-0x64,
-0xe7,
-0xa2,
-0x10,
-0x06,
-0xe2,
-0x26,
-0xe3,
-0x26,
-0xe6,
-0x26,
-0xe7,
-0xa5,
-0xe6,
-0x38,
-0xe5,
-0xe4,
-0xa8,
-0xa5,
-0xe7,
-0xe5,
-0xe5,
-0x90,
-0x06,
-0x85,
-0xe7,
-0x84,
-0xe6,
-0xe6,
-0xe2,
-0xca,
-0xd0,
-0xe3,
-0x60,
-0xa5,
-0xc0,
-0x49,
-0x1a,
-0x84,
-0x17,
-0xa6,
-0xb4,
-0xbd,
-0x15,
-0x6b,
-0xc5,
-0x17,
-0xb0,
-0x01,
-0xe8,
-0x86,
-0x28,
-0xa6,
-0xb5,
-0xbd,
-0x15,
-0x6b,
-0xc5,
-0x17,
-0xb0,
-0x01,
-0xca,
-0x86,
-0x29,
-0x8a,
-0xa5,
-0xc2,
-0x49,
-0x1a,
-0x84,
-0xe3,
-0xa6,
-0xbe,
-0xbd,
-0x29,
-0x6b,
-0xc5,
-0xe3,
-0xb0,
-0x01,
-0xe8,
-0x86,
-0x26,
-0xa6,
-0xbf,
-0xbd,
-0x29,
-0x6b,
-0xc5,
-0xe3,
-0xb0,
-0x01,
-0xca,
-0x86,
-0x27,
-0xa4,
-0xbd,
-0xd0,
-0x02,
-0xa6,
-0x26,
-0x86,
-0x60,
-0xa5,
-0x26,
-0xa6,
-0xbd,
-0xf0,
-0x02,
-0xa5,
-0x27,
-0x49,
-0x64,
-0x18,
-0x69,
-0xd3,
-0x85,
-0xbb,
-0x85,
-0x2a,
-0x98,
-0x69,
-0x64,
-0x85,
-0xbc,
-0x85,
-0x2b,
-0xa5,
-0x28,
-0x49,
-0x05,
-0x65,
-0x2a,
-0x85,
-0x2a,
-0x90,
-0x03,
-0xe6,
-0x2b,
-0x18,
-0xa5,
-0x28,
-0xa6,
-0xb6,
-0xf0,
-0x02,
-0xa5,
-0x29,
-0x49,
-0x05,
-0x65,
-0xbb,
-0x85,
-0xbb,
-0x90,
-0x02,
-0xe6,
-0xbc,
-0x60,
-0xfc,
-0xf0,
-0x11,
-0xa2,
-0x07,
-0x85,
-0xe3,
-0x98,
-0x80,
-0x02,
-0x66,
-0xe3,
-0xe8,
-0x4a,
-0xd0,
-0xfa,
-0x66,
-0xe3,
-0x80,
-0x0b,
-0xa2,
-0x07,
-0xa8,
-0x30,
-0x04,
-0xca,
-0x0a,
-0x10,
-0xfc,
-0x85,
-0xe3,
-0x8a,
-0x0a,
-0xaa,
-0xa5,
-0xe3,
-0x29,
-0x7f,
-0xa8,
-0x60,
-0x7c,
-0x5a,
-0x40,
-0xda,
-0xa0,
-0x02,
-0x53,
-0xbb,
-0x00,
-0xd4,
-0x00,
-0x53,
-0xb7,
-0x00,
-0xd6,
-0x00,
-0x29,
-0x01,
-0xf0,
-0x06,
-0xa9,
-0xd0,
-0xa2,
-0x0a,
-0x80,
-0x04,
-0xa9,
-0x40,
-0xa2,
-0x08,
-0x8d,
-0x0c,
-0xc0,
-0x8e,
-0x0d,
-0xc0,
-0xa5,
-0xb4,
-0xf0,
-0x17,
-0x49,
-0x03,
-0x5a,
-0x48,
-0xa5,
-0xb9,
-0x49,
-0x3c,
-0x18,
-0x69,
-0x13,
-0x85,
-0xe2,
-0x98,
-0x69,
-0x61,
-0x85,
-0xe3,
-0xfa,
-0x68,
-0x20,
-0xaf,
-0x3e,
-0x38,
-0xa9,
-0x13,
-0xe5,
-0xb5,
-0xf0,
-0x24,
-0x49,
-0x03,
-0x5a,
-0x48,
-0xa5,
-0xb9,
-0x49,
-0x3c,
-0x18,
-0x69,
-0x13,
-0x85,
-0xe2,
-0x98,
-0x69,
-0x61,
-0x85,
-0xe3,
-0xa5,
-0xb5,
-0x1a,
-0x49,
-0x03,
-0x65,
-0xe2,
-0x85,
-0xe2,
-0x90,
-0x02,
-0xe6,
-0xe3,
-0xfa,
-0x68,
-0x20,
-0xaf,
-0x3e,
-0x38,
-0xa5,
-0xb5,
-0xaa,
-0xa4,
-0xb6,
-0xd0,
-0x02,
-0xa6,
-0xb4,
-0x86,
-0xdf,
-0xe5,
-0xb4,
-0x1a,
-0x85,
-0xde,
-0x64,
-0xf3,
-0xa2,
-0x00,
-0xa4,
-0xb9,
-0xb9,
-0x29,
-0x6b,
-0x85,
-0xe1,
-0xa5,
-0xc2,
-0x49,
-0x1a,
-0xa2,
-0x01,
-0xc4,
-0xe1,
-0xf0,
-0x03,
-0x90,
-0x01,
-0xca,
-0x86,
-0xee,
-0xa6,
-0x28,
-0xa4,
-0x29,
-0xa5,
-0xb6,
-0xf0,
-0x03,
-0x8a,
-0xfc,
-0xa8,
-0x86,
-0xf2,
-0x84,
-0xef,
-0xa6,
-0x26,
-0xa4,
-0x27,
-0xa5,
-0xbd,
-0xf0,
-0x03,
-0x8a,
-0xfc,
-0xa8,
-0x86,
-0xf0,
-0x84,
-0xf1,
-0xa0,
-0x10,
-0x13,
-0x54,
-0xc0,
-0xc4,
-0x00,
-0xa4,
-0xdf,
-0xa2,
-0x00,
-0xa5,
-0xa8,
-0xf0,
-0x0f,
-0xa5,
-0xee,
-0xf0,
-0x0b,
-0xc4,
-0x28,
-0x90,
-0x07,
-0xc4,
-0x29,
-0xf0,
-0x02,
-0xb0,
-0x01,
-0xe8,
-0x86,
-0x97,
-0xb9,
-0x15,
-0x6b,
-0x85,
-0xe2,
-0xaa,
-0x45,
-0xe1,
-0x84,
-0x9a,
-0x49,
-0x20,
-0x85,
-0x98,
-0x84,
-0x99,
-0xa5,
-0x9a,
-0x49,
-0x20,
-0x18,
-0x65,
-0x99,
-0x85,
-0x99,
-0x98,
-0x69,
-0x00,
-0x85,
-0x9a,
-0x38,
-0xa5,
-0xc4,
-0xe5,
-0x98,
-0x85,
-0xc4,
-0xa5,
-0xc5,
-0xe5,
-0x99,
-0x85,
-0xc5,
-0xa5,
-0xc6,
-0xe5,
-0x9a,
-0x85,
-0xc6,
-0xa5,
-0xc7,
-0xe9,
-0x00,
-0x85,
-0xc7,
-0x10,
-0x08,
-0x64,
-0xc4,
-0x64,
-0xc5,
-0x64,
-0xc6,
-0x64,
-0xc7,
-0x38,
-0xa5,
-0xc8,
-0xe5,
-0x98,
-0x85,
-0xc8,
-0xa5,
-0xc9,
-0xe5,
-0x99,
-0x85,
-0xc9,
-0xa5,
-0xca,
-0xe5,
-0x9a,
-0x85,
-0xca,
-0xa5,
-0xcb,
-0xe9,
-0x00,
-0x85,
-0xcb,
-0x10,
-0x08,
-0x64,
-0xc8,
-0x64,
-0xc9,
-0x64,
-0xca,
-0x64,
-0xcb,
-0x38,
-0xa5,
-0xcc,
-0xe5,
-0x98,
-0x85,
-0xcc,
-0xa5,
-0xcd,
-0xe5,
-0x99,
-0x85,
-0xcd,
-0xa5,
-0xce,
-0xe5,
-0x9a,
-0x85,
-0xce,
-0xa5,
-0xcf,
-0xe9,
-0x00,
-0x85,
-0xcf,
-0x10,
-0x08,
-0x64,
-0xcc,
-0x64,
-0xcd,
-0x64,
-0xce,
-0x64,
-0xcf,
-0x38,
-0xa5,
-0xd0,
-0xe5,
-0x98,
-0x85,
-0xd0,
-0xa5,
-0xd1,
-0xe5,
-0x99,
-0x85,
-0xd1,
-0xa5,
-0xd2,
-0xe5,
-0x9a,
-0x85,
-0xd2,
-0xa5,
-0xd3,
-0xe9,
-0x00,
-0x85,
-0xd3,
-0x10,
-0x08,
-0x64,
-0xd0,
-0x64,
-0xd1,
-0x64,
-0xd2,
-0x64,
-0xd3,
-0x8a,
-0xa6,
-0x97,
-0xf0,
-0x07,
-0xa0,
-0x10,
-0x53,
-0xc4,
-0x00,
-0x98,
-0x00,
-0xa5,
-0xe1,
-0x45,
-0xe2,
-0x20,
-0x3b,
-0x3c,
-0x5a,
-0x20,
-0x63,
-0x3c,
-0x7a,
-0xb9,
-0x66,
-0x5c,
-0x20,
-0x78,
-0x15,
-0xa0,
-0x03,
-0x73,
-0xe6,
-0x00,
-0xd6,
-0xa5,
-0x97,
-0xd0,
-0x02,
-0x80,
-0x27,
-0xa5,
-0xdf,
-0x20,
-0xed,
-0x14,
-0xa0,
-0x05,
-0x73,
-0xe9,
-0x00,
-0xd4,
-0x84,
-0xf3,
-0xa5,
-0xd4,
-0xa6,
-0xb6,
-0xf0,
-0x0b,
-0x38,
-0xe9,
-0x05,
-0x85,
-0xd4,
-0xb0,
-0x0d,
-0xc6,
-0xd5,
-0x80,
-0x09,
-0x18,
-0x69,
-0x05,
-0x85,
-0xd4,
-0x90,
-0x02,
-0xe6,
-0xd5,
-0xa5,
-0xd6,
-0xa6,
-0xb6,
-0xf0,
-0x0b,
-0x38,
-0xe9,
-0x03,
-0x85,
-0xd6,
-0xb0,
-0x0d,
-0xc6,
-0xd7,
-0x80,
-0x09,
-0x18,
-0x69,
-0x03,
-0x85,
-0xd6,
-0x90,
-0x02,
-0xe6,
-0xd7,
-0xc6,
-0xde,
-0xf0,
-0x0e,
-0xa5,
-0xb6,
-0xf0,
-0x05,
-0xc6,
-0xdf,
-0x4c,
-0x16,
-0x3d,
-0xe6,
-0xdf,
-0x4c,
-0x16,
-0x3d,
-0xa5,
-0xb7,
-0xa6,
-0xbd,
-0xf0,
-0x0b,
-0x38,
-0xe9,
-0x3c,
-0x85,
-0xb7,
-0xb0,
-0x0d,
-0xc6,
-0xb8,
-0x80,
-0x09,
-0x18,
-0x69,
-0x3c,
-0x85,
-0xb7,
-0x90,
-0x02,
-0xe6,
-0xb8,
-0xa6,
-0xb9,
-0xe4,
-0xf1,
-0xd0,
-0x02,
-0x64,
-0xa8,
-0xa5,
-0xee,
-0xf0,
-0x1a,
-0xa5,
-0xbb,
-0xa6,
-0xbd,
-0xf0,
-0x0b,
-0x38,
-0xe9,
-0x64,
-0x85,
-0xbb,
-0xb0,
-0x0d,
-0xc6,
-0xbc,
-0x80,
-0x09,
-0x18,
-0x69,
-0x64,
-0x85,
-0xbb,
-0x90,
-0x02,
-0xe6,
-0xbc,
-0xa5,
-0xf3,
-0xf0,
-0x02,
-0xe6,
-0x24,
-0xa6,
-0xbd,
-0xf0,
-0x04,
-0xc6,
-0xb9,
-0x80,
-0x02,
-0xe6,
-0xb9,
-0xfa,
-0x60,
-0x64,
-0xde,
-0xda,
-0xaa,
-0xf0,
-0x0b,
-0xa0,
-0x00,
-0x33,
-0xde,
-0x00,
-0xe2,
-0xe6,
-0xe3,
-0x3a,
-0xd0,
-0xf7,
-0x7a,
-0xf0,
-0x04,
-0x33,
-0xde,
-0x00,
-0xe2,
-0x60,
-0xba,
-0x08,
-0x78,
-0x68,
-0x48,
-0x29,
-0x1c,
-0x85,
-0xf6,
-0x86,
-0xf4,
-0xa9,
-0x01,
-0x85,
-0xf5,
-0xa0,
-0x06,
-0xb1,
-0xf4,
-0x48,
-0x29,
-0x1c,
-0xc5,
-0xf6,
-0x90,
-0x08,
-0x7a,
-0xa0,
-0x09,
-0xb1,
-0xf4,
-0x48,
-0x29,
-0x1c,
-0xc9,
-0x00,
-0xd0,
-0x38,
-0xa0,
-0x03,
-0xb1,
-0xf4,
-0xe0,
-0x7f,
-0xb0,
-0x18,
-0x8d,
-0x1e,
-0x83,
-0xc8,
-0xb1,
-0xf4,
-0x8d,
-0x1f,
-0x83,
-0xc8,
-0xb1,
-0xf4,
-0x8d,
-0x20,
-0x83,
-0x8a,
-0x18,
-0x69,
-0x05,
-0x8d,
-0x21,
-0x83,
-0x80,
-0x16,
-0x8d,
-0x22,
-0x83,
-0xc8,
-0xb1,
-0xf4,
-0x8d,
-0x23,
-0x83,
-0xc8,
-0xb1,
-0xf4,
-0x8d,
-0x24,
-0x83,
-0x8a,
-0x18,
-0x69,
-0x05,
-0x8d,
-0x25,
-0x83,
-0xa9,
-0x00,
-0xfa,
-0x28,
-0xf8,
-0x60,
-0x68,
-0xf0,
-0x04,
-0x68,
-0xfa,
-0x7a,
-0x40,
-0x08,
-0x78,
-0x68,
-0xad,
-0x1d,
-0x83,
-0xf0,
-0x0e,
-0xae,
-0x21,
-0x83,
-0x9a,
-0xad,
-0x1e,
-0x83,
-0xae,
-0x1f,
-0x83,
-0xac,
-0x20,
-0x83,
-0x40,
-0xae,
-0x25,
-0x83,
-0x9a,
-0xad,
-0x22,
-0x83,
-0xae,
-0x23,
-0x83,
-0xac,
-0x24,
-0x83,
-0x40,
-0x08,
-0x78,
-0xad,
-0x1d,
-0x83,
-0xd0,
-0x1f,
-0x1a,
-0x8d,
-0x1d,
-0x83,
-0xa9,
-0x7c,
-0x8d,
-0x21,
-0x83,
-0x9c,
-0x1e,
-0x83,
-0x9c,
-0x1f,
-0x83,
-0x9c,
-0x20,
-0x83,
-0xa9,
-0x07,
-0x8d,
-0x7f,
-0x01,
-0xa9,
-0x23,
-0x8d,
-0x7e,
-0x01,
-0x9c,
-0x7d,
-0x01,
-0x28,
-0x60,
-0x08,
-0x78,
-0xa9,
-0x0e,
-0x8d,
-0xfe,
-0x01,
-0xa9,
-0x18,
-0x8d,
-0xfd,
-0x01,
-0xad,
-0xb2,
-0x6b,
-0x8d,
-0xfc,
-0x01,
-0xa9,
-0xfb,
-0x8d,
-0x25,
-0x83,
-0x9c,
-0x22,
-0x83,
-0x9c,
-0x23,
-0x83,
-0x9c,
-0x24,
-0x83,
-0x28,
-0x60,
-0x64,
-0xe2,
-0x64,
-0xe3,
-0xa9,
-0x5b,
-0x4a,
-0x85,
-0xe7,
-0xa9,
-0xfa,
-0x6a,
-0xaa,
-0x90,
-0x06,
-0xac,
-0xf9,
-0x5e,
-0x84,
-0xe2,
-0x18,
-0xa9,
-0x00,
-0x85,
-0xe4,
-0xa9,
-0x03,
-0x85,
-0xe5,
-0xa0,
-0x00,
-0xb1,
-0xe4,
-0x65,
-0xe2,
-0x85,
-0xe2,
-0xc8,
-0xb1,
-0xe4,
-0x65,
-0xe3,
-0x85,
-0xe3,
-0xca,
-0xd0,
-0x07,
-0xa5,
-0xe7,
-0xf0,
-0x0a,
-0x3a,
-0x85,
-0xe7,
-0xc8,
-0xd0,
-0xe6,
-0xe6,
-0xe5,
-0x80,
-0xe2,
-0xa5,
-0xe2,
-0x05,
-0xe3,
-0x60,
-0xe7,
-0x03,
-0x1d,
-0x06,
-0xa5,
-0x1c,
-0xd8,
-0x06,
-0x00,
-0x00,
-0x00,
-0x00,
-0x09,
-0x0e,
-0x43,
-0x6f,
-0x70,
-0x79,
-0x72,
-0x69,
-0x67,
-0x68,
-0x74,
-0x20,
-0x28,
-0x43,
-0x29,
-0x20,
-0x44,
-0x78,
-0x4f,
-0x20,
-0x4c,
-0x61,
-0x62,
-0x73,
-0x20,
-0x32,
-0x30,
-0x30,
-0x39,
-0x2d,
-0x32,
-0x30,
-0x31,
-0x32,
-0x20,
-0x2d,
-0x20,
-0x28,
-0x41,
-0x6c,
-0x6c,
-0x20,
-0x72,
-0x69,
-0x67,
-0x74,
-0x68,
-0x73,
-0x20,
-0x72,
-0x65,
-0x73,
-0x65,
-0x72,
-0x76,
-0x65,
-0x64,
-0x29,
-0x00,
-0x80,
-0x80,
-0x80,
-0x80,
-0x00,
-0x04,
-0x08,
-0x0d,
-0x11,
-0x15,
-0x1a,
-0x1e,
-0x23,
-0x27,
-0x00,
-0x04,
-0x09,
-0x0d,
-0x12,
-0x17,
-0x1b,
-0x00,
-0x01,
-0x02,
-0x00,
-0x02,
-0x01,
-0x01,
-0x00,
-0x02,
-0x00,
-0x01,
-0x02,
-0x02,
-0x01,
-0x00,
-0x02,
-0x00,
-0x01,
-0x01,
-0x02,
-0x00,
-0x01,
-0x02,
-0x04,
-0x08,
-0x10,
-0x20,
-0x40,
-0x80,
-0x0e,
-0x1a,
-0xa7,
-0x19,
-0x6a,
-0x19,
-0x45,
-0x19,
-0x20,
-0x19,
-0xfb,
-0x18,
-0xd6,
-0x18,
-0x99,
-0x18,
-0x4c,
-0x18,
-0xf3,
-0x17,
-0x9e,
-0x17,
-0x51,
-0x17,
-0xea,
-0x16,
-0x91,
-0x16,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x7f,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x7f,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x8e,
-0x73,
-0x8e,
-0x73,
-0x4f,
-0xb2,
-0x4f,
-0xe5,
-0x1c,
-0xe3,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x9b,
-0x66,
-0x9b,
-0x66,
-0x24,
-0xdd,
-0x24,
-0x2d,
-0xd4,
-0x95,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0xa7,
-0x5a,
-0xa7,
-0x5a,
-0xfe,
-0x03,
-0xfe,
-0x5d,
-0xa4,
-0x81,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0xb4,
-0x4d,
-0xb4,
-0x4d,
-0xdd,
-0x24,
-0xdd,
-0x78,
-0x89,
-0x95,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0xc1,
-0x40,
-0xc1,
-0x40,
-0xc1,
-0x40,
-0xc1,
-0x7f,
-0x81,
-0xc1,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0xce,
-0x33,
-0xce,
-0x33,
-0xaa,
-0x57,
-0xaa,
-0x79,
-0x88,
-0xf7,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0xdb,
-0x26,
-0xdb,
-0x26,
-0x98,
-0x69,
-0x98,
-0x65,
-0x9c,
-0x2c,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0xe7,
-0x1a,
-0xe7,
-0x1a,
-0x8b,
-0x76,
-0x8b,
-0x49,
-0xb8,
-0x59,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0xf4,
-0x0d,
-0xf4,
-0x0d,
-0x84,
-0x7d,
-0x84,
-0x26,
-0xdb,
-0x76,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x7f,
-0x81,
-0x00,
-0x00,
-0x7f,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x0d,
-0xf4,
-0x0d,
-0xf4,
-0x84,
-0x7d,
-0x84,
-0xdb,
-0x26,
-0x76,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x1a,
-0xe7,
-0x1a,
-0xe7,
-0x8b,
-0x76,
-0x8b,
-0xb8,
-0x49,
-0x59,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x26,
-0xdb,
-0x26,
-0xdb,
-0x98,
-0x69,
-0x98,
-0x9c,
-0x65,
-0x2c,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x33,
-0xce,
-0x33,
-0xce,
-0xaa,
-0x57,
-0xaa,
-0x88,
-0x79,
-0xf7,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x40,
-0xc1,
-0x40,
-0xc1,
-0xc1,
-0x40,
-0xc1,
-0x81,
-0x7f,
-0xc1,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x4d,
-0xb4,
-0x4d,
-0xb4,
-0xdd,
-0x24,
-0xdd,
-0x89,
-0x78,
-0x95,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x5a,
-0xa7,
-0x5a,
-0xa7,
-0xfe,
-0x03,
-0xfe,
-0xa4,
-0x5d,
-0x81,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x66,
-0x9b,
-0x66,
-0x9b,
-0x24,
-0xdd,
-0x24,
-0xd4,
-0x2d,
-0x95,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x73,
-0x8e,
-0x73,
-0x8e,
-0x4f,
-0xb2,
-0x4f,
-0x1c,
-0xe5,
-0xe3,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x7f,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x81,
-0x7f,
-0x7f,
-0x81,
-0x7f,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x81,
-0x70,
-0xbd,
-0x07,
-0x7f,
-0x91,
-0x44,
-0x81,
-0x70,
-0x7f,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x8e,
-0x65,
-0xc4,
-0x06,
-0x4f,
-0xbc,
-0x2a,
-0xe5,
-0x18,
-0xe3,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x9b,
-0x5a,
-0xcb,
-0x06,
-0x24,
-0xe2,
-0x13,
-0x2d,
-0xda,
-0x95,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0xa7,
-0x4e,
-0xd1,
-0x05,
-0xfe,
-0x02,
-0x00,
-0x5d,
-0xaf,
-0x81,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0xb4,
-0x43,
-0xd8,
-0x04,
-0xdd,
-0x1f,
-0xee,
-0x78,
-0x98,
-0x95,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0xc1,
-0x38,
-0xdf,
-0x04,
-0xc1,
-0x38,
-0xdf,
-0x7f,
-0x91,
-0xc1,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0xce,
-0x2d,
-0xe6,
-0x03,
-0xaa,
-0x4c,
-0xd3,
-0x79,
-0x97,
-0xf7,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0xdb,
-0x22,
-0xed,
-0x02,
-0x98,
-0x5c,
-0xc9,
-0x65,
-0xa8,
-0x2c,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0xe7,
-0x16,
-0xf3,
-0x01,
-0x8b,
-0x67,
-0xc2,
-0x49,
-0xc1,
-0x59,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0xf4,
-0x0b,
-0xfa,
-0x01,
-0x84,
-0x6e,
-0xbe,
-0x26,
-0xe0,
-0x76,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x70,
-0xbd,
-0x00,
-0x00,
-0x7f,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x0d,
-0xf6,
-0x07,
-0x00,
-0x84,
-0x6e,
-0xbe,
-0xdb,
-0x21,
-0x76,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x1a,
-0xeb,
-0x0e,
-0x00,
-0x8b,
-0x67,
-0xc2,
-0xb8,
-0x40,
-0x59,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x26,
-0xdf,
-0x14,
-0xff,
-0x98,
-0x5c,
-0xc9,
-0x9c,
-0x59,
-0x2c,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x33,
-0xd4,
-0x1b,
-0xfe,
-0xaa,
-0x4c,
-0xd3,
-0x88,
-0x6a,
-0xf7,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x40,
-0xc9,
-0x22,
-0xfd,
-0xc1,
-0x38,
-0xdf,
-0x81,
-0x70,
-0xc1,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x4d,
-0xbe,
-0x29,
-0xfd,
-0xdd,
-0x1f,
-0xee,
-0x89,
-0x69,
-0x95,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x5a,
-0xb3,
-0x30,
-0xfc,
-0xfe,
-0x02,
-0x00,
-0xa4,
-0x52,
-0x81,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x66,
-0xa7,
-0x36,
-0xfb,
-0x24,
-0xe2,
-0x13,
-0xd4,
-0x27,
-0x95,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x73,
-0x9c,
-0x3d,
-0xfb,
-0x4f,
-0xbc,
-0x2a,
-0x1c,
-0xe9,
-0xe3,
-0x91,
-0x44,
-0xfa,
-0xc9,
-0x7f,
-0x91,
-0x44,
-0xfa,
-0x7f,
-0x91,
-0x44,
-0x7f,
-0x91,
-0x7f,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x81,
-0x60,
-0xf1,
-0xb9,
-0x7f,
-0xa1,
-0x10,
-0x81,
-0x60,
-0x7f,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x8e,
-0x56,
-0xf3,
-0xc0,
-0x4f,
-0xc5,
-0x0a,
-0xe5,
-0x15,
-0xe3,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x9b,
-0x4d,
-0xf4,
-0xc7,
-0x24,
-0xe6,
-0x04,
-0x2d,
-0xdf,
-0x95,
-0xa1,
-0x10,
-0x48,
-0x85,
-0xa7,
-0x43,
-0xf6,
-0xcf,
-0xfe,
-0x02,
-0x00,
-0x5d,
-0xbb,
-0x81,
-0xa1,
-0x10,
-0x48,
-0x85,
-0xb4,
-0x3a,
-0xf7,
-0xd6,
-0xdd,
-0x1b,
-0xfd,
-0x78,
-0xa7,
-0x95,
-0xa1,
-0x10,
-0x48,
-0x85,
-0xc1,
-0x30,
-0xf9,
-0xdd,
-0xc1,
-0x30,
-0xf9,
-0x7f,
-0xa1,
-0xc1,
-0xa1,
-0x10,
-0x48,
-0x85,
-0xce,
-0x26,
-0xfb,
-0xe4,
-0xaa,
-0x41,
-0xf6,
-0x79,
-0xa6,
-0xf7,
-0xa1,
-0x10,
-0x48,
-0x85,
-0xdb,
-0x1d,
-0xfc,
-0xeb,
-0x98,
-0x4f,
-0xf4,
-0x65,
-0xb5,
-0x2c,
-0xa1,
-0x10,
-0x48,
-0x85,
-0xe7,
-0x13,
-0xfe,
-0xf3,
-0x8b,
-0x58,
-0xf2,
-0x49,
-0xca,
-0x59,
-0xa1,
-0x10,
-0x48,
-0x85,
-0xf4,
-0x0a,
-0xff,
-0xfa,
-0x84,
-0x5e,
-0xf1,
-0x26,
-0xe5,
-0x76,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x60,
-0xf1,
-0x00,
-0x00,
-0x7f,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x0d,
-0xf7,
-0x02,
-0x07,
-0x84,
-0x5e,
-0xf1,
-0xdb,
-0x1c,
-0x76,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x1a,
-0xee,
-0x03,
-0x0e,
-0x8b,
-0x58,
-0xf2,
-0xb8,
-0x37,
-0x59,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x26,
-0xe4,
-0x05,
-0x16,
-0x98,
-0x4f,
-0xf4,
-0x9c,
-0x4c,
-0x2c,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x33,
-0xdb,
-0x06,
-0x1d,
-0xaa,
-0x41,
-0xf6,
-0x88,
-0x5b,
-0xf7,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x40,
-0xd1,
-0x08,
-0x24,
-0xc1,
-0x30,
-0xf9,
-0x81,
-0x60,
-0xc1,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x4d,
-0xc7,
-0x0a,
-0x2b,
-0xdd,
-0x1b,
-0xfd,
-0x89,
-0x5a,
-0x95,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x5a,
-0xbe,
-0x0b,
-0x32,
-0xfe,
-0x02,
-0x00,
-0xa4,
-0x46,
-0x81,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x66,
-0xb4,
-0x0d,
-0x3a,
-0x24,
-0xe6,
-0x04,
-0xd4,
-0x22,
-0x95,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x73,
-0xab,
-0x0e,
-0x41,
-0x4f,
-0xc5,
-0x0a,
-0x1c,
-0xec,
-0xe3,
-0xa1,
-0x10,
-0x48,
-0x85,
-0x7f,
-0xa1,
-0x10,
-0x48,
-0x7f,
-0xa1,
-0x10,
-0x7f,
-0xa1,
-0x7f,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x81,
-0x50,
-0x1c,
-0x8e,
-0x7f,
-0xb1,
-0xe5,
-0x81,
-0x50,
-0x7f,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x8e,
-0x48,
-0x19,
-0x9a,
-0x4f,
-0xcf,
-0xf0,
-0xe5,
-0x11,
-0xe3,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x9b,
-0x40,
-0x16,
-0xa5,
-0x24,
-0xeb,
-0xf9,
-0x2d,
-0xe5,
-0x95,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0xa7,
-0x38,
-0x14,
-0xb0,
-0xfe,
-0x02,
-0x01,
-0x5d,
-0xc7,
-0x81,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0xb4,
-0x30,
-0x11,
-0xbc,
-0xdd,
-0x16,
-0x08,
-0x78,
-0xb6,
-0x95,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0xc1,
-0x28,
-0x0e,
-0xc7,
-0xc1,
-0x28,
-0x0e,
-0x7f,
-0xb1,
-0xc1,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0xce,
-0x20,
-0x0b,
-0xd3,
-0xaa,
-0x36,
-0x13,
-0x79,
-0xb5,
-0xf7,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0xdb,
-0x18,
-0x08,
-0xdf,
-0x98,
-0x42,
-0x17,
-0x65,
-0xc2,
-0x2c,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0xe7,
-0x10,
-0x06,
-0xea,
-0x8b,
-0x4a,
-0x1a,
-0x49,
-0xd4,
-0x59,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0xf4,
-0x08,
-0x03,
-0xf6,
-0x84,
-0x4e,
-0x1b,
-0x26,
-0xe9,
-0x76,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x50,
-0x1c,
-0x00,
-0x00,
-0x7f,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x0d,
-0xf9,
-0xfe,
-0x0c,
-0x84,
-0x4e,
-0x1b,
-0xdb,
-0x18,
-0x76,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x1a,
-0xf1,
-0xfb,
-0x17,
-0x8b,
-0x4a,
-0x1a,
-0xb8,
-0x2d,
-0x59,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x26,
-0xe9,
-0xf9,
-0x23,
-0x98,
-0x42,
-0x17,
-0x9c,
-0x3f,
-0x2c,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x33,
-0xe1,
-0xf6,
-0x2e,
-0xaa,
-0x36,
-0x13,
-0x88,
-0x4c,
-0xf7,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x40,
-0xd9,
-0xf3,
-0x3a,
-0xc1,
-0x28,
-0x0e,
-0x81,
-0x50,
-0xc1,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x4d,
-0xd1,
-0xf0,
-0x45,
-0xdd,
-0x16,
-0x08,
-0x89,
-0x4b,
-0x95,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x5a,
-0xc9,
-0xed,
-0x50,
-0xfe,
-0x02,
-0x01,
-0xa4,
-0x3a,
-0x81,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x66,
-0xc1,
-0xeb,
-0x5c,
-0x24,
-0xeb,
-0xf9,
-0xd4,
-0x1c,
-0x95,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x73,
-0xb9,
-0xe8,
-0x67,
-0x4f,
-0xcf,
-0xf0,
-0x1c,
-0xf0,
-0xe3,
-0xb1,
-0xe5,
-0x73,
-0x8d,
-0x7f,
-0xb1,
-0xe5,
-0x73,
-0x7f,
-0xb1,
-0xe5,
-0x7f,
-0xb1,
-0x7f,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x81,
-0x40,
-0x40,
-0x81,
-0x7f,
-0xc1,
-0xc1,
-0x81,
-0x40,
-0x7f,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x8e,
-0x3a,
-0x3a,
-0x8e,
-0x4f,
-0xd9,
-0xd9,
-0xe5,
-0x0e,
-0xe3,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x9b,
-0x33,
-0x33,
-0x9b,
-0x24,
-0xef,
-0xef,
-0x2d,
-0xea,
-0x95,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0xa7,
-0x2d,
-0x2d,
-0xa7,
-0xfe,
-0x01,
-0x01,
-0x5d,
-0xd2,
-0x81,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0xb4,
-0x26,
-0x26,
-0xb4,
-0xdd,
-0x12,
-0x12,
-0x78,
-0xc5,
-0x95,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0xc1,
-0x20,
-0x20,
-0xc1,
-0xc1,
-0x20,
-0x20,
-0x7f,
-0xc1,
-0xc1,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0xce,
-0x1a,
-0x1a,
-0xce,
-0xaa,
-0x2c,
-0x2c,
-0x79,
-0xc5,
-0xf7,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0xdb,
-0x13,
-0x13,
-0xdb,
-0x98,
-0x34,
-0x34,
-0x65,
-0xce,
-0x2c,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0xe7,
-0x0d,
-0x0d,
-0xe7,
-0x8b,
-0x3b,
-0x3b,
-0x49,
-0xdd,
-0x59,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0xf4,
-0x06,
-0x06,
-0xf4,
-0x84,
-0x3f,
-0x3f,
-0x26,
-0xee,
-0x76,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x40,
-0x40,
-0x00,
-0x00,
-0x7f,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x0d,
-0xfb,
-0xfb,
-0x0d,
-0x84,
-0x3f,
-0x3f,
-0xdb,
-0x13,
-0x76,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x1a,
-0xf4,
-0xf4,
-0x1a,
-0x8b,
-0x3b,
-0x3b,
-0xb8,
-0x24,
-0x59,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x26,
-0xee,
-0xee,
-0x26,
-0x98,
-0x34,
-0x34,
-0x9c,
-0x33,
-0x2c,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x33,
-0xe7,
-0xe7,
-0x33,
-0xaa,
-0x2c,
-0x2c,
-0x88,
-0x3c,
-0xf7,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x40,
-0xe1,
-0xe1,
-0x40,
-0xc1,
-0x20,
-0x20,
-0x81,
-0x40,
-0xc1,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x4d,
-0xdb,
-0xdb,
-0x4d,
-0xdd,
-0x12,
-0x12,
-0x89,
-0x3c,
-0x95,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x5a,
-0xd4,
-0xd4,
-0x5a,
-0xfe,
-0x01,
-0x01,
-0xa4,
-0x2f,
-0x81,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x66,
-0xce,
-0xce,
-0x66,
-0x24,
-0xef,
-0xef,
-0xd4,
-0x17,
-0x95,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x73,
-0xc7,
-0xc7,
-0x73,
-0x4f,
-0xd9,
-0xd9,
-0x1c,
-0xf3,
-0xe3,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x7f,
-0xc1,
-0xc1,
-0x7f,
-0x7f,
-0xc1,
-0xc1,
-0x7f,
-0xc1,
-0x7f,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x81,
-0x30,
-0x5c,
-0x8c,
-0x7f,
-0xd1,
-0xa5,
-0x81,
-0x30,
-0x7f,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x8e,
-0x2b,
-0x53,
-0x98,
-0x4f,
-0xe3,
-0xc8,
-0xe5,
-0x0a,
-0xe3,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x9b,
-0x26,
-0x4a,
-0xa3,
-0x24,
-0xf4,
-0xe7,
-0x2d,
-0xf0,
-0x95,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0xa7,
-0x22,
-0x40,
-0xaf,
-0xfe,
-0x01,
-0x02,
-0x5d,
-0xde,
-0x81,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0xb4,
-0x1d,
-0x37,
-0xbb,
-0xdd,
-0x0d,
-0x1a,
-0x78,
-0xd4,
-0x95,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0xc1,
-0x18,
-0x2e,
-0xc6,
-0xc1,
-0x18,
-0x2e,
-0x7f,
-0xd1,
-0xc1,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0xce,
-0x13,
-0x25,
-0xd2,
-0xaa,
-0x21,
-0x3f,
-0x79,
-0xd4,
-0xf7,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0xdb,
-0x0e,
-0x1c,
-0xde,
-0x98,
-0x27,
-0x4b,
-0x65,
-0xdb,
-0x2c,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0xe7,
-0x0a,
-0x12,
-0xea,
-0x8b,
-0x2c,
-0x55,
-0x49,
-0xe6,
-0x59,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0xf4,
-0x05,
-0x09,
-0xf5,
-0x84,
-0x2f,
-0x5a,
-0x26,
-0xf3,
-0x76,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x30,
-0x5c,
-0x00,
-0x00,
-0x7f,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x0d,
-0xfc,
-0xf8,
-0x0c,
-0x84,
-0x2f,
-0x5a,
-0xdb,
-0x0e,
-0x76,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x1a,
-0xf7,
-0xef,
-0x17,
-0x8b,
-0x2c,
-0x55,
-0xb8,
-0x1b,
-0x59,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x26,
-0xf3,
-0xe5,
-0x23,
-0x98,
-0x27,
-0x4b,
-0x9c,
-0x26,
-0x2c,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x33,
-0xee,
-0xdc,
-0x2f,
-0xaa,
-0x21,
-0x3f,
-0x88,
-0x2d,
-0xf7,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x40,
-0xe9,
-0xd3,
-0x3b,
-0xc1,
-0x18,
-0x2e,
-0x81,
-0x30,
-0xc1,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x4d,
-0xe4,
-0xca,
-0x46,
-0xdd,
-0x0d,
-0x1a,
-0x89,
-0x2d,
-0x95,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x5a,
-0xdf,
-0xc1,
-0x52,
-0xfe,
-0x01,
-0x02,
-0xa4,
-0x23,
-0x81,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x66,
-0xdb,
-0xb7,
-0x5e,
-0x24,
-0xf4,
-0xe7,
-0xd4,
-0x11,
-0x95,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x73,
-0xd6,
-0xae,
-0x69,
-0x4f,
-0xe3,
-0xc8,
-0x1c,
-0xf7,
-0xe3,
-0xd1,
-0xa5,
-0x75,
-0x04,
-0x7f,
-0xd1,
-0xa5,
-0x75,
-0x7f,
-0xd1,
-0xa5,
-0x7f,
-0xd1,
-0x7f,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x81,
-0x20,
-0x70,
-0xa9,
-0x7f,
-0xe1,
-0x91,
-0x81,
-0x20,
-0x7f,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x8e,
-0x1d,
-0x65,
-0xb2,
-0x4f,
-0xed,
-0xbc,
-0xe5,
-0x07,
-0xe3,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x9b,
-0x1a,
-0x5a,
-0xbb,
-0x24,
-0xf8,
-0xe2,
-0x2d,
-0xf6,
-0x95,
-0xe1,
-0x91,
-0x58,
-0x44,
-0xa7,
-0x16,
-0x4e,
-0xc3,
-0xfe,
-0x01,
-0x02,
-0x5d,
-0xea,
-0x81,
-0xe1,
-0x91,
-0x58,
-0x44,
-0xb4,
-0x13,
-0x43,
-0xcc,
-0xdd,
-0x09,
-0x1f,
-0x78,
-0xe3,
-0x95,
-0xe1,
-0x91,
-0x58,
-0x44,
-0xc1,
-0x10,
-0x38,
-0xd5,
-0xc1,
-0x10,
-0x38,
-0x7f,
-0xe1,
-0xc1,
-0xe1,
-0x91,
-0x58,
-0x44,
-0xce,
-0x0d,
-0x2d,
-0xde,
-0xaa,
-0x16,
-0x4c,
-0x79,
-0xe3,
-0xf7,
-0xe1,
-0x91,
-0x58,
-0x44,
-0xdb,
-0x0a,
-0x22,
-0xe7,
-0x98,
-0x1a,
-0x5c,
-0x65,
-0xe8,
-0x2c,
-0xe1,
-0x91,
-0x58,
-0x44,
-0xe7,
-0x06,
-0x16,
-0xef,
-0x8b,
-0x1d,
-0x67,
-0x49,
-0xef,
-0x59,
-0xe1,
-0x91,
-0x58,
-0x44,
-0xf4,
-0x03,
-0x0b,
-0xf8,
-0x84,
-0x1f,
-0x6e,
-0x26,
-0xf8,
-0x76,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x20,
-0x70,
-0x00,
-0x00,
-0x7f,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x0d,
-0xfe,
-0xf6,
-0x09,
-0x84,
-0x1f,
-0x6e,
-0xdb,
-0x09,
-0x76,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x1a,
-0xfb,
-0xeb,
-0x12,
-0x8b,
-0x1d,
-0x67,
-0xb8,
-0x12,
-0x59,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x26,
-0xf7,
-0xdf,
-0x1a,
-0x98,
-0x1a,
-0x5c,
-0x9c,
-0x19,
-0x2c,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x33,
-0xf4,
-0xd4,
-0x23,
-0xaa,
-0x16,
-0x4c,
-0x88,
-0x1e,
-0xf7,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x40,
-0xf1,
-0xc9,
-0x2c,
-0xc1,
-0x10,
-0x38,
-0x81,
-0x20,
-0xc1,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x4d,
-0xee,
-0xbe,
-0x35,
-0xdd,
-0x09,
-0x1f,
-0x89,
-0x1e,
-0x95,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x5a,
-0xeb,
-0xb3,
-0x3e,
-0xfe,
-0x01,
-0x02,
-0xa4,
-0x17,
-0x81,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x66,
-0xe7,
-0xa7,
-0x46,
-0x24,
-0xf8,
-0xe2,
-0xd4,
-0x0b,
-0x95,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x73,
-0xe4,
-0x9c,
-0x4f,
-0x4f,
-0xed,
-0xbc,
-0x1c,
-0xfa,
-0xe3,
-0xe1,
-0x91,
-0x58,
-0x44,
-0x7f,
-0xe1,
-0x91,
-0x58,
-0x7f,
-0xe1,
-0x91,
-0x7f,
-0xe1,
-0x7f,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x81,
-0x10,
-0x7c,
-0xd2,
-0x7f,
-0xf1,
-0x85,
-0x81,
-0x10,
-0x7f,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x8e,
-0x0e,
-0x70,
-0xd7,
-0x4f,
-0xf7,
-0xb4,
-0xe5,
-0x03,
-0xe3,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x9b,
-0x0d,
-0x63,
-0xdb,
-0x24,
-0xfd,
-0xde,
-0x2d,
-0xfb,
-0x95,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0xa7,
-0x0b,
-0x57,
-0xe0,
-0xfe,
-0x00,
-0x02,
-0x5d,
-0xf5,
-0x81,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0xb4,
-0x0a,
-0x4a,
-0xe5,
-0xdd,
-0x04,
-0x23,
-0x78,
-0xf2,
-0x95,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0xc1,
-0x08,
-0x3e,
-0xe9,
-0xc1,
-0x08,
-0x3e,
-0x7f,
-0xf1,
-0xc1,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0xce,
-0x06,
-0x32,
-0xee,
-0xaa,
-0x0b,
-0x54,
-0x79,
-0xf2,
-0xf7,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0xdb,
-0x05,
-0x25,
-0xf3,
-0x98,
-0x0d,
-0x66,
-0x65,
-0xf4,
-0x2c,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0xe7,
-0x03,
-0x19,
-0xf8,
-0x8b,
-0x0f,
-0x72,
-0x49,
-0xf8,
-0x59,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0xf4,
-0x02,
-0x0c,
-0xfc,
-0x84,
-0x10,
-0x7a,
-0x26,
-0xfc,
-0x76,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x10,
-0x7c,
-0x00,
-0x00,
-0x7f,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x0d,
-0xff,
-0xf5,
-0x05,
-0x84,
-0x10,
-0x7a,
-0xdb,
-0x05,
-0x76,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x1a,
-0xfe,
-0xe8,
-0x09,
-0x8b,
-0x0f,
-0x72,
-0xb8,
-0x09,
-0x59,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x26,
-0xfc,
-0xdc,
-0x0e,
-0x98,
-0x0d,
-0x66,
-0x9c,
-0x0d,
-0x2c,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x33,
-0xfb,
-0xcf,
-0x13,
-0xaa,
-0x0b,
-0x54,
-0x88,
-0x0f,
-0xf7,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x40,
-0xf9,
-0xc3,
-0x18,
-0xc1,
-0x08,
-0x3e,
-0x81,
-0x10,
-0xc1,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x4d,
-0xf7,
-0xb7,
-0x1c,
-0xdd,
-0x04,
-0x23,
-0x89,
-0x0f,
-0x95,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x5a,
-0xf6,
-0xaa,
-0x21,
-0xfe,
-0x00,
-0x02,
-0xa4,
-0x0c,
-0x81,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x66,
-0xf4,
-0x9e,
-0x26,
-0x24,
-0xfd,
-0xde,
-0xd4,
-0x06,
-0x95,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x73,
-0xf3,
-0x91,
-0x2a,
-0x4f,
-0xf7,
-0xb4,
-0x1c,
-0xfe,
-0xe3,
-0xf1,
-0x85,
-0x2f,
-0x70,
-0x7f,
-0xf1,
-0x85,
-0x2f,
-0x7f,
-0xf1,
-0x85,
-0x7f,
-0xf1,
-0x7f,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x81,
-0x00,
-0x7f,
-0x00,
-0x7f,
-0x00,
-0x81,
-0x81,
-0x00,
-0x7f,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x8e,
-0x00,
-0x73,
-0x00,
-0x4f,
-0x00,
-0xb2,
-0xe5,
-0x00,
-0xe3,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x9b,
-0x00,
-0x66,
-0x00,
-0x24,
-0x00,
-0xdd,
-0x2d,
-0x00,
-0x95,
-0x00,
-0x81,
-0x00,
-0x7f,
-0xa7,
-0x00,
-0x5a,
-0x00,
-0xfe,
-0x00,
-0x03,
-0x5d,
-0x00,
-0x81,
-0x00,
-0x81,
-0x00,
-0x7f,
-0xb4,
-0x00,
-0x4d,
-0x00,
-0xdd,
-0x00,
-0x24,
-0x78,
-0x00,
-0x95,
-0x00,
-0x81,
-0x00,
-0x7f,
-0xc1,
-0x00,
-0x40,
-0x00,
-0xc1,
-0x00,
-0x40,
-0x7f,
-0x00,
-0xc1,
-0x00,
-0x81,
-0x00,
-0x7f,
-0xce,
-0x00,
-0x33,
-0x00,
-0xaa,
-0x00,
-0x57,
-0x79,
-0x00,
-0xf7,
-0x00,
-0x81,
-0x00,
-0x7f,
-0xdb,
-0x00,
-0x26,
-0x00,
-0x98,
-0x00,
-0x69,
-0x65,
-0x00,
-0x2c,
-0x00,
-0x81,
-0x00,
-0x7f,
-0xe7,
-0x00,
-0x1a,
-0x00,
-0x8b,
-0x00,
-0x76,
-0x49,
-0x00,
-0x59,
-0x00,
-0x81,
-0x00,
-0x7f,
-0xf4,
-0x00,
-0x0d,
-0x00,
-0x84,
-0x00,
-0x7d,
-0x26,
-0x00,
-0x76,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x00,
-0x00,
-0x7f,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x0d,
-0x00,
-0xf4,
-0x00,
-0x84,
-0x00,
-0x7d,
-0xdb,
-0x00,
-0x76,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x1a,
-0x00,
-0xe7,
-0x00,
-0x8b,
-0x00,
-0x76,
-0xb8,
-0x00,
-0x59,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x26,
-0x00,
-0xdb,
-0x00,
-0x98,
-0x00,
-0x69,
-0x9c,
-0x00,
-0x2c,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x33,
-0x00,
-0xce,
-0x00,
-0xaa,
-0x00,
-0x57,
-0x88,
-0x00,
-0xf7,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x40,
-0x00,
-0xc1,
-0x00,
-0xc1,
-0x00,
-0x40,
-0x81,
-0x00,
-0xc1,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x4d,
-0x00,
-0xb4,
-0x00,
-0xdd,
-0x00,
-0x24,
-0x89,
-0x00,
-0x95,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x5a,
-0x00,
-0xa7,
-0x00,
-0xfe,
-0x00,
-0x03,
-0xa4,
-0x00,
-0x81,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x66,
-0x00,
-0x9b,
-0x00,
-0x24,
-0x00,
-0xdd,
-0xd4,
-0x00,
-0x95,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x73,
-0x00,
-0x8e,
-0x00,
-0x4f,
-0x00,
-0xb2,
-0x1c,
-0x00,
-0xe3,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x7f,
-0x00,
-0x81,
-0x00,
-0x7f,
-0x00,
-0x81,
-0x7f,
-0x00,
-0x7f,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x81,
-0xf1,
-0x7c,
-0x2f,
-0x7f,
-0x10,
-0x85,
-0x81,
-0xf1,
-0x7f,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x8e,
-0xf3,
-0x70,
-0x2a,
-0x4f,
-0x0a,
-0xb4,
-0xe5,
-0xfe,
-0xe3,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x9b,
-0xf4,
-0x63,
-0x26,
-0x24,
-0x04,
-0xde,
-0x2d,
-0x06,
-0x95,
-0x10,
-0x85,
-0xd2,
-0x70,
-0xa7,
-0xf6,
-0x57,
-0x21,
-0xfe,
-0x00,
-0x02,
-0x5d,
-0x0c,
-0x81,
-0x10,
-0x85,
-0xd2,
-0x70,
-0xb4,
-0xf7,
-0x4a,
-0x1c,
-0xdd,
-0xfd,
-0x23,
-0x78,
-0x0f,
-0x95,
-0x10,
-0x85,
-0xd2,
-0x70,
-0xc1,
-0xf9,
-0x3e,
-0x17,
-0xc1,
-0xf9,
-0x3e,
-0x7f,
-0x10,
-0xc1,
-0x10,
-0x85,
-0xd2,
-0x70,
-0xce,
-0xfb,
-0x32,
-0x13,
-0xaa,
-0xf6,
-0x54,
-0x79,
-0x0f,
-0xf7,
-0x10,
-0x85,
-0xd2,
-0x70,
-0xdb,
-0xfc,
-0x25,
-0x0e,
-0x98,
-0xf4,
-0x66,
-0x65,
-0x0d,
-0x2c,
-0x10,
-0x85,
-0xd2,
-0x70,
-0xe7,
-0xfe,
-0x19,
-0x09,
-0x8b,
-0xf2,
-0x72,
-0x49,
-0x09,
-0x59,
-0x10,
-0x85,
-0xd2,
-0x70,
-0xf4,
-0xff,
-0x0c,
-0x05,
-0x84,
-0xf1,
-0x7a,
-0x26,
-0x05,
-0x76,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0xf1,
-0x7c,
-0x00,
-0x00,
-0x7f,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x0d,
-0x02,
-0xf5,
-0xfc,
-0x84,
-0xf1,
-0x7a,
-0xdb,
-0xfc,
-0x76,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x1a,
-0x03,
-0xe8,
-0xf8,
-0x8b,
-0xf2,
-0x72,
-0xb8,
-0xf8,
-0x59,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x26,
-0x05,
-0xdc,
-0xf3,
-0x98,
-0xf4,
-0x66,
-0x9c,
-0xf4,
-0x2c,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x33,
-0x06,
-0xcf,
-0xee,
-0xaa,
-0xf6,
-0x54,
-0x88,
-0xf2,
-0xf7,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x40,
-0x08,
-0xc3,
-0xea,
-0xc1,
-0xf9,
-0x3e,
-0x81,
-0xf1,
-0xc1,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x4d,
-0x0a,
-0xb7,
-0xe5,
-0xdd,
-0xfd,
-0x23,
-0x89,
-0xf2,
-0x95,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x5a,
-0x0b,
-0xaa,
-0xe0,
-0xfe,
-0x00,
-0x02,
-0xa4,
-0xf5,
-0x81,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x66,
-0x0d,
-0x9e,
-0xdb,
-0x24,
-0x04,
-0xde,
-0xd4,
-0xfb,
-0x95,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x73,
-0x0e,
-0x91,
-0xd7,
-0x4f,
-0x0a,
-0xb4,
-0x1c,
-0x03,
-0xe3,
-0x10,
-0x85,
-0xd2,
-0x70,
-0x7f,
-0x10,
-0x85,
-0xd2,
-0x7f,
-0x10,
-0x85,
-0x7f,
-0x10,
-0x7f,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x81,
-0xe1,
-0x70,
-0x58,
-0x7f,
-0x20,
-0x91,
-0x81,
-0xe1,
-0x7f,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x8e,
-0xe4,
-0x65,
-0x4f,
-0x4f,
-0x14,
-0xbc,
-0xe5,
-0xfa,
-0xe3,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x9b,
-0xe7,
-0x5a,
-0x46,
-0x24,
-0x09,
-0xe2,
-0x2d,
-0x0b,
-0x95,
-0x20,
-0x91,
-0xa9,
-0x44,
-0xa7,
-0xeb,
-0x4e,
-0x3e,
-0xfe,
-0x00,
-0x02,
-0x5d,
-0x17,
-0x81,
-0x20,
-0x91,
-0xa9,
-0x44,
-0xb4,
-0xee,
-0x43,
-0x35,
-0xdd,
-0xf8,
-0x1f,
-0x78,
-0x1e,
-0x95,
-0x20,
-0x91,
-0xa9,
-0x44,
-0xc1,
-0xf1,
-0x38,
-0x2c,
-0xc1,
-0xf1,
-0x38,
-0x7f,
-0x20,
-0xc1,
-0x20,
-0x91,
-0xa9,
-0x44,
-0xce,
-0xf4,
-0x2d,
-0x23,
-0xaa,
-0xeb,
-0x4c,
-0x79,
-0x1e,
-0xf7,
-0x20,
-0x91,
-0xa9,
-0x44,
-0xdb,
-0xf7,
-0x22,
-0x1a,
-0x98,
-0xe7,
-0x5c,
-0x65,
-0x19,
-0x2c,
-0x20,
-0x91,
-0xa9,
-0x44,
-0xe7,
-0xfb,
-0x16,
-0x12,
-0x8b,
-0xe4,
-0x67,
-0x49,
-0x12,
-0x59,
-0x20,
-0x91,
-0xa9,
-0x44,
-0xf4,
-0xfe,
-0x0b,
-0x09,
-0x84,
-0xe2,
-0x6e,
-0x26,
-0x09,
-0x76,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0xe1,
-0x70,
-0x00,
-0x00,
-0x7f,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x0d,
-0x03,
-0xf6,
-0xf8,
-0x84,
-0xe2,
-0x6e,
-0xdb,
-0xf8,
-0x76,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x1a,
-0x06,
-0xeb,
-0xef,
-0x8b,
-0xe4,
-0x67,
-0xb8,
-0xef,
-0x59,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x26,
-0x0a,
-0xdf,
-0xe7,
-0x98,
-0xe7,
-0x5c,
-0x9c,
-0xe8,
-0x2c,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x33,
-0x0d,
-0xd4,
-0xde,
-0xaa,
-0xeb,
-0x4c,
-0x88,
-0xe3,
-0xf7,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x40,
-0x10,
-0xc9,
-0xd5,
-0xc1,
-0xf1,
-0x38,
-0x81,
-0xe1,
-0xc1,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x4d,
-0x13,
-0xbe,
-0xcc,
-0xdd,
-0xf8,
-0x1f,
-0x89,
-0xe3,
-0x95,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x5a,
-0x16,
-0xb3,
-0xc3,
-0xfe,
-0x00,
-0x02,
-0xa4,
-0xea,
-0x81,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x66,
-0x1a,
-0xa7,
-0xbb,
-0x24,
-0x09,
-0xe2,
-0xd4,
-0xf6,
-0x95,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x73,
-0x1d,
-0x9c,
-0xb2,
-0x4f,
-0x14,
-0xbc,
-0x1c,
-0x07,
-0xe3,
-0x20,
-0x91,
-0xa9,
-0x44,
-0x7f,
-0x20,
-0x91,
-0xa9,
-0x7f,
-0x20,
-0x91,
-0x7f,
-0x20,
-0x7f,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x81,
-0xd1,
-0x5c,
-0x75,
-0x7f,
-0x30,
-0xa5,
-0x81,
-0xd1,
-0x7f,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x8e,
-0xd6,
-0x53,
-0x69,
-0x4f,
-0x1e,
-0xc8,
-0xe5,
-0xf7,
-0xe3,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x9b,
-0xdb,
-0x4a,
-0x5e,
-0x24,
-0x0d,
-0xe7,
-0x2d,
-0x11,
-0x95,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0xa7,
-0xdf,
-0x40,
-0x52,
-0xfe,
-0x00,
-0x02,
-0x5d,
-0x23,
-0x81,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0xb4,
-0xe4,
-0x37,
-0x46,
-0xdd,
-0xf4,
-0x1a,
-0x78,
-0x2d,
-0x95,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0xc1,
-0xe9,
-0x2e,
-0x3b,
-0xc1,
-0xe9,
-0x2e,
-0x7f,
-0x30,
-0xc1,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0xce,
-0xee,
-0x25,
-0x2f,
-0xaa,
-0xe0,
-0x3f,
-0x79,
-0x2d,
-0xf7,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0xdb,
-0xf3,
-0x1c,
-0x23,
-0x98,
-0xda,
-0x4b,
-0x65,
-0x26,
-0x2c,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0xe7,
-0xf7,
-0x12,
-0x17,
-0x8b,
-0xd5,
-0x55,
-0x49,
-0x1b,
-0x59,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0xf4,
-0xfc,
-0x09,
-0x0c,
-0x84,
-0xd2,
-0x5a,
-0x26,
-0x0e,
-0x76,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0xd1,
-0x5c,
-0x00,
-0x00,
-0x7f,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x0d,
-0x05,
-0xf8,
-0xf5,
-0x84,
-0xd2,
-0x5a,
-0xdb,
-0xf3,
-0x76,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x1a,
-0x0a,
-0xef,
-0xea,
-0x8b,
-0xd5,
-0x55,
-0xb8,
-0xe6,
-0x59,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x26,
-0x0e,
-0xe5,
-0xde,
-0x98,
-0xda,
-0x4b,
-0x9c,
-0xdb,
-0x2c,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x33,
-0x13,
-0xdc,
-0xd2,
-0xaa,
-0xe0,
-0x3f,
-0x88,
-0xd4,
-0xf7,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x40,
-0x18,
-0xd3,
-0xc6,
-0xc1,
-0xe9,
-0x2e,
-0x81,
-0xd1,
-0xc1,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x4d,
-0x1d,
-0xca,
-0xbb,
-0xdd,
-0xf4,
-0x1a,
-0x89,
-0xd4,
-0x95,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x5a,
-0x22,
-0xc1,
-0xaf,
-0xfe,
-0x00,
-0x02,
-0xa4,
-0xde,
-0x81,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x66,
-0x26,
-0xb7,
-0xa3,
-0x24,
-0x0d,
-0xe7,
-0xd4,
-0xf0,
-0x95,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x73,
-0x2b,
-0xae,
-0x98,
-0x4f,
-0x1e,
-0xc8,
-0x1c,
-0x0a,
-0xe3,
-0x30,
-0xa5,
-0x8c,
-0x04,
-0x7f,
-0x30,
-0xa5,
-0x8c,
-0x7f,
-0x30,
-0xa5,
-0x7f,
-0x30,
-0x7f,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x81,
-0xc1,
-0x40,
-0x7f,
-0x7f,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x7f,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x8e,
-0xc7,
-0x3a,
-0x73,
-0x4f,
-0x28,
-0xd9,
-0xe5,
-0xf3,
-0xe3,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x9b,
-0xce,
-0x33,
-0x66,
-0x24,
-0x12,
-0xef,
-0x2d,
-0x17,
-0x95,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0xa7,
-0xd4,
-0x2d,
-0x5a,
-0xfe,
-0x00,
-0x01,
-0x5d,
-0x2f,
-0x81,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0xb4,
-0xdb,
-0x26,
-0x4d,
-0xdd,
-0xef,
-0x12,
-0x78,
-0x3c,
-0x95,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0xc1,
-0xe1,
-0x20,
-0x40,
-0xc1,
-0xe1,
-0x20,
-0x7f,
-0x40,
-0xc1,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0xce,
-0xe7,
-0x1a,
-0x33,
-0xaa,
-0xd5,
-0x2c,
-0x79,
-0x3c,
-0xf7,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0xdb,
-0xee,
-0x13,
-0x26,
-0x98,
-0xcd,
-0x34,
-0x65,
-0x33,
-0x2c,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0xe7,
-0xf4,
-0x0d,
-0x1a,
-0x8b,
-0xc6,
-0x3b,
-0x49,
-0x24,
-0x59,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0xf4,
-0xfb,
-0x06,
-0x0d,
-0x84,
-0xc2,
-0x3f,
-0x26,
-0x13,
-0x76,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0xc1,
-0x40,
-0x00,
-0x00,
-0x7f,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x0d,
-0x06,
-0xfb,
-0xf4,
-0x84,
-0xc2,
-0x3f,
-0xdb,
-0xee,
-0x76,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x1a,
-0x0d,
-0xf4,
-0xe7,
-0x8b,
-0xc6,
-0x3b,
-0xb8,
-0xdd,
-0x59,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x26,
-0x13,
-0xee,
-0xdb,
-0x98,
-0xcd,
-0x34,
-0x9c,
-0xce,
-0x2c,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x33,
-0x1a,
-0xe7,
-0xce,
-0xaa,
-0xd5,
-0x2c,
-0x88,
-0xc5,
-0xf7,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x40,
-0x20,
-0xe1,
-0xc1,
-0xc1,
-0xe1,
-0x20,
-0x81,
-0xc1,
-0xc1,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x4d,
-0x26,
-0xdb,
-0xb4,
-0xdd,
-0xef,
-0x12,
-0x89,
-0xc5,
-0x95,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x5a,
-0x2d,
-0xd4,
-0xa7,
-0xfe,
-0x00,
-0x01,
-0xa4,
-0xd2,
-0x81,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x66,
-0x33,
-0xce,
-0x9b,
-0x24,
-0x12,
-0xef,
-0xd4,
-0xea,
-0x95,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x73,
-0x3a,
-0xc7,
-0x8e,
-0x4f,
-0x28,
-0xd9,
-0x1c,
-0x0e,
-0xe3,
-0x40,
-0xc1,
-0x81,
-0xc1,
-0x7f,
-0x40,
-0xc1,
-0x81,
-0x7f,
-0x40,
-0xc1,
-0x7f,
-0x40,
-0x7f,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x81,
-0xb1,
-0x1c,
-0x73,
-0x7f,
-0x50,
-0xe5,
-0x81,
-0xb1,
-0x7f,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x8e,
-0xb9,
-0x19,
-0x68,
-0x4f,
-0x32,
-0xf0,
-0xe5,
-0xf0,
-0xe3,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x9b,
-0xc1,
-0x16,
-0x5c,
-0x24,
-0x16,
-0xf9,
-0x2d,
-0x1c,
-0x95,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0xa7,
-0xc9,
-0x14,
-0x51,
-0xfe,
-0xff,
-0x01,
-0x5d,
-0x3a,
-0x81,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0xb4,
-0xd1,
-0x11,
-0x45,
-0xdd,
-0xeb,
-0x08,
-0x78,
-0x4b,
-0x95,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0xc1,
-0xd9,
-0x0e,
-0x3a,
-0xc1,
-0xd9,
-0x0e,
-0x7f,
-0x50,
-0xc1,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0xce,
-0xe1,
-0x0b,
-0x2e,
-0xaa,
-0xcb,
-0x13,
-0x79,
-0x4c,
-0xf7,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0xdb,
-0xe9,
-0x08,
-0x23,
-0x98,
-0xbf,
-0x17,
-0x65,
-0x3f,
-0x2c,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0xe7,
-0xf1,
-0x06,
-0x17,
-0x8b,
-0xb7,
-0x1a,
-0x49,
-0x2d,
-0x59,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0xf4,
-0xf9,
-0x03,
-0x0b,
-0x84,
-0xb3,
-0x1b,
-0x26,
-0x18,
-0x76,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0xb1,
-0x1c,
-0x00,
-0x00,
-0x7f,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x0d,
-0x08,
-0xfe,
-0xf5,
-0x84,
-0xb3,
-0x1b,
-0xdb,
-0xe9,
-0x76,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x1a,
-0x10,
-0xfb,
-0xea,
-0x8b,
-0xb7,
-0x1a,
-0xb8,
-0xd4,
-0x59,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x26,
-0x18,
-0xf9,
-0xde,
-0x98,
-0xbf,
-0x17,
-0x9c,
-0xc2,
-0x2c,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x33,
-0x20,
-0xf6,
-0xd3,
-0xaa,
-0xcb,
-0x13,
-0x88,
-0xb5,
-0xf7,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x40,
-0x28,
-0xf3,
-0xc7,
-0xc1,
-0xd9,
-0x0e,
-0x81,
-0xb1,
-0xc1,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x4d,
-0x30,
-0xf0,
-0xbc,
-0xdd,
-0xeb,
-0x08,
-0x89,
-0xb6,
-0x95,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x5a,
-0x38,
-0xed,
-0xb0,
-0xfe,
-0xff,
-0x01,
-0xa4,
-0xc7,
-0x81,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x66,
-0x40,
-0xeb,
-0xa5,
-0x24,
-0x16,
-0xf9,
-0xd4,
-0xe5,
-0x95,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x73,
-0x48,
-0xe8,
-0x99,
-0x4f,
-0x32,
-0xf0,
-0x1c,
-0x11,
-0xe3,
-0x50,
-0xe5,
-0x8e,
-0x8d,
-0x7f,
-0x50,
-0xe5,
-0x8e,
-0x7f,
-0x50,
-0xe5,
-0x7f,
-0x50,
-0x7f,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x81,
-0xa1,
-0xf1,
-0x48,
-0x7f,
-0x60,
-0x10,
-0x81,
-0xa1,
-0x7f,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x8e,
-0xab,
-0xf3,
-0x41,
-0x4f,
-0x3c,
-0x0a,
-0xe5,
-0xec,
-0xe3,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x9b,
-0xb4,
-0xf4,
-0x3a,
-0x24,
-0x1b,
-0x04,
-0x2d,
-0x22,
-0x95,
-0x60,
-0x10,
-0xb9,
-0x85,
-0xa7,
-0xbe,
-0xf6,
-0x32,
-0xfe,
-0xff,
-0x00,
-0x5d,
-0x46,
-0x81,
-0x60,
-0x10,
-0xb9,
-0x85,
-0xb4,
-0xc7,
-0xf7,
-0x2b,
-0xdd,
-0xe6,
-0xfd,
-0x78,
-0x5a,
-0x95,
-0x60,
-0x10,
-0xb9,
-0x85,
-0xc1,
-0xd1,
-0xf9,
-0x24,
-0xc1,
-0xd1,
-0xf9,
-0x7f,
-0x60,
-0xc1,
-0x60,
-0x10,
-0xb9,
-0x85,
-0xce,
-0xdb,
-0xfb,
-0x1d,
-0xaa,
-0xc0,
-0xf6,
-0x79,
-0x5b,
-0xf7,
-0x60,
-0x10,
-0xb9,
-0x85,
-0xdb,
-0xe4,
-0xfc,
-0x16,
-0x98,
-0xb2,
-0xf4,
-0x65,
-0x4c,
-0x2c,
-0x60,
-0x10,
-0xb9,
-0x85,
-0xe7,
-0xee,
-0xfe,
-0x0e,
-0x8b,
-0xa9,
-0xf2,
-0x49,
-0x37,
-0x59,
-0x60,
-0x10,
-0xb9,
-0x85,
-0xf4,
-0xf7,
-0xff,
-0x07,
-0x84,
-0xa3,
-0xf1,
-0x26,
-0x1c,
-0x76,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0xa1,
-0xf1,
-0x00,
-0x00,
-0x7f,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x0d,
-0x0a,
-0x02,
-0xfa,
-0x84,
-0xa3,
-0xf1,
-0xdb,
-0xe5,
-0x76,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x1a,
-0x13,
-0x03,
-0xf3,
-0x8b,
-0xa9,
-0xf2,
-0xb8,
-0xca,
-0x59,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x26,
-0x1d,
-0x05,
-0xeb,
-0x98,
-0xb2,
-0xf4,
-0x9c,
-0xb5,
-0x2c,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x33,
-0x26,
-0x06,
-0xe4,
-0xaa,
-0xc0,
-0xf6,
-0x88,
-0xa6,
-0xf7,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x40,
-0x30,
-0x08,
-0xdd,
-0xc1,
-0xd1,
-0xf9,
-0x81,
-0xa1,
-0xc1,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x4d,
-0x3a,
-0x0a,
-0xd6,
-0xdd,
-0xe6,
-0xfd,
-0x89,
-0xa7,
-0x95,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x5a,
-0x43,
-0x0b,
-0xcf,
-0xfe,
-0xff,
-0x00,
-0xa4,
-0xbb,
-0x81,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x66,
-0x4d,
-0x0d,
-0xc7,
-0x24,
-0x1b,
-0x04,
-0xd4,
-0xdf,
-0x95,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x73,
-0x56,
-0x0e,
-0xc0,
-0x4f,
-0x3c,
-0x0a,
-0x1c,
-0x15,
-0xe3,
-0x60,
-0x10,
-0xb9,
-0x85,
-0x7f,
-0x60,
-0x10,
-0xb9,
-0x7f,
-0x60,
-0x10,
-0x7f,
-0x60,
-0x7f,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x81,
-0x91,
-0xbd,
-0xfa,
-0x7f,
-0x70,
-0x44,
-0x81,
-0x91,
-0x7f,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x8e,
-0x9c,
-0xc4,
-0xfb,
-0x4f,
-0x45,
-0x2a,
-0xe5,
-0xe9,
-0xe3,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x9b,
-0xa7,
-0xcb,
-0xfb,
-0x24,
-0x1f,
-0x13,
-0x2d,
-0x27,
-0x95,
-0x70,
-0x44,
-0x07,
-0xc9,
-0xa7,
-0xb3,
-0xd1,
-0xfc,
-0xfe,
-0xff,
-0x00,
-0x5d,
-0x52,
-0x81,
-0x70,
-0x44,
-0x07,
-0xc9,
-0xb4,
-0xbe,
-0xd8,
-0xfd,
-0xdd,
-0xe2,
-0xee,
-0x78,
-0x69,
-0x95,
-0x70,
-0x44,
-0x07,
-0xc9,
-0xc1,
-0xc9,
-0xdf,
-0xfe,
-0xc1,
-0xc9,
-0xdf,
-0x7f,
-0x70,
-0xc1,
-0x70,
-0x44,
-0x07,
-0xc9,
-0xce,
-0xd4,
-0xe6,
-0xfe,
-0xaa,
-0xb5,
-0xd3,
-0x79,
-0x6a,
-0xf7,
-0x70,
-0x44,
-0x07,
-0xc9,
-0xdb,
-0xdf,
-0xed,
-0xff,
-0x98,
-0xa5,
-0xc9,
-0x65,
-0x59,
-0x2c,
-0x70,
-0x44,
-0x07,
-0xc9,
-0xe7,
-0xeb,
-0xf3,
-0x00,
-0x8b,
-0x9a,
-0xc2,
-0x49,
-0x40,
-0x59,
-0x70,
-0x44,
-0x07,
-0xc9,
-0xf4,
-0xf6,
-0xfa,
-0x00,
-0x84,
-0x93,
-0xbe,
-0x26,
-0x21,
-0x76,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x91,
-0xbd,
-0x00,
-0x00,
-0x7f,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x0d,
-0x0b,
-0x07,
-0x01,
-0x84,
-0x93,
-0xbe,
-0xdb,
-0xe0,
-0x76,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x1a,
-0x16,
-0x0e,
-0x01,
-0x8b,
-0x9a,
-0xc2,
-0xb8,
-0xc1,
-0x59,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x26,
-0x22,
-0x14,
-0x02,
-0x98,
-0xa5,
-0xc9,
-0x9c,
-0xa8,
-0x2c,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x33,
-0x2d,
-0x1b,
-0x03,
-0xaa,
-0xb5,
-0xd3,
-0x88,
-0x97,
-0xf7,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x40,
-0x38,
-0x22,
-0x03,
-0xc1,
-0xc9,
-0xdf,
-0x81,
-0x91,
-0xc1,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x4d,
-0x43,
-0x29,
-0x04,
-0xdd,
-0xe2,
-0xee,
-0x89,
-0x98,
-0x95,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x5a,
-0x4e,
-0x30,
-0x05,
-0xfe,
-0xff,
-0x00,
-0xa4,
-0xaf,
-0x81,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x66,
-0x5a,
-0x36,
-0x06,
-0x24,
-0x1f,
-0x13,
-0xd4,
-0xda,
-0x95,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x73,
-0x65,
-0x3d,
-0x06,
-0x4f,
-0x45,
-0x2a,
-0x1c,
-0x18,
-0xe3,
-0x70,
-0x44,
-0x07,
-0xc9,
-0x7f,
-0x70,
-0x44,
-0x07,
-0x7f,
-0x70,
-0x44,
-0x7f,
-0x70,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x81,
-0x81,
-0x81,
-0x81,
-0x7f,
-0x7f,
-0x7f,
-0x81,
-0x81,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x8e,
-0x8e,
-0x8e,
-0x8e,
-0x4f,
-0x4f,
-0x4f,
-0xe5,
-0xe5,
-0xe3,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x9b,
-0x9b,
-0x9b,
-0x9b,
-0x24,
-0x24,
-0x24,
-0x2d,
-0x2d,
-0x95,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xa7,
-0xa7,
-0xa7,
-0xa7,
-0xfe,
-0xfe,
-0xfe,
-0x5d,
-0x5d,
-0x81,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xb4,
-0xb4,
-0xb4,
-0xb4,
-0xdd,
-0xdd,
-0xdd,
-0x78,
-0x78,
-0x95,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xc1,
-0xc1,
-0xc1,
-0xc1,
-0xc1,
-0xc1,
-0xc1,
-0x7f,
-0x7f,
-0xc1,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xce,
-0xce,
-0xce,
-0xce,
-0xaa,
-0xaa,
-0xaa,
-0x79,
-0x79,
-0xf7,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xdb,
-0xdb,
-0xdb,
-0xdb,
-0x98,
-0x98,
-0x98,
-0x65,
-0x65,
-0x2c,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xe7,
-0xe7,
-0xe7,
-0xe7,
-0x8b,
-0x8b,
-0x8b,
-0x49,
-0x49,
-0x59,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xf4,
-0xf4,
-0xf4,
-0xf4,
-0x84,
-0x84,
-0x84,
-0x26,
-0x26,
-0x76,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x00,
-0x00,
-0x00,
-0x00,
-0x81,
-0x81,
-0x81,
-0x00,
-0x00,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x0d,
-0x0d,
-0x0d,
-0x0d,
-0x84,
-0x84,
-0x84,
-0xdb,
-0xdb,
-0x76,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x1a,
-0x1a,
-0x1a,
-0x1a,
-0x8b,
-0x8b,
-0x8b,
-0xb8,
-0xb8,
-0x59,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x26,
-0x26,
-0x26,
-0x26,
-0x98,
-0x98,
-0x98,
-0x9c,
-0x9c,
-0x2c,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x33,
-0x33,
-0x33,
-0x33,
-0xaa,
-0xaa,
-0xaa,
-0x88,
-0x88,
-0xf7,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x40,
-0x40,
-0x40,
-0x40,
-0xc1,
-0xc1,
-0xc1,
-0x81,
-0x81,
-0xc1,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x4d,
-0x4d,
-0x4d,
-0x4d,
-0xdd,
-0xdd,
-0xdd,
-0x89,
-0x89,
-0x95,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x5a,
-0x5a,
-0x5a,
-0x5a,
-0xfe,
-0xfe,
-0xfe,
-0xa4,
-0xa4,
-0x81,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x66,
-0x66,
-0x66,
-0x66,
-0x24,
-0x24,
-0x24,
-0xd4,
-0xd4,
-0x95,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x73,
-0x73,
-0x73,
-0x73,
-0x4f,
-0x4f,
-0x4f,
-0x1c,
-0x1c,
-0xe3,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0x7f,
-0xa2,
-0x36,
-0x24,
-0x1b,
-0x19,
-0x45,
-0x39,
-0x20,
-0x19,
-0x19,
-0x30,
-0x2a,
-0x19,
-0x17,
-0x26,
-0x21,
-0x19,
-0x15,
-0x17,
-0x23,
-0x20,
-0x19,
-0x17,
-0x16,
-0x36,
-0x66,
-0x23,
-0x1e,
-0x1b,
-0x3b,
-0x32,
-0x25,
-0x1a,
-0x1b,
-0x29,
-0x28,
-0x1a,
-0x18,
-0x23,
-0x1e,
-0x18,
-0x15,
-0x17,
-0x20,
-0x1e,
-0x18,
-0x17,
-0x17,
-0x24,
-0x23,
-0x5a,
-0x23,
-0x24,
-0x21,
-0x24,
-0x28,
-0x24,
-0x21,
-0x1d,
-0x1d,
-0x1d,
-0x1d,
-0x1a,
-0x17,
-0x16,
-0x17,
-0x1a,
-0x19,
-0x18,
-0x15,
-0x18,
-0x19,
-0x1b,
-0x1e,
-0x23,
-0x66,
-0x36,
-0x1b,
-0x1a,
-0x25,
-0x32,
-0x3b,
-0x18,
-0x1a,
-0x28,
-0x29,
-0x17,
-0x15,
-0x18,
-0x1e,
-0x23,
-0x17,
-0x17,
-0x18,
-0x1e,
-0x20,
-0x19,
-0x1b,
-0x24,
-0x36,
-0xa2,
-0x19,
-0x19,
-0x20,
-0x39,
-0x45,
-0x17,
-0x19,
-0x2a,
-0x30,
-0x17,
-0x15,
-0x19,
-0x21,
-0x26,
-0x16,
-0x17,
-0x19,
-0x20,
-0x23,
-0x45,
-0x3b,
-0x21,
-0x1b,
-0x19,
-0x6e,
-0x30,
-0x21,
-0x18,
-0x19,
-0x32,
-0x2e,
-0x19,
-0x17,
-0x2a,
-0x23,
-0x1a,
-0x16,
-0x17,
-0x26,
-0x23,
-0x1a,
-0x17,
-0x17,
-0x39,
-0x32,
-0x24,
-0x1a,
-0x19,
-0x30,
-0x45,
-0x1e,
-0x18,
-0x18,
-0x2b,
-0x27,
-0x18,
-0x16,
-0x23,
-0x1e,
-0x17,
-0x14,
-0x16,
-0x21,
-0x1e,
-0x17,
-0x15,
-0x15,
-0x20,
-0x25,
-0x28,
-0x25,
-0x20,
-0x21,
-0x1e,
-0x3c,
-0x1e,
-0x21,
-0x1b,
-0x1e,
-0x1e,
-0x1b,
-0x1a,
-0x17,
-0x17,
-0x17,
-0x1a,
-0x19,
-0x18,
-0x16,
-0x18,
-0x19,
-0x19,
-0x1a,
-0x24,
-0x32,
-0x39,
-0x18,
-0x18,
-0x1e,
-0x45,
-0x30,
-0x16,
-0x18,
-0x27,
-0x2b,
-0x16,
-0x14,
-0x17,
-0x1e,
-0x23,
-0x15,
-0x15,
-0x17,
-0x1e,
-0x21,
-0x19,
-0x1b,
-0x21,
-0x3b,
-0x45,
-0x19,
-0x18,
-0x21,
-0x30,
-0x6e,
-0x17,
-0x19,
-0x2e,
-0x32,
-0x17,
-0x16,
-0x1a,
-0x23,
-0x2a,
-0x17,
-0x17,
-0x1a,
-0x23,
-0x26,
-0x30,
-0x29,
-0x1d,
-0x18,
-0x17,
-0x32,
-0x2b,
-0x1b,
-0x16,
-0x17,
-0x67,
-0x2b,
-0x18,
-0x16,
-0x32,
-0x2b,
-0x1b,
-0x16,
-0x17,
-0x30,
-0x29,
-0x1d,
-0x18,
-0x17,
-0x2a,
-0x28,
-0x1d,
-0x1a,
-0x19,
-0x2e,
-0x27,
-0x1e,
-0x18,
-0x19,
-0x2b,
-0x45,
-0x1a,
-0x18,
-0x2e,
-0x27,
-0x1e,
-0x18,
-0x19,
-0x2a,
-0x28,
-0x1d,
-0x1a,
-0x19,
-0x19,
-0x1a,
-0x1d,
-0x28,
-0x2a,
-0x19,
-0x18,
-0x1e,
-0x27,
-0x2e,
-0x18,
-0x1a,
-0x45,
-0x2b,
-0x19,
-0x18,
-0x1e,
-0x27,
-0x2e,
-0x19,
-0x1a,
-0x1d,
-0x28,
-0x2a,
-0x17,
-0x18,
-0x1d,
-0x29,
-0x30,
-0x17,
-0x16,
-0x1b,
-0x2b,
-0x32,
-0x16,
-0x18,
-0x2b,
-0x67,
-0x17,
-0x16,
-0x1b,
-0x2b,
-0x32,
-0x17,
-0x18,
-0x1d,
-0x29,
-0x30,
-0x26,
-0x23,
-0x1a,
-0x17,
-0x17,
-0x2a,
-0x23,
-0x1a,
-0x16,
-0x17,
-0x32,
-0x2e,
-0x19,
-0x17,
-0x6e,
-0x30,
-0x21,
-0x18,
-0x19,
-0x45,
-0x3b,
-0x21,
-0x1b,
-0x19,
-0x21,
-0x1e,
-0x17,
-0x15,
-0x15,
-0x23,
-0x1e,
-0x17,
-0x14,
-0x16,
-0x2b,
-0x27,
-0x18,
-0x16,
-0x30,
-0x45,
-0x1e,
-0x18,
-0x18,
-0x39,
-0x32,
-0x24,
-0x1a,
-0x19,
-0x19,
-0x18,
-0x16,
-0x18,
-0x19,
-0x1a,
-0x17,
-0x17,
-0x17,
-0x1a,
-0x1b,
-0x1e,
-0x1e,
-0x1b,
-0x21,
-0x1e,
-0x3c,
-0x1e,
-0x21,
-0x20,
-0x25,
-0x28,
-0x25,
-0x20,
-0x15,
-0x15,
-0x17,
-0x1e,
-0x21,
-0x16,
-0x14,
-0x17,
-0x1e,
-0x23,
-0x16,
-0x18,
-0x27,
-0x2b,
-0x18,
-0x18,
-0x1e,
-0x45,
-0x30,
-0x19,
-0x1a,
-0x24,
-0x32,
-0x39,
-0x17,
-0x17,
-0x1a,
-0x23,
-0x26,
-0x17,
-0x16,
-0x1a,
-0x23,
-0x2a,
-0x17,
-0x19,
-0x2e,
-0x32,
-0x19,
-0x18,
-0x21,
-0x30,
-0x6e,
-0x19,
-0x1b,
-0x21,
-0x3b,
-0x45,
-0x23,
-0x20,
-0x19,
-0x17,
-0x16,
-0x26,
-0x21,
-0x19,
-0x15,
-0x17,
-0x30,
-0x2a,
-0x19,
-0x17,
-0x45,
-0x39,
-0x20,
-0x19,
-0x19,
-0xa2,
-0x36,
-0x24,
-0x1b,
-0x19,
-0x20,
-0x1e,
-0x18,
-0x17,
-0x17,
-0x23,
-0x1e,
-0x18,
-0x15,
-0x17,
-0x29,
-0x28,
-0x1a,
-0x18,
-0x3b,
-0x32,
-0x25,
-0x1a,
-0x1b,
-0x36,
-0x66,
-0x23,
-0x1e,
-0x1b,
-0x19,
-0x18,
-0x15,
-0x18,
-0x19,
-0x1a,
-0x17,
-0x16,
-0x17,
-0x1a,
-0x1d,
-0x1d,
-0x1d,
-0x1d,
-0x21,
-0x24,
-0x28,
-0x24,
-0x21,
-0x24,
-0x23,
-0x5a,
-0x23,
-0x24,
-0x17,
-0x17,
-0x18,
-0x1e,
-0x20,
-0x17,
-0x15,
-0x18,
-0x1e,
-0x23,
-0x18,
-0x1a,
-0x28,
-0x29,
-0x1b,
-0x1a,
-0x25,
-0x32,
-0x3b,
-0x1b,
-0x1e,
-0x23,
-0x66,
-0x36,
-0x16,
-0x17,
-0x19,
-0x20,
-0x23,
-0x17,
-0x15,
-0x19,
-0x21,
-0x26,
-0x17,
-0x19,
-0x2a,
-0x30,
-0x19,
-0x19,
-0x20,
-0x39,
-0x45,
-0x19,
-0x1b,
-0x24,
-0x36,
-0xa2,
-0x0d,
-0x26,
-0x40,
-0x5a,
-0x5a,
-0x40,
-0x26,
-0x0d,
-0xf3,
-0xda,
-0xc0,
-0xa6,
-0xa6,
-0xc0,
-0xda,
-0xf3,
-0x03,
-0x0a,
-0x0d,
-0x0d,
-0x0d,
-0x06,
-0xfa,
-0xf3,
-0xf3,
-0xf3,
-0xf6,
-0xfd,
-0x0a,
-0x1d,
-0x26,
-0x26,
-0x26,
-0x13,
-0xed,
-0xda,
-0xda,
-0xda,
-0xe3,
-0xf6,
-0x10,
-0x30,
-0x40,
-0x40,
-0x40,
-0x20,
-0xe0,
-0xc0,
-0xc0,
-0xc0,
-0xd0,
-0xf0,
-0x16,
-0x43,
-0x5a,
-0x5a,
-0x5a,
-0x2d,
-0xd3,
-0xa6,
-0xa6,
-0xa6,
-0xbd,
-0xea,
-0x16,
-0x43,
-0x5a,
-0x5a,
-0x5a,
-0x2d,
-0xd3,
-0xa6,
-0xa6,
-0xa6,
-0xbd,
-0xea,
-0x10,
-0x30,
-0x40,
-0x40,
-0x40,
-0x20,
-0xe0,
-0xc0,
-0xc0,
-0xc0,
-0xd0,
-0xf0,
-0x0a,
-0x1d,
-0x26,
-0x26,
-0x26,
-0x13,
-0xed,
-0xda,
-0xda,
-0xda,
-0xe3,
-0xf6,
-0x03,
-0x0a,
-0x0d,
-0x0d,
-0x0d,
-0x06,
-0xfa,
-0xf3,
-0xf3,
-0xf3,
-0xf6,
-0xfd,
-0x0d,
-0x26,
-0x40,
-0x5a,
-0x73,
-0x73,
-0x5a,
-0x40,
-0x26,
-0x0d,
-0xf3,
-0xda,
-0xc0,
-0xa6,
-0x8d,
-0x8d,
-0xa6,
-0xc0,
-0xda,
-0xf3,
-0x03,
-0x0a,
-0x10,
-0x16,
-0x1d,
-0x1d,
-0x16,
-0x10,
-0x0a,
-0x03,
-0x0a,
-0x1d,
-0x30,
-0x43,
-0x56,
-0x56,
-0x43,
-0x30,
-0x1d,
-0x0a,
-0x0d,
-0x26,
-0x40,
-0x5a,
-0x73,
-0x73,
-0x5a,
-0x40,
-0x26,
-0x0d,
-0x0d,
-0x26,
-0x40,
-0x5a,
-0x73,
-0x73,
-0x5a,
-0x40,
-0x26,
-0x0d,
-0x06,
-0x13,
-0x20,
-0x2d,
-0x3a,
-0x3a,
-0x2d,
-0x20,
-0x13,
-0x06,
-0xfa,
-0xed,
-0xe0,
-0xd3,
-0xc6,
-0xc6,
-0xd3,
-0xe0,
-0xed,
-0xfa,
-0xf3,
-0xda,
-0xc0,
-0xa6,
-0x8d,
-0x8d,
-0xa6,
-0xc0,
-0xda,
-0xf3,
-0xf3,
-0xda,
-0xc0,
-0xa6,
-0x8d,
-0x8d,
-0xa6,
-0xc0,
-0xda,
-0xf3,
-0xf6,
-0xe3,
-0xd0,
-0xbd,
-0xaa,
-0xaa,
-0xbd,
-0xd0,
-0xe3,
-0xf6,
-0xfd,
-0xf6,
-0xf0,
-0xea,
-0xe3,
-0xe3,
-0xea,
-0xf0,
-0xf6,
-0xfd,
-0x00,
-0x00,
-0x00,
-0x00,
-0xcd,
-0x33,
-0x00,
-0x00,
-0x9a,
-0x66,
-0x00,
-0x00,
-0x66,
-0x9a,
-0x00,
-0x00,
-0x33,
-0xcd,
-0x00,
-0x00,
-0xc0,
-0x00,
-0x40,
-0x00,
-0x9a,
-0x26,
-0x33,
-0x0d,
-0x73,
-0x4d,
-0x26,
-0x1a,
-0x4d,
-0x73,
-0x1a,
-0x26,
-0x26,
-0x9a,
-0x0d,
-0x33,
-0x80,
-0x00,
-0x80,
-0x00,
-0x66,
-0x1a,
-0x66,
-0x1a,
-0x4d,
-0x33,
-0x4d,
-0x33,
-0x33,
-0x4d,
-0x33,
-0x4d,
-0x1a,
-0x66,
-0x1a,
-0x66,
-0x40,
-0x00,
-0xc0,
-0x00,
-0x33,
-0x0d,
-0x9a,
-0x26,
-0x26,
-0x1a,
-0x73,
-0x4d,
-0x1a,
-0x26,
-0x4d,
-0x73,
-0x0d,
-0x33,
-0x26,
-0x9a,
-0x00,
-0x00,
-0x04,
-0x00,
-0x08,
-0x00,
-0x0c,
-0x00,
-0x10,
-0x00,
-0x00,
-0x02,
-0x04,
-0x02,
-0x08,
-0x02,
-0x0c,
-0x02,
-0x10,
-0x02,
-0x00,
-0x04,
-0x04,
-0x04,
-0x08,
-0x04,
-0x0c,
-0x04,
-0x10,
-0x04,
-0x00,
-0x06,
-0x04,
-0x06,
-0x08,
-0x06,
-0x0c,
-0x06,
-0x10,
-0x06,
-0x00,
-0x08,
-0x14,
-0x00,
-0x18,
-0x00,
-0x1c,
-0x00,
-0x20,
-0x00,
-0x24,
-0x00,
-0x14,
-0x02,
-0x18,
-0x02,
-0x1c,
-0x02,
-0x20,
-0x02,
-0x24,
-0x02,
-0x14,
-0x04,
-0x18,
-0x04,
-0x1c,
-0x04,
-0x20,
-0x04,
-0x24,
-0x04,
-0x14,
-0x06,
-0x18,
-0x06,
-0x1c,
-0x06,
-0x20,
-0x06,
-0x24,
-0x06,
-0x14,
-0x08,
-0x28,
-0x00,
-0x2c,
-0x00,
-0x30,
-0x00,
-0x34,
-0x00,
-0x38,
-0x00,
-0x28,
-0x02,
-0x2c,
-0x02,
-0x30,
-0x02,
-0x34,
-0x02,
-0x38,
-0x02,
-0x28,
-0x04,
-0x2c,
-0x04,
-0x30,
-0x04,
-0x34,
-0x04,
-0x38,
-0x04,
-0x28,
-0x06,
-0x2c,
-0x06,
-0x30,
-0x06,
-0x34,
-0x06,
-0x38,
-0x06,
-0x28,
-0x08,
-0x3c,
-0x00,
-0x40,
-0x00,
-0x44,
-0x00,
-0x48,
-0x00,
-0x4c,
-0x00,
-0x3c,
-0x02,
-0x40,
-0x02,
-0x44,
-0x02,
-0x48,
-0x02,
-0x4c,
-0x02,
-0x3c,
-0x04,
-0x40,
-0x04,
-0x44,
-0x04,
-0x48,
-0x04,
-0x4c,
-0x04,
-0x3c,
-0x06,
-0x40,
-0x06,
-0x44,
-0x06,
-0x48,
-0x06,
-0x4c,
-0x06,
-0x3c,
-0x08,
-0x00,
-0x0a,
-0x04,
-0x0a,
-0x08,
-0x0a,
-0x0c,
-0x0a,
-0x10,
-0x0a,
-0x00,
-0x0c,
-0x04,
-0x0c,
-0x08,
-0x0c,
-0x0c,
-0x0c,
-0x10,
-0x0c,
-0x00,
-0x0e,
-0x04,
-0x0e,
-0x08,
-0x0e,
-0x0c,
-0x0e,
-0x10,
-0x0e,
-0x00,
-0x10,
-0x04,
-0x10,
-0x08,
-0x10,
-0x0c,
-0x10,
-0x10,
-0x10,
-0x00,
-0x12,
-0x14,
-0x0a,
-0x18,
-0x0a,
-0x1c,
-0x0a,
-0x20,
-0x0a,
-0x24,
-0x0a,
-0x14,
-0x0c,
-0x18,
-0x0c,
-0x1c,
-0x0c,
-0x20,
-0x0c,
-0x24,
-0x0c,
-0x14,
-0x0e,
-0x18,
-0x0e,
-0x1c,
-0x0e,
-0x20,
-0x0e,
-0x24,
-0x0e,
-0x14,
-0x10,
-0x18,
-0x10,
-0x1c,
-0x10,
-0x20,
-0x10,
-0x24,
-0x10,
-0x14,
-0x12,
-0x28,
-0x0a,
-0x2c,
-0x0a,
-0x30,
-0x0a,
-0x34,
-0x0a,
-0x38,
-0x0a,
-0x28,
-0x0c,
-0x2c,
-0x0c,
-0x30,
-0x0c,
-0x34,
-0x0c,
-0x38,
-0x0c,
-0x28,
-0x0e,
-0x2c,
-0x0e,
-0x30,
-0x0e,
-0x34,
-0x0e,
-0x38,
-0x0e,
-0x28,
-0x10,
-0x2c,
-0x10,
-0x30,
-0x10,
-0x34,
-0x10,
-0x38,
-0x10,
-0x28,
-0x12,
-0x3c,
-0x0a,
-0x40,
-0x0a,
-0x44,
-0x0a,
-0x48,
-0x0a,
-0x4c,
-0x0a,
-0x3c,
-0x0c,
-0x40,
-0x0c,
-0x44,
-0x0c,
-0x48,
-0x0c,
-0x4c,
-0x0c,
-0x3c,
-0x0e,
-0x40,
-0x0e,
-0x44,
-0x0e,
-0x48,
-0x0e,
-0x4c,
-0x0e,
-0x3c,
-0x10,
-0x40,
-0x10,
-0x44,
-0x10,
-0x48,
-0x10,
-0x4c,
-0x10,
-0x3c,
-0x12,
-0x00,
-0x14,
-0x04,
-0x14,
-0x08,
-0x14,
-0x0c,
-0x14,
-0x10,
-0x14,
-0x00,
-0x16,
-0x04,
-0x16,
-0x08,
-0x16,
-0x0c,
-0x16,
-0x10,
-0x16,
-0x00,
-0x18,
-0x04,
-0x18,
-0x08,
-0x18,
-0x0c,
-0x18,
-0x10,
-0x18,
-0x00,
-0x1a,
-0x04,
-0x1a,
-0x08,
-0x1a,
-0x0c,
-0x1a,
-0x10,
-0x1a,
-0x00,
-0x1c,
-0x14,
-0x14,
-0x18,
-0x14,
-0x1c,
-0x14,
-0x20,
-0x14,
-0x24,
-0x14,
-0x14,
-0x16,
-0x18,
-0x16,
-0x1c,
-0x16,
-0x20,
-0x16,
-0x24,
-0x16,
-0x14,
-0x18,
-0x18,
-0x18,
-0x1c,
-0x18,
-0x20,
-0x18,
-0x24,
-0x18,
-0x14,
-0x1a,
-0x18,
-0x1a,
-0x1c,
-0x1a,
-0x20,
-0x1a,
-0x24,
-0x1a,
-0x14,
-0x1c,
-0x28,
-0x14,
-0x2c,
-0x14,
-0x30,
-0x14,
-0x34,
-0x14,
-0x38,
-0x14,
-0x28,
-0x16,
-0x2c,
-0x16,
-0x30,
-0x16,
-0x34,
-0x16,
-0x38,
-0x16,
-0x28,
-0x18,
-0x2c,
-0x18,
-0x30,
-0x18,
-0x34,
-0x18,
-0x38,
-0x18,
-0x28,
-0x1a,
-0x2c,
-0x1a,
-0x30,
-0x1a,
-0x34,
-0x1a,
-0x38,
-0x1a,
-0x28,
-0x1c,
-0x3c,
-0x14,
-0x40,
-0x14,
-0x44,
-0x14,
-0x48,
-0x14,
-0x4c,
-0x14,
-0x3c,
-0x16,
-0x40,
-0x16,
-0x44,
-0x16,
-0x48,
-0x16,
-0x4c,
-0x16,
-0x3c,
-0x18,
-0x40,
-0x18,
-0x44,
-0x18,
-0x48,
-0x18,
-0x4c,
-0x18,
-0x3c,
-0x1a,
-0x40,
-0x1a,
-0x44,
-0x1a,
-0x48,
-0x1a,
-0x4c,
-0x1a,
-0x3c,
-0x1c,
-0x00,
-0x1e,
-0x04,
-0x1e,
-0x08,
-0x1e,
-0x0c,
-0x1e,
-0x10,
-0x1e,
-0x00,
-0x20,
-0x04,
-0x20,
-0x08,
-0x20,
-0x0c,
-0x20,
-0x10,
-0x20,
-0x00,
-0x22,
-0x04,
-0x22,
-0x08,
-0x22,
-0x0c,
-0x22,
-0x10,
-0x22,
-0x00,
-0x24,
-0x04,
-0x24,
-0x08,
-0x24,
-0x0c,
-0x24,
-0x10,
-0x24,
-0x00,
-0x26,
-0x14,
-0x1e,
-0x18,
-0x1e,
-0x1c,
-0x1e,
-0x20,
-0x1e,
-0x24,
-0x1e,
-0x14,
-0x20,
-0x18,
-0x20,
-0x1c,
-0x20,
-0x20,
-0x20,
-0x24,
-0x20,
-0x14,
-0x22,
-0x18,
-0x22,
-0x1c,
-0x22,
-0x20,
-0x22,
-0x24,
-0x22,
-0x14,
-0x24,
-0x18,
-0x24,
-0x1c,
-0x24,
-0x20,
-0x24,
-0x24,
-0x24,
-0x14,
-0x26,
-0x28,
-0x1e,
-0x2c,
-0x1e,
-0x30,
-0x1e,
-0x34,
-0x1e,
-0x38,
-0x1e,
-0x28,
-0x20,
-0x2c,
-0x20,
-0x30,
-0x20,
-0x34,
-0x20,
-0x38,
-0x20,
-0x28,
-0x22,
-0x2c,
-0x22,
-0x30,
-0x22,
-0x34,
-0x22,
-0x38,
-0x22,
-0x28,
-0x24,
-0x2c,
-0x24,
-0x30,
-0x24,
-0x34,
-0x24,
-0x38,
-0x24,
-0x28,
-0x26,
-0x3c,
-0x1e,
-0x40,
-0x1e,
-0x44,
-0x1e,
-0x48,
-0x1e,
-0x4c,
-0x1e,
-0x3c,
-0x20,
-0x40,
-0x20,
-0x44,
-0x20,
-0x48,
-0x20,
-0x4c,
-0x20,
-0x3c,
-0x22,
-0x40,
-0x22,
-0x44,
-0x22,
-0x48,
-0x22,
-0x4c,
-0x22,
-0x3c,
-0x24,
-0x40,
-0x24,
-0x44,
-0x24,
-0x48,
-0x24,
-0x4c,
-0x24,
-0x3c,
-0x26,
-0x00,
-0x28,
-0x04,
-0x28,
-0x08,
-0x28,
-0x0c,
-0x28,
-0x10,
-0x28,
-0x00,
-0x2a,
-0x04,
-0x2a,
-0x08,
-0x2a,
-0x0c,
-0x2a,
-0x10,
-0x2a,
-0x00,
-0x2c,
-0x04,
-0x2c,
-0x08,
-0x2c,
-0x0c,
-0x2c,
-0x10,
-0x2c,
-0x00,
-0x2e,
-0x04,
-0x2e,
-0x08,
-0x2e,
-0x0c,
-0x2e,
-0x10,
-0x2e,
-0x00,
-0x30,
-0x01,
-0x01,
-0x01,
-0x01,
-0x0c,
-0x1a,
-0x26,
-0x34,
-0x40,
-0x4c,
-0x5a,
-0x66,
-0x74,
-0x80,
-0x8c,
-0x9a,
-0xa6,
-0xb4,
-0xc0,
-0xcc,
-0xda,
-0xe6,
-0xf4,
-0x00,
-0x10,
-0x20,
-0x30,
-0x40,
-0x50,
-0x60,
-0x70,
-0x80,
-0x90,
-0xa0,
-0xb0,
-0xc0,
-0xd0,
-0xe0,
-0xf0,
-0x00,
-0x00,
-0x00,
-0x00,
-0x55,
-0x00,
-0xcc,
-0xaa,
-0x24,
-0x00,
-0x1c,
-0x66,
-0xd1,
-0x55,
-0xec,
-0x92,
-0x44,
-0x00,
-0xc3,
-0x8e,
-0x5e,
-0x33,
-0x0c,
-0xe8,
-0xc8,
-0xaa,
-0x8f,
-0x76,
-0x5e,
-0x49,
-0x34,
-0x22,
-0x10,
-0x00,
-0xf0,
-0xe1,
-0xd4,
-0xc7,
-0xba,
-0xaf,
-0xa4,
-0x99,
-0x8f,
-0x86,
-0x7d,
-0x74,
-0x6c,
-0x64,
-0x5c,
-0x55,
-0x4e,
-0x47,
-0x41,
-0x3b,
-0x35,
-0x2f,
-0x29,
-0x24,
-0x1f,
-0x1a,
-0x15,
-0x11,
-0x0c,
-0x08,
-0x04,
-0x00,
-0xfc,
-0xf8,
-0xf4,
-0xf0,
-0xed,
-0xea,
-0xe6,
-0xe3,
-0xe0,
-0xdd,
-0xda,
-0xd7,
-0xd4,
-0xd2,
-0xcf,
-0xcc,
-0xca,
-0xc7,
-0xc5,
-0xc3,
-0xc0,
-0xbe,
-0xbc,
-0xba,
-0xb8,
-0xb6,
-0xb4,
-0xb2,
-0xb0,
-0xae,
-0xac,
-0xaa,
-0xa8,
-0xa7,
-0xa5,
-0xa3,
-0xa2,
-0xa0,
-0x9f,
-0x9d,
-0x9c,
-0x9a,
-0x99,
-0x97,
-0x96,
-0x94,
-0x93,
-0x92,
-0x90,
-0x8f,
-0x8e,
-0x8d,
-0x8c,
-0x8a,
-0x89,
-0x88,
-0x87,
-0x86,
-0x85,
-0x84,
-0x83,
-0x82,
-0x81,
-0x80,
-0x7f,
-0x7e,
-0x7d,
-0x7c,
-0x7b,
-0x7a,
-0x79,
-0x78,
-0x77,
-0x76,
-0x75,
-0x75,
-0x74,
-0x73,
-0x72,
-0x71,
-0x70,
-0x70,
-0x6f,
-0x6e,
-0x6d,
-0x6d,
-0x6c,
-0x6b,
-0x6b,
-0x6a,
-0x69,
-0x69,
-0x68,
-0x67,
-0x67,
-0x66,
-0x65,
-0x65,
-0x64,
-0x63,
-0x63,
-0x62,
-0x62,
-0x61,
-0x60,
-0x60,
-0x5f,
-0x5f,
-0x5e,
-0x5e,
-0x5d,
-0x5d,
-0x5c,
-0x5c,
-0x5b,
-0x5b,
-0x5a,
-0x5a,
-0x59,
-0x59,
-0x58,
-0x58,
-0x57,
-0x57,
-0x56,
-0x56,
-0x55,
-0x55,
-0x54,
-0x54,
-0x54,
-0x53,
-0x53,
-0x52,
-0x52,
-0x51,
-0x51,
-0x51,
-0x50,
-0x50,
-0x4f,
-0x4f,
-0x4f,
-0x4e,
-0x4e,
-0x4e,
-0x4d,
-0x4d,
-0x4c,
-0x4c,
-0x4c,
-0x4b,
-0x4b,
-0x4b,
-0x4a,
-0x4a,
-0x4a,
-0x49,
-0x49,
-0x49,
-0x48,
-0x48,
-0x48,
-0x47,
-0x47,
-0x47,
-0x46,
-0x46,
-0x46,
-0x46,
-0x45,
-0x45,
-0x45,
-0x44,
-0x44,
-0x44,
-0x43,
-0x43,
-0x43,
-0x43,
-0x42,
-0x42,
-0x42,
-0x42,
-0x41,
-0x41,
-0x41,
-0x41,
-0x40,
-0x40,
-0x40,
-0x40,
-0x40,
-0x20,
-0x15,
-0x10,
-0x0c,
-0x0a,
-0x09,
-0x08,
-0x07,
-0x06,
-0x05,
-0x05,
-0x04,
-0x04,
-0x04,
-0x04,
-0x03,
-0x03,
-0x03,
-0x03,
-0x03,
-0x02,
-0x02,
-0x02,
-0x02,
-0x02,
-0x02,
-0x02,
-0x02,
-0x02,
-0x02,
-0x02,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x01,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0x00,
-0xfe,
-0xfc,
-0xfa,
-0xf8,
-0xf6,
-0xf4,
-0xf2,
-0xf0,
-0xef,
-0xed,
-0xeb,
-0xe9,
-0xe8,
-0xe6,
-0xe4,
-0xe3,
-0xe1,
-0xe0,
-0xde,
-0xdd,
-0xdb,
-0xda,
-0xd8,
-0xd7,
-0xd5,
-0xd4,
-0xd3,
-0xd1,
-0xd0,
-0xcf,
-0xcd,
-0xcc,
-0xcb,
-0xc9,
-0xc8,
-0xc7,
-0xc6,
-0xc5,
-0xc3,
-0xc2,
-0xc1,
-0xc0,
-0xbf,
-0xbe,
-0xbd,
-0xbb,
-0xba,
-0xb9,
-0xb8,
-0xb7,
-0xb6,
-0xb5,
-0xb4,
-0xb3,
-0xb2,
-0xb1,
-0xb0,
-0xaf,
-0xae,
-0xad,
-0xac,
-0xac,
-0xab,
-0xaa,
-0xa9,
-0xa8,
-0xa7,
-0xa6,
-0xa5,
-0xa5,
-0xa4,
-0xa3,
-0xa2,
-0xa1,
-0xa0,
-0xa0,
-0x9f,
-0x9e,
-0x9d,
-0x9d,
-0x9c,
-0x9b,
-0x9a,
-0x9a,
-0x99,
-0x98,
-0x97,
-0x97,
-0x96,
-0x95,
-0x95,
-0x94,
-0x93,
-0x93,
-0x92,
-0x91,
-0x91,
-0x90,
-0x8f,
-0x8f,
-0x8e,
-0x8d,
-0x8d,
-0x8c,
-0x8c,
-0x8b,
-0x8a,
-0x8a,
-0x89,
-0x89,
-0x88,
-0x88,
-0x87,
-0x86,
-0x86,
-0x85,
-0x85,
-0x84,
-0x84,
-0x83,
-0x83,
-0x82,
-0x82,
-0x81,
-0x81,
-0x80,
-0x80,
-0x7f,
-0x00,
-0x80,
-0x00,
-0x00,
-0x80,
-0x00,
-0x00,
-0x00,
-0x00,
-0xae,
-0x00,
-0x93,
-0xae,
-0x75,
-0x00,
-0x5c,
-0x93,
-0xad,
-0xae,
-0x9b,
-0x75,
-0x41,
-0x00,
-0xb3,
-0x5c,
-0xfc,
-0x93,
-0x23,
-0xad,
-0x30,
-0xae,
-0x27,
-0x9b,
-0x0a,
-0x75,
-0xdd,
-0x41,
-0xa2,
-0x00,
-0x5b,
-0xb3,
-0x09,
-0x5c,
-0xad,
-0xfc,
-0x49,
-0x93,
-0xdc,
-0x23,
-0x69,
-0xad,
-0xef,
-0x30,
-0x70,
-0xae,
-0xeb,
-0x27,
-0x61,
-0x9b,
-0xd3,
-0x0a,
-0x40,
-0x75,
-0xaa,
-0xdd,
-0x10,
-0x41,
-0x72,
-0xa2,
-0xd1,
-0x00,
-0x2e,
-0x5b,
-0x87,
-0xb3,
-0xde,
-0x09,
-0x33,
-0x5c,
-0x85,
-0xad,
-0xd5,
-0xfc,
-0x22,
-0x49,
-0x6e,
-0x93,
-0xb8,
-0xdc,
-0x00,
-0x23,
-0x46,
-0x69,
-0x8b,
-0xad,
-0xce,
-0xef,
-0x10,
-0x30,
-0x50,
-0x70,
-0x8f,
-0xae,
-0xcd,
-0xeb,
-0x09,
-0x27,
-0x44,
-0x61,
-0x7e,
-0x9b,
-0xb7,
-0xd3,
-0xef,
-0x0a,
-0x25,
-0x40,
-0x5b,
-0x75,
-0x90,
-0xaa,
-0xc4,
-0xdd,
-0xf7,
-0x10,
-0x29,
-0x41,
-0x5a,
-0x72,
-0x8a,
-0xa2,
-0xba,
-0xd1,
-0xe9,
-0x00,
-0x17,
-0x2e,
-0x44,
-0x5b,
-0x71,
-0x87,
-0x9d,
-0xb3,
-0xc9,
-0xde,
-0xf4,
-0x09,
-0x1e,
-0x33,
-0x47,
-0x5c,
-0x70,
-0x85,
-0x99,
-0xad,
-0xc1,
-0xd5,
-0xe8,
-0xfc,
-0x0f,
-0x22,
-0x36,
-0x49,
-0x5b,
-0x6e,
-0x81,
-0x93,
-0xa6,
-0xb8,
-0xca,
-0xdc,
-0xee,
-0x00,
-0x12,
-0x23,
-0x35,
-0x46,
-0x58,
-0x69,
-0x7a,
-0x8b,
-0x9c,
-0xad,
-0xbe,
-0xce,
-0xdf,
-0xef,
-0x00,
-0x10,
-0x20,
-0x30,
-0x40,
-0x50,
-0x60,
-0x70,
-0x7f,
-0x8f,
-0x9f,
-0xae,
-0xbd,
-0xcd,
-0xdc,
-0xeb,
-0xfa,
-0x09,
-0x18,
-0x27,
-0x35,
-0x44,
-0x53,
-0x61,
-0x70,
-0x7e,
-0x8c,
-0x9b,
-0xa9,
-0xb7,
-0xc5,
-0xd3,
-0xe1,
-0xef,
-0xfc,
-0x0a,
-0x18,
-0x25,
-0x33,
-0x40,
-0x4e,
-0x5b,
-0x68,
-0x75,
-0x83,
-0x90,
-0x9d,
-0xaa,
-0xb7,
-0xc4,
-0xd0,
-0xdd,
-0xea,
-0xf7,
-0x03,
-0x10,
-0x1c,
-0x29,
-0x35,
-0x41,
-0x4e,
-0x5a,
-0x66,
-0x72,
-0x7e,
-0x8a,
-0x96,
-0xa2,
-0xae,
-0xba,
-0xc6,
-0xd1,
-0xdd,
-0xe9,
-0xf4,
-0x00,
-0x00,
-0x08,
-0x0c,
-0x10,
-0x12,
-0x14,
-0x16,
-0x18,
-0x19,
-0x1a,
-0x1b,
-0x1c,
-0x1d,
-0x1e,
-0x1f,
-0x20,
-0x20,
-0x21,
-0x21,
-0x22,
-0x23,
-0x23,
-0x24,
-0x24,
-0x25,
-0x25,
-0x26,
-0x26,
-0x26,
-0x27,
-0x27,
-0x28,
-0x28,
-0x28,
-0x29,
-0x29,
-0x29,
-0x29,
-0x2a,
-0x2a,
-0x2a,
-0x2b,
-0x2b,
-0x2b,
-0x2b,
-0x2c,
-0x2c,
-0x2c,
-0x2c,
-0x2d,
-0x2d,
-0x2d,
-0x2d,
-0x2e,
-0x2e,
-0x2e,
-0x2e,
-0x2e,
-0x2f,
-0x2f,
-0x2f,
-0x2f,
-0x2f,
-0x30,
-0x30,
-0x30,
-0x30,
-0x30,
-0x30,
-0x31,
-0x31,
-0x31,
-0x31,
-0x31,
-0x31,
-0x31,
-0x32,
-0x32,
-0x32,
-0x32,
-0x32,
-0x32,
-0x33,
-0x33,
-0x33,
-0x33,
-0x33,
-0x33,
-0x33,
-0x33,
-0x34,
-0x34,
-0x34,
-0x34,
-0x34,
-0x34,
-0x34,
-0x34,
-0x35,
-0x35,
-0x35,
-0x35,
-0x35,
-0x35,
-0x35,
-0x35,
-0x35,
-0x36,
-0x36,
-0x36,
-0x36,
-0x36,
-0x36,
-0x36,
-0x36,
-0x36,
-0x36,
-0x37,
-0x37,
-0x37,
-0x37,
-0x37,
-0x37,
-0x37,
-0x37,
-0x37,
-0x37,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x38,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x39,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3a,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3b,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3c,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3d,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3e,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x7f,
-0x7f,
-0xf7,
-0x7f,
-0x6f,
-0x80,
-0xe7,
-0x80,
-0x0f,
-0x81,
-0x37,
-0x81,
-0x21,
-0x7d,
-};
-uint8_t dopcode_u_2_1[] =
-{
-0xa0,
-0x00,
-0x80,
-0x02,
-0xa0,
-0x01,
-0x78,
-0xa2,
-0xff,
-0x9a,
-0xf8,
-0xb8,
-0xc0,
-0x00,
-0xf0,
-0x0a,
-0x20,
-0x69,
-0x27,
-0xf0,
-0x05,
-0xa2,
-0x01,
-0x4c,
-0x8f,
-0x03,
-0x64,
-0x10,
-0x64,
-0x11,
-0x64,
-0x13,
-0xa9,
-0x01,
-0x85,
-0x12,
-0xa0,
-0x50,
-0x13,
-0x10,
-0x00,
-0x52,
-0x02,
-0xa0,
-0x52,
-0x13,
-0x10,
-0x00,
-0x00,
-0x02,
-0xa9,
-0x11,
-0x8d,
-0xa4,
-0x02,
-0xa9,
-0x80,
-0x8d,
-0x4a,
-0x02,
-0x8d,
-0x4b,
-0x02,
-0x8d,
-0x4c,
-0x02,
-0x8d,
-0x4d,
-0x02,
-0x8d,
-0x4e,
-0x02,
-0x8d,
-0x4f,
-0x02,
-0x8d,
-0x50,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x00,
-0x02,
-0xa9,
-0x02,
-0x8d,
-0x01,
-0x02,
-0xa9,
-0xed,
-0x8d,
-0x02,
-0x02,
-0xa9,
-0xb4,
-0x8d,
-0x03,
-0x02,
-0xa9,
-0xff,
-0x8d,
-0xa2,
-0x02,
-0x8d,
-0xa3,
-0x02,
-0xa0,
-0x03,
-0x53,
-0xcc,
-0x3b,
-0x04,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x07,
-0x02,
-0xcd,
-0xce,
-0x3b,
-0xf0,
-0x04,
-0xa2,
-0x03,
-0x80,
-0x10,
-0xa2,
-0x02,
-0xad,
-0x00,
-0x60,
-0xc9,
-0xed,
-0xd0,
-0x07,
-0xad,
-0x01,
-0x60,
-0xc9,
-0xb4,
-0xf0,
-0x0e,
-0x8e,
-0x08,
-0x02,
-0xa9,
-0x01,
-0x9c,
-0x14,
-0x68,
-0x8d,
-0x14,
-0x68,
-0x5c,
-0x80,
-0xfd,
-0x9c,
-0x14,
-0x68,
-0x9c,
-0x18,
-0x68,
-0x9c,
-0x20,
-0x68,
-0x9c,
-0x24,
-0x68,
-0x9c,
-0x28,
-0x68,
-0xa9,
-0xf8,
-0x85,
-0x0e,
-0xa9,
-0x22,
-0x85,
-0x0f,
-0xa9,
-0x8e,
-0x85,
-0x02,
-0xa9,
-0x22,
-0x85,
-0x03,
-0xa9,
-0x40,
-0x85,
-0x04,
-0xa9,
-0x25,
-0x85,
-0x05,
-0xa9,
-0x09,
-0x85,
-0x06,
-0xa9,
-0x23,
-0x85,
-0x07,
-0xa9,
-0x7c,
-0x85,
-0x08,
-0xa9,
-0x23,
-0x85,
-0x09,
-0xa0,
-0x0e,
-0x13,
-0x10,
-0x00,
-0xa5,
-0x02,
-0x9c,
-0xbb,
-0x02,
-0x9c,
-0xbc,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0xb3,
-0x02,
-0xa9,
-0x02,
-0x8d,
-0xb4,
-0x02,
-0x8d,
-0xb5,
-0x02,
-0xa0,
-0x02,
-0x53,
-0xa2,
-0x3c,
-0xb6,
-0x02,
-0x53,
-0xa4,
-0x3c,
-0xb8,
-0x02,
-0x13,
-0x10,
-0x00,
-0x5b,
-0x2d,
-0x13,
-0x10,
-0x00,
-0xbe,
-0x2d,
-0x13,
-0x10,
-0x00,
-0x63,
-0x00,
-0xa0,
-0x02,
-0x13,
-0x10,
-0x00,
-0xaf,
-0x2d,
-0x13,
-0x10,
-0x00,
-0x12,
-0x2e,
-0x13,
-0x10,
-0x00,
-0xb7,
-0x00,
-0x9c,
-0xba,
-0x02,
-0xa9,
-0x04,
-0x8d,
-0xb1,
-0x2d,
-0x8d,
-0x14,
-0x2e,
-0x64,
-0xb9,
-0x9c,
-0xa8,
-0x2c,
-0x9c,
-0xa9,
-0x2c,
-0x9c,
-0xaa,
-0x2c,
-0x9c,
-0xb1,
-0x2c,
-0x9c,
-0xb2,
-0x2c,
-0x9c,
-0xb3,
-0x2c,
-0x9c,
-0xb4,
-0x2c,
-0x9c,
-0xb5,
-0x2c,
-0x9c,
-0xb6,
-0x2c,
-0xa9,
-0x01,
-0x8d,
-0x04,
-0x60,
-0x9c,
-0xdd,
-0x28,
-0x58,
-0x8d,
-0x14,
-0x68,
-0x4c,
-0x9a,
-0x03,
-0xf0,
-0x30,
-0xad,
-0xb7,
-0x2c,
-0xaa,
-0x29,
-0x03,
-0x85,
-0x6d,
-0xd0,
-0x0a,
-0xa9,
-0x01,
-0x85,
-0x67,
-0x85,
-0x68,
-0x85,
-0x69,
-0x80,
-0x16,
-0x8a,
-0x4a,
-0x4a,
-0xaa,
-0x29,
-0x01,
-0x85,
-0x67,
-0x8a,
-0x4a,
-0xaa,
-0x29,
-0x01,
-0x85,
-0x68,
-0x8a,
-0x4a,
-0xaa,
-0x29,
-0x01,
-0x85,
-0x69,
-0x20,
-0x0c,
-0x0d,
-0xf0,
-0x01,
-0x60,
-0xad,
-0xfe,
-0x2c,
-0xd0,
-0x02,
-0xa9,
-0x11,
-0x85,
-0xb8,
-0xcd,
-0xbb,
-0x02,
-0xf0,
-0x12,
-0x29,
-0xf0,
-0xf0,
-0x08,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0x85,
-0xb7,
-0x80,
-0x0e,
-0xa9,
-0x10,
-0x85,
-0xb7,
-0x80,
-0x08,
-0xad,
-0xbc,
-0x02,
-0x85,
-0xb7,
-0x20,
-0x70,
-0x18,
-0xad,
-0xfd,
-0x2c,
-0x85,
-0x73,
-0xa0,
-0x02,
-0x53,
-0xca,
-0x2c,
-0xc1,
-0x00,
-0x53,
-0xd0,
-0x2c,
-0xcd,
-0x00,
-0x20,
-0x3d,
-0x12,
-0xf0,
-0x01,
-0x60,
-0xa0,
-0x02,
-0x53,
-0x2d,
-0x00,
-0x5f,
-0x00,
-0xa5,
-0x60,
-0xcd,
-0xf6,
-0x3f,
-0x90,
-0x09,
-0xd0,
-0x0f,
-0xa5,
-0x5f,
-0xcd,
-0xf5,
-0x3f,
-0xb0,
-0x08,
-0xad,
-0xf7,
-0x2c,
-0xae,
-0xfa,
-0x2c,
-0x80,
-0x1e,
-0xa5,
-0x60,
-0xcd,
-0xf8,
-0x3f,
-0x90,
-0x09,
-0xd0,
-0x0f,
-0xa5,
-0x5f,
-0xcd,
-0xf7,
-0x3f,
-0xb0,
-0x08,
-0xad,
-0xf8,
-0x2c,
-0xae,
-0xfb,
-0x2c,
-0x80,
-0x06,
-0xad,
-0xf9,
-0x2c,
-0xae,
-0xfc,
-0x2c,
-0x85,
-0x76,
-0x86,
-0x78,
-0xad,
-0xf6,
-0x2c,
-0x85,
-0x77,
-0xa5,
-0x6e,
-0xd0,
-0x4e,
-0xa5,
-0x6d,
-0xc9,
-0x02,
-0xd0,
-0x48,
-0xad,
-0xb1,
-0x02,
-0xc5,
-0x77,
-0x90,
-0x11,
-0x38,
-0xe5,
-0x77,
-0x4d,
-0x0f,
-0x3c,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x18,
-0x65,
-0x77,
-0x80,
-0x16,
-0xa5,
-0x77,
-0x38,
-0xed,
-0xb1,
-0x02,
-0x4d,
-0x0f,
-0x3c,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x85,
-0xbd,
-0x38,
-0xa5,
-0x77,
-0xe5,
-0xbd,
-0x85,
-0x77,
-0xad,
-0xb0,
-0x02,
-0xc5,
-0x76,
-0x90,
-0x13,
-0x38,
-0xe5,
-0x76,
-0x4d,
-0x0f,
-0x3c,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x18,
-0x65,
-0x76,
-0x80,
-0x18,
-0x80,
-0x48,
-0xa5,
-0x76,
-0x38,
-0xed,
-0xb0,
-0x02,
-0x4d,
-0x0f,
-0x3c,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x85,
-0xbd,
-0x38,
-0xa5,
-0x76,
-0xe5,
-0xbd,
-0x85,
-0x76,
-0xad,
-0xb2,
-0x02,
-0xc5,
-0x78,
-0x90,
-0x11,
-0x38,
-0xe5,
-0x78,
-0x4d,
-0x0f,
-0x3c,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x18,
-0x65,
-0x78,
-0x80,
-0x16,
-0xa5,
-0x78,
-0x38,
-0xed,
-0xb2,
-0x02,
-0x4d,
-0x0f,
-0x3c,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x85,
-0xbd,
-0x38,
-0xa5,
-0x78,
-0xe5,
-0xbd,
-0x85,
-0x78,
-0xa0,
-0x02,
-0xad,
-0x0b,
-0x3c,
-0xd0,
-0x07,
-0x53,
-0xca,
-0x2c,
-0xc1,
-0x00,
-0x80,
-0x05,
-0x53,
-0xce,
-0x2c,
-0xc1,
-0x00,
-0x53,
-0xd4,
-0x2c,
-0xcd,
-0x00,
-0x20,
-0x3d,
-0x12,
-0xf0,
-0x01,
-0x60,
-0xa0,
-0x02,
-0x53,
-0x2d,
-0x00,
-0x2b,
-0x00,
-0x18,
-0xad,
-0xda,
-0x2c,
-0x69,
-0x02,
-0xb0,
-0x10,
-0x4a,
-0x4a,
-0xc9,
-0x08,
-0x90,
-0x06,
-0xc9,
-0x40,
-0xb0,
-0x06,
-0x80,
-0x06,
-0xa9,
-0x08,
-0x80,
-0x02,
-0xa9,
-0x3f,
-0x85,
-0x7a,
-0x18,
-0xad,
-0xdb,
-0x2c,
-0x69,
-0x02,
-0xb0,
-0x10,
-0x4a,
-0x4a,
-0xc9,
-0x08,
-0x90,
-0x06,
-0xc9,
-0x40,
-0xb0,
-0x06,
-0x80,
-0x06,
-0xa9,
-0x08,
-0x80,
-0x02,
-0xa9,
-0x3f,
-0x85,
-0x7b,
-0xa4,
-0x7a,
-0xb9,
-0x87,
-0x28,
-0x85,
-0x7c,
-0x45,
-0x7b,
-0x20,
-0x74,
-0x21,
-0x85,
-0x30,
-0xa4,
-0x7b,
-0xb9,
-0x87,
-0x28,
-0x85,
-0x7d,
-0x45,
-0x7a,
-0x20,
-0x74,
-0x21,
-0x85,
-0x2f,
-0xa0,
-0x02,
-0xad,
-0xdd,
-0x2c,
-0xd0,
-0x0c,
-0xad,
-0xdc,
-0x2c,
-0xd0,
-0x07,
-0x53,
-0xb6,
-0x02,
-0xc1,
-0x00,
-0x80,
-0x05,
-0x53,
-0xdc,
-0x2c,
-0xc1,
-0x00,
-0x20,
-0xb5,
-0x0c,
-0x85,
-0x74,
-0xa0,
-0x02,
-0xad,
-0xdf,
-0x2c,
-0xd0,
-0x0c,
-0xad,
-0xde,
-0x2c,
-0xd0,
-0x07,
-0x53,
-0xb8,
-0x02,
-0xc1,
-0x00,
-0x80,
-0x05,
-0x53,
-0xde,
-0x2c,
-0xc1,
-0x00,
-0x20,
-0xb5,
-0x0c,
-0x85,
-0x75,
-0xa5,
-0x68,
-0xf0,
-0x04,
-0x64,
-0x80,
-0x80,
-0x10,
-0xa5,
-0x75,
-0xc9,
-0x02,
-0xb0,
-0x05,
-0xad,
-0xa6,
-0x3c,
-0x80,
-0x03,
-0xad,
-0xa7,
-0x3c,
-0x85,
-0x80,
-0xad,
-0xa9,
-0x3c,
-0x49,
-0x10,
-0x84,
-0xc2,
-0x85,
-0xc1,
-0xa5,
-0x7b,
-0x85,
-0xc3,
-0x64,
-0xc4,
-0x20,
-0xcf,
-0x27,
-0xa5,
-0xc2,
-0xd0,
-0x06,
-0xa5,
-0xc1,
-0xc9,
-0x3f,
-0x90,
-0x02,
-0xa9,
-0x3f,
-0x85,
-0x81,
-0xad,
-0xa8,
-0x3c,
-0x45,
-0x7a,
-0x84,
-0xc2,
-0x85,
-0xc1,
-0xa5,
-0x7b,
-0x85,
-0xc3,
-0x64,
-0xc4,
-0x20,
-0xcf,
-0x27,
-0xa5,
-0xc2,
-0xd0,
-0x06,
-0xa5,
-0xc1,
-0xc9,
-0x3f,
-0x90,
-0x02,
-0xa9,
-0x3f,
-0x85,
-0x82,
-0xa9,
-0x00,
-0xa6,
-0x74,
-0xe0,
-0x02,
-0xb0,
-0x08,
-0xa9,
-0x01,
-0xe4,
-0x75,
-0xf0,
-0x02,
-0xa9,
-0x02,
-0x85,
-0x83,
-0xa0,
-0x00,
-0xa5,
-0x60,
-0xd9,
-0xb9,
-0x3c,
-0x90,
-0x11,
-0xd0,
-0x07,
-0xa5,
-0x5f,
-0xd9,
-0xb8,
-0x3c,
-0x90,
-0x08,
-0xc8,
-0xc8,
-0xc0,
-0x06,
-0xf0,
-0x02,
-0x80,
-0xe8,
-0x98,
-0x4a,
-0x49,
-0x03,
-0xa8,
-0xb9,
-0xbe,
-0x3c,
-0x85,
-0x84,
-0xb9,
-0xbf,
-0x3c,
-0x85,
-0x85,
-0xb9,
-0xc0,
-0x3c,
-0x85,
-0x86,
-0xa5,
-0x74,
-0x4a,
-0xaa,
-0xbd,
-0xf7,
-0x3c,
-0x85,
-0x87,
-0x29,
-0x01,
-0xf0,
-0x1e,
-0xa0,
-0x02,
-0xad,
-0x0b,
-0x3c,
-0xd0,
-0x07,
-0x53,
-0xca,
-0x2c,
-0xc1,
-0x00,
-0x80,
-0x05,
-0x53,
-0xcc,
-0x2c,
-0xc1,
-0x00,
-0x53,
-0xd2,
-0x2c,
-0xcd,
-0x00,
-0x20,
-0x3d,
-0x12,
-0xf0,
-0x01,
-0x60,
-0xa5,
-0x2d,
-0x49,
-0x10,
-0x85,
-0xc5,
-0x84,
-0xc6,
-0xa5,
-0x2e,
-0x49,
-0x10,
-0x05,
-0xc6,
-0x85,
-0xc6,
-0x84,
-0xc7,
-0x64,
-0xc8,
-0xa0,
-0x02,
-0x53,
-0x5f,
-0x00,
-0xc1,
-0x00,
-0x20,
-0x87,
-0x21,
-0xa5,
-0xc7,
-0xd0,
-0x0e,
-0xa5,
-0xc6,
-0xd0,
-0x0a,
-0xa4,
-0xc5,
-0xc0,
-0x08,
-0x90,
-0x08,
-0xc0,
-0x3f,
-0x90,
-0x06,
-0xa0,
-0x3f,
-0x80,
-0x02,
-0xa0,
-0x08,
-0xb9,
-0x87,
-0x28,
-0x85,
-0x88,
-0xa5,
-0x75,
-0xc9,
-0x02,
-0x90,
-0x05,
-0x20,
-0x29,
-0x13,
-0x80,
-0x19,
-0xad,
-0xf6,
-0x3c,
-0x85,
-0x8b,
-0xad,
-0xf5,
-0x3c,
-0x45,
-0x7a,
-0x20,
-0x58,
-0x21,
-0x85,
-0x89,
-0xad,
-0xf4,
-0x3c,
-0x45,
-0x7b,
-0x20,
-0x58,
-0x21,
-0x85,
-0x8a,
-0x20,
-0x02,
-0x14,
-0x20,
-0x48,
-0x14,
-0xa5,
-0x78,
-0xaa,
-0x20,
-0x9f,
-0x14,
-0x85,
-0xbe,
-0x8a,
-0x20,
-0xb9,
-0x14,
-0x85,
-0xbf,
-0xa5,
-0x32,
-0x0a,
-0x45,
-0xbe,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x1f,
-0x90,
-0x02,
-0xa9,
-0x1f,
-0x85,
-0x8c,
-0xa5,
-0x33,
-0x0a,
-0x45,
-0xbe,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x1f,
-0x90,
-0x02,
-0xa9,
-0x1f,
-0x85,
-0x8d,
-0xa5,
-0x36,
-0x0a,
-0x45,
-0xbf,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x3f,
-0x90,
-0x02,
-0xa9,
-0x3f,
-0xa8,
-0xb9,
-0x47,
-0x28,
-0xaa,
-0x29,
-0x0f,
-0x85,
-0x93,
-0x8a,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0x85,
-0x92,
-0xa5,
-0x31,
-0x85,
-0x94,
-0xa5,
-0x69,
-0xf0,
-0x08,
-0x64,
-0x8e,
-0x64,
-0x8f,
-0xa9,
-0x3f,
-0x80,
-0x5f,
-0xa5,
-0x34,
-0x0a,
-0x45,
-0xbe,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x1f,
-0x90,
-0x02,
-0xa9,
-0x1f,
-0x0a,
-0x45,
-0x76,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x1f,
-0x90,
-0x02,
-0xa9,
-0x1f,
-0x85,
-0x8e,
-0xa5,
-0x35,
-0x0a,
-0x45,
-0xbe,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x1f,
-0x90,
-0x02,
-0xa9,
-0x1f,
-0x0a,
-0x45,
-0x76,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x1f,
-0x90,
-0x02,
-0xa9,
-0x1f,
-0x85,
-0x8f,
-0xa5,
-0x76,
-0x20,
-0xcc,
-0x14,
-0x85,
-0xc0,
-0xa5,
-0x36,
-0x0a,
-0x45,
-0xbf,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x3f,
-0x90,
-0x02,
-0xa9,
-0x3f,
-0x0a,
-0x45,
-0xc0,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x3f,
-0x90,
-0x02,
-0xa9,
-0x3f,
-0xa8,
-0xb9,
-0x47,
-0x28,
-0xaa,
-0x29,
-0x0f,
-0x85,
-0x91,
-0x8a,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0x85,
-0x90,
-0xa5,
-0x6a,
-0xc9,
-0x02,
-0xb0,
-0x04,
-0xa2,
-0x00,
-0x80,
-0x02,
-0xa2,
-0x36,
-0x86,
-0xbd,
-0xbd,
-0x88,
-0x3f,
-0x85,
-0x96,
-0xa2,
-0x00,
-0x18,
-0x8a,
-0x65,
-0xbd,
-0xa8,
-0xa5,
-0x60,
-0xd9,
-0x8a,
-0x3f,
-0x90,
-0x11,
-0xd0,
-0x07,
-0xa5,
-0x5f,
-0xd9,
-0x89,
-0x3f,
-0x90,
-0x08,
-0xe8,
-0xe8,
-0xe0,
-0x08,
-0xf0,
-0x02,
-0x80,
-0xe3,
-0x8a,
-0x4a,
-0x49,
-0x09,
-0x18,
-0x65,
-0xbd,
-0xaa,
-0xbd,
-0x91,
-0x3f,
-0x85,
-0x97,
-0xbd,
-0x92,
-0x3f,
-0x85,
-0x98,
-0xbd,
-0x93,
-0x3f,
-0x85,
-0x99,
-0xbd,
-0x94,
-0x3f,
-0x85,
-0x9a,
-0xbd,
-0x98,
-0x3f,
-0x85,
-0x9e,
-0xbd,
-0x99,
-0x3f,
-0x85,
-0x9f,
-0xbd,
-0x95,
-0x3f,
-0x85,
-0x9b,
-0xbd,
-0x96,
-0x3f,
-0x85,
-0x9c,
-0xbd,
-0x97,
-0x3f,
-0x85,
-0x9d,
-0xa5,
-0x69,
-0xf0,
-0x04,
-0xa9,
-0x00,
-0x80,
-0x72,
-0xa5,
-0x76,
-0x30,
-0x0f,
-0x85,
-0xbd,
-0x38,
-0xa9,
-0x80,
-0xe5,
-0xbd,
-0x85,
-0xbd,
-0xa9,
-0x20,
-0x85,
-0xbe,
-0x80,
-0x06,
-0x29,
-0x7f,
-0x85,
-0xbd,
-0x64,
-0xbe,
-0x38,
-0xa5,
-0xbe,
-0xe5,
-0x9b,
-0x85,
-0xbf,
-0x3c,
-0x45,
-0xbd,
-0xaa,
-0xa5,
-0xbd,
-0x10,
-0x05,
-0x98,
-0x18,
-0x65,
-0xbf,
-0xa8,
-0x8a,
-0x0a,
-0x98,
-0x2a,
-0x18,
-0x65,
-0x9b,
-0x85,
-0x9b,
-0x38,
-0xa5,
-0xbe,
-0xe5,
-0x9c,
-0x85,
-0xbf,
-0x3c,
-0x45,
-0xbd,
-0xaa,
-0xa5,
-0xbd,
-0x10,
-0x05,
-0x98,
-0x18,
-0x65,
-0xbf,
-0xa8,
-0x8a,
-0x0a,
-0x98,
-0x2a,
-0x18,
-0x65,
-0x9c,
-0x85,
-0x9c,
-0x38,
-0xa5,
-0xbe,
-0xe5,
-0x9d,
-0x85,
-0xbf,
-0x3c,
-0x45,
-0xbd,
-0xaa,
-0xa5,
-0xbd,
-0x10,
-0x05,
-0x98,
-0x18,
-0x65,
-0xbf,
-0xa8,
-0x8a,
-0x0a,
-0x98,
-0x2a,
-0x18,
-0x65,
-0x9d,
-0x85,
-0x9d,
-0xa9,
-0x01,
-0x85,
-0x95,
-0xa5,
-0x7a,
-0x85,
-0xbd,
-0x4a,
-0x85,
-0xc1,
-0xa9,
-0x08,
-0x85,
-0xc2,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc2,
-0xd0,
-0x04,
-0xa5,
-0xc1,
-0x80,
-0x02,
-0xa9,
-0xff,
-0x85,
-0xa5,
-0xa5,
-0x7b,
-0x85,
-0xbd,
-0x4a,
-0x85,
-0xc1,
-0xa9,
-0x08,
-0x85,
-0xc2,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc2,
-0xd0,
-0x04,
-0xa5,
-0xc1,
-0x80,
-0x02,
-0xa9,
-0xff,
-0x85,
-0xa4,
-0xa5,
-0x7a,
-0x85,
-0xbd,
-0x4a,
-0x18,
-0x69,
-0xf0,
-0x85,
-0xc1,
-0xa9,
-0x00,
-0x69,
-0x3d,
-0x85,
-0xc2,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc2,
-0xc9,
-0x03,
-0x90,
-0x10,
-0xd0,
-0x06,
-0xa5,
-0xc1,
-0xc9,
-0xdf,
-0x90,
-0x08,
-0xa9,
-0xdf,
-0x85,
-0xc1,
-0xa9,
-0x03,
-0x85,
-0xc2,
-0x18,
-0xa9,
-0x20,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0x46,
-0xc2,
-0x66,
-0xc1,
-0x46,
-0xc2,
-0xa5,
-0xc1,
-0x6a,
-0x85,
-0xa2,
-0xa5,
-0x7b,
-0x85,
-0xbd,
-0x4a,
-0x18,
-0x69,
-0xf0,
-0x85,
-0xc1,
-0xa9,
-0x00,
-0x69,
-0x3d,
-0x85,
-0xc2,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc2,
-0xc9,
-0x03,
-0x90,
-0x10,
-0xd0,
-0x06,
-0xa5,
-0xc1,
-0xc9,
-0xdf,
-0x90,
-0x08,
-0xa9,
-0xdf,
-0x85,
-0xc1,
-0xa9,
-0x03,
-0x85,
-0xc2,
-0x18,
-0xa9,
-0x20,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0x46,
-0xc2,
-0x66,
-0xc1,
-0x46,
-0xc2,
-0xa5,
-0xc1,
-0x6a,
-0x85,
-0xa0,
-0x64,
-0xa3,
-0x64,
-0xbd,
-0xa5,
-0x7a,
-0xc9,
-0x10,
-0xb0,
-0x06,
-0x85,
-0xbd,
-0xa9,
-0x01,
-0x85,
-0xa3,
-0xa5,
-0x7b,
-0xc9,
-0x10,
-0xb0,
-0x10,
-0xa5,
-0xa3,
-0x09,
-0x02,
-0x85,
-0xa3,
-0xa5,
-0x7b,
-0xc5,
-0xbd,
-0x90,
-0x08,
-0x85,
-0xbd,
-0x80,
-0x04,
-0xa5,
-0xa3,
-0xf0,
-0x45,
-0xa5,
-0xbd,
-0x49,
-0xdf,
-0x85,
-0xc1,
-0x84,
-0xc2,
-0xa5,
-0xbd,
-0x49,
-0x03,
-0x18,
-0x65,
-0xc2,
-0x85,
-0xc2,
-0x18,
-0xa9,
-0x08,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0xa5,
-0xc1,
-0x49,
-0x10,
-0x84,
-0xc1,
-0xa5,
-0xc2,
-0x49,
-0x10,
-0x18,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x84,
-0xc2,
-0x18,
-0xa9,
-0x20,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0x46,
-0xc2,
-0x66,
-0xc1,
-0x46,
-0xc2,
-0xa5,
-0xc1,
-0x6a,
-0x85,
-0xa1,
-0x80,
-0x02,
-0x64,
-0xa1,
-0xa5,
-0x74,
-0x49,
-0x03,
-0xaa,
-0xbd,
-0x58,
-0x3f,
-0x85,
-0xa8,
-0xbd,
-0x59,
-0x3f,
-0x85,
-0xa7,
-0xbd,
-0x5a,
-0x3f,
-0x85,
-0xa6,
-0xa5,
-0x75,
-0x49,
-0x03,
-0xa8,
-0xb9,
-0x64,
-0x3f,
-0x85,
-0xab,
-0xb9,
-0x65,
-0x3f,
-0x85,
-0xaa,
-0xb9,
-0x66,
-0x3f,
-0x85,
-0xa9,
-0xa5,
-0x69,
-0xf0,
-0x06,
-0x64,
-0xac,
-0x64,
-0xad,
-0x80,
-0x5a,
-0x20,
-0x17,
-0x15,
-0xa5,
-0x76,
-0x30,
-0x0f,
-0x85,
-0xbd,
-0x38,
-0xa9,
-0x80,
-0xe5,
-0xbd,
-0x85,
-0xbd,
-0x64,
-0xbe,
-0x64,
-0xbf,
-0x80,
-0x0a,
-0x29,
-0x7f,
-0x85,
-0xbd,
-0x64,
-0xbe,
-0xa9,
-0x39,
-0x85,
-0xbf,
-0x38,
-0xa5,
-0xbe,
-0xe5,
-0xac,
-0x85,
-0xbe,
-0x3c,
-0x45,
-0xbd,
-0xaa,
-0xa5,
-0xbd,
-0x10,
-0x05,
-0x98,
-0x18,
-0x65,
-0xbe,
-0xa8,
-0x8a,
-0x0a,
-0x98,
-0x2a,
-0x18,
-0x65,
-0xac,
-0x85,
-0xac,
-0x38,
-0xa5,
-0xbf,
-0xe5,
-0xad,
-0x85,
-0xbf,
-0x3c,
-0x45,
-0xbd,
-0xaa,
-0xa5,
-0xbd,
-0x10,
-0x05,
-0x98,
-0x18,
-0x65,
-0xbf,
-0xa8,
-0x8a,
-0x0a,
-0x98,
-0x2a,
-0x18,
-0x65,
-0xad,
-0x85,
-0xad,
-0xa5,
-0x67,
-0xf0,
-0x0c,
-0xa0,
-0x92,
-0x9c,
-0x0c,
-0x2a,
-0x13,
-0x0c,
-0x2a,
-0x0d,
-0x2a,
-0x80,
-0x3d,
-0xa5,
-0x6b,
-0xc9,
-0x02,
-0xb0,
-0x04,
-0xa9,
-0x00,
-0x80,
-0x02,
-0xa9,
-0xf0,
-0x85,
-0xcb,
-0xad,
-0x77,
-0x3d,
-0x1a,
-0x49,
-0x15,
-0x85,
-0xbf,
-0xa5,
-0x75,
-0x20,
-0xe2,
-0x15,
-0xa9,
-0x0c,
-0x85,
-0xc3,
-0xa9,
-0x2a,
-0x85,
-0xc4,
-0xa9,
-0x00,
-0x20,
-0x1a,
-0x16,
-0xa5,
-0x74,
-0x20,
-0xfd,
-0x15,
-0xa9,
-0x18,
-0x85,
-0xc3,
-0xa9,
-0x2a,
-0x85,
-0xc4,
-0xa9,
-0x01,
-0x20,
-0x1a,
-0x16,
-0x20,
-0xfa,
-0x16,
-0xad,
-0x53,
-0x3c,
-0x85,
-0xb1,
-0x85,
-0xbf,
-0xa5,
-0xb7,
-0x29,
-0xf0,
-0xf0,
-0x08,
-0x64,
-0xb0,
-0x64,
-0xb2,
-0xa5,
-0xb8,
-0x80,
-0x12,
-0xa5,
-0xbf,
-0xa6,
-0x7a,
-0x20,
-0x1f,
-0x17,
-0x85,
-0xb0,
-0xa5,
-0xbf,
-0xa6,
-0x7b,
-0x20,
-0x1f,
-0x17,
-0x85,
-0xb2,
-0x20,
-0x53,
-0x17,
-0xa4,
-0x6b,
-0xb9,
-0x59,
-0x3c,
-0x85,
-0xb5,
-0xa5,
-0x6d,
-0xc9,
-0x00,
-0xf0,
-0x04,
-0xa5,
-0x6c,
-0xd0,
-0x04,
-0xa9,
-0x02,
-0x85,
-0x71,
-0xa9,
-0x00,
-0x60,
-0xad,
-0xb8,
-0x2c,
-0x29,
-0xfc,
-0xf0,
-0x03,
-0xa9,
-0x1f,
-0x60,
-0xae,
-0xd1,
-0x2c,
-0xad,
-0xd0,
-0x2c,
-0x20,
-0x75,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x24,
-0x60,
-0xae,
-0xd3,
-0x2c,
-0xad,
-0xd2,
-0x2c,
-0x20,
-0x75,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x25,
-0x60,
-0xae,
-0xd5,
-0x2c,
-0xad,
-0xd4,
-0x2c,
-0x20,
-0x75,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x26,
-0x60,
-0xae,
-0xcb,
-0x2c,
-0xad,
-0xca,
-0x2c,
-0x20,
-0x95,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x21,
-0x60,
-0xae,
-0xcd,
-0x2c,
-0xad,
-0xcc,
-0x2c,
-0x20,
-0x95,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x22,
-0x60,
-0xae,
-0xcf,
-0x2c,
-0xad,
-0xce,
-0x2c,
-0x20,
-0x95,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x23,
-0x60,
-0xae,
-0xe0,
-0x2c,
-0xa9,
-0x08,
-0x20,
-0x66,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x27,
-0x60,
-0xad,
-0xda,
-0x2c,
-0xc9,
-0x10,
-0xb0,
-0x03,
-0xa9,
-0x28,
-0x60,
-0xad,
-0xdb,
-0x2c,
-0xc9,
-0x10,
-0xb0,
-0x03,
-0xa9,
-0x29,
-0x60,
-0xad,
-0xe1,
-0x2c,
-0xc9,
-0x06,
-0x90,
-0x03,
-0xa9,
-0x2b,
-0x60,
-0xf0,
-0x54,
-0x49,
-0x04,
-0x85,
-0xbd,
-0xa2,
-0x00,
-0xbd,
-0xe2,
-0x2c,
-0xcd,
-0x0c,
-0x3c,
-0x90,
-0x03,
-0xa9,
-0x2c,
-0x60,
-0xbd,
-0xe3,
-0x2c,
-0xcd,
-0x0d,
-0x3c,
-0x90,
-0x03,
-0xa9,
-0x2d,
-0x60,
-0xbd,
-0xe4,
-0x2c,
-0xcd,
-0x0c,
-0x3c,
-0x90,
-0x03,
-0xa9,
-0x2e,
-0x60,
-0xbd,
-0xe5,
-0x2c,
-0xcd,
-0x0d,
-0x3c,
-0x90,
-0x03,
-0xa9,
-0x2f,
-0x60,
-0xbd,
-0xe4,
-0x2c,
-0xdd,
-0xe2,
-0x2c,
-0xb0,
-0x03,
-0xa9,
-0x30,
-0x60,
-0xbd,
-0xe5,
-0x2c,
-0xdd,
-0xe3,
-0x2c,
-0xb0,
-0x03,
-0xa9,
-0x31,
-0x60,
-0x18,
-0x8a,
-0x69,
-0x04,
-0xc5,
-0xbd,
-0xb0,
-0x04,
-0xaa,
-0x4c,
-0xff,
-0x0b,
-0xa9,
-0x00,
-0x60,
-0xc9,
-0x01,
-0xf0,
-0x0f,
-0xc9,
-0x03,
-0xf0,
-0x0b,
-0xc9,
-0x05,
-0xf0,
-0x07,
-0xc9,
-0x07,
-0xf0,
-0x03,
-0xa9,
-0x01,
-0x60,
-0xa9,
-0x00,
-0x60,
-0x86,
-0xbd,
-0xc5,
-0xbd,
-0xf0,
-0x06,
-0x4a,
-0xd0,
-0xf9,
-0xa9,
-0x01,
-0x60,
-0xa9,
-0x00,
-0x60,
-0xec,
-0xda,
-0x3b,
-0x90,
-0x09,
-0xd0,
-0x13,
-0xcd,
-0xd9,
-0x3b,
-0xf0,
-0x02,
-0xb0,
-0x0c,
-0xec,
-0xd8,
-0x3b,
-0x90,
-0x07,
-0xd0,
-0x08,
-0xcd,
-0xd7,
-0x3b,
-0xb0,
-0x03,
-0xa9,
-0x01,
-0x60,
-0xa9,
-0x00,
-0x60,
-0xec,
-0xe2,
-0x3b,
-0x90,
-0x09,
-0xd0,
-0x13,
-0xcd,
-0xe1,
-0x3b,
-0xf0,
-0x02,
-0xb0,
-0x0c,
-0xec,
-0xe0,
-0x3b,
-0x90,
-0x07,
-0xd0,
-0x08,
-0xcd,
-0xdf,
-0x3b,
-0xb0,
-0x03,
-0xa9,
-0x01,
-0x60,
-0xa9,
-0x00,
-0x60,
-0xa0,
-0x00,
-0x18,
-0xb9,
-0x94,
-0x3c,
-0x79,
-0x96,
-0x3c,
-0x85,
-0xc3,
-0xb9,
-0x95,
-0x3c,
-0x79,
-0x97,
-0x3c,
-0x6a,
-0x85,
-0xc4,
-0x66,
-0xc3,
-0xa5,
-0xc2,
-0xc5,
-0xc4,
-0x90,
-0x10,
-0xd0,
-0x06,
-0xa5,
-0xc1,
-0xc5,
-0xc3,
-0x90,
-0x08,
-0xc8,
-0xc8,
-0xc0,
-0x06,
-0xf0,
-0x02,
-0x80,
-0xd6,
-0x98,
-0x4a,
-0x60,
-0xc9,
-0x00,
-0xf0,
-0x1d,
-0xc9,
-0x01,
-0xf0,
-0x12,
-0xc9,
-0x02,
-0xf0,
-0x07,
-0xad,
-0x9a,
-0x3c,
-0xae,
-0x9b,
-0x3c,
-0x60,
-0xad,
-0x98,
-0x3c,
-0xae,
-0x99,
-0x3c,
-0x60,
-0xad,
-0x96,
-0x3c,
-0xae,
-0x97,
-0x3c,
-0x60,
-0xad,
-0x94,
-0x3c,
-0xae,
-0x95,
-0x3c,
-0x60,
-0x64,
-0x63,
-0x64,
-0x64,
-0xad,
-0x0c,
-0x3c,
-0x85,
-0x65,
-0xad,
-0x0d,
-0x3c,
-0x85,
-0x66,
-0xa9,
-0x01,
-0x85,
-0x6c,
-0x85,
-0x6f,
-0x85,
-0x70,
-0x38,
-0xad,
-0xbd,
-0x2c,
-0xed,
-0xe3,
-0x3b,
-0xad,
-0xbe,
-0x2c,
-0xed,
-0xe4,
-0x3b,
-0x90,
-0x03,
-0xa9,
-0x0b,
-0x60,
-0xad,
-0xc4,
-0x2c,
-0xd0,
-0x10,
-0xad,
-0xc3,
-0x2c,
-0xaa,
-0x4a,
-0xb0,
-0x03,
-0xa9,
-0x15,
-0x60,
-0x8a,
-0x20,
-0x50,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x13,
-0x60,
-0x8a,
-0x1a,
-0x4a,
-0x85,
-0x17,
-0x38,
-0xad,
-0xbd,
-0x2c,
-0x6a,
-0xb0,
-0x03,
-0xa9,
-0x0f,
-0x60,
-0x2a,
-0xed,
-0xb9,
-0x2c,
-0xa8,
-0x6a,
-0xb0,
-0x03,
-0xa9,
-0x0d,
-0x60,
-0x2a,
-0xad,
-0xbe,
-0x2c,
-0xed,
-0xba,
-0x2c,
-0xb0,
-0x03,
-0xa9,
-0x11,
-0x60,
-0xc8,
-0xd0,
-0x01,
-0x1a,
-0x84,
-0x19,
-0x85,
-0x1a,
-0xa5,
-0x19,
-0xa6,
-0x1a,
-0xa4,
-0x17,
-0x20,
-0xe4,
-0x0f,
-0x48,
-0xda,
-0x1a,
-0xd0,
-0x01,
-0xe8,
-0x29,
-0xfe,
-0x85,
-0x63,
-0x86,
-0x64,
-0xa8,
-0x8a,
-0x4a,
-0xaa,
-0x98,
-0x6a,
-0xd0,
-0x01,
-0xca,
-0x3a,
-0x85,
-0x57,
-0x86,
-0x58,
-0x68,
-0x4a,
-0x85,
-0xc2,
-0x68,
-0x6a,
-0x85,
-0xc1,
-0xad,
-0x0c,
-0x3c,
-0x85,
-0xbd,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc1,
-0xc9,
-0x14,
-0xb0,
-0x08,
-0x46,
-0x65,
-0x06,
-0x6f,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0xa5,
-0xc2,
-0xd0,
-0x09,
-0xa5,
-0xc1,
-0xcd,
-0xa0,
-0x3c,
-0xb0,
-0x02,
-0x64,
-0x6c,
-0xa5,
-0xc1,
-0x85,
-0xc5,
-0xad,
-0xb7,
-0x2c,
-0xaa,
-0xc9,
-0x03,
-0xd0,
-0x03,
-0xa9,
-0x07,
-0x60,
-0x8a,
-0x29,
-0xe0,
-0xd0,
-0xf8,
-0x8a,
-0x29,
-0x04,
-0xf0,
-0x02,
-0x64,
-0x6c,
-0x38,
-0xad,
-0xbf,
-0x2c,
-0xed,
-0xe5,
-0x3b,
-0xad,
-0xc0,
-0x2c,
-0xed,
-0xe6,
-0x3b,
-0x90,
-0x03,
-0xa9,
-0x0c,
-0x60,
-0xad,
-0xc8,
-0x2c,
-0xd0,
-0x10,
-0xad,
-0xc7,
-0x2c,
-0xaa,
-0x4a,
-0xb0,
-0x03,
-0xa9,
-0x16,
-0x60,
-0x8a,
-0x20,
-0x50,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x14,
-0x60,
-0x8a,
-0x1a,
-0x4a,
-0x85,
-0x18,
-0x64,
-0xb4,
-0x05,
-0x17,
-0x4a,
-0xf0,
-0x02,
-0xe6,
-0xb4,
-0xad,
-0xbf,
-0x2c,
-0x4a,
-0xb0,
-0x03,
-0xa9,
-0x10,
-0x60,
-0x2a,
-0x38,
-0xed,
-0xbb,
-0x2c,
-0xa8,
-0x6a,
-0xb0,
-0x03,
-0xa9,
-0x0e,
-0x60,
-0x2a,
-0xad,
-0xc0,
-0x2c,
-0xed,
-0xbc,
-0x2c,
-0xb0,
-0x03,
-0xa9,
-0x12,
-0x60,
-0xc8,
-0xd0,
-0x01,
-0x1a,
-0x84,
-0x1b,
-0x85,
-0x1c,
-0xa5,
-0x1b,
-0xa6,
-0x1c,
-0xa4,
-0x18,
-0x20,
-0xe4,
-0x0f,
-0x48,
-0xda,
-0x1a,
-0xd0,
-0x01,
-0xe8,
-0xa8,
-0x8a,
-0x4a,
-0xaa,
-0x98,
-0x6a,
-0xd0,
-0x01,
-0xca,
-0x3a,
-0x85,
-0x59,
-0x86,
-0x5a,
-0x68,
-0x4a,
-0x85,
-0xc2,
-0x68,
-0x6a,
-0x85,
-0xc1,
-0xad,
-0x0d,
-0x3c,
-0x85,
-0xbd,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc1,
-0xc9,
-0x14,
-0xb0,
-0x08,
-0x46,
-0x66,
-0x06,
-0x70,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0xa5,
-0xc2,
-0xd0,
-0x09,
-0xa5,
-0xc1,
-0xcd,
-0xa1,
-0x3c,
-0xb0,
-0x02,
-0x64,
-0x6c,
-0xa2,
-0x00,
-0xa5,
-0x64,
-0xcd,
-0xa8,
-0x02,
-0xd0,
-0x09,
-0xa5,
-0x63,
-0xcd,
-0xa7,
-0x02,
-0xd0,
-0x02,
-0x80,
-0x01,
-0xe8,
-0x86,
-0x6e,
-0xa5,
-0x18,
-0xc5,
-0x17,
-0xb0,
-0x02,
-0xa5,
-0x17,
-0x85,
-0x6b,
-0xc9,
-0x03,
-0x90,
-0x0c,
-0xa2,
-0x01,
-0x86,
-0x67,
-0xc9,
-0x05,
-0x90,
-0x04,
-0x86,
-0x68,
-0x86,
-0x69,
-0xad,
-0x9f,
-0x3c,
-0xc5,
-0x6b,
-0xb0,
-0x02,
-0x64,
-0x6c,
-0xa2,
-0x01,
-0xad,
-0xc9,
-0x2c,
-0xf0,
-0x21,
-0xa8,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0xaa,
-0xa9,
-0x04,
-0x20,
-0x66,
-0x0c,
-0xd0,
-0x0c,
-0x98,
-0x29,
-0x0f,
-0xdc,
-0xaa,
-0xa9,
-0x04,
-0x20,
-0x66,
-0x0c,
-0xf0,
-0x03,
-0xa9,
-0x1e,
-0x60,
-0xc4,
-0xbd,
-0xb0,
-0x01,
-0xfc,
-0x86,
-0x6a,
-0x64,
-0x71,
-0x64,
-0x5b,
-0x64,
-0x5c,
-0x64,
-0x5d,
-0x64,
-0x5e,
-0xad,
-0xb8,
-0x2c,
-0x85,
-0x79,
-0xd8,
-0x4d,
-0x0e,
-0x3c,
-0xf8,
-0x85,
-0x72,
-0x85,
-0xb3,
-0xad,
-0xb8,
-0x2c,
-0x29,
-0x01,
-0xd0,
-0x0a,
-0x64,
-0x1f,
-0x64,
-0x20,
-0xa9,
-0x01,
-0x85,
-0x22,
-0x80,
-0x0b,
-0xa5,
-0x65,
-0x3a,
-0x85,
-0x1f,
-0x85,
-0x20,
-0xa9,
-0xff,
-0x85,
-0x22,
-0xa0,
-0x02,
-0x53,
-0x19,
-0x00,
-0x23,
-0x00,
-0x53,
-0xb9,
-0x2c,
-0x25,
-0x00,
-0xa9,
-0xef,
-0x85,
-0xcf,
-0xa9,
-0x3b,
-0x85,
-0xd0,
-0xa9,
-0xe7,
-0x85,
-0xd1,
-0xa9,
-0x3b,
-0x85,
-0xd2,
-0xa9,
-0xcb,
-0x85,
-0xcd,
-0xa9,
-0x2b,
-0x85,
-0xce,
-0xa9,
-0x93,
-0x85,
-0x1d,
-0xa9,
-0x2b,
-0x85,
-0x1e,
-0xa5,
-0x65,
-0x85,
-0x27,
-0xa5,
-0x17,
-0x85,
-0x29,
-0x20,
-0x41,
-0x10,
-0x20,
-0x6e,
-0x0b,
-0xf0,
-0x01,
-0x60,
-0xad,
-0xe1,
-0x2c,
-0x85,
-0xb6,
-0xf0,
-0x12,
-0xa5,
-0x6f,
-0x3a,
-0x85,
-0x28,
-0xa9,
-0xe7,
-0x85,
-0xd1,
-0xa9,
-0x2b,
-0x85,
-0xd2,
-0xa9,
-0x00,
-0x20,
-0xe4,
-0x11,
-0xad,
-0xb8,
-0x2c,
-0x29,
-0x02,
-0xd0,
-0x0a,
-0x64,
-0x1f,
-0x64,
-0x20,
-0xa9,
-0x01,
-0x85,
-0x22,
-0x80,
-0x0b,
-0xa5,
-0x66,
-0x3a,
-0x85,
-0x1f,
-0x85,
-0x20,
-0xa9,
-0xff,
-0x85,
-0x22,
-0xa0,
-0x02,
-0x53,
-0x1b,
-0x00,
-0x23,
-0x00,
-0x53,
-0xbb,
-0x2c,
-0x25,
-0x00,
-0xa9,
-0xff,
-0x85,
-0xcf,
-0xa9,
-0x3b,
-0x85,
-0xd0,
-0xa9,
-0xeb,
-0x85,
-0xd1,
-0xa9,
-0x3b,
-0x85,
-0xd2,
-0xa9,
-0xdb,
-0x85,
-0xcd,
-0xa9,
-0x2b,
-0x85,
-0xce,
-0xa9,
-0xb3,
-0x85,
-0x1d,
-0xa9,
-0x2b,
-0x85,
-0x1e,
-0xa5,
-0x66,
-0x85,
-0x27,
-0xa5,
-0x18,
-0x85,
-0x29,
-0x20,
-0x41,
-0x10,
-0xa5,
-0xb6,
-0xf0,
-0x12,
-0xa5,
-0x70,
-0x3a,
-0x85,
-0x28,
-0xa9,
-0xf7,
-0x85,
-0xd1,
-0xa9,
-0x2b,
-0x85,
-0xd2,
-0xa9,
-0x01,
-0x20,
-0xe4,
-0x11,
-0xa9,
-0x00,
-0x60,
-0x88,
-0x84,
-0xbd,
-0xc8,
-0x18,
-0x65,
-0xbd,
-0x90,
-0x01,
-0xe8,
-0x20,
-0xf2,
-0x0f,
-0x60,
-0xc0,
-0x01,
-0xd0,
-0x01,
-0x60,
-0x85,
-0xbd,
-0x98,
-0xc9,
-0x01,
-0xf0,
-0x0e,
-0x29,
-0x01,
-0xd0,
-0x0d,
-0x8a,
-0x4a,
-0xaa,
-0x66,
-0xbd,
-0x98,
-0x4a,
-0xa8,
-0x80,
-0xee,
-0xa5,
-0xbd,
-0x60,
-0xa5,
-0xbd,
-0x1a,
-0xd0,
-0x01,
-0xe8,
-0x49,
-0x55,
-0x84,
-0xbf,
-0x18,
-0x65,
-0xbf,
-0x85,
-0xbe,
-0x90,
-0x03,
-0xe6,
-0xbf,
-0x18,
-0x8a,
-0x49,
-0x55,
-0x84,
-0xc0,
-0xaa,
-0x65,
-0xbe,
-0x8a,
-0x65,
-0xbf,
-0x85,
-0xbf,
-0xa5,
-0xc0,
-0x90,
-0x03,
-0xe6,
-0xc0,
-0x18,
-0x65,
-0xbf,
-0xa8,
-0xa5,
-0xc0,
-0x69,
-0x00,
-0xaa,
-0x98,
-0x60,
-0xa5,
-0x27,
-0x85,
-0xbd,
-0x3a,
-0x4a,
-0x85,
-0xc0,
-0x38,
-0xe5,
-0x27,
-0x85,
-0xc0,
-0xa0,
-0x02,
-0x53,
-0x23,
-0x00,
-0xc1,
-0x00,
-0x46,
-0xc2,
-0x66,
-0xc1,
-0x20,
-0xc4,
-0x20,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x18,
-0xa9,
-0x02,
-0x65,
-0xc1,
-0x85,
-0xc5,
-0xa9,
-0x00,
-0x65,
-0xc2,
-0x85,
-0xc6,
-0xa0,
-0x02,
-0x53,
-0xc1,
-0x00,
-0xaf,
-0x2a,
-0x53,
-0xc5,
-0x00,
-0xb1,
-0x2a,
-0xa5,
-0x27,
-0x1a,
-0x4a,
-0x3a,
-0x85,
-0xbf,
-0xa2,
-0x00,
-0xda,
-0xe4,
-0xbf,
-0xd0,
-0x02,
-0xe6,
-0xc0,
-0x18,
-0xa5,
-0xc0,
-0x65,
-0xc3,
-0x85,
-0xc0,
-0x30,
-0x09,
-0x38,
-0xe5,
-0x27,
-0x85,
-0xc0,
-0xa9,
-0x02,
-0x80,
-0x02,
-0xa9,
-0x00,
-0xfa,
-0x9d,
-0x9f,
-0x2a,
-0xe8,
-0xe4,
-0x27,
-0xf0,
-0x03,
-0xda,
-0x80,
-0xda,
-0xa5,
-0x29,
-0x85,
-0xbd,
-0x46,
-0xc2,
-0x66,
-0xc1,
-0x20,
-0xc4,
-0x20,
-0xa0,
-0x02,
-0x53,
-0xc1,
-0x00,
-0xc9,
-0x00,
-0xa5,
-0x29,
-0x85,
-0xbd,
-0x45,
-0xc9,
-0x85,
-0xcb,
-0xfc,
-0xa5,
-0xbd,
-0x45,
-0xca,
-0x85,
-0xcc,
-0x8a,
-0x18,
-0x65,
-0xcc,
-0x85,
-0xcc,
-0x38,
-0xa5,
-0xc9,
-0xe9,
-0x01,
-0x85,
-0xc9,
-0xa5,
-0xca,
-0xe9,
-0x00,
-0x85,
-0xca,
-0xe6,
-0xbf,
-0x64,
-0xc3,
-0x64,
-0xc4,
-0x64,
-0xc1,
-0x64,
-0xc2,
-0x64,
-0xc5,
-0x64,
-0xc6,
-0x64,
-0xc0,
-0xa2,
-0x00,
-0x86,
-0xbe,
-0xbd,
-0x9f,
-0x2a,
-0xaa,
-0xe8,
-0xbd,
-0xaf,
-0x2a,
-0x4a,
-0x85,
-0xc8,
-0xca,
-0xbd,
-0xaf,
-0x2a,
-0x6a,
-0x85,
-0xc7,
-0x18,
-0xa5,
-0xc3,
-0x65,
-0xcb,
-0x85,
-0xc3,
-0xa5,
-0xc4,
-0x65,
-0xcc,
-0x85,
-0xc4,
-0x38,
-0xa5,
-0xc3,
-0xe5,
-0xc7,
-0x85,
-0xc3,
-0xa5,
-0xc4,
-0xe5,
-0xc8,
-0x85,
-0xc4,
-0x18,
-0x10,
-0x0d,
-0xa5,
-0x29,
-0x65,
-0xc3,
-0x85,
-0xc3,
-0xa9,
-0x00,
-0x65,
-0xc4,
-0x85,
-0xc4,
-0x38,
-0xa5,
-0xc9,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0xa5,
-0xca,
-0x65,
-0xc2,
-0x85,
-0xc2,
-0xa5,
-0xc1,
-0x0a,
-0x09,
-0x01,
-0x92,
-0x1d,
-0xa5,
-0xc2,
-0x2a,
-0xa0,
-0x01,
-0x91,
-0x1d,
-0x18,
-0xa5,
-0x1d,
-0x69,
-0x02,
-0x85,
-0x1d,
-0xa5,
-0x1e,
-0x69,
-0x00,
-0x85,
-0x1e,
-0xe6,
-0xc1,
-0xd0,
-0x02,
-0xe6,
-0xc2,
-0xa6,
-0xbe,
-0xbd,
-0x9f,
-0x2a,
-0xaa,
-0xbd,
-0xaf,
-0x2a,
-0x85,
-0xc7,
-0xe8,
-0xbd,
-0xaf,
-0x2a,
-0x85,
-0xc8,
-0xa5,
-0xbe,
-0xc5,
-0xbf,
-0xb0,
-0x0d,
-0x38,
-0xa5,
-0xc7,
-0xe9,
-0x01,
-0x85,
-0xc7,
-0xa5,
-0xc8,
-0xe9,
-0x00,
-0x85,
-0xc8,
-0x46,
-0xc8,
-0x66,
-0xc7,
-0x18,
-0xa5,
-0x25,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0xa5,
-0x26,
-0x65,
-0xc8,
-0x85,
-0xc8,
-0xa6,
-0xbe,
-0xbd,
-0x9f,
-0x2a,
-0xaa,
-0x18,
-0xbd,
-0xaf,
-0x2a,
-0x65,
-0x25,
-0x85,
-0x25,
-0xe8,
-0xbd,
-0xaf,
-0x2a,
-0x65,
-0x26,
-0x85,
-0x26,
-0xa5,
-0xc8,
-0xc5,
-0xc6,
-0x90,
-0x1f,
-0xd0,
-0x06,
-0xa5,
-0xc7,
-0xc5,
-0xc5,
-0x90,
-0x17,
-0xa4,
-0xc0,
-0xb1,
-0xcf,
-0xa8,
-0xb1,
-0xd1,
-0x18,
-0x65,
-0xc5,
-0x85,
-0xc5,
-0xc8,
-0xb1,
-0xd1,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0xe6,
-0xc0,
-0x80,
-0xdb,
-0xa5,
-0xc0,
-0x3a,
-0xa4,
-0x1f,
-0x91,
-0xcd,
-0x18,
-0x98,
-0x65,
-0x22,
-0x85,
-0x1f,
-0xa6,
-0xbe,
-0xe8,
-0xe4,
-0x27,
-0xb0,
-0x05,
-0x86,
-0xbe,
-0x4c,
-0xf1,
-0x10,
-0x60,
-0xaa,
-0x64,
-0xbd,
-0xa9,
-0x01,
-0x85,
-0xbe,
-0x64,
-0xbf,
-0xa4,
-0x20,
-0xbd,
-0xe2,
-0x2c,
-0x85,
-0xc0,
-0xbd,
-0xe4,
-0x2c,
-0x85,
-0xc1,
-0xa5,
-0x28,
-0xf0,
-0x04,
-0x46,
-0xc0,
-0x46,
-0xc1,
-0xa5,
-0xbd,
-0xd0,
-0x02,
-0x91,
-0xd1,
-0xa5,
-0xbf,
-0xc5,
-0xc0,
-0x90,
-0x0c,
-0xc5,
-0xc1,
-0xf0,
-0x02,
-0xb0,
-0x06,
-0xb1,
-0xd1,
-0x05,
-0xbe,
-0x91,
-0xd1,
-0xa5,
-0xbf,
-0x1a,
-0xc5,
-0x27,
-0xb0,
-0x09,
-0x85,
-0xbf,
-0x18,
-0x98,
-0x65,
-0x22,
-0xa8,
-0x80,
-0xd8,
-0xa5,
-0xbd,
-0x1a,
-0xcd,
-0xe1,
-0x2c,
-0xb0,
-0x0b,
-0x85,
-0xbd,
-0x8a,
-0x18,
-0x69,
-0x04,
-0xaa,
-0x06,
-0xbe,
-0x80,
-0xaf,
-0x60,
-0xad,
-0xcf,
-0x3b,
-0x0d,
-0xd0,
-0x3b,
-0xf0,
-0x2d,
-0xa0,
-0x02,
-0x53,
-0xcf,
-0x3b,
-0xc3,
-0x00,
-0x20,
-0x43,
-0x21,
-0xa0,
-0x02,
-0x53,
-0xd1,
-0x3b,
-0xc1,
-0x00,
-0x20,
-0xe8,
-0x20,
-0xa0,
-0x02,
-0x53,
-0xd5,
-0x3b,
-0xc9,
-0x00,
-0xa5,
-0xca,
-0x10,
-0x08,
-0xa2,
-0xff,
-0x86,
-0xcb,
-0x86,
-0xcc,
-0x80,
-0x38,
-0x64,
-0xcb,
-0x64,
-0xcc,
-0x80,
-0x32,
-0xa0,
-0x02,
-0x53,
-0xd3,
-0x3b,
-0xc3,
-0x00,
-0x20,
-0x43,
-0x21,
-0xa0,
-0x02,
-0x53,
-0xd5,
-0x3b,
-0xc1,
-0x00,
-0x20,
-0xe8,
-0x20,
-0xa0,
-0x04,
-0x53,
-0xc5,
-0x00,
-0xc9,
-0x00,
-0xa0,
-0x02,
-0x53,
-0xd1,
-0x3b,
-0xc5,
-0x00,
-0xa5,
-0xc6,
-0x10,
-0x08,
-0xa2,
-0xff,
-0x86,
-0xc7,
-0x86,
-0xc8,
-0x80,
-0x04,
-0x64,
-0xc7,
-0x64,
-0xc8,
-0xd8,
-0xa5,
-0xc8,
-0x45,
-0xcc,
-0xf8,
-0x10,
-0x03,
-0xa9,
-0x20,
-0x60,
-0xa5,
-0xc8,
-0x10,
-0x03,
-0x20,
-0xe0,
-0x21,
-0x20,
-0x0d,
-0x22,
-0x64,
-0xc5,
-0xa0,
-0x02,
-0x53,
-0xc1,
-0x00,
-0xc6,
-0x00,
-0x64,
-0xc8,
-0x53,
-0xc3,
-0x00,
-0xc1,
-0x00,
-0x20,
-0x87,
-0x21,
-0xa5,
-0xc7,
-0xf0,
-0x06,
-0xa9,
-0xff,
-0x85,
-0xc5,
-0x85,
-0xc6,
-0xa5,
-0xc5,
-0x45,
-0xcd,
-0x85,
-0xc9,
-0x84,
-0xca,
-0xa5,
-0xc5,
-0x45,
-0xce,
-0x18,
-0x65,
-0xca,
-0x85,
-0xca,
-0x98,
-0x69,
-0x00,
-0x85,
-0xcb,
-0xa5,
-0xc6,
-0x45,
-0xcd,
-0x18,
-0x65,
-0xca,
-0x85,
-0xca,
-0x98,
-0x65,
-0xcb,
-0x85,
-0xcb,
-0xa5,
-0xc6,
-0x45,
-0xce,
-0x65,
-0xcb,
-0x85,
-0xcb,
-0x98,
-0x69,
-0x00,
-0x85,
-0xcc,
-0xa5,
-0xc9,
-0x10,
-0x08,
-0xe6,
-0xca,
-0xd0,
-0x04,
-0xe6,
-0xcb,
-0xf0,
-0x0d,
-0xa5,
-0xcc,
-0xd0,
-0x09,
-0xa0,
-0x02,
-0x53,
-0xca,
-0x00,
-0x2d,
-0x00,
-0x80,
-0x06,
-0xa9,
-0xff,
-0x85,
-0x2d,
-0x85,
-0x2e,
-0xa9,
-0x00,
-0x60,
-0xa2,
-0x02,
-0xa5,
-0x60,
-0xdd,
-0xcb,
-0x3c,
-0x90,
-0x11,
-0xd0,
-0x07,
-0xa5,
-0x5f,
-0xdd,
-0xca,
-0x3c,
-0x90,
-0x08,
-0xe8,
-0xe8,
-0xe0,
-0x06,
-0xf0,
-0x02,
-0x80,
-0xe8,
-0xca,
-0xca,
-0xda,
-0x38,
-0xa5,
-0x5f,
-0xfd,
-0xca,
-0x3c,
-0x85,
-0xc1,
-0xa5,
-0x60,
-0xfd,
-0xcb,
-0x3c,
-0x85,
-0xc2,
-0xbd,
-0xe5,
-0x3c,
-0x85,
-0xc3,
-0xbd,
-0xe6,
-0x3c,
-0x85,
-0xc4,
-0x20,
-0x0a,
-0x21,
-0x8a,
-0x4a,
-0xaa,
-0xbd,
-0xf1,
-0x3c,
-0xf0,
-0x12,
-0x38,
-0xa9,
-0x00,
-0xa8,
-0xe5,
-0xc5,
-0x85,
-0xc5,
-0x98,
-0xe5,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0xe5,
-0xc7,
-0x85,
-0xc7,
-0xa5,
-0xc6,
-0x10,
-0x02,
-0xe6,
-0xc7,
-0xbd,
-0xd6,
-0x3c,
-0x18,
-0x65,
-0xc7,
-0x85,
-0x8b,
-0xfa,
-0xda,
-0xbd,
-0xdf,
-0x3c,
-0x85,
-0xc3,
-0xbd,
-0xe0,
-0x3c,
-0x85,
-0xc4,
-0x20,
-0x0a,
-0x21,
-0x8a,
-0x4a,
-0xaa,
-0xbd,
-0xee,
-0x3c,
-0xf0,
-0x12,
-0x38,
-0xa9,
-0x00,
-0xa8,
-0xe5,
-0xc5,
-0x85,
-0xc5,
-0x98,
-0xe5,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0xe5,
-0xc7,
-0x85,
-0xc7,
-0xa5,
-0xc6,
-0x10,
-0x02,
-0xe6,
-0xc7,
-0xbd,
-0xd3,
-0x3c,
-0x18,
-0x65,
-0xc7,
-0x45,
-0x7a,
-0x20,
-0x58,
-0x21,
-0x85,
-0x89,
-0xfa,
-0xbd,
-0xd9,
-0x3c,
-0x85,
-0xc3,
-0xbd,
-0xda,
-0x3c,
-0x85,
-0xc4,
-0x20,
-0x0a,
-0x21,
-0x8a,
-0x4a,
-0xaa,
-0xbd,
-0xeb,
-0x3c,
-0xf0,
-0x12,
-0x38,
-0xa9,
-0x00,
-0xa8,
-0xe5,
-0xc5,
-0x85,
-0xc5,
-0x98,
-0xe5,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0xe5,
-0xc7,
-0x85,
-0xc7,
-0xa5,
-0xc6,
-0x10,
-0x02,
-0xe6,
-0xc7,
-0xbd,
-0xd0,
-0x3c,
-0x18,
-0x65,
-0xc7,
-0x45,
-0x7b,
-0x20,
-0x58,
-0x21,
-0x85,
-0x8a,
-0x60,
-0xa5,
-0x6a,
-0xc9,
-0x02,
-0xb0,
-0x04,
-0xa9,
-0x00,
-0x80,
-0x02,
-0xa9,
-0x33,
-0x85,
-0xbd,
-0xa2,
-0x00,
-0x18,
-0x8a,
-0x65,
-0xbd,
-0xa8,
-0xa5,
-0x60,
-0xd9,
-0xfa,
-0x3c,
-0x90,
-0x11,
-0xd0,
-0x07,
-0xa5,
-0x5f,
-0xd9,
-0xf9,
-0x3c,
-0x90,
-0x08,
-0xe8,
-0xe8,
-0xe0,
-0x06,
-0xf0,
-0x02,
-0x80,
-0xe3,
-0x8a,
-0x4a,
-0x49,
-0x05,
-0x18,
-0x65,
-0xbd,
-0x18,
-0x69,
-0xff,
-0x85,
-0xc3,
-0xa9,
-0x3c,
-0x69,
-0x00,
-0x85,
-0xc4,
-0xa0,
-0x05,
-0xd3,
-0xc3,
-0x31,
-0x00,
-0x60,
-0xa2,
-0x02,
-0x18,
-0x8a,
-0x65,
-0xbd,
-0xa8,
-0xa5,
-0x60,
-0xd9,
-0x14,
-0x3d,
-0x90,
-0x11,
-0xd0,
-0x07,
-0xa5,
-0x5f,
-0xd9,
-0x13,
-0x3d,
-0x90,
-0x08,
-0xe8,
-0xe8,
-0xe0,
-0x0a,
-0xf0,
-0x02,
-0x80,
-0xe3,
-0xca,
-0xca,
-0x18,
-0x8a,
-0x65,
-0xbd,
-0xa8,
-0x38,
-0xa5,
-0x5f,
-0xf9,
-0x13,
-0x3d,
-0x85,
-0xc1,
-0xa5,
-0x60,
-0xf9,
-0x14,
-0x3d,
-0x85,
-0xc2,
-0xb9,
-0x1d,
-0x3d,
-0x85,
-0xc3,
-0xb9,
-0x1e,
-0x3d,
-0x85,
-0xc4,
-0x20,
-0x43,
-0x21,
-0xa5,
-0xc6,
-0x10,
-0x02,
-0xe6,
-0xc7,
-0x8a,
-0x4a,
-0x18,
-0x65,
-0xbd,
-0xa8,
-0x18,
-0xb9,
-0x27,
-0x3d,
-0x65,
-0xc7,
-0x85,
-0x36,
-0x60,
-0x38,
-0x30,
-0x0b,
-0x85,
-0xbd,
-0xa9,
-0x00,
-0xe5,
-0xbd,
-0xd0,
-0x02,
-0xa9,
-0xff,
-0x60,
-0xe9,
-0x80,
-0x4a,
-0x4a,
-0x85,
-0xbd,
-0x38,
-0xa9,
-0x80,
-0xe5,
-0xbd,
-0x60,
-0x38,
-0xe9,
-0x80,
-0xaa,
-0xa9,
-0x00,
-0x69,
-0x00,
-0xd8,
-0x49,
-0x01,
-0xf8,
-0x4a,
-0x8a,
-0x6a,
-0x18,
-0x69,
-0x80,
-0x60,
-0x38,
-0x30,
-0x0b,
-0x85,
-0xbd,
-0xa9,
-0x00,
-0xe5,
-0xbd,
-0xd0,
-0x02,
-0xa9,
-0xff,
-0x60,
-0xe9,
-0x80,
-0x4a,
-0x85,
-0xbd,
-0x38,
-0xa9,
-0x80,
-0xe5,
-0xbd,
-0x60,
-0x38,
-0xe9,
-0x80,
-0x85,
-0xbd,
-0x8a,
-0x3c,
-0x45,
-0xbd,
-0x0a,
-0xaa,
-0x98,
-0x2a,
-0xdc,
-0x10,
-0x01,
-0x1a,
-0x18,
-0x69,
-0x80,
-0x60,
-0x0a,
-0x85,
-0xbd,
-0x8a,
-0x45,
-0xbd,
-0x0a,
-0x98,
-0x69,
-0x00,
-0x60,
-0x0a,
-0x85,
-0xbd,
-0x8a,
-0x45,
-0xbd,
-0x0a,
-0x98,
-0x69,
-0x00,
-0xc9,
-0x7f,
-0xb0,
-0x01,
-0x60,
-0xa9,
-0x7f,
-0x60,
-0xa2,
-0x02,
-0xa5,
-0x60,
-0xdd,
-0x71,
-0x3f,
-0x90,
-0x11,
-0xd0,
-0x07,
-0xa5,
-0x5f,
-0xdd,
-0x70,
-0x3f,
-0x90,
-0x08,
-0xe8,
-0xe8,
-0xe0,
-0x06,
-0xf0,
-0x02,
-0x80,
-0xe8,
-0xca,
-0xca,
-0xda,
-0x38,
-0xa5,
-0x5f,
-0xfd,
-0x70,
-0x3f,
-0x85,
-0xc1,
-0xa5,
-0x60,
-0xfd,
-0x71,
-0x3f,
-0x85,
-0xc2,
-0xbd,
-0x76,
-0x3f,
-0x85,
-0xc3,
-0xbd,
-0x77,
-0x3f,
-0x85,
-0xc4,
-0x20,
-0x43,
-0x21,
-0xa5,
-0xc6,
-0x10,
-0x02,
-0xe6,
-0xc7,
-0x8a,
-0x4a,
-0xaa,
-0x18,
-0xbd,
-0x82,
-0x3f,
-0x65,
-0xc7,
-0x85,
-0xac,
-0xfa,
-0xbd,
-0x7c,
-0x3f,
-0x85,
-0xc3,
-0xbd,
-0x7d,
-0x3f,
-0x85,
-0xc4,
-0x20,
-0x43,
-0x21,
-0xa5,
-0xc6,
-0x10,
-0x02,
-0xe6,
-0xc7,
-0x8a,
-0x4a,
-0xaa,
-0x18,
-0xbd,
-0x85,
-0x3f,
-0x65,
-0xc7,
-0x85,
-0xad,
-0x60,
-0x5a,
-0x86,
-0xbd,
-0x45,
-0xbd,
-0xaa,
-0x98,
-0x29,
-0x30,
-0xd0,
-0x12,
-0x98,
-0x49,
-0x08,
-0x85,
-0xbd,
-0x8a,
-0x49,
-0x10,
-0x98,
-0x4a,
-0x05,
-0xbd,
-0x69,
-0x00,
-0x30,
-0x02,
-0x7a,
-0x60,
-0xa9,
-0x7f,
-0x7a,
-0x60,
-0x5a,
-0x86,
-0xbd,
-0x45,
-0xbd,
-0xaa,
-0x98,
-0x29,
-0x38,
-0xd0,
-0x12,
-0x98,
-0x49,
-0x10,
-0x85,
-0xbd,
-0x8a,
-0x49,
-0x20,
-0x98,
-0x4a,
-0x05,
-0xbd,
-0x69,
-0x00,
-0x30,
-0x02,
-0x7a,
-0x60,
-0xa9,
-0x7f,
-0x7a,
-0x60,
-0x5a,
-0x86,
-0xbd,
-0x45,
-0xbd,
-0xaa,
-0x98,
-0x29,
-0xf8,
-0xd0,
-0x10,
-0x98,
-0x49,
-0x10,
-0x85,
-0xbd,
-0x8a,
-0x49,
-0x20,
-0x98,
-0x4a,
-0x05,
-0xbd,
-0x69,
-0x00,
-0x10,
-0x02,
-0xa9,
-0x7f,
-0x7a,
-0x60,
-0x49,
-0x3c,
-0x18,
-0x65,
-0xcb,
-0x85,
-0xc1,
-0xa9,
-0x00,
-0x69,
-0x00,
-0x85,
-0xc2,
-0x18,
-0xa5,
-0xc1,
-0x69,
-0x78,
-0x85,
-0xc1,
-0xa5,
-0xc2,
-0x69,
-0x3d,
-0x85,
-0xc2,
-0x60,
-0xf0,
-0x02,
-0xa9,
-0x3c,
-0x18,
-0x65,
-0xcb,
-0x85,
-0xc1,
-0xa9,
-0x00,
-0x69,
-0x00,
-0x85,
-0xc2,
-0x18,
-0xa5,
-0xc1,
-0x69,
-0x78,
-0x85,
-0xc1,
-0xa5,
-0xc2,
-0x69,
-0x3d,
-0x85,
-0xc2,
-0x60,
-0x85,
-0xca,
-0xa9,
-0x04,
-0x48,
-0x80,
-0x1a,
-0xfa,
-0xfa,
-0x48,
-0xa9,
-0x0f,
-0x18,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x03,
-0x18,
-0xe6,
-0xc2,
-0xa5,
-0xbf,
-0x65,
-0xc3,
-0x85,
-0xc3,
-0x90,
-0x03,
-0x18,
-0xe6,
-0xc4,
-0xa0,
-0x0f,
-0xd3,
-0xc1,
-0x48,
-0x00,
-0xa6,
-0x54,
-0xa5,
-0x77,
-0x20,
-0xe5,
-0x14,
-0x85,
-0xbe,
-0xa6,
-0x55,
-0xa5,
-0x77,
-0x20,
-0xe5,
-0x14,
-0x85,
-0xc0,
-0xa6,
-0x56,
-0xa5,
-0x77,
-0x20,
-0xe5,
-0x14,
-0x85,
-0xc5,
-0xa5,
-0x48,
-0xa6,
-0xc0,
-0x20,
-0xfa,
-0x14,
-0xa6,
-0x7b,
-0x20,
-0xa2,
-0x15,
-0x85,
-0x48,
-0xa5,
-0x49,
-0xa6,
-0xc5,
-0x20,
-0xfa,
-0x14,
-0xa6,
-0x30,
-0x20,
-0xc3,
-0x15,
-0x85,
-0x49,
-0xa5,
-0x4a,
-0xa6,
-0xbe,
-0x20,
-0x05,
-0x15,
-0x85,
-0x4a,
-0xa5,
-0x4b,
-0xa6,
-0xbe,
-0x20,
-0x05,
-0x15,
-0x85,
-0x4b,
-0xa5,
-0x4c,
-0xa6,
-0xbe,
-0x20,
-0xfa,
-0x14,
-0xa6,
-0x7d,
-0x20,
-0x81,
-0x15,
-0x85,
-0x4c,
-0xa5,
-0x4d,
-0xa6,
-0xc5,
-0x20,
-0xfa,
-0x14,
-0xa6,
-0x7c,
-0x20,
-0x81,
-0x15,
-0x85,
-0x4d,
-0xa5,
-0x4e,
-0xa6,
-0xc0,
-0x20,
-0x05,
-0x15,
-0x85,
-0x4e,
-0xa5,
-0x4f,
-0xa6,
-0xc0,
-0x20,
-0x05,
-0x15,
-0x85,
-0x4f,
-0xa5,
-0x50,
-0xa6,
-0xc5,
-0x20,
-0x05,
-0x15,
-0x85,
-0x50,
-0xa0,
-0x09,
-0xa5,
-0xca,
-0xd0,
-0x27,
-0xa5,
-0x51,
-0xa6,
-0xbe,
-0x20,
-0xfa,
-0x14,
-0xa6,
-0x2f,
-0x20,
-0xc3,
-0x15,
-0x85,
-0x51,
-0xa5,
-0x52,
-0xa6,
-0xc0,
-0x20,
-0xfa,
-0x14,
-0xa6,
-0x7a,
-0x20,
-0xa2,
-0x15,
-0x85,
-0x52,
-0xa5,
-0x53,
-0xa6,
-0xc5,
-0x20,
-0x05,
-0x15,
-0x85,
-0x53,
-0xa0,
-0x0c,
-0x73,
-0x48,
-0x00,
-0xc3,
-0x68,
-0x3a,
-0xd0,
-0x01,
-0x60,
-0x20,
-0x21,
-0x16,
-0xa9,
-0x03,
-0x48,
-0xa2,
-0x00,
-0x80,
-0x06,
-0x48,
-0x18,
-0x8a,
-0x69,
-0x15,
-0xaa,
-0xa0,
-0x15,
-0x18,
-0xbd,
-0x0c,
-0x2a,
-0x7d,
-0x36,
-0x2a,
-0x4a,
-0x69,
-0x00,
-0x9d,
-0x21,
-0x2a,
-0xe8,
-0x88,
-0xd0,
-0xef,
-0x68,
-0x3a,
-0xd0,
-0xe3,
-0x60,
-0xbc,
-0x87,
-0x28,
-0x84,
-0xbd,
-0x45,
-0xbd,
-0x85,
-0xc1,
-0x84,
-0xc2,
-0x18,
-0xa9,
-0x10,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0xb0,
-0x15,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0xb0,
-0x0f,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0xb0,
-0x09,
-0xa9,
-0xc0,
-0x25,
-0xc2,
-0xd0,
-0x03,
-0xa5,
-0xc2,
-0x60,
-0xa9,
-0x3f,
-0x60,
-0xa5,
-0x2b,
-0x49,
-0x10,
-0x85,
-0xc5,
-0x84,
-0xc6,
-0xa5,
-0x2c,
-0x49,
-0x10,
-0x05,
-0xc6,
-0x85,
-0xc6,
-0x84,
-0xc7,
-0x64,
-0xc8,
-0xa0,
-0x02,
-0x53,
-0x5f,
-0x00,
-0xc1,
-0x00,
-0x20,
-0x87,
-0x21,
-0xa5,
-0xc7,
-0xd0,
-0x0a,
-0xa5,
-0xc6,
-0xd0,
-0x06,
-0xa5,
-0xc5,
-0xc9,
-0x3f,
-0x90,
-0x02,
-0xa9,
-0x3f,
-0x45,
-0x7b,
-0x18,
-0x69,
-0x08,
-0x85,
-0xbd,
-0x98,
-0x69,
-0x00,
-0x49,
-0x10,
-0xc0,
-0x00,
-0xd0,
-0x0f,
-0xaa,
-0xa5,
-0xbd,
-0x49,
-0x10,
-0x84,
-0xbd,
-0x8a,
-0x05,
-0xbd,
-0xcd,
-0x62,
-0x3c,
-0x90,
-0x05,
-0xad,
-0x64,
-0x3c,
-0x80,
-0x03,
-0xad,
-0x63,
-0x3c,
-0x18,
-0x69,
-0x20,
-0x29,
-0x3f,
-0x85,
-0xbd,
-0xa4,
-0x6a,
-0xb9,
-0x5d,
-0x3c,
-0x18,
-0x69,
-0x20,
-0x29,
-0x3f,
-0x85,
-0xbe,
-0xa4,
-0x6b,
-0xb9,
-0x55,
-0x3c,
-0x45,
-0xbe,
-0x85,
-0xc1,
-0x84,
-0xc2,
-0x18,
-0xa9,
-0x10,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x06,
-0xc1,
-0xa5,
-0xc2,
-0x2a,
-0x85,
-0xc1,
-0xa9,
-0x00,
-0x2a,
-0x85,
-0xc2,
-0xa5,
-0xc1,
-0x45,
-0xbd,
-0x85,
-0xc1,
-0xa5,
-0xc2,
-0xf0,
-0x05,
-0x18,
-0x98,
-0x65,
-0xbd,
-0xa8,
-0x84,
-0xc2,
-0x18,
-0xa9,
-0x10,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0x64,
-0xbd,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x26,
-0xbd,
-0x06,
-0xc1,
-0xa5,
-0xc2,
-0x2a,
-0x85,
-0xc3,
-0xa5,
-0xbd,
-0x2a,
-0x85,
-0xc4,
-0xa0,
-0x00,
-0x5a,
-0xb9,
-0x28,
-0x3c,
-0x18,
-0x69,
-0x20,
-0x29,
-0x3f,
-0x85,
-0xbd,
-0xa5,
-0xbd,
-0x45,
-0xc3,
-0x85,
-0xc1,
-0xfc,
-0xa5,
-0xbd,
-0x45,
-0xc4,
-0x85,
-0xc2,
-0x8a,
-0x18,
-0x65,
-0xc2,
-0x85,
-0xc2,
-0x18,
-0xa9,
-0x10,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0x90,
-0x02,
-0xe6,
-0xc2,
-0x64,
-0xbd,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x26,
-0xbd,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x26,
-0xbd,
-0x06,
-0xc1,
-0xa5,
-0xc2,
-0x2a,
-0xa8,
-0xa5,
-0xbd,
-0x2a,
-0xd0,
-0x05,
-0x98,
-0xc9,
-0x1f,
-0x90,
-0x02,
-0xa9,
-0x1f,
-0x7a,
-0x99,
-0x11,
-0x2c,
-0xc8,
-0xc0,
-0x07,
-0x90,
-0xae,
-0xa9,
-0x00,
-0x60,
-0xa5,
-0xb8,
-0xa8,
-0x29,
-0x0f,
-0xf0,
-0x28,
-0x98,
-0x29,
-0xf0,
-0xf0,
-0x23,
-0xa5,
-0xb7,
-0xaa,
-0x29,
-0x0f,
-0x3a,
-0xd0,
-0x11,
-0xd8,
-0x8a,
-0x49,
-0x10,
-0xaa,
-0xd0,
-0x07,
-0x98,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0x80,
-0x03,
-0x98,
-0x29,
-0x0f,
-0xf8,
-0x85,
-0xb7,
-0x8a,
-0x29,
-0x10,
-0x05,
-0xb7,
-0x85,
-0xb7,
-0x60,
-0xa9,
-0x01,
-0x8d,
-0x10,
-0x60,
-0xa0,
-0x02,
-0x53,
-0xad,
-0x3c,
-0x58,
-0x60,
-0x53,
-0x57,
-0x00,
-0x18,
-0x60,
-0x53,
-0x59,
-0x00,
-0x1c,
-0x60,
-0x53,
-0x5b,
-0x00,
-0x28,
-0x60,
-0x53,
-0x5d,
-0x00,
-0x2c,
-0x60,
-0x53,
-0x61,
-0x00,
-0x30,
-0x60,
-0xa0,
-0x01,
-0x53,
-0xb3,
-0x3c,
-0x20,
-0x61,
-0x53,
-0xb4,
-0x3c,
-0x24,
-0x61,
-0x53,
-0xb5,
-0x3c,
-0x28,
-0x61,
-0x53,
-0xaf,
-0x3c,
-0x2c,
-0x61,
-0x53,
-0xb0,
-0x3c,
-0x30,
-0x61,
-0x53,
-0xb1,
-0x3c,
-0x34,
-0x61,
-0x53,
-0xb2,
-0x3c,
-0x38,
-0x61,
-0x53,
-0xb6,
-0x3c,
-0x3c,
-0x61,
-0x53,
-0xb7,
-0x3c,
-0x40,
-0x61,
-0x53,
-0xf4,
-0x3f,
-0x74,
-0x60,
-0x53,
-0xaa,
-0x3c,
-0x0c,
-0x61,
-0x53,
-0xab,
-0x3c,
-0x44,
-0x61,
-0x53,
-0xac,
-0x3c,
-0x88,
-0x60,
-0x53,
-0x54,
-0x3c,
-0xdc,
-0x60,
-0x53,
-0x55,
-0x3c,
-0x68,
-0x61,
-0x53,
-0x72,
-0x00,
-0x14,
-0x60,
-0x53,
-0x71,
-0x00,
-0x3c,
-0x60,
-0x53,
-0x7a,
-0x00,
-0xec,
-0x60,
-0x53,
-0x7b,
-0x00,
-0xe0,
-0x60,
-0x53,
-0x7c,
-0x00,
-0xe8,
-0x60,
-0x53,
-0x7d,
-0x00,
-0xe4,
-0x60,
-0x53,
-0x80,
-0x00,
-0x64,
-0x61,
-0x53,
-0x81,
-0x00,
-0x80,
-0x60,
-0x53,
-0x82,
-0x00,
-0x84,
-0x60,
-0x53,
-0x83,
-0x00,
-0x58,
-0x61,
-0x53,
-0x84,
-0x00,
-0xf0,
-0x60,
-0x53,
-0x85,
-0x00,
-0xf4,
-0x60,
-0x53,
-0x86,
-0x00,
-0xf8,
-0x60,
-0x53,
-0x87,
-0x00,
-0x5c,
-0x61,
-0x53,
-0x88,
-0x00,
-0xac,
-0x60,
-0x53,
-0x89,
-0x00,
-0x7c,
-0x60,
-0x53,
-0x8a,
-0x00,
-0x78,
-0x60,
-0x53,
-0x8b,
-0x00,
-0x10,
-0x61,
-0x53,
-0x8c,
-0x00,
-0xfc,
-0x60,
-0x53,
-0x8d,
-0x00,
-0x00,
-0x61,
-0x53,
-0x8e,
-0x00,
-0x04,
-0x61,
-0x53,
-0x8f,
-0x00,
-0x08,
-0x61,
-0x53,
-0x90,
-0x00,
-0x1c,
-0x61,
-0x53,
-0x91,
-0x00,
-0x4c,
-0x61,
-0x53,
-0x92,
-0x00,
-0x18,
-0x61,
-0x53,
-0x93,
-0x00,
-0x48,
-0x61,
-0x53,
-0x94,
-0x00,
-0x14,
-0x61,
-0x53,
-0x95,
-0x00,
-0x6c,
-0x61,
-0x53,
-0x96,
-0x00,
-0x5c,
-0x60,
-0x53,
-0x97,
-0x00,
-0xbc,
-0x60,
-0x53,
-0x98,
-0x00,
-0xc0,
-0x60,
-0x53,
-0x99,
-0x00,
-0xc4,
-0x60,
-0x53,
-0x9a,
-0x00,
-0xc8,
-0x60,
-0x53,
-0x9b,
-0x00,
-0xcc,
-0x60,
-0x53,
-0x9c,
-0x00,
-0xd0,
-0x60,
-0x53,
-0x9d,
-0x00,
-0xd4,
-0x60,
-0x53,
-0x9e,
-0x00,
-0xd8,
-0x60,
-0x53,
-0x9f,
-0x00,
-0x50,
-0x61,
-0x53,
-0xa0,
-0x00,
-0x60,
-0x60,
-0x53,
-0xa1,
-0x00,
-0x64,
-0x60,
-0x53,
-0xa2,
-0x00,
-0x68,
-0x60,
-0x53,
-0xa3,
-0x00,
-0x60,
-0x61,
-0x53,
-0xa4,
-0x00,
-0x6c,
-0x60,
-0x53,
-0xa5,
-0x00,
-0x70,
-0x60,
-0x53,
-0xa6,
-0x00,
-0xa8,
-0x60,
-0x53,
-0xa7,
-0x00,
-0xa4,
-0x60,
-0x53,
-0xa8,
-0x00,
-0xa0,
-0x60,
-0x53,
-0xa9,
-0x00,
-0x9c,
-0x60,
-0x53,
-0xaa,
-0x00,
-0x98,
-0x60,
-0x53,
-0xab,
-0x00,
-0x94,
-0x60,
-0x53,
-0xac,
-0x00,
-0x8c,
-0x60,
-0x53,
-0xad,
-0x00,
-0x90,
-0x60,
-0x53,
-0xb0,
-0x00,
-0xb8,
-0x60,
-0x53,
-0xb1,
-0x00,
-0xb4,
-0x60,
-0x53,
-0xb2,
-0x00,
-0xb0,
-0x60,
-0x53,
-0xb3,
-0x00,
-0x54,
-0x61,
-0x53,
-0xb4,
-0x00,
-0x70,
-0x61,
-0x9c,
-0x20,
-0x60,
-0x9c,
-0x24,
-0x60,
-0x60,
-0x29,
-0x01,
-0xf0,
-0x06,
-0xa2,
-0xb8,
-0xa9,
-0x01,
-0x80,
-0x04,
-0xa2,
-0x38,
-0xa9,
-0x00,
-0x8e,
-0x0c,
-0x60,
-0x8d,
-0x0d,
-0x60,
-0x85,
-0xc6,
-0x86,
-0xc5,
-0xa4,
-0x7f,
-0xb9,
-0xdb,
-0x2b,
-0xa8,
-0xb9,
-0x3b,
-0x28,
-0x49,
-0x04,
-0x18,
-0x69,
-0x5f,
-0x85,
-0xc1,
-0xa9,
-0x00,
-0x69,
-0x3d,
-0x85,
-0xc2,
-0xa5,
-0x65,
-0x85,
-0xbd,
-0xa0,
-0x00,
-0x5a,
-0xb9,
-0xcb,
-0x2b,
-0xa8,
-0xb9,
-0x2b,
-0x28,
-0x4a,
-0xa8,
-0xb1,
-0xc1,
-0xb0,
-0x04,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0x29,
-0x0f,
-0x18,
-0x49,
-0x15,
-0x69,
-0x0c,
-0x85,
-0xc3,
-0xa9,
-0x2a,
-0x69,
-0x00,
-0x85,
-0xc4,
-0xa0,
-0x15,
-0xc3,
-0xc3,
-0x54,
-0x60,
-0x18,
-0xa5,
-0xc5,
-0x69,
-0x18,
-0x85,
-0xc5,
-0x90,
-0x02,
-0xe6,
-0xc6,
-0xa0,
-0x02,
-0x53,
-0xc5,
-0x00,
-0x0c,
-0x60,
-0x7a,
-0xc6,
-0xbd,
-0xf0,
-0x03,
-0xc8,
-0x80,
-0xbf,
-0xe6,
-0x7f,
-0x60,
-0xa5,
-0x6c,
-0xf0,
-0x06,
-0xa5,
-0x6d,
-0xc9,
-0x00,
-0xd0,
-0x12,
-0xa0,
-0x02,
-0x53,
-0xa2,
-0x3c,
-0xb6,
-0x02,
-0x53,
-0xa4,
-0x3c,
-0xb8,
-0x02,
-0x9c,
-0xa9,
-0x02,
-0x4c,
-0x86,
-0x1d,
-0xa9,
-0x03,
-0x85,
-0xc9,
-0xa0,
-0x02,
-0x53,
-0x42,
-0x00,
-0xc1,
-0x00,
-0xa5,
-0x3f,
-0xc5,
-0xc2,
-0x90,
-0x13,
-0xd0,
-0x06,
-0xa5,
-0x3e,
-0xc5,
-0xc1,
-0x90,
-0x0b,
-0xa9,
-0x01,
-0x85,
-0xc9,
-0xa0,
-0x02,
-0x53,
-0x3e,
-0x00,
-0xc1,
-0x00,
-0xa5,
-0x3d,
-0xc5,
-0xc2,
-0x90,
-0x13,
-0xd0,
-0x06,
-0xa5,
-0x3c,
-0xc5,
-0xc1,
-0x90,
-0x0b,
-0xa9,
-0x00,
-0x85,
-0xc9,
-0xa0,
-0x02,
-0x53,
-0x3c,
-0x00,
-0xc1,
-0x00,
-0xa5,
-0x41,
-0xc5,
-0xc2,
-0x90,
-0x13,
-0xd0,
-0x06,
-0xa5,
-0x40,
-0xc5,
-0xc1,
-0x90,
-0x0b,
-0xa9,
-0x02,
-0x85,
-0xc9,
-0xa0,
-0x02,
-0x53,
-0x40,
-0x00,
-0xc1,
-0x00,
-0xa6,
-0x6d,
-0xe0,
-0x02,
-0xf0,
-0x04,
-0xa9,
-0x00,
-0x80,
-0x02,
-0xa9,
-0x16,
-0x85,
-0xbd,
-0xa2,
-0x00,
-0x18,
-0x8a,
-0x65,
-0xbd,
-0xa8,
-0xa5,
-0x60,
-0xd9,
-0x69,
-0x3c,
-0x90,
-0x11,
-0xd0,
-0x07,
-0xa5,
-0x5f,
-0xd9,
-0x68,
-0x3c,
-0x90,
-0x08,
-0xe8,
-0xe8,
-0xe0,
-0x08,
-0xf0,
-0x02,
-0x80,
-0xe3,
-0x8a,
-0x4a,
-0x49,
-0x04,
-0x18,
-0x65,
-0xbd,
-0x48,
-0xa5,
-0x37,
-0x85,
-0xbd,
-0xd0,
-0x08,
-0x64,
-0xc5,
-0x64,
-0xc6,
-0x64,
-0xc7,
-0x80,
-0x48,
-0x4a,
-0x85,
-0xcc,
-0xa5,
-0x38,
-0x85,
-0xc2,
-0xa5,
-0xcc,
-0x85,
-0xc1,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc2,
-0xd0,
-0x04,
-0xa5,
-0xc1,
-0x80,
-0x02,
-0xa9,
-0xff,
-0x85,
-0xc5,
-0xa5,
-0x39,
-0x85,
-0xc2,
-0xa5,
-0xcc,
-0x85,
-0xc1,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc2,
-0xd0,
-0x04,
-0xa5,
-0xc1,
-0x80,
-0x02,
-0xa9,
-0xff,
-0x85,
-0xc6,
-0xa5,
-0x3b,
-0x85,
-0xc2,
-0xa5,
-0xcc,
-0x85,
-0xc1,
-0x20,
-0xc4,
-0x20,
-0xa5,
-0xc2,
-0xd0,
-0x04,
-0xa5,
-0xc1,
-0x80,
-0x02,
-0xa9,
-0xff,
-0x85,
-0xc7,
-0xa5,
-0x6e,
-0xf0,
-0x03,
-0x4c,
-0x72,
-0x1c,
-0xad,
-0xaa,
-0x02,
-0xc5,
-0xc5,
-0x90,
-0x16,
-0x38,
-0xe5,
-0xc5,
-0x45,
-0x73,
-0x0a,
-0xaa,
-0x98,
-0x2a,
-0xa8,
-0x8a,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x18,
-0x65,
-0xc5,
-0x80,
-0x21,
-0xa5,
-0xc5,
-0x38,
-0xed,
-0xaa,
-0x02,
-0x45,
-0x73,
-0x0a,
-0xaa,
-0x98,
-0x2a,
-0xa8,
-0x8a,
-0x38,
-0xe9,
-0x80,
-0x85,
-0xd1,
-0x98,
-0xe9,
-0x00,
-0x85,
-0xd2,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0xd1,
-0xa5,
-0xc5,
-0xe5,
-0xd2,
-0x85,
-0xc5,
-0xad,
-0xab,
-0x02,
-0xc5,
-0xc6,
-0x90,
-0x16,
-0x38,
-0xe5,
-0xc6,
-0x45,
-0x73,
-0x0a,
-0xaa,
-0x98,
-0x2a,
-0xa8,
-0x8a,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x18,
-0x65,
-0xc6,
-0x80,
-0x21,
-0xa5,
-0xc6,
-0x38,
-0xed,
-0xab,
-0x02,
-0x45,
-0x73,
-0x0a,
-0xaa,
-0x98,
-0x2a,
-0xa8,
-0x8a,
-0x38,
-0xe9,
-0x80,
-0x85,
-0xd1,
-0x98,
-0xe9,
-0x00,
-0x85,
-0xd2,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0xd1,
-0xa5,
-0xc6,
-0xe5,
-0xd2,
-0x85,
-0xc6,
-0xad,
-0xac,
-0x02,
-0xc5,
-0xc7,
-0x90,
-0x16,
-0x38,
-0xe5,
-0xc7,
-0x45,
-0x73,
-0x0a,
-0xaa,
-0x98,
-0x2a,
-0xa8,
-0x8a,
-0x18,
-0x69,
-0x80,
-0x98,
-0x69,
-0x00,
-0x18,
-0x65,
-0xc7,
-0x80,
-0x21,
-0xa5,
-0xc7,
-0x38,
-0xed,
-0xac,
-0x02,
-0x45,
-0x73,
-0x0a,
-0xaa,
-0x98,
-0x2a,
-0xa8,
-0x8a,
-0x38,
-0xe9,
-0x80,
-0x85,
-0xd1,
-0x98,
-0xe9,
-0x00,
-0x85,
-0xd2,
-0x38,
-0xa9,
-0x00,
-0xe5,
-0xd1,
-0xa5,
-0xc7,
-0xe5,
-0xd2,
-0x85,
-0xc7,
-0xa0,
-0x03,
-0x53,
-0xc5,
-0x00,
-0xaa,
-0x02,
-0x18,
-0xa5,
-0xc6,
-0x65,
-0xc5,
-0xb0,
-0x02,
-0x80,
-0x02,
-0xa9,
-0xff,
-0x85,
-0xc8,
-0xfa,
-0xa5,
-0xc5,
-0xdd,
-0x71,
-0x3c,
-0x90,
-0x16,
-0xa9,
-0x00,
-0x85,
-0xca,
-0xa5,
-0xc5,
-0xdd,
-0x70,
-0x3c,
-0x90,
-0x02,
-0x80,
-0x2a,
-0xa5,
-0xc8,
-0xdd,
-0x70,
-0x3c,
-0x90,
-0x2f,
-0x80,
-0x27,
-0xa5,
-0xc8,
-0xdd,
-0x6f,
-0x3c,
-0x90,
-0x2c,
-0xa9,
-0x01,
-0x85,
-0xca,
-0xa5,
-0xc8,
-0xdd,
-0x70,
-0x3c,
-0x90,
-0x02,
-0x80,
-0x13,
-0xa5,
-0xc7,
-0xdd,
-0x6e,
-0x3c,
-0x90,
-0x12,
-0xa9,
-0x03,
-0x85,
-0xcb,
-0x80,
-0x27,
-0xa9,
-0x00,
-0x85,
-0xcb,
-0x80,
-0x21,
-0xa9,
-0x01,
-0x85,
-0xcb,
-0x80,
-0x1b,
-0xa9,
-0x02,
-0x85,
-0xcb,
-0x80,
-0x15,
-0xa5,
-0xc7,
-0xdd,
-0x6e,
-0x3c,
-0x90,
-0x08,
-0xa9,
-0x03,
-0x85,
-0xca,
-0x85,
-0xcb,
-0x80,
-0x06,
-0xa9,
-0x02,
-0x85,
-0xca,
-0x85,
-0xcb,
-0xa5,
-0xc9,
-0xc5,
-0xca,
-0xf0,
-0x02,
-0xb0,
-0x0c,
-0xa5,
-0xca,
-0xf0,
-0x1a,
-0x85,
-0xcb,
-0xa5,
-0xc9,
-0x85,
-0xca,
-0x80,
-0x12,
-0xa5,
-0xca,
-0xc9,
-0x02,
-0xd0,
-0x08,
-0xa5,
-0xc9,
-0x85,
-0xcb,
-0x85,
-0xca,
-0x80,
-0x04,
-0xa5,
-0xc9,
-0x85,
-0xcb,
-0xa5,
-0x6e,
-0xd0,
-0x05,
-0xad,
-0xa9,
-0x02,
-0xd0,
-0x14,
-0xa9,
-0x01,
-0x8d,
-0xae,
-0x02,
-0x8d,
-0xaf,
-0x02,
-0xa5,
-0xca,
-0x8d,
-0xb4,
-0x02,
-0xa5,
-0xcb,
-0x8d,
-0xb5,
-0x02,
-0x80,
-0x3c,
-0xa5,
-0xca,
-0xcd,
-0xb4,
-0x02,
-0xd0,
-0x0d,
-0xad,
-0xae,
-0x02,
-0xcd,
-0x9e,
-0x3c,
-0xb0,
-0x0f,
-0xee,
-0xae,
-0x02,
-0x80,
-0x06,
-0x8d,
-0xb4,
-0x02,
-0x9c,
-0xae,
-0x02,
-0xa5,
-0x74,
-0x85,
-0xca,
-0xa5,
-0xcb,
-0xcd,
-0xb5,
-0x02,
-0xd0,
-0x0d,
-0xad,
-0xaf,
-0x02,
-0xcd,
-0x9e,
-0x3c,
-0xb0,
-0x0f,
-0xee,
-0xaf,
-0x02,
-0x80,
-0x06,
-0x8d,
-0xb5,
-0x02,
-0x9c,
-0xaf,
-0x02,
-0xa5,
-0x75,
-0x85,
-0xcb,
-0xa9,
-0x01,
-0x8d,
-0xa9,
-0x02,
-0xa5,
-0xca,
-0x20,
-0xe4,
-0x0c,
-0x8d,
-0xb6,
-0x02,
-0x8e,
-0xb7,
-0x02,
-0xa5,
-0xcb,
-0x20,
-0xe4,
-0x0c,
-0x8d,
-0xb8,
-0x02,
-0x8e,
-0xb9,
-0x02,
-0xa2,
-0x00,
-0xa0,
-0x00,
-0xc4,
-0xb6,
-0xb0,
-0x1e,
-0xa5,
-0xb7,
-0x29,
-0x10,
-0xf0,
-0x03,
-0x38,
-0x80,
-0x01,
-0x18,
-0x3e,
-0x0b,
-0x2d,
-0x3e,
-0x0c,
-0x2d,
-0x3e,
-0x0d,
-0x2d,
-0x3e,
-0x0e,
-0x2d,
-0xc8,
-0x18,
-0x8a,
-0x69,
-0x10,
-0xaa,
-0x80,
-0xde,
-0xa0,
-0x50,
-0x53,
-0xff,
-0x2c,
-0x52,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x04,
-0x60,
-0x60,
-0xa5,
-0xd3,
-0x45,
-0xc2,
-0x85,
-0xc5,
-0x84,
-0xc6,
-0xa5,
-0xd4,
-0x45,
-0xc2,
-0x18,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0x69,
-0x00,
-0x85,
-0xc7,
-0xa5,
-0xd5,
-0x45,
-0xc2,
-0x18,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0x98,
-0x69,
-0x00,
-0x85,
-0xc8,
-0xa5,
-0xd6,
-0x45,
-0xc2,
-0x18,
-0x65,
-0xc8,
-0x85,
-0xc8,
-0x60,
-0xa0,
-0x10,
-0x13,
-0x54,
-0x60,
-0xd3,
-0x00,
-0x38,
-0xa5,
-0xd7,
-0xe5,
-0xdb,
-0x85,
-0x44,
-0xa5,
-0xd8,
-0xe5,
-0xdc,
-0x85,
-0x45,
-0xa5,
-0xd9,
-0xe5,
-0xdd,
-0x85,
-0x46,
-0xa5,
-0xda,
-0xe5,
-0xde,
-0x85,
-0x47,
-0xad,
-0x9d,
-0x3c,
-0xc5,
-0xe0,
-0x90,
-0x0c,
-0xd0,
-0x07,
-0xad,
-0x9c,
-0x3c,
-0xc5,
-0xdf,
-0x90,
-0x03,
-0x4c,
-0xa7,
-0x1f,
-0xa5,
-0xd6,
-0xd0,
-0x2b,
-0xa5,
-0xdf,
-0x45,
-0xb5,
-0x85,
-0xcd,
-0x84,
-0xce,
-0xa5,
-0xe0,
-0x45,
-0xb5,
-0x18,
-0x65,
-0xce,
-0x85,
-0xce,
-0x98,
-0x69,
-0x00,
-0xc5,
-0xd5,
-0x90,
-0x13,
-0xd0,
-0x0e,
-0xa5,
-0xce,
-0xc5,
-0xd4,
-0x90,
-0x0b,
-0xd0,
-0x06,
-0xa5,
-0xcd,
-0xc5,
-0xd3,
-0x90,
-0x03,
-0x4c,
-0xa7,
-0x1f,
-0xe6,
-0x37,
-0xa5,
-0x79,
-0x29,
-0x01,
-0xf0,
-0x07,
-0x18,
-0xa5,
-0x65,
-0xe5,
-0xbd,
-0x80,
-0x02,
-0xa5,
-0xbd,
-0x45,
-0x6f,
-0xa8,
-0xb9,
-0x2b,
-0x28,
-0x4a,
-0xa8,
-0xb1,
-0xcb,
-0xb0,
-0x04,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0x29,
-0x0f,
-0xa8,
-0xad,
-0xe0,
-0x2c,
-0xc9,
-0x08,
-0xf0,
-0x17,
-0xc9,
-0x02,
-0xf0,
-0x09,
-0xc9,
-0x04,
-0xf0,
-0x0a,
-0xb9,
-0x50,
-0x3c,
-0x80,
-0x0d,
-0xb9,
-0x4d,
-0x3c,
-0x80,
-0x08,
-0xb9,
-0x4a,
-0x3c,
-0x80,
-0x03,
-0xb9,
-0x47,
-0x3c,
-0x85,
-0xc0,
-0xa5,
-0x47,
-0x29,
-0x80,
-0x85,
-0xbf,
-0xf0,
-0x17,
-0x38,
-0xa9,
-0x00,
-0xaa,
-0xe5,
-0x44,
-0x85,
-0x44,
-0x8a,
-0xe5,
-0x45,
-0x85,
-0x45,
-0x8a,
-0xe5,
-0x46,
-0x85,
-0x46,
-0x8a,
-0xe5,
-0x47,
-0x85,
-0x47,
-0xa4,
-0xbd,
-0xb9,
-0xcb,
-0x2b,
-0xa8,
-0xb9,
-0x2b,
-0x28,
-0x4a,
-0xa8,
-0xb1,
-0xc9,
-0xb0,
-0x04,
-0x4a,
-0x4a,
-0x4a,
-0x4a,
-0x29,
-0x0f,
-0xa8,
-0xb9,
-0x11,
-0x2c,
-0x85,
-0xc2,
-0xa5,
-0x44,
-0x45,
-0xc2,
-0x85,
-0x44,
-0x84,
-0xd1,
-0xa5,
-0x45,
-0x45,
-0xc2,
-0x18,
-0x65,
-0xd1,
-0x85,
-0x45,
-0x98,
-0x69,
-0x00,
-0x85,
-0xd1,
-0xa5,
-0x46,
-0x45,
-0xc2,
-0x18,
-0x65,
-0xd1,
-0x85,
-0x46,
-0x98,
-0x69,
-0x00,
-0x85,
-0xd1,
-0xa5,
-0x47,
-0x45,
-0xc2,
-0x18,
-0x65,
-0xd1,
-0x85,
-0x47,
-0xa5,
-0xbf,
-0xf0,
-0x6a,
-0xad,
-0x65,
-0x3c,
-0x85,
-0xc2,
-0x20,
-0xb9,
-0x1d,
-0xa5,
-0x47,
-0xc5,
-0xc8,
-0x90,
-0x27,
-0xd0,
-0x16,
-0xa5,
-0x46,
-0xc5,
-0xc7,
-0x90,
-0x1f,
-0xd0,
-0x0e,
-0xa5,
-0x45,
-0xc5,
-0xc6,
-0x90,
-0x17,
-0xd0,
-0x06,
-0xa5,
-0x44,
-0xc5,
-0xc5,
-0x90,
-0x0f,
-0xe6,
-0x38,
-0x18,
-0xa5,
-0xc0,
-0x65,
-0x3c,
-0x85,
-0x3c,
-0x90,
-0x7b,
-0xe6,
-0x3d,
-0x80,
-0x77,
-0xad,
-0x66,
-0x3c,
-0x85,
-0xc2,
-0x20,
-0xb9,
-0x1d,
-0xa5,
-0x47,
-0xc5,
-0xc8,
-0x90,
-0x4d,
-0xd0,
-0x16,
-0xa5,
-0x46,
-0xc5,
-0xc7,
-0x90,
-0x45,
-0xd0,
-0x0e,
-0xa5,
-0x45,
-0xc5,
-0xc6,
-0x90,
-0x3d,
-0xd0,
-0x06,
-0xa5,
-0x44,
-0xc5,
-0xc5,
-0x90,
-0x35,
-0xe6,
-0x39,
-0x18,
-0xa5,
-0xc0,
-0x65,
-0x3e,
-0x85,
-0x3e,
-0x90,
-0x46,
-0xe6,
-0x3f,
-0x80,
-0x42,
-0xad,
-0x67,
-0x3c,
-0x85,
-0xc2,
-0x20,
-0xb9,
-0x1d,
-0xa5,
-0xc8,
-0xc5,
-0x47,
-0x90,
-0x27,
-0xd0,
-0x16,
-0xa5,
-0xc7,
-0xc5,
-0x46,
-0x90,
-0x1f,
-0xd0,
-0x0e,
-0xa5,
-0xc6,
-0xc5,
-0x45,
-0x90,
-0x17,
-0xd0,
-0x06,
-0xa5,
-0xc5,
-0xc5,
-0x44,
-0x90,
-0x0f,
-0xe6,
-0x3a,
-0x18,
-0xa5,
-0xc0,
-0x65,
-0x40,
-0x85,
-0x40,
-0x90,
-0x11,
-0xe6,
-0x41,
-0x80,
-0x0d,
-0xe6,
-0x3b,
-0x18,
-0xa5,
-0xc0,
-0x65,
-0x42,
-0x85,
-0x42,
-0x90,
-0x02,
-0xe6,
-0x43,
-0xa5,
-0xb6,
-0xd0,
-0x01,
-0x60,
-0xa6,
-0xbd,
-0xbd,
-0xe7,
-0x2b,
-0x25,
-0x21,
-0xd0,
-0x01,
-0x60,
-0x85,
-0xcf,
-0xa0,
-0x00,
-0xa9,
-0x01,
-0x85,
-0xd0,
-0x25,
-0xcf,
-0xd0,
-0x03,
-0x4c,
-0x44,
-0x20,
-0x98,
-0xfc,
-0x49,
-0x10,
-0xdc,
-0xaa,
-0x18,
-0xa5,
-0xd3,
-0x7d,
-0xff,
-0x2c,
-0x9d,
-0xff,
-0x2c,
-0xa5,
-0xd4,
-0x7d,
-0x00,
-0x2d,
-0x9d,
-0x00,
-0x2d,
-0xa5,
-0xd5,
-0x7d,
-0x01,
-0x2d,
-0x9d,
-0x01,
-0x2d,
-0xa5,
-0xd6,
-0x7d,
-0x02,
-0x2d,
-0x9d,
-0x02,
-0x2d,
-0x18,
-0xa5,
-0xd7,
-0x7d,
-0x03,
-0x2d,
-0x9d,
-0x03,
-0x2d,
-0xa5,
-0xd8,
-0x7d,
-0x04,
-0x2d,
-0x9d,
-0x04,
-0x2d,
-0xa5,
-0xd9,
-0x7d,
-0x05,
-0x2d,
-0x9d,
-0x05,
-0x2d,
-0xa5,
-0xda,
-0x7d,
-0x06,
-0x2d,
-0x9d,
-0x06,
-0x2d,
-0x18,
-0xa5,
-0xdb,
-0x7d,
-0x07,
-0x2d,
-0x9d,
-0x07,
-0x2d,
-0xa5,
-0xdc,
-0x7d,
-0x08,
-0x2d,
-0x9d,
-0x08,
-0x2d,
-0xa5,
-0xdd,
-0x7d,
-0x09,
-0x2d,
-0x9d,
-0x09,
-0x2d,
-0xa5,
-0xde,
-0x7d,
-0x0a,
-0x2d,
-0x9d,
-0x0a,
-0x2d,
-0x18,
-0xa5,
-0xdf,
-0x7d,
-0x0b,
-0x2d,
-0x9d,
-0x0b,
-0x2d,
-0xa5,
-0xe0,
-0x7d,
-0x0c,
-0x2d,
-0x9d,
-0x0c,
-0x2d,
-0x90,
-0x03,
-0xfe,
-0x0d,
-0x2d,
-0xc8,
-0xc4,
-0xb6,
-0xb0,
-0x06,
-0xa5,
-0xd0,
-0x0a,
-0x4c,
-0xbc,
-0x1f,
-0x60,
-0xaa,
-0xa5,
-0x6c,
-0xd0,
-0x03,
-0x4c,
-0xc1,
-0x20,
-0xa5,
-0x6d,
-0xc9,
-0x00,
-0xf0,
-0xf7,
-0x8a,
-0x29,
-0x01,
-0xf0,
-0x06,
-0xa2,
-0x38,
-0xa9,
-0x04,
-0x80,
-0x04,
-0xa2,
-0x38,
-0xa9,
-0x03,
-0x8e,
-0x0c,
-0x60,
-0x8d,
-0x0d,
-0x60,
-0xa4,
-0xaf,
-0xb9,
-0xf7,
-0x2b,
-0x85,
-0x21,
-0xb9,
-0xdb,
-0x2b,
-0xa8,
-0xb9,
-0x3b,
-0x28,
-0x49,
-0x04,
-0x18,
-0x69,
-0x10,
-0x85,
-0xc9,
-0xa9,
-0x00,
-0x69,
-0x3c,
-0x85,
-0xca,
-0xa5,
-0x79,
-0x29,
-0x02,
-0xf0,
-0x07,
-0x18,
-0xa5,
-0x66,
-0xe5,
-0xaf,
-0x80,
-0x02,
-0xa5,
-0xaf,
-0x45,
-0x70,
-0xa8,
-0xb9,
-0x3b,
-0x28,
-0x49,
-0x04,
-0x18,
-0x69,
-0x2f,
-0x85,
-0xcb,
-0xa9,
-0x00,
-0x69,
-0x3c,
-0x85,
-0xcc,
-0x64,
-0xbd,
-0xa6,
-0x65,
-0x86,
-0xbe,
-0x80,
-0x02,
-0xe6,
-0xbd,
-0x20,
-0xe7,
-0x1d,
-0xc6,
-0xbe,
-0xd0,
-0xf7,
-0xe6,
-0xaf,
-0x60,
-0x64,
-0xc3,
-0x64,
-0xc4,
-0xa2,
-0x10,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x26,
-0xc3,
-0x26,
-0xc4,
-0xa5,
-0xc3,
-0x38,
-0xe5,
-0xbd,
-0xa8,
-0xa5,
-0xc4,
-0xe9,
-0x00,
-0x90,
-0x06,
-0x85,
-0xc4,
-0x84,
-0xc3,
-0xe6,
-0xc1,
-0xca,
-0xd0,
-0xe3,
-0x60,
-0x18,
-0xa5,
-0xc1,
-0x65,
-0xc5,
-0x85,
-0xc5,
-0xa2,
-0x00,
-0xa5,
-0xc2,
-0x10,
-0x02,
-0xa2,
-0xff,
-0x86,
-0xbd,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0xa5,
-0xc7,
-0x65,
-0xbd,
-0x85,
-0xc7,
-0xa5,
-0xc8,
-0x65,
-0xbd,
-0x85,
-0xc8,
-0x60,
-0xa5,
-0xc1,
-0x45,
-0xc3,
-0x85,
-0xc5,
-0x84,
-0xc6,
-0xa5,
-0xc1,
-0x45,
-0xc4,
-0x18,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0x69,
-0x00,
-0x85,
-0xc7,
-0x64,
-0xc8,
-0xa5,
-0xc2,
-0x45,
-0xc3,
-0x18,
-0x65,
-0xc6,
-0x85,
-0xc6,
-0x98,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0x90,
-0x02,
-0xe6,
-0xc8,
-0xa5,
-0xc2,
-0x45,
-0xc4,
-0x18,
-0x65,
-0xc7,
-0x85,
-0xc7,
-0x98,
-0x65,
-0xc8,
-0x85,
-0xc8,
-0x60,
-0x20,
-0x0a,
-0x21,
-0xa5,
-0xc4,
-0x10,
-0x0d,
-0x38,
-0xa5,
-0xc7,
-0xe5,
-0xc1,
-0x85,
-0xc7,
-0xa5,
-0xc8,
-0xe5,
-0xc2,
-0x85,
-0xc8,
-0x60,
-0xfc,
-0x49,
-0x20,
-0x98,
-0x4a,
-0x69,
-0x00,
-0x85,
-0xbd,
-0x8a,
-0x49,
-0x10,
-0xc0,
-0x00,
-0xd0,
-0x09,
-0x18,
-0x65,
-0xbd,
-0xb0,
-0x04,
-0xc9,
-0x7f,
-0x90,
-0x02,
-0xa9,
-0x7f,
-0x60,
-0xfc,
-0x49,
-0x10,
-0x98,
-0x4a,
-0x69,
-0x00,
-0x85,
-0xbd,
-0x8a,
-0x49,
-0x08,
-0x18,
-0x65,
-0xbd,
-0xd0,
-0x01,
-0x3a,
-0x60,
-0x20,
-0xac,
-0x21,
-0x46,
-0xc2,
-0x66,
-0xc1,
-0x90,
-0x06,
-0xe6,
-0xc1,
-0xd0,
-0x02,
-0xe6,
-0xc2,
-0x38,
-0xa5,
-0xc3,
-0xe5,
-0xc1,
-0xa5,
-0xc4,
-0xe5,
-0xc2,
-0x30,
-0x0a,
-0xe6,
-0xc5,
-0xd0,
-0x06,
-0xe6,
-0xc6,
-0xd0,
-0x02,
-0xe6,
-0xc7,
-0x60,
-0x64,
-0xc3,
-0x64,
-0xc4,
-0x64,
-0xbd,
-0xa2,
-0x18,
-0x06,
-0xc5,
-0x26,
-0xc6,
-0x26,
-0xc7,
-0x26,
-0xc3,
-0x26,
-0xc4,
-0x26,
-0xbd,
-0xa5,
-0xc3,
-0x38,
-0xe5,
-0xc1,
-0xa8,
-0xa5,
-0xc4,
-0xe5,
-0xc2,
-0x85,
-0xbe,
-0xa5,
-0xbd,
-0xe9,
-0x00,
-0x90,
-0x0a,
-0x85,
-0xbd,
-0xa5,
-0xbe,
-0x85,
-0xc4,
-0x84,
-0xc3,
-0xe6,
-0xc5,
-0xca,
-0xd0,
-0xd5,
-0x60,
-0xa9,
-0x00,
-0xaa,
-0x38,
-0xe5,
-0xc5,
-0x85,
-0xc5,
-0x8a,
-0xe5,
-0xc6,
-0x85,
-0xc6,
-0x8a,
-0xe5,
-0xc7,
-0x85,
-0xc7,
-0x8a,
-0xe5,
-0xc8,
-0x85,
-0xc8,
-0x8a,
-0x38,
-0xe5,
-0xc9,
-0x85,
-0xc9,
-0x8a,
-0xe5,
-0xca,
-0x85,
-0xca,
-0x8a,
-0xe5,
-0xcb,
-0x85,
-0xcb,
-0x8a,
-0xe5,
-0xcc,
-0x85,
-0xcc,
-0x60,
-0xa5,
-0xc8,
-0x05,
-0xcc,
-0xf0,
-0x2b,
-0x38,
-0xa5,
-0xc8,
-0xe5,
-0xcc,
-0x30,
-0x04,
-0xa5,
-0xc8,
-0x80,
-0x11,
-0xa5,
-0xcc,
-0x80,
-0x0d,
-0x26,
-0xc6,
-0x26,
-0xc7,
-0x26,
-0xc8,
-0x26,
-0xca,
-0x26,
-0xcb,
-0x26,
-0xcc,
-0x0a,
-0x10,
-0xf1,
-0xa0,
-0x02,
-0x53,
-0xc7,
-0x00,
-0xc1,
-0x00,
-0x53,
-0xcb,
-0x00,
-0xc3,
-0x00,
-0x60,
-0xa5,
-0xc7,
-0x05,
-0xcb,
-0xf0,
-0x2b,
-0x38,
-0xa5,
-0xc7,
-0xe5,
-0xcb,
-0x30,
-0x04,
-0xa5,
-0xc7,
-0x80,
-0x11,
-0xa5,
-0xcb,
-0x80,
-0x0d,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0x26,
-0xc7,
-0x26,
-0xc9,
-0x26,
-0xca,
-0x26,
-0xcb,
-0x0a,
-0x10,
-0xf1,
-0xa0,
-0x02,
-0x53,
-0xc6,
-0x00,
-0xc1,
-0x00,
-0x53,
-0xca,
-0x00,
-0xc3,
-0x00,
-0x60,
-0xa5,
-0xc6,
-0x30,
-0x0e,
-0xa5,
-0xca,
-0x30,
-0x0a,
-0x06,
-0xc5,
-0x26,
-0xc6,
-0x06,
-0xc9,
-0x26,
-0xca,
-0x80,
-0xee,
-0xa0,
-0x02,
-0x53,
-0xc5,
-0x00,
-0xc1,
-0x00,
-0x53,
-0xc9,
-0x00,
-0xc3,
-0x00,
-0x60,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xb4,
-0x26,
-0x48,
-0xee,
-0xa8,
-0x2c,
-0xd0,
-0x08,
-0xee,
-0xa9,
-0x2c,
-0xd0,
-0x03,
-0xee,
-0xaa,
-0x2c,
-0xf8,
-0xad,
-0x08,
-0x68,
-0xc9,
-0x01,
-0xd0,
-0x4b,
-0xa5,
-0x12,
-0xf0,
-0x1e,
-0x64,
-0x12,
-0xa5,
-0x11,
-0x09,
-0x03,
-0x85,
-0x11,
-0xa0,
-0x48,
-0x53,
-0x0b,
-0x02,
-0x18,
-0x2c,
-0xa0,
-0x03,
-0x53,
-0xa8,
-0x2c,
-0xab,
-0x2c,
-0xad,
-0xa4,
-0x02,
-0x8d,
-0x5f,
-0x2c,
-0x80,
-0x1c,
-0xe6,
-0x12,
-0xa5,
-0x11,
-0x09,
-0x30,
-0x85,
-0x11,
-0xa0,
-0x48,
-0x53,
-0x0b,
-0x02,
-0x60,
-0x2c,
-0xa0,
-0x03,
-0x53,
-0xa8,
-0x2c,
-0xae,
-0x2c,
-0xad,
-0xa4,
-0x02,
-0x8d,
-0xa7,
-0x2c,
-0x9c,
-0x18,
-0x68,
-0xee,
-0x18,
-0x68,
-0xa5,
-0x10,
-0xd0,
-0x03,
-0x20,
-0x41,
-0x27,
-0x4c,
-0x16,
-0x27,
-0xa9,
-0x01,
-0x8d,
-0x18,
-0x68,
-0x68,
-0x68,
-0x68,
-0xa9,
-0x03,
-0x48,
-0xa9,
-0x00,
-0x48,
-0xba,
-0xda,
-0x40,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xb4,
-0x26,
-0x48,
-0xf8,
-0xad,
-0x34,
-0x60,
-0xaa,
-0x29,
-0x03,
-0xc9,
-0x02,
-0xd0,
-0x0f,
-0xda,
-0x64,
-0x10,
-0x20,
-0x41,
-0x27,
-0xfa,
-0xa5,
-0x71,
-0x29,
-0x02,
-0xf0,
-0x07,
-0x80,
-0x26,
-0x8a,
-0x29,
-0xf8,
-0xf0,
-0x2b,
-0x8a,
-0x29,
-0x04,
-0x48,
-0x4a,
-0x4a,
-0x20,
-0x50,
-0x20,
-0xa5,
-0xae,
-0xf0,
-0x13,
-0xc6,
-0xae,
-0x68,
-0xd0,
-0x07,
-0xa9,
-0x09,
-0x8d,
-0x38,
-0x60,
-0x80,
-0x31,
-0xa9,
-0x0d,
-0x8d,
-0x38,
-0x60,
-0x80,
-0x2a,
-0x68,
-0x20,
-0xae,
-0x1a,
-0xa9,
-0x01,
-0x8d,
-0x24,
-0x68,
-0x80,
-0x1f,
-0xa5,
-0x7e,
-0xf0,
-0x1b,
-0x3a,
-0x85,
-0x7e,
-0x8a,
-0x29,
-0x04,
-0x48,
-0x4a,
-0x4a,
-0x20,
-0x36,
-0x1a,
-0x68,
-0xd0,
-0x07,
-0xa9,
-0x01,
-0x8d,
-0x38,
-0x60,
-0x80,
-0x05,
-0xa9,
-0x05,
-0x8d,
-0x38,
-0x60,
-0x4c,
-0x16,
-0x27,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xb4,
-0x26,
-0x48,
-0xee,
-0xa5,
-0x02,
-0xd0,
-0x03,
-0xee,
-0xa6,
-0x02,
-0xa0,
-0x4f,
-0x9c,
-0x52,
-0x02,
-0x13,
-0x52,
-0x02,
-0x53,
-0x02,
-0xa9,
-0x01,
-0x9c,
-0x24,
-0x68,
-0x8d,
-0x24,
-0x68,
-0x8d,
-0x04,
-0x60,
-0x64,
-0x10,
-0x20,
-0x41,
-0x27,
-0x4c,
-0x1d,
-0x27,
-0x08,
-0x78,
-0x68,
-0x8a,
-0x29,
-0xf0,
-0xf0,
-0x09,
-0x8a,
-0x29,
-0x0f,
-0xf0,
-0x2b,
-0xa5,
-0x12,
-0xd0,
-0x27,
-0x8a,
-0x29,
-0xf0,
-0x85,
-0x11,
-0x64,
-0x14,
-0x8a,
-0x29,
-0x02,
-0x85,
-0x15,
-0xa9,
-0x2a,
-0x8d,
-0xb1,
-0x2d,
-0x64,
-0x61,
-0x64,
-0x62,
-0xa0,
-0x48,
-0x53,
-0x18,
-0x2c,
-0xb7,
-0x2c,
-0x9c,
-0xb1,
-0x2c,
-0x9c,
-0xb2,
-0x2c,
-0x9c,
-0xb3,
-0x2c,
-0x80,
-0x2b,
-0x8a,
-0x29,
-0x0f,
-0x85,
-0x11,
-0xa9,
-0x01,
-0x85,
-0x14,
-0x8a,
-0x29,
-0x20,
-0x85,
-0x15,
-0xa9,
-0x2a,
-0x8d,
-0x14,
-0x2e,
-0xa9,
-0x38,
-0x85,
-0x61,
-0xa9,
-0x03,
-0x85,
-0x62,
-0xa0,
-0x48,
-0x53,
-0x60,
-0x2c,
-0xb7,
-0x2c,
-0x9c,
-0xb4,
-0x2c,
-0x9c,
-0xb5,
-0x2c,
-0x9c,
-0xb6,
-0x2c,
-0x58,
-0xa5,
-0x15,
-0xd0,
-0x38,
-0xa0,
-0x70,
-0xa5,
-0x14,
-0xd0,
-0x0e,
-0x53,
-0xb3,
-0x2a,
-0x93,
-0x2b,
-0xa0,
-0x63,
-0x53,
-0x4f,
-0x2d,
-0x57,
-0x00,
-0x80,
-0x0c,
-0x53,
-0x23,
-0x2b,
-0x93,
-0x2b,
-0xa0,
-0x63,
-0x53,
-0xb2,
-0x2d,
-0x57,
-0x00,
-0xa5,
-0x64,
-0xcd,
-0xa8,
-0x02,
-0xd0,
-0x0b,
-0xa5,
-0x63,
-0xcd,
-0xa7,
-0x02,
-0xd0,
-0x04,
-0xa9,
-0x00,
-0x80,
-0x02,
-0xa9,
-0x01,
-0x85,
-0x6e,
-0xa5,
-0x15,
-0x20,
-0x51,
-0x04,
-0x85,
-0xb9,
-0xf0,
-0x03,
-0x4c,
-0xe6,
-0x24,
-0x64,
-0x7f,
-0x64,
-0xaf,
-0xa0,
-0x02,
-0x53,
-0x61,
-0x00,
-0x30,
-0x60,
-0xa9,
-0x00,
-0x8d,
-0x0c,
-0x60,
-0x9c,
-0x0d,
-0x60,
-0xa5,
-0x65,
-0x0a,
-0xa8,
-0x43,
-0x93,
-0x2b,
-0x54,
-0x60,
-0xa9,
-0x20,
-0x8d,
-0x0c,
-0x60,
-0x9c,
-0x0d,
-0x60,
-0xa5,
-0x66,
-0x0a,
-0xa8,
-0x43,
-0xb3,
-0x2b,
-0x54,
-0x60,
-0xa5,
-0x66,
-0x85,
-0x7e,
-0x3a,
-0x85,
-0xae,
-0xa9,
-0x02,
-0x48,
-0x20,
-0x36,
-0x1a,
-0x68,
-0xc6,
-0x7e,
-0xf0,
-0x03,
-0x3a,
-0xd0,
-0xf4,
-0xa5,
-0x14,
-0xd0,
-0x27,
-0xa0,
-0x93,
-0x53,
-0x0c,
-0x2a,
-0xe6,
-0x28,
-0xa0,
-0x07,
-0x53,
-0x11,
-0x2c,
-0x03,
-0x2c,
-0xa0,
-0x70,
-0x53,
-0x93,
-0x2b,
-0xb3,
-0x2a,
-0xa0,
-0x63,
-0x53,
-0x57,
-0x00,
-0x4f,
-0x2d,
-0xa0,
-0x03,
-0x53,
-0xab,
-0x2c,
-0xb1,
-0x2c,
-0xa2,
-0x00,
-0x80,
-0x4d,
-0xa0,
-0x93,
-0x53,
-0x0c,
-0x2a,
-0x79,
-0x29,
-0xa0,
-0x07,
-0x53,
-0x11,
-0x2c,
-0x0a,
-0x2c,
-0xa0,
-0x70,
-0x53,
-0x93,
-0x2b,
-0x23,
-0x2b,
-0xa0,
-0x63,
-0x53,
-0x57,
-0x00,
-0xb2,
-0x2d,
-0xa0,
-0x03,
-0x53,
-0xae,
-0x2c,
-0xb4,
-0x2c,
-0xa2,
-0x01,
-0x80,
-0x26,
-0xa6,
-0x14,
-0xd0,
-0x12,
-0xa0,
-0x63,
-0x53,
-0x57,
-0x00,
-0x4f,
-0x2d,
-0xa0,
-0x03,
-0x53,
-0xab,
-0x2c,
-0xb1,
-0x2c,
-0xa2,
-0x00,
-0x80,
-0x10,
-0xa0,
-0x63,
-0x53,
-0x57,
-0x00,
-0xb2,
-0x2d,
-0xa0,
-0x03,
-0x53,
-0xae,
-0x2c,
-0xb4,
-0x2c,
-0xa2,
-0x01,
-0xa5,
-0x15,
-0xf0,
-0x04,
-0x86,
-0x13,
-0x64,
-0x15,
-0x9c,
-0x1c,
-0x68,
-0xee,
-0x1c,
-0x68,
-0x60,
-0xf8,
-0xa6,
-0x11,
-0xda,
-0xa6,
-0x11,
-0xf0,
-0x05,
-0x20,
-0xa8,
-0x23,
-0x80,
-0xf7,
-0xfa,
-0xf0,
-0x0f,
-0xad,
-0xba,
-0x02,
-0xf0,
-0x0a,
-0xa0,
-0x02,
-0x53,
-0x63,
-0x00,
-0x09,
-0x02,
-0x20,
-0x55,
-0x25,
-0x9c,
-0xdd,
-0x28,
-0x4c,
-0x33,
-0x27,
-0x5a,
-0xda,
-0x48,
-0x20,
-0xb4,
-0x26,
-0x48,
-0xf8,
-0xad,
-0x0c,
-0x68,
-0xc9,
-0x01,
-0xd0,
-0x03,
-0x20,
-0x55,
-0x25,
-0x4c,
-0x16,
-0x27,
-0x9c,
-0x20,
-0x68,
-0x9c,
-0x24,
-0x68,
-0x9c,
-0x28,
-0x68,
-0xa5,
-0x10,
-0xf0,
-0x05,
-0xa9,
-0x08,
-0x4c,
-0x98,
-0x25,
-0xa2,
-0x00,
-0xad,
-0x0a,
-0x02,
-0xcd,
-0x5c,
-0x2d,
-0xd0,
-0x09,
-0xad,
-0x09,
-0x02,
-0xcd,
-0x5b,
-0x2d,
-0xd0,
-0x01,
-0xe8,
-0xad,
-0x0a,
-0x02,
-0xcd,
-0xbf,
-0x2d,
-0xd0,
-0x0a,
-0xad,
-0x09,
-0x02,
-0xcd,
-0xbe,
-0x2d,
-0xd0,
-0x02,
-0xe8,
-0xe8,
-0xe0,
-0x00,
-0xd0,
-0x11,
-0xa9,
-0x05,
-0xc9,
-0x2a,
-0xd0,
-0x02,
-0xa9,
-0x05,
-0x8d,
-0x08,
-0x02,
-0xa9,
-0x01,
-0x8d,
-0x28,
-0x68,
-0x60,
-0xe0,
-0x01,
-0xf0,
-0x1d,
-0xe0,
-0x02,
-0xf0,
-0x3c,
-0x38,
-0xad,
-0xb4,
-0x2c,
-0xed,
-0xb1,
-0x2c,
-0xad,
-0xb5,
-0x2c,
-0xed,
-0xb2,
-0x2c,
-0xad,
-0xb6,
-0x2c,
-0xed,
-0xb3,
-0x2c,
-0xa9,
-0x00,
-0x69,
-0x00,
-0xd0,
-0x23,
-0xad,
-0xb1,
-0x2d,
-0xd0,
-0xcb,
-0xa0,
-0x63,
-0x53,
-0x4f,
-0x2d,
-0x57,
-0x00,
-0xa0,
-0x93,
-0x53,
-0xe6,
-0x28,
-0x0c,
-0x2a,
-0xa0,
-0x07,
-0x53,
-0x03,
-0x2c,
-0x11,
-0x2c,
-0xa0,
-0x38,
-0x53,
-0xeb,
-0x2a,
-0xcb,
-0x2b,
-0x80,
-0x21,
-0xad,
-0x14,
-0x2e,
-0xd0,
-0xa8,
-0xa0,
-0x63,
-0x53,
-0xb2,
-0x2d,
-0x57,
-0x00,
-0xa0,
-0x93,
-0x53,
-0x79,
-0x29,
-0x0c,
-0x2a,
-0xa0,
-0x07,
-0x53,
-0x0a,
-0x2c,
-0x11,
-0x2c,
-0xa0,
-0x38,
-0x53,
-0x5b,
-0x2b,
-0xcb,
-0x2b,
-0x9c,
-0x08,
-0x02,
-0xa5,
-0x11,
-0xa0,
-0x2a,
-0xae,
-0xb1,
-0x2d,
-0xe0,
-0x00,
-0xf0,
-0x0c,
-0xe0,
-0x2a,
-0xd0,
-0x0d,
-0xa6,
-0x15,
-0xe0,
-0x00,
-0xf0,
-0x02,
-0x09,
-0x03,
-0x09,
-0x01,
-0x8c,
-0xb1,
-0x2d,
-0xae,
-0x14,
-0x2e,
-0xe0,
-0x00,
-0xf0,
-0x0c,
-0xe0,
-0x2a,
-0xd0,
-0x0d,
-0xa6,
-0x15,
-0xe0,
-0x00,
-0xf0,
-0x02,
-0x09,
-0x30,
-0x09,
-0x10,
-0x8c,
-0x14,
-0x2e,
-0x85,
-0x11,
-0xa0,
-0x03,
-0x53,
-0x76,
-0x00,
-0xb0,
-0x02,
-0xa0,
-0x02,
-0x53,
-0x63,
-0x00,
-0xa7,
-0x02,
-0xa5,
-0xb7,
-0x8d,
-0xbc,
-0x02,
-0xa5,
-0xb8,
-0x8d,
-0xbb,
-0x02,
-0x20,
-0xa0,
-0x18,
-0xa9,
-0x02,
-0x8d,
-0x38,
-0x60,
-0xa9,
-0x01,
-0x8d,
-0x38,
-0x60,
-0xa9,
-0x05,
-0x8d,
-0x38,
-0x60,
-0xa9,
-0x09,
-0x8d,
-0x38,
-0x60,
-0xa5,
-0x71,
-0x29,
-0x02,
-0xd0,
-0x0e,
-0xa9,
-0x0d,
-0x8d,
-0x38,
-0x60,
-0xa0,
-0x0c,
-0x64,
-0x37,
-0x13,
-0x37,
-0x00,
-0x38,
-0x00,
-0x18,
-0xad,
-0xa2,
-0x02,
-0x69,
-0x01,
-0x8d,
-0xa2,
-0x02,
-0xad,
-0xa3,
-0x02,
-0x69,
-0x00,
-0x8d,
-0xa3,
-0x02,
-0xa5,
-0x6c,
-0x8d,
-0xad,
-0x02,
-0xa5,
-0x6e,
-0x8d,
-0xb3,
-0x02,
-0x9c,
-0xdd,
-0x28,
-0xa9,
-0x01,
-0x8d,
-0x20,
-0x68,
-0x85,
-0x10,
-0x64,
-0xb9,
-0xa0,
-0x4f,
-0x9c,
-0xff,
-0x2c,
-0x13,
-0xff,
-0x2c,
-0x00,
-0x2d,
-0x60,
-0xba,
-0x08,
-0x78,
-0x68,
-0x48,
-0x29,
-0x1c,
-0x85,
-0xbc,
-0x86,
-0xba,
-0xa9,
-0x01,
-0x85,
-0xbb,
-0xa0,
-0x06,
-0xb1,
-0xba,
-0x48,
-0x29,
-0x1c,
-0xc5,
-0xbc,
-0x90,
-0x08,
-0x7a,
-0xa0,
-0x09,
-0xb1,
-0xba,
-0x48,
-0x29,
-0x1c,
-0xc9,
-0x00,
-0xd0,
-0x38,
-0xa0,
-0x03,
-0xb1,
-0xba,
-0xe0,
-0x7f,
-0xb0,
-0x18,
-0x8d,
-0xde,
-0x28,
-0xc8,
-0xb1,
-0xba,
-0x8d,
-0xdf,
-0x28,
-0xc8,
-0xb1,
-0xba,
-0x8d,
-0xe0,
-0x28,
-0x8a,
-0x18,
-0x69,
-0x05,
-0x8d,
-0xe1,
-0x28,
-0x80,
-0x16,
-0x8d,
-0xe2,
-0x28,
-0xc8,
-0xb1,
-0xba,
-0x8d,
-0xe3,
-0x28,
-0xc8,
-0xb1,
-0xba,
-0x8d,
-0xe4,
-0x28,
-0x8a,
-0x18,
-0x69,
-0x05,
-0x8d,
-0xe5,
-0x28,
-0xa9,
-0x00,
-0xfa,
-0x28,
-0xf8,
-0x60,
-0x68,
-0xf0,
-0x04,
-0x68,
-0xfa,
-0x7a,
-0x40,
-0x08,
-0x78,
-0x68,
-0xad,
-0xdd,
-0x28,
-0xf0,
-0x0e,
-0xae,
-0xe1,
-0x28,
-0x9a,
-0xad,
-0xde,
-0x28,
-0xae,
-0xdf,
-0x28,
-0xac,
-0xe0,
-0x28,
-0x40,
-0xae,
-0xe5,
-0x28,
-0x9a,
-0xad,
-0xe2,
-0x28,
-0xae,
-0xe3,
-0x28,
-0xac,
-0xe4,
-0x28,
-0x40,
-0x08,
-0x78,
-0xad,
-0xdd,
-0x28,
-0xd0,
-0x1f,
-0x1a,
-0x8d,
-0xdd,
-0x28,
-0xa9,
-0x7c,
-0x8d,
-0xe1,
-0x28,
-0x9c,
-0xde,
-0x28,
-0x9c,
-0xdf,
-0x28,
-0x9c,
-0xe0,
-0x28,
-0xa9,
-0x25,
-0x8d,
-0x7f,
-0x01,
-0xa9,
-0x1b,
-0x8d,
-0x7e,
-0x01,
-0x9c,
-0x7d,
-0x01,
-0x28,
-0x60,
-0x64,
-0xc1,
-0x64,
-0xc2,
-0xa9,
-0x25,
-0x4a,
-0x85,
-0xc6,
-0xa9,
-0xc7,
-0x6a,
-0xaa,
-0x90,
-0x06,
-0xac,
-0xc6,
-0x28,
-0x84,
-0xc1,
-0x18,
-0xa9,
-0x00,
-0x85,
-0xc3,
-0xa9,
-0x03,
-0x85,
-0xc4,
-0xa0,
-0x00,
-0xb1,
-0xc3,
-0x65,
-0xc1,
-0x85,
-0xc1,
-0xc8,
-0xb1,
-0xc3,
-0x65,
-0xc2,
-0x85,
-0xc2,
-0xca,
-0xd0,
-0x07,
-0xa5,
-0xc6,
-0xf0,
-0x0a,
-0x3a,
-0x85,
-0xc6,
-0xc8,
-0xd0,
-0xe6,
-0xe6,
-0xc4,
-0x80,
-0xe2,
-0xa5,
-0xc1,
-0x05,
-0xc2,
-0x60,
-0x64,
-0xc5,
-0x64,
-0xc6,
-0xa2,
-0x10,
-0x06,
-0xc1,
-0x26,
-0xc2,
-0x26,
-0xc5,
-0x26,
-0xc6,
-0xa5,
-0xc5,
-0x38,
-0xe5,
-0xc3,
-0xa8,
-0xa5,
-0xc6,
-0xe5,
-0xc4,
-0x90,
-0x06,
-0x85,
-0xc6,
-0x84,
-0xc5,
-0xe6,
-0xc1,
-0xca,
-0xd0,
-0xe3,
-0x60,
-0x20,
-0xab,
-0x27,
-0x46,
-0xc4,
-0x66,
-0xc3,
-0x90,
-0x06,
-0xe6,
-0xc3,
-0xd0,
-0x02,
-0xe6,
-0xc4,
-0x38,
-0xa5,
-0xc5,
-0xe5,
-0xc3,
-0xa5,
-0xc6,
-0xe5,
-0xc4,
-0x30,
-0x06,
-0xe6,
-0xc1,
-0xd0,
-0x02,
-0xe6,
-0xc2,
-0x60,
-0x43,
-0x6f,
-0x70,
-0x79,
-0x72,
-0x69,
-0x67,
-0x68,
-0x74,
-0x20,
-0x28,
-0x43,
-0x29,
-0x20,
-0x44,
-0x78,
-0x4f,
-0x20,
-0x4c,
-0x61,
-0x62,
-0x73,
-0x20,
-0x32,
-0x30,
-0x30,
-0x39,
-0x2d,
-0x32,
-0x30,
-0x31,
-0x32,
-0x20,
-0x2d,
-0x20,
-0x28,
-0x41,
-0x6c,
-0x6c,
-0x20,
-0x72,
-0x69,
-0x67,
-0x74,
-0x68,
-0x73,
-0x20,
-0x72,
-0x65,
-0x73,
-0x65,
-0x72,
-0x76,
-0x65,
-0x64,
-0x29,
-0x00,
-0x08,
-0x6f,
-0x00,
-0x01,
-0x02,
-0x03,
-0x04,
-0x05,
-0x06,
-0x07,
-0x07,
-0x06,
-0x05,
-0x04,
-0x03,
-0x02,
-0x01,
-0x00,
-0x00,
-0x01,
-0x02,
-0x03,
-0x04,
-0x05,
-0x05,
-0x04,
-0x03,
-0x02,
-0x01,
-0x00,
-0x00,
-0x00,
-0x01,
-0x81,
-0x02,
-0x42,
-0x82,
-0xc2,
-0x03,
-0x23,
-0x43,
-0x63,
-0x83,
-0xa3,
-0xc3,
-0xe3,
-0x04,
-0x14,
-0x24,
-0x34,
-0x44,
-0x54,
-0x64,
-0x74,
-0x84,
-0x94,
-0xa4,
-0xb4,
-0xc4,
-0xd4,
-0xe4,
-0xf4,
-0x05,
-0x05,
-0x15,
-0x15,
-0x25,
-0x25,
-0x35,
-0x35,
-0x45,
-0x45,
-0x55,
-0x55,
-0x65,
-0x65,
-0x75,
-0x75,
-0x85,
-0x85,
-0x95,
-0x95,
-0xa5,
-0xa5,
-0xb5,
-0xb5,
-0xc5,
-0xc5,
-0xd5,
-0xd5,
-0xe5,
-0xe5,
-0xf5,
-0xf5,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x3f,
-0x39,
-0x33,
-0x2f,
-0x2b,
-0x27,
-0x25,
-0x22,
-0x20,
-0x1e,
-0x1c,
-0x1b,
-0x1a,
-0x18,
-0x17,
-0x16,
-0x15,
-0x14,
-0x14,
-0x13,
-0x12,
-0x12,
-0x11,
-0x11,
-0x10,
-0x10,
-0x0f,
-0x0f,
-0x0e,
-0x0e,
-0x0d,
-0x0d,
-0x0d,
-0x0c,
-0x0c,
-0x0c,
-0x0c,
-0x0b,
-0x0b,
-0x0b,
-0x0b,
-0x0a,
-0x0a,
-0x0a,
-0x0a,
-0x0a,
-0x09,
-0x09,
-0x09,
-0x09,
-0x09,
-0x09,
-0x09,
-0x08,
-0x08,
-0x08,
-};
-
-struct yushan_reg_u_code_t yushan_u_code_r3 = {
-	.pdpcode_first_addr = 0x0234,
-	.pdpcode = &pdpcode_u_1_8[0],
-	.pdpcode_size = ARRAY_SIZE(pdpcode_u_1_8),
-
-	.pdpBootAddr  = 0x1a00,
-	.pdpStartAddr = 0x0234,
-
-	.dppcode_first_addr = 0x0300,
-	.dppcode = &dppcode_u_1_8[0],
-	.dppcode_size = ARRAY_SIZE(dppcode_u_1_8),
-
-	.dppBootAddr  = 0xd000,
-	.dppStartAddr = 0x0300,
-
-	.dopcode_first_addr = 0x0300,
-	.dopcode = &dopcode_u_2_1[0],
-	.dopcode_size = ARRAY_SIZE(dopcode_u_2_1),
-
-	.dopBootAddr  = 0x6800,
-	.dopStartAddr = 0x0300,
-
-
-};
-
diff --git a/drivers/media/video/msm/sensors/Makefile b/drivers/media/video/msm/sensors/Makefile
deleted file mode 100644
index 52ced25..0000000
--- a/drivers/media/video/msm/sensors/Makefile
+++ /dev/null
@@ -1,29 +0,0 @@
-GCC_VERSION      := $(shell $(CONFIG_SHELL) $(PWD)/scripts/gcc-version.sh $(CROSS_COMPILE)gcc)
-EXTRA_CFLAGS += -Idrivers/media/video/msm
-EXTRA_CFLAGS += -Idrivers/media/video/msm/io
-EXTRA_CFLAGS += -Idrivers/media/video/msm/csi
-obj-$(CONFIG_MSM_CAMERA_SENSOR) += msm_sensor.o
-obj-$(CONFIG_OV5647) += ov5647_v4l2.o
-obj-$(CONFIG_IMX091) += imx091_v4l2.o
-obj-$(CONFIG_IMX175) += imx175_v4l2.o
-obj-$(CONFIG_MACH_ELITE) += imx175_2lane_v4l2.o
-obj-$(CONFIG_MACH_JET) += imx175_2lane_v4l2.o
-obj-$(CONFIG_IMX135) += imx135_v4l2.o
-obj-$(CONFIG_VD6869) += vd6869_v4l2.o
-obj-$(CONFIG_OV8838) += ov8838_v4l2.o
-obj-$(CONFIG_S5K3H2YX) += s5k3h2yx_v4l2.o
-obj-$(CONFIG_S5K6A1GX) += s5k6a1gx_v4l2.o
-obj-$(CONFIG_AR0260) += ar0260_v4l2.o
-obj-$(CONFIG_IMX074) += imx074_v4l2.o
-obj-$(CONFIG_S5K3L1YX) += s5k3l1yx.o
-obj-$(CONFIG_OV2720) += ov2720.o
-obj-$(CONFIG_MT9M114) += mt9m114_v4l2.o
-obj-$(CONFIG_S5K4E1) += s5k4e1_v4l2.o
-obj-$(CONFIG_MT9E013) += mt9e013_v4l2.o
-obj-$(CONFIG_WEBCAM_OV9726) += ov9726_v4l2.o
-obj-$(CONFIG_WEBCAM_OV7692_QRD) += ov7692_qrd_v4l2.o
-obj-$(CONFIG_OV2722) += ov2722_v4l2.o
-obj-$(CONFIG_OV5693) += ov5693_v4l2.o
-obj-$(CONFIG_S5K6A2YA) += s5k6a2ya_v4l2.o
-obj-$(CONFIG_S5K3H1GX) += s5k3h1gx_v4l2.o
-obj-$(CONFIG_MT9V113) += mt9v113_v4l2.o mt9v113_reg_lens_9251.o
diff --git a/drivers/media/video/msm/sensors/msm_sensor.c b/drivers/media/video/msm/sensors/msm_sensor.c
deleted file mode 100644
index 0f83098..0000000
--- a/drivers/media/video/msm/sensors/msm_sensor.c
+++ /dev/null
@@ -1,1911 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#include "msm_sensor.h"
-#include "msm.h"
-#include "msm_ispif.h"
-#include "msm_camera_i2c_mux.h"
-
-#ifdef CONFIG_RAWCHIP
-#include "rawchip/rawchip.h"
-#endif
-
-static struct task_struct *tsk_sensor_init = NULL;
-static int oem_sensor_init(void *arg);
-
-static int first_init;
-
-static int oem_sensor_init(void *arg)
-{
-	struct msm_sensor_ctrl_t *s_ctrl = (struct msm_sensor_ctrl_t *) arg;
-	int res;
-
-#ifdef CONFIG_RAWCHIP
-	struct rawchip_sensor_data rawchip_data;
-	struct timespec ts_start, ts_end;
-#endif
-
-	
-	pr_info("%s: E", __func__);
-	
-
-	v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-		NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-		PIX_0, ISPIF_OFF_IMMEDIATELY));
-	s_ctrl->func_tbl->sensor_stop_stream(s_ctrl);
-
-	s_ctrl->curr_csi_params = NULL;
-	msm_sensor_enable_debugfs(s_ctrl);
-
-	res =0;
-	if (s_ctrl->curr_csi_params != s_ctrl->csi_params[res]) {
-		s_ctrl->curr_csi_params = s_ctrl->csi_params[res];
-		s_ctrl->curr_csi_params->csid_params.lane_assign =
-			s_ctrl->sensordata->sensor_platform_info->
-			csi_lane_params->csi_lane_assign;
-		s_ctrl->curr_csi_params->csiphy_params.lane_mask =
-			s_ctrl->sensordata->sensor_platform_info->
-			csi_lane_params->csi_lane_mask;
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_CSID_CFG,
-			&s_ctrl->curr_csi_params->csid_params);
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_CID_CHANGE, NULL);
-		mb();
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_CSIPHY_CFG,
-			&s_ctrl->curr_csi_params->csiphy_params);
-		mb();
-	}
-	msleep(30);
-
-	msm_sensor_write_init_settings(s_ctrl);
-	
-
-#ifdef CONFIG_RAWCHIP
-	if (s_ctrl->sensordata->use_rawchip) {
-		rawchip_data.sensor_name = s_ctrl->sensordata->sensor_name;
-		rawchip_data.datatype = s_ctrl->curr_csi_params->csid_params.lut_params.vc_cfg->dt;
-		rawchip_data.lane_cnt = s_ctrl->curr_csi_params->csid_params.lane_cnt;
-		rawchip_data.pixel_clk = s_ctrl->msm_sensor_reg->output_settings[res].op_pixel_clk;
-		rawchip_data.mirror_flip = s_ctrl->mirror_flip;
-
-		rawchip_data.width = s_ctrl->msm_sensor_reg->output_settings[res].x_output;
-		rawchip_data.height = s_ctrl->msm_sensor_reg->output_settings[res].y_output;
-		rawchip_data.line_length_pclk = s_ctrl->msm_sensor_reg->output_settings[res].line_length_pclk;
-		rawchip_data.frame_length_lines = s_ctrl->msm_sensor_reg->output_settings[res].frame_length_lines;
-		rawchip_data.x_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_start;
-		rawchip_data.y_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_start;
-		rawchip_data.x_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_end;
-		rawchip_data.y_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_end;
-		rawchip_data.x_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_even_inc;
-		rawchip_data.x_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_odd_inc;
-		rawchip_data.y_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_even_inc;
-		rawchip_data.y_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_odd_inc;
-		rawchip_data.binning_rawchip = s_ctrl->msm_sensor_reg->output_settings[res].binning_rawchip;
-
-		rawchip_data.fullsize_width = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].x_output;
-		rawchip_data.fullsize_height = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].y_output;
-		rawchip_data.fullsize_line_length_pclk =
-			s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].line_length_pclk;
-		rawchip_data.fullsize_frame_length_lines =
-			s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].frame_length_lines;
-		rawchip_data.use_rawchip = s_ctrl->sensordata->use_rawchip;
-
-		ktime_get_ts(&ts_start);
-		rawchip_set_size(rawchip_data);
-		ktime_get_ts(&ts_end);
-
-		res = (ts_end.tv_sec-ts_start.tv_sec)*1000+(ts_end.tv_nsec-ts_start.tv_nsec)/1000000;
-		pr_info("%s: rawchip_set_size:%ld ms\n", __func__, (long)res);
-
-	}
-#endif
-
-	pr_info("%s: X", __func__);
-	mutex_unlock(s_ctrl->sensor_first_mutex);
-
-	return 0;
-}
-
-int32_t msm_sensor_adjust_frame_lines(struct msm_sensor_ctrl_t *s_ctrl,
-	uint16_t res)
-{
-	uint16_t cur_line = 0;
-	uint16_t exp_fl_lines = 0;
-	CDBG("%s: called\n", __func__);
-
-	if (s_ctrl->sensor_exp_gain_info) {
-		if (s_ctrl->prev_gain && s_ctrl->prev_line &&
-			s_ctrl->func_tbl->sensor_write_exp_gain)
-			s_ctrl->func_tbl->sensor_write_exp_gain(
-				s_ctrl,
-				s_ctrl->prev_gain,
-				s_ctrl->prev_line);
-	
-		msm_camera_i2c_read(s_ctrl->sensor_i2c_client,
-			s_ctrl->sensor_exp_gain_info->coarse_int_time_addr,
-			&cur_line,
-			MSM_CAMERA_I2C_WORD_DATA);
-		exp_fl_lines = cur_line +
-			s_ctrl->sensor_exp_gain_info->vert_offset;
-		if (exp_fl_lines > s_ctrl->msm_sensor_reg->
-			output_settings[res].frame_length_lines)
-			msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-				s_ctrl->sensor_output_reg_addr->
-				frame_length_lines,
-				exp_fl_lines,
-				MSM_CAMERA_I2C_WORD_DATA);
-		CDBG("%s cur_fl_lines %d, exp_fl_lines %d\n", __func__,
-			s_ctrl->msm_sensor_reg->
-			output_settings[res].frame_length_lines,
-			exp_fl_lines);
-	}
-	return 0;
-}
- 
-
-int32_t msm_sensor_write_init_settings(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t rc;
-	CDBG("%s: called\n", __func__);
-
-	rc = msm_sensor_write_all_conf_array(
-		s_ctrl->sensor_i2c_client,
-		s_ctrl->msm_sensor_reg->init_settings,
-		s_ctrl->msm_sensor_reg->init_size);
-	return rc;
-}
-
-int32_t msm_sensor_write_res_settings(struct msm_sensor_ctrl_t *s_ctrl,
-	uint16_t res)
-{
-	int32_t rc;
-	CDBG("%s: called\n", __func__);
-
-	rc = msm_sensor_write_conf_array(
-		s_ctrl->sensor_i2c_client,
-		s_ctrl->msm_sensor_reg->mode_settings, res);
-	if (rc < 0)
-	{
-		pr_info("%s: failed to msm_sensor_write_conf_array return < 0\n", __func__);
-		return rc;
-	}
-
-	rc = msm_sensor_write_output_settings(s_ctrl, res);
-	if (rc < 0)
-	{
-		pr_info("%s: failed to msm_sensor_write_output_settings return < 0\n", __func__);
-		return rc;
-	}
-
-	if (s_ctrl->func_tbl->sensor_write_output_settings_specific) {
-		rc = s_ctrl->func_tbl->sensor_write_output_settings_specific(s_ctrl, res);
-		if (rc < 0)
-		{
-			pr_info("%s: failed to sensor_write_output_settings_specific return < 0\n", __func__);
-			return rc;
-		}
-	}
-
-	if (s_ctrl->func_tbl->sensor_adjust_frame_lines)
-		rc = s_ctrl->func_tbl->sensor_adjust_frame_lines(s_ctrl, res);
-
-	return rc;
-}
-
-int32_t msm_sensor_write_output_settings(struct msm_sensor_ctrl_t *s_ctrl,
-	uint16_t res)
-{
-	int32_t rc = -EFAULT;
-	struct msm_camera_i2c_reg_conf dim_settings[] = {
-		{s_ctrl->sensor_output_reg_addr->x_output,
-			s_ctrl->msm_sensor_reg->
-			output_settings[res].x_output},
-		{s_ctrl->sensor_output_reg_addr->y_output,
-			s_ctrl->msm_sensor_reg->
-			output_settings[res].y_output},
-		{s_ctrl->sensor_output_reg_addr->line_length_pclk,
-			s_ctrl->msm_sensor_reg->
-			output_settings[res].line_length_pclk},
-		{s_ctrl->sensor_output_reg_addr->frame_length_lines,
-			s_ctrl->msm_sensor_reg->
-			output_settings[res].frame_length_lines},
-	};
-	CDBG("%s: called\n", __func__);
-
-	rc = msm_camera_i2c_write_tbl(s_ctrl->sensor_i2c_client, dim_settings,
-		ARRAY_SIZE(dim_settings), MSM_CAMERA_I2C_WORD_DATA);
-	return rc;
-}
-
-void msm_sensor_start_stream(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	CDBG("%s: called\n", __func__);
-
-	msm_camera_i2c_write_tbl(
-		s_ctrl->sensor_i2c_client,
-		s_ctrl->msm_sensor_reg->start_stream_conf,
-		s_ctrl->msm_sensor_reg->start_stream_conf_size,
-		s_ctrl->msm_sensor_reg->default_data_type);
-}
-
-void msm_sensor_stop_stream(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	CDBG("%s: called\n", __func__);
-
-	msm_camera_i2c_write_tbl(
-		s_ctrl->sensor_i2c_client,
-		s_ctrl->msm_sensor_reg->stop_stream_conf,
-		s_ctrl->msm_sensor_reg->stop_stream_conf_size,
-		s_ctrl->msm_sensor_reg->default_data_type);
-}
-
-void msm_sensor_group_hold_on(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	CDBG("%s: called\n", __func__);
-
-	msm_camera_i2c_write_tbl(
-		s_ctrl->sensor_i2c_client,
-		s_ctrl->msm_sensor_reg->group_hold_on_conf,
-		s_ctrl->msm_sensor_reg->group_hold_on_conf_size,
-		s_ctrl->msm_sensor_reg->default_data_type);
-}
-
-void msm_sensor_group_hold_off(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	CDBG("%s: called\n", __func__);
-
-	msm_camera_i2c_write_tbl(
-		s_ctrl->sensor_i2c_client,
-		s_ctrl->msm_sensor_reg->group_hold_off_conf,
-		s_ctrl->msm_sensor_reg->group_hold_off_conf_size,
-		s_ctrl->msm_sensor_reg->default_data_type);
-}
-
-int32_t msm_sensor_set_fps(struct msm_sensor_ctrl_t *s_ctrl,
-						struct fps_cfg *fps)
-{
-	s_ctrl->fps_divider = fps->fps_div;
-
-	return 0;
-}
-
-int32_t msm_sensor_write_exp_gain1(struct msm_sensor_ctrl_t *s_ctrl,
-		uint16_t gain, uint32_t line)
-{
-	uint32_t fl_lines;
-	uint8_t offset;
-	CDBG("%s: called\n", __func__);
-
-	fl_lines = s_ctrl->curr_frame_length_lines;
-	fl_lines = (fl_lines * s_ctrl->fps_divider) / Q10;
-	offset = s_ctrl->sensor_exp_gain_info->vert_offset;
-	if (line > (fl_lines - offset))
-		fl_lines = line + offset;
-
-	s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_output_reg_addr->frame_length_lines, fl_lines,
-		MSM_CAMERA_I2C_WORD_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->coarse_int_time_addr, line,
-		MSM_CAMERA_I2C_WORD_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->global_gain_addr, gain,
-		MSM_CAMERA_I2C_WORD_DATA);
-	s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
-	return 0;
-}
-
-int32_t msm_sensor_write_exp_gain2(struct msm_sensor_ctrl_t *s_ctrl,
-		uint16_t gain, uint32_t line)
-{
-	uint32_t fl_lines, ll_pclk, ll_ratio;
-	uint8_t offset;
-	CDBG("%s: called\n", __func__);
-
-	fl_lines = s_ctrl->curr_frame_length_lines * s_ctrl->fps_divider / Q10;
-	ll_pclk = s_ctrl->curr_line_length_pclk;
-	offset = s_ctrl->sensor_exp_gain_info->vert_offset;
-	if (line > (fl_lines - offset)) {
-		ll_ratio = (line * Q10) / (fl_lines - offset);
-		ll_pclk = ll_pclk * ll_ratio / Q10;
-		line = fl_lines - offset;
-	}
-
-	s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_output_reg_addr->line_length_pclk, ll_pclk,
-		MSM_CAMERA_I2C_WORD_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->coarse_int_time_addr, line,
-		MSM_CAMERA_I2C_WORD_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->global_gain_addr, gain,
-		MSM_CAMERA_I2C_WORD_DATA);
-	s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
-	return 0;
-}
-
-int32_t msm_sensor_setting3(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res)
-{
-	int32_t rc = 0;
-	static int csi_config;
-	CDBG("%s: called\n", __func__);
-
-	if (update_type == MSM_SENSOR_REG_INIT) {
-		CDBG("Register INIT\n");
-		s_ctrl->curr_csi_params = NULL;
-		csi_config = 0;
-		msm_camera_i2c_write(
-			s_ctrl->sensor_i2c_client,
-			0x0e, 0x08,
-			MSM_CAMERA_I2C_BYTE_DATA);
-	} else if (update_type == MSM_SENSOR_UPDATE_PERIODIC) {
-		CDBG("PERIODIC : %d\n", res);
-		if (res == 0)
-			return 0;
-		if (!csi_config) {
-			msm_sensor_write_conf_array(
-				s_ctrl->sensor_i2c_client,
-				s_ctrl->msm_sensor_reg->mode_settings, res);
-			msleep(30);
-			s_ctrl->curr_csic_params = s_ctrl->csic_params[res];
-			CDBG("CSI config in progress\n");
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSIC_CFG,
-				s_ctrl->curr_csic_params);
-			CDBG("CSI config is done\n");
-			mb();
-			msleep(30);
-			msm_camera_i2c_write(
-					s_ctrl->sensor_i2c_client,
-					0x0e, 0x00,
-					MSM_CAMERA_I2C_BYTE_DATA);
-			csi_config = 1;
-		}
-		msleep(50);
-	}
-	return rc;
-}
-
-int32_t msm_sensor_write_exp_gain1_ex(struct msm_sensor_ctrl_t *s_ctrl,
-		int mode, uint16_t gain, uint16_t dig_gain, uint32_t line) 
-{
-	uint32_t fl_lines;
-	uint8_t offset;
-
-	uint32_t fps_divider = Q10;
-	CDBG("%s: called\n", __func__);
-
-	if (mode == SENSOR_PREVIEW_MODE)
-		fps_divider = s_ctrl->fps_divider;
-
-	if(line > s_ctrl->sensor_exp_gain_info->sensor_max_linecount)
-		line = s_ctrl->sensor_exp_gain_info->sensor_max_linecount;
-
-	fl_lines = s_ctrl->curr_frame_length_lines;
-	offset = s_ctrl->sensor_exp_gain_info->vert_offset;
-	if (line * Q10 > (fl_lines - offset) * fps_divider)
-		fl_lines = line + offset;
-	else
-		fl_lines = (fl_lines * fps_divider) / Q10;
-
-	s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_output_reg_addr->frame_length_lines, fl_lines,
-		MSM_CAMERA_I2C_WORD_DATA);
-
-	if (s_ctrl->func_tbl->sensor_ov2722_write_exp_line) {
-		s_ctrl->func_tbl->sensor_ov2722_write_exp_line (s_ctrl,line);
-	}
-	else {
-		msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-			s_ctrl->sensor_exp_gain_info->coarse_int_time_addr, line,
-			MSM_CAMERA_I2C_WORD_DATA);
-	}
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->global_gain_addr, gain,
-		MSM_CAMERA_I2C_WORD_DATA);
-	
-	if (s_ctrl->func_tbl->sensor_set_dig_gain)
-		s_ctrl->func_tbl->sensor_set_dig_gain(s_ctrl, dig_gain);
-	
-	s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
-	return 0;
-}
-
-int32_t msm_sensor_write_exp_gain2_ex(struct msm_sensor_ctrl_t *s_ctrl,
-		int mode, uint16_t gain, uint16_t dig_gain, uint32_t line) 
-{
-	uint32_t fl_lines, ll_pclk, ll_ratio;
-	uint8_t offset;
-	uint32_t fps_divider = Q10;
-	CDBG("%s: called\n", __func__);
-
-	if (mode == SENSOR_PREVIEW_MODE)
-		fps_divider = s_ctrl->fps_divider;
-	fl_lines = s_ctrl->curr_frame_length_lines;
-	ll_pclk = s_ctrl->curr_line_length_pclk;
-	offset = s_ctrl->sensor_exp_gain_info->vert_offset;
-	if (line * Q10 > (fl_lines - offset) * fps_divider) {
-		ll_ratio = (line * Q10) / (fl_lines - offset);
-		ll_pclk = ll_pclk * ll_ratio / Q10;
-		line = fl_lines - offset;
-	} else {
-		ll_pclk = ll_pclk * fps_divider / Q10;
-	}
-
-	s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_output_reg_addr->line_length_pclk, ll_pclk,
-		MSM_CAMERA_I2C_WORD_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->coarse_int_time_addr, line,
-		MSM_CAMERA_I2C_WORD_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->global_gain_addr, gain,
-		MSM_CAMERA_I2C_WORD_DATA);
-	s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
-	return 0;
-}
-
-int32_t msm_sensor_write_exp_gain_ov(struct msm_sensor_ctrl_t *s_ctrl,
-		int mode, uint16_t gain, uint16_t dig_gain, uint32_t line)
-{
-	uint32_t fl_lines;
-	uint8_t offset;
-	uint32_t aec_msb_24; 
-	uint16_t aec_msb;
-	uint16_t aec_lsb;
-	uint32_t phy_line_2 = 0;
-
-
-	uint32_t fps_divider = Q10;
-	CDBG("%s: called\n", __func__);
-
-	if (mode == SENSOR_PREVIEW_MODE)
-		fps_divider = s_ctrl->fps_divider;
-
-	if(line > s_ctrl->sensor_exp_gain_info->sensor_max_linecount)
-		line = s_ctrl->sensor_exp_gain_info->sensor_max_linecount;
-
-	fl_lines = s_ctrl->curr_frame_length_lines;
-	offset = s_ctrl->sensor_exp_gain_info->vert_offset;
-	if (line * Q10 > (fl_lines - offset) * fps_divider)
-		fl_lines = line + offset;
-	else
-		fl_lines = (fl_lines * fps_divider) / Q10;
-
-	s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_output_reg_addr->frame_length_lines, fl_lines,
-		MSM_CAMERA_I2C_WORD_DATA);
-
-	phy_line_2 = line << 4;
-	aec_msb_24 = (uint32_t)(phy_line_2 & 0xFF0000) >> 16;
-	aec_msb = (uint16_t)(phy_line_2 & 0xFF00) >> 8;
-	aec_lsb = (uint16_t)(phy_line_2 & 0x00FF);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client, s_ctrl->sensor_exp_gain_info->coarse_int_time_addr, (uint8_t)aec_msb_24, MSM_CAMERA_I2C_BYTE_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client, s_ctrl->sensor_exp_gain_info->coarse_int_time_addr+1, (uint8_t)aec_msb, MSM_CAMERA_I2C_BYTE_DATA);
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client, s_ctrl->sensor_exp_gain_info->coarse_int_time_addr+2, (uint8_t)aec_lsb, MSM_CAMERA_I2C_BYTE_DATA);
-
-	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
-		s_ctrl->sensor_exp_gain_info->global_gain_addr, gain,
-		MSM_CAMERA_I2C_BYTE_DATA);
-	s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
-	return 0;
-}
-
-int32_t msm_sensor_setting1(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res)
-{
-	int32_t rc = 0;
-	static int csi_config;
-
-#ifdef CONFIG_RAWCHIP
-	struct rawchip_sensor_data rawchip_data;
-	struct timespec ts_start, ts_end;
-#endif
-	CDBG("%s: called\n", __func__);
-
-	s_ctrl->func_tbl->sensor_stop_stream(s_ctrl);
-
-	if (update_type == MSM_SENSOR_REG_INIT) {
-		CDBG("Register INIT\n");
-		s_ctrl->curr_csi_params = NULL;
-		msm_sensor_enable_debugfs(s_ctrl);
-		msm_sensor_write_init_settings(s_ctrl);
-		csi_config = 0;
-	} else if (update_type == MSM_SENSOR_UPDATE_PERIODIC) {
-		CDBG("PERIODIC : %d\n", res);
-		msm_sensor_write_conf_array(
-			s_ctrl->sensor_i2c_client,
-			s_ctrl->msm_sensor_reg->mode_settings, res);
-		msleep(30);
-		if (!csi_config) {
-			s_ctrl->curr_csic_params = s_ctrl->csic_params[res];
-			CDBG("CSI config in progress\n");
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSIC_CFG,
-				s_ctrl->curr_csic_params);
-			CDBG("CSI config is done\n");
-			mb();
-			msleep(20);
-			csi_config = 1;
-		}
-#ifdef CONFIG_RAWCHIP
-			if (s_ctrl->sensordata->use_rawchip) {
-				rawchip_data.sensor_name = s_ctrl->sensordata->sensor_name;
-				rawchip_data.datatype = s_ctrl->curr_csic_params->data_format;
-					CDBG("datatype = %d\n", rawchip_data.datatype);
-				rawchip_data.lane_cnt = s_ctrl->curr_csic_params->lane_cnt;
-					CDBG("lane_cnt = %d\n", rawchip_data.lane_cnt);
-				rawchip_data.pixel_clk = s_ctrl->msm_sensor_reg->output_settings[res].op_pixel_clk;
-					CDBG("pixel_clk = %d\n", rawchip_data.pixel_clk);
-				rawchip_data.mirror_flip = s_ctrl->mirror_flip;
-					CDBG("mirror_flip = %d\n", rawchip_data.mirror_flip);
-
-				rawchip_data.width = s_ctrl->msm_sensor_reg->output_settings[res].x_output;
-					CDBG("width = %d\n", rawchip_data.width);
-				rawchip_data.height = s_ctrl->msm_sensor_reg->output_settings[res].y_output;
-					CDBG("height = %d\n", rawchip_data.height);
-				rawchip_data.line_length_pclk = s_ctrl->msm_sensor_reg->output_settings[res].line_length_pclk;
-					CDBG("line_length_pclk = %d\n", rawchip_data.line_length_pclk);
-				rawchip_data.frame_length_lines = s_ctrl->msm_sensor_reg->output_settings[res].frame_length_lines;
-					CDBG("frame_length_lines = %d\n", rawchip_data.frame_length_lines);
-				rawchip_data.x_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_start;
-					CDBG("x_addr_start = %d\n", rawchip_data.x_addr_start);
-				rawchip_data.y_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_start;
-					CDBG("y_addr_start = %d\n", rawchip_data.y_addr_start);
-				rawchip_data.x_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_end;
-					CDBG("x_addr_end = %d\n", rawchip_data.x_addr_end);
-				rawchip_data.y_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_end;
-					CDBG("y_addr_end = %d\n", rawchip_data.y_addr_end);
-				rawchip_data.x_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_even_inc;
-					CDBG("x_even_inc = %d\n", rawchip_data.x_even_inc);
-				rawchip_data.x_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_odd_inc;
-					CDBG("x_odd_inc = %d\n", rawchip_data.x_odd_inc);
-				rawchip_data.y_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_even_inc;
-					CDBG("y_even_inc = %d\n", rawchip_data.y_even_inc);
-				rawchip_data.y_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_odd_inc;
-					CDBG("y_odd_inc = %d\n", rawchip_data.y_odd_inc);
-				rawchip_data.binning_rawchip = s_ctrl->msm_sensor_reg->output_settings[res].binning_rawchip;
-					CDBG("binning_rawchip = %d\n", rawchip_data.binning_rawchip);
-
-				rawchip_data.fullsize_width = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].x_output;
-					CDBG("fullsize_width = %d\n", rawchip_data.fullsize_width);
-				rawchip_data.fullsize_height = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].y_output;
-					CDBG("fullsize_height = %d\n", rawchip_data.fullsize_height);
-				rawchip_data.fullsize_line_length_pclk =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].line_length_pclk;
-					CDBG("fullsize_line_length_pclk = %d\n", rawchip_data.fullsize_line_length_pclk);
-				rawchip_data.fullsize_frame_length_lines =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].frame_length_lines;
-					CDBG("rawchip_data.fullsize_frame_length_lines = %d\n", rawchip_data.fullsize_frame_length_lines);
-				rawchip_data.use_rawchip = s_ctrl->sensordata->use_rawchip;
-
-				ktime_get_ts(&ts_start);
-				rawchip_set_size(rawchip_data);
-				ktime_get_ts(&ts_end);
-				pr_info("%s: %ld ms\n", __func__,
-					(ts_end.tv_sec-ts_start.tv_sec)*1000+(ts_end.tv_nsec-ts_start.tv_nsec)/1000000);
-			}
-#endif
-		s_ctrl->func_tbl->sensor_start_stream(s_ctrl);
-	}
-	return rc;
-}
-
-int32_t msm_sensor_setting_parallel(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res)
-{
-	int32_t rc = 0;
-
-#ifdef CONFIG_RAWCHIP
-	struct rawchip_sensor_data rawchip_data;
-	struct timespec ts_start, ts_end;
-#endif
-
-	pr_info("%s: update_type=%d, res=%d\n", __func__, update_type, res);
-
-	if (update_type == MSM_SENSOR_REG_INIT) {
-		mutex_lock(s_ctrl->sensor_first_mutex);  
-
-		tsk_sensor_init = kthread_create(oem_sensor_init, s_ctrl, "oem_sensor_init");
-		if (IS_ERR(tsk_sensor_init)) {
-			pr_err("%s: kthread_create failed", __func__);
-			rc = PTR_ERR(tsk_sensor_init);
-			tsk_sensor_init = NULL;
-			mutex_unlock(s_ctrl->sensor_first_mutex);  
-		} else
-			wake_up_process(tsk_sensor_init);
-
-		first_init = 1;
-	} else if (update_type == MSM_SENSOR_UPDATE_PERIODIC) {
-		
-
-		
-		mutex_lock(s_ctrl->sensor_first_mutex);
-
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-			PIX_0, ISPIF_OFF_IMMEDIATELY));
-		s_ctrl->func_tbl->sensor_stop_stream(s_ctrl);
-
-		if(!first_init)
-			mdelay(50);
-		first_init = 0;
-
-		pr_info("%s: update_type=MSM_SENSOR_UPDATE_PERIODIC, res=%d\n", __func__, res);  
-		
-
-		msm_sensor_write_res_settings(s_ctrl, res);
-		if (s_ctrl->curr_csi_params != s_ctrl->csi_params[res]) {
-			s_ctrl->curr_csi_params = s_ctrl->csi_params[res];
-			s_ctrl->curr_csi_params->csid_params.lane_assign =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_assign;
-			s_ctrl->curr_csi_params->csiphy_params.lane_mask =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_mask;
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSID_CFG,
-				&s_ctrl->curr_csi_params->csid_params);
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-						NOTIFY_CID_CHANGE, NULL);
-			mb();
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSIPHY_CFG,
-				&s_ctrl->curr_csi_params->csiphy_params);
-			mb();
-			msleep(20);
-		}
-#ifdef CONFIG_RAWCHIP
-			if (s_ctrl->sensordata->use_rawchip) {
-				rawchip_data.sensor_name = s_ctrl->sensordata->sensor_name;
-				rawchip_data.datatype = s_ctrl->curr_csi_params->csid_params.lut_params.vc_cfg->dt;
-				rawchip_data.lane_cnt = s_ctrl->curr_csi_params->csid_params.lane_cnt;
-				rawchip_data.pixel_clk = s_ctrl->msm_sensor_reg->output_settings[res].op_pixel_clk;
-				rawchip_data.mirror_flip = s_ctrl->mirror_flip;
-
-				rawchip_data.width = s_ctrl->msm_sensor_reg->output_settings[res].x_output;
-				rawchip_data.height = s_ctrl->msm_sensor_reg->output_settings[res].y_output;
-				rawchip_data.line_length_pclk = s_ctrl->msm_sensor_reg->output_settings[res].line_length_pclk;
-				rawchip_data.frame_length_lines = s_ctrl->msm_sensor_reg->output_settings[res].frame_length_lines;
-				rawchip_data.x_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_start;
-				rawchip_data.y_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_start;
-				rawchip_data.x_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_end;
-				rawchip_data.y_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_end;
-				rawchip_data.x_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_even_inc;
-				rawchip_data.x_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_odd_inc;
-				rawchip_data.y_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_even_inc;
-				rawchip_data.y_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_odd_inc;
-				rawchip_data.binning_rawchip = s_ctrl->msm_sensor_reg->output_settings[res].binning_rawchip;
-
-				rawchip_data.fullsize_width = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].x_output;
-				rawchip_data.fullsize_height = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].y_output;
-				rawchip_data.fullsize_line_length_pclk =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].line_length_pclk;
-				rawchip_data.fullsize_frame_length_lines =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].frame_length_lines;
-				rawchip_data.use_rawchip = s_ctrl->sensordata->use_rawchip;
-
-				ktime_get_ts(&ts_start);
-				rawchip_set_size(rawchip_data);
-				ktime_get_ts(&ts_end);
-				pr_info("%s: %ld ms\n", __func__,
-					(ts_end.tv_sec-ts_start.tv_sec)*1000+(ts_end.tv_nsec-ts_start.tv_nsec)/1000000);
-			}
-#endif
-
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_PCLK_CHANGE, &s_ctrl->msm_sensor_reg->
-				output_settings[res].op_pixel_clk);
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-				PIX_0, ISPIF_ON_FRAME_BOUNDARY));
-			s_ctrl->func_tbl->sensor_start_stream(s_ctrl);
-			msleep(30);
-			mutex_unlock(s_ctrl->sensor_first_mutex);  
-	}
-	return rc;
-}
-
-int32_t msm_sensor_setting(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res)
-{
-	int32_t rc = 0;
-
-#ifdef CONFIG_RAWCHIP
-	struct rawchip_sensor_data rawchip_data;
-	struct timespec ts_start, ts_end;
-#endif
-
-	pr_info("%s: update_type=%d, res=%d\n", __func__, update_type, res);
-
-	v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-		NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-		PIX_0, ISPIF_OFF_IMMEDIATELY));
-
-	s_ctrl->func_tbl->sensor_stop_stream(s_ctrl);
-
-	msleep(30);
-	if (update_type == MSM_SENSOR_REG_INIT) {
-		s_ctrl->curr_csi_params = NULL;
-		msm_sensor_enable_debugfs(s_ctrl);
-		msm_sensor_write_init_settings(s_ctrl);
-		first_init = 1;
-	} else if (update_type == MSM_SENSOR_UPDATE_PERIODIC) {
-		
-		if(!first_init)
-			mdelay(50);
-		first_init = 0;
-
-		msm_sensor_write_res_settings(s_ctrl, res);
-		if (s_ctrl->curr_csi_params != s_ctrl->csi_params[res]) {
-			s_ctrl->curr_csi_params = s_ctrl->csi_params[res];
-			s_ctrl->curr_csi_params->csid_params.lane_assign =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_assign;
-			s_ctrl->curr_csi_params->csiphy_params.lane_mask =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_mask;
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSID_CFG,
-				&s_ctrl->curr_csi_params->csid_params);
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-						NOTIFY_CID_CHANGE, NULL);
-			mb();
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSIPHY_CFG,
-				&s_ctrl->curr_csi_params->csiphy_params);
-			mb();
-			msleep(20);
-		}
-#ifdef CONFIG_RAWCHIP
-			if (s_ctrl->sensordata->use_rawchip) {
-				rawchip_data.sensor_name = s_ctrl->sensordata->sensor_name;
-				rawchip_data.datatype = s_ctrl->curr_csi_params->csid_params.lut_params.vc_cfg->dt;
-				rawchip_data.lane_cnt = s_ctrl->curr_csi_params->csid_params.lane_cnt;
-				rawchip_data.pixel_clk = s_ctrl->msm_sensor_reg->output_settings[res].op_pixel_clk;
-				rawchip_data.mirror_flip = s_ctrl->mirror_flip;
-
-				rawchip_data.width = s_ctrl->msm_sensor_reg->output_settings[res].x_output;
-				rawchip_data.height = s_ctrl->msm_sensor_reg->output_settings[res].y_output;
-				rawchip_data.line_length_pclk = s_ctrl->msm_sensor_reg->output_settings[res].line_length_pclk;
-				rawchip_data.frame_length_lines = s_ctrl->msm_sensor_reg->output_settings[res].frame_length_lines;
-				rawchip_data.x_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_start;
-				rawchip_data.y_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_start;
-				rawchip_data.x_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_end;
-				rawchip_data.y_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_end;
-				rawchip_data.x_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_even_inc;
-				rawchip_data.x_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_odd_inc;
-				rawchip_data.y_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_even_inc;
-				rawchip_data.y_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_odd_inc;
-				rawchip_data.binning_rawchip = s_ctrl->msm_sensor_reg->output_settings[res].binning_rawchip;
-
-				rawchip_data.fullsize_width = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].x_output;
-				rawchip_data.fullsize_height = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].y_output;
-				rawchip_data.fullsize_line_length_pclk =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].line_length_pclk;
-				rawchip_data.fullsize_frame_length_lines =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].frame_length_lines;
-				rawchip_data.use_rawchip = s_ctrl->sensordata->use_rawchip;
-
-				ktime_get_ts(&ts_start);
-				rawchip_set_size(rawchip_data);
-				ktime_get_ts(&ts_end);
-				pr_info("%s: %ld ms\n", __func__,
-					(ts_end.tv_sec-ts_start.tv_sec)*1000+(ts_end.tv_nsec-ts_start.tv_nsec)/1000000);
-			}
-#endif
-
-
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_PCLK_CHANGE, &s_ctrl->msm_sensor_reg->
-			output_settings[res].op_pixel_clk);
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-			PIX_0, ISPIF_ON_FRAME_BOUNDARY));
-		s_ctrl->func_tbl->sensor_start_stream(s_ctrl);
-		msleep(30);
-	}
-	return rc;
-}
-
-int32_t msm_sensor_setting_ov(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res)
-{
-	int32_t rc = 0;
-
-#ifdef CONFIG_RAWCHIP
-	struct rawchip_sensor_data rawchip_data;
-	struct timespec ts_start, ts_end;
-#endif
-
-	pr_info("%s: update_type=%d, res=%d\n", __func__, update_type, res);
-
-	v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-		NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-		PIX_0, ISPIF_OFF_IMMEDIATELY));
-
-	msleep(30);
-	if (update_type == MSM_SENSOR_REG_INIT) {
-		s_ctrl->curr_csi_params = NULL;
-		msm_sensor_enable_debugfs(s_ctrl);
-		if (s_ctrl->sensor_id_info->sensor_id == 0x4581) {
-			s_ctrl->curr_csi_params = s_ctrl->csi_params[res];
-			s_ctrl->curr_csi_params->csid_params.lane_assign =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_assign;
-			s_ctrl->curr_csi_params->csiphy_params.lane_mask =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_mask;
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSID_CFG,
-				&s_ctrl->curr_csi_params->csid_params);
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-						NOTIFY_CID_CHANGE, NULL);
-			mb();
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSIPHY_CFG,
-				&s_ctrl->curr_csi_params->csiphy_params);
-			mb();
-			msleep(20);
-		}
-		msm_sensor_write_init_settings(s_ctrl);
-		first_init = 1;
-	} else if (update_type == MSM_SENSOR_UPDATE_PERIODIC) {
-		
-		if(!first_init)
-			mdelay(50);
-		first_init = 0;
-
-
-		if (s_ctrl->curr_csi_params != s_ctrl->csi_params[res]) {
-			s_ctrl->curr_csi_params = s_ctrl->csi_params[res];
-			s_ctrl->curr_csi_params->csid_params.lane_assign =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_assign;
-			s_ctrl->curr_csi_params->csiphy_params.lane_mask =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_mask;
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSID_CFG,
-				&s_ctrl->curr_csi_params->csid_params);
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-						NOTIFY_CID_CHANGE, NULL);
-			mb();
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSIPHY_CFG,
-				&s_ctrl->curr_csi_params->csiphy_params);
-			mb();
-			msleep(20);
-		}
-
-#ifdef CONFIG_RAWCHIP
-			if (s_ctrl->sensordata->use_rawchip) {
-				rawchip_data.sensor_name = s_ctrl->sensordata->sensor_name;
-				rawchip_data.datatype = s_ctrl->curr_csi_params->csid_params.lut_params.vc_cfg->dt;
-				rawchip_data.lane_cnt = s_ctrl->curr_csi_params->csid_params.lane_cnt;
-				rawchip_data.pixel_clk = s_ctrl->msm_sensor_reg->output_settings[res].op_pixel_clk;
-				rawchip_data.mirror_flip = s_ctrl->mirror_flip;
-
-				rawchip_data.width = s_ctrl->msm_sensor_reg->output_settings[res].x_output;
-				rawchip_data.height = s_ctrl->msm_sensor_reg->output_settings[res].y_output;
-				rawchip_data.line_length_pclk = s_ctrl->msm_sensor_reg->output_settings[res].line_length_pclk;
-				rawchip_data.frame_length_lines = s_ctrl->msm_sensor_reg->output_settings[res].frame_length_lines;
-				rawchip_data.x_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_start;
-				rawchip_data.y_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_start;
-				rawchip_data.x_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_end;
-				rawchip_data.y_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_end;
-				rawchip_data.x_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_even_inc;
-				rawchip_data.x_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_odd_inc;
-				rawchip_data.y_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_even_inc;
-				rawchip_data.y_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_odd_inc;
-				rawchip_data.binning_rawchip = s_ctrl->msm_sensor_reg->output_settings[res].binning_rawchip;
-
-				rawchip_data.fullsize_width = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].x_output;
-				rawchip_data.fullsize_height = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].y_output;
-				rawchip_data.fullsize_line_length_pclk =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].line_length_pclk;
-				rawchip_data.fullsize_frame_length_lines =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].frame_length_lines;
-				rawchip_data.use_rawchip = s_ctrl->sensordata->use_rawchip;
-
-				ktime_get_ts(&ts_start);
-				rawchip_set_size(rawchip_data);
-				ktime_get_ts(&ts_end);
-				pr_info("%s: %ld ms\n", __func__,
-					(ts_end.tv_sec-ts_start.tv_sec)*1000+(ts_end.tv_nsec-ts_start.tv_nsec)/1000000);
-			}
-#endif
-
-		msm_sensor_write_res_settings(s_ctrl, res);
-
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_PCLK_CHANGE, &s_ctrl->msm_sensor_reg->
-			output_settings[res].op_pixel_clk);
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-			PIX_0, ISPIF_ON_FRAME_BOUNDARY));
-		s_ctrl->func_tbl->sensor_start_stream(s_ctrl);
-		msleep(30);
-	}
-	return rc;
-}
-
-
-static int oem_sensor_init_ov(void *arg)
-{
-	struct msm_sensor_ctrl_t *s_ctrl = (struct msm_sensor_ctrl_t *) arg;
-	int res;
-	int rc=0;
-
-#ifdef CONFIG_RAWCHIP
-	struct rawchip_sensor_data rawchip_data;
-	struct timespec ts_start, ts_end;
-#endif
-
-	
-	
-	s_ctrl->curr_csi_params = NULL;
-	msm_sensor_enable_debugfs(s_ctrl);
-	msm_sensor_write_init_settings(s_ctrl);
-	res =0;
-
-	if (s_ctrl->curr_csi_params != s_ctrl->csi_params[res]) {
-		s_ctrl->curr_csi_params = s_ctrl->csi_params[res];
-		s_ctrl->curr_csi_params->csid_params.lane_assign =
-			s_ctrl->sensordata->sensor_platform_info->
-			csi_lane_params->csi_lane_assign;
-		s_ctrl->curr_csi_params->csiphy_params.lane_mask =
-			s_ctrl->sensordata->sensor_platform_info->
-			csi_lane_params->csi_lane_mask;
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_CSID_CFG,
-			&s_ctrl->curr_csi_params->csid_params);
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-					NOTIFY_CID_CHANGE, NULL);
-		mb();
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_CSIPHY_CFG,
-			&s_ctrl->curr_csi_params->csiphy_params);
-		mb();
-		msleep(20);
-	}
-
-#ifdef CONFIG_RAWCHIP
-		if (s_ctrl->sensordata->use_rawchip) {
-
-			pr_info("%s: use_rawchip\n", __func__);
-
-			rawchip_data.sensor_name = s_ctrl->sensordata->sensor_name;
-			rawchip_data.datatype = s_ctrl->curr_csi_params->csid_params.lut_params.vc_cfg->dt;
-			rawchip_data.lane_cnt = s_ctrl->curr_csi_params->csid_params.lane_cnt;
-			rawchip_data.pixel_clk = s_ctrl->msm_sensor_reg->output_settings[res].op_pixel_clk;
-			rawchip_data.mirror_flip = s_ctrl->mirror_flip;
-
-			rawchip_data.width = s_ctrl->msm_sensor_reg->output_settings[res].x_output;
-			rawchip_data.height = s_ctrl->msm_sensor_reg->output_settings[res].y_output;
-			rawchip_data.line_length_pclk = s_ctrl->msm_sensor_reg->output_settings[res].line_length_pclk;
-			rawchip_data.frame_length_lines = s_ctrl->msm_sensor_reg->output_settings[res].frame_length_lines;
-			rawchip_data.x_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_start;
-			rawchip_data.y_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_start;
-			rawchip_data.x_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_end;
-			rawchip_data.y_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_end;
-			rawchip_data.x_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_even_inc;
-			rawchip_data.x_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_odd_inc;
-			rawchip_data.y_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_even_inc;
-			rawchip_data.y_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_odd_inc;
-			rawchip_data.binning_rawchip = s_ctrl->msm_sensor_reg->output_settings[res].binning_rawchip;
-
-			rawchip_data.fullsize_width = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].x_output;
-			rawchip_data.fullsize_height = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].y_output;
-			rawchip_data.fullsize_line_length_pclk =
-				s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].line_length_pclk;
-			rawchip_data.fullsize_frame_length_lines =
-				s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].frame_length_lines;
-			rawchip_data.use_rawchip = s_ctrl->sensordata->use_rawchip;
-
-			ktime_get_ts(&ts_start);
-			rawchip_set_size(rawchip_data);
-			ktime_get_ts(&ts_end);
-			pr_info("%s: %ld ms\n", __func__,
-				(ts_end.tv_sec-ts_start.tv_sec)*1000+(ts_end.tv_nsec-ts_start.tv_nsec)/1000000);
-		}
-#endif
-	mutex_unlock(s_ctrl->sensor_first_mutex);
-	
-	return rc;
-}
-
-
-int32_t msm_sensor_setting_parallel_ov(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res)
-{
-	int32_t rc = 0;
-
-#ifdef CONFIG_RAWCHIP
-	struct rawchip_sensor_data rawchip_data;
-	struct timespec ts_start, ts_end;
-#endif
-
-	pr_info("%s: update_type=%d, res=%d\n", __func__, update_type, res);
-
-	v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-		NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-		PIX_0, ISPIF_OFF_IMMEDIATELY));
-
-	msleep(30);
-	if (update_type == MSM_SENSOR_REG_INIT) {
-		mutex_lock(s_ctrl->sensor_first_mutex);  
-
-		tsk_sensor_init = kthread_create(oem_sensor_init_ov, s_ctrl, "oem_sensor_init_ov");
-		if (IS_ERR(tsk_sensor_init)) {
-			pr_err("%s: kthread_create failed", __func__);
-			rc = PTR_ERR(tsk_sensor_init);
-			tsk_sensor_init = NULL;
-			mutex_unlock(s_ctrl->sensor_first_mutex);  
-		} else
-			wake_up_process(tsk_sensor_init);
-		first_init = 1;
-		
-	} else if (update_type == MSM_SENSOR_UPDATE_PERIODIC) {
-	
-		mutex_lock(s_ctrl->sensor_first_mutex);
-		
-		if(!first_init)
-			mdelay(50);
-		first_init = 0;
-
-		if (s_ctrl->curr_csi_params != s_ctrl->csi_params[res]) {
-			s_ctrl->curr_csi_params = s_ctrl->csi_params[res];
-			s_ctrl->curr_csi_params->csid_params.lane_assign =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_assign;
-			s_ctrl->curr_csi_params->csiphy_params.lane_mask =
-				s_ctrl->sensordata->sensor_platform_info->
-				csi_lane_params->csi_lane_mask;
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSID_CFG,
-				&s_ctrl->curr_csi_params->csid_params);
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-						NOTIFY_CID_CHANGE, NULL);
-			mb();
-			v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-				NOTIFY_CSIPHY_CFG,
-				&s_ctrl->curr_csi_params->csiphy_params);
-			mb();
-			msleep(20);
-		}
-
-#ifdef CONFIG_RAWCHIP
-			if (s_ctrl->sensordata->use_rawchip) {
-
-				pr_info("%s: use_rawchip\n", __func__);
-
-				rawchip_data.sensor_name = s_ctrl->sensordata->sensor_name;
-				rawchip_data.datatype = s_ctrl->curr_csi_params->csid_params.lut_params.vc_cfg->dt;
-				rawchip_data.lane_cnt = s_ctrl->curr_csi_params->csid_params.lane_cnt;
-				rawchip_data.pixel_clk = s_ctrl->msm_sensor_reg->output_settings[res].op_pixel_clk;
-				rawchip_data.mirror_flip = s_ctrl->mirror_flip;
-
-				rawchip_data.width = s_ctrl->msm_sensor_reg->output_settings[res].x_output;
-				rawchip_data.height = s_ctrl->msm_sensor_reg->output_settings[res].y_output;
-				rawchip_data.line_length_pclk = s_ctrl->msm_sensor_reg->output_settings[res].line_length_pclk;
-				rawchip_data.frame_length_lines = s_ctrl->msm_sensor_reg->output_settings[res].frame_length_lines;
-				rawchip_data.x_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_start;
-				rawchip_data.y_addr_start = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_start;
-				rawchip_data.x_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].x_addr_end;
-				rawchip_data.y_addr_end = s_ctrl->msm_sensor_reg->output_settings[res].y_addr_end;
-				rawchip_data.x_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_even_inc;
-				rawchip_data.x_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].x_odd_inc;
-				rawchip_data.y_even_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_even_inc;
-				rawchip_data.y_odd_inc = s_ctrl->msm_sensor_reg->output_settings[res].y_odd_inc;
-				rawchip_data.binning_rawchip = s_ctrl->msm_sensor_reg->output_settings[res].binning_rawchip;
-
-				rawchip_data.fullsize_width = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].x_output;
-				rawchip_data.fullsize_height = s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].y_output;
-				rawchip_data.fullsize_line_length_pclk =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].line_length_pclk;
-				rawchip_data.fullsize_frame_length_lines =
-					s_ctrl->msm_sensor_reg->output_settings[MSM_SENSOR_RES_FULL].frame_length_lines;
-				rawchip_data.use_rawchip = s_ctrl->sensordata->use_rawchip;
-
-				ktime_get_ts(&ts_start);
-				rawchip_set_size(rawchip_data);
-				ktime_get_ts(&ts_end);
-				pr_info("%s: %ld ms\n", __func__,
-					(ts_end.tv_sec-ts_start.tv_sec)*1000+(ts_end.tv_nsec-ts_start.tv_nsec)/1000000);
-			}
-#endif
-
-		msm_sensor_write_res_settings(s_ctrl, res);
-
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_PCLK_CHANGE, &s_ctrl->msm_sensor_reg->
-			output_settings[res].op_pixel_clk);
-		v4l2_subdev_notify(&s_ctrl->sensor_v4l2_subdev,
-			NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-			PIX_0, ISPIF_ON_FRAME_BOUNDARY));
-		s_ctrl->func_tbl->sensor_start_stream(s_ctrl);
-		msleep(30);
-		
-		mutex_unlock(s_ctrl->sensor_first_mutex);
-	}
-	return rc;
-}
-
-int32_t msm_sensor_set_sensor_mode(struct msm_sensor_ctrl_t *s_ctrl,
-	int mode, int res)
-{
-	int32_t rc = 0;
-	pr_info("%s, res=%d, mode=%d\n", __func__, res, mode);
-
-	if (s_ctrl->curr_res != res) {
-		s_ctrl->curr_frame_length_lines =
-			s_ctrl->msm_sensor_reg->
-			output_settings[res].frame_length_lines;
-
-		s_ctrl->curr_line_length_pclk =
-			s_ctrl->msm_sensor_reg->
-			output_settings[res].line_length_pclk;
-
-		if (s_ctrl->func_tbl->sensor_setting
-			(s_ctrl, MSM_SENSOR_UPDATE_PERIODIC, res) < 0)
-			return rc;
-		s_ctrl->curr_res = res;
-	}
-
-	return rc;
-}
-
-int32_t msm_sensor_mode_init(struct msm_sensor_ctrl_t *s_ctrl,
-			int mode, struct sensor_init_cfg *init_info)
-{
-	int32_t rc = 0;
-	s_ctrl->fps_divider = Q10;
-	s_ctrl->cam_mode = MSM_SENSOR_MODE_INVALID;
-	pr_info("%s called\n", __func__);
-
-	if (mode != s_ctrl->cam_mode) {
-		s_ctrl->curr_res = MSM_SENSOR_INVALID_RES;
-		s_ctrl->cam_mode = mode;
-
-		rc = s_ctrl->func_tbl->sensor_setting(s_ctrl,
-			MSM_SENSOR_REG_INIT, 0);
-	}
-	return rc;
-}
-
-int32_t msm_sensor_get_output_info(struct msm_sensor_ctrl_t *s_ctrl,
-		struct sensor_output_info_t *sensor_output_info)
-{
-	int rc = 0;
-	CDBG("%s: called\n", __func__);
-
-	sensor_output_info->num_info = s_ctrl->msm_sensor_reg->num_conf;
-	sensor_output_info->vert_offset = s_ctrl->sensor_exp_gain_info->vert_offset;
-	sensor_output_info->min_vert = s_ctrl->sensor_exp_gain_info->min_vert;
-	sensor_output_info->mirror_flip = s_ctrl->mirror_flip;
-
-
-	
-	if(s_ctrl->sensor_exp_gain_info->sensor_max_linecount == 0)
-		s_ctrl->sensor_exp_gain_info->sensor_max_linecount = 0xFFFFFFFF;
-
-	sensor_output_info->sensor_max_linecount = s_ctrl->sensor_exp_gain_info->sensor_max_linecount;
-	if (copy_to_user((void *)sensor_output_info->output_info,
-		s_ctrl->msm_sensor_reg->output_settings,
-		sizeof(struct msm_sensor_output_info_t) *
-		s_ctrl->msm_sensor_reg->num_conf))
-		rc = -EFAULT;
-
-	return rc;
-}
-
-int32_t msm_sensor_release(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	long fps = 0;
-	uint32_t delay = 0;
-	pr_info("%s: called\n", __func__);
-
-	s_ctrl->func_tbl->sensor_stop_stream(s_ctrl);
-	if (s_ctrl->curr_res != MSM_SENSOR_INVALID_RES) {
-		fps = s_ctrl->msm_sensor_reg->
-			output_settings[s_ctrl->curr_res].vt_pixel_clk /
-			s_ctrl->curr_frame_length_lines /
-			s_ctrl->curr_line_length_pclk;
-		delay = 1000 / fps;
-		CDBG("%s fps = %ld, delay = %d\n", __func__, fps, delay);
-		msleep(delay);
-	}
-	return 0;
-}
-
-long msm_sensor_subdev_ioctl(struct v4l2_subdev *sd,
-			unsigned int cmd, void *arg)
-{
-	struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(sd);
-	void __user *argp = (void __user *)arg;
-	CDBG("%s: cmd = %d\n", __func__, cmd);
-
-	switch (cmd) {
-	case VIDIOC_MSM_SENSOR_CFG:
-		return s_ctrl->func_tbl->sensor_config(s_ctrl, argp);
-
-	case VIDIOC_MSM_SENSOR_RELEASE:
-		return msm_sensor_release(s_ctrl);
-
-	default:
-		return -ENOIOCTLCMD;
-	}
-}
-
-int32_t msm_sensor_config(struct msm_sensor_ctrl_t *s_ctrl, void __user *argp)
-{
-	struct sensor_cfg_data cdata;
-	long   rc = 0;
-	if (copy_from_user(&cdata,
-		(void *)argp,
-		sizeof(struct sensor_cfg_data)))
-		return -EFAULT;
-	mutex_lock(s_ctrl->msm_sensor_mutex);
-	CDBG("%s: msm_sensor_config: cfgtype = %d\n", __func__, cdata.cfgtype);
-
-		switch (cdata.cfgtype) {
-		case CFG_SET_FPS:
-		case CFG_SET_PICT_FPS:
-			if (s_ctrl->func_tbl->
-			sensor_set_fps == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc = s_ctrl->func_tbl->
-				sensor_set_fps(
-				s_ctrl,
-				&(cdata.cfg.fps));
-			break;
-
-		case CFG_SET_EXP_GAIN:
-			if (s_ctrl->func_tbl->
-			sensor_write_exp_gain_ex == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc =
-				s_ctrl->func_tbl->
-				sensor_write_exp_gain_ex(
-					s_ctrl,
-					cdata.mode, 
-					cdata.cfg.exp_gain.gain,
-					cdata.cfg.exp_gain.dig_gain, 
-					cdata.cfg.exp_gain.line);
-			s_ctrl->prev_gain = cdata.cfg.exp_gain.gain;
-			s_ctrl->prev_line = cdata.cfg.exp_gain.line;					
-			break;
-
-		case CFG_SET_PICT_EXP_GAIN:
-			if (s_ctrl->func_tbl->
-			sensor_write_snapshot_exp_gain_ex == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc =
-				s_ctrl->func_tbl->
-				sensor_write_snapshot_exp_gain_ex(
-					s_ctrl,
-					cdata.mode, 
-					cdata.cfg.exp_gain.gain,
-					cdata.cfg.exp_gain.dig_gain, 
-					cdata.cfg.exp_gain.line);
-			break;
-
-		case CFG_SET_MODE:
-			if (s_ctrl->func_tbl->
-			sensor_set_sensor_mode == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc = s_ctrl->func_tbl->
-				sensor_set_sensor_mode(
-					s_ctrl,
-					cdata.mode,
-					cdata.rs);
-			break;
-
-		case CFG_SET_EFFECT:
-			break;
-
-		case CFG_SENSOR_INIT:
-			if (s_ctrl->func_tbl->
-			sensor_mode_init == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc = s_ctrl->func_tbl->
-				sensor_mode_init(
-				s_ctrl,
-				cdata.mode,
-				&(cdata.cfg.init_info));
-			break;
-
-		case CFG_GET_OUTPUT_INFO:
-			if (s_ctrl->func_tbl->
-			sensor_get_output_info == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc = s_ctrl->func_tbl->
-				sensor_get_output_info(
-				s_ctrl,
-				&cdata.cfg.output_info);
-
-			if (copy_to_user((void *)argp,
-				&cdata,
-				sizeof(struct sensor_cfg_data)))
-				rc = -EFAULT;
-			break;
-
-		case CFG_GET_EEPROM_DATA:
-			if (s_ctrl->sensor_eeprom_client == NULL ||
-				s_ctrl->sensor_eeprom_client->
-				func_tbl.eeprom_get_data == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc = s_ctrl->sensor_eeprom_client->
-				func_tbl.eeprom_get_data(
-				s_ctrl->sensor_eeprom_client,
-				&cdata.cfg.eeprom_data);
-
-			if (copy_to_user((void *)argp,
-				&cdata,
-				sizeof(struct sensor_eeprom_data_t)))
-				rc = -EFAULT;
-			break;
-		
-		case CFG_I2C_IOCTL_R_OTP:{
-			pr_info("Line:%d CFG_I2C_IOCTL_R_OTP \n", __LINE__);
-			if (s_ctrl->func_tbl->sensor_i2c_read_fuseid == NULL) {
-				rc = -EFAULT;
-				break;
-			}
-			rc = s_ctrl->func_tbl->sensor_i2c_read_fuseid(&cdata, s_ctrl);
-			if (copy_to_user(argp, &cdata, sizeof(struct sensor_cfg_data)))
-			rc = -EFAULT;
-		}
-		break;
-		
-
-		default:
-			rc = -EFAULT;
-			break;
-		}
-
-	mutex_unlock(s_ctrl->msm_sensor_mutex);
-
-	return rc;
-}
-
-static struct msm_cam_clk_info cam_clk_info[] = {
-	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
-};
-
-int32_t msm_sensor_enable_i2c_mux(struct msm_camera_i2c_conf *i2c_conf)
-{
-	struct v4l2_subdev *i2c_mux_sd =
-		dev_get_drvdata(&i2c_conf->mux_dev->dev);
-	CDBG("%s: called\n", __func__);
-
-	v4l2_subdev_call(i2c_mux_sd, core, ioctl,
-		VIDIOC_MSM_I2C_MUX_INIT, NULL);
-	v4l2_subdev_call(i2c_mux_sd, core, ioctl,
-		VIDIOC_MSM_I2C_MUX_CFG, (void *)&i2c_conf->i2c_mux_mode);
-	return 0;
-}
-
-int32_t msm_sensor_disable_i2c_mux(struct msm_camera_i2c_conf *i2c_conf)
-{
-	struct v4l2_subdev *i2c_mux_sd =
-		dev_get_drvdata(&i2c_conf->mux_dev->dev);
-	CDBG("%s: called\n", __func__);
-
-	v4l2_subdev_call(i2c_mux_sd, core, ioctl,
-				VIDIOC_MSM_I2C_MUX_RELEASE, NULL);
-	return 0;
-}
-
-int32_t msm_sensor_power_up(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t rc = 0;
-	struct msm_camera_sensor_info *data = s_ctrl->sensordata;
-	CDBG("%s: called\n", __func__);
-
-	s_ctrl->reg_ptr = kzalloc(sizeof(struct regulator *)
-			* data->sensor_platform_info->num_vreg, GFP_KERNEL);
-	if (!s_ctrl->reg_ptr) {
-		pr_err("%s: failed to could not allocate mem for regulators\n", __func__);
-		return -ENOMEM;
-	}
-
-	rc = msm_camera_request_gpio_table(data, 1);
-	if (rc < 0) {
-		pr_err("%s: request gpio failed\n", __func__);
-		goto request_gpio_failed;
-	}
-
-	rc = msm_camera_config_vreg(&s_ctrl->sensor_i2c_client->client->dev,
-			s_ctrl->sensordata->sensor_platform_info->cam_vreg,
-			s_ctrl->sensordata->sensor_platform_info->num_vreg,
-			s_ctrl->reg_ptr, 1);
-	if (rc < 0) {
-		pr_err("%s: regulator on failed\n", __func__);
-		goto config_vreg_failed;
-	}
-
-	rc = msm_camera_enable_vreg(&s_ctrl->sensor_i2c_client->client->dev,
-			s_ctrl->sensordata->sensor_platform_info->cam_vreg,
-			s_ctrl->sensordata->sensor_platform_info->num_vreg,
-			s_ctrl->reg_ptr, 1);
-	if (rc < 0) {
-		pr_err("%s: enable regulator failed\n", __func__);
-		goto enable_vreg_failed;
-	}
-
-	rc = msm_camera_config_gpio_table(data, 1);
-	if (rc < 0) {
-		pr_err("%s: config gpio failed\n", __func__);
-		goto config_gpio_failed;
-	}
-
-	if (s_ctrl->clk_rate != 0)
-		cam_clk_info->clk_rate = s_ctrl->clk_rate;
-
-	rc = msm_cam_clk_enable(&s_ctrl->sensor_i2c_client->client->dev,
-		cam_clk_info, &s_ctrl->cam_clk, ARRAY_SIZE(cam_clk_info), 1);
-	if (rc < 0) {
-		pr_err("%s: clk enable failed\n", __func__);
-		goto enable_clk_failed;
-	}
-
-	usleep_range(1000, 2000);
-	if (data->sensor_platform_info->ext_power_ctrl != NULL)
-		data->sensor_platform_info->ext_power_ctrl(1);
-
-	if (data->sensor_platform_info->i2c_conf &&
-		data->sensor_platform_info->i2c_conf->use_i2c_mux)
-		msm_sensor_enable_i2c_mux(data->sensor_platform_info->i2c_conf);
-
-	return rc;
-enable_clk_failed:
-		msm_camera_config_gpio_table(data, 0);
-config_gpio_failed:
-	msm_camera_enable_vreg(&s_ctrl->sensor_i2c_client->client->dev,
-			s_ctrl->sensordata->sensor_platform_info->cam_vreg,
-			s_ctrl->sensordata->sensor_platform_info->num_vreg,
-			s_ctrl->reg_ptr, 0);
-
-enable_vreg_failed:
-	msm_camera_config_vreg(&s_ctrl->sensor_i2c_client->client->dev,
-		s_ctrl->sensordata->sensor_platform_info->cam_vreg,
-		s_ctrl->sensordata->sensor_platform_info->num_vreg,
-		s_ctrl->reg_ptr, 0);
-config_vreg_failed:
-	msm_camera_request_gpio_table(data, 0);
-request_gpio_failed:
-	kfree(s_ctrl->reg_ptr);
-	return rc;
-}
-
-int32_t msm_sensor_power_down(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	struct msm_camera_sensor_info *data = s_ctrl->sensordata;
-	CDBG("%s: called %d\n", __func__, __LINE__);
-
-	if (data->sensor_platform_info->i2c_conf &&
-		data->sensor_platform_info->i2c_conf->use_i2c_mux)
-		msm_sensor_disable_i2c_mux(
-			data->sensor_platform_info->i2c_conf);
-
-	if (data->sensor_platform_info->ext_power_ctrl != NULL)
-		data->sensor_platform_info->ext_power_ctrl(0);
-	msm_cam_clk_enable(&s_ctrl->sensor_i2c_client->client->dev,
-		cam_clk_info, &s_ctrl->cam_clk, ARRAY_SIZE(cam_clk_info), 0);
-	msm_camera_config_gpio_table(data, 0);
-	msm_camera_enable_vreg(&s_ctrl->sensor_i2c_client->client->dev,
-		s_ctrl->sensordata->sensor_platform_info->cam_vreg,
-		s_ctrl->sensordata->sensor_platform_info->num_vreg,
-		s_ctrl->reg_ptr, 0);
-	msm_camera_config_vreg(&s_ctrl->sensor_i2c_client->client->dev,
-		s_ctrl->sensordata->sensor_platform_info->cam_vreg,
-		s_ctrl->sensordata->sensor_platform_info->num_vreg,
-		s_ctrl->reg_ptr, 0);
-	msm_camera_request_gpio_table(data, 0);
-	kfree(s_ctrl->reg_ptr);
-	return 0;
-}
-
-int32_t msm_sensor_set_power_up(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t rc = 0;
-	int32_t gpio = 0;
-	struct msm_camera_sensor_info *data = NULL;
-	pr_info("%s: called %d\n", __func__, __LINE__);
-
-	if (s_ctrl && s_ctrl->sensordata)
-		data = s_ctrl->sensordata;
-	else {
-		pr_err("%s: failed, s_ctrl sensordata is NULL\n", __func__);
-		return (-1);
-	}
-
-	msm_camio_clk_rate_set(MSM_SENSOR_MCLK_24HZ);
-
-	if (data->sensor_platform_info->sensor_reset_enable)
-		gpio = data->sensor_platform_info->sensor_reset;
-	else
-		gpio = data->sensor_platform_info->sensor_pwd;
-
-	rc = gpio_request(gpio, "SENSOR_NAME");
-	if (!rc) {
-		CDBG("%s: reset sensor\n", __func__);
-		gpio_direction_output(gpio, 0);
-		usleep_range(1000, 2000);
-		gpio_set_value_cansleep(gpio, 1);
-		usleep_range(4000, 5000);
-	} else {
-		pr_err("%s: gpio request fail", __func__);
-	}
-
-	return rc;
-}
-
-int32_t msm_sensor_set_power_down(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t gpio = 0;
-	struct msm_camera_sensor_info *data = NULL;
-	pr_info("%s: called %d\n", __func__, __LINE__);
-
-	if (s_ctrl && s_ctrl->sensordata)
-		data = s_ctrl->sensordata;
-	else {
-		pr_err("%s: failed to s_ctrl sensordata NULL\n", __func__);
-		return (-1);
-	}
-
-	if (data->sensor_platform_info->sensor_reset_enable)
-		gpio = data->sensor_platform_info->sensor_reset;
-	else
-		gpio = data->sensor_platform_info->sensor_pwd;
-
-	gpio_set_value_cansleep(gpio, 0);
-	usleep_range(1000, 2000);
-	gpio_free(gpio);
-	return 0;
-}
-
-int32_t msm_sensor_match_id(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t rc = 0;
-	uint16_t chipid = 0;
-	int i=10;
-	CDBG("%s: called %d\n", __func__, __LINE__);
-
-	while(i--)
-	{
-		pr_info("%s: retry %d\n",  __func__, i);
-	
-		rc = msm_camera_i2c_read(
-				s_ctrl->sensor_i2c_client,
-				s_ctrl->sensor_id_info->sensor_id_reg_addr, &chipid,
-				MSM_CAMERA_I2C_WORD_DATA);
-
-		if(rc>=0)
-			break;
-	}
-	if (rc < 0) {
-		pr_err("%s: read id failed\n", __func__);
-		return rc;
-	}
-
-	pr_info("%s: msm_sensor id: 0x%x,expect sensor_id=0x%x\n", __func__, chipid, s_ctrl->sensor_id_info->sensor_id);
-#if 1	
-		if (s_ctrl->sensor_id_info->sensor_id == 0x4581)
-		{
-			uint16_t chipid2 = 0;
-			rc = msm_camera_i2c_read(
-			s_ctrl->sensor_i2c_client,
-			0x3000, &chipid2,
-			MSM_CAMERA_I2C_WORD_DATA);
-			if (rc < 0) {
-				pr_err("%s: read id failed\n", __func__);
-				return rc;
-			}
-
-			pr_info("%s: msm_sensor id 0x3000: 0x%x,expect sensor_id=0x%x\n", __func__, chipid2, s_ctrl->sensor_id_info->sensor_id);
-		}
-#endif
-	if (chipid != s_ctrl->sensor_id_info->sensor_id) {
-#if defined(CONFIG_MACH_MONARUDO) || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DELUXE_R) || defined(CONFIG_MACH_DUMMY)\
-    || defined(CONFIG_MACH_DUMMY) || defined(CONFIG_MACH_DUMMY)
-		if (chipid == 0x174 && s_ctrl->sensor_id_info->sensor_id == 0x175)
-		{
-			
-			pr_info("%s: WA for Liteon module written wrong sensor ID as IMX174\n", __func__);
-			return rc;
-		}
-#endif
-		pr_info("%s: failed to msm_sensor_match_id chip id doesnot match\n", __func__);
-		return -ENODEV;
-	}
-	return rc;
-}
-
-struct msm_sensor_ctrl_t *get_sctrl(struct v4l2_subdev *sd)
-{
-	return container_of(sd, struct msm_sensor_ctrl_t, sensor_v4l2_subdev);
-}
-
-int32_t msm_sensor_i2c_probe(struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	int rc = 0;
-	struct msm_sensor_ctrl_t *s_ctrl;
-	pr_info("%s: sensor_i2c_probe called - name: %s\n", __func__, client->name);
-
-	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
-		pr_err("i2c_check_functionality failed\n");
-		rc = -EFAULT;
-		return rc;
-	}
-
-	s_ctrl = (struct msm_sensor_ctrl_t *)(id->driver_data);
-	if (s_ctrl->sensor_i2c_client != NULL) {
-		s_ctrl->sensor_i2c_client->client = client;
-		if (s_ctrl->sensor_i2c_addr != 0)
-			s_ctrl->sensor_i2c_client->client->addr =
-				s_ctrl->sensor_i2c_addr;
-	} else {
-		pr_err("%s: failed to sensor_i2c_client is NULL\n", __func__);
-		rc = -EFAULT;
-		return rc;
-	}
-
-	s_ctrl->sensordata = client->dev.platform_data;
-	if (s_ctrl->sensordata == NULL) {
-		pr_err("%s: failed to sensor data is NULL\n", __func__);
-		return -EFAULT;
-	}
-
-	msm_camio_probe_on_bootup(s_ctrl);	
-
-	if (s_ctrl->sensordata->use_rawchip) {
-#ifdef CONFIG_RAWCHIP
-		rc = rawchip_probe_init();
-		if (rc < 0) {
-			msm_camio_probe_on_bootup(s_ctrl);	
-
-			pr_err("%s: rawchip probe init failed\n", __func__);
-			return rc;
-		}
-#endif
-	}
-
-	if (s_ctrl->func_tbl && s_ctrl->func_tbl->sensor_power_up)
-		rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
-
-	if (rc < 0)
-		goto probe_fail;
-
-	rc = msm_sensor_match_id(s_ctrl);
-	if (rc < 0)
-		goto probe_fail;
-
-	if (s_ctrl->sensor_eeprom_client != NULL) {
-		struct msm_camera_eeprom_client *eeprom_client =
-			s_ctrl->sensor_eeprom_client;
-		if (eeprom_client->func_tbl.eeprom_init != NULL &&
-			eeprom_client->func_tbl.eeprom_release != NULL) {
-			rc = eeprom_client->func_tbl.eeprom_init(
-				eeprom_client,
-				s_ctrl->sensor_i2c_client->client->adapter);
-			if (rc < 0)
-				goto probe_fail;
-
-			rc = msm_camera_eeprom_read_tbl(eeprom_client,
-			eeprom_client->read_tbl, eeprom_client->read_tbl_size);
-			eeprom_client->func_tbl.eeprom_release(eeprom_client);
-			if (rc < 0)
-				goto probe_fail;
-		}
-	}
-
-	snprintf(s_ctrl->sensor_v4l2_subdev.name,
-		sizeof(s_ctrl->sensor_v4l2_subdev.name), "%s", id->name);
-	v4l2_i2c_subdev_init(&s_ctrl->sensor_v4l2_subdev, client,
-		s_ctrl->sensor_v4l2_subdev_ops);
-
-    if (s_ctrl->func_tbl->sensor_i2c_read_vcm_driver_ic != NULL)
-      s_ctrl->func_tbl->sensor_i2c_read_vcm_driver_ic(s_ctrl);
-
-	msm_sensor_register(&s_ctrl->sensor_v4l2_subdev);
-	goto power_down;
-probe_fail:
-	pr_info("%s_i2c_probe failed\n", client->name);
-power_down:
-	if (rc > 0)
-		rc = 0;
-
-	if (s_ctrl->func_tbl && s_ctrl->func_tbl->sensor_power_down)
-		s_ctrl->func_tbl->sensor_power_down(s_ctrl);
-
-	if (s_ctrl->sensordata->use_rawchip) {
-#ifdef CONFIG_RAWCHIP
-		rawchip_probe_deinit();
-#endif
-	}
-
-	msm_camio_probe_off_bootup(s_ctrl);	
-
-	return rc;
-}
-
-int32_t msm_sensor_power(struct v4l2_subdev *sd, int on)
-{
-	int rc = 0;
-	struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(sd);
-	CDBG("%s: called\n", __func__);
-
-	mutex_lock(s_ctrl->msm_sensor_mutex);
-	if (on)
-		rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
-	else
-		rc = s_ctrl->func_tbl->sensor_power_down(s_ctrl);
-	mutex_unlock(s_ctrl->msm_sensor_mutex);
-	return rc;
-}
-
-int32_t msm_sensor_v4l2_enum_fmt(struct v4l2_subdev *sd, unsigned int index,
-			   enum v4l2_mbus_pixelcode *code)
-{
-	struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(sd);
-	CDBG("%s: called\n", __func__);
-
-	if ((unsigned int)index >= s_ctrl->sensor_v4l2_subdev_info_size)
-		return -EINVAL;
-
-	*code = s_ctrl->sensor_v4l2_subdev_info[index].code;
-	return 0;
-}
-
-int32_t msm_sensor_v4l2_s_ctrl(struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl)
-{
-	int rc = -1, i = 0;
-	struct msm_sensor_ctrl_t *s_ctrl = get_sctrl(sd);
-	struct msm_sensor_v4l2_ctrl_info_t *v4l2_ctrl =
-		s_ctrl->msm_sensor_v4l2_ctrl_info;
-	CDBG("%s: ctrl->id=%d\n", __func__, ctrl->id);
-
-	if (v4l2_ctrl == NULL)
-	{
-		pr_info("%s: failed to v4l2_ctrl == NULL\n", __func__);
-		return rc;
-	}
-
-	for (i = 0; i < s_ctrl->num_v4l2_ctrl; i++) {
-		if (v4l2_ctrl[i].ctrl_id == ctrl->id) {
-			if (v4l2_ctrl[i].s_v4l2_ctrl != NULL) {
-				CDBG("\n calling msm_sensor_s_ctrl_by_enum\n");
-				rc = v4l2_ctrl[i].s_v4l2_ctrl(
-					s_ctrl,
-					&s_ctrl->msm_sensor_v4l2_ctrl_info[i],
-					ctrl->value);
-			}
-			break;
-		}
-	}
-
-	return rc;
-}
-
-int32_t msm_sensor_v4l2_query_ctrl(
-	struct v4l2_subdev *sd, struct v4l2_queryctrl *qctrl)
-{
-	int rc = -1, i = 0;
-	struct msm_sensor_ctrl_t *s_ctrl =
-		(struct msm_sensor_ctrl_t *) sd->dev_priv;
-	CDBG("%s id: %d\n", __func__, qctrl->id);
-
-	if (s_ctrl->msm_sensor_v4l2_ctrl_info == NULL)
-		return rc;
-
-	for (i = 0; i < s_ctrl->num_v4l2_ctrl; i++) {
-		if (s_ctrl->msm_sensor_v4l2_ctrl_info[i].ctrl_id == qctrl->id) {
-			qctrl->minimum =
-				s_ctrl->msm_sensor_v4l2_ctrl_info[i].min;
-			qctrl->maximum =
-				s_ctrl->msm_sensor_v4l2_ctrl_info[i].max;
-			qctrl->flags = 1;
-			rc = 0;
-			break;
-		}
-	}
-
-	return rc;
-}
-
-int msm_sensor_s_ctrl_by_enum(struct msm_sensor_ctrl_t *s_ctrl,
-		struct msm_sensor_v4l2_ctrl_info_t *ctrl_info, int value)
-{
-	int rc = 0;
-	CDBG("%s enter\n", __func__);
-
-	rc = msm_sensor_write_enum_conf_array(
-		s_ctrl->sensor_i2c_client,
-		ctrl_info->enum_cfg_settings, value);
-	return rc;
-}
-
-static int msm_sensor_debugfs_stream_s(void *data, u64 val)
-{
-	struct msm_sensor_ctrl_t *s_ctrl = (struct msm_sensor_ctrl_t *) data;
-	CDBG("%s called\n", __func__);
-
-	if (val)
-		s_ctrl->func_tbl->sensor_start_stream(s_ctrl);
-	else
-		s_ctrl->func_tbl->sensor_stop_stream(s_ctrl);
-	return 0;
-}
-
-DEFINE_SIMPLE_ATTRIBUTE(sensor_debugfs_stream, NULL,
-			msm_sensor_debugfs_stream_s, "%llu\n");
-
-static int msm_sensor_debugfs_test_s(void *data, u64 val)
-{
-	CDBG("%s: val: %llu\n", __func__, val);
-	return 0;
-}
-
-DEFINE_SIMPLE_ATTRIBUTE(sensor_debugfs_test, NULL,
-			msm_sensor_debugfs_test_s, "%llu\n");
-
-int msm_sensor_enable_debugfs(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	struct dentry *debugfs_base, *sensor_dir;
-	CDBG("%s: called\n", __func__);
-
-	debugfs_base = debugfs_create_dir("msm_sensor", NULL);
-	if (!debugfs_base)
-		return -ENOMEM;
-
-	sensor_dir = debugfs_create_dir
-		(s_ctrl->sensordata->sensor_name, debugfs_base);
-	if (!sensor_dir)
-		return -ENOMEM;
-
-	if (!debugfs_create_file("stream", S_IRUGO | S_IWUSR, sensor_dir,
-			(void *) s_ctrl, &sensor_debugfs_stream))
-		return -ENOMEM;
-
-	if (!debugfs_create_file("test", S_IRUGO | S_IWUSR, sensor_dir,
-			(void *) s_ctrl, &sensor_debugfs_test))
-		return -ENOMEM;
-
-	return 0;
-}
diff --git a/drivers/media/video/msm/sensors/msm_sensor.h b/drivers/media/video/msm/sensors/msm_sensor.h
deleted file mode 100644
index a847d21..0000000
--- a/drivers/media/video/msm/sensors/msm_sensor.h
+++ /dev/null
@@ -1,307 +0,0 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef MSM_SENSOR_H
-#define MSM_SENSOR_H
-
-#include <linux/module.h>
-#include <linux/debugfs.h>
-#include <linux/delay.h>
-#include <linux/i2c.h>
-#include <linux/miscdevice.h>
-#include <linux/platform_device.h>
-#include <linux/slab.h>
-#include <linux/types.h>
-#include <linux/uaccess.h>
-#include <mach/camera.h>
-#include <mach/gpio.h>
-#include <media/msm_camera.h>
-#include <media/v4l2-subdev.h>
-#include "msm_camera_i2c.h"
-#include "msm_camera_eeprom.h"
-#define Q8  0x00000100
-#define Q10 0x00000400
-
-#define MSM_SENSOR_MCLK_8HZ 8000000
-#define MSM_SENSOR_MCLK_16HZ 16000000
-#define MSM_SENSOR_MCLK_24HZ 24000000
-
-enum msm_sensor_reg_update {
-	
-	MSM_SENSOR_REG_INIT,
-	
-	MSM_SENSOR_UPDATE_PERIODIC,
-	
-	MSM_SENSOR_UPDATE_ALL,
-	
-	MSM_SENSOR_UPDATE_INVALID
-};
-
-enum msm_sensor_cam_mode_t {
-	MSM_SENSOR_MODE_2D_RIGHT,
-	MSM_SENSOR_MODE_2D_LEFT,
-	MSM_SENSOR_MODE_3D,
-	MSM_SENSOR_MODE_INVALID
-};
-
-struct msm_sensor_output_reg_addr_t {
-	uint16_t x_output;
-	uint16_t y_output;
-	uint16_t line_length_pclk;
-	uint16_t frame_length_lines;
-};
-
-struct msm_sensor_id_info_t {
-	uint16_t sensor_id_reg_addr;
-	uint16_t sensor_id;
-};
-
-struct msm_sensor_exp_gain_info_t {
-	uint16_t coarse_int_time_addr;
-	uint16_t global_gain_addr;
-	uint16_t vert_offset;
-	uint16_t min_vert; 
-	uint32_t sensor_max_linecount; 
-};
-
-struct msm_sensor_reg_t {
-	enum msm_camera_i2c_data_type default_data_type;
-	struct msm_camera_i2c_reg_conf *start_stream_conf;
-	uint8_t start_stream_conf_size;
-	struct msm_camera_i2c_reg_conf *stop_stream_conf;
-	uint8_t stop_stream_conf_size;
-	struct msm_camera_i2c_reg_conf *group_hold_on_conf;
-	uint8_t group_hold_on_conf_size;
-	struct msm_camera_i2c_reg_conf *group_hold_off_conf;
-	uint8_t group_hold_off_conf_size;
-	struct msm_camera_i2c_conf_array *init_settings;
-	uint8_t init_size;
-	struct msm_camera_i2c_conf_array *mode_settings;
-	struct msm_camera_i2c_conf_array *no_effect_settings;
-	struct msm_sensor_output_info_t *output_settings;
-	uint8_t num_conf;
-};
-
-struct v4l2_subdev_info {
-	enum v4l2_mbus_pixelcode code;
-	enum v4l2_colorspace colorspace;
-	uint16_t fmt;
-	uint16_t order;
-};
-
-struct msm_sensor_ctrl_t;
-
-struct msm_sensor_v4l2_ctrl_info_t {
-	uint32_t ctrl_id;
-	int16_t min;
-	int16_t max;
-	int16_t step;
-	struct msm_camera_i2c_enum_conf_array *enum_cfg_settings;
-	int (*s_v4l2_ctrl) (struct msm_sensor_ctrl_t *,
-		struct msm_sensor_v4l2_ctrl_info_t *, int);
-};
-
-struct msm_sensor_fn_t {
-	void (*sensor_start_stream) (struct msm_sensor_ctrl_t *);
-	void (*sensor_stop_stream) (struct msm_sensor_ctrl_t *);
-	void (*sensor_group_hold_on) (struct msm_sensor_ctrl_t *);
-	void (*sensor_group_hold_off) (struct msm_sensor_ctrl_t *);
-
-	int32_t (*sensor_set_fps) (struct msm_sensor_ctrl_t *,
-			struct fps_cfg *);
-	int32_t (*sensor_write_exp_gain) (struct msm_sensor_ctrl_t *,
-			uint16_t, uint32_t);
-	int32_t (*sensor_write_snapshot_exp_gain) (struct msm_sensor_ctrl_t *,
-			uint16_t, uint32_t);
-	int32_t (*sensor_write_exp_gain_ex) (struct msm_sensor_ctrl_t *,
-			int, uint16_t, uint16_t, uint32_t); 
-	int32_t (*sensor_write_snapshot_exp_gain_ex) (struct msm_sensor_ctrl_t *,
-			int, uint16_t, uint16_t, uint32_t); 
-	int32_t (*sensor_setting) (struct msm_sensor_ctrl_t *,
-			int update_type, int rt);
-	int32_t (*sensor_set_sensor_mode)
-			(struct msm_sensor_ctrl_t *, int, int);
-	int32_t (*sensor_mode_init) (struct msm_sensor_ctrl_t *,
-		int, struct sensor_init_cfg *);
-	int32_t (*sensor_get_output_info) (struct msm_sensor_ctrl_t *,
-		struct sensor_output_info_t *);
-	int (*sensor_config) (struct msm_sensor_ctrl_t *, void __user *);
-	int (*sensor_power_down)
-		(struct msm_sensor_ctrl_t *);
-	int (*sensor_power_up) (struct msm_sensor_ctrl_t *);
-	
-	int (*sensor_i2c_read_fuseid)(struct sensor_cfg_data *cdata, struct msm_sensor_ctrl_t *s_ctrl);
-	
-       int (*sensor_i2c_read_vcm_driver_ic)(struct msm_sensor_ctrl_t *s_ctrl);
-	int (*sensor_adjust_frame_lines)
-		(struct msm_sensor_ctrl_t *s_ctrl, uint16_t res);
-
-	int32_t (*sensor_set_dig_gain) (struct msm_sensor_ctrl_t *, uint16_t); 
-	
-	void (*sensor_ov2722_write_exp_line) (struct msm_sensor_ctrl_t *, uint16_t); 
-
-	int (*sensor_write_output_settings_specific)(struct msm_sensor_ctrl_t *s_ctrl, uint16_t res); 
-};
-
-struct msm_sensor_ctrl_t {
-	struct  msm_camera_sensor_info *sensordata;
-	struct i2c_client *msm_sensor_client;
-	struct i2c_driver *sensor_i2c_driver;
-	struct msm_camera_i2c_client *sensor_i2c_client;
-	uint16_t sensor_i2c_addr;
-
-	struct msm_camera_eeprom_client *sensor_eeprom_client;
-
-	struct msm_sensor_output_reg_addr_t *sensor_output_reg_addr;
-	struct msm_sensor_id_info_t *sensor_id_info;
-	struct msm_sensor_exp_gain_info_t *sensor_exp_gain_info;
-	struct msm_sensor_reg_t *msm_sensor_reg;
-	struct msm_sensor_v4l2_ctrl_info_t *msm_sensor_v4l2_ctrl_info;
-	uint16_t num_v4l2_ctrl;
-
-	uint16_t curr_line_length_pclk;
-	uint16_t curr_frame_length_lines;
-	uint16_t prev_gain;
-	uint16_t prev_line;
-
-	uint32_t fps_divider;
-	enum msm_sensor_resolution_t curr_res;
-	enum msm_sensor_cam_mode_t cam_mode;
-
-	struct mutex *msm_sensor_mutex;
-	struct msm_camera_csi2_params *curr_csi_params;
-	struct msm_camera_csi2_params **csi_params;
-	struct msm_camera_csi_params **csic_params;
-	struct msm_camera_csi_params *curr_csic_params;
-
-	struct v4l2_subdev sensor_v4l2_subdev;
-	struct v4l2_subdev_info *sensor_v4l2_subdev_info;
-	uint8_t sensor_v4l2_subdev_info_size;
-	struct v4l2_subdev_ops *sensor_v4l2_subdev_ops;
-	struct msm_sensor_fn_t *func_tbl;
-	struct regulator **reg_ptr;
-	struct clk *cam_clk;
-	long clk_rate;
-	int mirror_flip;	
-	struct mutex *sensor_first_mutex;  
-};
-
-void msm_sensor_start_stream(struct msm_sensor_ctrl_t *s_ctrl);
-void msm_sensor_stop_stream(struct msm_sensor_ctrl_t *s_ctrl);
-void msm_sensor_group_hold_on(struct msm_sensor_ctrl_t *s_ctrl);
-void msm_sensor_group_hold_off(struct msm_sensor_ctrl_t *s_ctrl);
-
-int32_t msm_sensor_set_fps(struct msm_sensor_ctrl_t *s_ctrl,
-			struct fps_cfg   *fps);
-int32_t msm_sensor_write_exp_gain1(struct msm_sensor_ctrl_t *s_ctrl,
-		uint16_t gain, uint32_t line);
-int32_t msm_sensor_write_exp_gain2(struct msm_sensor_ctrl_t *s_ctrl,
-		uint16_t gain, uint32_t line);
-int32_t msm_sensor_write_exp_gain1_ex(struct msm_sensor_ctrl_t *s_ctrl,
-		int mode, uint16_t gain, uint16_t dig_gain, uint32_t line);
-int32_t msm_sensor_write_exp_gain2_ex(struct msm_sensor_ctrl_t *s_ctrl,
-		int mode, uint16_t gain, uint16_t dig_gain, uint32_t line);
-int32_t msm_sensor_write_exp_gain_ov (struct msm_sensor_ctrl_t *s_ctrl,
-		int mode, uint16_t gain, uint16_t dig_gain, uint32_t line); 
-int32_t msm_sensor_set_sensor_mode(struct msm_sensor_ctrl_t *s_ctrl,
-	int mode, int res);
-int32_t msm_sensor_mode_init(struct msm_sensor_ctrl_t *s_ctrl,
-			int mode, struct sensor_init_cfg *init_info);
-int32_t msm_sensor_get_output_info(struct msm_sensor_ctrl_t *,
-		struct sensor_output_info_t *);
-int32_t msm_sensor_config(struct msm_sensor_ctrl_t *s_ctrl,
-			void __user *argp);
-
-int32_t msm_sensor_power_up(struct msm_sensor_ctrl_t *s_ctrl);
-int32_t msm_sensor_power_down(struct msm_sensor_ctrl_t *s_ctrl);
-#if 1	
-int32_t msm_sensor_set_power_up(struct msm_sensor_ctrl_t *s_ctrl);
-int32_t msm_sensor_set_power_down(struct msm_sensor_ctrl_t *s_ctrl);
-
-int32_t msm_sensor_match_id(struct msm_sensor_ctrl_t *s_ctrl);
-int msm_sensor_i2c_probe(struct i2c_client *client,
-	const struct i2c_device_id *id);
-int32_t msm_sensor_release(struct msm_sensor_ctrl_t *s_ctrl);
-int32_t msm_sensor_open_init(struct msm_sensor_ctrl_t *s_ctrl,
-				const struct msm_camera_sensor_info *data);
-int msm_sensor_probe(struct msm_sensor_ctrl_t *s_ctrl,
-		const struct msm_camera_sensor_info *info,
-		struct msm_sensor_ctrl *s);
-
-int msm_sensor_v4l2_probe(struct msm_sensor_ctrl_t *s_ctrl,
-	const struct msm_camera_sensor_info *info,
-	struct v4l2_subdev *sdev, struct msm_sensor_ctrl *s);
-
-#endif	
-
-int32_t msm_sensor_match_id(struct msm_sensor_ctrl_t *s_ctrl);
-int msm_sensor_i2c_probe(struct i2c_client *client,
-	const struct i2c_device_id *id);
-int32_t msm_sensor_power(struct v4l2_subdev *sd, int on);
-
-int32_t msm_sensor_v4l2_s_ctrl(struct v4l2_subdev *sd,
-	struct v4l2_control *ctrl);
-
-int32_t msm_sensor_v4l2_query_ctrl(
-	struct v4l2_subdev *sd, struct v4l2_queryctrl *qctrl);
-
-int msm_sensor_s_ctrl_by_index(struct msm_sensor_ctrl_t *s_ctrl,
-	struct msm_sensor_v4l2_ctrl_info_t *ctrl_info, int value);
-
-int msm_sensor_s_ctrl_by_enum(struct msm_sensor_ctrl_t *s_ctrl,
-		struct msm_sensor_v4l2_ctrl_info_t *ctrl_info, int value);
-
-int msm_sensor_v4l2_enum_fmt(struct v4l2_subdev *sd, unsigned int index,
-			enum v4l2_mbus_pixelcode *code);
-
-int msm_sensor_write_init_settings(struct msm_sensor_ctrl_t *s_ctrl);
-int msm_sensor_write_res_settings
-	(struct msm_sensor_ctrl_t *s_ctrl, uint16_t res);
-
-int32_t msm_sensor_write_output_settings(struct msm_sensor_ctrl_t *s_ctrl,
-	uint16_t res);
-
-int32_t msm_sensor_setting(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res);
-
-int32_t msm_sensor_setting_parallel(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res);
-int32_t msm_sensor_setting_parallel_ov(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res);
-
-int32_t msm_sensor_setting_ov(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res);
-
-int32_t msm_sensor_setting1(struct msm_sensor_ctrl_t *s_ctrl,
-			int update_type, int res);
-
-int msm_sensor_enable_debugfs(struct msm_sensor_ctrl_t *s_ctrl);
-
-long msm_sensor_subdev_ioctl(struct v4l2_subdev *sd,
-			unsigned int cmd, void *arg);
-
-struct msm_sensor_ctrl_t *get_sctrl(struct v4l2_subdev *sd);
-
-#if (defined CONFIG_WEBCAM_OV7692_QRD || defined CONFIG_OV5647)
-	extern int lcd_camera_power_onoff(int on);
-#endif
-int32_t msm_sensor_adjust_frame_lines(struct msm_sensor_ctrl_t *s_ctrl,
-	uint16_t res);
-
-
-#define VIDIOC_MSM_SENSOR_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 10, void __user *)
-
-#define VIDIOC_MSM_SENSOR_RELEASE \
-	_IO('V', BASE_VIDIOC_PRIVATE + 11)
-
-#endif
diff --git a/drivers/media/video/msm/sensors/mt9v113.h b/drivers/media/video/msm/sensors/mt9v113.h
deleted file mode 100644
index 925d87a..0000000
--- a/drivers/media/video/msm/sensors/mt9v113.h
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * HTC Corporation Proprietary Rights Acknowledgment
- *
- * Copyright (C) 2008 HTC Corporation
- *
- * All Rights Reserved.
- *
- * The information contained in this work is the exclusive property
- * of HTC Corporation("HTC").  Only the user who is legally authorized
- * by HTC ("Authorized User") has right to employ this work within the
- * scope of this statement.  Nevertheless, the Authorized User shall not
- * use this work for any purpose other than the purpose agreed by HTC.
- * Any and all addition or modification to this work shall be  unconditionally
- * granted back to HTC and such addition or modification shall be solely
- * owned by HTC.  No right is granted under this statement, including but not
- * limited to, distribution, reproduction, and transmission, except as
- * otherwise provided in this statement.  Any other usage of this work shall
- *  be subject to the further written consent of HTC.
- */
-
-
-
-#ifndef MT9V113_H
-#define MT9V113_H
-
-#include <linux/types.h>
-#include <mach/camera.h>
-
-extern struct mt9v113_reg mt9v113_regs;
-
-enum mt9v113_width {
-	WORD_LEN,
-	BYTE_LEN
-};
-
-struct mt9v113_i2c_reg_conf {
-	unsigned short waddr;
-	unsigned short wdata;
-	enum mt9v113_width width;
-	unsigned short mdelay_time;
-};
-
-struct mt9v113_reg {
-	struct mt9v113_i2c_reg_conf *power_up_tbl;
-	uint16_t power_up_tbl_size;
-	struct mt9v113_i2c_reg_conf *register_init_1;
-	uint16_t register_init_size_1;
-	struct mt9v113_i2c_reg_conf *register_init_2;
-	uint16_t register_init_size_2;
-	struct mt9v113_i2c_reg_conf *contract_tb0;
-	uint16_t contract_tb0_size;
-	struct mt9v113_i2c_reg_conf *contract_tb1;
-	uint16_t contract_tb1_size;
-	struct mt9v113_i2c_reg_conf *contract_tb2;
-	uint16_t contract_tb2_size;
-	struct mt9v113_i2c_reg_conf *contract_tb3;
-	uint16_t contract_tb3_size;
-	struct mt9v113_i2c_reg_conf *contract_tb4;
-	uint16_t contract_tb4_size;
-	struct mt9v113_i2c_reg_conf *wb_auto;
-	uint16_t wb_auto_size;
-	struct mt9v113_i2c_reg_conf *wb_fluorescent;
-	uint16_t wb_fluorescent_size;
-	struct mt9v113_i2c_reg_conf *wb_incandescent;
-	uint16_t wb_incandescent_size;
-	struct mt9v113_i2c_reg_conf *wb_daylight;
-	uint16_t wb_daylight_size;
-	struct mt9v113_i2c_reg_conf *wb_cloudy;
-	uint16_t wb_cloudy_size;
-};
-
-enum mt9v113_test_mode_t {
-	TEST_OFF,
-	TEST_1,
-	TEST_2,
-	TEST_3
-};
-
-enum mt9v113_resolution_t {
-	QTR_SIZE,
-	FULL_SIZE,
-	INVALID_SIZE
-};
-
-#endif 
diff --git a/drivers/media/video/msm/sensors/mt9v113_reg_lens_9251.c b/drivers/media/video/msm/sensors/mt9v113_reg_lens_9251.c
deleted file mode 100644
index 8df6454..0000000
--- a/drivers/media/video/msm/sensors/mt9v113_reg_lens_9251.c
+++ /dev/null
@@ -1,1046 +0,0 @@
-/*
- * HTC Corporation Proprietary Rights Acknowledgment
- *
- * Copyright (C) 2008 HTC Corporation
- *
- * All Rights Reserved.
- *
- * The information contained in this work is the exclusive property
- * of HTC Corporation("HTC").  Only the user who is legally authorized
- * by HTC ("Authorized User") has right to employ this work within the
- * scope of this statement.  Nevertheless, the Authorized User shall not
- * use this work for any purpose other than the purpose agreed by HTC.
- * Any and all addition or modification to this work shall be  unconditionally
- * granted back to HTC and such addition or modification shall be solely
- * owned by HTC.  No right is granted under this statement, including but not
- * limited to, distribution, reproduction, and transmission, except as
- * otherwise provided in this statement.  Any other usage of this work shall
- *  be subject to the further written consent of HTC.
- */
-
-
-
-#include "mt9v113.h"
-
-#if 0
-static const struct mt9v113_i2c_reg_conf const pll_setup_tbl[] = {
-	{0x3E, 0xD0, WORD_LEN, 5},
-	{0x3E, 0xD0, WORD_LEN, 5},
-	{0x12, 0x80, WORD_LEN, 5}
-};
-#endif
-
-static struct mt9v113_i2c_reg_conf wb_auto[] = {
-	{0x098C, 0x2306, WORD_LEN, 0},
-	{0x0990, 0x03C0, WORD_LEN, 0},
-	{0x098C, 0x2308, WORD_LEN, 0},
-	{0x0990, 0xFD7C, WORD_LEN, 0},
-	{0x098C, 0x230A, WORD_LEN, 0},
-	{0x0990, 0xFFF7, WORD_LEN, 0},
-	{0x098C, 0x230C, WORD_LEN, 0},
-	{0x0990, 0xFF25, WORD_LEN, 0},
-	{0x098C, 0x230E, WORD_LEN, 0},
-	{0x0990, 0x0384, WORD_LEN, 0},
-	{0x098C, 0x2310, WORD_LEN, 0},
-	{0x0990, 0xFFD6, WORD_LEN, 0},
-	{0x098C, 0x2312, WORD_LEN, 0},
-	{0x0990, 0xFED2, WORD_LEN, 0},
-	{0x098C, 0x2314, WORD_LEN, 0},
-	{0x0990, 0xFCB2, WORD_LEN, 0},
-	{0x098C, 0x2316, WORD_LEN, 0},
-	{0x0990, 0x068E, WORD_LEN, 0},
-	{0x098C, 0x2318, WORD_LEN, 0},
-	{0x0990, 0x001B, WORD_LEN, 0},
-	{0x098C, 0x231A, WORD_LEN, 0},
-	{0x0990, 0x0039, WORD_LEN, 0},
-	{0x098C, 0x231C, WORD_LEN, 0},
-	{0x0990, 0xFF65, WORD_LEN, 0},
-	{0x098C, 0x231E, WORD_LEN, 0},
-	{0x0990, 0x0052, WORD_LEN, 0},
-	{0x098C, 0x2320, WORD_LEN, 0},
-	{0x0990, 0x0012, WORD_LEN, 0},
-	{0x098C, 0x2322, WORD_LEN, 0},
-	{0x0990, 0x0007, WORD_LEN, 0},
-	{0x098C, 0x2324, WORD_LEN, 0},
-	{0x0990, 0xFFCF, WORD_LEN, 0},
-	{0x098C, 0x2326, WORD_LEN, 0},
-	{0x0990, 0x0037, WORD_LEN, 0},
-	{0x098C, 0x2328, WORD_LEN, 0},
-	{0x0990, 0x00DB, WORD_LEN, 0},
-	{0x098C, 0x232A, WORD_LEN, 0},
-	{0x0990, 0x01C8, WORD_LEN, 0},
-	{0x098C, 0x232C, WORD_LEN, 0},
-	{0x0990, 0xFC9F, WORD_LEN, 0},
-	{0x098C, 0x232E, WORD_LEN, 0},
-	{0x0990, 0x0010, WORD_LEN, 0},
-	{0x098C, 0x2330, WORD_LEN, 0},
-	{0x0990, 0xFFF3, WORD_LEN, 0},
-	
-	{0x098C, 0xA34A, WORD_LEN, 0},
-	{0x0990, 0x0059, WORD_LEN, 0},
-	{0x098C, 0xA34B, WORD_LEN, 0},
-	{0x0990, 0x00E6, WORD_LEN, 0},
-	{0x098C, 0xA34C, WORD_LEN, 0},
-	{0x0990, 0x0059, WORD_LEN, 0},
-	{0x098C, 0xA34D, WORD_LEN, 0},
-	{0x0990, 0x00E6, WORD_LEN, 0},
-	{0x098C, 0xA351, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xA352, WORD_LEN, 0},
-	{0x0990, 0x007F, WORD_LEN, 0},
-};
-
-static struct mt9v113_i2c_reg_conf wb_fluorescent[] = {
-	{0x098C, 0xA353, WORD_LEN, 0},
-	{0x0990, 0x0043, WORD_LEN, 0},
-	{0x098C, 0xA34E, WORD_LEN, 0},
-	{0x0990, 0x00A0, WORD_LEN, 0},
-	{0x098C, 0xA34F, WORD_LEN, 0},
-	{0x0990, 0x0086, WORD_LEN, 0},
-	{0x098C, 0xA350, WORD_LEN, 0},
-	{0x0990, 0x008A, WORD_LEN, 0}
-};
-
-static struct mt9v113_i2c_reg_conf wb_incandescent[] = {
-	{0x098C, 0xA353, WORD_LEN, 0},
-	{0x0990, 0x000B, WORD_LEN, 0},
-	{0x098C, 0xA34E, WORD_LEN, 0},
-	{0x0990, 0x0090, WORD_LEN, 0},
-	{0x098C, 0xA34F, WORD_LEN, 0},
-	{0x0990, 0x0085, WORD_LEN, 0},
-	{0x098C, 0xA350, WORD_LEN, 0},
-	{0x0990, 0x00A0, WORD_LEN, 0}
-};
-
-static struct mt9v113_i2c_reg_conf wb_daylight[] = {
-	{0x098C, 0xA353, WORD_LEN, 0},
-	{0x0990, 0x007F, WORD_LEN, 0},
-	{0x098C, 0xA34E, WORD_LEN, 0},
-	{0x0990, 0x00A2, WORD_LEN, 0},
-	{0x098C, 0xA34F, WORD_LEN, 0},
-	{0x0990, 0x0085, WORD_LEN, 0},
-	{0x098C, 0xA350, WORD_LEN, 0},
-	{0x0990, 0x0080, WORD_LEN, 0}
-};
-
-static struct mt9v113_i2c_reg_conf wb_cloudy[] = {
-	{0x098C, 0xA353, WORD_LEN, 0},
-	{0x0990, 0x007F, WORD_LEN, 0},
-	{0x098C, 0xA34E, WORD_LEN, 0},
-	{0x0990, 0x00B2, WORD_LEN, 0},
-	{0x098C, 0xA34F, WORD_LEN, 0},
-	{0x0990, 0x0095, WORD_LEN, 0},
-	{0x098C, 0xA350, WORD_LEN, 0},
-	{0x0990, 0x0060, WORD_LEN, 0}
-};
-
-
-static struct mt9v113_i2c_reg_conf contract_setup_tb0[] = {
-#if 0
-	{0x098C, 0xAB3C, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xAB3D, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0xAB3E, WORD_LEN, 0},
-	{0x0990, 0x000E, WORD_LEN, 0},
-	{0x098C, 0xAB3F, WORD_LEN, 0},
-	{0x0990, 0x0029, WORD_LEN, 0},
-	{0x098C, 0xAB40, WORD_LEN, 0},
-	{0x0990, 0x0050, WORD_LEN, 0},
-	{0x098C, 0xAB41, WORD_LEN, 0},
-	{0x0990, 0x006A, WORD_LEN, 0},
-	{0x098C, 0xAB42, WORD_LEN, 0},
-	{0x0990, 0x0081, WORD_LEN, 0},
-	{0x098C, 0xAB43, WORD_LEN, 0},
-	{0x0990, 0x0094, WORD_LEN, 0},
-	{0x098C, 0xAB44, WORD_LEN, 0},
-	{0x0990, 0x00A5, WORD_LEN, 0},
-	{0x098C, 0xAB45, WORD_LEN, 0},
-	{0x0990, 0x00B2, WORD_LEN, 0},
-	{0x098C, 0xAB46, WORD_LEN, 0},
-	{0x0990, 0x00BE, WORD_LEN, 0},
-	{0x098C, 0xAB47, WORD_LEN, 0},
-	{0x0990, 0x00C9, WORD_LEN, 0},
-	{0x098C, 0xAB48, WORD_LEN, 0},
-	{0x0990, 0x00D3, WORD_LEN, 0},
-	{0x098C, 0xAB49, WORD_LEN, 0},
-	{0x0990, 0x00DC, WORD_LEN, 0},
-	{0x098C, 0xAB4A, WORD_LEN, 0},
-	{0x0990, 0x00E4, WORD_LEN, 0},
-	{0x098C, 0xAB4B, WORD_LEN, 0},
-	{0x0990, 0x00EB, WORD_LEN, 0},
-	{0x098C, 0xAB4C, WORD_LEN, 0},
-	{0x0990, 0x00F2, WORD_LEN, 0},
-	{0x098C, 0xAB4D, WORD_LEN, 0},
-	{0x0990, 0x00F9, WORD_LEN, 0},
-	{0x098C, 0xAB4E, WORD_LEN, 0},
-	{0x0990, 0x00FF, WORD_LEN, 0},
-#endif
-{0x098C, 0xAB3C, WORD_LEN, 0},
-{0x0990, 0x0000, WORD_LEN, 0},
-{0x098C, 0xAB3D, WORD_LEN, 0},
-{0x0990, 0x0023, WORD_LEN, 0},
-{0x098C, 0xAB3E, WORD_LEN, 0},
-{0x0990, 0x0045, WORD_LEN, 0},
-{0x098C, 0xAB3F, WORD_LEN, 0},
-{0x0990, 0x0064, WORD_LEN, 0},
-{0x098C, 0xAB40, WORD_LEN, 0},
-{0x0990, 0x0080, WORD_LEN, 0},
-{0x098C, 0xAB41, WORD_LEN, 0},
-{0x0990, 0x0099, WORD_LEN, 0},
-{0x098C, 0xAB42, WORD_LEN, 0},
-{0x0990, 0x00B0, WORD_LEN, 0},
-{0x098C, 0xAB43, WORD_LEN, 0},
-{0x0990, 0x00C1, WORD_LEN, 0},
-{0x098C, 0xAB44, WORD_LEN, 0},
-{0x0990, 0x00CF, WORD_LEN, 0},
-{0x098C, 0xAB45, WORD_LEN, 0},
-{0x0990, 0x00D9, WORD_LEN, 0},
-{0x098C, 0xAB46, WORD_LEN, 0},
-{0x0990, 0x00E1, WORD_LEN, 0},
-{0x098C, 0xAB47, WORD_LEN, 0},
-{0x0990, 0x00E8, WORD_LEN, 0},
-{0x098C, 0xAB48, WORD_LEN, 0},
-{0x0990, 0x00EE, WORD_LEN, 0},
-{0x098C, 0xAB49, WORD_LEN, 0},
-{0x0990, 0x00F2, WORD_LEN, 0},
-{0x098C, 0xAB4A, WORD_LEN, 0},
-{0x0990, 0x00F6, WORD_LEN, 0},
-{0x098C, 0xAB4B, WORD_LEN, 0},
-{0x0990, 0x00F9, WORD_LEN, 0},
-{0x098C, 0xAB4C, WORD_LEN, 0},
-{0x0990, 0x00FB, WORD_LEN, 0},
-{0x098C, 0xAB4D, WORD_LEN, 0},
-{0x0990, 0x00FD, WORD_LEN, 0},
-{0x098C, 0xAB4E, WORD_LEN, 0},
-{0x0990, 0x00FF, WORD_LEN, 0}
-
-};
-
-static struct mt9v113_i2c_reg_conf contract_setup_tb1[] = {
-#if 0
-	{0x098C, 0xAB3C, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xAB3D, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0xAB3E, WORD_LEN, 0},
-	{0x0990, 0x000E, WORD_LEN, 0},
-	{0x098C, 0xAB3F, WORD_LEN, 0},
-	{0x0990, 0x0029, WORD_LEN, 0},
-	{0x098C, 0xAB40, WORD_LEN, 0},
-	{0x0990, 0x0050, WORD_LEN, 0},
-	{0x098C, 0xAB41, WORD_LEN, 0},
-	{0x0990, 0x006A, WORD_LEN, 0},
-	{0x098C, 0xAB42, WORD_LEN, 0},
-	{0x0990, 0x0081, WORD_LEN, 0},
-	{0x098C, 0xAB43, WORD_LEN, 0},
-	{0x0990, 0x0094, WORD_LEN, 0},
-	{0x098C, 0xAB44, WORD_LEN, 0},
-	{0x0990, 0x00A5, WORD_LEN, 0},
-	{0x098C, 0xAB45, WORD_LEN, 0},
-	{0x0990, 0x00B2, WORD_LEN, 0},
-	{0x098C, 0xAB46, WORD_LEN, 0},
-	{0x0990, 0x00BE, WORD_LEN, 0},
-	{0x098C, 0xAB47, WORD_LEN, 0},
-	{0x0990, 0x00C9, WORD_LEN, 0},
-	{0x098C, 0xAB48, WORD_LEN, 0},
-	{0x0990, 0x00D3, WORD_LEN, 0},
-	{0x098C, 0xAB49, WORD_LEN, 0},
-	{0x0990, 0x00DC, WORD_LEN, 0},
-	{0x098C, 0xAB4A, WORD_LEN, 0},
-	{0x0990, 0x00E4, WORD_LEN, 0},
-	{0x098C, 0xAB4B, WORD_LEN, 0},
-	{0x0990, 0x00EB, WORD_LEN, 0},
-	{0x098C, 0xAB4C, WORD_LEN, 0},
-	{0x0990, 0x00F2, WORD_LEN, 0},
-	{0x098C, 0xAB4D, WORD_LEN, 0},
-	{0x0990, 0x00F9, WORD_LEN, 0},
-	{0x098C, 0xAB4E, WORD_LEN, 0},
-	{0x0990, 0x00FF, WORD_LEN, 0},
-#endif
-{0x098C, 0xAB3C, WORD_LEN, 0},
-{0x0990, 0x0000, WORD_LEN, 0},
-{0x098C, 0xAB3D, WORD_LEN, 0},
-{0x0990, 0x001B, WORD_LEN, 0},
-{0x098C, 0xAB3E, WORD_LEN, 0},
-{0x0990, 0x002E, WORD_LEN, 0},
-{0x098C, 0xAB3F, WORD_LEN, 0},
-{0x0990, 0x004C, WORD_LEN, 0},
-{0x098C, 0xAB40, WORD_LEN, 0},
-{0x0990, 0x0078, WORD_LEN, 0},
-{0x098C, 0xAB41, WORD_LEN, 0},
-{0x0990, 0x0098, WORD_LEN, 0},
-{0x098C, 0xAB42, WORD_LEN, 0},
-{0x0990, 0x00B0, WORD_LEN, 0},
-{0x098C, 0xAB43, WORD_LEN, 0},
-{0x0990, 0x00C1, WORD_LEN, 0},
-{0x098C, 0xAB44, WORD_LEN, 0},
-{0x0990, 0x00CF, WORD_LEN, 0},
-{0x098C, 0xAB45, WORD_LEN, 0},
-{0x0990, 0x00D9, WORD_LEN, 0},
-{0x098C, 0xAB46, WORD_LEN, 0},
-{0x0990, 0x00E1, WORD_LEN, 0},
-{0x098C, 0xAB47, WORD_LEN, 0},
-{0x0990, 0x00E8, WORD_LEN, 0},
-{0x098C, 0xAB48, WORD_LEN, 0},
-{0x0990, 0x00EE, WORD_LEN, 0},
-{0x098C, 0xAB49, WORD_LEN, 0},
-{0x0990, 0x00F2, WORD_LEN, 0},
-{0x098C, 0xAB4A, WORD_LEN, 0},
-{0x0990, 0x00F6, WORD_LEN, 0},
-{0x098C, 0xAB4B, WORD_LEN, 0},
-{0x0990, 0x00F9, WORD_LEN, 0},
-{0x098C, 0xAB4C, WORD_LEN, 0},
-{0x0990, 0x00FB, WORD_LEN, 0},
-{0x098C, 0xAB4D, WORD_LEN, 0},
-{0x0990, 0x00FD, WORD_LEN, 0},
-{0x098C, 0xAB4E, WORD_LEN, 0},
-{0x0990, 0x00FF, WORD_LEN, 0}
-
-};
-
-static struct mt9v113_i2c_reg_conf contract_setup_tb2[] = {
-#if 0
-	{0x098C, 0xAB3C, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xAB3D, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0xAB3E, WORD_LEN, 0},
-	{0x0990, 0x000E, WORD_LEN, 0},
-	{0x098C, 0xAB3F, WORD_LEN, 0},
-	{0x0990, 0x0029, WORD_LEN, 0},
-	{0x098C, 0xAB40, WORD_LEN, 0},
-	{0x0990, 0x0050, WORD_LEN, 0},
-	{0x098C, 0xAB41, WORD_LEN, 0},
-	{0x0990, 0x006A, WORD_LEN, 0},
-	{0x098C, 0xAB42, WORD_LEN, 0},
-	{0x0990, 0x0081, WORD_LEN, 0},
-	{0x098C, 0xAB43, WORD_LEN, 0},
-	{0x0990, 0x0094, WORD_LEN, 0},
-	{0x098C, 0xAB44, WORD_LEN, 0},
-	{0x0990, 0x00A5, WORD_LEN, 0},
-	{0x098C, 0xAB45, WORD_LEN, 0},
-	{0x0990, 0x00B2, WORD_LEN, 0},
-	{0x098C, 0xAB46, WORD_LEN, 0},
-	{0x0990, 0x00BE, WORD_LEN, 0},
-	{0x098C, 0xAB47, WORD_LEN, 0},
-	{0x0990, 0x00C9, WORD_LEN, 0},
-	{0x098C, 0xAB48, WORD_LEN, 0},
-	{0x0990, 0x00D3, WORD_LEN, 0},
-	{0x098C, 0xAB49, WORD_LEN, 0},
-	{0x0990, 0x00DC, WORD_LEN, 0},
-	{0x098C, 0xAB4A, WORD_LEN, 0},
-	{0x0990, 0x00E4, WORD_LEN, 0},
-	{0x098C, 0xAB4B, WORD_LEN, 0},
-	{0x0990, 0x00EB, WORD_LEN, 0},
-	{0x098C, 0xAB4C, WORD_LEN, 0},
-	{0x0990, 0x00F2, WORD_LEN, 0},
-	{0x098C, 0xAB4D, WORD_LEN, 0},
-	{0x0990, 0x00F9, WORD_LEN, 0},
-	{0x098C, 0xAB4E, WORD_LEN, 0},
-	{0x0990, 0x00FF, WORD_LEN, 0},
-#endif
-{0x098C, 0xAB3C, WORD_LEN, 0},
-{0x0990, 0x0000, WORD_LEN, 0},
-{0x098C, 0xAB3D, WORD_LEN, 0},
-{0x0990, 0x0014, WORD_LEN, 0},
-{0x098C, 0xAB3E, WORD_LEN, 0},
-{0x0990, 0x0027, WORD_LEN, 0},
-{0x098C, 0xAB3F, WORD_LEN, 0},
-{0x0990, 0x0041, WORD_LEN, 0},
-{0x098C, 0xAB40, WORD_LEN, 0},
-{0x0990, 0x0074, WORD_LEN, 0},
-{0x098C, 0xAB41, WORD_LEN, 0},
-{0x0990, 0x0093, WORD_LEN, 0},
-{0x098C, 0xAB42, WORD_LEN, 0},
-{0x0990, 0x00AD, WORD_LEN, 0},
-{0x098C, 0xAB43, WORD_LEN, 0},
-{0x0990, 0x00C1, WORD_LEN, 0},
-{0x098C, 0xAB44, WORD_LEN, 0},
-{0x0990, 0x00CA, WORD_LEN, 0},
-{0x098C, 0xAB45, WORD_LEN, 0},
-{0x0990, 0x00D4, WORD_LEN, 0},
-{0x098C, 0xAB46, WORD_LEN, 0},
-{0x0990, 0x00DC, WORD_LEN, 0},
-{0x098C, 0xAB47, WORD_LEN, 0},
-{0x0990, 0x00E4, WORD_LEN, 0},
-{0x098C, 0xAB48, WORD_LEN, 0},
-{0x0990, 0x00E9, WORD_LEN, 0},
-{0x098C, 0xAB49, WORD_LEN, 0},
-{0x0990, 0x00EE, WORD_LEN, 0},
-{0x098C, 0xAB4A, WORD_LEN, 0},
-{0x0990, 0x00F2, WORD_LEN, 0},
-{0x098C, 0xAB4B, WORD_LEN, 0},
-{0x0990, 0x00F5, WORD_LEN, 0},
-{0x098C, 0xAB4C, WORD_LEN, 0},
-{0x0990, 0x00F8, WORD_LEN, 0},
-{0x098C, 0xAB4D, WORD_LEN, 0},
-{0x0990, 0x00FD, WORD_LEN, 0},
-{0x098C, 0xAB4E, WORD_LEN, 0},
-{0x0990, 0x00FF, WORD_LEN, 0}
-
-};
-
-static struct mt9v113_i2c_reg_conf contract_setup_tb3[] = {
-#if 0
-	{0x098C, 0xAB3C, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xAB3D, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0xAB3E, WORD_LEN, 0},
-	{0x0990, 0x000E, WORD_LEN, 0},
-	{0x098C, 0xAB3F, WORD_LEN, 0},
-	{0x0990, 0x0029, WORD_LEN, 0},
-	{0x098C, 0xAB40, WORD_LEN, 0},
-	{0x0990, 0x0050, WORD_LEN, 0},
-	{0x098C, 0xAB41, WORD_LEN, 0},
-	{0x0990, 0x006A, WORD_LEN, 0},
-	{0x098C, 0xAB42, WORD_LEN, 0},
-	{0x0990, 0x0081, WORD_LEN, 0},
-	{0x098C, 0xAB43, WORD_LEN, 0},
-	{0x0990, 0x0094, WORD_LEN, 0},
-	{0x098C, 0xAB44, WORD_LEN, 0},
-	{0x0990, 0x00A5, WORD_LEN, 0},
-	{0x098C, 0xAB45, WORD_LEN, 0},
-	{0x0990, 0x00B2, WORD_LEN, 0},
-	{0x098C, 0xAB46, WORD_LEN, 0},
-	{0x0990, 0x00BE, WORD_LEN, 0},
-	{0x098C, 0xAB47, WORD_LEN, 0},
-	{0x0990, 0x00C9, WORD_LEN, 0},
-	{0x098C, 0xAB48, WORD_LEN, 0},
-	{0x0990, 0x00D3, WORD_LEN, 0},
-	{0x098C, 0xAB49, WORD_LEN, 0},
-	{0x0990, 0x00DC, WORD_LEN, 0},
-	{0x098C, 0xAB4A, WORD_LEN, 0},
-	{0x0990, 0x00E4, WORD_LEN, 0},
-	{0x098C, 0xAB4B, WORD_LEN, 0},
-	{0x0990, 0x00EB, WORD_LEN, 0},
-	{0x098C, 0xAB4C, WORD_LEN, 0},
-	{0x0990, 0x00F2, WORD_LEN, 0},
-	{0x098C, 0xAB4D, WORD_LEN, 0},
-	{0x0990, 0x00F9, WORD_LEN, 0},
-	{0x098C, 0xAB4E, WORD_LEN, 0},
-	{0x0990, 0x00FF, WORD_LEN, 0},
-#endif
-{0x098C, 0xAB3C, WORD_LEN, 0},
-{0x0990, 0x0000, WORD_LEN, 0},
-{0x098C, 0xAB3D, WORD_LEN, 0},
-{0x0990, 0x0008, WORD_LEN, 0},
-{0x098C, 0xAB3E, WORD_LEN, 0},
-{0x0990, 0x0017, WORD_LEN, 0},
-{0x098C, 0xAB3F, WORD_LEN, 0},
-{0x0990, 0x002F, WORD_LEN, 0},
-{0x098C, 0xAB40, WORD_LEN, 0},
-{0x0990, 0x0050, WORD_LEN, 0},
-{0x098C, 0xAB41, WORD_LEN, 0},
-{0x0990, 0x006D, WORD_LEN, 0},
-{0x098C, 0xAB42, WORD_LEN, 0},
-{0x0990, 0x0088, WORD_LEN, 0},
-{0x098C, 0xAB43, WORD_LEN, 0},
-{0x0990, 0x009E, WORD_LEN, 0},
-{0x098C, 0xAB44, WORD_LEN, 0},
-{0x0990, 0x00AF, WORD_LEN, 0},
-{0x098C, 0xAB45, WORD_LEN, 0},
-{0x0990, 0x00BD, WORD_LEN, 0},
-{0x098C, 0xAB46, WORD_LEN, 0},
-{0x0990, 0x00C9, WORD_LEN, 0},
-{0x098C, 0xAB47, WORD_LEN, 0},
-{0x0990, 0x00D3, WORD_LEN, 0},
-{0x098C, 0xAB48, WORD_LEN, 0},
-{0x0990, 0x00DB, WORD_LEN, 0},
-{0x098C, 0xAB49, WORD_LEN, 0},
-{0x0990, 0x00E3, WORD_LEN, 0},
-{0x098C, 0xAB4A, WORD_LEN, 0},
-{0x0990, 0x00EA, WORD_LEN, 0},
-{0x098C, 0xAB4B, WORD_LEN, 0},
-{0x0990, 0x00F0, WORD_LEN, 0},
-{0x098C, 0xAB4C, WORD_LEN, 0},
-{0x0990, 0x00F5, WORD_LEN, 0},
-{0x098C, 0xAB4D, WORD_LEN, 0},
-{0x0990, 0x00FA, WORD_LEN, 0},
-{0x098C, 0xAB4E, WORD_LEN, 0},
-{0x0990, 0x00FF, WORD_LEN, 0}
-
-};
-
-static struct mt9v113_i2c_reg_conf contract_setup_tb4[] = {
-#if 0
-	{0x098C, 0xAB3C, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xAB3D, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0xAB3E, WORD_LEN, 0},
-	{0x0990, 0x000E, WORD_LEN, 0},
-	{0x098C, 0xAB3F, WORD_LEN, 0},
-	{0x0990, 0x0029, WORD_LEN, 0},
-	{0x098C, 0xAB40, WORD_LEN, 0},
-	{0x0990, 0x0050, WORD_LEN, 0},
-	{0x098C, 0xAB41, WORD_LEN, 0},
-	{0x0990, 0x006A, WORD_LEN, 0},
-	{0x098C, 0xAB42, WORD_LEN, 0},
-	{0x0990, 0x0081, WORD_LEN, 0},
-	{0x098C, 0xAB43, WORD_LEN, 0},
-	{0x0990, 0x0094, WORD_LEN, 0},
-	{0x098C, 0xAB44, WORD_LEN, 0},
-	{0x0990, 0x00A5, WORD_LEN, 0},
-	{0x098C, 0xAB45, WORD_LEN, 0},
-	{0x0990, 0x00B2, WORD_LEN, 0},
-	{0x098C, 0xAB46, WORD_LEN, 0},
-	{0x0990, 0x00BE, WORD_LEN, 0},
-	{0x098C, 0xAB47, WORD_LEN, 0},
-	{0x0990, 0x00C9, WORD_LEN, 0},
-	{0x098C, 0xAB48, WORD_LEN, 0},
-	{0x0990, 0x00D3, WORD_LEN, 0},
-	{0x098C, 0xAB49, WORD_LEN, 0},
-	{0x0990, 0x00DC, WORD_LEN, 0},
-	{0x098C, 0xAB4A, WORD_LEN, 0},
-	{0x0990, 0x00E4, WORD_LEN, 0},
-	{0x098C, 0xAB4B, WORD_LEN, 0},
-	{0x0990, 0x00EB, WORD_LEN, 0},
-	{0x098C, 0xAB4C, WORD_LEN, 0},
-	{0x0990, 0x00F2, WORD_LEN, 0},
-	{0x098C, 0xAB4D, WORD_LEN, 0},
-	{0x0990, 0x00F9, WORD_LEN, 0},
-	{0x098C, 0xAB4E, WORD_LEN, 0},
-	{0x0990, 0x00FF, WORD_LEN, 0},
-#endif
-{0x098C, 0xAB3C, WORD_LEN, 0},
-{0x0990, 0x0000, WORD_LEN, 0},
-{0x098C, 0xAB3D, WORD_LEN, 0},
-{0x0990, 0x0006, WORD_LEN, 0},
-{0x098C, 0xAB3E, WORD_LEN, 0},
-{0x0990, 0x0012, WORD_LEN, 0},
-{0x098C, 0xAB3F, WORD_LEN, 0},
-{0x0990, 0x0027, WORD_LEN, 0},
-{0x098C, 0xAB40, WORD_LEN, 0},
-{0x0990, 0x0048, WORD_LEN, 0},
-{0x098C, 0xAB41, WORD_LEN, 0},
-{0x0990, 0x0069, WORD_LEN, 0},
-{0x098C, 0xAB42, WORD_LEN, 0},
-{0x0990, 0x008A, WORD_LEN, 0},
-{0x098C, 0xAB43, WORD_LEN, 0},
-{0x0990, 0x00A4, WORD_LEN, 0},
-{0x098C, 0xAB44, WORD_LEN, 0},
-{0x0990, 0x00B7, WORD_LEN, 0},
-{0x098C, 0xAB45, WORD_LEN, 0},
-{0x0990, 0x00C6, WORD_LEN, 0},
-{0x098C, 0xAB46, WORD_LEN, 0},
-{0x0990, 0x00D1, WORD_LEN, 0},
-{0x098C, 0xAB47, WORD_LEN, 0},
-{0x0990, 0x00DB, WORD_LEN, 0},
-{0x098C, 0xAB48, WORD_LEN, 0},
-{0x0990, 0x00E2, WORD_LEN, 0},
-{0x098C, 0xAB49, WORD_LEN, 0},
-{0x0990, 0x00E9, WORD_LEN, 0},
-{0x098C, 0xAB4A, WORD_LEN, 0},
-{0x0990, 0x00EE, WORD_LEN, 0},
-{0x098C, 0xAB4B, WORD_LEN, 0},
-{0x0990, 0x00F3, WORD_LEN, 0},
-{0x098C, 0xAB4C, WORD_LEN, 0},
-{0x0990, 0x00F7, WORD_LEN, 0},
-{0x098C, 0xAB4D, WORD_LEN, 0},
-{0x0990, 0x00FB, WORD_LEN, 0},
-{0x098C, 0xAB4E, WORD_LEN, 0},
-{0x0990, 0x00FF, WORD_LEN, 0}
-
-};
-
-static struct mt9v113_i2c_reg_conf power_up_tbl[] = {
-	
-#ifdef CONFIG_MSM_CAMERA_8X60
-	{0x001A, 0x0011, WORD_LEN, 10},
-	{0x001A, 0x0010, WORD_LEN, 10},
-#else
-	{0x001A, 0x0011, WORD_LEN, 10},
-	{0x001A, 0x0010, WORD_LEN, 10},
-#endif
-};
-
-static struct mt9v113_i2c_reg_conf register_init_tbl[] = {
-	
-#if 0
-	
-	{0x0018, 0x4028, WORD_LEN, 0},
-	{0x001A, 0x0003, WORD_LEN, 2},
-	{0x001A, 0x0000, WORD_LEN, 2},
-	{0x0018, 0x4028, WORD_LEN, 0},
-	{0x001A, 0x0210, WORD_LEN, 0},
-	{0x001E, 0x0777, WORD_LEN, 0},
-	{0x0016, 0x42DF, WORD_LEN, 0},
-	
-	{0x0014, 0xB04B, WORD_LEN, 0},
-	{0x0014, 0xB049, WORD_LEN, 0},
-	{0x0010, 0x021C, WORD_LEN, 0},
-	{0x0012, 0x0000, WORD_LEN, 0},
-	{0x0014, 0x244B, WORD_LEN, 10},
-	{0x0014, 0x304B, WORD_LEN, 0},
-	{0x0014, 0xB04A, WORD_LEN, 0},
-#endif
-	
-	{0x098C, 0xA11D, WORD_LEN, 0}, 	
-	{0x0990, 0x0001, WORD_LEN, 0},
-	{0x098C, 0xA249, WORD_LEN, 0},
-	{0x0990, 0x0002, WORD_LEN, 0},
-	{0x098C, 0xA24F, WORD_LEN, 0}, 	
-	{0x0990, 0x0040, WORD_LEN, 0},	
-	{0x098C, 0xA24B, WORD_LEN, 0}, 	
-	{0x0990, 0x0086, WORD_LEN, 0},
-	{0x098C, 0xA24A, WORD_LEN, 0}, 	
-	{0x0990, 0x007E, WORD_LEN, 0},
-	{0x098C, 0xA207, WORD_LEN, 0},	
-	{0x0990, 0x0002, WORD_LEN, 0},
-	{0x098C, 0x2257, WORD_LEN, 0}, 
-	{0x0990, 0x3A98, WORD_LEN, 0}, 
-	
-	{0x098C, 0xAB1F, WORD_LEN, 0},
-	{0x0990, 0x00C9, WORD_LEN, 0},
-	{0x326C, 0x0900, WORD_LEN, 0},
-	{0x001E, 0x0400, WORD_LEN, 0},
-	
-	{0x098C, 0xAB22, WORD_LEN, 0},
-	{0x0990, 0x0005, WORD_LEN, 0},
-	
-	{0x098C, 0xA404, WORD_LEN, 0},
-	{0x0990, 0x0010, WORD_LEN, 0},
-	{0x098C, 0x222D, WORD_LEN, 0},
-	{0x0990, 0x008B, WORD_LEN, 0},
-	{0x098C, 0xA408, WORD_LEN, 0},
-	{0x0990, 0x0021, WORD_LEN, 0},
-	{0x098C, 0xA409, WORD_LEN, 0},
-	{0x0990, 0x0024, WORD_LEN, 0},
-	{0x098C, 0xA40A, WORD_LEN, 0},
-	{0x0990, 0x0028, WORD_LEN, 0},
-	{0x098C, 0xA40B, WORD_LEN, 0},
-	{0x0990, 0x002B, WORD_LEN, 0},
-	{0x098C, 0x2411, WORD_LEN, 0},
-	{0x0990, 0x008B, WORD_LEN, 0},
-	{0x098C, 0x2413, WORD_LEN, 0},
-	{0x0990, 0x00A6, WORD_LEN, 0},
-	{0x098C, 0x2415, WORD_LEN, 0},
-	{0x0990, 0x008B, WORD_LEN, 0},
-	{0x098C, 0x2417, WORD_LEN, 0},
-	{0x0990, 0x00A6, WORD_LEN, 0},
-	{0x098C, 0xA40D, WORD_LEN, 0},
-	{0x0990, 0x0002, WORD_LEN, 0},
-	{0x098C, 0xA40E, WORD_LEN, 0},
-	{0x0990, 0x0003, WORD_LEN, 0},
-	{0x098C, 0xA410, WORD_LEN, 0},
-	{0x0990, 0x000A, WORD_LEN, 0},
-	
-	{0x364E, 0x0330, WORD_LEN, 0},
-	{0x3650, 0x010B, WORD_LEN, 0},
-	{0x3652, 0x2312, WORD_LEN, 0},
-	{0x3654, 0xC2AF, WORD_LEN, 0},
-	{0x3656, 0x9F50, WORD_LEN, 0},
-	{0x3658, 0x0290, WORD_LEN, 0},
-	{0x365A, 0x0FEB, WORD_LEN, 0},
-	{0x365C, 0x4E52, WORD_LEN, 0},
-	{0x365E, 0xC0CF, WORD_LEN, 0},
-	{0x3660, 0xCB12, WORD_LEN, 0},
-	{0x3662, 0x02B0, WORD_LEN, 0},
-	{0x3664, 0x620C, WORD_LEN, 0},
-	{0x3666, 0x1AD2, WORD_LEN, 0},
-	{0x3668, 0xA7B0, WORD_LEN, 0},
-	{0x366A, 0xBB91, WORD_LEN, 0},
-	{0x366C, 0x0290, WORD_LEN, 0},
-	{0x366E, 0xCE2A, WORD_LEN, 0},
-	{0x3670, 0x2AD2, WORD_LEN, 0},
-	{0x3672, 0x8BAE, WORD_LEN, 0},
-	{0x3674, 0xABAF, WORD_LEN, 0},
-	{0x3676, 0xCB8D, WORD_LEN, 0},
-	{0x3678, 0xA24E, WORD_LEN, 0},
-	{0x367A, 0x2F91, WORD_LEN, 0},
-	{0x367C, 0x0991, WORD_LEN, 0},
-	{0x367E, 0xC594, WORD_LEN, 0},
-	{0x3680, 0xAC2B, WORD_LEN, 0},
-	{0x3682, 0xA4AC, WORD_LEN, 0},
-	{0x3684, 0x6891, WORD_LEN, 0},
-	{0x3686, 0xAD30, WORD_LEN, 0},
-	{0x3688, 0x9295, WORD_LEN, 0},
-	{0x368A, 0x380B, WORD_LEN, 0},
-	{0x368C, 0x464C, WORD_LEN, 0},
-	{0x368E, 0x4C2C, WORD_LEN, 0},
-	{0x3690, 0xE9AF, WORD_LEN, 0},
-	{0x3692, 0xC312, WORD_LEN, 0},
-	{0x3694, 0xA50D, WORD_LEN, 0},
-	{0x3696, 0xF6AD, WORD_LEN, 0},
-	{0x3698, 0x2E11, WORD_LEN, 0},
-	{0x369A, 0x11F0, WORD_LEN, 0},
-	{0x369C, 0xB534, WORD_LEN, 0},
-	{0x369E, 0x0573, WORD_LEN, 0},
-	{0x36A0, 0xA431, WORD_LEN, 0},
-	{0x36A2, 0x81B6, WORD_LEN, 0},
-	{0x36A4, 0x0895, WORD_LEN, 0},
-	{0x36A6, 0x5D19, WORD_LEN, 0},
-	{0x36A8, 0x17F3, WORD_LEN, 0},
-	{0x36AA, 0xF1F1, WORD_LEN, 0},
-	{0x36AC, 0x80D6, WORD_LEN, 0},
-	{0x36AE, 0x42B4, WORD_LEN, 0},
-	{0x36B0, 0x3499, WORD_LEN, 0},
-	{0x36B2, 0x55F2, WORD_LEN, 0},
-	{0x36B4, 0x9492, WORD_LEN, 0},
-	{0x36B6, 0x9456, WORD_LEN, 0},
-	{0x36B8, 0x22B5, WORD_LEN, 0},
-	{0x36BA, 0x4AB9, WORD_LEN, 0},
-	{0x36BC, 0x0093, WORD_LEN, 0},
-	{0x36BE, 0xA391, WORD_LEN, 0},
-	{0x36C0, 0x85B6, WORD_LEN, 0},
-	{0x36C2, 0x4C34, WORD_LEN, 0},
-	{0x36C4, 0x4BF9, WORD_LEN, 0},
-	{0x36C6, 0xBD0F, WORD_LEN, 0},
-	{0x36C8, 0x1DD1, WORD_LEN, 0},
-	{0x36CA, 0xEE54, WORD_LEN, 0},
-	{0x36CC, 0xAAB5, WORD_LEN, 0},
-	{0x36CE, 0x0CD7, WORD_LEN, 0},
-	{0x36D0, 0xA770, WORD_LEN, 0},
-	{0x36D2, 0x9C11, WORD_LEN, 0},
-	{0x36D4, 0xA635, WORD_LEN, 0},
-	{0x36D6, 0x1576, WORD_LEN, 0},
-	{0x36D8, 0x0058, WORD_LEN, 0},
-	{0x36DA, 0xC4F1, WORD_LEN, 0},
-	{0x36DC, 0xD3F1, WORD_LEN, 0},
-	{0x36DE, 0x5134, WORD_LEN, 0},
-	{0x36E0, 0x2696, WORD_LEN, 0},
-	{0x36E2, 0x8F19, WORD_LEN, 0},
-	{0x36E4, 0xD98F, WORD_LEN, 0},
-	{0x36E6, 0xA911, WORD_LEN, 0},
-	{0x36E8, 0xD1F4, WORD_LEN, 0},
-	{0x36EA, 0x7054, WORD_LEN, 0},
-	{0x36EC, 0x76D6, WORD_LEN, 0},
-	{0x36EE, 0x93D5, WORD_LEN, 0},
-	{0x36F0, 0x0934, WORD_LEN, 0},
-	{0x36F2, 0x63B9, WORD_LEN, 0},
-	{0x36F4, 0xC178, WORD_LEN, 0},
-	{0x36F6, 0xEA7C, WORD_LEN, 0},
-	{0x36F8, 0xA7D5, WORD_LEN, 0},
-	{0x36FA, 0x0A55, WORD_LEN, 0},
-	{0x36FC, 0x3979, WORD_LEN, 0},
-	{0x36FE, 0x8597, WORD_LEN, 0},
-	{0x3700, 0xA03C, WORD_LEN, 0},
-	{0x3702, 0xE194, WORD_LEN, 0},
-	{0x3704, 0x74F4, WORD_LEN, 0},
-	{0x3706, 0x7A19, WORD_LEN, 0},
-	{0x3708, 0xC5B6, WORD_LEN, 0},
-	{0x370A, 0xD9BC, WORD_LEN, 0},
-	{0x370C, 0x8F55, WORD_LEN, 0},
-	{0x370E, 0x6FF4, WORD_LEN, 0},
-	{0x3710, 0x01DA, WORD_LEN, 0},
-	{0x3712, 0xE317, WORD_LEN, 0},
-	{0x3714, 0xE93C, WORD_LEN, 0},
-	{0x3644, 0x0144, WORD_LEN, 0},
-	{0x3642, 0x00F0, WORD_LEN, 0},
-	
-};
-
-static struct mt9v113_i2c_reg_conf register_init_tb2[] = {
-
-	
-
-	
-	{0x098C, 0xA354, WORD_LEN, 0},
-	{0x0990, 0x0048, WORD_LEN, 0},
-	{0x098C, 0xAB20, WORD_LEN, 0},
-	{0x0990, 0x0048, WORD_LEN, 0},
-	
-	{0x098C, 0xA11F, WORD_LEN, 0},
-	{0x0990, 0x0001, WORD_LEN, 0},
-	{0x098C, 0x2306, WORD_LEN, 0},
-	{0x0990, 0x03C0, WORD_LEN, 0},
-	{0x098C, 0x2308, WORD_LEN, 0},
-	{0x0990, 0xFD7C, WORD_LEN, 0},
-	{0x098C, 0x230A, WORD_LEN, 0},
-	{0x0990, 0xFFF7, WORD_LEN, 0},
-	{0x098C, 0x230C, WORD_LEN, 0},
-	{0x0990, 0xFF25, WORD_LEN, 0},
-	{0x098C, 0x230E, WORD_LEN, 0},
-	{0x0990, 0x0384, WORD_LEN, 0},
-	{0x098C, 0x2310, WORD_LEN, 0},
-	{0x0990, 0xFFD6, WORD_LEN, 0},
-	{0x098C, 0x2312, WORD_LEN, 0},
-	{0x0990, 0xFED2, WORD_LEN, 0},
-	{0x098C, 0x2314, WORD_LEN, 0},
-	{0x0990, 0xFCB2, WORD_LEN, 0},
-	{0x098C, 0x2316, WORD_LEN, 0},
-	{0x0990, 0x068E, WORD_LEN, 0},
-	{0x098C, 0x2318, WORD_LEN, 0},
-	{0x0990, 0x001B, WORD_LEN, 0},
-	{0x098C, 0x231A, WORD_LEN, 0},
-	{0x0990, 0x0036, WORD_LEN, 0},
-	{0x098C, 0x231C, WORD_LEN, 0},
-	{0x0990, 0xFF65, WORD_LEN, 0},
-	{0x098C, 0x231E, WORD_LEN, 0},
-	{0x0990, 0x0052, WORD_LEN, 0},
-	{0x098C, 0x2320, WORD_LEN, 0},
-	{0x0990, 0x0012, WORD_LEN, 0},
-	{0x098C, 0x2322, WORD_LEN, 0},
-	{0x0990, 0x0007, WORD_LEN, 0},
-	{0x098C, 0x2324, WORD_LEN, 0},
-	{0x0990, 0xFFCF, WORD_LEN, 0},
-	{0x098C, 0x2326, WORD_LEN, 0},
-	{0x0990, 0x0037, WORD_LEN, 0},
-	{0x098C, 0x2328, WORD_LEN, 0},
-	{0x0990, 0x00D8, WORD_LEN, 0},
-	{0x098C, 0x232A, WORD_LEN, 0},
-	{0x0990, 0x01C8, WORD_LEN, 0},
-	{0x098C, 0x232C, WORD_LEN, 0},
-	{0x0990, 0xFC9F, WORD_LEN, 0},
-	{0x098C, 0x232E, WORD_LEN, 0},
-	{0x0990, 0x0010, WORD_LEN, 0},
-	{0x098C, 0x2330, WORD_LEN, 0},
-	{0x0990, 0xFFF7, WORD_LEN, 0},
-	{0x098C, 0xA348, WORD_LEN, 0},
-	{0x0990, 0x0008, WORD_LEN, 0},
-	{0x098C, 0xA349, WORD_LEN, 0},
-	{0x0990, 0x0002, WORD_LEN, 0},
-	{0x098C, 0xA34A, WORD_LEN, 0},
-	{0x0990, 0x0059, WORD_LEN, 0},
-	{0x098C, 0xA34B, WORD_LEN, 0},
-	{0x0990, 0x00E6, WORD_LEN, 0},
-	{0x098C, 0xA351, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xA352, WORD_LEN, 0},
-	{0x0990, 0x007F, WORD_LEN, 0},
-	{0x098C, 0xA355, WORD_LEN, 0},
-	{0x0990, 0x0001, WORD_LEN, 0},
-	{0x098C, 0xA35D, WORD_LEN, 0},
-	{0x0990, 0x0078, WORD_LEN, 0},
-	{0x098C, 0xA35E, WORD_LEN, 0},
-	{0x0990, 0x0086, WORD_LEN, 0},
-	{0x098C, 0xA35F, WORD_LEN, 0},
-	{0x0990, 0x007E, WORD_LEN, 0},
-	{0x098C, 0xA360, WORD_LEN, 0},
-	{0x0990, 0x0082, WORD_LEN, 0},
-	{0x098C, 0x2361, WORD_LEN, 0},
-	{0x0990, 0x0040, WORD_LEN, 0},
-	{0x098C, 0xA363, WORD_LEN, 0},
-	{0x0990, 0x00D2, WORD_LEN, 0},
-	{0x098C, 0xA364, WORD_LEN, 0},
-	{0x0990, 0x00F6, WORD_LEN, 0},
-	{0x098C, 0xA302, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xA303, WORD_LEN, 0},
-	{0x0990, 0x00EF, WORD_LEN, 0},
-	{0x098C, 0xA366, WORD_LEN, 0},
-	{0x0990, 0x00A6, WORD_LEN, 0},
-	{0x098C, 0xA367, WORD_LEN, 0},
-	{0x0990, 0x0096, WORD_LEN, 0},
-	{0x098C, 0xA368, WORD_LEN, 0},
-	{0x0990, 0x005C, WORD_LEN, 0},
-	
-#ifndef CONFIG_MSM_CAMERA_8X60
-	{0x098C, 0x2B1B, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-#endif
-	{0x098C, 0x2B28, WORD_LEN, 0},
-	{0x0990, 0x157C, WORD_LEN, 0},
-	{0x098C, 0x2B2A, WORD_LEN, 0},
-	{0x0990, 0x1B58, WORD_LEN, 0},
-	{0x098C, 0xAB37, WORD_LEN, 0},
-	{0x0990, 0x0001, WORD_LEN, 0}, 
-	{0x098C, 0x2B38, WORD_LEN, 0},
-	{0x0990, 0x157C, WORD_LEN, 0},
-	{0x098C, 0x2B3A, WORD_LEN, 0},
-	{0x0990, 0x1B58, WORD_LEN, 0},
-	
-	{0x098C, 0xAB3C, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xAB3D, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0xAB3E, WORD_LEN, 0},
-	{0x0990, 0x000E, WORD_LEN, 0},
-	{0x098C, 0xAB3F, WORD_LEN, 0},
-	{0x0990, 0x0029, WORD_LEN, 0},
-	{0x098C, 0xAB40, WORD_LEN, 0},
-	{0x0990, 0x0050, WORD_LEN, 0},
-	{0x098C, 0xAB41, WORD_LEN, 0},
-	{0x0990, 0x006A, WORD_LEN, 0},
-	{0x098C, 0xAB42, WORD_LEN, 0},
-	{0x0990, 0x0081, WORD_LEN, 0},
-	{0x098C, 0xAB43, WORD_LEN, 0},
-	{0x0990, 0x0094, WORD_LEN, 0},
-	{0x098C, 0xAB44, WORD_LEN, 0},
-	{0x0990, 0x00A5, WORD_LEN, 0},
-	{0x098C, 0xAB45, WORD_LEN, 0},
-	{0x0990, 0x00B2, WORD_LEN, 0},
-	{0x098C, 0xAB46, WORD_LEN, 0},
-	{0x0990, 0x00BE, WORD_LEN, 0},
-	{0x098C, 0xAB47, WORD_LEN, 0},
-	{0x0990, 0x00C9, WORD_LEN, 0},
-	{0x098C, 0xAB48, WORD_LEN, 0},
-	{0x0990, 0x00D3, WORD_LEN, 0},
-	{0x098C, 0xAB49, WORD_LEN, 0},
-	{0x0990, 0x00DC, WORD_LEN, 0},
-	{0x098C, 0xAB4A, WORD_LEN, 0},
-	{0x0990, 0x00E4, WORD_LEN, 0},
-	{0x098C, 0xAB4B, WORD_LEN, 0},
-	{0x0990, 0x00EB, WORD_LEN, 0},
-	{0x098C, 0xAB4C, WORD_LEN, 0},
-	{0x0990, 0x00F2, WORD_LEN, 0},
-	{0x098C, 0xAB4D, WORD_LEN, 0},
-	{0x0990, 0x00F9, WORD_LEN, 0},
-	{0x098C, 0xAB4E, WORD_LEN, 0},
-	{0x0990, 0x00FF, WORD_LEN, 0},
-	
-	{0x098C, 0xAB4F, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0xAB50, WORD_LEN, 0},
-	{0x0990, 0x000F, WORD_LEN, 0},
-	{0x098C, 0xAB51, WORD_LEN, 0},
-	{0x0990, 0x001A, WORD_LEN, 0},
-	{0x098C, 0xAB52, WORD_LEN, 0},
-	{0x0990, 0x002E, WORD_LEN, 0},
-	{0x098C, 0xAB53, WORD_LEN, 0},
-	{0x0990, 0x0050, WORD_LEN, 0},
-	{0x098C, 0xAB54, WORD_LEN, 0},
-	{0x0990, 0x006A, WORD_LEN, 0},
-	{0x098C, 0xAB55, WORD_LEN, 0},
-	{0x0990, 0x0080, WORD_LEN, 0},
-	{0x098C, 0xAB56, WORD_LEN, 0},
-	{0x0990, 0x0091, WORD_LEN, 0},
-	{0x098C, 0xAB57, WORD_LEN, 0},
-	{0x0990, 0x00A1, WORD_LEN, 0},
-	{0x098C, 0xAB58, WORD_LEN, 0},
-	{0x0990, 0x00AF, WORD_LEN, 0},
-	{0x098C, 0xAB59, WORD_LEN, 0},
-	{0x0990, 0x00BB, WORD_LEN, 0},
-	{0x098C, 0xAB5A, WORD_LEN, 0},
-	{0x0990, 0x00C6, WORD_LEN, 0},
-	{0x098C, 0xAB5B, WORD_LEN, 0},
-	{0x0990, 0x00D0, WORD_LEN, 0},
-	{0x098C, 0xAB5C, WORD_LEN, 0},
-	{0x0990, 0x00D9, WORD_LEN, 0},
-	{0x098C, 0xAB5D, WORD_LEN, 0},
-	{0x0990, 0x00E2, WORD_LEN, 0},
-	{0x098C, 0xAB5E, WORD_LEN, 0},
-	{0x0990, 0x00EA, WORD_LEN, 0},
-	{0x098C, 0xAB5F, WORD_LEN, 0},
-	{0x0990, 0x00F1, WORD_LEN, 0},
-	{0x098C, 0xAB60, WORD_LEN, 0},
-	{0x0990, 0x00F9, WORD_LEN, 0},
-	{0x098C, 0xAB61, WORD_LEN, 0},
-	{0x0990, 0x00FF, WORD_LEN, 0},
-	
-	{0x098C, 0x2703, WORD_LEN, 0},
-	{0x0990, 0x0280, WORD_LEN, 0},
-	{0x098C, 0x2705, WORD_LEN, 0},
-	{0x0990, 0x01E0, WORD_LEN, 0},
-	{0x098C, 0x270D, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0x270F, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0x2711, WORD_LEN, 0},
-	{0x0990, 0x01EB, WORD_LEN, 0},
-	{0x098C, 0x2713, WORD_LEN, 0},
-	{0x0990, 0x028B, WORD_LEN, 0},
-	{0x098C, 0x2715, WORD_LEN, 0},
-	{0x0990, 0x0001, WORD_LEN, 0},
-	{0x098C, 0x2717, WORD_LEN, 0},
-#if defined(CONFIG_MSM_CAMERA_8X60) || defined(CONFIG_MSM_CAMERA_V4L2)
-	{0x0990, 0x0025, WORD_LEN, 0},
-#else
-	{0x0990, 0x0026, WORD_LEN, 0},
-#endif
-	{0x098C, 0x2719, WORD_LEN, 0},
-	{0x0990, 0x001A, WORD_LEN, 0},
-	{0x098C, 0x271B, WORD_LEN, 0},
-	{0x0990, 0x006B, WORD_LEN, 0},
-	{0x098C, 0x271D, WORD_LEN, 0},
-	{0x0990, 0x006B, WORD_LEN, 0},
-	{0x098C, 0x271F, WORD_LEN, 0},
-	{0x0990, 0x022A, WORD_LEN, 0},
-	{0x098C, 0x2721, WORD_LEN, 0},
-	{0x0990, 0x034A, WORD_LEN, 0},
-	{0x098C, 0x2739, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0x273B, WORD_LEN, 0},
-	{0x0990, 0x027F, WORD_LEN, 0},
-	{0x098C, 0x273D, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0x273F, WORD_LEN, 0},
-	{0x0990, 0x01DF, WORD_LEN, 0},
-	{0x098C, 0x2707, WORD_LEN, 0},
-	{0x0990, 0x0280, WORD_LEN, 0},
-	{0x098C, 0x2709, WORD_LEN, 0},
-	{0x0990, 0x01E0, WORD_LEN, 0},
-	{0x098C, 0x2723, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0x2725, WORD_LEN, 0},
-	{0x0990, 0x0004, WORD_LEN, 0},
-	{0x098C, 0x2727, WORD_LEN, 0},
-	{0x0990, 0x01EB, WORD_LEN, 0},
-	{0x098C, 0x2729, WORD_LEN, 0},
-	{0x0990, 0x028B, WORD_LEN, 0},
-	{0x098C, 0x272B, WORD_LEN, 0},
-	{0x0990, 0x0001, WORD_LEN, 0},
-	{0x098C, 0x272D, WORD_LEN, 0},
-#if defined(CONFIG_MSM_CAMERA_8X60) || defined(CONFIG_MSM_CAMERA_V4L2)
-	{0x0990, 0x0025, WORD_LEN, 0},
-#else
-	{0x0990, 0x0026, WORD_LEN, 0},
-#endif
-	{0x098C, 0x272F, WORD_LEN, 0},
-	{0x0990, 0x001A, WORD_LEN, 0},
-	{0x098C, 0x2731, WORD_LEN, 0},
-	{0x0990, 0x006B, WORD_LEN, 0},
-	{0x098C, 0x2733, WORD_LEN, 0},
-	{0x0990, 0x006B, WORD_LEN, 0},
-	{0x098C, 0x2735, WORD_LEN, 0},
-	{0x0990, 0x022A, WORD_LEN, 0},
-	{0x098C, 0x2737, WORD_LEN, 0},
-	{0x0990, 0x034A, WORD_LEN, 0},
-	{0x098C, 0x2747, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0x2749, WORD_LEN, 0},
-	{0x0990, 0x027F, WORD_LEN, 0},
-	{0x098C, 0x274B, WORD_LEN, 0},
-	{0x0990, 0x0000, WORD_LEN, 0},
-	{0x098C, 0x274D, WORD_LEN, 0},
-	{0x0990, 0x01DF, WORD_LEN, 0},
-	{0x098C, 0x2755, WORD_LEN, 0},
-	{0x0990, 0x0002, WORD_LEN, 0},
-	{0x098C, 0x2757, WORD_LEN, 0},
-	{0x0990, 0x0002, WORD_LEN, 0},
-	{0x098C, 0xA20C, WORD_LEN, 0},
-	{0x0990, 0x000C, WORD_LEN, 0},
-
-#if 0
-	
-	{0x098C, 0xA103, WORD_LEN, 0},
-	{0x0990, 0x0006, WORD_LEN, 0},
-	{0x098C, 0xA103, WORD_LEN, 0},
-	{0x0990, 0x0005, WORD_LEN, 0},
-	{0x098C, 0xA102, WORD_LEN, 0},
-	{0x0990, 0x000F, WORD_LEN, 0},
-#endif
-
-};
-
-
-struct mt9v113_reg mt9v113_regs = {
-	.power_up_tbl = (struct mt9v113_i2c_reg_conf *)&power_up_tbl,
-	.power_up_tbl_size = ARRAY_SIZE(power_up_tbl),
-	.register_init_1 = (struct mt9v113_i2c_reg_conf *)&register_init_tbl,
-	.register_init_size_1 = ARRAY_SIZE(register_init_tbl),
-	.register_init_2 = (struct mt9v113_i2c_reg_conf *)&register_init_tb2,
-	.register_init_size_2 = ARRAY_SIZE(register_init_tb2),
-	.contract_tb0 = (struct mt9v113_i2c_reg_conf *)&contract_setup_tb0,
-	.contract_tb0_size = ARRAY_SIZE(contract_setup_tb0),
-	.contract_tb1 = (struct mt9v113_i2c_reg_conf *)&contract_setup_tb1,
-	.contract_tb1_size = ARRAY_SIZE(contract_setup_tb1),
-	.contract_tb2 = (struct mt9v113_i2c_reg_conf *)&contract_setup_tb2,
-	.contract_tb2_size = ARRAY_SIZE(contract_setup_tb2),
-	.contract_tb3 = (struct mt9v113_i2c_reg_conf *)&contract_setup_tb3,
-	.contract_tb3_size = ARRAY_SIZE(contract_setup_tb3),
-	.contract_tb4 = (struct mt9v113_i2c_reg_conf *)&contract_setup_tb4,
-	.contract_tb4_size = ARRAY_SIZE(contract_setup_tb4),
-	.wb_auto = (struct mt9v113_i2c_reg_conf *)&wb_auto,
-	.wb_auto_size = ARRAY_SIZE(wb_auto),
-	.wb_fluorescent = (struct mt9v113_i2c_reg_conf *)&wb_fluorescent,
-	.wb_fluorescent_size = ARRAY_SIZE(wb_fluorescent),
-	.wb_incandescent = (struct mt9v113_i2c_reg_conf *)&wb_incandescent,
-	.wb_incandescent_size = ARRAY_SIZE(wb_incandescent),
-	.wb_daylight = (struct mt9v113_i2c_reg_conf *)&wb_daylight,
-	.wb_daylight_size = ARRAY_SIZE(wb_daylight),
-	.wb_cloudy = (struct mt9v113_i2c_reg_conf *)&wb_cloudy,
-	.wb_cloudy_size = ARRAY_SIZE(wb_cloudy)
-};
diff --git a/drivers/media/video/msm/sensors/mt9v113_v4l2.c b/drivers/media/video/msm/sensors/mt9v113_v4l2.c
deleted file mode 100644
index 178f40a..0000000
--- a/drivers/media/video/msm/sensors/mt9v113_v4l2.c
+++ /dev/null
@@ -1,2670 +0,0 @@
-/*
- * HTC Corporation Proprietary Rights Acknowledgment
- *
- * Copyright (C) 2008 HTC Corporation
- *
- * All Rights Reserved.
- *
- * The information contained in this work is the exclusive property
- * of HTC Corporation("HTC").  Only the user who is legally authorized
- * by HTC ("Authorized User") has right to employ this work within the
- * scope of this statement.  Nevertheless, the Authorized User shall not
- * use this work for any purpose other than the purpose agreed by HTC.
- * Any and all addition or modification to this work shall be  unconditionally
- * granted back to HTC and such addition or modification shall be solely
- * owned by HTC.  No right is granted under this statement, including but not
- * limited to, distribution, reproduction, and transmission, except as
- * otherwise provided in this statement.  Any other usage of this work shall
- *  be subject to the further written consent of HTC.
- */
-
-
-#include <linux/delay.h>
-#include <linux/types.h>
-#include <linux/i2c.h>
-#include <linux/uaccess.h>
-#include <linux/miscdevice.h>
-#include <linux/slab.h>
-#include <media/msm_camera.h>
-
-
-#include <mach/gpio.h>
-#include "mt9v113.h"
-#include <asm/mach-types.h>
-#include <media/v4l2-subdev.h>
-#include <mach/camera.h>
-#include "msm.h"
-#include "msm_ispif.h"
-#include "msm_sensor.h"
-
-
-#define SENSOR_NAME "mt9v113"
-
-static struct msm_sensor_ctrl_t mt9v113_s_ctrl;
-static int suspend_fail_retry_count_2;
-#define SUSPEND_FAIL_RETRY_MAX_2 3
-
-DEFINE_MUTEX(mt9v113_mut);
-
-#define  MT9V113_MODEL_ID     	0x2280 
-#define  MT9V113_MODEL_ID_ADDR  0x0000 
-static int op_mode;
-static int32_t config_csi = 0;
-#define MT9V113_REG_READ_MODE_ADDR_1	0x2717
-#define MT9V113_REG_READ_MODE_ADDR_2	0x272D
-#define MT9V113_READ_NORMAL_MODE	0x0024	
-#define MT9V113_READ_MIRROR_FLIP	0x0027	
-
-struct mt9v113_work {
-	struct work_struct work;
-};
-
-static struct mt9v113_work *mt9v113_sensorw;
-static struct i2c_client *mt9v113_client;
-
-struct mt9v113_ctrl_t {
-	const struct msm_camera_sensor_info *sensordata;
-	uint32_t sensormode;
-	uint32_t fps_divider;
-	uint32_t pict_fps_divider;
-	uint16_t fps;
-	uint16_t curr_lens_pos;
-	uint16_t curr_step_pos;
-	uint16_t my_reg_gain;
-	uint32_t my_reg_line_count;
-	uint16_t total_lines_per_frame;
-
-	enum mt9v113_resolution_t prev_res;
-	enum mt9v113_resolution_t pict_res;
-	enum mt9v113_resolution_t curr_res;
-	enum mt9v113_test_mode_t set_test;
-
-	struct v4l2_subdev *sensor_dev;
-	struct mt9v113_format *fmt;
-};
-
-static struct msm_sensor_output_info_t mt9v113_dimensions[] = {
-	{
-		.x_output = 0x280,
-		.y_output = 0x1E0,
-		.line_length_pclk = 0x34A,
-		.frame_length_lines = 0x22A,
-		.vt_pixel_clk = 28000000,
-		.op_pixel_clk = 28000000,
-		.binning_factor = 1,
-	},
-	{
-		.x_output = 0x280,
-		.y_output = 0x1E0,
-		.line_length_pclk = 0x34A,
-		.frame_length_lines = 0x22A,
-		.vt_pixel_clk = 28000000,
-		.op_pixel_clk = 28000000,
-		.binning_factor = 1,
-	},
-	{
-		.x_output = 0x280,
-		.y_output = 0x1E0,
-		.line_length_pclk = 0x34A,
-		.frame_length_lines = 0x22A,
-		.vt_pixel_clk = 28000000,
-		.op_pixel_clk = 28000000,
-		.binning_factor = 1,
-	},
-	{
-		.x_output = 0x280,
-		.y_output = 0x1E0,
-		.line_length_pclk = 0x34A,
-		.frame_length_lines = 0x22A,
-		.vt_pixel_clk = 28000000,
-		.op_pixel_clk = 28000000,
-		.binning_factor = 1,
-	},
-
-};
-
-int g_csi_if = 0;
-static DECLARE_WAIT_QUEUE_HEAD(mt9v113_wait_queue);
-
-
-
-#define MAX_I2C_RETRIES 20
-#define CHECK_STATE_TIME 100
-
-struct mt9v113_format {
-	enum v4l2_mbus_pixelcode code;
-	enum v4l2_colorspace colorspace;
-	u16 fmt;
-	u16 order;
-};
-
-static int i2c_transfer_retry(struct i2c_adapter *adap,
-			struct i2c_msg *msgs,
-			int len)
-{
-	int i2c_retry = 0;
-	int ns; 
-
-	while (i2c_retry++ < MAX_I2C_RETRIES) {
-		ns = i2c_transfer(adap, msgs, len);
-		if (ns == len)
-			break;
-		pr_err("%s: try %d/%d: i2c_transfer sent: %d, len %d\n",
-			__func__,
-			i2c_retry, MAX_I2C_RETRIES, ns, len);
-		msleep(10);
-	}
-
-	return ns == len ? 0 : -EIO;
-}
-
-static int mt9v113_i2c_txdata(unsigned short saddr,
-				  unsigned char *txdata, int length)
-{
-	struct i2c_msg msg[] = {
-		{
-		 .addr = saddr >> 1,
-		 .flags = 0,
-		 .len = length,
-		 .buf = txdata,
-		 },
-	};
-
-	if (i2c_transfer_retry(mt9v113_client->adapter, msg, 1) < 0) {
-		pr_err("mt9v113_i2c_txdata failed\n");
-		return -EIO;
-	}
-
-	return 0;
-}
-
-static int mt9v113_i2c_write(unsigned short saddr,
-				 unsigned short waddr, unsigned short wdata,
-				 enum mt9v113_width width)
-{
-	int rc = -EIO;
-	unsigned char buf[4];
-	memset(buf, 0, sizeof(buf));
-
-	switch (width) {
-	case WORD_LEN:{
-			
-
-			buf[0] = (waddr & 0xFF00) >> 8;
-			buf[1] = (waddr & 0x00FF);
-			buf[2] = (wdata & 0xFF00) >> 8;
-			buf[3] = (wdata & 0x00FF);
-
-			rc = mt9v113_i2c_txdata(saddr, buf, 4);
-		}
-		break;
-
-	case BYTE_LEN:{
-			
-
-			buf[0] = waddr;
-			buf[1] = wdata;
-			rc = mt9v113_i2c_txdata(saddr, buf, 2);
-		}
-		break;
-
-	default:
-		break;
-	}
-
-	if (rc < 0)
-		pr_info("i2c_write failed, addr = 0x%x, val = 0x%x!\n",
-		     waddr, wdata);
-
-	return rc;
-}
-
-static int mt9v113_i2c_write_table(struct mt9v113_i2c_reg_conf
-				       *reg_conf_tbl, int num_of_items_in_table)
-{
-	int i;
-	int rc = -EIO;
-
-	for (i = 0; i < num_of_items_in_table; i++) {
-		rc = mt9v113_i2c_write(mt9v113_client->addr,
-				       reg_conf_tbl->waddr, reg_conf_tbl->wdata,
-				       reg_conf_tbl->width);
-		if (rc < 0) {
-		pr_err("%s: num_of_items_in_table=%d\n", __func__,
-			num_of_items_in_table);
-			break;
-		}
-		if (reg_conf_tbl->mdelay_time != 0)
-			mdelay(reg_conf_tbl->mdelay_time);
-		reg_conf_tbl++;
-	}
-
-	return rc;
-}
-
-static int mt9v113_i2c_rxdata(unsigned short saddr,
-			      unsigned char *rxdata, int length)
-{
-	struct i2c_msg msgs[] = {
-		{
-		 .addr = saddr >> 1,
-		 .flags = 0,
-		 .len = 2,  
-		 .buf = rxdata,
-		 },
-		{
-		 .addr = saddr >> 1,
-		 .flags = I2C_M_RD,
-		 .len = length,
-		 .buf = rxdata,
-		 },
-	};
-
-	if (i2c_transfer_retry(mt9v113_client->adapter, msgs, 2) < 0) {
-		pr_err("mt9v113_i2c_rxdata failed!\n");
-		return -EIO;
-	}
-
-	return 0;
-}
-
-static int32_t mt9v113_i2c_read_w(unsigned short saddr, unsigned short raddr,
-	unsigned short *rdata)
-{
-	int32_t rc = 0;
-	unsigned char buf[4];
-
-	if (!rdata)
-		return -EIO;
-
-	memset(buf, 0, sizeof(buf));
-
-	buf[0] = (raddr & 0xFF00)>>8;
-	buf[1] = (raddr & 0x00FF);
-
-	rc = mt9v113_i2c_rxdata(saddr, buf, 2);
-	if (rc < 0)
-		return rc;
-
-	*rdata = buf[0] << 8 | buf[1];
-
-	if (rc < 0)
-		CDBG("mt9v113_i2c_read_w failed!\n");
-
-	return rc;
-}
-
-#if 0
-static int mt9v113_i2c_read(unsigned short saddr,
-				unsigned short raddr, unsigned char *rdata)
-{
-	int rc = 0;
-	unsigned char buf[1];
-
-	if (!rdata)
-		return -EIO;
-
-	memset(buf, 0, sizeof(buf));
-	buf[0] = raddr;
-	rc = mt9v113_i2c_rxdata(saddr, buf, 1);
-	if (rc < 0)
-		return rc;
-	*rdata = buf[0];
-	if (rc < 0)
-		pr_info("mt9v113_i2c_read failed!\n");
-
-	return rc;
-}
-#endif
-
-static int mt9v113_i2c_write_bit(unsigned short saddr, unsigned short raddr,
-unsigned short bit, unsigned short state)
-{
-	int rc;
-	unsigned short check_value;
-	unsigned short check_bit;
-
-	if (state)
-		check_bit = 0x0001 << bit;
-	else
-		check_bit = 0xFFFF & (~(0x0001 << bit));
-	pr_debug("mt9v113_i2c_write_bit check_bit:0x%4x", check_bit);
-	rc = mt9v113_i2c_read_w(saddr, raddr, &check_value);
-	if (rc < 0)
-	  return rc;
-
-	pr_debug("%s: mt9v113: 0x%4x reg value = 0x%4x\n", __func__,
-		raddr, check_value);
-	if (state)
-		check_value = (check_value | check_bit);
-	else
-		check_value = (check_value & check_bit);
-
-	pr_debug("%s: mt9v113: Set to 0x%4x reg value = 0x%4x\n", __func__,
-		raddr, check_value);
-
-	rc = mt9v113_i2c_write(saddr, raddr, check_value,
-		WORD_LEN);
-	return rc;
-}
-
-static int mt9v113_i2c_check_bit(unsigned short saddr, unsigned short raddr,
-unsigned short bit, int check_state)
-{
-	int k;
-	unsigned short check_value;
-	unsigned short check_bit;
-	check_bit = 0x0001 << bit;
-	for (k = 0; k < CHECK_STATE_TIME; k++) {
-		mt9v113_i2c_read_w(mt9v113_client->addr,
-			      raddr, &check_value);
-		if (check_state) {
-			if ((check_value & check_bit))
-			break;
-		} else {
-			if (!(check_value & check_bit))
-			break;
-		}
-		msleep(1);
-	}
-	if (k == CHECK_STATE_TIME) {
-		pr_err("%s failed addr:0x%2x data check_bit:0x%2x",
-			__func__, raddr, check_bit);
-		return -1;
-	}
-	return 1;
-}
-static inline int resume(void)
-{
-	int k = 0, rc = 0;
-	unsigned short check_value;
-
-	
-	
-	rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0016, &check_value);
-	if (rc < 0)
-	  return rc;
-
-	pr_info("%s: mt9v113: 0x0016 reg value = 0x%x\n", __func__,
-		check_value);
-
-	check_value = (check_value|0x0020);
-
-	pr_info("%s: mt9v113: Set to 0x0016 reg value = 0x%x\n", __func__,
-		check_value);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0016, check_value,
-		WORD_LEN);
-	if (rc < 0) {
-		pr_err("%s: Enter Active mode fail\n", __func__);
-		return rc;
-	}
-
-	
-	pr_info("resume, check_value=0x%x", check_value);
-	rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0018, &check_value);
-	if (rc < 0)
-	  return rc;
-
-	pr_info("%s: mt9v113: 0x0018 reg value = 0x%x\n", __func__,
-		check_value);
-
-	check_value = (check_value & 0xFFFE);
-
-	pr_info("%s: mt9v113: Set to 0x0018 reg value = 0x%x\n", __func__,
-		check_value);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0018, check_value,
-		WORD_LEN);
-	if (rc < 0) {
-		pr_err("%s: Enter Active mode fail\n", __func__);
-		return rc;
-	}
-
-	
-	for (k = 0; k < CHECK_STATE_TIME; k++) {
-		mt9v113_i2c_read_w(mt9v113_client->addr,
-			  0x0018, &check_value);
-
-		pr_info("%s: mt9v113: 0x0018 reg value = 0x%x\n", __func__,
-			check_value);
-
-		if (!(check_value & 0x4000)) {
-			pr_info("%s: (check 0x0018[14] is 0) k=%d\n",
-				__func__, k);
-			break;
-		}
-		msleep(1);	
-	}
-	if (k == CHECK_STATE_TIME) {
-		pr_err("%s: check status time out (check 0x0018[14] is 0)\n",
-			__func__);
-		return -EIO;
-	}
-
-	
-	for (k = 0; k < CHECK_STATE_TIME; k++) {
-		mt9v113_i2c_read_w(mt9v113_client->addr,
-			  0x301A, &check_value);
-		if (check_value & 0x0004) {
-			pr_info("%s: (check 0x301A[2] is 1) k=%d\n",
-				__func__, k);
-			break;
-		}
-		msleep(1);	
-	}
-	if (k == CHECK_STATE_TIME) {
-		pr_err("%s: check status time out (check 0x301A[2] is 1)\n",
-			__func__);
-		return -EIO;
-	}
-
-	
-	for (k = 0; k < CHECK_STATE_TIME; k++) {
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x31E0,
-			&check_value);
-		if (check_value == 0x0003) { 
-			pr_info("%s: (check 0x31E0 is 0x003 ) k=%d\n",
-				__func__, k);
-			break;
-		}
-		msleep(1);	
-	}
-	if (k == CHECK_STATE_TIME) {
-		pr_err("%s: check status time out (check 0x31E0 is 0x003 )\n",
-			__func__);
-		return -EIO;
-	}
-
-	
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x31E0, 0x0001,
-	WORD_LEN);
-	if (rc < 0) {
-		pr_err("%s: Enter Active mode fail\n", __func__);
-		return rc;
-	}
-
-    msleep(2);
-
-	return rc;
-}
-
-static inline int suspend(void)
-{
-	int k = 0, rc = 0;
-	unsigned short check_value;
-
-	
-	
-	rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0018, &check_value);
-	if (rc < 0)
-	  return rc;
-
-	check_value = (check_value|0x0008);
-
-	pr_info("suspend, check_value=0x%x", check_value);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0018, check_value,
-		WORD_LEN);
-	if (rc < 0) {
-		pr_err("%s: Enter standy mode fail\n", __func__);
-		return rc;
-	}
-	
-	rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0018, &check_value);
-	if (rc < 0)
-	  return rc;
-
-	check_value = (check_value|0x0001);
-
-	pr_info("%s: mt9v113: Set to 0x0018 reg value = 0x%x\n", __func__,
-		check_value);
-
-	pr_info("suspend, 2,check_value=0x%x", check_value);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0018, check_value,
-		WORD_LEN);
-	if (rc < 0) {
-		pr_err("%s: Enter standy mode fail\n", __func__);
-		return rc;
-	}
-
-	
-	for (k = 0; k < CHECK_STATE_TIME; k++) {
-		mt9v113_i2c_read_w(mt9v113_client->addr,
-			  0x0018, &check_value);
-		if ((check_value & 0x4000)) { 
-			pr_info("%s: ( check 0x0018[14] is 1 ) k=%d\n",
-				__func__, k);
-			break;
-		}
-		msleep(1);	
-	}
-	if (k == CHECK_STATE_TIME) {
-		pr_err("%s: check status time out\n", __func__);
-		return -EIO;
-	}
-    msleep(2);
-	return rc;
-}
-
-static int mt9v113_reg_init(void)
-{
-	int rc = 0, k = 0;
-	unsigned short check_value;
-
-    
-	pr_info("%s: Power Up Start\n", __func__);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr,
-					0x0018, 0x4028, WORD_LEN);
-	if (rc < 0)
-		goto reg_init_fail;
-
-	rc = mt9v113_i2c_check_bit(mt9v113_client->addr, 0x0018, 14, 0);
-	if (rc < 0)
-		goto reg_init_fail;
-
-	
-	rc = mt9v113_i2c_check_bit(mt9v113_client->addr, 0x301A, 2, 1);
-	if (rc < 0)
-		goto reg_init_fail;
-
-	rc = mt9v113_i2c_write_table(&mt9v113_regs.power_up_tbl[0],
-				     mt9v113_regs.power_up_tbl_size);
-	if (rc < 0) {
-		pr_err("%s: Power Up fail\n", __func__);
-		goto reg_init_fail;
-	}
-
-	if(suspend_fail_retry_count_2 != SUSPEND_FAIL_RETRY_MAX_2) {
-	    pr_info("%s: added additional delay count=%d\n", __func__, suspend_fail_retry_count_2);
-	    mdelay(20);
-	}
-	
-	pr_info("%s: RESET and MISC Control\n", __func__);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr,
-					0x0018, 0x4028, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_check_bit(mt9v113_client->addr, 0x0018, 14, 0);
-	if (rc < 0)
-		goto reg_init_fail;
-
-	
-	rc = mt9v113_i2c_check_bit(mt9v113_client->addr, 0x301A, 2, 1);
-	if (rc < 0)
-		goto reg_init_fail;
-
-	
-	rc = mt9v113_i2c_write_bit(mt9v113_client->addr, 0x31E0, 1, 0);
-	if (rc < 0)
-		goto reg_init_fail;
-
-	if (g_csi_if) {
-	    
-	    rc = mt9v113_i2c_write_bit(mt9v113_client->addr, 0x001A, 9, 0);
-	    if (rc < 0)
-	      goto reg_init_fail;
-
-	    
-	    
-	    
-	    
-
-	    rc = mt9v113_i2c_write_bit(mt9v113_client->addr, 0x3400, 4, 1);
-	    if (rc < 0)
-	      goto reg_init_fail;
-
-		
-		for (k = 0; k < CHECK_STATE_TIME; k++) {
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x3400,
-				&check_value);
-			pr_info("%s: mt9v113: 0x3400 reg value = 0x%4x\n", __func__, check_value);
-			if (check_value & 0x0010) { 
-				pr_info("%s: (check 0x3400[4] is 1 ) k=%d\n",
-				__func__, k);
-			break;
-		} else {
-			check_value = (check_value | 0x0010);
-			pr_info("%s: mt9v113: Set to 0x3400 reg value = 0x%4x\n", __func__, check_value);
-				rc = mt9v113_i2c_write(mt9v113_client->addr, 0x3400,
-				check_value, WORD_LEN);
-			if (rc < 0)
-				goto reg_init_fail;
-		}
-			msleep(1);	
-		}
-		if (k == CHECK_STATE_TIME) {
-			pr_err("%s: check status time out (check 0x3400[4] is 1 )\n",
-				__func__);
-			goto reg_init_fail;
-		}
-
-		mdelay(10);
-	    
-	    rc = mt9v113_i2c_write_bit(mt9v113_client->addr, 0x3400, 9, 1);
-	    if (rc < 0)
-	      goto reg_init_fail;
-
-		
-		for (k = 0; k < CHECK_STATE_TIME; k++) {
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x3400,
-				&check_value);
-			pr_info("%s: mt9v113: 0x3400 reg value = 0x%4x\n", __func__, check_value);
-			if (check_value & 0x0200) { 
-				pr_info("%s: (check 0x3400[9] is 1 ) k=%d\n",
-					__func__, k);
-				break;
-			} else {
-				check_value = (check_value | 0x0200);
-				pr_info("%s: mt9v113: Set to 0x3400 reg value = 0x%4x\n", __func__, check_value);
-				rc = mt9v113_i2c_write(mt9v113_client->addr, 0x3400,
-					check_value, WORD_LEN);
-				if (rc < 0)
-					goto reg_init_fail;
-			}
-			msleep(1);	
-		}
-		if (k == CHECK_STATE_TIME) {
-			pr_err("%s: check status time out (check 0x3400[9] is 1 )\n",
-				__func__);
-			goto reg_init_fail;
-		}
-
-	    
-	    rc = mt9v113_i2c_write_bit(mt9v113_client->addr, 0x321C, 7, 0);
-	    if (rc < 0)
-	      goto reg_init_fail;
-	} else {
-	    rc = mt9v113_i2c_write(mt9v113_client->addr, 0x001A, 0x0210, WORD_LEN);
-	    if (rc < 0)
-	      goto reg_init_fail;
-	}
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x001E, 0x0777, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0016, 0x42DF, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-
-	
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0014, 0xB04B, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0014, 0xB049, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0010, 0x021C, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0012, 0x0000, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0014, 0x244B, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	msleep(30);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0014, 0x304B, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_check_bit(mt9v113_client->addr, 0x0014, 15, 1);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0014, 0xB04A, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	
-	rc = mt9v113_i2c_write_table(&mt9v113_regs.register_init_1[0],
-			mt9v113_regs.register_init_size_1);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	
-	rc = mt9v113_i2c_write_bit(mt9v113_client->addr, 0x3210, 3, 1);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	
-	rc = mt9v113_i2c_write_table(&mt9v113_regs.register_init_2[0],
-			mt9v113_regs.register_init_size_2);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0006, WORD_LEN);
-	for (k = 0; k < CHECK_STATE_TIME; k++) {  
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103,
-			WORD_LEN);
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-			&check_value);
-		if (check_value == 0x0000) 
-			break;
-		msleep(1);
-	}
-	if (k == CHECK_STATE_TIME)
-		goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	for (k = 0; k < CHECK_STATE_TIME; k++) {  
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103,
-			WORD_LEN);
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-			&check_value);
-		if (check_value == 0x0000) 
-			break;
-		msleep(1);
-	}
-	if (k == CHECK_STATE_TIME)
-		goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA102, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x000F, WORD_LEN);
-	if (rc < 0)
-	  goto reg_init_fail;
-
-	return rc;
-reg_init_fail:
-	pr_err("mt9v113 register initial fail\n");
-	return rc;
-}
-
-#if 0
-int mt9v113_set_flip_mirror(struct msm_camera_sensor_info *info)
-{
-	int rc = 0;
-	if (info != NULL) {
-		if (info->mirror_mode) {
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-		} else {
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0026, WORD_LEN);
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0026, WORD_LEN);
-		}
-		if (rc < 0)
-			goto set_flip_mirror_fail;
-	} else {
-		pr_err("camera sensor info is NULL");
-		rc = -1;
-		goto set_flip_mirror_fail;
-	}
-
-	return rc;
-set_flip_mirror_fail:
-	pr_err("mt9v113 setting flip mirror fail\n");
-	return rc;
-}
-#endif
-
-static int pre_mirror_mode;
-static int mt9v113_set_front_camera_mode(enum frontcam_t frontcam_value)
-{
-	int rc = 0;
-	int k = 0;
-	unsigned short check_value;
-
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-
-	pr_info("%s: frontcam_value=%d\n", __func__, frontcam_value);
-
-	switch (frontcam_value) {
-	case CAMERA_MIRROR:
-		
-	if (mt9v113_s_ctrl.sensordata->mirror_mode) {
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0024, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0024, WORD_LEN);
-	} else {
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0027, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0027, WORD_LEN);
-	}
-
-	if (rc < 0)
-		return -EIO;
-
-		break;
-	case CAMERA_REVERSE:
-		
-	if (mt9v113_s_ctrl.sensordata->mirror_mode) {
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-	} else {
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0026, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0026, WORD_LEN);
-	}
-
-	if (rc < 0)
-		return -EIO;
-
-		break;
-
-	case CAMERA_PORTRAIT_REVERSE:
-	
-	if (mt9v113_s_ctrl.sensordata->mirror_mode) {
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0026, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0026, WORD_LEN);
-	} else {
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2717, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x272D, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-	}
-
-	if (rc < 0)
-		return -EIO;
-
-		break;
-	default:
-		break;
-	}
-
-	
-	if (pre_mirror_mode != frontcam_value) {
-	pr_info("%s: re-flash\n", __func__);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0006, WORD_LEN);
-
-	for (k = 0; k < CHECK_STATE_TIME; k++) {  
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-			0xA103, WORD_LEN);
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-			&check_value);
-		if (check_value == 0x0000) 
-			break;
-		msleep(1);
-	}
-	if (k == CHECK_STATE_TIME) 
-		return -EIO;
-
-	}
-	pre_mirror_mode = frontcam_value;
-
-	msleep(20);
-
-#if 0
-	for (k = 0; k < CHECK_STATE_TIME; k++) {  
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-			0xA103, WORD_LEN);
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-			&check_value);
-		if (rc > 0 && check_value == 0x0000) 
-			break;
-
-		msleep(1);
-		pr_info("%s: count =%d\n", __func__, k);
-	}
-	if (k == CHECK_STATE_TIME) 
-		return -EIO;
-#endif
-
-	return 0;
-}
-
-static int mt9v113_set_sensor_mode(struct msm_sensor_ctrl_t *s_ctrl, int mode)
-{
-	int rc = 0 , k;
-	uint16_t check_value = 0;
-#ifdef CONFIG_ARCH_MSM8X60
-	struct msm_camera_csi_params mt9v113_csi_params;
-#endif
-	pr_info("%s: E\n", __func__);
-	pr_info("sinfo->csi_if = %d, mode = %d", g_csi_if, mode);
-
-	if (config_csi == 0) {
-#ifdef CONFIG_ARCH_MSM8X60
-	if (g_csi_if) {
-		rc = suspend();  
-
-		if (rc < 0)
-			pr_err("%s: suspend fail\n", __func__);
-
-		
-		pr_info("[CAM] set csi config\n");
-		mt9v113_csi_params.data_format = CSI_8BIT;
-		mt9v113_csi_params.lane_cnt = 1;
-		mt9v113_csi_params.lane_assign = 0xe4;
-		mt9v113_csi_params.dpcm_scheme = 0;
-		mt9v113_csi_params.settle_cnt = 0x0d;
-
-		v4l2_subdev_notify(&(mt9v113_s_ctrl.sensor_v4l2_subdev),
-			NOTIFY_CSIC_CFG,
-			&mt9v113_csi_params);
-
-		mdelay(20);
-		config_csi = 1;
-
-		rc = resume();
-		if (rc < 0)
-			pr_err("[CAM] mt9v113 resume failed\n");
-	}
-
-#else  
-		if (g_csi_if) {
-			s_ctrl->curr_frame_length_lines =
-				s_ctrl->msm_sensor_reg->output_settings[mode].frame_length_lines;
-
-			s_ctrl->curr_line_length_pclk =
-				s_ctrl->msm_sensor_reg->output_settings[mode].line_length_pclk;
-
-			
-			pr_info("set csi config\n");
-			v4l2_subdev_notify(&(mt9v113_s_ctrl.sensor_v4l2_subdev),
-				NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-				PIX_0, ISPIF_OFF_IMMEDIATELY));
-
-			rc = suspend();  
-
-			if (rc < 0)
-				pr_err("%s: suspend fail\n", __func__);
-
-			pr_info("subdev name: %s", mt9v113_s_ctrl.sensor_v4l2_subdev.name);
-
-			mt9v113_s_ctrl.curr_csi_params = mt9v113_s_ctrl.csi_params[mode];
-			v4l2_subdev_notify(&(mt9v113_s_ctrl.sensor_v4l2_subdev),
-					NOTIFY_CSID_CFG, &mt9v113_s_ctrl.curr_csi_params->csid_params);
-
-			v4l2_subdev_notify(&(mt9v113_s_ctrl.sensor_v4l2_subdev),
-					NOTIFY_CID_CHANGE, NULL);
-			dsb();
-
-			v4l2_subdev_notify(&(mt9v113_s_ctrl.sensor_v4l2_subdev),
-					NOTIFY_CSIPHY_CFG, &mt9v113_s_ctrl.curr_csi_params->csiphy_params);
-
-			dsb();
-			config_csi = 1;
-
-			msleep(20);
-			v4l2_subdev_notify(&(mt9v113_s_ctrl.sensor_v4l2_subdev),
-				NOTIFY_PCLK_CHANGE, &mt9v113_dimensions[mode].op_pixel_clk);
-
-			v4l2_subdev_notify(&(mt9v113_s_ctrl.sensor_v4l2_subdev),
-				NOTIFY_ISPIF_STREAM, (void *)ISPIF_STREAM(
-				PIX_0, ISPIF_ON_FRAME_BOUNDARY));
-
-			rc = resume();
-
-			if (rc < 0)
-				pr_err("%s: resume fail\n", __func__);
-		}
-#endif  
-	}
-
-#if 0 
-			while (1) {
-				msm_io_read_interrupt();
-				msleep(200);
-			}
-#endif
-
-	switch (mode) {
-	case SENSOR_PREVIEW_MODE:
-		op_mode = SENSOR_PREVIEW_MODE;
-		pr_info("mt9v113:sensor set mode: preview\n");
-
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103,
-			WORD_LEN);
-		if (rc < 0)
-			return rc;
-
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0002,
-		WORD_LEN);
-		if (rc < 0)
-			return rc;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA104,	WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			pr_info("check_value=%d", check_value);
-			if (check_value == 0x0003) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) {
-			pr_err("%s: Preview fail\n", __func__);
-			return -EIO;
-		}
-
-		
-		msleep(150);
-
-		break;
-	case SENSOR_SNAPSHOT_MODE:
-		op_mode = SENSOR_SNAPSHOT_MODE;
-		
-		pr_info("mt9v113:sensor set mode: snapshot\n");
-
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103,
-			WORD_LEN);
-		if (rc < 0)
-			return rc;
-
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0001,
-		WORD_LEN);
-		if (rc < 0)
-			return rc;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA104, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0003)
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) {
-			pr_err("%s: Snapshot fail\n", __func__);
-			return -EIO;
-		}
-		break;
-
-	default:
-		return -EINVAL;
-	}
-
-	pr_info("%s: X\n", __func__);
-	return rc;
-}
-
-
-static int mt9v113_set_antibanding(enum antibanding_mode antibanding_value)
-{
-	int rc = 0;
-	unsigned short check_value = 0;
-	int iRetryCnt = 20;
-	pr_info("%s: antibanding_value =%d\n", __func__, antibanding_value);
-
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-	switch (antibanding_value) {
-	case CAMERA_ANTI_BANDING_50HZ:
-	while ((check_value != 0xE0) && (iRetryCnt-- > 0)) {
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA404, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C0, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		msleep(5);
-
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA404, WORD_LEN);
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990, &check_value);
-	}
-
-	if (check_value != 0xE0)
-		pr_info("%s: check_value: 0x%X, retry failed!\n", __func__, check_value);
-		break;
-	case CAMERA_ANTI_BANDING_60HZ:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA404, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0080, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_ANTI_BANDING_AUTO: 
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA404, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0080, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	default:
-		pr_info("%s: Not support antibanding value = %d\n",
-		   __func__, antibanding_value);
-		return -EINVAL;
-	}
-	return 0;
-
-}
-
-static int mt9v113_set_sharpness(enum sharpness_mode sharpness_value)
-{
-	int rc = 0;
-
-	pr_info("%s: sharpness_value = %d\n", __func__, sharpness_value);
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-
-	switch (sharpness_value) {
-	case CAMERA_SHARPNESS_X0:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB22, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x326C, 0x0400, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SHARPNESS_X1:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB22, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0001, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x326C, 0x0600, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SHARPNESS_X2:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB22, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x326C, 0x0B00, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SHARPNESS_X3:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB22, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0006, WORD_LEN); 
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x326C, 0x0B00, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SHARPNESS_X4:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB22, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0007, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x326C, 0x0FF0, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	default:
-		pr_info("%s: Not support sharpness value = %d\n",
-		   __func__, sharpness_value);
-		return -EINVAL;
-	}
-	return 0;
-}
-
-
-static int mt9v113_set_saturation(enum saturation_mode saturation_value)
-{
-	int rc = 0;
-
-	pr_info("%s: saturation_value = %d\n", __func__, saturation_value);
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-	switch (saturation_value) {
-	case CAMERA_SATURATION_X0:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB20, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0010, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB24, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0009, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SATURATION_X05:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB20, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0035, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB24, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SATURATION_X1:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB20, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0048, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB24, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0033, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SATURATION_X15:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB20, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0063, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB24, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0045, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	case CAMERA_SATURATION_X2:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB20, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0076, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB24, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0053, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-		break;
-	default:
-		pr_info("%s: Not support saturation value = %d\n",
-		   __func__, saturation_value);
-		return -EINVAL;
-	}
-	return 0;
-}
-
-static int mt9v113_set_contrast(enum contrast_mode contrast_value)
-{
-	int rc = 0;
-
-	pr_info("%s: contrast_value = %d\n", __func__, contrast_value);
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-
-	switch (contrast_value) {
-	case CAMERA_CONTRAST_N2:
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.contract_tb0[0],
-			mt9v113_regs.contract_tb0_size);
-		if (rc < 0) {
-			pr_err("%s: contract_tb0 fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_CONTRAST_N1:
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.contract_tb1[0],
-			mt9v113_regs.contract_tb1_size);
-		if (rc < 0) {
-			pr_err("%s: contract_tb1 fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_CONTRAST_D:
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.contract_tb2[0],
-			mt9v113_regs.contract_tb2_size);
-		if (rc < 0) {
-			pr_err("%s: contract_tb2 fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_CONTRAST_P1:
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.contract_tb3[0],
-			mt9v113_regs.contract_tb3_size);
-		if (rc < 0) {
-			pr_err("%s: contract_tb3 fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_CONTRAST_P2:
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.contract_tb4[0],
-			mt9v113_regs.contract_tb4_size);
-		if (rc < 0) {
-			pr_err("%s: contract_tb4 fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	default:
-		pr_info("%s: Not support contrast value = %d\n",
-		   __func__, contrast_value);
-		return -EINVAL;
-	}
-	return 0;
-}
-
-static int mt9v113_set_effect(int effect)
-{
-	int rc = 0, k = 0;
-	unsigned short check_value;
-
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-
-	pr_info("%s: effect = %d\n", __func__, effect);
-
-	switch (effect) {
-	case CAMERA_EFFECT_OFF:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2759, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6440, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x275B, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6440, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2763, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0xB023, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-
-	case CAMERA_EFFECT_MONO:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2759, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6441, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x275B, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6441, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2763, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0xB023, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-
-	case CAMERA_EFFECT_NEGATIVE:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2759, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6443, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x275B, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6443, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2763, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0xB023, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-
-	case CAMERA_EFFECT_SEPIA:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2759, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6442, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x275B, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6442, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2763, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0xB023, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-
-	case CAMERA_EFFECT_AQUA:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2759, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6442, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x275B, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x6442, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x2763, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x30D0, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-	default:
-		pr_info("%s: Not support effect = %d\n",
-		   __func__, effect);
-		return -EINVAL;
-	}
-
-	return 0;
-}
-
-static int mt9v113_set_brightness(enum brightness_t brightness_value)
-{
-	int rc = 0;
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-
-	pr_info("%s: brightness_value = %d\n", __func__, brightness_value);
-
-	switch (brightness_value) {
-	case CAMERA_BRIGHTNESS_N4: 
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x001F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00CA, WORD_LEN);
-			if (rc < 0)
-				return -EIO;
-
-			break;
-
-	case CAMERA_BRIGHTNESS_N3: 
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0025, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C9, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	case CAMERA_BRIGHTNESS_N2:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0030, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C9, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	case CAMERA_BRIGHTNESS_N1:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0038, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C8, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	case CAMERA_BRIGHTNESS_D: 
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x004A, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C8, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	case CAMERA_BRIGHTNESS_P1:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0051, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C8, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	case CAMERA_BRIGHTNESS_P2:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0059, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C7, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	case CAMERA_BRIGHTNESS_P3: 
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x005F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C7, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	case CAMERA_BRIGHTNESS_P4: 
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA24F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0068, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xAB1F, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00C6, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		break;
-	default:
-		pr_info("%s: Not support brightness value = %d\n",
-			__func__, brightness_value);
-		 return -EINVAL;
-	}
-	return 0;
-}
-
-static int mt9v113_set_wb(enum wb_mode wb_value)
-{
-	int rc = 0, k = 0;
-	unsigned short check_value;
-
-	if (op_mode == SENSOR_SNAPSHOT_MODE)
-		return 0;
-
-	pr_info("%s: wb_value = %d\n", __func__, wb_value);
-	switch (wb_value) {
-	case CAMERA_AWB_AUTO:
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA11F, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0001, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.wb_auto[0],
-			mt9v113_regs.wb_auto_size);
-		if (rc < 0) {
-			pr_err("%s: wb_auto fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_AWB_INDOOR_HOME:
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA115, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA11F, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.wb_fluorescent[0],
-			mt9v113_regs.wb_fluorescent_size);
-		if (rc < 0) {
-			pr_err("%s: wb_fluorescent fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_AWB_INDOOR_OFFICE:
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA115, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA11F, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.wb_incandescent[0],
-			mt9v113_regs.wb_incandescent_size);
-		if (rc < 0) {
-			pr_err("%s: wb_incandescent fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_AWB_SUNNY:
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA115, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA11F, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		rc = mt9v113_i2c_write_table(&mt9v113_regs.wb_daylight[0],
-			mt9v113_regs.wb_daylight_size);
-		if (rc < 0) {
-			pr_err("%s: wb_daylight fail\n", __func__);
-			return -EIO;
-		}
-
-		break;
-	case CAMERA_AWB_CLOUDY: 
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA115, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA11F, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0000, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-
-			for (k = 0; k < CHECK_STATE_TIME; k++) {  
-				rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-					0xA103, WORD_LEN);
-				rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-					&check_value);
-				if (check_value == 0x0000) 
-					break;
-				msleep(1);
-			}
-			if (k == CHECK_STATE_TIME) 
-				return -EIO;
-
-			rc = mt9v113_i2c_write_table(&mt9v113_regs.wb_cloudy[0],
-				mt9v113_regs.wb_cloudy_size);
-			if (rc < 0) {
-				pr_err("%s: wb_cloudy[ fail\n", __func__);
-				return -EIO;
-			}
-		break;
-	default:
-		pr_info("%s: Not support wb_value = %d\n",
-		   __func__, wb_value);
-		return -EINVAL;
-	}
-	return 0;
-}
-
-#if 0
-static int mt9v113_get_iso(uint16_t *real_iso_value)
-{
-	int rc = 0;
-	unsigned short check_value;
-
-	
-	*real_iso_value = 400;
-
-	rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x3028, &check_value);
-	if (rc < 0)
-		return -EIO;
-
-	*real_iso_value = (check_value * 100) / 8;
-
-	pr_info("%s real_iso_value: %d\n", __func__, *real_iso_value);
-	return rc;
-}
-#endif
-
-static int mt9v113_set_iso(enum iso_mode iso_value)
-{
-	int rc = 0, k = 0;
-	unsigned short check_value;
-	pr_info("%s: iso_value =%d\n", __func__, iso_value);
-
-	switch (iso_value) {
-	case CAMERA_ISO_MODE_AUTO:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20E, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0080, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-	case CAMERA_ISO_MODE_100:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20E, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0026, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-	case CAMERA_ISO_MODE_200:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20E, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0046, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-	case CAMERA_ISO_MODE_400:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20E, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0078, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-	case CAMERA_ISO_MODE_800:
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20E, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x00A0, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		if (rc < 0)
-			return -EIO;
-
-		for (k = 0; k < CHECK_STATE_TIME; k++) {  
-			rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-				0xA103, WORD_LEN);
-			rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-				&check_value);
-			if (check_value == 0x0000) 
-				break;
-			msleep(1);
-		}
-		if (k == CHECK_STATE_TIME) 
-			return -EIO;
-
-		break;
-	default:
-		pr_info("%s: Not support ISO value = %d\n",
-			__func__, iso_value);
-		 return -EINVAL;
-	}
-	return 0;
-}
-
-#if 0
-static int mt9v113_vreg_enable(struct platform_device *pdev)
-{
-	struct msm_camera_sensor_info *sdata = pdev->dev.platform_data;
-	int rc;
-
-	pr_info("%s camera vreg on\n", __func__);
-
-	if (sdata->camera_power_on == NULL) {
-		pr_err("sensor platform_data didnt register\n");
-		return -EIO;
-	}
-	rc = sdata->camera_power_on();
-	return rc;
-}
-
-static int mt9v113_vreg_disable(struct platform_device *pdev)
-{
-	struct msm_camera_sensor_info *sdata = pdev->dev.platform_data;
-	int rc;
-	printk(KERN_INFO "%s camera vreg off\n", __func__);
-	if (sdata->camera_power_off == NULL) {
-		pr_err("sensor platform_data didnt register\n");
-		return -EIO;
-	}
-	rc = sdata->camera_power_off();
-	return rc;
-}
-#endif
-
-static int mt9v113_probe_init_sensor(const struct msm_camera_sensor_info *data)
-{
-	
-	int rc = 0;
-	uint16_t model_id = 0;
-
-	pr_info("mt9v113_probe_init_sensor\n");
-
-#if 0
-	rc = mt9v113_vreg_enable(mt9v113_pdev);
-	if (rc < 0) {
-		pr_err("__mt9v113_probe fail sensor power on error\n");
-		goto probe_init_fail;
-	}
-#endif
-
-	rc = gpio_request(data->sensor_reset, "mt9v113");
-	if (!rc) {
-		gpio_direction_output(data->sensor_reset, 0);
-		msleep(1);
-
-		rc = msm_camio_clk_enable(CAMIO_CAM_MCLK_CLK);
-		if (rc < 0) {
-			goto probe_init_fail;
-		}
-
-		pr_info("mt9v113: MCLK enable clk\n");
-		msm_camio_clk_rate_set(MSM_SENSOR_MCLK_24HZ);
-
-		msleep(1);
-		rc = gpio_direction_output(data->sensor_reset, 1);
-		if (rc < 0) {
-			goto probe_init_fail_mclk_off;
-		}
-	}	else {
-		pr_info("mt9v113: request GPIO(sensor_reset) :%d failed\n", data->sensor_reset);
-		goto probe_init_fail;
-	}
-	gpio_free(data->sensor_reset);
-
-	msleep(1);
-
-	
-	pr_info("mt9v113_probe_init_sensor,mt9v113_client->addr=0x%x", mt9v113_client->addr >> 1);
-	rc = mt9v113_i2c_read_w(mt9v113_client->addr,
-			      MT9V113_MODEL_ID_ADDR, &model_id);
-	if (rc < 0) {
-		pr_err("%s: I2C read fail\n", __func__);
-		goto probe_init_fail_reset_off;
-	}
-
-	pr_info("%s: mt9v113: model_id = 0x%x\n", __func__, model_id);
-	
-	if (model_id != MT9V113_MODEL_ID) {
-	    pr_err("%s: Sensor is not MT9V113\n", __func__);
-		rc = -EINVAL;
-		goto probe_init_fail_reset_off;
-	}
-
-	goto init_probe_done;
-
-probe_init_fail_reset_off:
-	gpio_request(data->sensor_reset, "mt9v113");
-	gpio_direction_output(data->sensor_reset, 0);
-	gpio_free(data->sensor_reset);
-probe_init_fail_mclk_off:
-#if 0
-probe_init_fail_vreg_off:
-	mt9v113_vreg_disable(mt9v113_pdev);
-#endif
-probe_init_fail:
-	pr_err("mt9v113_probe_init_sensor fails\n");
-	return rc;
-init_probe_done:
-	pr_info("mt9v113_probe_init_sensor finishes\n");
-	return rc;
-}
-
-
-
-int mt9v113_sensor_open_init(const struct msm_camera_sensor_info *data)
-{
-	int rc = 0;
-	uint16_t check_value = 0;
-
-	pr_info("%s\n", __func__);
-
-	if (data == NULL) {
-		pr_err("%s sensor data is NULL\n", __func__);
-		return -EINVAL;
-	}
-
-	g_csi_if = data->csi_if;
-	suspend_fail_retry_count_2 = SUSPEND_FAIL_RETRY_MAX_2;
-
-	if (!data->power_down_disable) {
-
-probe_suspend_fail_retry_2:
-		pr_info("%s suspend_fail_retry_count_2=%d\n", __func__, suspend_fail_retry_count_2);
-
-		mdelay(5);
-	}
-
-	mdelay(2);
-
-	
-	rc = mt9v113_probe_init_sensor(data);
-	if (rc < 0) {
-		pr_info("mt9v113_probe_init_sensor failed!\n");
-		goto prob_init_sensor_fail;
-	}
-
-	if (!data->power_down_disable) {
-		
-		rc = mt9v113_reg_init();
-		if (rc < 0) {
-			pr_err("%s: mt9v113_reg_init fail\n", __func__);
-
-			if (suspend_fail_retry_count_2 > 0) {
-				suspend_fail_retry_count_2--;
-				pr_info("%s: mt9v113 reg_init fail start retry mechanism !!!\n", __func__);
-				goto probe_suspend_fail_retry_2;
-			}
-
-			goto init_fail;
-		}
-
-		
-		
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0016, &check_value);
-		if (rc < 0)
-		  return rc;
-
-		pr_info("%s: mt9v113: 0x0016 reg value = 0x%x\n",
-			__func__, check_value);
-
-		check_value = (check_value&0xFFDF);
-
-		pr_info("%s: mt9v113: Set to 0x0016 reg value = 0x%x\n",
-			__func__, check_value);
-
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0016,
-			check_value, WORD_LEN);
-		if (rc < 0) {
-			pr_err("%s: Enter Standby mode fail\n", __func__);
-			return rc;
-		}
-	}
-	 
-
-	if (!data->csi_if) {
-		
-		rc = resume();
-		if (rc < 0) {
-			pr_err("%s: Enter Active mode fail\n", __func__);
-			goto init_fail;
-		}
-	}
-
-	config_csi = 0;
-	goto init_done;
-
-init_fail:
-	pr_info("%s init_fail\n", __func__);
-	
-	
-	return rc;
-prob_init_sensor_fail:
-	pr_info("%s init_fail\n", __func__);
-	
-	return rc;
-init_done:
-	pr_info("%s init_done\n", __func__);
-	return rc;
-
-}
-
-static int mt9v113_init_client(struct i2c_client *client)
-{
-	
-	init_waitqueue_head(&mt9v113_wait_queue);
-	return 0;
-}
-
-static int mt9v113_detect_sensor_status(void)
-{
-	int rc = 0, k = 0;
-	unsigned short check_value;
-
-	for (k = 0; k < CHECK_STATE_TIME; k++) {	
-		rc = mt9v113_i2c_write(mt9v113_client->addr, 0x098C,
-			0xA103, WORD_LEN);
-		rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0990,
-			&check_value);
-		if (check_value == 0x0000) 
-			break;
-
-		msleep(1);
-	}
-
-	if (k == CHECK_STATE_TIME) 
-		pr_info("mt9v113_detect_sensor_status,time out");
-
-	return 0;
-}
-
-static int mt9v113_set_FPS(struct fps_cfg *fps)
-{
-	static struct fps_cfg pre_fps_cfg = {
-		.fps_div = -1,
-	};
-
-	if (pre_fps_cfg.fps_div == fps->fps_div)
-		return 0;
-	else
-		pre_fps_cfg.fps_div = fps->fps_div;
-
-	pr_info("mt9v113_set_FPS, fps->fps_div=%d", fps->fps_div);
-
-	if (fps->fps_div == 10) {
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x271F, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x067E, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0006, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20C, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x000C, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-	} else if (fps->fps_div == 15) {
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x271F, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0454, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0006, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20C, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0004, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-	} else if (fps->fps_div == 1015) {
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x271F, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0454, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0006, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20C, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x000C, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-	} else if (fps->fps_div == 0) {
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0x271F, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x022A, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0006, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA20C, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x000C, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA215, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0008, WORD_LEN);
-
-		mt9v113_i2c_write(mt9v113_client->addr, 0x098C, 0xA103, WORD_LEN);
-		mt9v113_i2c_write(mt9v113_client->addr, 0x0990, 0x0005, WORD_LEN);
-		mdelay(1);
-
-		mt9v113_detect_sensor_status();
-	}
-
-	return 0;
-}
-
-static int32_t mt9v113_get_output_info(
-	struct sensor_output_info_t *sensor_output_info)
-{
-	int rc = 0;
-	sensor_output_info->num_info = 4;
-	if (copy_to_user((void *)sensor_output_info->output_info,
-		mt9v113_dimensions,
-		sizeof(struct msm_sensor_output_info_t) * 4))
-		rc = -EFAULT;
-
-	return rc;
-}
-
-int32_t mt9v113_sensor_config(struct msm_sensor_ctrl_t *s_ctrl, void __user *argp)
-{
-	struct sensor_cfg_data cfg_data;
-	long rc = 0;
-	if (copy_from_user(&cfg_data,
-			   (void *)argp, sizeof(struct sensor_cfg_data)))
-		return -EFAULT;
-
-	pr_info("mt9v113_ioctl, cfgtype = %d\n", cfg_data.cfgtype);
-
-	switch (cfg_data.cfgtype) {
-	case CFG_GET_OUTPUT_INFO:
-		rc = mt9v113_get_output_info(&cfg_data.cfg.output_info);
-		if (copy_to_user((void *)argp,
-			&cfg_data,
-			sizeof(struct sensor_cfg_data)))
-			rc = -EFAULT;
-		break;
-	case CFG_SET_MODE:
-		rc = mt9v113_set_sensor_mode(s_ctrl, cfg_data.mode);
-		break;
-	case CFG_SET_EFFECT:
-		rc = mt9v113_set_effect(cfg_data.cfg.effect);
-		break;
-	case CFG_SET_ANTIBANDING:
-		rc = mt9v113_set_antibanding(cfg_data.cfg.antibanding_value);
-		break;
-	case CFG_SET_BRIGHTNESS:
-		rc = mt9v113_set_brightness(cfg_data.cfg.brightness_value);
-		break;
-	case CFG_SET_WB:
-		rc = mt9v113_set_wb(cfg_data.cfg.wb_value);
-		break;
-	case CFG_SET_SHARPNESS:
-		rc = mt9v113_set_sharpness(cfg_data.cfg.sharpness_value);
-		break;
-	case CFG_SET_SATURATION:
-		rc = mt9v113_set_saturation(cfg_data.cfg.saturation_value);
-		break;
-	case CFG_SET_CONTRAST:
-		rc = mt9v113_set_contrast(cfg_data.cfg.contrast_value);
-		break;
-	case CFG_SET_FRONT_CAMERA_MODE: 
-		rc = mt9v113_set_front_camera_mode(cfg_data.cfg.frontcam_value);
-		break;
-	case CFG_GET_ISO:
-#if 0
-		rc = mt9v113_get_iso(&cfg_data.cfg.real_iso_value);
-		if (copy_to_user((void *)argp,
-			&cfg_data, sizeof(struct sensor_cfg_data))) {
-			pr_err("%s copy to user error", __func__);
-		}
-#endif
-		break;
-	case CFG_SET_ISO:
-		rc = mt9v113_set_iso(cfg_data.cfg.iso_value);
-		break;
-	case CFG_SET_FPS:
-		rc = mt9v113_set_FPS(&(cfg_data.cfg.fps));
-		break;
-	case CFG_SENSOR_INIT:
-		break;
-	default:
-		rc = -EINVAL;
-		break;
-	}
-
-	return rc;
-}
-
-#if 0
-int mt9v113_sensor_release(void)
-{
-	int rc = 0;
-	uint16_t check_value = 0;
-	struct msm_camera_sensor_info *sdata = mt9v113_pdev->dev.platform_data;
-
-	
-	pr_info("%s: enter SW standby mode\n", __func__);
-	
-
-	
-	
-	rc = mt9v113_i2c_read_w(mt9v113_client->addr, 0x0016, &check_value);
-	if (rc < 0) {
-	  pr_err("%s: read streaming off status fail\n", __func__);
-	  goto sensor_release;
-	}
-
-	pr_info("%s: mt9v113: 0x0016 reg value = 0x%x\n",
-		__func__, check_value);
-
-	check_value = (check_value&0xFFDF);
-
-	pr_info("%s: mt9v113: Set to 0x0016 reg value = 0x%x\n",
-		__func__, check_value);
-
-	rc = mt9v113_i2c_write(mt9v113_client->addr, 0x0016,
-		check_value, WORD_LEN);
-	if (rc < 0) {
-		pr_err("%s: Enter Standby mode fail\n", __func__);
-		goto sensor_release;
-	}
-
-	mdelay(2);
-
-	if (!sdata->power_down_disable) {
-		rc = gpio_request(sdata->sensor_reset, "mt9v113");
-		if (!rc) {
-			rc = gpio_direction_output(sdata->sensor_reset, 0);
-			mdelay(2);
-		} else
-			pr_err("GPIO(%d) request faile", sdata->sensor_reset);
-		gpio_free(sdata->sensor_reset);
-	}
-
-	msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-
-	mdelay(2);
-
-	
-	if (sdata->camera_clk_switch != NULL && sdata->cam_select_pin) {
-		pr_info("%s: doing clk switch to Main CAM)\n", __func__);
-		rc = gpio_request(sdata->cam_select_pin, "mt9v113");
-		if (rc < 0)
-			pr_err("GPIO (%d) request fail\n", sdata->cam_select_pin);
-		else
-			gpio_direction_output(sdata->cam_select_pin, 0);
-		gpio_free(sdata->cam_select_pin);
-	}
-
-	mdelay(2);
-
-	if (!sdata->power_down_disable)
-		mt9v113_vreg_disable(mt9v113_pdev);
-
-sensor_release:
-	return rc;
-}
-#endif
-
-void mt9v113_stop_stream(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	return;
-}
-
-
-int32_t mt9v113_power_up(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int rc;
-	struct msm_camera_sensor_info *sdata = NULL;
-
-	pr_info("%s\n", __func__);
-	if (s_ctrl && s_ctrl->sensordata)
-		sdata = s_ctrl->sensordata;
-	else {
-		pr_err("%s: s_ctrl sensordata NULL\n", __func__);
-		return (-1);
-	}
-
-	if (sdata->camera_power_on == NULL) {
-		pr_err("sensor platform_data didn't register\n");
-		return -EIO;
-	}
-
-	rc = sdata->camera_power_on();
-	if (rc < 0) {
-		pr_err("%s failed to enable power\n", __func__);
-		goto enable_power_on_failed;
-	}
-
-	rc = mt9v113_sensor_open_init(sdata);
-	if (rc < 0) {
-		goto enable_sensor_power_up_failed;		
-	}
-	pr_info("%s end\n", __func__);
-
-	return rc;
-
-enable_sensor_power_up_failed:
-enable_power_on_failed:
-	return rc;
-}
-
-int32_t mt9v113_power_down(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int rc;
-	struct msm_camera_sensor_info *sdata = NULL;
-	pr_info("%s\n", __func__);
-
-	if (s_ctrl && s_ctrl->sensordata)
-		sdata = s_ctrl->sensordata;
-	else {
-		pr_err("%s: s_ctrl sensordata NULL\n", __func__);
-		return (-1);
-	}
-
-	if (sdata->camera_power_off == NULL) {
-		pr_err("sensor platform_data didn't register\n");
-		return -EIO;
-	}
-
-
-	rc = sdata->camera_power_off();
-	if (rc < 0)
-		pr_err("%s failed to disable power\n", __func__);
-
-	if (!sdata->use_rawchip) {
-		pr_info("%s MCLK disable clk\n", __func__);
-		msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-		if (rc < 0)
-			pr_err("%s: msm_camio_sensor_clk_off failed:%d\n",
-				 __func__, rc);
-	}
-
-	return rc;
-}
-
-static const char *mt9v113Vendor = "Micron";
-static const char *mt9v113NAME = "mt9v113";
-static const char *mt9v113Size = "VGA CMOS";
-
-static ssize_t sensor_vendor_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%s %s %s\n", mt9v113Vendor, mt9v113NAME, mt9v113Size);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static DEVICE_ATTR(sensor, 0444, sensor_vendor_show, NULL);
-
-static struct kobject *android_mt9v113;
-
-static int mt9v113_sysfs_init(void)
-{
-	int ret ;
-	pr_info("mt9v113:kobject creat and add\n");
-	android_mt9v113 = kobject_create_and_add("android_camera2", NULL);
-	if (android_mt9v113 == NULL) {
-		pr_info("mt9v113_sysfs_init: subsystem_register " \
-		"failed\n");
-		ret = -ENOMEM;
-		return ret ;
-	}
-	pr_info("mt9v113:sysfs_create_file\n");
-	ret = sysfs_create_file(android_mt9v113, &dev_attr_sensor.attr);
-	if (ret) {
-		pr_info("mt9v113_sysfs_init: sysfs_create_file " \
-		"failed\n");
-		kobject_del(android_mt9v113);
-	}
-
-	return 0 ;
-}
-
-#define SUSPEND_FAIL_RETRY_MAX 3
-
-#if 0
-static int mt9v113_sensor_probe_cb(const struct msm_camera_sensor_info *info,
-	struct v4l2_subdev *sdev, struct msm_sensor_ctrl *s)
-{
-	int rc = 0;
-
-	mt9v113_ctrl = kzalloc(sizeof(struct mt9v113_ctrl_t), GFP_KERNEL);
-	if (!mt9v113_ctrl) {
-		pr_err("mt9v113_sensor_probe failed!\n");
-		return -ENOMEM;
-	}
-
-	rc = mt9v113_sensor_probe(info, s);
-	if (rc < 0)
-		return rc;
-
-	
-	printk(KERN_DEBUG "going into v4l2_i2c_subdev_init\n");
-	if (sdev) {
-		v4l2_i2c_subdev_init(sdev, mt9v113_client,
-						&mt9v113_subdev_ops);
-		mt9v113_ctrl->sensor_dev = sdev;
-	}
-
-	return rc;
-}
-#endif
-
-
-static int mt9v113_i2c_probe(struct i2c_client *client,
-			     const struct i2c_device_id *id)
-{
-	int rc = 0;
-
-	pr_info("%s\n", __func__);
-	
-	mt9v113_sensorw = kzalloc(sizeof(struct mt9v113_work), GFP_KERNEL);
-
-	if (!mt9v113_sensorw) {
-		rc = -ENOMEM;
-		goto probe_failure;
-	}
-
-	i2c_set_clientdata(client, mt9v113_sensorw);
-	mt9v113_init_client(client);
-	mt9v113_client = client;
-
-	rc = msm_sensor_i2c_probe(client, id);
-
-	if (rc >= 0)
-		mt9v113_sysfs_init();
-	else
-		goto probe_failure;
-
-	pr_info("%s succeeded!\n", __func__);
-
-	return rc;
-
-probe_failure:
-	kfree(mt9v113_sensorw);
-	mt9v113_sensorw = NULL;
-	pr_info("%s failed!\n", __func__);
-
-	return rc;
-}
-
-static struct msm_camera_i2c_client mt9v113_sensor_i2c_client = {
-	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
-};
-
-static struct msm_sensor_id_info_t mt9v113_id_info = {
-	.sensor_id_reg_addr = 0x0,
-	.sensor_id = MT9V113_MODEL_ID,
-};
-
-static struct msm_camera_csid_vc_cfg mt9v113_cid_cfg[] = {
-	{0, CSI_YUV422_8, CSI_DECODE_8BIT},
-	{1, CSI_EMBED_DATA, CSI_DECODE_8BIT},
-	{2, CSI_RAW8, CSI_DECODE_8BIT},
-};
-
-static struct msm_camera_csi2_params mt9v113_csi_params = {
-	.csid_params = {
-		.lane_cnt = 1,
-		.lane_assign = 0xE4,
-		.lut_params = {
-			.num_cid = ARRAY_SIZE(mt9v113_cid_cfg),
-			.vc_cfg = mt9v113_cid_cfg,
-		},
-	},
-	.csiphy_params = {
-		.lane_cnt = 1,
-		.settle_cnt = 20,
-		.lane_mask = 1,
-	},
-};
-
-static struct msm_camera_csi2_params *mt9v113_csi_params_array[] = {
-	&mt9v113_csi_params,
-	&mt9v113_csi_params,
-	&mt9v113_csi_params,
-	&mt9v113_csi_params,
-};
-
-static struct v4l2_subdev_info mt9v113_subdev_info[] = {
-	{
-	.code   = V4L2_MBUS_FMT_YUYV8_2X8,
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	.fmt    = 1,
-	.order    = 0,
-	},
-	
-};
-
-static struct v4l2_subdev_core_ops mt9v113_subdev_core_ops = {
-	.ioctl = msm_sensor_subdev_ioctl,
-	.s_power = msm_sensor_power,
-};
-
-static struct v4l2_subdev_video_ops mt9v113_subdev_video_ops = {
-	.enum_mbus_fmt = msm_sensor_v4l2_enum_fmt,
-};
-
-static struct v4l2_subdev_ops mt9v113_subdev_ops = {
-	.core = &mt9v113_subdev_core_ops,
-	.video  = &mt9v113_subdev_video_ops,
-};
-
-static struct msm_sensor_fn_t mt9v113_func_tbl = {
-	.sensor_stop_stream = mt9v113_stop_stream,
-	.sensor_setting = msm_sensor_setting,
-	.sensor_set_sensor_mode = msm_sensor_set_sensor_mode,
-	.sensor_mode_init = msm_sensor_mode_init,
-	.sensor_get_output_info = msm_sensor_get_output_info,
-	.sensor_config = mt9v113_sensor_config,
-	.sensor_power_up = mt9v113_power_up,
-	.sensor_power_down = mt9v113_power_down,
-};
-
-static const struct i2c_device_id mt9v113_i2c_id[] = {
-	{"mt9v113", (kernel_ulong_t)&mt9v113_s_ctrl},
-	{},
-};
-
-static struct i2c_driver mt9v113_i2c_driver = {
-	.id_table = mt9v113_i2c_id,
-	.probe  = mt9v113_i2c_probe,
-	.driver = {
-		.name = SENSOR_NAME,
-	},
-};
-
-static struct msm_sensor_reg_t mt9v113_sensor_regs = {
-	.default_data_type = MSM_CAMERA_I2C_BYTE_DATA,
-	.output_settings = &mt9v113_dimensions[0],
-};
-
-
-static struct msm_sensor_ctrl_t mt9v113_s_ctrl = {
-	.msm_sensor_reg = &mt9v113_sensor_regs,
-	.sensor_i2c_client = &mt9v113_sensor_i2c_client,
-	.sensor_i2c_addr = 0x78,
-	.sensor_id_info = &mt9v113_id_info,
-	.cam_mode = MSM_SENSOR_MODE_INVALID,
-	.csi_params = &mt9v113_csi_params_array[0],
-	.msm_sensor_mutex = &mt9v113_mut,
-	.sensor_i2c_driver = &mt9v113_i2c_driver,
-	.sensor_v4l2_subdev_info = mt9v113_subdev_info,
-	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(mt9v113_subdev_info),
-	.sensor_v4l2_subdev_ops = &mt9v113_subdev_ops,
-	.func_tbl = &mt9v113_func_tbl,
-};
-
-static int __init mt9v113_init(void)
-{
-	pr_info("mt9v113_init\n");
-	return i2c_add_driver(&mt9v113_i2c_driver);
-}
-
-module_init(mt9v113_init);
-
-void mt9v113_exit(void)
-{
-	i2c_del_driver(&mt9v113_i2c_driver);
-}
-MODULE_DESCRIPTION("Micron 0.3 MP YUV sensor driver");
-MODULE_LICENSE("GPL v2");
-
diff --git a/drivers/media/video/msm/sensors/s5k3h1gx_v4l2.c b/drivers/media/video/msm/sensors/s5k3h1gx_v4l2.c
deleted file mode 100644
index 712bce9..0000000
--- a/drivers/media/video/msm/sensors/s5k3h1gx_v4l2.c
+++ /dev/null
@@ -1,1023 +0,0 @@
-/* Copyright (c) ?
- * Copyright (c) 2013 Sebastian Sobczyk <sebastiansobczyk@wp.pl>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include "msm_sensor.h"
-
-#ifdef CONFIG_RAWCHIP
-#include "rawchip/rawchip.h"
-#endif
-
-#define SENSOR_NAME "s5k3h1gx"
-#define PLATFORM_DRIVER_NAME "msm_camera_s5k3h1gx"
-
-#define S5K3H1GX_REG_READ_MODE 0x0101
-#define S5K3H1GX_READ_NORMAL_MODE 0x0000	
-#define S5K3H1GX_READ_MIRROR 0x0001			
-#define S5K3H1GX_READ_FLIP 0x0002			
-#define S5K3H1GX_READ_MIRROR_FLIP 0x0003	
-
-DEFINE_MUTEX(s5k3h1gx_mut);
-DEFINE_MUTEX(s5k3h1gx_sensor_init_mut); 
-static struct msm_sensor_ctrl_t s5k3h1gx_s_ctrl;
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_start_settings[] = {
-	{0x0100, 0x01},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_stop_settings[] = {
-	{0x0100, 0x00},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_groupon_settings[] = {
-	{0x104, 0x01},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_groupoff_settings[] = {
-	{0x104, 0x00},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_mipi_settings[] = {
-	{0x3065, 0x35},
-	{0x310E, 0x00},
-	{0x3098, 0xAB},
-	{0x30C7, 0x0A},
-	{0x309A, 0x01},
-	{0x310D, 0xC6},
-	{0x30C3, 0x40},
-	{0x30BB, 0x02},
-	{0x30BC, 0x38},
-	{0x30BD, 0x40},
-	{0x3110, 0x70},
-	{0x3111, 0x80},
-	{0x3112, 0x7B},
-	{0x3113, 0xC0},
-	{0x30C7, 0x1A},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_pll_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_prev_settings[] = {
-	
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x6C},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xB0},
-	{0x31A1, 0x56},
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xDB},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-	{0x0340, 0x04},
-	{0x0341, 0xE0},
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0x00},
-	{0x0348, 0x0C},
-	{0x0349, 0xCD},
-	{0x034A, 0x09},
-	{0x034B, 0x9F},
-	{0x0381, 0x01},
-	{0x0383, 0x03},
-	{0x0385, 0x01},
-	{0x0387, 0x03},
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x06},
-	{0x034D, 0x68},
-	{0x034E, 0x04},
-	{0x034F, 0xD0},
-	{0x300E, 0xED},
-	{0x301D, 0x80},
-	{0x301A, 0x77},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_video_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-	{0x0344, 0x00}, 
-	{0x0345, 0x62},
-	{0x0346, 0x01}, 
-	{0x0347, 0x6C},
-	{0x0348, 0x0C}, 
-	{0x0349, 0x6D},
-	{0x034A, 0x08}, 
-	{0x034B, 0x33},
-	{0x0381, 0x01}, 
-	{0x0383, 0x01}, 
-	{0x0385, 0x01}, 
-	{0x0387, 0x01}, 
-	{0x0105, 0x01}, 
-	{0x0401, 0x00}, 
-	{0x0405, 0x10},
-	{0x0700, 0x05}, 
-	{0x0701, 0x30},
-	{0x034C, 0x0C}, 
-	{0x034D, 0x0C},
-	{0x034E, 0x06}, 
-	{0x034F, 0xC8},
-	{0x0200, 0x02}, 
-	{0x0201, 0x50},
-	{0x0202, 0x04}, 
-	{0x0203, 0xDB},
-	{0x0204, 0x00}, 
-	{0x0205, 0x20},
-	{0x0342, 0x0D}, 
-	{0x0343, 0x8E},
-	{0x0340, 0x06}, 
-	{0x0341, 0xD8},
-	{0x300E, 0x29}, 
-	{0x31A3, 0x00}, 
-	{0x301A, 0x77}, 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_fast_video_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0xD4},
-	{0x0348, 0x0C},
-	{0x0349, 0xCD},
-	{0x034A, 0x08},
-	{0x034B, 0xCB},
-	{0x0381, 0x01},
-	{0x0383, 0x03},
-	{0x0385, 0x01},
-	{0x0387, 0x07},
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x06},
-	{0x034D, 0x68},
-	{0x034E, 0x01},
-	{0x034F, 0xFE},
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x01},
-	{0x0203, 0x39},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-	{0x0340, 0x02},
-	{0x0341, 0x0E},
-	{0x300E, 0x2D},
-	{0x31A3, 0x40},
-	{0x301A, 0xA7},
-	{0x3053, 0xCB}, 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_snap_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xE7},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-	{0x0340, 0x09},
-	{0x0341, 0xC0},
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0x00},
-	{0x0348, 0x0C},
-	{0x0349, 0xCF},
-	{0x034A, 0x09},
-	{0x034B, 0x9F},
-	{0x0381, 0x01},
-	{0x0383, 0x01},
-	{0x0385, 0x01},
-	{0x0387, 0x01},
-	{0x0105, 0x01}, 
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x0C},
-	{0x034D, 0xD0},
-	{0x034E, 0x09},
-	{0x034F, 0xA0},
-	{0x300E, 0x29}, 
-	{0x31A3, 0x00}, 
-	{0x301A, 0x77}, 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_4_3_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xE7},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-	{0x0340, 0x09},
-	{0x0341, 0xC0},
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0x00},
-	{0x0348, 0x0C},
-	{0x0349, 0xCF},
-	{0x034A, 0x09},
-	{0x034B, 0x9F},
-	{0x0381, 0x01},
-	{0x0383, 0x01},
-	{0x0385, 0x01},
-	{0x0387, 0x01},
-	{0x0105, 0x01}, 
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x0C},
-	{0x034D, 0xD0},
-	{0x034E, 0x09},
-	{0x034F, 0xA0},
-	{0x300E, 0x29}, 
-	{0x31A3, 0x00}, 
-	{0x301A, 0x77}, 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_snap_wide_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x01},
-	{0x0347, 0x30},
-	{0x0348, 0x0C},
-	{0x0349, 0xCF},
-	{0x034A, 0x08},
-	{0x034B, 0x6F},
-	{0x0381, 0x01},
-	{0x0383, 0x01},
-	{0x0385, 0x01},
-	{0x0387, 0x01},
-	{0x0105, 0x01}, 
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x0C},
-	{0x034D, 0xD0},
-	{0x034E, 0x07},
-	{0x034F, 0x40},
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xDB},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-	{0x0340, 0x09},
-	{0x0341, 0x60},
-	{0x300E, 0x29},
-	{0x31A3, 0x00},
-	{0x301A, 0xA7},
-	{0x3053, 0xCB},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_night_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0x00},
-	{0x0348, 0x0C},
-	{0x0349, 0xCD},
-	{0x034A, 0x09},
-	{0x034B, 0x9F},
-	{0x0381, 0x01},
-	{0x0383, 0x03},
-	{0x0385, 0x01},
-	{0x0387, 0x03},
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x06},
-	{0x034D, 0x68},
-	{0x034E, 0x04},
-	{0x034F, 0xD0},
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xDB},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-	{0x0340, 0x04},
-	{0x0341, 0xE0},
-	{0x0340, 0x04},
-	{0x0341, 0xE0},
-	{0x300E, 0x2D},
-	{0x31A3, 0x40},
-	{0x301A, 0xA7},
-	{0x3053, 0xCF},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h1gx_recommend_settings[] = {
-	{0x3000, 0x08},
-	{0x3001, 0x05},
-	{0x3002, 0x0D},
-	{0x3003, 0x21},
-	{0x3004, 0x62},
-	{0x3005, 0x0B},
-	{0x3006, 0x6D},
-	{0x3007, 0x02},
-	{0x3008, 0x62},
-	{0x3009, 0x62},
-	{0x300A, 0x41},
-	{0x300B, 0x10},
-	{0x300C, 0x21},
-	{0x300D, 0x04},
-	{0x307E, 0x03},
-	{0x307F, 0xA5},
-	{0x3080, 0x04},
-	{0x3081, 0x29},
-	{0x3082, 0x03},
-	{0x3083, 0x21},
-	{0x3011, 0x5F},
-	{0x3156, 0xE2},
-	{0x3027, 0x0E},
-	{0x300f, 0x02},
-	{0x3010, 0x10},
-	{0x3017, 0x74},
-	{0x3018, 0x00},
-	{0x3020, 0x02},
-	{0x3021, 0x24},
-	{0x3023, 0x80},
-	{0x3024, 0x04},
-	{0x3025, 0x08},
-	{0x301C, 0xD4},
-	{0x315D, 0x00},
-	{0x300E, 0x29},
-	{0x31A3, 0x00},
-	{0x301A, 0xA7},
-	{0x3053, 0xCF},
-	{0x3054, 0x00},
-	{0x3055, 0x35},
-	{0x3062, 0x04},
-	{0x3063, 0x38},
-	{0x31A4, 0x04},
-	{0x3016, 0x54},
-	{0x3157, 0x02},
-	{0x3158, 0x00},
-	{0x315B, 0x02},
-	{0x315C, 0x00},
-	{0x301B, 0x05},
-	{0x3028, 0x41},
-	{0x302A, 0x00},
-	{0x3060, 0x01},
-	{0x302D, 0x19},
-	{0x302B, 0x04},
-	{0x3072, 0x13},
-	{0x3073, 0x21},
-	{0x3074, 0x82},
-	{0x3075, 0x20},
-	{0x3076, 0xA2},
-	{0x3077, 0x02},
-	{0x3078, 0x91},
-	{0x3079, 0x91},
-	{0x307A, 0x61},
-	{0x307B, 0x28},
-	{0x307C, 0x31},
-};
-
-static struct v4l2_subdev_info s5k3h1gx_subdev_info[] = {
-	{
-	.code  = V4L2_MBUS_FMT_SBGGR10_1X10,
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	.fmt   = 1,
-	.order = 0,
-	},
-};
-
-static struct msm_camera_i2c_conf_array s5k3h1gx_init_conf[] = {
-	{&s5k3h1gx_mipi_settings[0],
-	ARRAY_SIZE(s5k3h1gx_mipi_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_recommend_settings[0],
-	ARRAY_SIZE(s5k3h1gx_recommend_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_pll_settings[0],
-	ARRAY_SIZE(s5k3h1gx_pll_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-};
-
-static struct msm_camera_i2c_conf_array s5k3h1gx_confs[] = {
-	{&s5k3h1gx_snap_settings[0],
-	ARRAY_SIZE(s5k3h1gx_snap_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_prev_settings[0],
-	ARRAY_SIZE(s5k3h1gx_prev_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_video_settings[0],
-	ARRAY_SIZE(s5k3h1gx_video_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_fast_video_settings[0],
-	ARRAY_SIZE(s5k3h1gx_fast_video_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_snap_wide_settings[0],
-	ARRAY_SIZE(s5k3h1gx_snap_wide_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_4_3_settings[0],
-	ARRAY_SIZE(s5k3h1gx_4_3_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h1gx_night_settings[0],
-	ARRAY_SIZE(s5k3h1gx_night_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-};
-
-static struct msm_sensor_output_info_t s5k3h1gx_dimensions[] = {
-	{
-		.x_output = 0xCD0,
-		.y_output = 0x9A0,
-		.line_length_pclk = 0xD8E,
-		.frame_length_lines = 0x9C0,
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCF,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-	},
-	{
-		.x_output = 0x668,
-		.y_output = 0x4D0,
-		.line_length_pclk = 0xD8E,
-		.frame_length_lines = 0x4E0,
-		.vt_pixel_clk = 129600000,
-		.op_pixel_clk = 129600000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCD,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 3,
-		.y_even_inc = 1,
-		.y_odd_inc = 3,
-	},
-	{
-		.x_output = 0xC0C,
-		.y_output = 0x6C8,
-		.line_length_pclk = 0xD8E,
-		.frame_length_lines = 0x6D8,
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0x062,
-		.y_addr_start = 0x16C,
-		.x_addr_end = 0xC6D,
-		.y_addr_end = 0x833,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-	},
-	{
-		.x_output = 0x668,
-		.y_output = 0x1FE,
-		.line_length_pclk = 0xD8E,
-		.frame_length_lines = 0x20E,
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0x0D4,
-		.x_addr_end = 0xCCD,
-		.y_addr_end = 0x8CB,
-		.x_even_inc = 1,
-		.x_odd_inc = 3,
-		.y_even_inc = 1,
-		.y_odd_inc = 7,
-	},
-	{
-		.x_output = 0xCD0,
-		.y_output = 0x740,
-		.line_length_pclk = 0xD8E,
-		.frame_length_lines = 0x960,  
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0x0130,
-		.x_addr_end = 0xCCF,
-		.y_addr_end = 0x86F,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-	},
-	{
-		.x_output = 0xCD0,
-		.y_output = 0x9A0,
-		.line_length_pclk = 0xD8E,
-		.frame_length_lines = 0x9C0,
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCF,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-	},
-	{
-		.x_output = 0x668,
-		.y_output = 0x4D0,
-		.line_length_pclk = 0xD8E,
-		.frame_length_lines = 0x4E0,
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCD,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 3,
-		.y_even_inc = 1,
-		.y_odd_inc = 3,
-	},
-};
-
-static struct msm_camera_csi_params s5k3h1gx_csi_params = {
-	.data_format = CSI_RAW10,
-	.lane_cnt    = 2,
-	.lane_assign = 0xe4,
-	.dpcm_scheme = 0,
-	.settle_cnt  = 0x2a,
-};
-
-static struct msm_camera_csi_params *s5k3h1gx_csi_params_array[] = {
-	&s5k3h1gx_csi_params,
-	&s5k3h1gx_csi_params,
-	&s5k3h1gx_csi_params,
-	&s5k3h1gx_csi_params,
-	&s5k3h1gx_csi_params,
-	&s5k3h1gx_csi_params,
-};
-
-static struct msm_sensor_output_reg_addr_t s5k3h1gx_reg_addr = {
-	.x_output = 0x34C,
-	.y_output = 0x34E,
-	.line_length_pclk = 0x342,
-	.frame_length_lines = 0x340,
-};
-
-static struct msm_sensor_id_info_t s5k3h1gx_id_info = {
-	.sensor_id_reg_addr = 0x0,
-	.sensor_id = 0x3810,
-};
-
-static struct msm_sensor_exp_gain_info_t s5k3h1gx_exp_gain_info = {
-	.coarse_int_time_addr = 0x202,
-	.global_gain_addr = 0x204,
-	.vert_offset = 16,
-	.min_vert = 4,  
-	.sensor_max_linecount = 65519,  
-};
-
-static int s5k3h1gx_sensor_open_init(const struct msm_camera_sensor_info *data)
-{
-	int rc = 0;
-	uint16_t value = 0;
-
-	if (data->sensor_platform_info)
-		s5k3h1gx_s_ctrl.mirror_flip = data->sensor_platform_info->mirror_flip;
-
-	if (s5k3h1gx_s_ctrl.mirror_flip == CAMERA_SENSOR_MIRROR_FLIP)
-		value = S5K3H1GX_READ_MIRROR_FLIP;
-	else if (s5k3h1gx_s_ctrl.mirror_flip == CAMERA_SENSOR_MIRROR)
-		value = S5K3H1GX_READ_MIRROR;
-	else if (s5k3h1gx_s_ctrl.mirror_flip == CAMERA_SENSOR_FLIP)
-		value = S5K3H1GX_READ_FLIP;
-	else
-		value = S5K3H1GX_READ_NORMAL_MODE;
-	msm_camera_i2c_write(s5k3h1gx_s_ctrl.sensor_i2c_client,
-		S5K3H1GX_REG_READ_MODE, value, MSM_CAMERA_I2C_BYTE_DATA);
-
-	return rc;
-}
-
-static const char *s5k3h1gxVendor = "samsung";
-static const char *s5k3h1gxNAME = "s5k3h1gx";
-static const char *s5k3h1gxSize = "8M";
-
-static ssize_t sensor_vendor_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%s %s %s\n", s5k3h1gxVendor, s5k3h1gxNAME, s5k3h1gxSize);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static ssize_t lens_info_show(struct device *dev,
-  struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-	int lens_info = 6;
-
-	sprintf(buf, "%d\n", lens_info);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static DEVICE_ATTR(sensor, 0444, sensor_vendor_show, NULL);
-static DEVICE_ATTR(lensinfo, 0444, lens_info_show, NULL);
-
-static struct kobject *android_s5k3h1gx;
-
-static int s5k3h1gx_sysfs_init(void)
-{
-	int ret ;
-	pr_info("s5k3h1gx:kobject creat and add\n");
-	android_s5k3h1gx = kobject_create_and_add("android_camera", NULL);
-	if (android_s5k3h1gx == NULL) {
-		pr_info("s5k3h1gx_sysfs_init: subsystem_register " \
-		"failed\n");
-		ret = -ENOMEM;
-		return ret ;
-	}
-	pr_info("s5k3h1gx:sysfs_create_file\n");
-	ret = sysfs_create_file(android_s5k3h1gx, &dev_attr_sensor.attr);
-	if (ret) {
-		pr_info("s5k3h1gx_sysfs_init: sysfs_create_file " \
-		"failed\n");
-		kobject_del(android_s5k3h1gx);
-	}
-	pr_info("s5k3h1gx:sysfs_create_file lensinfo\n");
-	ret = sysfs_create_file(android_s5k3h1gx, &dev_attr_lensinfo.attr);
-	if (ret) {
-		pr_info("s5k3h1gx_sysfs_init: dev_attr_lensinfo failed\n");
-		kobject_del(android_s5k3h1gx);
-	}
-
-	return 0 ;
-}
-
-static struct msm_camera_i2c_client s5k3h1gx_sensor_i2c_client = {
-	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
-};
-
-int32_t s5k3h1gx_power_up(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int rc;
-	struct msm_camera_sensor_info *sdata = NULL;
-
-	pr_info("%s\n", __func__);
-	if (s_ctrl && s_ctrl->sensordata)
-		sdata = s_ctrl->sensordata;
-	else {
-		pr_err("%s: s_ctrl sensordata NULL\n", __func__);
-		return (-1);
-	}
-
-	if (sdata->camera_power_on == NULL) {
-		pr_err("sensor platform_data didnt register\n");
-		return -EIO;
-	}
-
-	if (!sdata->use_rawchip) {
-		rc = msm_camio_clk_enable(CAMIO_CAM_MCLK_CLK);
-		if (rc < 0) {
-			pr_err("%s: msm_camio_sensor_clk_on failed:%d\n",
-			 __func__, rc);
-			goto enable_mclk_failed;
-		}
-	}
-
-	rc = sdata->camera_power_on();
-	if (rc < 0) {
-		pr_err("%s failed to enable power\n", __func__);
-		goto enable_power_on_failed;
-	}
-
-	rc = msm_sensor_set_power_up(s_ctrl);
-	if (rc < 0) {
-		pr_err("%s msm_sensor_power_up failed\n", __func__);
-		goto enable_sensor_power_up_failed;
-	}
-
-	s5k3h1gx_sensor_open_init(sdata);
-	pr_info("%s end\n", __func__);
-
-	return rc;
-
-enable_sensor_power_up_failed:
-	if (sdata->camera_power_off == NULL)
-		pr_err("sensor platform_data didnt register\n");
-	else
-		sdata->camera_power_off();
-enable_power_on_failed:
-	msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-enable_mclk_failed:
-	return rc;
-}
-
-int32_t s5k3h1gx_power_down(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int rc;
-	struct msm_camera_sensor_info *sdata = NULL;
-	pr_info("%s\n", __func__);
-
-	if (s_ctrl && s_ctrl->sensordata)
-		sdata = s_ctrl->sensordata;
-	else {
-		pr_err("%s: s_ctrl sensordata NULL\n", __func__);
-		return (-1);
-	}
-
-	if (sdata->camera_power_off == NULL) {
-		pr_err("sensor platform_data didnt register\n");
-		return -EIO;
-	}
-
-	rc = sdata->camera_power_off();
-	if (rc < 0)
-		pr_err("%s failed to disable power\n", __func__);
-
-	rc = msm_sensor_set_power_down(s_ctrl);
-	if (rc < 0)
-		pr_err("%s msm_sensor_power_down failed\n", __func__);
-
-	if (!sdata->use_rawchip) {
-		msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-		if (rc < 0)
-			pr_err("%s: msm_camio_sensor_clk_off failed:%d\n",
-				 __func__, rc);
-	}
-
-	return rc;
-}
-
-int32_t s5k3h1gx_i2c_probe(struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	int	rc = 0;
-	pr_info("%s\n", __func__);
-	rc = msm_sensor_i2c_probe(client, id);
-	if(rc >= 0)
-		s5k3h1gx_sysfs_init();
-	pr_info("%s: rc(%d)\n", __func__, rc);
-	return rc;
-}
-
-static const struct i2c_device_id s5k3h1gx_i2c_id[] = {
-	{SENSOR_NAME, (kernel_ulong_t)&s5k3h1gx_s_ctrl},
-	{ }
-};
-
-static struct i2c_driver s5k3h1gx_i2c_driver = {
-	.id_table = s5k3h1gx_i2c_id,
-	.probe  = s5k3h1gx_i2c_probe,
-	.driver = {
-		.name = SENSOR_NAME,
-	},
-};
-
-static int __init msm_sensor_init_module(void)
-{
-	pr_info("%s\n", __func__);
-	return i2c_add_driver(&s5k3h1gx_i2c_driver);
-}
-
-static struct v4l2_subdev_core_ops s5k3h1gx_subdev_core_ops = {
-	.ioctl = msm_sensor_subdev_ioctl,
-	.s_power = msm_sensor_power,
-};
-
-static struct v4l2_subdev_video_ops s5k3h1gx_subdev_video_ops = {
-	.enum_mbus_fmt = msm_sensor_v4l2_enum_fmt,
-};
-
-static struct v4l2_subdev_ops s5k3h1gx_subdev_ops = {
-	.core = &s5k3h1gx_subdev_core_ops,
-	.video  = &s5k3h1gx_subdev_video_ops,
-};
-
-static int s5k3h1gx_read_fuseid(struct sensor_cfg_data *cdata,
-	struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t  rc;
-	unsigned short i, R1, R2, R3;
-	unsigned short  OTP[10] = {0};
-
-	struct msm_camera_i2c_client *s5k3h1gx_msm_camera_i2c_client = s_ctrl->sensor_i2c_client;
-
-	pr_info("%s: sensor OTP information:\n", __func__);
-
-	rc = msm_camera_i2c_write_b(s5k3h1gx_msm_camera_i2c_client, 0x3124, 0x10);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x3124 fail\n", __func__);
-
-	
-	rc = msm_camera_i2c_write_b(s5k3h1gx_msm_camera_i2c_client, 0x3127, 0xF1);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x3127 (Start) fail\n", __func__);
-
-	mdelay(4);
-
-	for (i = 0; i < 10; i++) {
-		rc = msm_camera_i2c_write_b(s5k3h1gx_msm_camera_i2c_client, 0x312B, i);
-		if (rc < 0)
-			pr_err("%s: i2c_write_b 0x312B fail\n", __func__);
-
-		rc = msm_camera_i2c_read_b(s5k3h1gx_msm_camera_i2c_client, 0x312C, &R1);
-		if (rc < 0)
-			pr_err("%s: i2c_read_b 0x310C fail\n", __func__);
-
-		rc = msm_camera_i2c_read_b(s5k3h1gx_msm_camera_i2c_client, 0x312D, &R2);
-		if (rc < 0)
-			pr_err("%s: i2c_read_b 0x312D fail\n", __func__);
-
-		rc = msm_camera_i2c_read_b(s5k3h1gx_msm_camera_i2c_client, 0x312E, &R3);
-		if (rc < 0)
-			pr_err("%s: i2c_read_b 0x312E fail\n", __func__);
-
-		if ((R3&0x0F) != 0)
-			OTP[i] = (short)(R3&0x0F);
-		else if ((R3>>4) != 0)
-			OTP[i] = (short)(R3>>4);
-		else if ((R2&0x0F) != 0)
-			OTP[i] = (short)(R2&0x0F);
-		else if ((R2>>4) != 0)
-			OTP[i] = (short)(R2>>4);
-		else if ((R1&0x0F) != 0)
-			OTP[i] = (short)(R1&0x0F);
-	}
-
-	pr_info("%s: VenderID=%x,LensID=%x,SensorID=%x%x\n", __func__,
-		OTP[0], OTP[1], OTP[2], OTP[3]);
-	pr_info("%s: ModuleFuseID= %x%x%x%x%x%x\n", __func__,
-		OTP[4], OTP[5], OTP[6], OTP[7], OTP[8], OTP[9]);
-
-    cdata->cfg.fuse.fuse_id_word1 = 0;
-    cdata->cfg.fuse.fuse_id_word2 = 0;
-	cdata->cfg.fuse.fuse_id_word3 = (OTP[0]);
-	cdata->cfg.fuse.fuse_id_word4 =
-		(OTP[4]<<20) |
-		(OTP[5]<<16) |
-		(OTP[6]<<12) |
-		(OTP[7]<<8) |
-		(OTP[8]<<4) |
-		(OTP[9]);
-
-	pr_info("s5k3h1gx: fuse->fuse_id_word1:%d\n",
-		cdata->cfg.fuse.fuse_id_word1);
-	pr_info("s5k3h1gx: fuse->fuse_id_word2:%d\n",
-		cdata->cfg.fuse.fuse_id_word2);
-	pr_info("s5k3h1gx: fuse->fuse_id_word3:0x%08x\n",
-		cdata->cfg.fuse.fuse_id_word3);
-	pr_info("s5k3h1gx: fuse->fuse_id_word4:0x%08x\n",
-		cdata->cfg.fuse.fuse_id_word4);
-	return 0;
-}
-
-static struct msm_sensor_fn_t s5k3h1gx_func_tbl = {
-	.sensor_start_stream = msm_sensor_start_stream,
-	.sensor_stop_stream = msm_sensor_stop_stream,
-	.sensor_group_hold_on = msm_sensor_group_hold_on,
-	.sensor_group_hold_off = msm_sensor_group_hold_off,
-	.sensor_set_fps = msm_sensor_set_fps,
-	.sensor_write_exp_gain_ex = msm_sensor_write_exp_gain2_ex,
-	.sensor_write_snapshot_exp_gain_ex = msm_sensor_write_exp_gain2_ex,
-	.sensor_setting = msm_sensor_setting1,
-	.sensor_set_sensor_mode = msm_sensor_set_sensor_mode,
-	.sensor_mode_init = msm_sensor_mode_init,
-	.sensor_get_output_info = msm_sensor_get_output_info,
-	.sensor_config = msm_sensor_config,
-	.sensor_power_up = s5k3h1gx_power_up,
-	.sensor_power_down = s5k3h1gx_power_down,
-	.sensor_i2c_read_fuseid = s5k3h1gx_read_fuseid,
-};
-
-static struct msm_sensor_reg_t s5k3h1gx_regs = {
-	.default_data_type = MSM_CAMERA_I2C_BYTE_DATA,
-	.start_stream_conf = s5k3h1gx_start_settings,
-	.start_stream_conf_size = ARRAY_SIZE(s5k3h1gx_start_settings),
-	.stop_stream_conf = s5k3h1gx_stop_settings,
-	.stop_stream_conf_size = ARRAY_SIZE(s5k3h1gx_stop_settings),
-	.group_hold_on_conf = s5k3h1gx_groupon_settings,
-	.group_hold_on_conf_size = ARRAY_SIZE(s5k3h1gx_groupon_settings),
-	.group_hold_off_conf = s5k3h1gx_groupoff_settings,
-	.group_hold_off_conf_size =
-		ARRAY_SIZE(s5k3h1gx_groupoff_settings),
-	.init_settings = &s5k3h1gx_init_conf[0],
-	.init_size = ARRAY_SIZE(s5k3h1gx_init_conf),
-	.mode_settings = &s5k3h1gx_confs[0],
-	.output_settings = &s5k3h1gx_dimensions[0],
-	.num_conf = ARRAY_SIZE(s5k3h1gx_confs),
-};
-
-static struct msm_sensor_ctrl_t s5k3h1gx_s_ctrl = {
-	.msm_sensor_reg = &s5k3h1gx_regs,
-	.sensor_i2c_client = &s5k3h1gx_sensor_i2c_client,
-	.sensor_i2c_addr = 0x20,
-	.sensor_output_reg_addr = &s5k3h1gx_reg_addr,
-	.sensor_id_info = &s5k3h1gx_id_info,
-	.sensor_exp_gain_info = &s5k3h1gx_exp_gain_info,
-	.cam_mode = MSM_SENSOR_MODE_INVALID,
-	.csic_params = &s5k3h1gx_csi_params_array[0],
-	.msm_sensor_mutex = &s5k3h1gx_mut,
-	.sensor_i2c_driver = &s5k3h1gx_i2c_driver,
-	.sensor_v4l2_subdev_info = s5k3h1gx_subdev_info,
-	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(s5k3h1gx_subdev_info),
-	.sensor_v4l2_subdev_ops = &s5k3h1gx_subdev_ops,
-	.func_tbl = &s5k3h1gx_func_tbl,
-	.sensor_first_mutex = &s5k3h1gx_sensor_init_mut, 
-};
-
-module_init(msm_sensor_init_module);
-MODULE_DESCRIPTION("Samsung 8 MP Bayer sensor driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/sensors/s5k3h2yx_v4l2.c b/drivers/media/video/msm/sensors/s5k3h2yx_v4l2.c
deleted file mode 100644
index 94203d9..0000000
--- a/drivers/media/video/msm/sensors/s5k3h2yx_v4l2.c
+++ /dev/null
@@ -1,1617 +0,0 @@
-#include "msm_sensor.h"
-
-#ifdef CONFIG_RAWCHIP
-#include "rawchip/rawchip.h"
-#endif
-
-#define SENSOR_NAME "s5k3h2yx"
-#define PLATFORM_DRIVER_NAME "msm_camera_s5k3h2yx"
-#define s5k3h2yx_obj s5k3h2yx_##obj
-
-#define S5K3H2YX_REG_READ_MODE 0x0101
-#define S5K3H2YX_READ_NORMAL_MODE 0x0000	
-#define S5K3H2YX_READ_MIRROR 0x0001			
-#define S5K3H2YX_READ_FLIP 0x0002			
-#define S5K3H2YX_READ_MIRROR_FLIP 0x0003	
-
-#define DEFAULT_VCM_MAX 73
-#define DEFAULT_VCM_MED 35
-#define DEFAULT_VCM_MIN 8
-
-
-DEFINE_MUTEX(s5k3h2yx_mut);
-DEFINE_MUTEX(s5k3h2yx_sensor_init_mut); 
-static struct msm_sensor_ctrl_t s5k3h2yx_s_ctrl;
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_start_settings[] = {
-	{0x0100, 0x01},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_stop_settings[] = {
-	{0x0100, 0x00},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_groupon_settings[] = {
-	{0x104, 0x01},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_groupoff_settings[] = {
-	{0x104, 0x00},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_mipi_settings[] = {
-	{0x3065, 0x35},
-	{0x310E, 0x00},
-	{0x3098, 0xAB},
-	{0x30C7, 0x0A},
-	{0x309A, 0x01},
-	{0x310D, 0xC6},
-	{0x30C3, 0x40},
-	{0x30BB, 0x02},
-	{0x30BC, 0x38},
-	{0x30BD, 0x40},
-	{0x3110, 0x70},
-	{0x3111, 0x80},
-	{0x3112, 0x7B},
-	{0x3113, 0xC0},
-	{0x30C7, 0x1A},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_pll_settings[] = {
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_prev_settings[] = {
-	
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x6C},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xB0},
-	{0x31A1, 0x56},
-
-	
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xDB},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-#ifdef CONFIG_RAWCHIP
-	{0x0340, 0x04},
-	{0x0341, 0xF4},
-#else
-	{0x0340, 0x04},
-	{0x0341, 0xE0},
-#endif
-	
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0x00},
-	{0x0348, 0x0C},
-	{0x0349, 0xCD},
-	{0x034A, 0x09},
-	{0x034B, 0x9F},
-	{0x0381, 0x01},
-	{0x0383, 0x03},
-	{0x0385, 0x01},
-	{0x0387, 0x03},
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x06},
-	{0x034D, 0x68},
-	{0x034E, 0x04},
-	{0x034F, 0xD0},
-	
-	{0x300E, 0xED},
-	{0x301D, 0x80},
-	{0x301A, 0x77},
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_video_settings[] = {
-	
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-
-	{ 0x0344 , 0x00 }, 
-	{ 0x0345 , 0x62 },
-	{ 0x0346 , 0x01 }, 
-	{ 0x0347 , 0x6C },
-	{ 0x0348 , 0x0C }, 
-	{ 0x0349 , 0x6D },
-	{ 0x034A , 0x08 }, 
-	{ 0x034B , 0x33 },
-	{ 0x0381 , 0x01 }, 
-	{ 0x0383 , 0x01 }, 
-	{ 0x0385 , 0x01 }, 
-	{ 0x0387 , 0x01 }, 
-	{ 0x0105 , 0x01 }, 
-	{ 0x0401 , 0x00 }, 
-	{ 0x0405 , 0x10 },
-	{ 0x0700 , 0x05 }, 
-	{ 0x0701 , 0x30 },
-	{ 0x034C , 0x0C }, 
-	{ 0x034D , 0x0C },
-	{ 0x034E , 0x06 }, 
-	{ 0x034F , 0xC8 },
-	{ 0x0200 , 0x02 }, 
-	{ 0x0201 , 0x50 },
-	{ 0x0202 , 0x04 }, 
-	{ 0x0203 , 0xDB },
-	{ 0x0204 , 0x00 }, 
-	{ 0x0205 , 0x20 },
-	{ 0x0342 , 0x0D }, 
-	{ 0x0343 , 0x8E },
-#ifdef CONFIG_RAWCHIP
-	{ 0x0340 , 0x06 }, 
-	{ 0x0341 , 0xEC },
-#else
-	{ 0x0340 , 0x06 }, 
-	{ 0x0341 , 0xD8 },
-#endif
-
-	
-	{ 0x300E , 0x29 }, 
-	{ 0x31A3 , 0x00 }, 
-	{ 0x301A , 0x77 }, 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_fast_video_settings[] = {
-#if 0
-  {0x0305, 0x04}, 
-  {0x0306, 0x00}, 
-  {0x0307, 0x98}, 
-  {0x0303, 0x01}, 
-  {0x0301, 0x05}, 
-  {0x030B, 0x01}, 
-  {0x0309, 0x05}, 
-  {0x30CC, 0xE0}, 
-  {0x31A1, 0x5A}, 
-  
-  
-  {0x0344, 0x00}, 
-  {0x0345, 0x70},
-  {0x0346, 0x01}, 
-  {0x0347, 0x74},
-  {0x0348, 0x0C}, 
-  {0x0349, 0x5D},
-  {0x034A, 0x08}, 
-  {0x034B, 0x2B},
-
-  {0x0381, 0x01}, 
-  {0x0383, 0x03}, 
-  {0x0385, 0x01}, 
-  {0x0387, 0x03}, 
-
-  {0x0401, 0x00}, 
-  {0x0405, 0x10},
-  {0x0700, 0x05}, 
-  {0x0701, 0x30},
-
-  {0x034C, 0x05}, 
-  {0x034D, 0xF8},
-  {0x034E, 0x03}, 
-  {0x034F, 0x5C},
-
-  {0x0200, 0x02}, 
-  {0x0201, 0x50},
-  {0x0202, 0x02}, 
-  {0x0203, 0x5c},
-  {0x0204, 0x00}, 
-  {0x0205, 0x20},
-  {0x0342, 0x0D}, 
-  {0x0343, 0x8E},
-#ifdef CONFIG_RAWCHIP
-  
-  {0x0340, 0x03},
-  {0x0341, 0xC0},
-#else
-  
-  {0x0340, 0x03},
-  {0x0341, 0x6C},
-#endif
-
-  
-  
-  {0x300E, 0x2D},
-  {0x31A3, 0x40},
-  {0x301A, 0xA7},
-  {0x3053, 0xCB}, 
- #else
-{0x0305, 0x04},	
-{0x0306, 0x00},	
-{0x0307, 0x98},	
-{0x0303, 0x01},	
-{0x0301, 0x05},	
-{0x030B, 0x01},	
-{0x0309, 0x05},	
-{0x30CC, 0xE0},	
-{0x31A1, 0x5A},	
-
-{0x0344, 0x00},	
-{0x0345, 0x00},
-{0x0346, 0x00},	
-{0x0347, 0xD4},
-{0x0348, 0x0C},	
-{0x0349, 0xCD},
-{0x034A, 0x08},	
-{0x034B, 0xCB},
-
-{0x0381, 0x01},	
-{0x0383, 0x03},	
-{0x0385, 0x01},	
-{0x0387, 0x07},	
-
-{0x0401, 0x00},	
-{0x0405, 0x10},
-{0x0700, 0x05},	
-{0x0701, 0x30},
-
-{0x034C, 0x06},	
-{0x034D, 0x68},
-{0x034E, 0x01},	
-{0x034F, 0xFE},
-
-{0x0200, 0x02},	
-{0x0201, 0x50},
-{0x0202, 0x01},	
-{0x0203, 0x39},
-{0x0204, 0x00},	
-{0x0205, 0x20},
-{0x0342, 0x0D},	
-{0x0343, 0x8E},
-#ifdef CONFIG_RAWCHIP
-  {0x0340, 0x02},	
-  {0x0341, 0x22},
-#else
-  {0x0340, 0x02},	
-  {0x0341, 0x0E},
-#endif
-
-{0x300E, 0x2D},
-{0x31A3, 0x40},
-{0x301A, 0xA7},
-{0x3053, 0xCB}, 
-#endif 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_snap_settings[] = {
-	
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-
-	
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xE7},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-#ifdef CONFIG_RAWCHIP
-	{0x0340, 0x09},
-	{0x0341, 0xC4},
-#else
-	{0x0340, 0x09},
-	{0x0341, 0xC0},
-#endif
-	
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0x00},
-	{0x0348, 0x0C},
-	{0x0349, 0xCF},
-	{0x034A, 0x09},
-	{0x034B, 0x9F},
-	{0x0381, 0x01},
-	{0x0383, 0x01},
-	{0x0385, 0x01},
-	{0x0387, 0x01},
-	{0x0105, 0x01}, 
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x0C},
-	{0x034D, 0xD0},
-	{0x034E, 0x09},
-	{0x034F, 0xA0},
-
-	
-	{ 0x300E , 0x29 }, 
-	{ 0x31A3 , 0x00 }, 
-	{ 0x301A , 0x77 }, 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_4_3_settings[] = {
-	
-	{0x0305, 0x04},
-	{0x0306, 0x00},
-	{0x0307, 0x98},
-	{0x0303, 0x01},
-	{0x0301, 0x05},
-	{0x030B, 0x01},
-	{0x0309, 0x05},
-	{0x30CC, 0xE0},
-	{0x31A1, 0x5A},
-
-	
-	{0x0200, 0x02},
-	{0x0201, 0x50},
-	{0x0202, 0x04},
-	{0x0203, 0xE7},
-	{0x0204, 0x00},
-	{0x0205, 0x20},
-	{0x0342, 0x0D},
-	{0x0343, 0x8E},
-#ifdef CONFIG_RAWCHIP
-	{0x0340, 0x09},
-	{0x0341, 0xC4},
-#else
-	{0x0340, 0x09},
-	{0x0341, 0xC0},
-#endif
-	
-	{0x0344, 0x00},
-	{0x0345, 0x00},
-	{0x0346, 0x00},
-	{0x0347, 0x00},
-	{0x0348, 0x0C},
-	{0x0349, 0xCF},
-	{0x034A, 0x09},
-	{0x034B, 0x9F},
-	{0x0381, 0x01},
-	{0x0383, 0x01},
-	{0x0385, 0x01},
-	{0x0387, 0x01},
-	{0x0105, 0x01}, 
-	{0x0401, 0x00},
-	{0x0405, 0x10},
-	{0x0700, 0x05},
-	{0x0701, 0x30},
-	{0x034C, 0x0C},
-	{0x034D, 0xD0},
-	{0x034E, 0x09},
-	{0x034F, 0xA0},
-
-	
-	{ 0x300E , 0x29 }, 
-	{ 0x31A3 , 0x00 }, 
-	{ 0x301A , 0x77 }, 
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_snap_wide_settings[] = {
-
-	{0x0305, 0x04},	
-	{0x0306, 0x00},	
-	{0x0307, 0x98},	
-	{0x0303, 0x01},	
-	{0x0301, 0x05},	
-	{0x030B, 0x01},	
-	{0x0309, 0x05},	
-	{0x30CC, 0xE0},	
-	{0x31A1, 0x5A},	
-
-	{0x0344, 0x00},	
-	{0x0345, 0x00},
-	{0x0346, 0x01},	
-	{0x0347, 0x30},
-	{0x0348, 0x0C},	
-	{0x0349, 0xCF},
-	{0x034A, 0x08},	
-	{0x034B, 0x6F},
-
-	{0x0381, 0x01},	
-	{0x0383, 0x01},	
-	{0x0385, 0x01},	
-	{0x0387, 0x01},	
-
-	{0x0105, 0x01}, 
-	{0x0401, 0x00},	
-	{0x0405, 0x10},
-	{0x0700, 0x05},	
-	{0x0701, 0x30},
-
-	{0x034C, 0x0C},	
-	{0x034D, 0xD0},
-	{0x034E, 0x07},	
-	{0x034F, 0x40},
-
-	{0x0200, 0x02},	
-	{0x0201, 0x50},
-	{0x0202, 0x04},	
-	{0x0203, 0xDB},
-	{0x0204, 0x00},	
-	{0x0205, 0x20},
-	{0x0342, 0x0D},	
-	{0x0343, 0x8E},
-#if 0
-	{0x0340, 0x07},	
-	{0x0341, 0x50},
-#else
-	{0x0340, 0x09},	
-	{0x0341, 0x60},
-#endif
-
-	{0x300E, 0x29},
-	{0x31A3, 0x00},
-	{0x301A, 0xA7},
-	{0x3053, 0xCB},	
-};
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_night_settings[] = {
-  {0x0305, 0x04},	
-  {0x0306, 0x00},	
-  {0x0307, 0x98},	
-  {0x0303, 0x01},	
-  {0x0301, 0x05},	
-  {0x030B, 0x01},	
-  {0x0309, 0x05},	
-  {0x30CC, 0xE0},	
-  {0x31A1, 0x5A},	
-
-  {0x0344, 0x00},	
-  {0x0345, 0x00},	
-  {0x0346, 0x00},	
-  {0x0347, 0x00},	
-  {0x0348, 0x0C},	
-  {0x0349, 0xCD},	
-  {0x034A, 0x09},	
-  {0x034B, 0x9F},	
-
-  {0x0381, 0x01},	
-  {0x0383, 0x03},	
-  {0x0385, 0x01},	
-  {0x0387, 0x03},	
-
-  {0x0401, 0x00},	
-  {0x0405, 0x10},	
-  {0x0700, 0x05},	
-  {0x0701, 0x30},	
-
-  {0x034C, 0x06},	
-  {0x034D, 0x68},	
-  {0x034E, 0x04},	
-  {0x034F, 0xD0},	
-
-  {0x0200, 0x02},	
-  {0x0201, 0x50},	
-  {0x0202, 0x04},	
-  {0x0203, 0xDB},	
-  {0x0204, 0x00},	
-  {0x0205, 0x20},	
-  {0x0342, 0x0D},	
-  {0x0343, 0x8E},	
-  {0x0340, 0x04},	
-  {0x0341, 0xE0},
-
-#ifdef CONFIG_RAWCHIP
-  {0x0340, 0x04},	
-  {0x0341, 0xF4},
-#else
-  {0x0340, 0x04},	
-  {0x0341, 0xE0},
-#endif
-
-
-  {0x300E, 0x2D},	
-  {0x31A3, 0x40},	
-  {0x301A, 0xA7},	
-  {0x3053, 0xCF},
-};
-
-
-static struct msm_camera_i2c_reg_conf s5k3h2yx_recommend_settings[] = {
-	{0x3000, 0x08},
-	{0x3001, 0x05},
-	{0x3002, 0x0D},
-	{0x3003, 0x21},
-	{0x3004, 0x62},
-	{0x3005, 0x0B},
-	{0x3006, 0x6D},
-	{0x3007, 0x02},
-	{0x3008, 0x62},
-	{0x3009, 0x62},
-	{0x300A, 0x41},
-	{0x300B, 0x10},
-	{0x300C, 0x21},
-	{0x300D, 0x04},
-	{0x307E, 0x03},
-	{0x307F, 0xA5},
-	{0x3080, 0x04},
-	{0x3081, 0x29},
-	{0x3082, 0x03},
-	{0x3083, 0x21},
-	{0x3011, 0x5F},
-	{0x3156, 0xE2},
-	{0x3027, 0x0E},
-	{0x300f, 0x02},
-	{0x3010, 0x10},
-	{0x3017, 0x74},
-	{0x3018, 0x00},
-	{0x3020, 0x02},
-	{0x3021, 0x24},
-	{0x3023, 0x80},
-	{0x3024, 0x04},
-	{0x3025, 0x08},
-	{0x301C, 0xD4},
-	{0x315D, 0x00},
-	
-	{0x300E, 0x29},
-	{0x31A3, 0x00},
-	{0x301A, 0xA7},
-	{0x3053, 0xCF},
-	{0x3054, 0x00},
-	{0x3055, 0x35},
-	{0x3062, 0x04},
-	{0x3063, 0x38},
-	{0x31A4, 0x04},
-	{0x3016, 0x54},
-	{0x3157, 0x02},
-	{0x3158, 0x00},
-	{0x315B, 0x02},
-	{0x315C, 0x00},
-	{0x301B, 0x05},
-	{0x3028, 0x41},
-	{0x302A, 0x00},
-	{0x3060, 0x01},
-	{0x302D, 0x19},
-	{0x302B, 0x04},
-	{0x3072, 0x13},
-	{0x3073, 0x21},
-	{0x3074, 0x82},
-	{0x3075, 0x20},
-	{0x3076, 0xA2},
-	{0x3077, 0x02},
-	{0x3078, 0x91},
-	{0x3079, 0x91},
-	{0x307A, 0x61},
-	{0x307B, 0x28},
-	{0x307C, 0x31},
-};
-
-static struct v4l2_subdev_info s5k3h2yx_subdev_info[] = {
-	{
-	.code   = V4L2_MBUS_FMT_SBGGR10_1X10,
-	.colorspace = V4L2_COLORSPACE_JPEG,
-	.fmt    = 1,
-	.order    = 0,
-	},
-	
-};
-
-static struct msm_camera_i2c_conf_array s5k3h2yx_init_conf[] = {
-	{&s5k3h2yx_mipi_settings[0],
-	ARRAY_SIZE(s5k3h2yx_mipi_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_recommend_settings[0],
-	ARRAY_SIZE(s5k3h2yx_recommend_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_pll_settings[0],
-	ARRAY_SIZE(s5k3h2yx_pll_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-};
-
-static struct msm_camera_i2c_conf_array s5k3h2yx_confs[] = {
-	{&s5k3h2yx_snap_settings[0],
-	ARRAY_SIZE(s5k3h2yx_snap_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_prev_settings[0],
-	ARRAY_SIZE(s5k3h2yx_prev_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_video_settings[0],
-	ARRAY_SIZE(s5k3h2yx_video_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_fast_video_settings[0],
-	ARRAY_SIZE(s5k3h2yx_fast_video_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_snap_wide_settings[0],
-	ARRAY_SIZE(s5k3h2yx_snap_wide_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_4_3_settings[0],
-	ARRAY_SIZE(s5k3h2yx_4_3_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-	{&s5k3h2yx_night_settings[0],
-	ARRAY_SIZE(s5k3h2yx_night_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
-};
-
-static struct msm_sensor_output_info_t s5k3h2yx_dimensions[] = {
-	{
-		.x_output = 0xCD0,
-		.y_output = 0x9A0,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x9C4,
-#else
-		.frame_length_lines = 0x9C0,
-#endif
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCF,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-		.binning_rawchip = 0x11,
-	},
-	{
-		.x_output = 0x668,
-		.y_output = 0x4D0,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x4F4,
-#else
-		.frame_length_lines = 0x4E0,
-#endif
-		.vt_pixel_clk = 129600000,
-		.op_pixel_clk = 129600000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCD,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 3,
-		.y_even_inc = 1,
-		.y_odd_inc = 3,
-		.binning_rawchip = 0x22,
-	},
-	{
-		.x_output = 0xC0C,
-		.y_output = 0x6C8,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x6EC,
-#else
-		.frame_length_lines = 0x6D8,
-#endif
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0x062,
-		.y_addr_start = 0x16C,
-		.x_addr_end = 0xC6D,
-		.y_addr_end = 0x833,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-		.binning_rawchip = 0x11,
-	},
-	{
-#if 0
-		.x_output = 0x5F8,
-		.y_output = 0x35C,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x3C0,
-#else
-		.frame_length_lines = 0x36C,
-#endif
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0x070,
-		.y_addr_start = 0x174,
-		.x_addr_end = 0xC5D,
-		.y_addr_end = 0x82B,
-		.x_even_inc = 1,
-		.x_odd_inc = 3,
-		.y_even_inc = 1,
-		.y_odd_inc = 3,
-		.binning_rawchip = 0x22,
-#else
-		.x_output = 0x668,
-		.y_output = 0x1FE,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x222,
-#else
-		.frame_length_lines = 0x20E,
-#endif
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0x0D4,
-		.x_addr_end = 0xCCD,
-		.y_addr_end = 0x8CB,
-		.x_even_inc = 1,
-		.x_odd_inc = 3,
-		.y_even_inc = 1,
-		.y_odd_inc = 7,
-		.binning_rawchip = 0x22,
-#endif 
-	},
-	{
-		.x_output = 0xCD0,
-		.y_output = 0x740,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x960,  
-#else
-		.frame_length_lines = 0x960,  
-#endif
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0x0130,
-		.x_addr_end = 0xCCF,
-		.y_addr_end = 0x86F,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-		.binning_rawchip = 0x11,
-	},
-	{
-		.x_output = 0xCD0,
-		.y_output = 0x9A0,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x9C4,
-#else
-		.frame_length_lines = 0x9C0,
-#endif
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCF,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 1,
-		.y_even_inc = 1,
-		.y_odd_inc = 1,
-		.binning_rawchip = 0x11,
-	},	
-	{
-		.x_output = 0x668,
-		.y_output = 0x4D0,
-		.line_length_pclk = 0xD8E,
-#ifdef CONFIG_RAWCHIP
-		.frame_length_lines = 0x4F4,
-#else
-		.frame_length_lines = 0x4E0,
-#endif
-		.vt_pixel_clk = 182400000,
-		.op_pixel_clk = 182400000,
-		.binning_factor = 1,
-		.x_addr_start = 0,
-		.y_addr_start = 0,
-		.x_addr_end = 0xCCD,
-		.y_addr_end = 0x99F,
-		.x_even_inc = 1,
-		.x_odd_inc = 3,
-		.y_even_inc = 1,
-		.y_odd_inc = 3,
-		.binning_rawchip = 0x22,
-	},
-};
-
-#ifdef CONFIG_ARCH_MSM8X60
-
-static struct msm_camera_csi_params s5k3h2yx_csi_params = {
-	.data_format = CSI_RAW10,
-	.lane_cnt    = 2,
-	.lane_assign = 0xe4,
-	.dpcm_scheme = 0,
-	.settle_cnt  = 0x2a,
-};
-
-static struct msm_camera_csi_params *s5k3h2yx_csi_params_array[] = {
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-};
-
-#else  
-static struct msm_camera_csid_vc_cfg s5k3h2yx_cid_cfg[] = {
-	{0, CSI_RAW10, CSI_DECODE_10BIT},
-	{1, CSI_EMBED_DATA, CSI_DECODE_8BIT},
-};
-
-static struct msm_camera_csi2_params s5k3h2yx_csi_params = {
-	.csid_params = {
-		.lane_assign = 0xe4,
-		.lane_cnt = 2,
-		.lut_params = {
-			.num_cid = 2,
-			.vc_cfg = s5k3h2yx_cid_cfg,
-		},
-	},
-	.csiphy_params = {
-		.lane_cnt = 2,
-		.settle_cnt = 0x1B,
-	},
-};
-
-static struct msm_camera_csi2_params *s5k3h2yx_csi_params_array[] = {
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params,
-	&s5k3h2yx_csi_params
-};
-#endif 
-
-static struct msm_sensor_output_reg_addr_t s5k3h2yx_reg_addr = {
-	.x_output = 0x34C,
-	.y_output = 0x34E,
-	.line_length_pclk = 0x342,
-	.frame_length_lines = 0x340,
-};
-
-static struct msm_sensor_id_info_t s5k3h2yx_id_info = {
-	.sensor_id_reg_addr = 0x0,
-	.sensor_id = 0x382B,
-};
-
-static struct msm_sensor_exp_gain_info_t s5k3h2yx_exp_gain_info = {
-	.coarse_int_time_addr = 0x202,
-	.global_gain_addr = 0x204,
-	.vert_offset = 16,
-	.min_vert = 4,  
-	.sensor_max_linecount = 65519,  
-};
-
-static uint32_t vcm_clib;
-static uint16_t vcm_clib_min,vcm_clib_med,vcm_clib_max;
-
-static void s5k3h2yx_read_vcm_clib(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t rc=0;
-	unsigned short info_value = 0;
-
-	struct msm_camera_i2c_client *s5k3h2yx_msm_camera_i2c_client = s_ctrl->sensor_i2c_client;
-
-	vcm_clib =0;
-	vcm_clib_min = 0;
-	vcm_clib_med = 0;
-	vcm_clib_max = 0;
-
-
-	pr_info("%s: sensor OTP information:\n", __func__);
-
-	
-	rc = msm_camera_i2c_write_b(s5k3h2yx_msm_camera_i2c_client, 0x3A1C, 0x00);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x3A1C fail\n", __func__);
-
-	
-	rc = msm_camera_i2c_write_b(s5k3h2yx_msm_camera_i2c_client, 0x0A00, 0x04);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x0A00 (Start) fail\n", __func__);
-
-	mdelay(4);
-
-	vcm_clib =0;
-	rc = msm_camera_i2c_write_b(s5k3h2yx_msm_camera_i2c_client, 0x0A02, 5);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x0A02 (select page %d) fail\n", __func__, 5);
-			
-	rc = msm_camera_i2c_write_b(s5k3h2yx_msm_camera_i2c_client, 0x0A00, 0x01);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x0A00: Set read mode fail\n", __func__);
-
- 	rc = msm_camera_i2c_read_b(s5k3h2yx_msm_camera_i2c_client, (0x0A04), &info_value);
-	if (rc < 0)
-		pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A04));
-	else
-		{
-		pr_info("%s: i2c_read_b 0x%x\n", __func__, info_value);
-		vcm_clib = (vcm_clib << 8) | info_value;
-		}
- 	rc = msm_camera_i2c_read_b(s5k3h2yx_msm_camera_i2c_client, (0x0A05), &info_value);
-	if (rc < 0)
-		pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A05));
-	else
-		{
-		pr_info("%s: i2c_read_b 0x%x\n", __func__, info_value);
-		vcm_clib = (vcm_clib << 8) | info_value;
-		}
-
-	
-	if(vcm_clib >> 8 == 0x03)
-		{
-		  uint32_t p;
-
-		  rc = msm_camera_i2c_read_b(s5k3h2yx_msm_camera_i2c_client, (0x0A0C), &info_value);
-		  if (rc < 0)
-			  pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A0C));
-		  else
-			  {
-			  pr_info("%s: i2c_read_b 0x%x\n", __func__, info_value);
-			  vcm_clib = (vcm_clib << 8) | info_value;
-			  }
-		  rc = msm_camera_i2c_read_b(s5k3h2yx_msm_camera_i2c_client, (0x0A0D), &info_value);
-		  if (rc < 0)
-			  pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A0D));
-		  else
-			  {
-			  pr_info("%s: i2c_read_b 0x%x\n", __func__, info_value);
-			  vcm_clib = (vcm_clib << 8) | info_value;
-			  }
-
-		  p=((vcm_clib & 0x0000FFFF) ) >> 3 ;
-		  vcm_clib_min= p - 20;
-		  vcm_clib_max= p + 26;
-		  vcm_clib_med= (vcm_clib_max + vcm_clib_min)/2 -26/4;
-		  pr_info("%s: VCM clib=0x%x, [Sharp] (p=%d) min/med/max=%d %d %d\n"
-			  , __func__, vcm_clib, p, vcm_clib_min, vcm_clib_med, vcm_clib_max);
-		}
-	else
-		{
-    		vcm_clib =0;
-    		rc = msm_camera_i2c_write_b(s5k3h2yx_msm_camera_i2c_client, 0x0A02, 16);
-    		if (rc < 0)
-    			pr_err("%s: i2c_write_b 0x0A02 (select page %d) fail\n", __func__, 16);
-    				
-    		rc = msm_camera_i2c_write_b(s5k3h2yx_msm_camera_i2c_client, 0x0A00, 0x01);
-    		if (rc < 0)
-    			pr_err("%s: i2c_write_b 0x0A00: Set read mode fail\n", __func__);
-    		
-    		rc = msm_camera_i2c_read_b(s5k3h2yx_msm_camera_i2c_client, (0x0A04), &info_value);
-    		if (rc < 0)
-    			pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A04));
-    		else
-    			{
-    			pr_info("%s: i2c_read_b 0x%x\n", __func__, info_value);
-    			vcm_clib = (vcm_clib << 8) | info_value;
-    			}
-    		rc = msm_camera_i2c_read_b(s5k3h2yx_msm_camera_i2c_client, (0x0A05), &info_value);
-    		if (rc < 0)
-    			pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A05));
-    		else
-    			{
-    			pr_info("%s: i2c_read_b 0x%x\n", __func__, info_value);
-    			vcm_clib = (vcm_clib << 8) | info_value;
-    			}
-    
-    		if(vcm_clib >> 8 == 0x04)
-    		{
-    		  uint32_t p;
-    
-    		  rc = msm_camera_i2c_read_b(s5k3h2yx_msm_camera_i2c_client, (0x0A0E), &info_value);
-    		  if (rc < 0)
-    			  pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A0E));
-    		  else
-    			  {
-    			  pr_info("%s: i2c_read_b 0x%x\n", __func__, info_value);
-    			  vcm_clib = (vcm_clib << 16) | info_value;
-    			  }
-    
-    		  p=((vcm_clib & 0x000000FF) + 0x00000080) >> 3 ;
-    		  vcm_clib_min= p - 20;
-    		  vcm_clib_max= p + 26;
-    		  vcm_clib_med= (vcm_clib_max + vcm_clib_min)/2 -26/4;
-			  pr_info("%s: VCM clib=0x%x, [Lite-On] (p=%d) min/med/max=%d %d %d\n"
-				  , __func__, vcm_clib, p, vcm_clib_min, vcm_clib_med, vcm_clib_max);
-    		}
-		}
-	if(((vcm_clib & 0x0000FFFF) == 0x0000) || (vcm_clib_min==0 && vcm_clib_med==0 && vcm_clib_max==0)
-		||(
-		     (DEFAULT_VCM_MAX < vcm_clib_max) || (DEFAULT_VCM_MAX < vcm_clib_med) || (DEFAULT_VCM_MAX < vcm_clib_min)
-		  || (DEFAULT_VCM_MIN > vcm_clib_max) || (DEFAULT_VCM_MIN > vcm_clib_med) || (DEFAULT_VCM_MIN > vcm_clib_min)
-		  || ((vcm_clib_med < vcm_clib_min) || (vcm_clib_med > vcm_clib_max))
-		))
-		{
-		  vcm_clib_min=DEFAULT_VCM_MIN;
-		  vcm_clib_med=DEFAULT_VCM_MED;
-		  vcm_clib_max=DEFAULT_VCM_MAX;
-		}
-
-
-	pr_info("%s: VCM clib=0x%x, min/med/max=%d %d %d\n"
-		, __func__, vcm_clib, vcm_clib_min, vcm_clib_med, vcm_clib_max);
-
-	return;
-
-}
-
-
-static int lens_info;	
-
-static void s5k3h2yx_read_lens_info(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t  rc;
-	int page = 0;
-	unsigned short info_value = 0, info_index = 0;
-	unsigned short  OTP[10] = {0};
-	struct msm_camera_i2c_client *s5k4e5yx_msm_camera_i2c_client = s_ctrl->sensor_i2c_client;
-
-	lens_info = 6;	
-
-	pr_info("%s\n", __func__);
-	pr_info("%s: sensor OTP information:\n", __func__);
-
-	
-	rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x3A1C, 0x00);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x3A1C fail\n", __func__);
-
-	
-	rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x04);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x0A00 (Start) fail\n", __func__);
-
-	mdelay(4);
-
-	
-	info_index = 1;
-	info_value = 0;
-	memset(OTP, 0, sizeof(OTP));
-
-	for (page = 20; page >= 16; page--) {
-		rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A02, page);
-		if (rc < 0)
-			pr_err("%s: i2c_write_b 0x0A02 (select page %d) fail\n", __func__, page);
-
-		
-		rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x01);
-		if (rc < 0)
-			pr_err("%s: i2c_write_b 0x0A00: Set read mode fail\n", __func__);
-
-		
-		rc = msm_camera_i2c_read_b(s5k4e5yx_msm_camera_i2c_client, (0x0A04 + info_index), &info_value);
-		if (rc < 0)
-			pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A04 + info_index));
-
-		 
-		if (((info_value&0x0F) != 0) || page == 0)
-			break;
-	}
-	OTP[info_index] = (short)(info_value&0x0F);
-
-	if (OTP[1] != 0) {
-		pr_info("Get Fuseid from Page20 to Page16\n");
-		goto get_done;
-	}
-
-	
-	info_index = 1;
-	info_value = 0;
-	memset(OTP, 0, sizeof(OTP));
-
-	for (page = 4; page >= 0; page--) {
-		rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A02, page);
-		if (rc < 0)
-			pr_err("%s: i2c_write_b 0x0A02 (select page %d) fail\n", __func__, page);
-
-		
-		rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x01);
-		if (rc < 0)
-			pr_err("%s: i2c_write_b 0x0A00: Set read mode fail\n", __func__);
-
-		
-		rc = msm_camera_i2c_read_b(s5k4e5yx_msm_camera_i2c_client, (0x0A04 + info_index), &info_value);
-		if (rc < 0)
-			pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A04 + info_index));
-
-		 
-		if (((info_value & 0x0F) != 0) || page == 0)
-			break;
-	}
-	OTP[info_index] = (short)(info_value&0x0F);
-
-get_done:
-	
-	rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x00);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x0A00 (Stop) fail\n", __func__);
-
-	pr_info("%s: LensID=%x\n", __func__, OTP[1]);
-
-	if (OTP[1] == 5)	
-		lens_info = OTP[1];
-
-	return;
-}
-
-static int s5k3h2yx_sensor_open_init(const struct msm_camera_sensor_info *data)
-{
-	int rc = 0;
-	uint16_t value = 0;
-
-	if (data->sensor_platform_info)
-		s5k3h2yx_s_ctrl.mirror_flip = data->sensor_platform_info->mirror_flip;
-
-	
-	if (s5k3h2yx_s_ctrl.mirror_flip == CAMERA_SENSOR_MIRROR_FLIP)
-		value = S5K3H2YX_READ_MIRROR_FLIP;
-	else if (s5k3h2yx_s_ctrl.mirror_flip == CAMERA_SENSOR_MIRROR)
-		value = S5K3H2YX_READ_MIRROR;
-	else if (s5k3h2yx_s_ctrl.mirror_flip == CAMERA_SENSOR_FLIP)
-		value = S5K3H2YX_READ_FLIP;
-	else
-		value = S5K3H2YX_READ_NORMAL_MODE;
-	msm_camera_i2c_write(s5k3h2yx_s_ctrl.sensor_i2c_client,
-		S5K3H2YX_REG_READ_MODE, value, MSM_CAMERA_I2C_BYTE_DATA);
-
-	s5k3h2yx_read_lens_info(&s5k3h2yx_s_ctrl);
-	s5k3h2yx_read_vcm_clib(&s5k3h2yx_s_ctrl);
-
-	return rc;
-}
-
-static const char *s5k3h2yxVendor = "samsung";
-static const char *s5k3h2yxNAME = "s5k3h2yx";
-static const char *s5k3h2yxSize = "8M";
-
-static ssize_t sensor_vendor_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%s %s %s\n", s5k3h2yxVendor, s5k3h2yxNAME, s5k3h2yxSize);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static ssize_t lens_info_show(struct device *dev,
-  struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%d\n", lens_info);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static ssize_t vcm_clib_show(struct device *dev,
-  struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%d\n", vcm_clib);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static ssize_t vcm_clib_min_show(struct device *dev,
-  struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%d\n", vcm_clib_min);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static ssize_t vcm_clib_med_show(struct device *dev,
-  struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%d\n", vcm_clib_med);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-
-static ssize_t vcm_clib_max_show(struct device *dev,
-  struct device_attribute *attr, char *buf)
-{
-	ssize_t ret = 0;
-
-	sprintf(buf, "%d\n", vcm_clib_max);
-	ret = strlen(buf) + 1;
-
-	return ret;
-}
-static DEVICE_ATTR(sensor, 0444, sensor_vendor_show, NULL);
-static DEVICE_ATTR(lensinfo, 0444, lens_info_show, NULL);
-static DEVICE_ATTR(vcmclib, 0444, vcm_clib_show, NULL);
-static DEVICE_ATTR(vcmclibmin, 0444, vcm_clib_min_show, NULL);
-static DEVICE_ATTR(vcmclibmed, 0444, vcm_clib_med_show, NULL);
-static DEVICE_ATTR(vcmclibmax, 0444, vcm_clib_max_show, NULL);
-
-static struct kobject *android_s5k3h2yx;
-
-static int s5k3h2yx_sysfs_init(void)
-{
-	int ret ;
-	pr_info("s5k3h2yx:kobject creat and add\n");
-	android_s5k3h2yx = kobject_create_and_add("android_camera", NULL);
-	if (android_s5k3h2yx == NULL) {
-		pr_info("s5k3h2yx_sysfs_init: subsystem_register " \
-		"failed\n");
-		ret = -ENOMEM;
-		return ret ;
-	}
-	pr_info("s5k3h2yx:sysfs_create_file\n");
-	ret = sysfs_create_file(android_s5k3h2yx, &dev_attr_sensor.attr);
-	if (ret) {
-		pr_info("s5k3h2yx_sysfs_init: sysfs_create_file " \
-		"failed\n");
-		kobject_del(android_s5k3h2yx);
-	}
-	pr_info("s5k3h2yx:sysfs_create_file lensinfo\n");
-	ret = sysfs_create_file(android_s5k3h2yx, &dev_attr_lensinfo.attr);
-	if (ret) {
-		pr_info("s5k3h2yx_sysfs_init: dev_attr_lensinfo failed\n");
-		kobject_del(android_s5k3h2yx);
-	}
-	pr_info("s5k3h2yx:sysfs_create_file vcmclib\n");
-	ret = sysfs_create_file(android_s5k3h2yx, &dev_attr_vcmclib.attr);
-	if (ret) {
-		pr_info("s5k3h2yx_sysfs_init: dev_attr_vcmclib failed\n");
-		kobject_del(android_s5k3h2yx);
-	}
-	pr_info("s5k3h2yx:sysfs_create_file vcmclibmin\n");
-	ret = sysfs_create_file(android_s5k3h2yx, &dev_attr_vcmclibmin.attr);
-	if (ret) {
-		pr_info("s5k3h2yx_sysfs_init: dev_attr_vcmclibmin failed\n");
-		kobject_del(android_s5k3h2yx);
-	}
-	pr_info("s5k3h2yx:sysfs_create_file vcmclibmed\n");
-	ret = sysfs_create_file(android_s5k3h2yx, &dev_attr_vcmclibmed.attr);
-	if (ret) {
-		pr_info("s5k3h2yx_sysfs_init: dev_attr_vcmclibmed failed\n");
-		kobject_del(android_s5k3h2yx);
-	}
-	pr_info("s5k3h2yx:sysfs_create_file vcmclibmax\n");
-	ret = sysfs_create_file(android_s5k3h2yx, &dev_attr_vcmclibmax.attr);
-	if (ret) {
-		pr_info("s5k3h2yx_sysfs_init: dev_attr_vcmclibmax failed\n");
-		kobject_del(android_s5k3h2yx);
-	}
-
-	return 0 ;
-}
-
-static struct msm_camera_i2c_client s5k3h2yx_sensor_i2c_client = {
-	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
-};
-
-int32_t s5k3h2yx_power_up(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int rc;
-	struct msm_camera_sensor_info *sdata = NULL;
-
-	pr_info("%s\n", __func__);
-	if (s_ctrl && s_ctrl->sensordata)
-		sdata = s_ctrl->sensordata;
-	else {
-		pr_err("%s: s_ctrl sensordata NULL\n", __func__);
-		return (-1);
-	}
-
-	if (sdata->camera_power_on == NULL) {
-		pr_err("sensor platform_data didnt register\n");
-		return -EIO;
-	}
-
-	if (!sdata->use_rawchip) {
-		rc = msm_camio_clk_enable(CAMIO_CAM_MCLK_CLK);
-		if (rc < 0) {
-			pr_err("%s: msm_camio_sensor_clk_on failed:%d\n",
-			 __func__, rc);
-			goto enable_mclk_failed;
-		}
-	}
-
-	rc = sdata->camera_power_on();
-	if (rc < 0) {
-		pr_err("%s failed to enable power\n", __func__);
-		goto enable_power_on_failed;
-	}
-
-	rc = msm_sensor_set_power_up(s_ctrl);
-	if (rc < 0) {
-		pr_err("%s msm_sensor_power_up failed\n", __func__);
-		goto enable_sensor_power_up_failed;
-	}
-
-	s5k3h2yx_sensor_open_init(sdata);
-	pr_info("%s end\n", __func__);
-
-	return rc;
-
-enable_sensor_power_up_failed:
-	if (sdata->camera_power_off == NULL)
-		pr_err("sensor platform_data didnt register\n");
-	else
-		sdata->camera_power_off();
-enable_power_on_failed:
-	msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-enable_mclk_failed:
-	return rc;
-}
-
-int32_t s5k3h2yx_power_down(struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int rc;
-	struct msm_camera_sensor_info *sdata = NULL;
-	pr_info("%s\n", __func__);
-
-	if (s_ctrl && s_ctrl->sensordata)
-		sdata = s_ctrl->sensordata;
-	else {
-		pr_err("%s: s_ctrl sensordata NULL\n", __func__);
-		return (-1);
-	}
-
-	if (sdata->camera_power_off == NULL) {
-		pr_err("sensor platform_data didnt register\n");
-		return -EIO;
-	}
-
-	rc = sdata->camera_power_off();
-	if (rc < 0)
-		pr_err("%s failed to disable power\n", __func__);
-
-	rc = msm_sensor_set_power_down(s_ctrl);
-	if (rc < 0)
-		pr_err("%s msm_sensor_power_down failed\n", __func__);
-
-	if (!sdata->use_rawchip) {
-		msm_camio_clk_disable(CAMIO_CAM_MCLK_CLK);
-		if (rc < 0)
-			pr_err("%s: msm_camio_sensor_clk_off failed:%d\n",
-				 __func__, rc);
-	}
-
-	return rc;
-}
-
-int32_t s5k3h2yx_i2c_probe(struct i2c_client *client,
-	const struct i2c_device_id *id)
-{
-	int	rc = 0;
-	pr_info("%s\n", __func__);
-	rc = msm_sensor_i2c_probe(client, id);
-	if(rc >= 0)
-		s5k3h2yx_sysfs_init();
-	pr_info("%s: rc(%d)\n", __func__, rc);
-	return rc;
-}
-
-static const struct i2c_device_id s5k3h2yx_i2c_id[] = {
-	{SENSOR_NAME, (kernel_ulong_t)&s5k3h2yx_s_ctrl},
-	{ }
-};
-
-static struct i2c_driver s5k3h2yx_i2c_driver = {
-	.id_table = s5k3h2yx_i2c_id,
-	.probe  = s5k3h2yx_i2c_probe,
-	.driver = {
-		.name = SENSOR_NAME,
-	},
-};
-
-static int __init msm_sensor_init_module(void)
-{
-	pr_info("%s\n", __func__);
-	return i2c_add_driver(&s5k3h2yx_i2c_driver);
-}
-
-static struct v4l2_subdev_core_ops s5k3h2yx_subdev_core_ops = {
-	.ioctl = msm_sensor_subdev_ioctl,
-	.s_power = msm_sensor_power,
-};
-
-static struct v4l2_subdev_video_ops s5k3h2yx_subdev_video_ops = {
-	.enum_mbus_fmt = msm_sensor_v4l2_enum_fmt,
-};
-
-static struct v4l2_subdev_ops s5k3h2yx_subdev_ops = {
-	.core = &s5k3h2yx_subdev_core_ops,
-	.video  = &s5k3h2yx_subdev_video_ops,
-};
-
-static int s5k3h2yx_read_fuseid(struct sensor_cfg_data *cdata,
-	struct msm_sensor_ctrl_t *s_ctrl)
-{
-	int32_t  rc;
-	int page = 0;
-	unsigned short info_value = 0, info_index = 0;
-	unsigned short  OTP[10] = {0};
-
-	struct msm_camera_i2c_client *s5k4e5yx_msm_camera_i2c_client = s_ctrl->sensor_i2c_client;
-
-	pr_info("%s: sensor OTP information:\n", __func__);
-
-	
-	rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x3A1C, 0x00);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x3A1C fail\n", __func__);
-
-	
-	rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x04);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x0A00 (Start) fail\n", __func__);
-
-	mdelay(4);
-
-	
-	for (info_index = 0; info_index < 10; info_index++) {
-		for (page = 20; page >= 16; page--) {
-			rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A02, page);
-			if (rc < 0)
-				pr_err("%s: i2c_write_b 0x0A02 (select page %d) fail\n", __func__, page);
-
-			
-			rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x01);
-			if (rc < 0)
-				pr_err("%s: i2c_write_b 0x0A00: Set read mode fail\n", __func__);
-
-			
-			rc = msm_camera_i2c_read_b(s5k4e5yx_msm_camera_i2c_client, (0x0A04 + info_index), &info_value);
-			if (rc < 0)
-				pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A04 + info_index));
-
-			 
-			if (((info_value&0x0F) != 0) || page == 0)
-				break;
-		}
-		OTP[info_index] = (short)(info_value&0x0F);
-		info_value = 0;
-	}
-
-	if (OTP[0] != 0 && OTP[1] != 0) {
-		pr_info("Get Fuseid from Page20 to Page16\n");
-		goto get_done;
-	}
-
-	
-	memset(OTP, 0, sizeof(OTP));
-	for (info_index = 0; info_index < 10; info_index++) {
-		for (page = 4; page >= 0; page--) {
-			rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A02, page);
-			if (rc < 0)
-				pr_err("%s: i2c_write_b 0x0A02 (select page %d) fail\n", __func__, page);
-
-			
-			rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x01);
-			if (rc < 0)
-				pr_err("%s: i2c_write_b 0x0A00: Set read mode fail\n", __func__);
-
-			
-			rc = msm_camera_i2c_read_b(s5k4e5yx_msm_camera_i2c_client, (0x0A04 + info_index), &info_value);
-			if (rc < 0)
-				pr_err("%s: i2c_read_b 0x%x fail\n", __func__, (0x0A04 + info_index));
-
-			 
-			if (((info_value & 0x0F) != 0) || page == 0)
-				break;
-		}
-		OTP[info_index] = (short)(info_value&0x0F);
-		info_value = 0;
-	}
-
-get_done:
-	
-	rc = msm_camera_i2c_write_b(s5k4e5yx_msm_camera_i2c_client, 0x0A00, 0x00);
-	if (rc < 0)
-		pr_err("%s: i2c_write_b 0x0A00 (Stop) fail\n", __func__);
-
-	pr_info("%s: VenderID=%x,LensID=%x,SensorID=%x%x\n", __func__,
-		OTP[0], OTP[1], OTP[2], OTP[3]);
-	pr_info("%s: ModuleFuseID= %x%x%x%x%x%x\n", __func__,
-		OTP[4], OTP[5], OTP[6], OTP[7], OTP[8], OTP[9]);
-
-    cdata->cfg.fuse.fuse_id_word1 = 0;
-    cdata->cfg.fuse.fuse_id_word2 = 0;
-	cdata->cfg.fuse.fuse_id_word3 = (OTP[0]);
-	cdata->cfg.fuse.fuse_id_word4 =
-		(OTP[4]<<20) |
-		(OTP[5]<<16) |
-		(OTP[6]<<12) |
-		(OTP[7]<<8) |
-		(OTP[8]<<4) |
-		(OTP[9]);
-
-	pr_info("s5k3h2yx: fuse->fuse_id_word1:%d\n",
-		cdata->cfg.fuse.fuse_id_word1);
-	pr_info("s5k3h2yx: fuse->fuse_id_word2:%d\n",
-		cdata->cfg.fuse.fuse_id_word2);
-	pr_info("s5k3h2yx: fuse->fuse_id_word3:0x%08x\n",
-		cdata->cfg.fuse.fuse_id_word3);
-	pr_info("s5k3h2yx: fuse->fuse_id_word4:0x%08x\n",
-		cdata->cfg.fuse.fuse_id_word4);
-	return 0;
-
-}
-static struct msm_sensor_fn_t s5k3h2yx_func_tbl = {
-	.sensor_start_stream = msm_sensor_start_stream,
-	.sensor_stop_stream = msm_sensor_stop_stream,
-	.sensor_group_hold_on = msm_sensor_group_hold_on,
-	.sensor_group_hold_off = msm_sensor_group_hold_off,
-	.sensor_set_fps = msm_sensor_set_fps,
-	.sensor_write_exp_gain_ex = msm_sensor_write_exp_gain1_ex,
-	.sensor_write_snapshot_exp_gain_ex = msm_sensor_write_exp_gain1_ex,
-#ifdef CONFIG_ARCH_MSM8X60
-	.sensor_setting = msm_sensor_setting1,
-#else
-	.sensor_setting = msm_sensor_setting,
-#endif
-	.sensor_set_sensor_mode = msm_sensor_set_sensor_mode,
-	.sensor_mode_init = msm_sensor_mode_init,
-	.sensor_get_output_info = msm_sensor_get_output_info,
-	.sensor_config = msm_sensor_config,
-	.sensor_power_up = s5k3h2yx_power_up,
-	.sensor_power_down = s5k3h2yx_power_down,
-	.sensor_i2c_read_fuseid = s5k3h2yx_read_fuseid,
-};
-
-static struct msm_sensor_reg_t s5k3h2yx_regs = {
-	.default_data_type = MSM_CAMERA_I2C_BYTE_DATA,
-	.start_stream_conf = s5k3h2yx_start_settings,
-	.start_stream_conf_size = ARRAY_SIZE(s5k3h2yx_start_settings),
-	.stop_stream_conf = s5k3h2yx_stop_settings,
-	.stop_stream_conf_size = ARRAY_SIZE(s5k3h2yx_stop_settings),
-	.group_hold_on_conf = s5k3h2yx_groupon_settings,
-	.group_hold_on_conf_size = ARRAY_SIZE(s5k3h2yx_groupon_settings),
-	.group_hold_off_conf = s5k3h2yx_groupoff_settings,
-	.group_hold_off_conf_size =
-		ARRAY_SIZE(s5k3h2yx_groupoff_settings),
-	.init_settings = &s5k3h2yx_init_conf[0],
-	.init_size = ARRAY_SIZE(s5k3h2yx_init_conf),
-	.mode_settings = &s5k3h2yx_confs[0],
-	.output_settings = &s5k3h2yx_dimensions[0],
-	.num_conf = ARRAY_SIZE(s5k3h2yx_confs),
-};
-
-static struct msm_sensor_ctrl_t s5k3h2yx_s_ctrl = {
-	.msm_sensor_reg = &s5k3h2yx_regs,
-	.sensor_i2c_client = &s5k3h2yx_sensor_i2c_client,
-	.sensor_i2c_addr = 0x20,
-	.sensor_output_reg_addr = &s5k3h2yx_reg_addr,
-	.sensor_id_info = &s5k3h2yx_id_info,
-	.sensor_exp_gain_info = &s5k3h2yx_exp_gain_info,
-	.cam_mode = MSM_SENSOR_MODE_INVALID,
-#ifdef CONFIG_ARCH_MSM8X60
-	.csic_params = &s5k3h2yx_csi_params_array[0],
-#else
-	.csi_params = &s5k3h2yx_csi_params_array[0],
-#endif
-	.msm_sensor_mutex = &s5k3h2yx_mut,
-	.sensor_i2c_driver = &s5k3h2yx_i2c_driver,
-	.sensor_v4l2_subdev_info = s5k3h2yx_subdev_info,
-	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(s5k3h2yx_subdev_info),
-	.sensor_v4l2_subdev_ops = &s5k3h2yx_subdev_ops,
-	.func_tbl = &s5k3h2yx_func_tbl,
-	.sensor_first_mutex = &s5k3h2yx_sensor_init_mut, 
-};
-
-module_init(msm_sensor_init_module);
-MODULE_DESCRIPTION("Samsung 8 MP Bayer sensor driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/video/msm/wfd/Makefile b/drivers/media/video/msm/wfd/Makefile
deleted file mode 100644
index 5decaca..0000000
--- a/drivers/media/video/msm/wfd/Makefile
+++ /dev/null
@@ -1,5 +0,0 @@
-obj-y += mdp-subdev.o
-obj-y += enc-subdev.o
-obj-y += vsg-subdev.o
-obj-y += wfd-ioctl.o
-obj-y += wfd-util.o
-- 
1.8.5.1

